REVIEW   TITLE '  R E V I E W  '
***********************************************************************
*                                                                     *
*         REVIEW - TSO COMMAND FOR EXAMINING A DATA SET               *
*                  ON A 3270 DISPLAY STATION SCREEN                   *
*                                                                     *
***********************************************************************
*
*        WRITTEN BY: BILL GODFREY, PRC (PLANNING RESEARCH CORPORATION).
*        INSTALLATION: AIR FORCE DATA SERVICES CENTER, PENTAGON.
*        DATE WRITTEN: JANUARY 19 1981.
*        DATE UPDATED: APRIL 2 2021.
*        ATTRIBUTES: RE-ENTRANT. (AMODE 24 OR 31 AND RMODE 24.)
*        LOCAL MACROS USED: DCS. (DEFINE CONSTANTS FOR SCREEN.)
*        DESCRIPTION:
*         THIS TSO COMMAND DISPLAYS A DATA SET ON A 3270 TERMINAL
*         IN FULLSCREEN MODE.
*        CONTROL SECTIONS IN THIS SOURCE FILE:
*         REVIEW   - ENTRY POINT TO PERFORM PARSING AND INITIALIZATION.
*         REVIEW2  - MAIN "BROWSE FILE DATA" PROCESSOR.
*         REVPCL   - REVIEW TSO COMMAND PARSE PARAMETER CONTROL LIST.
*         HELPCL   - FSHELP TSO COMMAND PARSE PARAMETER CONTROL LIST.
*         OUTPCL   - REVOUT TSO COMMAND PARSE PARAMETER CONTROL LIST.
*         REVDDLOC - LOCATE TIOT ENTRY.
*         REVKYPRS - PARSE SUBCOMMAND KEYWORD OPERANDS.
*         REVDASD  - PERFORM DASD DATA SET INITIALIZATION.
*
*        LOG OF CHANGES:
*         27MAR81 - ALLOW PFK DEFINITIONS TO BE CHANGED.
*         10JUL81 - IKJRLSA SOON AFTER PARSE. 'VOLUME' KEYWORD.
*                   FIXED BUG OF IKJEFF18 BEING CALLED TWICE.
*                   MISCELLANEOUS INTERNAL RESTRUCTURING OF CODE TO
*                   ALLOW FUTURE CHANGES. OLD CODE HAD USED UP ALL
*                   THREE BASE REGISTERS.
*         14JUL81 - BYPASS IKJEHDEF IF VOL SPECIFIED. ADD 'UNIT' KW.
*                   HEX SUBCOMMAND WITHOUT OPERANDS WILL FLIP-FLOP
*                   BETWEEN HEX ON AND HEX OFF. PFK9 IS NOW HEX
*                   INSTEAD OF HEX ON. PFK12 IS NO LONGER HEX OFF.
*                   SMF SUBCOMMAND WITHOUT OPERANDS WILL FLIP FLOP.
*         20JUL81 - FINDSMF SUBCOMMAND ADDED, FOR SMF RECORD TYPE.
*         29SEP81 - ACCEPT PFK 13-24 CORRESPONDING TO 1-12.
*                   FIX BUG AT CLC FOR REPLY 'FINDSMF'.
*         29JAN82 - SET UP IOPL BEFORE DOING GTSIZE/ERRTERM.
*         29JAN82 - ALLOW MEMBER TO BE SPECIFIED WITH DDNAME, SO USER
*                   CAN DO THINGS LIKE REVIEW SYSPROC(MEMBER) FILE
*                   (AND SHOW DDNAME+NNN IF CONCATENATED).
*                   REPLACE 'POINT' WITH 'FIND' TO SUPPORT
*                   CONCATENATED PDS'S.
*         18MAR82 - CALL REVSMF SUBPROGRAM TO FORMAT SMF DATA.
*  R2.0   22AUG84 - CAN NOW HANDLE ANY DSORG AND KEYS.  REVSMF
*                   SLIGHTLY ENHANCED.  ADDED STAX AND STSIZE MACROS.
*                   PFK SCROLLING MORE LIKE SPF.                GP@SECV
*         11JUN85 - COUPLE OF EXTRA CHARACTERS ADDED TO TRANSLATE TBLS.
*                   TCAM SUPPORT DROPPED.  STSIZE REPLACED BY VTAM
*                   ERASE/WRITE BECAUSE ONLY 80-BYTE LINES SUPPORTED.
*                   CAN BE UP TO 43 LINES, ALSO COLOUR.         GP@SECV
*         11SEP85 - ADD CALL TO REVCMPBF TO COMPRESS TPUT BUFFER.
         EJECT
*         12JAN86 - STSIZE AND ERASE WRITE USED TO PROPERLY HANDLE
*                   NON-80-BYTE MODE.  MODE RESTORED ON EXIT.
*                   SELECTED SMF TYPE ALSO HIGHLIGHTED IN MONOCHROME.
*                   TAPE DATA SETS NOW ALLOWED.                 GP@SECV
*  R3.0   20MAR86 - MEMBER SELECTION LIST (REVPODIR), DIR AND =X ADDED.
*                   STAX FIXED SO NOW FULLY RE-ENTRANT.         GP@SECV
*         24JUN86 - LOAD MODULE ATTRIBUTES, SORT AND ATTENTION HANDLING
*                   ADDED TO REVPODIR.                          GP@P6
*         26JUN86 - FC COMMAND ADDED FOR FIND CHARS WITHOUT FOLDING
*                   TO UPPER CASE.  REVEDIT HOOKS ADDED.        GP@P6
*         27JUN86 - ADDED REVEDIT FOR SPF EDIT OF PDS MEMBERS. AW@IDAPS
*         15AUG86 - REMOVED DEPENDENCE OF "SPF" SCROLLING ON STANDARD
*                   PFKS ('PFALSO' CODE).  ADDED ABL'S CODE FOR TSO
*                   SUBCOMMAND FROM ANOTHER VERSION OF REVIEW.  ADDED
*                   CODE TO SEARCH LPA BEFORE BLDL.  SCROLL LEFT OR
*                   RIGHT TO SHOW FIND TEXT ON SCREEN.  FOUND TEXT
*                   HIGHLIGHTED IN 7-COLOUR MODE.  FINDHEX COMMAND
*                   ADDED.  FINDCHR AN ALIAS OF FC.             GP@P6
*         28OCT86 - ADD LIMITED SUPPORT TO FINDSMF AND SMF FORMATTING
*                   FOR SYS1.MAN% VSAM FILES - ONLY SUPPORT RECORDS
*                   AT CONTROLINTERVAL START.                   GP@P6
*  R4.0   18FEB87 - RESET I/O ERROR AND NO-MEM FLAGS FOR NEW MEMBER.
*                   ADDED "FAST-PATH" FOR FIXED LENGTH RECORD NON-PDS
*                   DISK FILES AND AUTOMATIC TSOEXEC FOR TSO COMMAND.
*                   CHANGE IKJEHDEF TO IKJDFLT FOR F4.          GP@P6
*         03MAR87 - REPOSITION TAPE AFTER END-OF-FILE TO PREVENT
*                   OUT-OF-EXTENT AFTER A POINT MACRO.          GP@P6
*         10MAR87 - INCLUDE A 3480 DISPLAY MESSAGE.             GP@P6
*         19MAR87 - VALIDATE SPF DATES TO AVOID S0C7.           GP@P6
*         20MAR87 - OVERRIDE &SYSSPLV TO '1' SO MVS/XA WILL ASSEMBLE
*                   MVS/370 (AND F4) COMPATIBLE CODE.           GP@P6
*         24MAR87 - AVOID S213-04 ABEND FOR VSAM.               GP@P6
*         16JUL87 - DISPLAY HALFWORD COUNT OF NON-STANDARD DIRECTORY
*                   USER DATA OR SHOW SSI IF TWO HALFWORDS.     GP@P6
*         21JUL87 - VERIFY 7-COLOUR STATUS WITH QUERY.          GP@P6
*         13AUG87 - SUPPORT (REAL) PGM SSI AND PF12 SSI SORT.   GP@P6
*         19AUG87 - ADD ASCII AND EBCDIC COMMANDS.  REVISE B *+10,
*                   EX *-6 CODE.  HANDLE F4 AE PROGRAM ATTRIBUTES.
*                   ADD SUPPORT FOR FACOM 7-COLOUR SCREENS.  ENSURE
*                   HEADINGS ARE WHITE IN 7-COLOUR MODE.  ALLOW
*                   ZEROS AS A VALID FINDHEX ARGUMENT.          GP@P6
         EJECT
*  R5.0   15OCT87 - REMOVE 14 DIGIT LIMIT ON FINDHEX.  SHOW TTRS OF
*                   NON-RECFM U MEMBERS.  REREAD DIRECTORY AFTER SPF
*                   EDIT SAVE.  SHOW SOME DSCB DETAILS AT **END**.
*                   SHOW CURRENT VOLUME SERIAL FOR NON-PDS.  REMOVE
*                   HARD-CODING OF PF3/15.  EXTRACT VSAM LOGICAL
*                   RECORDS.  ADD 'DATA' KEYWORD.  ALLOW 'HALF'/'H'
*                   AND 'PAGE'/'P' AS VALID SCROLL AMOUNTS.  SCROLL
*                   AMOUNT EFFECTIVE IN ALL FOUR DIRECTIONS.  KEEP
*                   SAME SCROLL VALUE FOR NEW MEMBERS.  AVOID S213-20
*                   (LIKELY FOR ICF VSAM).  REPORT % INTO ALLOC'D SPACE
*                   ON ** BOTTOM ** LINE IF VSAM S/W EOF IS READ.
*                   COPIED ABL'S 'HELP' AND UPDATED 'DEBUG' CODE FROM
*                   HEL.  REDUCED CHKPT ENTRIES FROM 20 BYTES TO 8
*                   BYTES BY NOT STORING DEBLOCKING INFO (NOT NEEDED
*                   SINCE ONLY BLOCKS STARTING WITH THE BEGINNING OF
*                   A LOGICAL RECORD ARE CHECKPOINTED).  DELETE 'KEYB'
*                   COMMAND, ADD 'ON' AND 'OFF' KEYWORDS TO 'FULL'.
*                   ADD '?' SUBCOMMAND.  DON'T REPORT BLANKS AS
*                   INVALID COMMAND.  ADD RECALL COMMAND CODE.
*                   CHANGE PFK4 DEFAULT TO 'RECALL'.  ADD IMS
*                   USERDATA HANDLING TO REVPODIR.              GP@P6
*         29OCT87 - ADD REVSORTE CSECT.                         GP@P6
*  R6.0   18APR88 - ADD VVDS LOOK-UP FOR ICF VSAM COMPONENTS.  ADJUST
*                   MAXIMUM RECORD SIZE ACCORDING TO VVDS CONTENTS.
*                   HANDLE MULTI-BLOCK CI - GET CISIZE FROM VVDS.
*                   SHOW NUMBER OF LOGICAL RECORDS COUNTER FROM VVDS
*                   INSTEAD OF COLUMN NUMBERS ON TOP LINE.  HIGHLIGHT
*                   FIRST AND LAST COLUMNS OF RECORD KEYS WITH A '|'
*                   IN CHARACTER MODE (HEX OFF) ONLY, WHEN KNOWN, ON
*                   THE HEADING "RULER" LINE.  REPORT VVDS FREESPACE
*                   BYTE COUNT ON "BOTTOM OF DATA" LINE.  SUPPRESS
*                   IMBEDDED INDEX BLOCKS WHEN DETECTED.  SUPPRESS
*                   '(NULL)' DISPLAY ON EMPTY CI IF NOT YET REACHED
*                   RECORD COUNT FROM VVDS.  SIMULATE SOFTWARE EOF
*                   UPON EMPTY CI AT EXACTLY THIS RECORD COUNT.
*                   REMOVE 'ISPLINK' FROM LOAD MODULE - LOAD IT AT
*                   RUN TIME IF REQUIRED.  HANDLE PDF EDIT RETURN
*                   CODES 14 AND 16.  TREAT I/O ERROR AS END-OF-FILE,
*                   SHOWING ERROR MESSAGE ON BOTTOM LINE.  SUPPRESS
*                   'TSOEXEC' SUBTASKING ON RECURSIVE 'REVIEW' TO
*                   MAINTAIN ISPF(/PDF) EDIT AVAILABILITY.  ADDED THE
*                   'NEWTOP' COMMAND FOR LOOKING PAST I/O ERRORS.  LET
*                   'DATA' SUPPRESS "FASTPATH".  HANDLE DUP CHARACTER
*                   AS RECALL (USER REQUEST).                   GP@P6
*         19OCT88 - FIXED CAUSE OF DUPLICATE CHECKPOINT ENTRIES.
*                   USE SUPERSCRIPT FOR SMF TYPE 30 SUB-TYPES.
*                   LET 'DATA' REVIEW PDS DIRECTORY ASIS.
*                   MAKE 'SYSALLDA' DEFAULT UNIT NAME WITH VOLUME.
*                   ADD REVDIV CSECT.                           GP@P6
         EJECT
*  R7.0   21JUN89 - USE DFP 2.3 (MVS/SP2.2) AND LATER ARL RDJFCB EXIT
*                   TO FETCH ALL DATA SET NAMES FOR CONCATENATED FILES.
*                   BELL NOW SOUNDED FOR ERROR MESSAGES.  IDENTICAL
*                   CONSECUTIVE RECALL STACK ENTRIES ARE NOW
*                   SUPPRESSED.  USE CURSOR TO INDICATE FOUND DATA
*                   AS WELL AS REVERSE VIDEO.  ADD EDIT SUPPORT FOR
*                   CONCATENATED MEMBERS.  ADD BROWSE SUPPORT FOR
*                   MEMBERS SELECTED WITH A 'B'.  ADD THE 'CSR'
*                   SCROLLING AMOUNT.  DISPLAY LINK EDIT DATE ON IDR
*                   LINE WHEN REVIEWING A LOAD MODULE.  SUPPRESS USE
*                   OF TSOEXEC WHEN APF AUTHORIZED.  HANDLE DFP VSAM
*                   WHEN PHYSICAL RECORDS ARE LONGER THAN THE 4096
*                   BYTES INDICATED IN DS1BLKL IN THE VTOC.     GP@P6
*         02AUG89 - REDUCE EXPOSURE TO HDP2230 AND HDP3300 BUGS IN
*                   SVC 64 (RDJFCB) BY NOT USING THE ARL RDJFCB DCB
*                   EXIT FOR UNCONCATENATED FILES, AND ONLY USING IT
*                   UNDER MVS/XA WHEN THE JFCBS RESIDE ABOVE THE 16MB
*                   LINE.  FURTHER, ARL SUPPORT IS NOW SIMULATED BY
*                   'REVIEW' FOR CONCATENATED FILES WHENEVER ARL
*                   EXIT USAGE IS NOT ATTEMPTED.                GP@P6
*  R8.0   12OCT89 - MODIFY SYNADSW CHECKING SO DATA UP TO AN I/O
*                   ERROR CAN CONTINUE TO BE ACCESSED.          GP@P6
*         23NOV89 - ADD 'KEYS' ALIAS OF '?' (USER REQUEST) AND
*                   MAKE PF12 'RECALL' TO INCREASE ISPF SIMILARITY.
*                   PF4 IS NOW 'SMF'.                           GP@P6
*         21DEC89 - IMPROVE RECURSIVE 'REVIEW' RECOGNITION BY
*                   ALSO EXAMINING ALIASES.  FURTHER REDUCE SCREEN
*                   I/O BY OMITTING REDUNDANT COLOUR ORDERS.  NON-DATA
*                   INFO IN BRACKETS IS NOW SHOWN IN TURQUOISE.  LKED
*                   DATE MADE HIGH INTENSITY FOR MONOCHROME.  DELETE
*                   'EBCDIC' AND ADD 'ON' AND 'OFF' OPERANDS TO
*                   'ASCII'.  DUE TO PSYCHOLOGICAL PRESSURE FROM SAM
*                   GOLOB, PF1 IS NOW 'HEL'.  PF2 IS NOW 'ASCII'.
*                   HEX MODE DATA IS NOW BLUE WITH RULER ETC. NOW
*                   TURQUOISE.  WHEN REVIEWING PDS MEMBERS FROM THE
*                   'PDS' COMMAND, THE STAX IS DELETED WHEN INPUT IS
*                   NOT INHIBITED IN ORDER TO ALLOW 'PDS' TO TERMINATE
*                   REVIEWS OF LARGE MEMBER GROUPS (PROBLEM REPORTED
*                   BY SAM GOLOB).  SHOW ASM2 UPDATE DATE ON **END**
*                   LINE IF STORED IN DS1DSSN (NON-LOADLIBS ONLY).
*                   ENSURE IBM SA CODE USED FOR PC AND PS2 3270
*                   EMULATION UNDER FUJITSU'S F4 MSP.  CALL REVSORTE
*                   TO SPEED UP COLLATING SEQUENCE ("NAME") SORT FOR
*                   CONCATENATED PDS FILES.  WHEN MEMBERS SORTED IN
*                   SPFD USERID ORDER AND LOCATE STRING IS NOT AN
*                   EXACT MEMBER NAME THEN USE LOCATE STRING AS A
*                   USERID (PREFIX) FOR POSITIONING.            GP@P6
         EJECT
*         09FEB90 - FIX ABEND FLAG OFFSET IN DCB ABEND EXIT.    GP@P6
*         28FEB90 - KEEP DIRECTORY MEMBER LIST WHEN REVIEWING A
*                   MEMBER (SELECTED WITH AN 'S') SO DIRECTORY DOES
*                   NOT HAVE TO BE RE-READ (AND SORTED) WHEN END-ING
*                   BACK TO THE MEMBER LIST.  DO NOT CLOSE BPAM FILE
*                   WHEN END-ING OR DIR-ING FROM REVIEWING A MEMBER'S
*                   DATA BACK TO THE MEMBER LIST SO SUBSEQUENT REVIEWS
*                   OF MEMBERS IN THE SAME REVIEW SESSION DO NOT
*                   INVOLVE OPEN/CLOSE OVERHEAD.  ADD DS1LSTAR CHANGE
*                   DETECTION TO TRIGGER A DIRECTORY MEMBER LIST
*                   REFRESH.  HANDLE "REGION FULL" CONDITION CORRECTLY
*                   FOR CONCATENATED PDS'S.  ADD '=REFRESH' MEMBER
*                   SELECTION LIST PRIMARY COMMAND TO REFRESH LIST
*                   WITH LATEST DATA FROM DISK.  EXTERNALIZE ALL
*                   INTER-CSECT REFERENCES.  ADD REVOFFLD CSECT FOR
*                   PDS OFFLOAD TO IEBUPDTE-LIKE SEQUENTIAL FILE.
*                   ADD '=OFFLOAD' MEMBER SELECTION LIST PRIMARY
*                   COMMAND AND 'O' AND 'R' MEMBER SELECTION CODES
*                   IN SUPPORT OF OFFLOAD FUNCTION.  MEMBER LIST
*                   SCROLLING NOW USES SCROLL AMOUNT.           GP@P6
*  R9.0   04APR90 - LOAD SCROLL OFFSET INTO R0 BEFORE CALLING
*                   REVSMF, SO REVSMF CAN PROCESS LEFT AND RIGHT
*                   SCROLLING.  IF CISIZE IS 32K THEN USE 16K FOR
*                   BLKSIZE INSTEAD OF 32K (WHICH IS INVALID).
*                   CHANGE IMBEDDED SEQUENCE SET DETECTION TO SKIP
*                   THE FIRST TRACK BUT REMEMBER SIZE OF BLOCKS ON
*                   THE FIRST TRACK, AND THEN SKIP ANY TRACKS WHICH
*                   HAVE THE SAME SIZE BLOCKS.                  GP@P6
*         25JUN90 - CORRECTED CONCATENATED FILE COUNT WHEN NOT USING
*                   ARL JFCB EXIT (WAS INCLUDING FIRST DATA SET OF
*                   NEXT DD).  ADD 3390 SUPPORT TO "FASTPATH".  APF
*                   TEST FOR VSAM NOW ALSO FORCED FOR MVS/XA.  RESET
*                   F668X CHARACTER ATTRS UPON TERMINATION.     GP@P6
         EJECT
*  R10.0  23OCT90 - FORCE DISPLAY OF PHYSICAL BLOCKS FOR LINEAR VSAM
*                   (MAX LRECL=0).  HANDLE QUERY RESPONSE SPREAD OVER
*                   TWO TGETS (NON-GRAPHICS 3472 AFTER A PRINTER
*                   PORT).  IMPROVE DETECTION OF AE LKED IN REVPODIR.
*                   INCREASE MAX DIR GETMAIN FROM 3/8THS TO HALF A
*                   MEGABYTE.  REORGANIZE PHASE 2 FOR BASE REGISTER
*                   CONSTRAINT RELIEF.  SHOW LAST BLOCK ADDRESS ON
*                   ** BOTTOM OF DATA ** LINE.  ALLOW HEX DIGIT
*                   OPERAND ON COLOUR COMMAND.  INHERIT COLOURS, PFKS
*                   AND RECALL STACK WITH RECURSIVE 'REVIEW'.  SHOW
*                   PHYSICAL RELATIVE ADDRESS FOR EACH RECORD WHEN
*                   SCROLLED RIGHT PASSED MAXIMUM RECORD LENGTH.
*                   SUPPRESS TSOEXEC SUBTASKING WHEN 'TSO' REQUESTS A
*                   COMMAND BEGINNING WITH 'PDS' TO ALLOW ISPF
*                   FUNCTIONS UNDER PDS AND PDS/E.  FOR VARIABLE
*                   LENGTH RECORDS, HIGHLIGHT WHEN THE RECORD LENGTH
*                   IS BIGGER THAN THE LRECL AND FOR NON-SPANNED FILES
*                   SHOW THE LAST HALF OF THE RDW IF NOT NULL.  MAKE
*                   PFK VALUES PREFIX TYPED IN DATA.  REMOVE 'PFALSO'
*                   CODE.  ADD "DIV" TRIMMING.  SUPPORT 24 DIFFERENT
*                   PROGRAM FUNCTION KEYS.  DISPLAY DATA BYTE COUNT
*                   ON ** BOTTOM OF DATA ** LINE.  PERFORM CONSERVATIVE
*                   TRIMMING FOR DIV AREA BASED ON DISK DATA SET SIZE.
*                   ADD PROFILE (ISPPROF($$REVIEW)) TO SAVE PFK VALUES,
*                   COLOURS AND SCROLLING AMOUNT.  FORMAT TAPE LABEL
*                   INFORMATION AUTOMATICALLY WHEN REVIEWING TAPE
*                   LABELS.  ADD THE 'CAN'/'CANCEL' COMMAND.    GP@P6
*         19NOV90 - ALLOW AN UNQUOTED ASTERISK TO MEAN THE PREVIOUS
*                   SEARCH STRING FOR FIND/FINDCHR/FINDHEX.  SUPPORT
*                   THE 'FIRST'/'NEXT'/'PREV'/'LAST' OPERANDS ON ALL
*                   FIND SUBCOMMANDS.  ADD VARIABLE LENGTH DATA
*                   VALIDITY CHECKING AND SIMULATE E-O-F FROM I/O ERROR
*                   IF INVALID.  ADD THE '=EDITMEM' MEMBER LIST COMMAND
*                   SO THAT NEW MEMBERS CAN BE EDITED.  DISABLE
*                   "FASTPATH" AFTER ANY VALID 'NEWTOP' SUBCOMMAND TO
*                   AVOID I/O ERRORS.  MAKE LRECL-4 THE RIGHT-MOST
*                   COLUMN FOR VARIABLE LENGTH RECORD FILES.    GP@P6
*         06DEC90 - FIX SMALL POTENTIAL FOR S0C4 IN REVDIV.  MAKE
*                   SCROLLING DOWN WITH ** BOTTOM OF DATA ** LINE ON
*                   SCREEN MORE LIKE ISPF BROWSE.  ADD SOME CODE FOR
*                   ALLOCATING SUBSYSTEM DATA SETS WHICH MAY BE USABLE
*                   WITH PACKAGES LIKE LIBRARIAN AND/OR PANVALET.  (I
*                   DO NOT HAVE THESE PRODUCTS TO TEST IT.)  FINALLY
*                   FIX SEQUENCE SET HANDLING BY SKIPPING OVER THE
*                   FIRST TRACK OF EVERY CONTROLAREA FOR VSAM FILES
*                   WITH IMBED.  BLOCKSIZE IS NO LONGER DERIVED FROM
*                   CISIZE BUT IS READ FROM THE VVDS.           GP@P6
*         18DEC90 - FIX S0C4 ABEND IN REVDIV WHEN FIRST DATA-MODE
*                   REVIEW WAS FOR AN EMPTY OR NON-EXISTENT MEMBER
*                   OF A PDS.                                   GP@P6
         EJECT
*  R11.0  15JAN91 - DO NOT TREAT DCBTRTCH AS DCBKEYLE FOR TAPES BUT
*                   ASSUME ZERO KEYLENGTH FOR TAPE FILES.  (THIS BUG
*                   CAUSED ONLY FIRST BLOCK'S DATA TO BE SHOWN FOR
*                   SOME VARIABLE LENGTH RECORD TAPE FILES.)  A TAPE
*                   INDICATOR IS SHOWN ABOVE THE "RULER" LINE (WHEN
*                   SCROLLED LEFT MAX) SHOWING DENSITY, COMPACTION
*                   OR JUST WHETHER IT IS A 3480 OR TAPE DEPENDING
*                   UPON OS LEVEL.  A REVIEW OF VSAM WILL BE REJECTED
*                   WHEN NOT APF AUTHORIZED IF THE OS IS MVS/XA OR
*                   LATER AND THE DFP IS LATER THAN 2.3.0.      GP@P6
*         19FEB91 - FIX FIND BUGS (DETECTION AND SCROLLING) FOR
*                   VSAM (USUALLY DATA COMPONENT WITH IMBED).   GP@P6
*         26FEB91 - HANDLE OBTAIN FAILURE FOR VSAM DATA COMPONENT
*                   WITH ALTERNATE INDEX.                       GP@P6
*         13MAR91 - FINALLY FIX THE MYSTERIOUS QUERY DATA OVER
*                   TWO TGETS WITH NOEDIT=YES ON STFSMODE.
*                   (MOST OF THE NOW SUPERFLUOUS CODE CHECKING FOR
*                   BAD QUERY SUB-FIELDS REMAINS JUST IN CASE
*                   BAD DATA IS RETURNED FOR SOME REASON.)      GP@P6
*         26JUN91 - CORRECT TRACK SIZE FOR 2305-2 IN DISKTABL.
*                 - CHANGE EYE-CATCHERS FROM 10 TO 11.
*                 - AVOID SB00 ABEND ON READ OF $$REVIEW MEMBER IN
*                   ISPPROF WHEN ISPPROF HAS BIG (IE. > 3760) BLKSIZE.
*                 - TREAT BAD RESIDUAL DATA IN VSAM COMPONENT AS
*                   E-O-F, THUS AVOIDING A S0C4 ABEND.
*                 - DO NOT INCLUDE VVDS LOOK-UP BYTES IN BYTE COUNT
*                   OF DISPLAYABLE DATA FOR VSAM ON ** BOTTOM ** LINE.
*                 - DO NOT TREAT SINGLE TRACK PDSE AS OS/CATALOG.
*                 - IGNORE PDS DIRECTORY BLOCK IF LESS THAN 14 BYTES
*                   (MINIMUM ENTRY SIZE) ARE USED BECAUSE QSAM ON
*                   PDSE DIRECTORY SEEMS TO GIVE BAD BLOCK BEFORE
*                   THE FIRST GOOD BLOCK IS PRESENTED BY 2ND GET.
*                 - FLAG PDSE ON **END** MEMBER LIST LINE.
*                 - IMPROVE NON-FUJITSU TERMINAL RECOGNITION.
*                 - USE GTTERM MF=E TO FILL IN GTTERM PARAMETER LIST.
*                 - ALLOW REVIEW OF PDSE WHEN OVER 16 EXTENTS.  GP@P6
*         25SEP91 - AVOID S0C4 WHEN VOL1 IS THE ONLY TAPE LABEL.
*                 - SIMULATE PGSER R,RELEASE UNDER MSP/EXA.
*                 - ADD 'SUB'/'SUBMIT' SUBCOMMANDS.             GP@P6
*         04DEC91 - RESET ATTN FLAG IN REVEDIT BEFORE RETURN IN CASE
*                   THERE WAS A PA1 IN EDIT WHICH CAUSED REVIEW TO
*                   ONLY SHOW FIRST MEMBER IN MEMBER LIST.
*                 - ALLOW NEWTOP WITH TTR OPERAND TO ACCESS PDS DATA
*                   EVEN IF THERE ARE NO MEMBERS.  (BEFORE NEWTOP
*                   ISSUE "REV DSNAME(FRED)" FROM TSO.)         GP@P6
         EJECT
*  R12.0  05FEB92 - ALLOW ANY DFP VERSION LESS THAN VERSION 3
*                   TO READ VSAM WITHOUT APF AUTHORIZATION.
*         05MAR92 - ALTERED "FASTPATH" ACTIVATION LOGIC IF RECFM=FB
*                   - SEE COMMENTS AFTER LABEL 'PODIRX' FOR DETAILS.
*                 - UPDATE PHASE 1 MESSAGES FOR "USER FRIENDLINESS"
*                   SO IT IS OBVIOUS THAT THEY ARE ISSUED BY "REVIEW".
*                   (USER ISSUED REVIEW FOR MIGRATED VSAM DATA SET
*                   AND THOUGHT THAT THE MESSAGES INDICATED THAT
*                   HSM HAD TO BE APF AUTHORIZED!?!)            GP@P6
*         11MAR92 - MAKE 'SYSALLDA' UNIT NAME FOR VVDS LOOKUP.  GP@P6
*         03APR92 - CHANGE 'FINDSMF'/'FS' SEARCH AND HIGHLIGHTING TO
*                   HANDLE OPERAND GREATER THAN 255, IN WHICH CASE
*                   THE LAST DIGIT IS TAKEN TO BE THE SUBTYPE.  GP@P6
*         12MAY92 - SIMULATE ISPF 3278A TERMINAL HANDLING WHEN
*                   GRAPHIC ESCAPE SUPPORT DETECTED.  SHOW LINK EDIT
*                   DETAILS IN HIGH INTENSITY ON MONOCHROME SCREENS
*                   EVEN IF SENDING COLOUR IN DATA STREAM.      GP@P6
         SPACE 2
*  R13.0  19JUN92 - REMOVED MY SOURCE LINE UPDATE FLAG FROM OVER
*                   1500 NON-COMMENT SOURCE LINES.
*                 - ADDED SYMBOLIC ASSEMBLER VARIABLE FOR 'REVIEW'
*                   RELEASE NUMBER.
*                 - MOVED GTTERM/GTSIZE/STSIZE CODE TO GENERAL SCREEN
*                   INITIALIZATION ROUTINE WHICH USED TO JUST BE THE
*                   READ PARTITION (QUERY) PROCESSING.
*                 - ALTERED 'FIND' WITHOUT OPERANDS ("REPEAT FIND") SO
*                   THAT A FORWARD SEARCH WILL START AT THE TOP AFTER
*                   THE BOTTOM WAS REACHED, AND A BACKWARD SEARCH WILL
*                   START AT THE BOTTOM AFTER THE TOP WAS REACHED.
*                 - ALWAYS USE SEPARATE TPUT TO RESET AID INSTEAD OF
*                   3270DS STRUCTURED FIELD SO QUERY IS STILL DONE
*                   EVEN IF A LINE MESSAGE IS DISPLAYED AT QUERY TIME
*                   (EG.  REVIEWING A MIGRATED DATA SET).
*                 - ADDED THE '=SEQLOAD' PDS MEMBER LIST PRIMARY
*                   COMMAND.
*                 - NO LONGER COUNT RDW BYTES IN DISPLAYABLE BYTE
*                   COUNT IN '** BOTTOM OF DATA **' LINE.
*                 - ADDED NATIVE VSAM SUPPORT FOR KSDS CLUSTERS, WHICH
*                   MEANS A KSDS CAN BE REVIEWED EVEN IF IT HAS MORE
*                   THAN 16 EXTENTS AND WITHOUT APF AUTHORIZATION
*                   (IE. 'REVIEW'/'REV' RATHER THAN 'REVVSAM').
*                 - TRANSLATE UNPRINTABLES OUT OF TAPE LABEL FORMATS.
*                                                               GP@FT
*         09JUL92 - MINOR WORDING CHANGE TO MSG10 AND MSG17.    GP@FT
         EJECT
*  R14.0  24AUG92 - ONLY ACCEPT SMF SUBTYPE SEARCH FOR SYSTEM
*                   RECORD TYPES KNOWN TO HAVE SUBTYPES.
*                 - USE 'K' IN RULER IF ONLY ONE KEY COLUMN.
*                 - ADD VSAM RBA ACCESS SUPPORT TO KEYED ACCESS
*                   SUPPORT SO ESDS VSAM ACCESS IS NOW SUPPORTED.
*                   MSG17 IS NO LONGER FOR NON-KSDS CLUSTER REJECTION.
*                 - ADD CHKPTVFY ROUTINE TO DETECT FILE UPDATES
*                   DURING REVIEW (LIKE VSAM SMF DATA SETS).
*                 - ADD USER SETTING OF SMF DISPLAY COLOUR AND
*                   ENSURE HIGHLIGHTING, WARNING AND INFORMATION
*                   COLOURS ARE DIFFERENT FROM DATA COLOUR, AND
*                   ADD SYMBOLIC VARIABLES FOR DEFAULT SETTINGS OF
*                   SMF FORMAT, CHARACTER AND HEXADECIMAL COLOURS.
*                 - ADD A NEW MEANING TO 'DATA' WHICH IS TO FORCE
*                   VSAM RBA ACCESS OF KSDS CLUSTERS.           GP@FT
         SPACE 2
*  R15.0  30SEP92 - CORRECT NEWTOP LOGIC WHEN NON-ZERO OPERAND
*                   (BUG INTRODUCED WITH VSAM SUPPORT).
*                 - ADD (FIXED LENGTH RECORD) RRDS SUPPORT.
*                 - ADD VRRDS (VARIABLE LENGTH RECORD RRDS) SUPPORT.
*                 - THE "DIV" MAXIMUM GETMAIN REQUEST IS NOW HALVED
*                   TO SIX MEGABYTES, WHICH IS STILL BIGGER THAN
*                   MOST PDS MEMBERS.
*                 - MOVE LKED IDR FORMATTING INTO NEW GENERAL
*                   ESD AND IDR RECORD FORMAT ROUTINE.
*                 - ADD REVDIV CHAINED STORAGE METHOD FOR RECFM=U
*                   RECORDS TO IMPROVE STORAGE UTILIZATION.     GP@FT
*         12OCT92 - FIX CHKPTVFY ROUTINE TO NOT CHECKPOINT ANY
*                   PHYSICAL BLOCKS THAT START WITH A
*                   NON-FIRST/ONLY SPANNED RECORD SEGMENT.      GP@FT
         EJECT
*  R16.0  25JAN93 - ALLOW SMF SUBTYPE FIND FOR RECORD TYPE 96.
*                 - ADD SUPPORT FOR ANY SCREEN LINE COUNT FROM
*                   24 TO 62 AND ANY EVEN-NUMBERED COLUMN COUNT
*                   FROM 80 TO 160.  REMOVE STSIZE MACRO.
*                 - PASS BOTH SCROLL OFFSET AND SCREEN COLUMN
*                   COUNT TO REVSMF IN R0.
*                 - SUPPORT UP TO LINE 999999999 IN LINE NUMBER
*                   AND FOUND-IN-LINE MESSAGE DISPLAY.
*                 - IMPROVE HAND-SHAKING BETWEEN RECURSIVE 'REVIEW'S:
*                   - COPY QUERY RESULTS FROM OUTER 'REVIEW',
*                     SO INNER 'REVIEW' DOES NO QUERY.
*                   - PASS UPDATED PROFILE TO OUTER 'REVIEW' ON EXIT.
*                   - DO NOT TURN OFF FULLSCREEN MODE ON EXIT TO
*                     OUTER 'REVIEW'.
*                 - FIX IEV90 ASSEMBLE ERRORS REPORTED BY BRUCE
*                   LELAND.  (I WAS USING AEV90 (SLAC ASSEMBLER).)
*                 - RETAIN SAME FULL ON/OFF STATUS ACROSS MEMBER
*                   SELECTIONS VIA THE MEMBER LIST.
*                 - IF ANY PROGRAM HAS RMODE=ANY THEN ALSO SHOW
*                   TOTAL RMODE=24 SIZE AS WELL AS TOTAL PROGRAM
*                   SIZE ON **END** OF MEMBER LIST.  THIS IS TO
*                   ASSIST EVALUATING PLPA SIZE CHANGES WHEN
*                   ADDING A LOAD LIBRARY TO THE LPALST.
*                 - RESTORE 255 AS UPPER LIMIT OF FIRST 'FINDSMF'
*                   OPERAND, AND ALLOW A SECOND NUMERIC OPERAND IN
*                   0-255 RANGE TO BE THE SMF RECORD SUBTYPE.
*                   ONLY ONE BYTE IS NOW CHECKED FOR A SUBTYPE MATCH.
*                   THE SUBTYPE BYTE OFFSET IS NOW CUSTOMIZABLE FOR
*                   EACH SMF RECORD TYPE.
*                 - CHANGE KEY COLUMN INDICATORS ON RULER LINE.
*                   FIRST, LAST AND/OR ONLY IS NOW MARKED WITH A 'K'
*                   WITH HEX OFF, OR 'KS', 'KE' AND 'KK' RESPECTIVELY
*                   WITH HEX ON.  ANY PART OF THE RULER LINE CORRES-
*                   PONDING TO KEY COLUMNS IS NOW SHOWN IN RED.
*                 - NO LONGER TRANSLATE UNPRINTABLES OUT OF TAPE
*                   LABEL FORMATS BECAUSE THE DATA IS COPIED FROM THE
*                   SCREEN BUFFER WHICH HAS ALREADY BEEN TRANSLATED.
*                 - RETROFIT BRUCE LELAND'S 'HEL' COMMAND INTO THIS
*                   PROGRAM.  ('HEL' WAS ORIGINALLY DEVELOPED FROM
*                   AN EARLIER VERSION OF 'REVIEW'.)  CHANGE 'MSGS'
*                   AND 'POSIT' OPERANDS TO 'MSGID' AND 'POSITIONAL'
*                   TO MATCH TSO 'HELP' OPERANDS.  ALLOW OPERAND
*                   REQUESTS LIKE 'S013-34' AND '=X'.
*                 - MAKE RECALL INSERT CURSOR AFTER TEXT.       GP@FT
*         08FEB93 - FIX LOGIC WHEN 'HEL' UNDER 'REVIEW' UNDER
*                   ANY SORT OF 'PDS' - REPORTED BY SAM GOLOB.  GP@FT
*         03MAR93 - FIX DISPLAY OF OFFLOAD ACTIVITY MESSAGE
*                   BEFORE CALLING REVOFFLD.  IMPROVE OUTPUT DATA
*                   INTEGRITY AND NOTIFICATION WHEN OFFLOADING
*                   ALIASES AND DUPLICATE MEMBERS.              GP@FT
         EJECT
*  R17.0  03MAY93 - ADD THE 'TOP' OPERAND FOR INITIAL SPECIFICATION
*                   OF THE TOP-OF-DATA RELATIVE ADDRESS.  SO, IF
*                   TOP TTR OR BLOCK IS KNOWN BEFORE 'REVIEW' IS
*                   INVOKED THEN A 'NEWTOP' FROM WITHIN 'REVIEW'
*                   CAN BE CIRCUMVENTED.  IT ALSO ALLOWS THE
*                   REVIEWING OF DELETED MEMBERS WHEN USED BY
*                   THE 'PDSTOOLS' PRODUCT.                     GP@FT
*         14MAY93 - FIX BUG IN GETTING ESD NAME WHEN FORMATTING
*                   ZAP ID RECORDS IN "BIG" LOAD MODULES.       GP@FT
*         19MAY93 - RELOCATE PDS MEMBER DIRECTORY ENTRY
*                   FORMATTING ROUTINE IN CSECT REVPODIR TO
*                   PROVIDE BASE REGISTER CONSTRAINT RELIEF.
*                 - SUPPORT DISPLAY OF SSI FOR LOAD MODULE ALIASES.
*                 - FLAG SCLM MANAGED MEMBERS (OTHER THAN LOAD
*                   MODULES) WITH AN EQUALS (C'=') SIGN.
*                 - CHECK TPG RETURN CODE BEFORE QUERY TGET.    GP@FT
*         31MAY93 - ADD 'TTR' AS AN ALIAS OF 'TOP' FOR
*                   PDSTOOLS HANDSHAKING.  ADD 'T' AS AN ALIAS
*                   OF 'TTR'/'TOP' BECAUSE IT IS A FUNCTIONALLY
*                   UNAMBIGUOUS ABBREVIATION.  THIS 'T' ALIAS
*                   SHOULD BE REMOVED IF ANOTHER OPERAND
*                   BEGINNING WITH 'T' IS ADDED.                GP@FT
*         10JUN93 - REDUCE CHANCE OF OUT-OF-EXTENT ERRORS BY
*                   CHECKING DS1NOEPV IN REVPODIR, AND IF IT HAS
*                   CHANGED THEN CLOSE THE BPAM FILE, SO THAT IF IT
*                   IS REOPENED IT WILL HAVE ACCESS TO ALL EXTENTS.
*                 - PERFORM DIRECTORY REFRESH FOR PDSE UNCONDITIONALLY
*                   - REQUESTED BY ANN P NEE A.  DS1LSTAR CHECK DOES
*                   NOT WORK FOR A PDSE (UNLESS THE EXTENTS CHANGE).
*                   THIS REFRESH IS DONE ONLY WHEN NO SORTING WOULD
*                   BE INVOLVED (UNLESS THE REFRESH IS KNOWN TO BE
*                   REQUIRED) SO THAT RESPONSE TIMES ARE NOT TOO
*                   ELONGATED.  SORTING WOULD BE REQUIRED FOR
*                   CONCATENATED FILES, AND WHEN THE MEMBER LIST IS
*                   NOT IN MEMBER NAME COLLATING SEQUENCE.      GP@FT
         SPACE 2
*  R18.0  03AUG93 - MAKE "FASTPATH" EMPLOY TRKCALC TO GET THE BLOCKS
*                   PER TRACK INSTEAD OF A TABLE LOOK-UP AND SPECIAL
*                   CODE FOR EACH MODULO DASD TYPE.  HENCE, "FASTPATH"
*                   SHOULD NOW SUPPORT EVERY DASD TYPE GENNED INTO THE
*                   SYSTEM.  "DIV" TRIMMING SUPPORT FOR 9345 ADDED.
*                   64K TRACKS ASSUMED FOR UNKNOWN DISK TYPES.  GP@FT
*         20AUG93 - EXTRACT DB2 ROWS AS LOGICAL RECORDS WHEN
*                   REVIEWING A DB2 TABLESPACE.  ROWS ARE PRESENTED IN
*                   PHYSICAL ORDER, SO DIFFERENT TABLES COULD BE
*                   INTERMESHED UNLESS ONE TABLE PER SPACE IS OBSERVED.
*                   NO COLUMN OR DATA INTERPRETATION IS PERFORMED.
*                   CURRENTLY A 'REVVSAM' OF THE DATA COMPONENT
*                   IS REQUIRED.  USE 'DATA' TO SUPPRESS.       GP@FT
*         01SEP93 - FIX TO SUPPORT DB2 2.3 TABLESPACES.         GP@FT
*         24SEP93 - ADD ACCESS TO LINEAR CLUSTER DATA BY USING
*                   CIMODE ACCESS IF RECORD LENGTH IS ZERO.     GP@FT
*         30SEP93 - USE VSAM AS ACCESS METHOD TO ALL VSAM DATA SETS.
*                   HENCE, PATHS AND ALTERNATE INDICES CAN BE REVIEWED.
*                   IF THE DATA SET IS VSAM WITH A VTOC ENTRY (IE. A
*                   DATA OR INDEX COMPONENT) AND REVIEW IS RUNNING
*                   APF AUTHORIZED (REVVSAM) THEN BSAM WILL BE USED
*                   SO THAT VSAM DATA CAN BE BROWSED EVEN WITH BAD
*                   CATALOG/VVDS/CIDF/RDF DATA.  TO LOOK AT PAGESPACE
*                   CONTENTS USE REVVSAM WITH THE 'DATA' OPERAND.
*                   MORE-THAN-16-EXTENTS STATUS IS NOW ONLY CHECKED
*                   WHEN USING BSAM TO ACCESS VSAM.
*                 - EXTRACT DB2 ROWS WHENEVER DB2 PAGESIZE EQUALS
*                   CISIZE WHEN USING VSAM I/O.  SINCE CI SIZE IS
*                   4K, ONLY TABLESPACES WITH 4K PAGES ARE SUPPORTED.
*                   THE REVVSAM INTERFACE SUPPORTS BOTH 4K AND
*                   32K PAGE ROW EXTRACTION.                    GP@FT
*         25OCT93 - FIX REVSORTE TTR SORT CONDITION TEST.       GP@FT
*         01NOV93 - FORCE LRECL TO EQUAL BLOCKSIZE FOR FIXED
*                   LENGTH UNBLOCKED RECORDS.
*                 - FIX "CURSOR IN DATA PART OF SCREEN"
*                   DETECTION FOR ANY SCREEN WIDTH.
*                 - SHOW BAD ATTENTION IDENTIFIER IN MSG21.     GP@FT
*         22NOV93 - ADD 'FINDNOT'/'FN', 'FCN', 'FHN'/'FXN' AND
*                   'RFIND' SUBCOMMANDS.  CHANGE THE DEFAULT
*                   OF PF5 AND PF17 FROM 'FIND' TO 'RFIND'.     GP@FT
*         23NOV93 - FIX HEL SUBCOMMAND LOCATE BUG REPORTED BY
*                   'PDSTOOLS' USER VIA BRUCE LELAND.  COULD
*                   GET HELP FOR 'ABCD' WHEN 'ABC' REQUESTED.   GP@FT
*  R19.0  05JAN94 - ADD LOGREC RECORD FORMATTING.  ADD 'EREP'
*                   SUBCOMMAND TO CONTROL LOGREC RECORD FORMATTING.
*                   FIDDLE WITH DEFAULTS OF PFKS 4 (TSO), 13
*                   (TOP), 14 (BOTTOM) AND 18 (EREP).           GP@FT
*         08FEB94 - PASS BLANKS IN VOLUME SERIAL FIELD (UNLESS
*                   NON-FIRST DATA SET IN A CONCATENATION) TO ISPF
*                   WHEN EDIT/BROWSE DATA SET IS SMS-MANAGED.  THIS
*                   PREVENTS EDIT RECOVERY FAILURE WHEN THE TARGET
*                   DATA SET HAS BEEN RECALLED TO A DIFFERENT VOLUME.
*                   (SMS-MANAGED DATA SETS MUST BE CATALOGED.)  NOTE
*                   THAT THIS PROBLEM MAY STILL BE EXPERIENCED FOR
*                   NON-SMS DATA SETS.
*                 - MOVED SUBCOMMAND TABLE BEYOND BASE REGISTER
*                   RANGE FOR BASE REGISTER CONSTRAINT RELIEF.
*                 - ALLOW THE USE OF BPAM FOR SUBSYSTEM DATA SETS.
*                 - UPDATE MACRO FORM TO DISABLE NOTE/POINT FOR
*                   BSAM ACCESS OF SUBSYSTEM DATA SETS.
*                 - ADD A MEANING TO THE 'DATA' OPERAND WHICH IS TO
*                   FORCE USE OF BSAM (AS OPPOSED TO BPAM) TO ACCESS
*                   A SUBSYSTEM DATA SET EVEN IF A MEMBER NAME IS
*                   SPECIFED.  THE SPECIFIED MEMBER WILL BE
*                   DIRECTLY ACCESSED BUT 'MEM' WILL NOT WORK.
*                   (BSAM AND BPAM ACCESS OF LAM SUBSYSTEM DATA
*                    SETS (CA-LIBRARIAN) HAS NOW BEEN TESTED.)  GP@FT
         EJECT
*  R20.0  09MAY94 - ADD AN EXTRA '9' TO BOTNINES.
*                 - MOVE SNAP MACRO AND SNAP DCB TEMPLATES FROM
*                   MAIN CONTANTS AREA TO SNAP SUBROUTINE FOR BASE
*                   REGISTER CONSTRAINT RELIEF.
*                 - DO NOT FORCE MINIMUM SYSUT2 LRECL OF 80 WHEN
*                   '=SEQLOAD' IS ISSUED.  IT IS STILL REQUIRED BY
*                   '=OFFLOAD' FOR IEBUPDTE COMPATIBILITY.
*                 - ALLOW UP TO 9 DIGITS FOR LIST/LOCATE/UP/DOWN, AND
*                   ALLOW NO MORE THAN 5 DIGITS FOR LEFT/RIGHT.
*                 - DISALLOW 'XCTL' IF 'REVIEW' AND NOT 'HEL'.
*                 - ADD 'APPEND' AND 'CUTOFF' SUBCOMMANDS.
*                 - TIDIED UP MSG14 STUFF.                      GP@FT
*         07JUN94 - CORRECT STCKCONV MINUTES/SECONDS DISPLAY.   GP@FT
         SPACE 2
*  R21.0  05JUL94 - ADD 'ALL' OPERAND TO FIND/FINDNOT COMMANDS.
*                 - ADD 'RESET' ('RES') COMMAND.                GP@FT
*         15JUL94 - CHANGE APL/GE DEFAULT SUPPORT FROM "3278A"
*                   TO "3278T" (BETTER FOR MACLIB COMMENTS).
*                 - ADD 'DISPLAY'/'DISP' COMMAND TO TOGGLE
*                   BETWEEN "3278A" AND "3278T".                GP@FT
*  R21.1  28JUL94 - FIX BAD DISPLAY CODE FOR "3278T" WHEN NO
*                   HIGHLIGHTING SUPPORT.                       GP@FT
*  R21.2  25OCT94 - FLAG FOR UPDATED "REVSMF" SUBROUTINE.       GP@FT
         EJECT
*  R22.0  14NOV94 - FIX SCREEN HANDLING PROBLEMS:
*                   PROBLEM REPORTED BY JOHN H. KEITH FROM MIAMI
*                   IN FLORIDA:
*                     WHEN LOGGED ON TO A MODEL-5 SCREEN (27 BY 132)
*                     UNDER ISPF BUT ISPF DATA DOES NOT EXCEED 80
*                     COLUMNS ISPF PUTS THE SCREEN INTO MODEL-2 (24
*                     BY 80) MODE TO ENHANCE READABILITY.  (GOOD.)
*                     WHEN A TSO COMMAND IS ISSUED ISPF DOES A
*                     STLINENO LINE=1,MODE=OFF SO THAT WHEN THE NEXT
*                     LINE-MODE OUTPUT IS ISSUED TSO WILL DISPLAY THE
*                     OUTPUT WITH AN ERASE/WRITE ALTERNATE COMMAND
*                     WHICH WILL SET THE HARDWARE (IE. THE SCREEN) TO
*                     THE ALTERNATE (IE. 27 BY 132) SCREEN SIZE.
*                     27 BY 132) SCREEN SIZE.  (IF ISPF HAS THE SCREEN
*                     IN THE SAME SIZE AS LINE MODE SHOULD BE, THEN
*                     IT SEEMS TO ISSUE STLINENO LINE=20 (OR SO).)
*                     NOW, WHEN A TSO COMMAND INVOKES A FULLSCREEN
*                     APPLICATION FROM ISPF (MODEL-5 SCREEN IN MODEL-2
*                     MODE), THE APPLICATION (LIKE 'REVIEW' OR 'HEL')
*                     DOES A GTSIZE TO GET THE SCREEN SIZE (HENCE THE
*                     MACRO NAME), THEN TURNS ON FULLSCREEN MODE BEFORE
*                     ANY I/O TO THE SCREEN HAS OCCURRED, AND THEN
*                     SENDS OUT A DATA STREAM TO SUIT THIS SIZE.  BUT,
*                     WHILE STSIZE AND GTSIZE DEAL WITH THE SCREEN SIZE
*                     AS KNOWN BY THE SOFTWARE, THE PITY OF IT IS THAT
*                     NO-ONE TOLD THE HARDWARE.  AS A RESULT, WE GET A
*                     PROG402 OR SOME SUCH FROM TRYING TO WRITE TO A
*                     BUFFER LOCATION GREATER THAN 1,919 SO THE USER
*                     HAS TO HIT PA1, WHEREUPON TSO RESYNCHRONIZES THE
*                     H/W SCREEN SIZE TO THE S/W SCREEN SIZE.  THIS
*                     PROGRAM WILL NOW ISSUE ERASE/WRITE ALTERNATE UPON
*                     ENTRY IF THE SCREEN HAS MORE THAN 80 COLS.
*                   PROBLEM REPORTED BY DIETMAR WITZLEB AT DEET IN
*                   CANBERRA:
*                     WHEN EXITING FROM 'REVIEW' UNDER PFD ON TSS ON
*                     AN MSP SYSTEM USING A COLOUR 3270 SCREEN, PFD
*                     DATA WHICH WAS BLUE HAS TURNED GREEN.  THIS IS
*                     BECAUSE THE SCREEN WAS NOT RESET AT THE END OF
*                     FULLSCREEN MODE.  ISPF SUPPLIES COLOUR INFO FOR
*                     ITS DATA BUT PFD DOES NOT.  THIS PROGRAM WILL
*                     NOW RESET THE TERMINAL (FOR 4-COLOUR MODE) UPON
*                     EXIT WHENEVER USED ON AN MSP SYSTEM.  THIS HOLDS
*                     FOR 3270 AND 668X SCREENS.  FOR THE FULL
*                     WAFFLE, SEE THE COMMENTS AFTER THE LABEL
*                     'NOSTSIZE' IN THE SOURCE BELOW.           GP@FT
*  R22.1  15MAR95 - FIX EREP FORMATTING ERRORS FOR PRE-SP4 SYSTEMS
*                   WHICH WERE CAUSING INVALID TERMINAL DATA STREAMS.
*                 - FIX OFFLOAD LRECL AND BLKSIZE CALCULATIONS TO
*                   AVOID HALFWORD OVERFLOW.  THIS MEANS THAT SMF
*                   RECORDS CAN NOW BE CUT.                     GP@FT
         SPACE 2
*  R23.0  23MAR95 - CONVERT OUTPUT DATA TO EBCDIC FROM ASCII
*                   WHEN CUTTING RECORDS WITH 'ASCII ON'.
*                   BY PUBLIC DEMAND.                           GP@FT
         SPACE 2
*  R24.0  02MAY95 - FIX WRONG DDNAME WHEN 'DATA' USED WITH PDS
*                   DATA SETS - REPORTED BY SEVERAL USERS.
*                 - ASSUME END OF DIRECTORY WHEN MEMBER NAME IS
*                   HIGH VALUES AND TTR IS 3 NULLS.  IE. DON'T
*                   REQUIRE 4 NULLS FOR TTRN.  (GOOD FOR MSP.)
*                   (THIS STILL ALLOWS 2**64 DIFFERENT MEMBER NAMES
*                   BECAUSE AN ACTUAL MEMBER DOES NOT HAVE A 0 TTR.)
*                 - LOOK FOR TSSEXEC INSTEAD OF TSOEXEC UNDER MSP.
*                 - PERFORM QUERY UNDER MSP EVEN IF THE QUERY BIT
*                   IS OFF WHEN NO FUJITSU "SPECIALTY" FLAGS ARE
*                   RETURNED BY THE TERMTYPE MACRO.  THE MOST LIKELY
*                   TERMINAL IS A PC (OR REAL 3270) WHICH CAN DO
*                   IBM EDS BUT NOT FUJITSU EXTENSIONS.         GP@FT
         SPACE 2
*  R25.0  04AUG95 - ALLOW HEL TO HANDLE MSGID AND POSITIONAL.
*                 - XCTL TO TSO HELP FOR PUTLINE OUTPUT IF MSGID
*                   REQUESTED UNDER PDS OR PDSTOOLS.
*                 - REORGANIZE TSO PARSING MACROS TO REDUCE SIZE.
*                 - HANDLE TSO HELP )I CONTROL STATEMENTS.
*                 - SUPPRESS DISPLAY OF TSO HELP COMMENT LINES.
*                 - AVOID I/O MACROS WHEN FETCHING DATA FROM DIV.
*                 - MAKE HELP SUBCOMMAND NO LONGER SHOW PFK VALUES
*                   BUT GO DIRECTLY TO TSO HELP MEMBER CONTENTS.
*                   (USE 'KEYS' OR '?' TO SHOW CURRENT PFK VALUES.)
*                 - XCTL TO TSO HELP FOR "OFFICIAL" MESSAGES IF
*                   THE TSO HELP DATA SET APPEARS UNSUITABLE.
*                 - SUSPEND FIND/FINDNOT ALL PROCESSING TO SPEED
*                   UP SCREEN I/O RESPONSE AFTER ATTENTION.     GP@FT
*  R25.1  14SEP95 - FIX FIND/FINDNOT ALL PROCESSING IF ALREADY
*                   AT TOP.  ALLOW HEL BLANK MEMBER SELECTION.  GP@FT
*  R25.2  19OCT95 - FIX SCROLL UP BUG WITH DIV WHEN LAST LINE
*                   OF SCREEN HAS LAST RECORD OF BLOCK.  DON'T
*                   USE DIV IF PDS RECFM=VB SO THAT DIV DOESN'T
*                   OVERLAY SHORT RECORDS AT THE START OF GET'S
*                   DEBLOCKING BUFFER WITH A LONGER RECORD.     GP@FT
*  R25.3  17NOV95 - USE &HEL TO RECOGNIZE FULLSCREEN HELP
*                   INVOCATION.  ABBREVIATIONS ALLOWED BECAUSE
*                   COMPARE STOPS WHEN A BLANK IS ENCOUNTERED.  GP@FT
*  R25.4  27DEC95 - FIX RED RULER HANDLING OF KEYED FILES WHEN
*                   RKP > 0, INCLUDING WHEN DCBKEYLE IS ZERO.   GP@FT
         SPACE 2
*  R26.0  15FEB96 - ALTER MAIN DCB ABEND EXIT AND ADD DIRECTORY
*                   DCB ABEND EXIT TO TRAP OPEN ABENDS SO THAT
*                   THE DATA SET CAN BE FREED BY REVIEW BEFORE
*                   TERMINATION, AND NOT HOGGED TO HOLD UP BATCH.
*                   SECURITY ABENDS (S913) ARE CAUGHT FOR RACF,
*                   BUT NOT, IT SEEMS, ACF2.
*                 - ADD SUPPORT FOR 'FSHELP' AS ALIAS OF 'HEL'.
*                 - ADD THE '=X' AND '=CAN' MEMBER LIST COMMANDS.
*                 - ADD GENERAL RECORD FORMATTING BASED ON ASSEMBLER
*                   DS (AND DC) STATEMENTS.  THESE STATEMENTS ARE
*                   READ VIA THE (PRE-ALLOCATED) 'REVFMTS' FILE
*                   WHICH MUST BE PARTITIONED.
*                   ALSO ADD THE SUBCOMMANDS 'FORMAT'/'FMT' TO
*                   CONTROL FORMATTING ACTIVATION/DEACTIVATION,
*                   AND 'FMTVAR'/'FV' TO OVERRIDE THE DATA TYPE
*                   OF PARTICULAR DATA ITEMS (VARIABLES).       GP@FT
*  R26.1  22MAY96 - CHANGE DAYCENTI FROM 8460000 TO 8640000.
*                   (SMF RECORDS FROM 23:30 TO 24:00 WERE NOT
*                   BEING FORMATTED BY "SMF ON".)
*                 - FIX BUG WITH CUT TO E-O-F WHERE DATA PAST E-O-F
*                   WAS SHOWN AFTER CUT COMPLETED.              GP@FT
*  R26.2  29AUG96 - ADD 'REST' OPERAND TO FIND SUBCOMMAND FAMILY.
*                 - USING CODE DONATED BY BRUCE LELAND WITH SOME
*                   INPUT FROM MIKE SHAW TO DETERMINE IF DIRECTLY
*                   ATTACHED FROM ISPF OPTION 3.4, AND IF SO THEN
*                   USE THE VOLUME FROM THE DATA SET LIST IF THE
*                   DATA SET IS UNCATALOGUED.  NOTE THAT THE 3.4
*                   PROGRAM NAME OF 'ISRUDL' IS HARD-CODED.  A
*                   DASH PRECEDES THE VOLUME ON THE TOP LINE OF
*                   THE SCREEN IF THE VOLUME USED WAS COPIED
*                   FROM THE ISPF VARIABLE 'ZDLVOL'.            GP@FT
         SPACE 2
*  R27.0  13NOV96 - ADD 'EP0', 'EPXXXXXX', AND 'PG' PROGRAM
*                   ATTRIBUTES TO DIRECTORY DISPLAY.
*                 - ADD REVSRCH CSECT AND '=SEARCH' COMMAND TO
*                   INVOKE IT.  REPLACE 'O' SELECTION CODE WITH
*                   'T' TO TAG MEMBERS FOR OFFLOAD AND/OR SEARCH.
*                 - MOVE DIRECTORY DISPLAY SUBCOMMANDS TO A TABLE.
*                 - ADD '=TAGFLIP', '=RESET' AND VARIOUS ALIASES
*                   AS DIRECTORY DISPLAY SUBCOMMANDS.
*                 - IF ANY MEMBER IS TAGGED THEN PF5/17 FUNCTIONS
*                   AS 'FIND/LOCATE NEXT TAGGED MEMBER'.
*                 - LET FULLSCREEN HELP ACCESS NATIVE REVIEW (NOT
*                   ISPF) FUNCTIONS FROM DIRECTORY DISPLAY.  EG.:
*                   OFFLOAD HELP OF A SINGLE COMMAND CAN CONSOLIDATE
*                   MANY MEMBER INCLUSIONS TO A SINGLE FILE.
*                 - ADD '=HELP' FOR HELP PANEL DISPLAY.
*                 - TREAT BLOCKED KEYED FILES AS UNBLOCKED WHEN
*                   BLOCKING FACTOR IS 1 TO AVOID 2 SCREEN LINES
*                   PER RECORD.  BUG REPORTED BY BRUCE LELAND.  GP@FT
         SPACE 2
*  R28.0  04DEC96 - ADD REVPNS CSECT FOR "POINT-AND-SHOOT".
*                   PLACE THE CURSOR ON A DATA SET NAME AND
*                   INVOKE REVIEW WITHOUT OPERANDS.  NOTE THAT
*                   THIS IS TSO BASED AND NOT ISPF BASED SO IT
*                   WORKS IN LINE MODE AND FULLSCREEN MODE.
*                   UNFORTUNATELY SESSION MANAGER UPDATES THE
*                   SCREEN BEFORE REVIEW GETS CONTROL SO IT
*                   PROBABLY WON'T BE TOO USEFUL THERE.         GP@FT
*  R28.1  06JAN97 - ADD SUPPORT TO REVIEW NON-FIRST OCCURRENCES
*                   OF SAME-NAMED MEMBERS IN A CONCATENATION.   GP@FT
*  R28.2  15JAN97 - TURN OFF FULLSCREEN MODE BEFORE ISSUING A
*                   TERMINATING ERROR MESSAGE.  "POINT-N-SHOOT"
*                   LEFT TSO 'READY' PROMPT IN FULLSCREEN MODE,
*                   REQUIRING PA1 TO FIX.  REPORTED BY ABL.
*                 - LET PF5/17 FIND TOP MEMBER IF TAGGED.       GP@FT
*  R28.3  04MAR97 - AVOID S0C4/INCORROUT WITH SORT PFK AFTER
*                   =HELP BY CLEARING COMMAND FROM SELMEMNM.    GP@FT
*  R28.4  08MAY97 - DEBUG AND IMPROVE FORMAT PROCESSING,
*                   ESPECIALLY FOR SMF MACROS IN SYS1.MACLIB
*                   BY HANDLING SOME 'ORG' AND 'EQU' CASES.
*                   RDW ASSUMED TO BE IN DSECT WHEN RECFM=V(B).
*                   SEE HELP FOR 'FORMAT'/'FMT' FOR EXAMPLES.   GP@FT
         SPACE 2
*  R29.0  26JUL97 - MAKE 'FIND'/'F'/'FINDNOT' CASE INSENSITIVE.
*                   'FINDCHR'/'FC'/'FCN' REMAIN CASE SENSITIVE.
*                 - ADD 'FINDPIC'/'FP'/'FPN' SUBCOMMANDS TO SEARCH
*                   FOR PICTURE STRINGS - ISPF CONVENTIONS APPLY.
*                 - ADJUST "POINT-AND-SHOOT" TO USE INTERNAL ISPF
*                   SCREEN BUFFER IF "APPROPRIATE".
*                 - AVOID A FEW MORE UNNECESSARY TSO SCREEN
*                   CONTROL MACROS FOR RECURSIVE REVIEW SESSIONS.
*                 - ADD '=C'/'=E'/'=F'/'=REF' ABBREVIATIONS
*                   FOR MEMBER LIST SUBCOMMANDS.
*                 - MINOR COSMETICS FOR =SEARCH PANEL.
*                 - MINOR FIX IN HANDLAPL ROUTINE.
*                 - MAKE SCREENW BIG ENOUGH FOR 62 BY 160.  (ONLY
*                   4&1/2 YEARS AFTER THE SUPPORTING CODE WAS ADDED.)
*                 - ISSUE RACROUTE BEFORE OPENING NON-PRE-ALLOCATED
*                   NON-VSAM DATA SETS TO AVOID HOGGING INACCESSIBLE
*                   FILES BY AVOIDING S913 ABEND SO THAT REVIEW
*                   CAN ALSO FREE THE FILE.  THE DCB ABEND EXITS
*                   ADDED EARLIER ARE SUFFICIENT FOR RACF.      GP@GE
*  R29.1  07SEP97 - SHOW BLANKS FOR AC CODE IN MEMBER LIST IF
*                   APF DATA NOT PRESENT (<=PROGRAM OBJECTS).   GP@GE
*  R29.2  28NOV97 - DISALLOW PICTURE SEARCHES IF ASCII ON.
*                 - HANDLE CASE INSENSITIVE SEARCH FOR ASCII.
*                 - CONVERT FIND TO FINDCHR IF NO ALPHABETICS
*                   IN STRING FOR SIGNIFICANT CPU SAVINGS.
*                 - IMPROVE PDS SEARCH STATUS INDICATORS.       GP@GE
*  R29.3  11DEC97 - FIX ZAP IDR FORMATTING TO GET 2 ENTRIES ON
*                   LINE EVEN IF ESDID VALUES ARE INVALID.      GP@GE
*  R29.4  16JAN98 - IMPROVE PARSING FOR MISSING TRAILING QUOTE.
*                 - ALLOW QUOTING BY DOUBLE-QUOTES.
*                 - FIX RECURSION DETECTION.                    GP@GE
*  R29.5  23JAN98 - SHOW DCB/ACB AND @DATA ADDRESSES IN DEBUG.  GP@GE
*  R29.6  30JAN98 - ALLOW FIND OF A QUOTE CHARACTER.
*                 - FIX S0C4S WITH UNEXPECTEDLY LONG INPUT.     GP@GE
*  R29.7  10APR98 - SUPPLY SUBMIT CMD LENGTH TO PARSING.        GP@GE
*  R29.8  13MAY98 - HANDLE HIDDEN RDW FOR DSECT FORMATTING.     GP@GE
*  R29.9  21MAY98 - FIX DATA CORRUPTION CAUSED BY OVERLAY OF
*                   TRANSLATE TABLE WHEN QUERY RESPONSE IS MORE
*                   THAN 256 BYTES.  OCCURRED ON OS/2 WITH CM/2.
*                 - PASS FULL ON/OFF STATUS UP AND DOWN RECURSIVE
*                   REVIEW SESSIONS.
*                 - REPORT BIND TIME WITH NEW BINDER IDR FORMAT
*                   CREATED BY APAR OW29593.
*                 - RESET LINKAREA DCB TO AVOID S806 WITH A LINK
*                   AFTER DISPLAY OF DIRECTORY HELP PANEL.
*                 - FIX IDR DATA EXTRACTION DIV ACCESS LOGIC FLAW
*                   FOR ESD FORMATTING.  DESIGN CAPACITY LIMITATION
*                   STILL EVIDENT FOR PROGRAMS LIKE ARCCTL WHERE
*                   WHERE MANY MANY CSECTS ARE COMPILED AT ONCE.
*                 - FIX BITROT DECAY TO OFFSETS USED IN IMS PDS
*                   USER DATA PROCESSING IN MEMBER LIST ROUTINE.
*                   ** APAR RESEARCH, QUERY BUG AND IMS BUGS
*                   REPORTED BY ROB VAN RIEL AT ANZ BANK.       GP@GE
*  R29.A  22MAY98 - FIX IMS ACBLIB ENTRY LENGTH ON STORE.
*                   ALSO SHIPPED AS A ZAP.                      GP@GE
*  R29.B  29JUL98 - ADD CURSOR SELECTION IN MEMBER LIST.        GP@GE
*         07AUG98 - DELETE 'TTR' AND 'T' OPERANDS AND MAKE
*                   'TTR' AN ALIAS OF 'TOP'.                    GP@GE
*         21AUG98 - SUPPORT REVIEW OF VTOC ('FORMAT4.DSCB').
*                 - LET 'FMT ON' FORMAT VTOC WITHOUT REVFMTS.   GP@GE
*  R30.0  01SEP98 - SUPPORT PARMLIB LOGICAL SERVICE.
*                   ('REV PARMLIB F' WITH NO PARMLIB FILE.)     GP@GE
*  R30.1  28SEP98 - PREVENT CLEARING OF SCREEN WHEN RECALL
*                   ISSUED ON A WIDE SCREEN.                    GP@GE
*  R30.2  07OCT98 - FIX S0C4 ON EXIT OF RECURSIVE HELP.         GP@GE
*  R30.3  22FEB99 - TURN OFF FULLSCREEN MODE FOR RECURSIVE REVIEW
*                   SO THAT TSO PROMPTING CAN PROCESS TERMINAL INPUT.
*                 - COMMENT OUT 2 STTMPMD MACROS TO CIRCUMVENT TSO
*                   BUG FOUND IN OS/390 2.4 (INTERCOM MSGS LOST).
*                 - CHANGE 'LR' TO 'LD' FOR CESD FORMATTING BECAUSE
*                   IT IS REALLY A LABEL DEFINITION, NOT A REFERENCE.
*                 - MOVE PDS DIRECTORY FILE I/O ROUTINE IN REVPODIR
*                   FOR BASE REGISTER CONSTRAINT RELIEF.
*                 - INCREASE REVPODIR GETMAIN UPPER LIMIT FROM 512K
*                   TO 768K FOR AROUND 15,000 MEMBERS WITH SPF STATS
*                   WHICH ONE SITE HAD IN SOURCE MASTER LIBRARY.
*                 - REDUCE NAME AND TTR MEMBER LIST SORT TIME
*                   BY 10%-20% (BIGGER SORT --> BIGGER %AGE).   GP@P6
         SPACE 2
*  R31.0  06JUN99 - ADD =SETFILE COMMAND TO OVERRIDE SYSUT2 USAGE.
*                 - ADD REVLOAD CSECT FOR =PDSLOAD COMMAND.
*                   WHICH INVOKES THE PDSLOAD (OR REVLMOD) PROGRAM.
*                 - ADD REVDLNK CSECT FOR =DELINK COMMAND,
*                   WHICH INVOKES THE DELINKI PROGRAM.
*                 - SEPARATE = COMMANDS AND MEMBER SELECTION CODES
*                   HELP INTO THEIR OWN HELP PANELS.
*                 - REMOVE REVSMF CSECT INTO ITS OWN LOAD MODULE
*                   WHICH CAN RESIDE ABOVE THE LINE.
*                 - ALLOW =OFFLOAD TO PROCESS UNDEFINED RECORD
*                   FORMAT LIBRARIES.  (REVLMOD WRITTEN FOR RELOAD.)
*                 - FORMAT FIRST TRANSLATOR IDR SLOT IF SECOND SLOT
*                   HAS A ZERO JULIAN DAY.  THIS SEEMS TO BE
*                   CAUSED BY A BUG IN EXPEDITER.               GP@P6
*  R32.0  25OCT99 - ADD ZIP FILE CENTRAL DIRECTORY FORMATTING.
*                 - CHANGE 'SPACE' INSTRUCTIONS IN SOURCE CODE
*                   TO BLANK LINES.
*                 - USE UNZIP PRODUCT IF PRESENT TO ALLOW THE
*                   REVIEWING OF UNZIPPED DATA.                 GP@P6
*         30NOV99 - PROCESS ".PCX" FILES IF TSO TERMINAL HAS
*                   APPROPRIATE 3270 GRAPHICS CAPABILITY.
*                   ADD REVIMAGE CSECT TO OUTPUT RASTER OR
*                   CHARACTER (LOADED SYMBOL) GRAPHICS.
*                 - USE NOEDIT INPUT MODE ONLY FOR QUERY AND
*                   READ BUFFER PROCESSING.                     GP@P6
*         28DEC99 - ADD 'PICDATA' SUBCOMMAND.                   GP@P6
*         10JAN00 - SPEED UP DIV CHAINED RECORD STORE/RETRIEVE
*                   BY REMEMBERING PREVIOUS ACCESS DETAILS.
*                 - ADD REVGDDM CSECT TO CALL GDDM TO OUTPUT
*                   VECTOR GRAPHICS FOR PICTURE RENDERING.
*                 - REMOVE SUBROUTINE CSECTS TO REVSUBS SOURCE
*                   MEMBER TO IMPROVE SOURCE EDIT MANAGABILITY.
*                 - SPEED UP ACCESS TO UNZIPPED DATA.           GP@P6
*  R32.1  15FEB00 - FIX IMS ACBLIB OFFSET BITROT IN REVPODIR.
*                 - ADD IMS ACBLIB Y2K WINDOWING IN REVPODIR.   GP@P6
*  R32.2  27APR00 - CHANGE REVPODIR TO NOT OVERLAY A PDSE
*                   RMODE24 SIZE TOTAL WITH THE LITERAL 'PDSE'.
*                 - USE CORRECT REGISTER FOR UNZIPERX TO
*                   NEWTOP BRANCH TO FIX S0C1 ABEND.            GP@P6
*         05MAY00 - HANDLE MIXED CASE ZIPPED FILE QUALIFIERS.   GP@P6
         SPACE
*  UNLESS OTHERWISE INDICATED ALL CHANGES LISTED BELOW WERE
*                   MADE BY GREG PRICE, HANSEN CORPORATION      GP@HC
         SPACE
*  R32.3  28JUN00 - HANDLE 8K & 16K DB2 PAGES WITH "REVVSAM".
*                 - SHOW AND FORMAT DB2 ROW HEADER FIELDS.
*         13JUL00 - HANDLE ANY DB2 PAGE SIZE.
*  R33.0  15SEP00 - ADD THE REVHIST CSECT AND THE 'H' MEMBER
*                   SELECTION CODE FOR PROGRAM HISTORY DISPLAY.
*  R34.0  15OCT00 - ADD THE REVHFDIR CSECT FOR HFS DIRECTORIES.
*         23OCT00 - HANDLE SUBTYPES FOR SMF TYPES 92 AND 99.
*         31OCT00 - INTERPRET SOME DS1SMSFG BITS IN VTOC FMT.
*         08NOV00 - ADD LRECL=X (UP TO 64K) SUPPORT.
*         16NOV00 - ONLY SHOW '(NULL)' WHEN HEX OR FMT IS ON.
*                   LOAD INVOKING TSO COMMAND INTO RECALL STACK.
*                   ALLOW MIXED CASE TSO COMMAND OPERANDS.
*         04DEC00 - TEST AND FIX DB2 ROW FMT WHEN PAGE > 4K.
*                   SKIP ROW EXTRACTION WHEN THE DB2 TABLESPACE
*                   IS UNRECOGNISED OR OF AN EXOTIC TYPE.
*         15DEC00 - ADD HFS REGULAR FILE SEARCH.
*                 - ADD '/' SELECTION CODE FOR PDS(E) AND HFS.
*  R34.1  27DEC00 - FIX S0C9 WITH 'SMF' REPORTED BY SAM GOLOB.
*  R35.0  11JAN01 - ADD REVPDSE CSECT FOR PROGRAM OBJECTS.
*                 - ADD PARAMETER LIST FOR REVSRCH.
*                 - SUPPRESS DISPLAY OF ZERO EOF TTR.
*  R35.1  19JAN01 - FIX SCROLL UP OF HFS PROGRAM HISTORY.
*  R35.2  22JAN01 - SHOW STATUS FLAGS IN DEBUG DISPLAY.
*                 - RESET MAXPOINT FOR NEW MEMBER.  THIS INSTRUCTION
*                   WAS DELETED IN ERROR IN R35.0 AND CAUSED SCROLL
*                   UP BUGS FOR PDS MEMBERS (EXCEPT THE FIRST IN
*                   A REVIEW SESSION).  'NEWTOP' WAS TEMP FIX.
*  R35.3  19MAR01 - CORRECT LOGIC TO AVOID S0C1 ON PRE-XA OS.
*         23MAR01 - CLEAR NOEDIT FSMODE WHEN QUERY BIT OFF.
*         27MAR01 - LEAVE S99S99X ZERO ON PRE-XA SYSTEMS.
*         02APR01 - USE 3270 EXTENSIONS WITHOUT ACF/VTAM.
*         05APR01 - ALLOW GRAPHIC ESCAPE WITHOUT ACF/VTAM.
*         10APR01 - AVOID S0C1 ON PRE-XA 'H' MEMBER SELECTION.
*  R35.4  31AUG01 - ADD 'EDIT' AND 'BROWSE' PRIMARY COMMANDS.
*                 - CHANGE MSG MACRO TO MESG DUE TO NEW OPCODE.
*                 - RENAME 'REVEDIT' CSECT TO 'REVISPF'.
*  R35.5  25OCT01 - SHOW CURRENT SAVE AREA ADDRESSES IN DEBUG.
*         29OCT01 - ADD 'SWAP' SUBCOMMAND, MAKE IT PF21 DEFAULT.
*                 - USE ATTACH INSTEAD OF LINK FOR A 'TSO' COMMAND
*                   TO PROTECT REVIEW FROM COMMAND PROCESSOR ERRORS
*                   WHENEVER TSOEXEC/IKJEFTSR IS NOT PRESENT.
*                 - REPORT 'TSO' COMMAND COMPLETION CODE IF NOT ZERO.
*         19NOV01 - FREEPOOL QSAM BUFFERS AFTER CLOSE.
*         22NOV01 - ADD REVPQRY CSECT TO VERIFY DIALOG ENVIRONMENT.
*         27NOV01 - ADD SCREEN SIZE RESTORE ON RESHOW.
*         04DEC01 - MOVE NEWNAME CODE DUE TO BASE REGISTER CONSTRAINTS.
*         04JAN02 - ADD ISPF DIALOG FOR DATA PRESENTATION.
*                   THIS INCLUDES AN ISPF PANEL MEMBER (REVPANEL)
*                   AND AN ISPF KEYLIST MEMBER (REVKEYS).
*                 - ADD 'XISPMODE' OPERAND TO PREVENT ISPF DIALOG.
*                 - REDUCE PFK DEFAULT TABLE BY FOUR BYTES PER ENTRY
*                   TO SAVE SPACE.  IT CAN BE EXTENDED IF EVER NEEDED.
*  R36.0  11JAN02 - ACTIVATE KEYLIST DURING REVPANEL DISPLAY IF OFF.
*                 - DISCARD PRE-36.0 PFK VALUE PROFILE OVERRIDES.
*                 - PREVENT ISPF SCREEN I/O IF REVPROF NOT IN ISPPROF.
*         15JAN02 - FIX SWAPPING WHEN SESSIONS HAVE DIFFERENT AMODES.
*  R36.1  22JAN02 - FIX HEADING FORMATING UNDER ISPF WITH FMT ON.
*  R36.2  24JAN02 - FIX ABENDS WHEN SWAP TARGET IS FSHELP OR VSAM.
*  R36.3  29JAN02 - PUT NON-ASCII SUFFIXES INTO A TABLE FOR UNZIP.
*  R36.4  23APR02 - OR R5 (NOT R14) WITH $MODEBIT FOR UNZIP RETURN.
*  R36.5  27JUL02 - CHANGE FULLSIZE AND PACKSIZE FROM PL5 TO CL10.
*  R36.6  30AUG02 - FIX SUBSYS DYNALLOC BROKEN BY FORMAT4.DSCB SUPPORT.
*  R36.7  21DEC02 - FIX WIDE-SCREEN AFTER ISPF PRIMARY SIZE.    GP@P6
         EJECT
*                   CHANGES FROM HERE ON BY GP@P6
         SPACE
*  R37.0  01OCT03 - LARGE INTERNAL REORGANISATION TO ALLOW ALL
*                   REVIEW DISPLAY ENVIRONMENTS ACCESS TO FACILITIES
*                   PREVIOUSLY ONLY AVAILABLE WHEN REVIEWING FILE DATA.
*                   SUCH FACILITIES INCLUDE THE OPTION OF USING ISPF
*                   OR NATIVE TSO FOR DISPLAY AND INPUT PROCESSING
*                   INCLUDING PROGRAM FUNCTION KEYS, THE ABILITY TO
*                   ISSUE TSO COMMANDS, AND THE ABILITY TO LIST AND
*                   SWAP TO OTHER PARALLEL REVIEW SESSIONS.
*                   PROBABLY DELETED A COUPLE OF THOUSAND LINES OF
*                   DUPLICATED (REALLY TRIPLICATED) CODE, REMOVED A
*                   COUPLE OF THOUSAND MORE FROM REVIEW2 TO NEW COMMON
*                   CSECTS, BUT OVERALL L-O-C GREW BY ABOUT 1,300.
*                 - REMOVE MOST MESSAGES TO COMMON MESSAGE CSECT.
*                 - ADD 'VIEW' TO ACCESSIBLE ISPF FUNCTIONS WHENEVER
*                   'BROWSE' AND 'EDIT' ARE AVAILABLE (EXCEPT UNIX).
*                 - REMOVE FINDHEX, FINDCHR AND FINDPIC COMMANDS IN
*                   FAVOUR OF SPECIFYING THE STRING TYPE ON THE
*                   SEARCH ARGUMENT (LIKE ISPF).
*                 - ADD A SECOND COLUMN SPEC FOR COLUMN SEARCH RANGE.
*                 - ADD 'PREFIX', 'SUFFIX' AND 'WORD' OPERANDS TO FIND.
*                 - GIVE PDS/HFS SEARCH ACCESS TO NEW FIND FACILITIES.
*
*                   REVIEW CSECT LIST IS AS FOLLOWS:
*          REVIEW - ENTRY POINT TO PERFORM PARSING AND INITIALIZATION.
*         REVIEW2 - MAIN "BROWSE FILE DATA" PROCESSOR.
*          REVPCL - REVIEW TSO PARSING PARAMETERS.
*          HELPCL - FSHELP TSO PARSING PARAMETERS.
*          REVPDS - FORMERLY REVPODIR - FORMAT, DISPLAY AND NAVIGATE
*                   PDS DIRECTORIES.
*        REVSORTE - PDS DIRECTORY SORT ENHANCER.
*         REVALCO - ALLOCATE AND SERIALIZE SEQUENTIAL OUTPUT FILE.
*         REVDALO - FREE AND DEQ SEQUENTIAL OUTPUT FILE.
*        REVOFFLD - SEQUENTIALIZE PDS MEMBERS.
*         REVSRCH - SEARCH PDS MEMBERS FOR DATA.
*         REVISPF - INVOKE ISPF EDIT, BROWSE OR VIEW FUNCTIONS.
*         REVLOAD - INVOKE PDSLOAD OR REVLMOD TO LOAD NEW PDS MEMBERS.
*         REVDLNK - INVOKE DELINKI TO DELINK LOAD MODULES.
*          REVDIV - CACHE REVIEWED DATA IN VIRTUAL STORAGE.
*          REVPNS - DETERMINE POINT-AND-SHOOT DATA SET NAME.
*         REVHIST - INVOKE BINDER TO SHOW PROGRAM HISTORY.
*        REVIMAGE - SHOW PICTURE USING RASTER GRAPHICS.
*         REVGDDM - SHOW PICTURE USING VECTOR GRAPHICS.
*         REVUNIX - FORMERLY REVHFDIR - FORMAT, DISPLAY AND NAVIGATE
*                   UNIX DIRECTORIES, AND SET UP FOR UNIX DATA REVIEW.
*         REVPDSE - FORMAT, DISPLAY AND NAVIGATE PDSE PROGRAM LIBRARY
*                   DIRECTORY.
*         REVHEAD - CLEAR SCREEN BUFFER AND LOAD COMMON FIRST 2 LINES.
*         REVCOMM - PERFORM ALL TSO TERMINAL COMMUNICATION.
*         REVMSGS - COMMON AREA FOR FULLSCREEN MESSAGES.
*
*  R37.1  29OCT03 - HONOUR EBCDIC FLAG IN ZIP FILE HEADER.
*  R37.2  04NOV03 - ADD IMPLICIT EXEC SUPPORT TO 'TSO' SUBCOMMAND.
*  R37.3  06NOV03 - REPORT ZIP SIZES IN 2GB TO 4GB RANGE CORRECTLY.
*  R37.4  10NOV03 - FIX SUBMIT.
*  R37.5  20NOV03 - CHANGE UNZIP TO MINIUNZ - ALSO ALLOW FROM PRE-XA.
*                 - FIX S0C4 WHEN FIND OF FORMATTED DATA.
*                 - FIX PROGRAMMED SYMBOL PICTURE RENDERING.
*  R38.0  15JAN04 - ADD COMPON AND REVHELP VARIABLES TO NOMINATE
*                   HELP TO BE INVOKED IN ISPF AND TSO MODES.
*         29MAR04 - ADD 'UPDATE' COMMAND TO INVOKE NEW REVEDIT CSECT.
*         29APR04 - SET RECFM=FB AS INTENDED FOR LRECL=80 UNZIP.
*                 - REDUCE PARTIAL FORMAT ITEM DISPLAY AT RIGHT EDGE.
*         30APR04 - CHANGE SLASH TO DASH IN DATE DISPLAY FORMAT.
*         09MAY04 - PFK DEFAULTS: PF1='HELP' AND PF6='RCHANGE'.
*         22MAY04 - FIXED ASSEMBLE UNDER MVS 3.8J.
*  R38.1  30JUN04 - REMOVE CUT/APPEND DDNAME OPERAND - CALL REVALCO.
*         02JUL04 - CLOSE AND OPEN IN NEWTOP IF EXTENTS HAVE CHANGED.
*  R38.2  02SEP04 - FIX S0C4 INITIALIZING ISPMODE UNDER SDSF.
*         10SEP04 - LET ZIP FILENAME EXTEND TO RIGHT SIDE OF SCREEN.
*                 - ALLOW APL CHARACTERS TO BE DISPLAYED IN ISPMODE.
*  R38.4  11OCT04 - FIX S0C4 AFTER VSAM OPEN FAILURE.
*  R38.5  06NOV04 - ENSURE REVEDIT FIND PREFIX/SUFFIX/WORD ALWAYS WORK.
*  R39.0  30DEC04 - MAKE "HILITE AUTO" THE DEFAULT.
*  R39.2  29JAN05 - SPEED UP CASE-INSENSITIVE SEARCHES FROM REVSRCH.
*  R39.3  24AUG05 - FIX CSECT AMODE DISPLAY.
*                 - FIX EREP SCREEN ERRORS WHEN 370 GEN AND STCK TIME.
*                 - MOVE AROUND SOME STATUS FLAGS.
*  R39.4  11SEP05 - HANDLE VSAM RLS AND 8-BYTE EXTENDED RBA.
*  R40.0  07OCT05 - FIX S0C4 AFTER 'H' SELECTION CODE WHEN 370 GENNED.
*                   PROBLEM AND FIX REPORTED BY STEVEN BECQUER, MIAMI.
*         06MAR06 - ADD OFFLOAD AND CUT DCB ABEND PROCESSING.
*         31MAR06 - MOVE FS2 AND EDT FLAGS FROM STATUS10 TO STATUS11.
*                 - ADD '$10LIKE' FLAG FOR REVALCO NEW DATA SETS.
*                 - CHANGE V-CONS TO AD-CONS WHERE POSSIBLE.
*  R40.1  14APR06 - IGNORE 'DATA' OPERAND IF 'REVED' OF PDS.
*  R40.2  30JUN06 - ENSURE FOUND DATA SHOWN ON VISIBLE LINE.
*                   BUG REPORTED BY JAMES CAMPBELL.
*                 - FIX CURSOR SCROLL UP WHEN INVISIBLE LINES EXIST.
*                 - FIX 'DOWN CSR' WHEN DEFAULT AMOUNT IS NOT 'CSR'.
*  R40.3  02DEC06 - USE FIXED SESSION IDS, NOT RELATIVE TO CURRENT.
*                 - DO NOT MISTAKE 'FSHELP' FOR 'REVED' JUST BECAUSE
*                   BOTH HAVE 'E' AS THEIR NAME'S FOURTH CHARACTER.
*         15JAN07 - PROCESS ".BMP" FILE PICTURE DATA.
*                 - ALLOW PICTURE GRAPHICS ONLY IF 80-COLUMN DISPLAY.
*                 - MINOR FIDDLES TO ALLOW ASSEMBLE ON OS/390 2.8.
*                 - FIX NO STAX FOR REVOUT BY MOVING STAX TO SCRNINIT.
*  R40.5  10JUN07 - VBS LRECL FIDDLE FOR SYS1.MANX AND SYS1.MANY.
*                 - FLAG IF VECTOR GRAPHICS ARE NATIVE 3270.
*  R41.0  21NOV07 - ADD REVNATV CSECT.
*                 - SAVE/RESTORE CURSOR LOCATION ACROSS SESSION SWAP.
*                 - PDS MEMBER DIV NOW ONLY FOR RECFM=U TO CACHE IDRS.
*  R41.1  03DEC07 - REVEDIT FIXES.
*  R41.2  09MAR08 - TRY TO FREE SUBMIT DANGLING ALLOC UNDER MVS 3.8.
*                 - LET 'VIEW' INVOKE REVEDIT WHEN NO ISPF.
*  R41.4  15MAR08 - MORE MINOR FIDDLES WITH SYSOUT MESSAGE COLOURING.
*  R41.6  06APR08 - ADD ASSEMBLER LISTING SOURCE SYNTAX COLOURING.
*                 - LET REVPANEL SIZE OVERLAY GTSIZE RESULTS.
*         14APR08 - ADD 'INFO' SUBCOMMAND.
*  R41.7  26APR08 - GO BACK TO THE OLD (PRETTY MUCH) SCREEN SETUP
*                   LOGIC WITH RESIZE SETUP COMPLETELY IN REVPQRY.
*                 - FIX UNZIP OF RECFM=FB,LRECL=80 FILES UNDER MVS/370.
*                 - USE RECFM=FB FOR ALL BINARY (IE. NON-ASCII) UNZIPS
*                   UNLESS MINIZIP MVS DETAILS ARE PRESENT - NOTE THAT
*                   THIS WILL EXTEND THE DATA TO FILL THE LAST RECORD.
*  R41.8  28APR08 - FIX REVOUT ASSEMBLER HIGHLIGHTING FOR WIDE SCREEN.
*  R42.0  30AUG08 - ADD SUPPORT FOR DSNTYPE=LARGE.
*  R42.1  30DEC08 - SUPPORT ZIP DIRECTORY FORMAT WHEN DSNTYPE=LARGE.
*                 - CHANGE STDOUT FROM TERMINAL TO DUMMY, ALSO FREE IT.
*         02JAN09 - MOVE RECALL STACK FROM @DATA TO AFTER ID VECTOR SO
*                   ONLY ONE IS ALLOCATED FOR ALL PARALLEL SESSIONS.
*                 - CHANGE 'COPYOUT'/'APPEND' TO ONLY OUTPUT FIXED- OR
*                   VARIABLE-LENGTH RECORDS, AND TO ALLOW INPUT AND
*                   OUTPUT DCB ATTRIBUTES SUCH AS RECFM TO DIFFER, THUS
*                   SIMPLIFYING REPROCESSING RECORDS CUT FROM VSAM.
*         11JAN09 - ADD 'RTF' SUBCOMMAND.
*  R42.3  28MAR09 - CHANGE RECURSION VECTOR FORMAT - ADD SCREEN NAMES.
*                 - CHANGE PF9 DEFAULT TO 'SWAP NEXT'.
*  R43.0  02MAY09 - ADD EADSCB=OK TO OBTAIN.
*         11OCT09 - SHOW MEMBER ISPF EXTENDED STATS VV.MM.
*                 - SUPPORT QUOTED UNIX DIRECTORY NAME.
*         23OCT09 - RECOGNIZE ZIP ARCHIVES IN PDS MEMBERS.
*         06NOV09 - FIX "FASTPATH" BY FIXING 'MAXPOINT' ZEROING.
*         07NOV09 - HANDLE SCREEN SIZE CHANGE.
*         14NOV09 - THE HEX AD AND BD CODES OF HEX 41 AND 42 IN TABLE
*                   APLOFFTT HAVE BEEN CHANGED TO AD AND BD AS MOST
*                   TM3270 CLIENTS HAVE SQUARE BRACKETS AT THESE CODE
*                   POINTS NATIVELY.  THE REAL 3270 TERMINAL I USED
*                   TO WRITE THE CODE HAD SQUARE BRACKETS AT HEX 41
*                   AND 42.  THESE DAYS X'41' IS RSP - REQUIRED SPACE.
*                   THANKS TO PHIL ROBERTS.
*         22NOV09 - SUPPORT BROWSE OF DATA PRE-LOADED INTO DIV.
*         31JAN10 - IMPLEMENT STAX OWNER ADMIN LOGIC.
*         08MAR10 - CHANGE PFK2 DEFAULT TO 'SPLIT'.  SHIP 'RFE'.
*                 - DISPENSE WITH $MODEBIT - NOW 31-BIT CODE.
*  R43.1  02APR10 - ADD UNDOCUMENTED '$ADD' AND '$CUT' COMMANDS.
*  R43.2  30APR10 - FIX UCB ADDRESS ACQUISITION FROM TIOT ENTRY.
*  R43.4  16MAY10 - SUPPORT REVIEW OF EAV VTOC.
*  R43.5  30JUN10 - DO NOT USE RBCDE, USE RBCDE1 INSTEAD.
*  R43.6  19AUG10 - FIX FSHELP 'OPERANDS'/'MSGID' LIST S0C4.
*  R43.8  10APR11 - AVOID LOOP WHEN ZIP ARCHIVE IN RECFM=U PDS MEMBER.
*  R43.9  25MAR12 - INVOKE REVUSPDS CLIST FOR MVS/370 'H' AND 'M'.
*         13JUL13 - R7->R15 AT FMTSOPEN - THANKS TO MICHAEL FLEISSIG.
*  R44.0  19AUG13 - ADD ADDRESS SPACE BROWSE FOR DATA SET 'ACTIVE'.
*         14DEC13 - PROCESS GIF FILES INCL. INTERLACE AND ANIMATION.
*         27JAN14 - FIX BROWSE OF UNIX ZIP FILES.
*  R44.1  31JAN14 - FIX UNZIP WITH SETUNZ LRECL SET.
*                 - SINGLE BYTE OPERAND OF 'DISPLAY' NOW AS PER ISPF.
*                 - ADDRESS SPACE BROWSE NOW USES NORMAL 'PERIODS'.
*  R45.0  30MAR14 - SUPPORT &REL BEING UP TO 8 CHARACTERS LONG.
*                 - INCREASE $$REVIEW PROFILE SIZE FROM 1600 TO 2080.
*                 - SUPPORT ASCII CHARACTER PICTURE SEARCH.
*                 - MAKE DASD DATA SET INIT BLOCK GLOBALLY CALLABLE.
*                   RACROUTE NOW ISSUED EVEN IF SECURITY IS NOT ACF2.
*         31JUL14 - USE EDASMTAB FOR ASSEMBLER ASM SOURCE COLOUR.
*         21AUG14 - AVOID SB14-04 - DISALLOW APPEND TO PDS MEMBER.
*         22AUG14 - ADD 'SB' COMMAND - FULLSCREEN ALIAS OF 'SUBMIT'.
*                 - CHANGE PF2 DEFAULT FROM 'SPLIT' TO 'START'.
*         03SEP14 - USE DEPENDENT USINGS FOR DAPB MAPPINGS TO MYDAPB.
*         20SEP14 - CONTROL BLOCKTOKENSIZE=LARGE CODE WITH &ENVBIG.
*                 - ADD LARGE PDSE MEMBER SUPPORT.
*         22SEP14 - ACCEPT RC=4 FROM RACROUTE.
*  R45.1  07OCT14 - REDUCE SIZE OF $CONCAT TO ONE BYTE.
*                 - INHERIT SCREEN DIMENSIONS IF PARALLEL SESSION.
*         27OCT14 - CONVERT CUT PROCESSING FROM QSAM TO BSAM.
*                 - SUPPORT RFE OPTION 3.3 SEQUENTIAL COPY.
*         04NOV14 - SUPPORT RFE OPTION 3.3 MEMBER COPYING.
*  R45.2  14DEC14 - RESET FASTPATH FLAG AFTER DCB/ACB OPEN.
*                 - RAKF DOES NOT LOOK AT THE NEWER PLIST OFFSETS SO
*                   USE RACHECK INSTEAD OF RACROUTE FOR MVS 3.8.
*         19DEC14 - USE IEABRCX TO FIX Z/OS BASE COVERAGE SHORTFALL.
*  R45.4  06JAN15 - FIX LOGIC SO $$REVIEW PFK VALUES CAN BE LOADED.
*  R45.7  07FEB15 - FIX "FASTPATH" AND MEMBER OFFLOAD.
*  R46.0  07JUN15 - FIX PROFILE PFK SETTINGS LOAD WITH DISPLAY TN/T11.
*                 - MEMBER GENERATION SUPPORT CONTROLLED BY &ENVZV2.
*         23JUL15 - FIX ABEND S112-3 ($14BIG WAS SAME BIT AS $14ALT).
*         25JUL15 - ALLOW ASSEMBLE WITH FLAG(PAGE0).
*  R46.2  03JAN16 - ALLOW REVOUT OPERAND OF ASTERISK.
*         05JAN16 - TRIM TRAILING BLANKS ON COPYOUT OF PRINT DATA.
*                 - ADD 'FMTPRT' COMMAND FOR MANUAL CONTROL OF SYSOUT
*                   COLOURING AND COPYOUT TRAILING BLANKS TRUNCATION.
*         27FEB16 - ALLOW RFE TO RUN AS AN ISPF DIALOG.
*  R46.4  15APR16 - DETECT RECURSION USING PRB'S PSW, NOT PRB'S CDE.
*  R46.5  16APR16 - MOVE STRING2 TO @DATA.
*                 - PREVENT ISPF BROWSE/EDIT/VIEW SERVICE CALLS.
*         08MAY16 - POSITION CURSOR TO COMMAND'S BAD OPERAND.
*  R46.6  25JUN16 - ALLOW DOT-PREFIXED LINE LABELS, ADD LOCATE SUPPORT.
*                 - ADD REVKYPRS CSECT.
*  R46.7  09SEP16 - ALLOW ISPF BROWSE AND VIEW OF MEMBER GENERATIONS.
*  R46.8  17SEP16 - MSG+0=LEN & MSG+2=TEXT EVEN IF USING PUTLINE,
*                   SO PUTMSG LOGIC AND SOME MESSAGE WORDING CHANGED.
*                 - USE STATUS=ACCESS TO AVOID LOGGING RACF VIOLATIONS.
*         15JAN17 - ADD 2KB TO 3270 DATA STREAM BUILD AREA.
*                 - ADD 'HEXX ON/OFF' SUBCOMMAND.
*                 - ADD 'HEXR ON/OFF' SUBCOMMAND.
*                 - ADD 'HEXC ON/OFF' SUBCOMMAND.
*                 - CHANGE PF24 DEFAULT TO 'HEXC'.
*         28JAN17 - HANDLE UNIX ZIP FILE DIRECTORY SIZE UP TO 512KB.
*                 - USE RECFM=VB TO HOLD TYPICAL UNZIPPED BINARY FILE.
*  R47.0  14FEB17 - MOVE 'NAMESCRN' TO ITS OWN CSECT CALLED 'REVNAME'.
*                 - RELOCATE CALLS OF 'REVNAME' TO VARIOUS CSECTS.
*         20FEB17 - FIX HEXX DISPLAY.
*  R47.1  03MAR17 - FIX REVIEW OF TAPE - REPORTED BY PETER GLANZMANN.
*                 - ADD LARGE BLOCK INTERFACE (LBI) SUPPORT FOR TAPE.
*                 - REMOVE DCB FIDDLES FOR SYS1.LOGREC, SYS1.MANX AND
*                   SYS1.MANY.  FOR MVS 3.8 SMF DATA SETS, USER CAN
*                   ADJUST SMFPRMXX BUF VALUE IN PARMLIB AS REQUIRED.
*                 - FIX REVKYPRS LENGTH RANGE CHECK.
*                 - SUPPORT PDS SEARCH FROM RFE OPTION 3.5 (STATS).
*         06MAR17 - PREVENT UNIX 'INFO' & IMPROVE TAPE 'INFO'.
*                 - ALWAYS READ THE JFCB WHEN REVIEWING NON-VSAM.
*         11MAR17 - SHOW ET/$ENTAB AND ST/$SEGTAB WHEN APPROPRIATE.
*         12MAR17 - SUPPORT OFFLOAD OF SEGMENT OVERLAY PROGRAMS.
*  R47.2  06MAY17 - SKIP CLOSE IF OFFLOADING OR SEARCHING.
*         01JUL17 - "GMVU" AREA A-T-L IF >=ESA TO FIX LBI & BIG SCREEN.
*         04JUL17 - RESTORE I/O STACK IF NECESSARY.
*         06JUL17 - SUPPORT RFE 3.3 COPY OF SEGMENT OVERLAY PROGRAMS.
*         10JUL17 - GET EXTENT COUNT FROM DEB INSTEAD OF DSCB.
*                 - FLAG ALL DATA CACHED IF DIV-ING ALL FSHELP DATA.
*                 - INCREASE DIV INITIAL GUESS FROM 192KB TO 320KB.
*                 - CATER FOR OVER 99,999 ASSEMBLER SOURCE STATEMENTS.
*                 - CATER FOR H01 AS Z/OS TEMP DSN LLQ FOR JOB LOG.
*  R47.3  05AUG17 - FIX ASSEMBLER LISTING STATEMENT NUMBER VALIDATION.
*  R47.4  20AUG17 - ENLARGE TPUT BUFFER TO FIX LARGE SCREEN HEXX S0C4.
*  R47.5  12OCT17 - MAKE BRVSINIT AN EXTERNAL LABEL FOR REVMENU USE.
*                 - RESET STORAGE BROWSE STATUS WHEN ENDING.
*                 - SPECIFY LOC ON ALL SVC 120 GETMAINS.
*  R47.7  30OCT17 - SHOW BINARY DIGITS FOR DATA TYPE 'B' - EX PETER G.
*         07NOV17 - FIX STACK OVERLAY OF DAPL (SWAP MYSTPB & MYDAPL).
*                 - FIX FLAKEY S0C4 ABEND WHEN 'ACTIVE' BROWSE STARTS.
*                 - PASS LATEST STACK STATUS ACROSS PARALLEL SESSIONS.
*                 - AVOID LINE MODE DURING PARALLEL SESSION START/END.
*                 - USE FREEMAIN RU TO FIX Z/OS ZIP BROWSE S30A ABEND.
*         12NOV17 - ADD 'RDW' COMMAND - SUGGESTED BY PETER GLANZMANN.
*  R47.8  22NOV17 - EXTEND COMMAND AREA LENGTH FOR WIDE SCREENS.
*                 - INCREASE RECALL COMMAND LENGTH FROM 50 TO 90.
*  R47.9  29NOV17 - SUPPORT SHOWING 6-DIGIT RULER COLUMN LABELS.
*         06DEC17 - SUPPORT 8-BYTE TSO USERID AND/OR PREFIX.
*  R48.0  03JAN18 - FIX MSGDSN AFTER REVEDIT CALL FROM REVIEW BROWSE.
*         06JAN18 - USE OLD RACROUTE UNDER ACF2 IF NOT APF AUTHORIZED.
*         10JAN18 - LET FIND PREV/LAST SEARCH 1ST 4 COLS WITH RDW OFF.
*         20JAN18 - HANDLE UNIX HOME DIRECTORY REQUEST (TILDE).
*  R48.1  12MAR18 - FIX S0C4 IN ESDFRMAT WHEN AMODE=31.
*                 - FIX RDW HANDLING UNZIP FILE S0C7 GLITCH.
*                 - USE BLANK UNIT NAME FOR NEW DATA SETS INITIALLY.
*                 - USE SEPARATE EBCDIC AND ASCII PICTURE MASK
*                   TRANSLATE TABLES TO AVOID UNEXPECTED RESULTS.
*  R48.2  25MAR18 - CHANGE CSECT STATEMENTS TO RSECT STATEMENTS.
*  R48.3  01MAY18 - USE ARITHMETIC COMPARES WHEN TESTING DIVHICNT.
*         05MAY18 - FIX REVIEW2 DCB EXIT LIST MANAGEMENT.
*         15MAY18 - ADD A DCB EOV EXIT WHEN USING BSAM.
*                 - MINOR FIXES TO ASSEMBLER LISTING HIGHLIGHTING.
*                 - FIX 'NEWTOP' (NO OPERAND) FOR MULTIVOLUME BSAM.
*                 - REPORTED FILE BYTE COUNT NOW ACCURATE UP TO 4GB.
*         30MAY18 - FIX PUTMSG1 MESSAGE LENGTH HANDLING.
*                 - MOVE HILLOOP AND DOWNER COMMON CODE TO RECTODIR.
*                 - CHANGE RECORD SOURCE DISPLAY FROM TTR TO TTRK.
*         03JUN18 - INCREASE CHKPTLN TO 12 - HANDLE MULTIVOLUME SCROLL.
*         05AUG18 - ADD KEYTABFC AND FIND/CHANGE FIRST OPERAND SCAN.
*         09AUG18 - BLANK FSHELP COLS 73-80 ONLY IF NUMERIC - EX DRK.
*         17AUG18 - DETERMINE RECURSION FROM PARALLEL SESSION COUNT.
*  R48.4  27AUG18 - FIX S0C9 FROM CVB OF RZDESIZE DURING UNZIP.
*         03SEP18 - FIX HEX DATA IN HEXX DISPLAY.
*         16SEP18 - MEMBER NAME PATTERN MATCHING.
*         17SEP18 - CHANGE LA AT FREPRMLB TO L TO FIX S0C4 ON EXIT.
*  R48.5  17NOV18 - ADD SUPPORT FOR DATA SET LIST SRCHFOR COMMAND.
*  R48.6  04MAR19 - CHANGES TO REVEDIT, REVLEVL AND REVSUBS.
*  R49.0  26MAR19 - FIX 'DOWN MAX' FOR ISPF SWAP BAR, PFKSHOW, ETC.
*         30MAR19 - ADD AMODE SWITCHING FOR MVS/XA-LIKE SYSTEMS.
*         20MAR19 - ADD PARTIAL SCREEN WRITE AND TGET NOWAIT SUPPORT.
*         06JUL19 - IMPROVE LOGIC FOR ZIP Z390 AND COMMENT HANDLING.
*  R49.1  03AUG19 - CHECK FOR DCB ABEND BETWEEN WRITE AND CHECK.
*  R49.2  17AUG19 - REVCOMM/REVCMPBF FIXES FOR PARTIAL SCREEN UPDATES.
*  R49.3  12OCT19 - REVCOMM FIXES, MOVE $12RTF TO $17RTF, ADD $12CMT.
*  R49.4  23NOV19 - FIX NEWTOP FOR SEQUENTIAL DATA SETS.
*         09FEB20 - FREE GLOBAL AREA ON NON-RECURSIVE EXIT.
*         29FEB20 - FIX UNZIP EOR BOUNDARY CONDITION HANDLING.
*  R49.5  20MAR20 - FIX UNZIP EOF BOUNDARY CONDITION HANDLING.
*                 - FIX ZIP ARCHIVE COMMENT DISPLAY OVERRUN.
*  R49.6  17MAY20 - ADOPT CURRENT SCREEN ALWAYS OWNS STAX SCHEME.
*  R49.7  02JUL20 - STOP BLDL ERROR DISPLAY WITH 78-BYTE ZIP COMMENT.
*                   FIX RFIND WHEN RDW OFF SUCH AS NON-VSAM FINDSMF.
*                   SHOW FINDSMF RESULT IN REVERSE VIDEO WHEN SMF ON.
*                   DO NOT TRY TO RESHOW BAD COMMAND UNDER ISPF.
*                   RESHOW BAD COMMAND FOR MORE REASONS.
*                   MAKE $17RTF BIT DIFFERENT FROM $17S34 BIT.
*  R49.8  12SEP20 - CHANGE BIT_EXIT FREEMAIN R TO RU TO FIX S30A-14.
*  R50.0  02APR21 - ADD ZSCREEN ISPF VARIABLE SAVE AREA.
*  R50.1  07AUG21 - SHOW 'MEMBER NOT FOUND' FOR 'FIND RC=04-00'.
*                 - OS/390 2.4 IS LONG GONE, SO EMPLOY STTMPMD AGAIN.
*                 - ADD 'SM' SESSION MANAGER PROFILE SETTING.
*
***********************************************************************
         EJECT
***********************************************************************
*
*        NOTES.
*         KNOWN BUGS.
*
*          NON-PARTITIONED DISK FILES WITH FIXED-LENGTH RECORDS AND
*          NON-STANDARD BLOCKING (IMBEDDED SHORT OR MISSING BLOCKS)
*          MAY BE DISPLAYED WITH INCORRECT LINE COUNTS.  USING THE
*          'FIND' SUBCOMMAND FROM THE TOP OR SCROLLING DOWN BY A
*          PAGE OR LESS AT A TIME WILL ENSURE A CORRECT LINE COUNT,
*          OR JUST ISSUE 'NEWTOP' AND PROCEED AS NORMAL.
*
*          NOTE THAT IT IS POSSIBLE WITH FIXED-LENGTH RECORD NON-
*          PARTITIONED DISK FILES TO REVIEW PAST I/O ERRORS (OR, IF
*          DS1LSTAR IN THE VTOC IS ZAPPED, PAST END-OF-FILE MARKS)
*          WITH 'LIST', 'DOWN' AND 'BOTTOM' AS LONG AS NO ATTEMPT IS
*          MADE TO READ THE RECORD(S) CAUSING THE ERRORS.
*
*          WHEN INVOKED FROM A SCREEN THAT HAS THE VTAM QUERY BIT ON
*          'REVIEW' WILL ISSUE A READ PARTITION (QUERY) STRUCTURED
*          FIELD AND VERIFY SUPPORT OF AT LEAST NEUTRAL AND SEVEN
*          OTHER COLOURS AND THREE EXTENDED HIGHLIGHTINGS BEFORE
*          ENABLING 7-COLOUR MODE AUTOMATICALLY.  THE 'COLOUR' COMMAND
*          MAY BE USED SAFELY WITH "MODERN" MONOCHROME SCREENS SUCH AS
*          THE 3180 AND 3192-D TO ACTIVATE EXTENDED HIGHLIGHTING.
*
*          SPANNED RECORDS LONGER THAN 64K WILL NOT BE HANDLED
*          CORRECTLY.  LRECL=X IS NOW SUPPORTED BY 'REVIEW'.  'REVIEW'
*          ASSUMES ANY VSAM COMPONENT MAY HAVE SPANNED RECORDS UP TO
*          32760 BYTES LONG.  (KSDS) LOGICAL RECORDS WITH SEGMENTS
*          PHYSICALLY OUT OF ORDER WILL NOT BE ASSEMBLED CORRECTLY.
*          VSAM LOGICAL RECORD PROCESSING ASSUMES CONTROLINTERVALSIZE
*          EQUALS PHYSICAL BLOCKSIZE, WHICH IS NOT ALWAYS TRUE,
*          ALTHOUGH THIS MAY NOW BE HANDLED CORRECTLY IN MOST CASES
*          AS A RESULT OF VVDS LOOK-UP PROCESSING.
*
*          UNDER DFP VERSION 3 AND DFSMS AN APF AUTHORIZED ENVIRONMENT
*          IS REQUIRED TO REVIEW VSAM WHEN USING BSAM.
*
***********************************************************************
         EJECT
***********************************************************************
*
*         THE FOLLOWING HAVE CONTRIBUTED IMPROVEMENTS TO THIS PROGRAM:
*
*          ABL - A. BRUCE LELAND
*          GP  - GREG PRICE
*          AW  - TONY WATSON
*
*
*         IF YOU ENCOUNTER ANY PROBLEMS WITH THIS COMMAND THEN DON'T
*         BE SURPRISED.  YOU MAY CHOOSE TO
*          A) FIX IT                   -OR-
*          B) IGNORE IT                -OR-
*          C) SEND DETAILS TO ME SO THAT I CAN
*             A) FIX IT                   -OR-
*             B) IGNORE IT                -OR-
*             C) NOT BE SURPRISED.
*
*      GREG PRICE OF PRYCROFT SIX PTY LTD
*         (FORMERLY OF HANSEN CORPORATION)
*         (FORMERLY OF GE CAPITAL INFORMATION TECHNOLOGY SOLUTIONS
*                      ASIA-PACIFIC
*                 WHICH WAS FORMERLY FERNTREE COMPUTER CORPORATION)
*         (FORMERLY OF THE STATE ELECTRICITY COMMISSION OF VICTORIA)
*
*
*         INTERNET CONTACT VIA:        SERVICE2@PRYCROFT6.COM.AU
*
***********************************************************************
         EJECT
***********************************************************************
*
*         SYNTAX - REVIEW DSNAME {VOLUME(..) UNIT(..)} {QUICK} {DATA}
*                                         {SUBSYS(..)} {TOP(..)}
*          OR      REVIEW DDNAME FILE
*
*         THE SCREEN WILL NORMALLY CONTAIN 20 RECORDS, ONE PER LINE,
*         80 CHARACTERS PER LINE.  TO DISPLAY RECORDS LONGER THAN 80
*         BYTES, THERE IS A 'RIGHT' SUBCOMMAND WHICH CAUSES DATA TO
*         THE RIGHT OF THE DATA ON THE SCREEN TO BE DISPLAYED.
*         THE 'LEFT' SUBCOMMAND CAN THEN BE USED TO DISPLAY DATA
*         BACK TOWARDS THE FRONT OF THE RECORD.
*
*         SUBCOMMANDS -
*         UP       - DISPLAY RECORDS ABOVE THOSE ON THE SCREEN
*         DOWN     - DISPLAY RECORDS BELOW THOSE ON THE SCREEN
*         TOP      - DISPLAY THE FIRST RECORDS
*         BOTTOM   - DISPLAY THE LAST RECORDS
*         RIGHT    - DISPLAY DATA TO THE RIGHT
*         LEFT     - DISPLAY DATA TO THE LEFT
*         LIST     - DISPLAY A SPECIFIED RECORD NUMBER
*         FIND     - SEARCH FOR A SPECIFIED STRING
*         FINDSMF  - SEARCH FOR A SPECIFIED SMF RECORD TYPE
*         FINDNOT  - SEARCH FOR OTHER THAN A SPECIFIED STRING
*         RFIND    - REPEAT LAST FIND OR FINDNOT OPERATION
*         HELP     - DISPLAY PFK SETTINGS AND 'REVIEW' HELP INFORMATION
*         FULL     - USE FULL EBCDIC OR JUST KEYBOARD CHARS FOR DISPLAY
*         ASCII    - SWITCH TRANSLATION OF DATA INTO EBCDIC ON/OFF
*         RECALL   - RECALL COMMANDS PREVIOUSLY TYPED IN
*         HEX ON   - DISPLAY DATA IN HEXADECIMAL FORMAT
*         HEX OFF  - TURN OFF HEXADECIMAL FORMATTING
*         HEX      - SWITCH HEXADECIMAL FORMATTING ON/OFF
*         COLOR ON - DISPLAY DATA IN 7-COLOUR MODE
*         COLOR OFF- TURN OFF 7-COLOUR DISPLAY MODE
*         COLOR    - SWITCH 7-COLOUR DISPLAY ON/OFF
*         PFKNN    - CHANGE DEFINITION OF PF KEY NN
*         SMF ON   - DISPLAY SMF RECORDS WITH TIME AND DATE FORMATTED
*         SMF OFF  - TURN OFF SMF FORMATTING
*         SMF      - SWITCH SMF FORMATTING ON/OFF
*         NEWTOP   - SPECIFY ARBITRARY TOP-OF-DATA ADDRESS
*         MEMBER   - DISPLAY A DIFFERENT MEMBER OF THE SAME PDS
*         DIR      - DISPLAY THE PDS DIRECTORY LIST
*         SUBMIT   - SUBMIT THE JCL BEING REVIEWED
*         TSO      - ISSUE A TSO COMMAND WHILE REVIEWING A FILE
*         CUTOFF   - COPY DATA TO AN OUTPUT FILE
*         APPEND   - COPY DATA TO THE END OF AN OUTPUT FILE
*         END      - END THE COMMAND
*         EXIT     - END THE COMMAND BYPASSING MEMBER LIST
*
***********************************************************************
         EJECT
***********************************************************************
*
*         WHEN A SCROLL COMMAND DOES NOT SPECIFY HOW FAR TO SCROLL,
*         THE 'SCROLL' VALUE IS USED.  THIS VALUE IS ALWAYS DISPLAYED
*         NEAR THE TOP OF THE SCREEN AND CAN BE CHANGED BY MOVING
*         THE CURSOR OVER THE VALUE AND TYPING IN A NEW VALUE.
*         THE NEW VALUE WILL REMAIN IN EFFECT UNTIL THE COMMAND
*         ENDS OR UNTIL YOU CHANGE IT AGAIN.
*
***********************************************************************
         EJECT
***********************************************************************
*
*         PROGRAM FUNCTION KEYS
*
*         SOME OF THE SUBCOMMANDS DO NOT HAVE TO BE TYPED IN
*         IF THE TERMINAL IS EQUIPPED WITH PROGRAM FUNCTION KEYS.
*         FOR EXAMPLE, HITTING KEY 'PF8' IS EQUIVALENT TO
*         TYPING IN 'DOWN' AND HITTING THE 'ENTER' KEY.
*
*         HERE ARE THE MEANINGS ASSIGNED TO EACH PF KEY.
*
*         ----------------------------------------------------
*         I                I                I                I
*         I PF1:  HELP     I PF2: SWAP LIST I PF3:  END      I
*         I                I                I                I
*         ----------------------------------------------------
*         I                I                I                I
*         I PF4:  TSO      I PF5:  RFIND    I PF6:  RCHANGE  I
*         I                I                I                I
*         ----------------------------------------------------
*         I                I                I                I
*         I PF7:  UP       I PF8:  DOWN     I PF9: SWAP NEXT I
*         I                I                I                I
*         ----------------------------------------------------
*         I                I                I                I
*         I PF10: LEFT     I PF11: RIGHT    I PF12: RECALL   I
*         I                I                I                I
*         ----------------------------------------------------
*         I                I                I                I
*         I PF13: TOP      I PF14: BOTTOM   I PF15: END      I
*         I                I                I                I
*         ----------------------------------------------------
*         I                I                I                I
*         I PF16: SMF      I PF17: RFIND    I PF18: EREP     I
*         I                I                I                I
*         ----------------------------------------------------
*         I                I                I                I
*         I PF19: UP       I PF20: DOWN     I PF21: HEX      I
*         I                I                I                I
*         ----------------------------------------------------
*         I                I                I                I
*         I PF22: ASCII    I PF23: TSO REV  I PF24: RECALL   I
*         I                I                I                I
*         ----------------------------------------------------
*
***********************************************************************
         EJECT
***********************************************************************
*
*         IF THE SECOND OPERAND IS 'FILE', THAT MEANS THE
*         FIRST OPERAND IS NOT A DSNAME BUT A DDNAME.
*
*         IF AN UNQUALIFIED DATA SET NAME IS ENTERED, THE
*         CATALOG MUST BE READ TWICE, ONCE TO APPEND A
*         TRAILING QUALIFIER IF NECESSARY, AND AGAIN DURING
*         ALLOCATION. THE USER CAN ELIMINATE THE FIRST BY USING
*         THE FULLY QUALIFIED NAME, PREFIX AND ALL, IN QUOTES,
*         OR BY ENTERING ALL BUT THE PREFIX, WITHOUT QUOTES,
*         PLUS THE KEYWORD 'Q'. THE LATTER IS MUCH SIMPLER
*         AND GIVES THE SAME PERFORMANCE IMPROVEMENT AS A
*         FULLY QUALIFIED NAME.
*
*         THE 'FILE' KEYWORD IS USEFUL FOR LOOKING AT TEMPORARY
*         DATA SETS.  IT TELLS THE COMMAND TO TREAT THE FIRST
*         OPERAND AS A FILENAME (DDNAME) INSTEAD OF A DSNAME.
*         WHATEVER DATA SET IS CURRENTLY ALLOCATED TO THE
*         FILENAME WILL BE DISPLAYED (AND QUICKLY, BECAUSE
*         THE COMMAND DOESN'T HAVE TO ALLOCATE ANYTHING).
*
*         THE 'DATA' KEYWORD INDICATES THAT INTERPRETATION OF
*         VSAM CONTROLINTERVAL INFORMATION FOR EXTRACTING
*         LOGICAL RECORDS IS NOT TO BE ATTEMPTED EVEN IF THE
*         DATA SET BEING REVIEWED IS A VSAM COMPONENT.  ITS
*         SPECIFICATION ALSO SUPPRESSES DIRECT ACCESS LOGIC
*         FOR FIXED-LENGTH RECORD NON-PARTITIONED DISK FILES.
*         FOR PARTITIONED DATA SETS ITS SPECIFICATION MEANS
*         THAT THE DATA SET'S DIRECTORY WILL BE REVIEWED AS A
*         SEQUENTIAL FILE WITHOUT ACCESS TO INDIVIDUAL MEMBERS.
*
*         THE 'SUBSYS' OPERAND INDICATES THAT A SUBSYSTEM DATA
*         SET IS TO BE REVIEWED.  THE SPECIFIED SUBSYSTEM MUST
*         BE ACTIVE AND SUPPORT DATA SET ALLOCATION.  'REVVSAM'
*         MAY PROVIDE A SUITABLE VEHICLE FOR APF AUTHORIZATION.
*         'SUBSYS' AND 'VOLUME' ARE MUTUALLY EXCLUSIVE OPERANDS.
*
*         THE 'TOP' OPERAND ALLOWS A 1 TO 6 HEXADECIMAL DIGIT
*         RELATIVE ADDRESS TO BE SPECIFIED AS THE TOP-OF-DATA.
*         THE ADDRESS IS TAKEN TO BE A TTR FOR DASD OR A BLOCK
*         ID FOR TAPE.  THE ADDRESS HAS THE SAME FORMAT AS THE
*         OPERAND OF THE 'NEWTOP' SUBCOMMAND.
*
***********************************************************************
         TITLE '  R E V I E W   -   S Y M B O L S  '
* THERE IS NOW AN MVS/370 USERMOD AVAILABLE TO ALLOW SVC 96 TO PROCESS
* THE "FORMAT-1" PARAMETER LIST INTRODUCED WITH MVS/XA WHICH ALLOWED
* FOR 31-BIT ADDRESSING BY MOVING THE EXIT PARAMETER ADDRESS FROM THE
* FIFTH WORD (WHICH HAS A FLAG BYTE) TO THE SIXTH WORD OF THE SVC
* PLIST.  SO, THE SP LEVEL NO LONGER NEEDS TO BE OVERRIDDEN TO '1' TO
* ENABLE AN XA OR LATER COMPILE OF REVIEW TO CREATE A 370-COMPATIBLE
* STAX PLIST IN ORDER TO AVOID A S0C4 ABEND WHEN PA1 OR ATTN IS USED.
         SPACE
         GBLB  &MVS
*        GBLC  &SYSSPLV            ALLOW CURRENT STAX PLIST
         LCLC  &HEL
         LCLC  &HEL2
         LCLC  &IBMHELP
         LCLC  &REL
         LCLC  &FC
         LCLC  &CC
         LCLC  &HC
         LCLC  &YYYY
         LCLC  &YY
         LCLC  &MM
         LCLC  &DD
         LCLC  &ASMDATE
         COPY  REVGEN
&MVS     SETB  1                   1 - MVS      0 - PRE-MVS
*SYSSPLV SETC  '1'                 1 - ANY MVS  2 - MVS/XA ONLY (STAX)
&HEL     SETC  'HEL'               FULLSCREEN HELP COMMAND NAME
&HEL2    SETC  'FSHELP'            ALTERNATE HELP COMMAND NAME
&IBMHELP SETC  'H'                 IBM-SUPPLIED HELP COMMAND NAME
&REL     SETC  '50.1'              REVIEW RELEASE NUMBER
&FC      SETC  '5'                 DEFAULT FORMATTING MODE DATA COLOUR
&CC      SETC  '4'                 DEFAULT CHARACTER MODE DATA COLOUR
&HC      SETC  '1'                 DEFAULT HEXADECIMAL MODE DATA COLOUR
         AIF   (&ENV390).USEDATC
&MM      SETC  '&SYSDATE'(1,2)     MONTH
&DD      SETC  '&SYSDATE'(4,2)     DAY
&YY      SETC  '&SYSDATE'(7,2)     YEAR
&ASMDATE SETC  '20&YY.-&MM.-&DD'   ISO FORMAT ASSEMBLE DATE
         AGO   .DATEOK
.USEDATC ANOP
&YYYY    SETC  '&SYSDATC'(1,4)     YEAR
&MM      SETC  '&SYSDATC'(5,2)     MONTH
&DD      SETC  '&SYSDATC'(7,2)     DAY
&ASMDATE SETC  '&YYYY.-&MM.-&DD'   ISO FORMAT ASSEMBLE DATE
.DATEOK  ANOP
         TITLE '  R E V I E W   -   I N L I N E   M A C R O S  '
         MACRO
&NAME    DO0   &OP1,&OP2,&OP3
         AIF   ('&NAME' EQ '').DO0
&NAME    DS    0H
.DO0     ANOP
         MEND
         SPACE
         AIF   (&ENVESA).ARINSOK
         SPACE
LAE      OPSYN LA
LAM      OPSYN DO0
STAM     OPSYN DO0
SAC      OPSYN DO0
CPYA     OPSYN DO0
RSECT    OPSYN CSECT
         SPACE
.ARINSOK ANOP
         SPACE
         MACRO
&NAME    GETSTOR &MODE,&LV=,&LA=,&A=,&SP=,&MF=I,&BNDRY=,&LOC=
.*
.*   THE GETSTOR MACRO ALLOWS GETMAIN MACROS TO REQUEST STORAGE
.*   ABOVE THE LINE WHEN REVIEW IS ASSEMBLED FOR TARGET SYSTEMS
.*   AT ESA OR LATER LEVELS, BUT REQUEST STORAGE BELOW THE LINE
.*   WHEN ASSEMBLED FOR PRE-ESA SYSTEMS.  MOST REQUESTS IN THIS
.*   CATEGORY ARE EXPECTED TO BE FOR I/O BUFFERS.
.*
.*   IF STORAGE MAY SAFELY BE ABOVE THE BAR ON ANY SYSTEM WHICH
.*   SUPPORTS IT, USE APPROPRIATE GETMAIN MACROS DIRECTLY.
.*
         GBLB  &ENV390
         AIF   (&ENV390).GETM390
&NAME    GETMAIN &MODE,LV=&LV,LA=&LA,A=&A,SP=&SP,MF=&MF,BNDRY=&BNDRY,  +
               LOC=24
         MEXIT
.GETM390 ANOP
&NAME    GETMAIN &MODE,LV=&LV,LA=&LA,A=&A,SP=&SP,MF=&MF,BNDRY=&BNDRY,  +
               LOC=&LOC
         MEND
         SPACE
         MACRO
&NAME    @STAE &EXIT,&TYPE,&PARAM=I,&XCTL=NO,&MF=I,&PURGE=,&ASYNCH=,   +
               &TERM=,&RELATED=,&SDWALOC31=NO
         GBLB  &ENV390
         AIF   (&ENV390).STAE390
&NAME    ESTAE &EXIT,&TYPE,PARAM=&PARAM,XCTL=&XCTL,MF=&MF,             +
               PURGE=&PURGE,ASYNCH=&ASYNCH,TERM=&TERM,                 +
               RELATED=&RELATED
         MEXIT
.STAE390 ANOP
&NAME    ESTAE &EXIT,&TYPE,PARAM=&PARAM,XCTL=&XCTL,MF=&MF,             +
               PURGE=&PURGE,ASYNCH=&ASYNCH,TERM=&TERM,                 +
               RELATED=&RELATED,SDWALOC31=&SDWALOC31
         MEND
         SPACE
         MACRO
&NAME    DCS
.**********************************************************************
.*                                                                    *
.*        DCS  -  DEFINE CONSTANT FOR SCREEN                          *
.*                                                                    *
.*        WRITTEN BY BILL GODFREY                                     *
.*        PLANNING RESEARCH CORPORATION                               *
.*        PRC COMPUTER CENTER, MCLEAN VA 22101                        *
.*        DATE WRITTEN: JANUARY 8 1981.                               *
.*        DATE UPDATED: MARCH 18 1982. (ROW AND COL IN PARENS)        *
.*        GP@P6          JULY 25 1986. (EXTENDED ATTRS, MEDIUM INTENS)*
.*        GP@P6     SEPTEMBER 23 1986. (ESCAPES, WRITES, RA, MFA, MF) *
.*        GP@P6        AUGUST 24 1987. (EAU, WSF, RB, RM, RMA)        *
.*        GP@P6       OCTOBER 18 1990. (ALLOW ROW NUMBER UP TO 43)    *
.*                                                                    *
.*        THIS MACRO IS USED FOR CODING A FULLSCREEN 3270 DISPLAY.    *
.*                                                                    *
.*        SAMPLE                                                      *
.*           DCS    AL1(WCC),SBA,(1,1),RTA,(7,1),X'00',IC             *
.*                                                                    *
.*        IT SIMPLIFIES THE CODING OF A SCREEN IN THE FOLLOWING WAYS. *
.*        .  BUFFER ADDRESSES ARE SPECIFIED AS ROW AND COLUMN NUM-    *
.*           BER.  THE MACRO TRANSLATES THEM INTO THE 3270 CODE.      *
.*        .  ORDERS ARE SPECIFIED BY NAME, SUCH AS 'SBA' AND 'SF',    *
.*           SO YOU DON'T HAVE TO KNOW THE HEX CODES FOR THEM,        *
.*        .  COMMONLY USED ATTRIBUTE BYTES ARE SPECIFIED BY NAME      *
.*           (A SET OF RESERVED NAMES) SO YOU DON'T HAVE TO KNOW      *
.*           THE HEX CODES FOR THEM.                                  *
.*        .  IT SAVES A LOT OF DOCUMENTATION WORK, AND MAKES          *
.*           THE CODE EASIER FOR OTHERS TO UNDERSTAND.                *
.*                                                                    *
.*        THE USER OF THE MACRO MUST STILL UNDERSTAND HOW A SCREEN    *
.*        IS CONSTRUCTED BEFORE USING IT. THE MACRO MERELY MAKES IT   *
.*        EASIER TO SPECIFY THE VALUES.  IT DOES VERY LITTLE ERROR    *
.*        CHECKING.  FOR INSTANCE, IT DOES NOT CHECK TO SEE IF        *
.*        YOU FOLLOW AN 'SBA' WITH A BUFFER ADDRESS.  IT IS POSSIBLE  *
.*        TO CODE A THOROUGHLY INVALID SCREEN.                        *
.*                                                                    *
.*        THE MACRO MAY HAVE ANY NUMBER OF OPERANDS, CONSISTING OF    *
.*        ANY COMBINATION OF THE FOLLOWING.                           *
.*                                                                    *
.*        .  AN ESCAPE CHARACTER.                                     *
.*           VALID ESCAPE CHARACTERS ARE:                             *
.*           ESC - ESCAPE                                             *
.*           GE  - GRAPHIC ESCAPE                                     *
.*        .  A WRITE COMMAND.                                         *
.*           VALID WRITE COMMANDS ARE:                                *
.*           WR  - WRITE (WRT)                                        *
.*           EW  - ERASE/WRITE                                        *
.*           EWA - ERASE/WRITE ALTERNATE                              *
.*           EAU - ERASE ALL UNPROTECTED                              *
.*           WSF - WRITE STRUCTURED FIELD                             *
.*        .  A READ COMMAND.                                          *
.*           VALID READ COMMANDS ARE:                                 *
.*           RB  - READ BUFFER                                        *
.*           RM  - READ MODIFIED                                      *
.*           RMA - READ MODIFIED ALL                                  *
.*        .  AN ORDER.                                                *
.*           VALID ORDERS ARE:                                        *
.*           SBA, SF, RA (RTA), IC, PT, EUA, SA, SFE, MF (MFA).       *
.*        .  A BUFFER ADDRESS IN PARENTHESES.                         *
.*           IF AN OPERAND IS IN PARENTHESES, IT IS ASSUMED THAT      *
.*           THE ROW AND COLUMN NUMBER ARE BETWEEN THE PARENS,        *
.*           SEPARATED BY A COMMA.  EXAMPLE: (1,1)                    *
.*           THIS FORM OF BUFFER ADDRESS IS NEW AS OF MARCH 18 1982.  *
.*        .  A ROW OR COLUMN NUMBER OF A BUFFER ADDRESS (OLD FORMAT). *
.*           IF AN OPERAND IS NUMERIC, IT IS ASSUMED TO BE            *
.*           A ROW OR COLUMN NUMBER.  IT TAKES 2 OPERANDS TO          *
.*           SPECIFY THE BUFFER ADDRESS (ROW AND COLUMN) SO NUMERIC   *
.*           OPERANDS MUST ALWAYS BE SPECIFIED IN PAIRS, THE          *
.*           FIRST BEING THE ROW AND THE SECOND BEING THE COLUMN.     *
.*           THIS FORMAT IS SUPPORTED ONLY FOR COMPATIBILITY WITH     *
.*           THE ORIGINAL VERSION OF THIS MACRO.                      *
.*        .  AN ATTRIBUTE BYTE.                                       *
.*           VALID ATTRIBUTE BYTES ARE:                               *
.*           UNPLO  - UNPROTECTED NORMAL INTENSITY                    *
.*           UNPMD  - UNPROTECTED MEDIUM INTENSITY                    *
.*           UNPHI  - UNPROTECTED HIGH INTENSITY                      *
.*           UNPNP  - UNPROTECTED NO-DISPLAY                          *
.*           PROLO  - PROTECTED NORMAL INTENSITY                      *
.*           PROLOS - PROTECTED NORMAL INTENSITY AUTO-SKIP            *
.*           PROMD  - PROTECTED MEDIUM INTENSITY                      *
.*           PROMDS - PROTECTED MEDIUM INTENSITY AUTO-SKIP            *
.*           PROHI  - PROTECTED HIGH INTENSITY                        *
.*           PROHIS - PROTECTED HIGH INTENSITY AUTO-SKIP              *
.*        .  AN EXTENDED ATTRIBUTE TYPE.                              *
.*           VALID ATTRIBUTE TYPES ARE:                               *
.*           FIELD, HILITE, COLOUR AND PGMSYM.                        *
.*        .  AN EXTENDED HIGHLIGHTING SPECIFICATION.                  *
.*           VALID HIGHLIGHTINGS ARE:                                 *
.*           NORMAL, BLINK, REVERSE AND USCORE.                       *
.*        .  AN EXTENDED COLOUR SPECIFICATION.                        *
.*           VALID COLOURS ARE:                                       *
.*           BLUE, RED, PINK, GREEN, TURQ, YELLOW, WHITE AND NORMAL.  *
.*        .  A HEX, CHARACTER, OR ADDRESS CONSTANT.                   *
.*           FOR EXAMPLE, X'00', OR C'ENTER SIGNON'                   *
.*           THIS CAN BE USED FOR DATA WITHIN FIELDS OR FOR           *
.*           ATTRIBUTE BYTES, ORDERS, THE 'WCC', OR BUFFER            *
.*           ADDRESSES (IF YOU WANT TO FIGURE THEM OUT).              *
.*                                                                    *
.*        IF THE OPERANDS DO NOT ALL FIT ON ONE LINE, YOU CAN         *
.*        EITHER CONTINUE THE LINE IN THE STANDARD ASSEMBLER WAY      *
.*        OR CODE THE MACRO AGAIN ON THE NEXT LINE WITH THE           *
.*        REMAINING OPERANDS.  THE RESULT IS THE SAME EITHER WAY.     *
.*                                                                    *
.*        THE BUFFER ADDRESS CONVERSIONS ARE FOR A                    *
.*        SCREEN SIZE OF 43 ROWS BY 80 COLUMNS. FOR SCREENS           *
.*        OF OTHER DIMENSIONS (27 BY 132, 12 BY 40) THE MACRO         *
.*        NEEDS ONLY A FEW CHANGES.                                   *
.*                                                                    *
.*        WARNING: IF YOU CODE THE MACRO WITH A LABEL IN COLUMN 1,    *
.*        AND YOU LIKE USING LENGTH ATTRIBUTES, BEWARE THAT THE       *
.*        LENGTH ATTRIBUTE OF THE LABEL IS NOT NECESSARILY THE        *
.*        TOTAL LENGTH OF THE DATA GENERATED BY THE MACRO.            *
.*                                                                    *
.*        PROGRAMMING NOTE:                                           *
.*        SA,NORMAL,NORMAL     WILL DO IN THREE BYTES WHAT            *
.*        SA,HILITE,NORMAL,SA,COLOUR,NORMAL,SA,PGMSYM,NORMAL          *
.*                             WILL DO IN NINE BYTES.                 *
.*                                                                    *
.**********************************************************************
.*
         LCLA  &R,&C,&P,&Q
         LCLA  &AN,&AS,&AL
         LCLB  &B,&NUMERIC,&INTEGER
         LCLC  &T(64)
         LCLC  &N,&ROW,&COL
         LCLC  &CS,&STRING
&T(1)    SETC  '40'
&T(2)    SETC  'C1'
&T(3)    SETC  'C2'
&T(4)    SETC  'C3'
&T(5)    SETC  'C4'
&T(6)    SETC  'C5'
&T(7)    SETC  'C6'
&T(8)    SETC  'C7'
&T(9)    SETC  'C8'
&T(10)   SETC  'C9'
&T(11)   SETC  '4A'
&T(12)   SETC  '4B'
&T(13)   SETC  '4C'
&T(14)   SETC  '4D'
&T(15)   SETC  '4E'
&T(16)   SETC  '4F'
.*
&T(17)   SETC  '50'
&T(18)   SETC  'D1'
&T(19)   SETC  'D2'
&T(20)   SETC  'D3'
&T(21)   SETC  'D4'
&T(22)   SETC  'D5'
&T(23)   SETC  'D6'
&T(24)   SETC  'D7'
&T(25)   SETC  'D8'
&T(26)   SETC  'D9'
&T(27)   SETC  '5A'
&T(28)   SETC  '5B'
&T(29)   SETC  '5C'
&T(30)   SETC  '5D'
&T(31)   SETC  '5E'
&T(32)   SETC  '5F'
.*
&T(33)   SETC  '60'
&T(34)   SETC  '61'
&T(35)   SETC  'E2'
&T(36)   SETC  'E3'
&T(37)   SETC  'E4'
&T(38)   SETC  'E5'
&T(39)   SETC  'E6'
&T(40)   SETC  'E7'
&T(41)   SETC  'E8'
&T(42)   SETC  'E9'
&T(43)   SETC  '6A'
&T(44)   SETC  '6B'
&T(45)   SETC  '6C'
&T(46)   SETC  '6D'
&T(47)   SETC  '6E'
&T(48)   SETC  '6F'
.*
&T(49)   SETC  'F0'
&T(50)   SETC  'F1'
&T(51)   SETC  'F2'
&T(52)   SETC  'F3'
&T(53)   SETC  'F4'
&T(54)   SETC  'F5'
&T(55)   SETC  'F6'
&T(56)   SETC  'F7'
&T(57)   SETC  'F8'
&T(58)   SETC  'F9'
&T(59)   SETC  '7A'
&T(60)   SETC  '7B'
&T(61)   SETC  '7C'
&T(62)   SETC  '7D'
&T(63)   SETC  '7E'
&T(64)   SETC  '7F'
.*
&N       SETC  '&NAME'
&AN      SETA  N'&SYSLIST          NUMBER OF OPERANDS
&AS      SETA  0
&B       SETB  0 FALSE
.EACH    AIF   (&AN EQ 0).EPILOG
&AS      SETA  &AS+1
&CS      SETC  '&AS'
&AL      SETA  K'&SYSLIST(&AS)
         AIF   (T'&SYSLIST(&AS) EQ 'O').NEXT
         AIF   ('&SYSLIST(&AS)'(1,1) EQ '(').PAIR
&NUMERIC SETB  (T'&SYSLIST(&AS) EQ 'N')
&INTEGER SETB  ('&SYSLIST(&AS)'(1,1) GE '0')
         AIF   (&NUMERIC AND &INTEGER).ROWCOL
         AIF   (NOT &B).ROWCOLX
         MNOTE 4,'             &CS.) MISSING COLUMN NUMBER'
&B       SETB  0 FALSE
.ROWCOLX ANOP
&STRING  SETC  '&SYSLIST(&AS)'
.*             ESCAPES
         AIF   ('&STRING' EQ 'ESC').ESC
         AIF   ('&STRING' EQ 'GE').GE
.*             WRITES
         AIF   ('&STRING' EQ 'WR').WR
         AIF   ('&STRING' EQ 'WRT').WR
         AIF   ('&STRING' EQ 'EW').EW
         AIF   ('&STRING' EQ 'EWA').EWA
         AIF   ('&STRING' EQ 'EAU').EAU
         AIF   ('&STRING' EQ 'WSF').WSF
.*             READS
         AIF   ('&STRING' EQ 'RB').RB
         AIF   ('&STRING' EQ 'RM').RM
         AIF   ('&STRING' EQ 'RMA').RMA
.*             ORDERS
         AIF   ('&STRING' EQ 'SBA').SBA
         AIF   ('&STRING' EQ 'SF').SF
         AIF   ('&STRING' EQ 'SFE').SFE
         AIF   ('&STRING' EQ 'RA').RA
         AIF   ('&STRING' EQ 'RTA').RA
         AIF   ('&STRING' EQ 'IC').IC
         AIF   ('&STRING' EQ 'PT').PT
         AIF   ('&STRING' EQ 'EUA').EUA
         AIF   ('&STRING' EQ 'SA').SA
         AIF   ('&STRING' EQ 'MF').MF
         AIF   ('&STRING' EQ 'MFA').MF
.*             ATTRIBUTES
         AIF   ('&STRING' EQ 'UNPLO').UNPLO
         AIF   ('&STRING' EQ 'UNPMD').UNPMD
         AIF   ('&STRING' EQ 'UNPHI').UNPHI
         AIF   ('&STRING' EQ 'UNPNP').UNPNP
         AIF   ('&STRING' EQ 'PROLO').PROLO
         AIF   ('&STRING' EQ 'PROLOS').PROLOS
         AIF   ('&STRING' EQ 'PROMD').PROMD
         AIF   ('&STRING' EQ 'PROMDS').PROMDS
         AIF   ('&STRING' EQ 'PROHI').PROHI
         AIF   ('&STRING' EQ 'PROHIS').PROHIS
.*             EXTENDED ATTRIBUTE TYPES
         AIF   ('&STRING' EQ 'FIELD').FIELD
         AIF   ('&STRING' EQ 'HILITE').HILITE
         AIF   ('&STRING' EQ 'COLOUR').COLOUR
         AIF   ('&STRING' EQ 'PGMSYM').PGMSYM
.*             HIGHLIGHTING
         AIF   ('&STRING' EQ 'NORMAL').NORMAL
         AIF   ('&STRING' EQ 'BLINK').BLINK
         AIF   ('&STRING' EQ 'REVERSE').REVERSE
         AIF   ('&STRING' EQ 'USCORE').USCORE
.*             COLOURS
         AIF   ('&STRING' EQ 'BLUE').BLUE
         AIF   ('&STRING' EQ 'RED').RED
         AIF   ('&STRING' EQ 'PINK').PINK
         AIF   ('&STRING' EQ 'GREEN').GREEN
         AIF   ('&STRING' EQ 'TURQ').TURQ
         AIF   ('&STRING' EQ 'YELLOW').YELLOW
         AIF   ('&STRING' EQ 'WHITE').WHITE
.*             CONSTANTS
.*             IF THE OPERAND IS NONE OF THE ABOVE, IT IS
.*             PRESUMED TO BE ANY VALID 'DC' CONSTANT.
.DC      ANOP
&N       DC    &STRING
         AGO   .NEXT
.ESC     ANOP
&N       DC    X'27'               ESCAPE
         AGO   .NEXT
.GE      ANOP
&N       DC    X'08'               GRAPHIC ESCAPE
         AGO   .NEXT
.WR      ANOP
&N       DC    X'F1'               WRITE
         AGO   .NEXT
.EW      ANOP
&N       DC    X'F5'               ERASE/WRITE
         AGO   .NEXT
.EWA     ANOP
&N       DC    X'7E'               ERASE/WRITE ALTERNATE
         AGO   .NEXT
.EAU     ANOP
&N       DC    X'6F'               ERASE ALL UNPROTECTED
         AGO   .NEXT
.WSF     ANOP
&N       DC    X'F3'               WRITE STRUCTURED FIELD
         AGO   .NEXT
.RB      ANOP
&N       DC    X'F2'               READ BUFFER
         AGO   .NEXT
.RM      ANOP
&N       DC    X'F6'               READ MODIFIED
         AGO   .NEXT
.RMA     ANOP
&N       DC    X'6E'               READ MODIFIED ALL
         AGO   .NEXT
.SBA     ANOP
&N       DC    X'11'               SET BUFFER ADDRESS
         AGO   .NEXT
.SF      ANOP
&N       DC    X'1D'               START FIELD
         AGO   .NEXT
.RA      ANOP
&N       DC    X'3C'               REPEAT TO ADDRESS
         AGO   .NEXT
.IC      ANOP
&N       DC    X'13'               INSERT CURSOR
         AGO   .NEXT
.PT      ANOP
&N       DC    X'05'               PROGRAM TAB
         AGO   .NEXT
.EUA     ANOP
&N       DC    X'12'               ERASE UNPROTECTED TO ADDRESS
         AGO   .NEXT
.SA      ANOP
&N       DC    X'28'               SET ATTRIBUTE
         AGO   .NEXT
.SFE     ANOP
&N       DC    X'29'               START FIELD EXTENDED
         AGO   .NEXT
.MF      ANOP
&N       DC    X'2C'               MODIFY FIELD ATTRIBUTES
         AGO   .NEXT
.UNPLO   ANOP
&N       DC    X'40'               UNPROTECTED NORMAL INTENSITY
         AGO   .NEXT
.UNPMD   ANOP
&N       DC    X'C4'               UNPROTECTED MEDIUM INTENSITY
         AGO   .NEXT
.UNPHI   ANOP
&N       DC    X'C8'               UNPROTECTED HIGH INTENSITY
         AGO   .NEXT
.UNPNP   ANOP
&N       DC    X'4C'               UNPROTECTED NO-DISPLAY
         AGO   .NEXT
.PROLO   ANOP
&N       DC    X'60'               PROTECTED NORMAL INTENSITY
         AGO   .NEXT
.PROLOS  ANOP
&N       DC    X'F0'               PROTECTED NORMAL INTENSITY SKIP
         AGO   .NEXT
.PROMD   ANOP
&N       DC    X'E4'               PROTECTED MEDIUM INTENSITY
         AGO   .NEXT
.PROMDS  ANOP
&N       DC    X'F4'               PROTECTED MEDIUM INTENSITY SKIP
         AGO   .NEXT
.PROHI   ANOP
&N       DC    X'E8'               PROTECTED HIGH INTENSITY
         AGO   .NEXT
.PROHIS  ANOP
&N       DC    X'F8'               PROTECTED HIGH INTENSITY SKIP
         AGO   .NEXT
.FIELD   ANOP
&N       DC    X'C0'               FIELD ATTRIBUTE
         AGO   .NEXT
.HILITE  ANOP
&N       DC    X'41'               EXTENDED HIGHLIGHTING
         AGO   .NEXT
.COLOUR  ANOP
&N       DC    X'42'               EXTENDED COLOUR
         AGO   .NEXT
.PGMSYM  ANOP
&N       DC    X'43'               PROGRAMMED SYMBOLS
         AGO   .NEXT
.NORMAL  ANOP
&N       DC    X'00'               CHARACTER ATTRIBUTE RESET (DEFAULT)
         AGO   .NEXT
.BLINK   ANOP
&N       DC    X'F1'               BLINK HIGHLIGHTING
         AGO   .NEXT
.REVERSE ANOP
&N       DC    X'F2'               REVERSE VIDEO HIGHLIGHTING
         AGO   .NEXT
.USCORE  ANOP
&N       DC    X'F4'               UNDERSCORE HIGHLIGHTING
         AGO   .NEXT
.BLUE    ANOP
&N       DC    X'F1'               BLUE COLOUR
         AGO   .NEXT
.RED     ANOP
&N       DC    X'F2'               RED COLOUR
         AGO   .NEXT
.PINK    ANOP
&N       DC    X'F3'               PINK COLOUR
         AGO   .NEXT
.GREEN   ANOP
&N       DC    X'F4'               GREEN COLOUR
         AGO   .NEXT
.TURQ    ANOP
&N       DC    X'F5'               TURQUOISE COLOUR
         AGO   .NEXT
.YELLOW  ANOP
&N       DC    X'F6'               YELLOW COLOUR
         AGO   .NEXT
.WHITE   ANOP
&N       DC    X'F7'               WHITE COLOUR
         AGO   .NEXT
.**********************************************************************
.PAIR    ANOP
         AIF   (N'&SYSLIST(&AS) NE 2).PERR1
&NUMERIC SETB  (T'&SYSLIST(&AS,1) EQ 'N')
&INTEGER SETB  ('&SYSLIST(&AS,1)'(1,1) GE '0')
         AIF   (NOT &NUMERIC OR NOT &INTEGER).PERR2
&R       SETA  &SYSLIST(&AS,1)
&NUMERIC SETB  (T'&SYSLIST(&AS,2) EQ 'N')
&INTEGER SETB  ('&SYSLIST(&AS,2)'(1,1) GE '0')
         AIF   (NOT &NUMERIC OR NOT &INTEGER).PERR2
&C       SETA  &SYSLIST(&AS,2)
         AIF   (&R LT 1 OR &R GT 43).ROWERR
         AIF   (&C LT 1 OR &C GT 80).COLERR
&P       SETA  (&R-1)*80+&C-1
&Q       SETA  &P/64               QUOTIENT
&R       SETA  &P-&Q*64+1          REMAINDER+1
&Q       SETA  &Q+1                QUOTIENT+1
&N       DC    X'&T(&Q)&T(&R)'     ROW AND COLUMN
         AGO   .NEXT
.PERR1   MNOTE 4,'             &CS.) PARENS FOUND BUT NOT 2 NUMBERS'
         MEXIT
.PERR2   MNOTE 4,'             &CS.) NON NUMERIC ROW/COLUMN'
         MEXIT
.**********************************************************************
.ROWCOL  ANOP
         AIF   (&B).COL            BRANCH IF ROW HAS BEEN CAPTURED
&R       SETA  &SYSLIST(&AS)
&B       SETB  1 TRUE              SET ROW-HAS-BEEN-CAPTURED
         AGO   .NEXTR
.COL     ANOP
&C       SETA  &SYSLIST(&AS)
&B       SETB  0 FALSE             RESET SWITCH
         AIF   (&R LT 1 OR &R GT 43).ROWERR
         AIF   (&C LT 1 OR &C GT 80).COLERR
&P       SETA  (&R-1)*80+&C-1
&Q       SETA  &P/64               QUOTIENT
&R       SETA  &P-&Q*64+1          REMAINDER+1
&Q       SETA  &Q+1                QUOTIENT+1
&N       DC    X'&T(&Q)&T(&R)'     ROW AND COLUMN
         AGO   .NEXT
.ROWERR  MNOTE 4,'             &CS.) VALUE &R INVALID, MUST BE 1 TO 43'
         AGO   .NEXT
.COLERR  MNOTE 4,'             &CS.) VALUE &C INVALID, MUST BE 1 TO 80'
.NEXT    ANOP
&N       SETC  ''                  TURN OFF NAME
.NEXTR   ANOP
&AN      SETA  &AN-1
         AGO   .EACH
.EPILOG  ANOP
         MEND
         SPACE
         SPACE
         MACRO
&NAME    MESG  &MSG
&NAME    DC    AL2(&NAME.L-2)
         DC    C&MSG
&NAME.L  EQU   *-&NAME
         MEND
         SPACE
         MACRO
&NAME    XABSM14
         GBLB  &ENV390
         AIF   (&ENV390).EXIT390
&NAME    CLI   OSBITS,X'93'        MVS/XA?
         BNER  R14                 NO, RETURN
*        BSM   0,R14               YES, RETURN
         DC    Y(X'0B0E')
         MEXIT
.EXIT390 ANOP
&NAME    BR    R14
         MEND
         SPACE
         MACRO
&NAME    XASAM24 &REG=R14
         GBLB  &ENV390
         AIF   (&ENV390).EXIT390
&NAME    CLI   OSBITS,X'93'        MVS/XA?
         BNE   *+10                NO
         LA    &REG,*+6            YES
         DC    Y(11*256+&REG)      BSM TO SWITCH TO AMODE=24
         MEXIT
.EXIT390 ANOP
         AIF   ('&NAME' EQ '').MEND
&NAME    DC    0H
.MEND    ANOP
         MEND
         SPACE
         MACRO
&NAME    XASAM31 &REG=R14
         GBLB  &ENV390
         AIF   (&ENV390).EXIT390
&NAME    CLI   OSBITS,X'93'        MVS/XA?
         BNE   *+20                NO
         LA    R0,1                YES
         SLL   R0,31               GET AMODE BIT
         LA    &REG,*+8
         OR    &REG,R0             SET AMODE BIT
         DC    Y(11*256+&REG)      BSM TO SWITCH TO AMODE=31
         MEXIT
.EXIT390 ANOP
         AIF   ('&NAME' EQ '').MEND
&NAME    DC    0H
.MEND    ANOP
         MEND
         SPACE
         TITLE '  R E V I E W   -   E Q U A T E   C O N S T A N T S  '
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE
A0       EQU   0
A1       EQU   1
A2       EQU   2
A3       EQU   3
A4       EQU   4
A5       EQU   5
A6       EQU   6
A7       EQU   7
A8       EQU   8
A9       EQU   9
A10      EQU   10
A11      EQU   11
A12      EQU   12
A13      EQU   13
A14      EQU   14
A15      EQU   15
         EJECT
HIGH_BIT EQU   X'80000000'         HIGH-ORDER OR SIGN BIT OF WORD
ESC      EQU   X'27'               ESCAPE
WRT      EQU   X'F1'               WRITE
WSF      EQU   X'F3'               WRITE STRUCTURED FIELD
EW       EQU   X'F5'               ERASE/WRITE
EWA      EQU   X'7E'               ERASE/WRITE ALTERNATE
WCCNULL  EQU   X'40'               NO ACTION WRITE CONTROL CHARACTER
WCCSTND  EQU   X'C1'               STANDARD WRITE CONTROL CHARACTER
WCCBELL  EQU   X'C5'               SOUND BELL WRITE CONTROL CHARACTER
NOAID    EQU   X'60'               NO ATTENTION IDENTIFIER
ENTERAID EQU   X'7D'               ATTENTION IDENTIFIER FOR ENTER
PA1AID   EQU   X'6C'               ATTENTION IDENTIFIER FOR PA1
PA2AID   EQU   X'6E'               ATTENTION IDENTIFIER FOR PA2
PA3AID   EQU   X'6B'               ATTENTION IDENTIFIER FOR PA3
CLEARAID EQU   X'6D'               ATTENTION IDENTIFIER FOR CLEAR
*    SEE PFKDEF FOR THE AID VALUES FOR PROGRAM FUNCTION KEYS 1->24
GE       EQU   X'08'               GRAPHIC ESCAPE
SBA      EQU   X'11'               SET BUFFER ADDRESS
IC       EQU   X'13'               INSERT CURSOR
SF       EQU   X'1D'               START FIELD
SA       EQU   X'28'               SET ATTRIBUTE
SFE      EQU   X'29'               START FIELD EXTENDED
RA       EQU   X'3C'               REPEAT TO ADDRESS
HILT     EQU   X'41'               HIGHLIGHTING ATTRIBUTE
COLR     EQU   X'42'               COLOUR ATTRIBUTE
SYMS     EQU   X'43'               SYMBOL SET ATTRIBUTE
PROHI    EQU   X'E8'               PROTECTED HIGH INTENSITY
PROHIS   EQU   X'F8'               PROTECTED HIGH INTENSITY AUTOSKIP
PROLOS   EQU   X'F0'               PROTECTED LOW INTENSITY AUTOSKIP
UNPHI    EQU   X'C8'               UNPROTECTED HIGH INTENSITY (INPUT)
UNPHIM   EQU   X'C9'               UNPROTECTED HIGH MODIFIED  (INPUT)
NULL     EQU   X'00'               NORMAL / DEFAULT / ALL ATTRIBUTES
BLUE     EQU   X'F1'               BLUE
RED      EQU   X'F2'               RED
PINK     EQU   X'F3'               PINK
GREEN    EQU   X'F4'               GREEN
TURQOISE EQU   X'F5'               TURQUOISE
YELLOW   EQU   X'F6'               YELLOW
WHITE    EQU   X'F7'               WHITE, NEUTRAL
RVRSE    EQU   X'F2'               REVERSE VIDEO
USCR     EQU   X'F4'               UNDERSCORE
QUOTE    EQU   X'7D'               SINGLE QUOTE
FLDINLO  EQU   X'0A'               INTERNAL CODE FOR LOW UNPROTECTED
FLDINHI  EQU   X'0B'               INTERNAL CODE FOR HIGH UNPROTECTED
FLDOUTLO EQU   X'0C'               INTERNAL CODE FOR LOW PROTECTED
FLDOUTHI EQU   X'0D'               INTERNAL CODE FOR HIGH PROTECTED
FLDSKPLO EQU   X'0E'               INTERNAL CODE FOR LOW AUTOSKIP
FLDSKPHI EQU   X'0F'               INTERNAL CODE FOR HIGH AUTOSKIP
$$REVSIZ EQU   26*80               $$REVIEW PROFILE MEMBER BYTE COUNT
         AIF   (&ENV390).BITS390
$ADRBITS EQU   24                  POWER OF 2 ADDRESS SPACE SIZE
$SEGBITS EQU   16                  POWER OF 2 SEGMENT SIZE
         AGO   .BITSCMN
.BITS390 ANOP
$ADRBITS EQU   31                  POWER OF 2 ADDRESS SPACE SIZE
$SEGBITS EQU   20                  POWER OF 2 SEGMENT SIZE
.BITSCMN ANOP
$PAGBITS EQU   12                  POWER OF 2 PAGE SIZE
         TITLE '  R E V I E W   -   C O N T R O L   B L O C K S  '
         PRINT NOGEN
         CVT   DSECT=YES,LIST=NO
         DCBD  DSORG=BS,DEVD=(DA,TA)
         IFGACB
         IEZDEB
         IHADSAB
SCT      DSECT
         DS    XL16                ALLOW FOR SWA BLOCK PREFIX
         IEFASCTB
SIOT     DSECT
         IEFASIOT
         IEECHAIN
         IEFZB4D0
         IEFZB4D2
         IHAPSA DSECT=YES
         IHAASVT
         IHAGDA
         IHAASCB
         IHAASXB
         IHALDA
         IHACDE
         IHALLE
         IHALPDE
         IHARB
**       IHASAVER DSECT=YES,LIST=NO,TITLE=NO
SAVER    DSECT
SAVPLI   DS    F                   USED BY PL/I LANGUAGE PROGRAM
SAVPREV  DS    F                   ADDR OF PREVIOUS SAVEAREA
SAVNEXT  DS    F                   ADDR OF NEXT SAVE AREA
SAVGRS14 DS    F                   REGISTER 14
SAVGRS15 DS    F                   REGISTER 15
SAVGRS0  DS    F                   REGISTER 0
SAVGRS1  DS    F                   REGISTER 1
SAVGRS2  DS    F                   REGISTER 2
SAVGRS3  DS    F                   REGISTER 3
SAVGRS4  DS    F                   REGISTER 4
SAVGRS5  DS    F                   REGISTER 5
SAVGRS6  DS    F                   REGISTER 6
SAVGRS7  DS    F                   REGISTER 7
SAVGRS8  DS    F                   REGISTER 8
SAVGRS9  DS    F                   REGISTER 9
SAVGRS10 DS    F                   REGISTER 10
SAVGRS11 DS    F                   REGISTER 11
SAVGRS12 DS    F                   REGISTER 12
SAVER_LEN EQU  *-SAVER
         IHAXTLST
         IEZJSCB
         IEFJESCT
         IEFJSCVT
         IEFJSSIB
         IEFTCT
         AIF   (&ENV390).SDWA390
DEBDASDE EQU   DEBDASD+16          END OF DEBDASD SECTION
*
**       IHADQE
*
*        RELEASE 1 AOS, 11/3/71, LEVEL=1
*
DQESECT  DSECT ,    DESCRIPTOR QUEUE ELEMENT
DQFQEPTR DS    A    PTR TO FIRST FREE AREA
DQEPTR   DS    A    PTR TO NEXT DQE OR ZERO
DQEHRID  DS    0C   HIERARCHY IDENTIFIER
DQEBLKAD DS    A    ADDR FIRST 2K BLOCK DESCRIBED BY THIS DQE
DQELNTH  DS    F    LENGTH OF AREA DESCRIBED BY THIS DQE
*
**       IHAFQE
*
*        RELEASE 1 AOS, 11/3/71, LEVEL=1
*
FQESECT  DSECT ,    FREE QUEUE ELEMENT
FQTYPE   DS    0B   FLAG BYTE
FQERGNFL EQU   X'80' FQE REGION FLAG
FQECPB   EQU   X'40' FREE AREA CROSSES PAGE BOUNDARY - UNSUITABLE FOR
*                   L/SQA ALLOCATION
FQEPTR   DS    A    PTR TO NEXT LOWER FREE AREA
FQELNTH  DS    F    NUMBER BYTES IN FREE AREA
FQAREA   DS    A    HIGH ADDRESS OF FREE SPACE
FQERSVD  DS    F    RESERVED
FQESLNTH EQU   8    L/SQA FQE LENGTH
FQERLNTH EQU   16   REGION FQE LENGTH
*
**       IHAPQE
*
*        RELEASE 1 AOS, 11/3/71, LEVEL=1
*
PQESECT  DSECT ,    PARTITION QUEUE ELEMENT
PQEFFBQE DS    A    PTR TO FIRST FBQE OR IF NONE TO PQE
PQEBFBQE DS    A    PTR TO LAST FBQE OR IF NONE, TO PQE
PQEFPQE  DS    A    ADDR NEXT PQE OR ZERO
PQEBPQE  DS    A    ADDR PREVIOUS PQE OR ZERO
PQETCB   DS    A    ADDR TCB FOR JOB STEP TO WHICH SPACE BELONGS
PQESIZE  DS    F    SIZE OF REGION DESCRIBED BY THIS PQE
PQEREGN  DS    A    ADDR FIRST BYTE OF REGION DESCRIBED BY THIS PQE
PQERFLGS DS    CL1  FLAG BYTE
PQEHRID  DS    CL1  HIERARCHY IDENTIFIER
VMMFLGS  DS    BL1  SEVEN HIGH ORDER BITS ZERO
VVVRFLG  EQU   X'01' REAL OR VIRTUAL REGION FLAG
PQERSVD  DS    CL1  RESERVED
**       IHAPFTE
***********************************************************************
**                PAGE FRAME TABLE ENTRY       4/6/78                 *
**                                                                    *
**   THIS MACRO SUPPORTS: SU33                                @ZA31128*
**                                                                    *
**                                                                    *
**   ALL PFTES ARE CONTIGUOUS AND ARE LOCATED VIA DIRECT INDEX        *
**   ON THE HIGH ORDER 12 BITS OF ANY REAL ADDRESS. (THESE 12         *
**   BITS = PAGE FRAME NUMBER.) THE PAGE FRAME TABLE ENTRY            *
**   INDEX = PAGE FRAME NUMBER TIMES 16 (4 LOW ORDER BINARY ZEROS).   *
***********************************************************************
PFTE     DSECT , PFTEPTR
PFTPGID  DS    0F              AN IDENTIFIER OF THE VIRTUAL PAGE
*                              CURRENTLY OCCUPYING THIS FRAME.
*                              IF PFTIRRG IS 0, THIS FIELD IS
*                              SUBDIVIDED INTO PFTASID AND PFTVBN.
PFTASID  DS    XL2 -           THE ASID OF THE PAGE CURRENTLY
*                              OWNING THE FRAME
PFTVBN   DS    XL2 -           VIRTUAL BLOCK NUMBER  (HIGH
*                              ORDER 12 BITS OF 24 BIT VIRTUAL
*                              ADDRESS, LEFT ADJUSTED AND PADDED WITH
*                              4 LOW ORDER BINARY ZEROS) CURRENTLY
*                              OWNING THE REAL FRAME.
PFTQPTRS DS    0F              WORD CONTAINING PFTFQPTR AND PFTBQPTR
PFTFQPTR DS    H -             FORWARD PAGE FRAME QUEUE POINTER
*                              - THE PFTE INDEX OF THE NEXT ENTRY
*                              ON THIS PFQ
PFTBQPTR DS    H -             BACKWARD PAGE FRAME QUEUE POINTER
*                              - THE PFTE INDEX OF THE PREVIOUS
*                              ENTRY ON THIS PFQ
PFTFXCT  DS    H -             FIX COUNT OF THIS FRAME
PFTRSV1  DS    XL2 -           RESERVED
PFTFLAGS DS    0CL2 -          TWO PFTE FLAGS
PFTFLAG1 DS    BL1 -           FIRST FLAG FIELD
PFTONAVQ EQU   X'80' -         AVAILABLE FRAME QUEUE FLAG. WHEN 1,
*                              THIS PFTE IS ON AVAILABLE PFQ
PFTVRINT EQU   X'40' -         WHEN 1, PFTE INTERCEPTED FOR V=R
PFTLSQA  EQU   X'20' -         SQA/LSQA FLAG, WHEN 1, PAGE FRAME
*                              CONTAINS AN LSQA OR SQA PAGE. IF
*                              PFTASID=X'FFFF' THE FRAME CONTAINS A
*                              SQA PAGE.
PFTVRPLT EQU   X'10' -         V=R AREA POLLUTED FLAG, WHEN 1, A
*                              REQUEST FOR A PREFERRED AREA FRAME WAS
*                              SATISFIED WITH THIS V=R FRAME.  @ZA31128
PFTPCBSI EQU   X'08' -         PCB DEFINED FOR THIS PAGE FLAG, WHEN
*                              1, A PCB EXISTS FOR THIS PAGE.
PFTBADPG EQU   X'04' -         BAD PAGE FRAME FLAG, WHEN 1, THIS PAGE
*                              FRAME MAY NOT BE ALLOCATED.
PFTVRALC EQU   X'02' -         V = R ALLOCATED FLAG, WHEN 1, PFTE
*                              HAS BEEN ALLOCATED FOR A V=R REGION
PFTOFINT EQU   X'01' -         WHEN 1, FRAME IS INTERCEPTED TO
*                              GO OFFLINE
PFTFLAG2 DS    BL1 -           SECOND FLAG FIELD
PFTDFRLS EQU   X'80' -         DEFERRED RELEASE FLAG, WHEN 1, RELEASE
*                              HAS BEEN DEFERRED UNTIL THIS PAGE HAS
*                              BEEN FREED (PFTFXCT=0).
PFTOFFLN EQU   X'40' -         FRAME ONLINE/OFFLINE FLAG, WHEN 1,
*                              FRAME IS OFFLINE
PFTVR    EQU   X'20' -         V=R CANDIDATE, WHEN 1, FRAME MAY BE
*                              ALLOCATED TO A V=R REGION
PFTIRRG  EQU   X'10' -         WHEN 1, INDICATES A VIO FRAME
PFTSTEAL EQU   X'08' -         WHEN 1, INDICATES THIS PFTE SELECTED
*                              FOR STEALING, BUT HAS NOT BEEN STOLEN
*                              YET.
PFTPREF  EQU   X'04' -         WHEN 1, INDICATES PFTE IN THE PREFERRED
*                              AREA
PFTQNDX  DS    CL1 -           PFT QUEUE INDEX
PFTAFQN  EQU   X'00' -         PFTE ON AVAILABLE QUEUE
PFTSRQN  EQU   X'04' -         PFTE ON SQA RESERVED QUEUE
PFTCFQN  EQU   X'08' -         PFTE ON COMMON FRAME QUEUE
PFTSQAN  EQU   X'0C' -         PFTE ON SQA FRAME QUEUE
PFTRSBQN EQU   X'10' -         PFTE ON REAL STORAGE BUFFER (RSB)
*                              FRAME QUEUE
PFTLFQN  EQU   X'80' -         PFTE ON LOCAL FRAME QUEUE
PFTLSQAN EQU   X'84' -         PFTE ON LSQA FRAME QUEUE
PFTNQN   EQU   X'FF' -         PFTE NOT QUEUED
PFTUIC   DS    FL1 -           NUMBER OF STEAL INTERVALS DURING WHICH
*                              THIS FRAME WAS NOT REFERENCED
PFTEND   DS    0C -            END OF PAGE FRAME TABLE ENTRY
PFTLEN   EQU   PFTEND-PFTE -   LENGTH OF PAGE TABLE ENTRY
         IHAPVT
         IHASPQE
         IRAOUCB
         IHASDWA
         AGO   .GOTSDWA
.SDWA390 ANOP
         IHASDWA VRAMAP=NO
         IHAECVT
         IHAASSB
         IAZJSAB
         IHASPQE
         IHASPQA
         IHADQE
         IHAFQE
         IEFZB505 LOCEPAX=YES
         CSVDLCB DSECT=YES,LIST=NO,TITLE=NO,DLCB=YES
         AIF   (NOT &ENVBIG).GOTSDWA
         IHADCBE
.GOTSDWA ANOP
         IKJCPPL
         IKJDACB
         IKJDAPL
         IKJDAP00
         IKJDAP04
         IKJDAP08
         IKJDAP0C
DA0CDDN  DS    CL8                 1ST DD NAME TO CONCATENATE
         IKJDAP10
         IKJDAP18
         IKJDAP1C
         IKJDAP30
         IKJDAP34
         IKJDFPB
         IKJECT
         IKJEFFDF DFDSECT=YES,DFDSEC2=YES
         IKJGTPB
         IKJIOPL
         IKJPPL
         IKJPSCB
         IKJTCB DSECT=YES,LIST=NO
         IKJUPT
         PRINT GEN
         TITLE '  R E V I E W   -   P H A S E   1  '
REVIEW   RSECT
REVIEW   AMODE 31
         USING PSA,0
         ENTRY &HEL
         ENTRY &HEL2
         ENTRY REVED
         ENTRY REVOUT
         ENTRY RFE
         ENTRY PUTMSG
         ENTRY PFKDEF
         ENTRY BRVSINIT
&HEL     DC    0D'0'
&HEL2    DC    0D'0'
REVED    DC    0D'0'
REVOUT   DC    0D'0'
RFE      DC    0D'0'
         USING REVIEW,R10,R11,R12
         B     @PROLOG-*(,R15)
         DC    AL1(@HDLITLN)
@HDLIT   DC    CL24'REVIEW/FSHELP R&REL '
         DC    CL11' &ASMDATE'
         DC    CL8' &SYSTIME '
@HDLITLN EQU   *-@HDLIT
@SIZE    DC    0F'0',AL1(1),AL3($DATAL)
         DC    C'<=DYNLEN'         FLAG DYNAMIC AREA SUBPOOL AND SIZE
@PROLOG  STM   R14,R12,12(R13)
         LR    R10,R15             BASE
         LA    R15,1
         LA    R11,4095(R15,R10)   BASE
         LA    R12,4095(R15,R11)   BASE
         LR    R2,R1
         USING CPPL,R2
         SR    R0,R0
         ICM   R0,7,@SIZE+1
         SR    R3,R3
         IC    R3,@SIZE
         GETMAIN RC,LV=(0),SP=(R3),LOC=(24,64)
         LTR   R15,R15             SUCCESS?
         BZ    GOT@DATA            YES
         WTO   MF=(E,MSG00)
         LM    R14,R12,12(R13)
         LA    R15,16
         BR    R14
GOT@DATA LR    R14,R1              COPY TARGET AREA ADDRESS
         SR    R15,R15
         ICM   R15,7,@SIZE+1       GET TARGET AREA SIZE
         SR    R3,R3               ZERO SOURCE LENGTH AND PAD
         MVCL  R14,R2              CLEAR ACQUIRED AREA
         LR    R9,R1
         USING @DATA,R9
         USING DAPB08,MYDAPB
         USING DAPB18,MYDAPB
         ST    R13,4(,R1)          CHAIN SAVEAREA
         ST    R1,8(,R13)          CHAIN SAVEAREA
         LR    R13,R1              NEW SAVEAREA
         SPACE
         STM   R10,R12,BASE1
         L     R3,=A(REVIEW2)
         LA    R1,1
         LA    R4,4095(R1,R3)
         LA    R5,4095(R1,R4)
         LA    R6,4095(R1,R5)
         STM   R3,R6,BASE2         SAVE PHASE 2 BASE REGISTERS
         MVC   SIZE,@SIZE
         ST    R2,CPPLPTR
         MVC   REVCBUF(16),0(R2)   REVCBUF/REVUPT/REVPSCB/REVECT    ABL
         L     R1,CPPLCBUF         POINT TO THE COMMAND BUFFER      ABL
         MVC   COMMND,2(R1)        SAVE OFFSET FOR XCTL             ABL
         MVI   STATUS2,$2AUTH      ASSUME APF AUTHORIZED
         MVI   STATUS4,$4CSR       KEEP SAME SCROLLING FOR EACH MEMBER
         MVI   STATUS8,DIVFULL     NO I/O CAN BE AVOIDED WITHOUT DIV
         MVI   FINDSW2,FUOL        SEARCH TYPE 1 IS PRIMED FOR FIND
         MVI   STATUS7,$7RESHO     START WITH SOME SORT OF ERASE/WRITE
         MVI   SMFSBTYP,X'FF'      INVALIDATE SMF RECORD SUBTYPE
         MVI   SACHAR,SA           ASSUME IBM 3270 SET ATTRIBUTE
         MVI   FMTCOLOR,&FC        INITIALIZE COLOUR FOR FORMATS
         MVI   CHRCOLOR,&CC        INITIALIZE COLOUR FOR CHARACTERS
         MVI   HEXCOLOR,&HC        INITIALIZE COLOUR FOR HEXADECIMAL
         MVI   STRINGL,X'FF'       INVALIDATE SEARCH STRING
         MVI   STRING2L,X'F0'      INVALIDATE REPLACEMENT STRING
         MVI   FINDCOL2,X'7F'      RESET FIND COLUMN RANGE
         MVI   ARLLEN+1,36         SUPPLY ARL LENGTH
         MVC   ARLIDENT,=C'AR'     SUPPLY IDENTIFIER
         MVI   ARLOPT1,X'80'       ALLOW JFCB LIST ABOVE THE LINE
         MVI   ARLFIRST+1,2        ONLY FETCH JFCBS FOR CONCATENATIONS
         MVI   REVPOS+3,1          SET CURSOR POSITION FOR HOME CALC
         MVI   NONDISP,C'.'        SET NON-DISPLAYABLE REPRESENTATIVE
         MVI   OBTAINW,X'C1'       SET CAMLST REQUEST TO OBTAIN
         MVI   OBTAINW+1,X'08'     SET EADSCB=OK FOR Z/OS 1.10 & LATER
         LA    R0,BUFFSIZE         GET DATA STREAM LENGTH ADDRESS
         ST    R0,CBPRM1           SAVE IN REVCMPBF PLIST
         LA    R0,SCRNLNES         GET SCREEN DIMENSIONS ADDRESS
         ST    R0,CBPRM2           SAVE IN REVCMPBF PLIST
         LA    R0,SACHAR           POINT TO SET ATTRIBUTE CHAR
         ST    R0,CBPRM4           SAVE IN REVCMPBF PLIST
         OI    CBPRM4,X'80'        DENOTE LAST PARAMETER IN LIST
         MVI   BLDL+1,1            PREPARE BLDL PARAMETER LIST FOR USE
         MVI   BLDL+3,76           (AREA FOR ONE MAXIMUM LENGTH ENTRY)
         L     R1,REVCBUF          POINT TO THE COMMAND BUFFER
         LA    R15,256             PREPARE FOR LONG BUFFER
         CLI   0(R1),0             BUFFER LENGTH MORE THAN 256?
         BNE   *+8                 YES, JUST COPY FIRST 256 BYTES
         LH    R15,0(,R1)          NO, GET THE COMMAND BUFFER LENGTH
         ST    R15,TGETREGS+8      SAVE IT
         BCTR  R15,0               DECREMENT FOR EXECUTE
         EX    R15,COPYCBUF        COPY COMMAND BUFFER
         MVC   $MEMBER,=CL8' '
         MVC   $PASSWRD,=CL8' '
         MVC   $VOLSER,=CL8' '     (6 BYTES)
         MVC   $UNIT,=CL8' '
         MVC   $TERMID,=CL8' '
         MVC   $NETWRK,=CL8' '
         MVC   PERIODS,EDITT       INITIALIZE DISPLAY TRANSLATE TABLE
         SR    R0,R0               GET LOW VALUES
         BCTR  R0,0                GET HIGH VALUES
         ST    R0,DIVHICNT         SET STORED RECORD COUNT TO -1
         L     R15,CVTPTR(,0)      POINT TO THE CVT
         USING CVT,R15
         MVC   OSBITS,CVTDCB       COPY OS ARCHITECTURE FLAGS
         DROP  R15                 CVT
         L     R15,PSATOLD         POINT TO CURRENT TCB
         USING TCB,R15
         L     R15,TCBOTC          POINT TO ORIGINATING TASK
         L     R15,TCBRBP          POINT TO ITS ACTIVE RB
         DROP  R15                 TCB
         USING RBBASIC,R15
         ICM   R15,7,RBCDE1        POINT TO ITS CDE
         BZ    PDSREVOK            NOT ATTACHED FROM ORDINARY PROGRAM
         DROP  R15                 RBBASIC
         USING CDENTRY,R15
         CLC   =C'PDS',CDNAME      REVIEW ATTACHED FROM SOME PDS CMD?
         BE    ISPDSREV            YES
         CLC   =C'STAR',CDNAME     REVIEW ATTACHED FROM STARTOOL/BAT?
         BNE   PDSREVOK            NO
         DROP  R15                 CDENTRY
ISPDSREV OI    STATUS2,$2PDS       YES, REMEMBER FOR STAX OR HEL MSGID
PDSREVOK DS    0H
         TESTAUTH FCTN=1           TEST FOR APF AUTHORIZATION
         LTR   R15,R15             APF AUTHORIZED?
         BZ    NOTSOSR             YES, AVOID IKJEFTSR RETURN CODE 20
         NI    STATUS2,255-$2AUTH  NO, REMEMBER FOR LATER
         CLI   OSBITS,X'9B'        MVS/ESA OR LATER?
         BE    ISTSOSR             YES, ASSUME TSO/E AND SKIP BLDL
         MVC   BLDLNAME,=CL8'TSOEXEC'
         TM    OSBITS,X'13'        MVS?
         BO    BLDTSEX             YES
         MVI   BLDLNAME+2,C'S'     NO, LOOK FOR TSSEXEC UNDER MSP
BLDTSEX  BLDL  0,BLDL
         LTR   R15,R15             IS TSOEXEC IN THE LINK LIST?
         BNZ   NOTSOSR             NO, NO TSO SERVICE ROUTINE IN SYSTEM
ISTSOSR  OI    STATUS2,$2TSR       YES, TSOEXEC AND IKJEFTSR EXIST
NOTSOSR  DS    0H
         SPACE
************************************************************
*                                                          *
*         SET UP IOPL FOR PUTLINE                          *
*                                                          *
************************************************************
         SPACE
         LA    R15,MYIOPL
         USING IOPL,R15
         MVC   IOPLUPT(4),CPPLUPT
         MVC   IOPLECT(4),CPPLECT
         LA    R0,MYECB
         ST    R0,IOPLECB
         XC    MYECB,MYECB
         LA    R0,MYPTPB
         ST    R0,IOPLIOPB
         DROP  R15                 IOPL
         SPACE
         AIF   (NOT &MVS).SKIP1
         L     R15,CVTPTR(,0)      POINT TO THE CVT
         USING CVT,R15
         ICM   R15,15,CVTPUTL      GET ENTRY POINT TO CALL IKJPUTL
         BM    PUTLOADX            IF SIGN BIT ON NO NEED FOR LOAD
         DROP  R15                 CVT
.SKIP1   ANOP
         LA    R0,=CL8'IKJPUTL '
         LOAD  EPLOC=(0)
         LR    R15,R0              GET ENTRY ADDRESS
         LA    R15,0(,R15)         CLEAR HI BYTE FOR DELETE ROUTINE
PUTLOADX ST    R15,MYPUTLEP        SAVE PUTLINE ENTRY ADDRESS
         SPACE
************************************************************
*                                                          *
*         SET UP DAPL FOR DYNAMIC ALLOCATION               *
*                                                          *
************************************************************
         SPACE
         LA    R1,MYDAPL
         USING DAPL,R1
         MVC   DAPLUPT(4),CPPLUPT
         MVC   DAPLECT(4),CPPLECT
         LA    R0,MYECB
         ST    R0,DAPLECB
         MVC   DAPLPSCB(4),CPPLPSCB
         LA    R15,MYDAPB
         ST    R15,DAPLDAPB
         DROP  R1                  DAPL
         SPACE
************************************************************
*                                                          *
*         SET UP PFK DEFAULTS                              *
*                                                          *
************************************************************
         SPACE
         MVI   PROFDATA,C' '       INITIALIZE RELEASE NUMBER, COLOURS,
         MVC   PROFDATA+1(L'PROFDATA-1),PROFDATA        AND SCROLLING
         MVC   PROFDATA(PROFINIL),PROFINIT
         LA    R1,PFKDEF
         LA    R15,PFKTAB
         LA    R0,24
PFKINIT  MVI   0(R15),C' '
         MVC   1(PFKTABL-1,R15),0(R15) PAD WITH BLANKS
         MVC   0(PFKDEFL,R15),0(R1) INSERT DEFAULT
         LA    R1,PFKDEFL(,R1)     POINT TO NEXT DEFAULT
         LA    R15,PFKTABL(,R15)   POINT TO NEXT PFK ENTRY
         BCT   R0,PFKINIT          DO NEXT PFK IF ANY
         MVI   0(R15),0            END OF TABLE
         SPACE
         AIF   (&ENV390).NOTXA1
         SPACE
**********************************************************************
*                                                          *         *
*         DETECT AMODE31 EXTENSIONS TO MVS/370             *  R48.7  *
*                                                          * MAR2019 *
**********************************************************************
         SPACE
         BASR  R14,0               DETERMINE ADDRESSING MODE
         LTR   R14,R14             AMODE=31?
         BNM   *+8                 NO
         OI    OSBITS,X'80'        YES, SET FLAG
.NOTXA1  ANOP
         SPACE
**********************************************************************
*                                                          *         *
*         PROCESS 'REVIEW' RECURSION                       *  GP@P6  *
*                                                          *  04/88  *
**********************************************************************
         SPACE
         L     R1,PSATOLD          CURRENT TCB
         L     R14,TCBRBP-TCB(,R1) CURRENT RB
         USING RBBASIC,R14
         LA    R15,HELNAME         POINT TO NAME OF FULLSCREEN HELP
HELCHECK LA    R0,8                GET MAXIMUM LENGTH OF NAME
         ICM   R1,7,RBCDE1         CURRENT CDE
         USING CDENTRY,R1
         CLC   =C'RFE ',CDNAME     RFE COMMAND?
         BE    ITISRFE             YES
         CLC   =C'ED',CDNAME+3     REVED COMMAND?
         BE    ITISEDIT            YES
         CLI   CDNAME+3,C'O'       REVOUT COMMAND?
         BE    ITISOUT             YES
         CLI   CDNAME+3,C'L'       REVLEV COMMAND?
         BE    ITISLVL             YES
         LA    R1,CDNAME           POINT TO PROGRAM NAME
         DROP  R1                  CDENTRY
HELNAMLP CLI   0(R1),C' '          REACHED END OF COMMAND NAME?
         BE    HELMATCH            YES, CONSIDER IT A NAME MATCH
         CLC   0(1,R1),0(R15)      DOES THE NON-BLANK COMPARE EQUAL?
         BNE   HELCATCH            NO, MISMATCH FOUND
         LA    R1,1(,R1)           YES, NEXT BYTE IN COMMAND NAME
         LA    R15,1(,R15)         NEXT BYTE IN FULLSCREEN HELP NAME
         BCT   R0,HELNAMLP         CONTINUE NAME HELP MATCH CHECK
HELMATCH OI    STATUS6,HELSW       PERFORM FULLSCREEN HELP FUNCTION
         OI    STATUS4,HELOKAY     THEREFORE HEL IS AVAILABLE
         LA    R0,HELNAME2         POINT TO ALTERNATE HELP NAME
         CR    R15,R0              DID WE TRY THE SECOND NAME?
         BNH   HELORNOT            NO, MUST HAVE FOUND THE PRIMARY NAME
         OI    STATUS6,HELALT      YES, USE ALTERNATE NAME
         AGO   .SKIPOLD
HELORNOT ICM   R1,7,RBCDE1         CURRENT CDE
         USING CDENTRY,R1
         TM    CDATTR,CDMIN        INVOKED VIA ALIAS SUCH AS 'REV'?
         BZ    *+8                 NO, MAJOR CDE
         L     R1,CDXLMJP          YES, POINT TO MAJOR CDE
         TM    RBSTAB2,RBTCBNXT    LAST RB ON CHAIN?  (RBLINK->TCB?)
         BO    RECURSX             YES, BOTTOM RB SO NO RECURSION
         ICM   R15,7,RBLINKB       PREVIOUS RB
         BZ    RECURSX             ZERO POINTER IS INVALID
         DROP  R14,R1              RBBASIC, CDENTRY
         USING RBBASIC,R15
         ICM   R15,7,RBCDE1        PREVIOUS CDE
         DROP  R15                 RBBASIC
         USING CDENTRY,R15
         TM    CDATTR,CDMIN        INVOKED VIA ALIAS SUCH AS 'REV'?
         BZ    *+8                 NO, MAJOR CDE
         L     R15,CDXLMJP         YES, POINT TO MAJOR CDE
         CR    R1,R15              CURRENT AND PREVIOUS CDE THE SAME?
         BNE   RECURSX             NO, THIS IS NOT A RECURSIVE 'REVIEW'
         OI    MODE,MD_RECRS       YES, THIS IS A RECURSIVE 'REVIEW'
         DROP  R15                 CDENTRY
.SKIPOLD ANOP
HELORNOT TM    RBSTAB2,RBTCBNXT    LAST RB ON CHAIN?  (RBLINK->TCB?)
         BO    RECURSX             YES, BOTTOM RB SO NO RECURSION
         ICM   R14,7,RBLINKB       PREVIOUS RB
         BZ    RECURSX             ZERO POINTER IS INVALID
         L     R15,RBOPSW+4        GET PREVIOUS PRB PSW ADDRESS
         LA    R15,0(,R15)         ENSURE ADDRESS FORMAT
         L     R1,=A(REVCOMM)
         A     R1,=A(TSOPSWX-REVCOMM)
         CR    R15,R1              RECURSIVE 'REVIEW'?
         BL    RECURSX             NO
         A     R1,=A(HELPSWX-TSOPSWX)
         CR    R15,R1              RECURSIVE 'REVIEW'?
         BH    RECURSX             NO
         OI    MODE,MD_RECRS       YES, THIS IS A RECURSIVE 'REVIEW'
         DROP  R14                 RBBASIC
         SPACE
         L     R1,4(,R13)          POINT TO PREVIOUS SAVE AREA
         USING SAVER,R1
         L     R1,SAVGRS9          POINT TO PREVIOUS @DATA (R9 VALUE)
         DROP  R1                  SAVER
         TM    STATUS4-@DATA(R1),HELOKAY    OUTER LEVEL FOUND 'HEL'?
         BZ    HELHELOK            NO, LEAVE FLAG AS IS
         OI    STATUS4,HELOKAY     YES, SET FLAG ACCORDINGLY
         TM    STATUS6-@DATA(R1),HELALT     USING ALTERNATE NAME?
         BZ    HELHELOK            NO, LEAVE FLAG AS IS
         OI    STATUS6,HELALT      YES, SET FLAG ACCORDINGLY
HELHELOK DS    0H
         MVC   DOUBLE(1),STATUS7-@DATA(R1)
         NI    DOUBLE,$7SM         EXTRACT SESSION MANAGER SETTING
         OC    STATUS7,DOUBLE      APPLY IT
         SPACE
         AIF   (&ENV390).NOTXA2
         CLC   OSBITS,OSBITS-@DATA(R1)
         BE    RIGHTOS
         MVC   OSBITS,OSBITS-@DATA(R1)
         XASAM31
RIGHTOS  DS    0H
.NOTXA2  ANOP
*                                  COPY SCREEN DIMENSIONS
         MVC   SCRNLNES(8),SCRNLNES-@DATA(R1)
*                                  COPY QUERY RESULTS
         MVC   STATUS5,STATUS5-@DATA(R1)
         MVC   GRAFDTLS,GRAFDTLS-@DATA(R1)
*                                  COPY SET ATTRIBUTE ORDER CODE
         MVC   SACHAR,SACHAR-@DATA(R1)
*                                  COPY DATA COLOURS
         MVC   FMTCOLOR(3),FMTCOLOR-@DATA(R1)
*                                  COPY RECALL STACK POINTERS
         MVC   RECALPTR(8),RECALPTR-@DATA(R1)
*                                  COPY RECURSION VECTOR ADDRESS
         MVC   RECURS@,RECURS@-@DATA(R1)
*                                  COPY DISPLAY TRANSLATE TABLE
         MVC   PERIODS,PERIODS-@DATA(R1)
*                                  COPY SCROLL AMOUNT
         MVC   SCROLL,SCROLL-@DATA(R1)
*                                  COPY ERASE SCREEN DATA STREAM
         MVC   ERASECMD,ERASECMD-@DATA(R1)
         NI    STATUS4,255-$4CSR
         OC    STATUS4,STATUS4-@DATA(R1)
*                                  COPY ISPF SERVICES STATUS FLAG
         TM    STATUS8-@DATA(R1),$8ISPF
         BNO   *+8
         OI    STATUS8,$8ISPF
*                                  COPY I/O STACK STATUS
         MVC   REVIOWK@,REVIOWK@-@DATA(R1)
*                                  COPY PROFILE DATA PREFIX
         MVC   PROFDATA(64),PROFDATA-@DATA(R1)
*                                  COPY PFK VALUES
         LA    R0,6                (PFK-TABLE-SIZE)/256
         LA    R15,PFKTAB          POINT TO TARGET PFK TABLE
         LA    R14,PFKTAB-@DATA(,R1)    AND SOURCE PFK TABLE
COPYPFLP MVC   0(256,R15),0(R14)   COPY 256-BYTE CHUNK
         LA    R15,256(,R15)       POINT TO NEXT TARGET CHUNK
         LA    R14,256(,R14)       POINT TO NEXT SOURCE CHUNK
         BCT   R0,COPYPFLP         COPY LATEST IN-CORE PFK TABLE
         SPACE
         L     R15,RECURS@         POINT TO RECURSION VECTOR
         LA    R14,1               GET FIRST SESSION ID
         LA    R0,RCRSLIM          GET SESSION COUNT LIMIT
SESNLOOP CLI   1(R15),0            AVAILABLE SESSION?
         BE    SESNOKAY            YES (ASSUMING LIMIT < 256)
         LA    R14,1(,R14)         INCREMENT SESSION ID
         LA    R15,RCRSIZE(,R15)   POINT TO VECTOR ELEMENT
         BCT   R0,SESNLOOP         KEEP LOOKING FOR A VACANT ID
         MVI   MSG-@DATA(R1),136   MAX SESSIONS ALREADY ACTIVE
         B     EXITA12             GO AWAY
SESNOKAY STH   R14,0(,R15)         FLAG SESSION ID IN USE
         ST    R9,4(,R15)          SET WORKING STORAGE ADDRESS
         MVC   8(8,R15),=CL8' '    BLANK OUT SCREEN NAME
         ST    R14,RECURS#         SAVE CURRENT SESSION ID
         SPACE
         B     $$REVINX            AVOID DISK I/O FOR PROFILE READING
*                                    AND 'HEL' AVAILABILITY CHECKING
HELCATCH LA    R0,HELNAME2         RETRY FULLSCREEN HELP NAME MATCHING
         CR    R15,R0              HAVE WE TRIED THE SECOND NAME?
         BNL   HELORNOT            YES, NOT INVOKED AS FULLSCREEN HELP
         LR    R15,R0              NO
         B     HELCHECK            GO TRY IT
ITISEDIT OI    STATUS11,$11ED      FLAG REVED  COMMAND
         B     HELORNOT
ITISLVL  OI    STATUS11,$11LV      FLAG REVLEV COMMAND
         B     HELORNOT
ITISRFE  OI    STATUS13,$13RFE     FLAG REVIEW FRONT END ENVIRONMENT
         B     HELORNOT
ITISOUT  OI    STATUS11,$11OT      FLAG REVOUT COMMAND
         B     HELORNOT
RECURSX  DS    0H
         SPACE
**********************************************************************
*                                                          *         *
*         PREPARE 'HEL' MINOR CDE                          *  GP@FT  *
*                                                          *  01/93  *
**********************************************************************
         SPACE
         TM    STATUS4,HELOKAY     IS 'HEL' ALREADY LOADED?
         BO    CDECHKX             YES, BYPASS THIS CODE
         L     R1,PSATOLD          CURRENT TCB
         USING TCB,R1
         L     R15,TCBRBP          CURRENT RB
         USING RBBASIC,R15
         ICM   R15,7,RBCDE1        CURRENT CDE
         DROP  R15                 RBBASIC
         USING CDENTRY,R15
         TM    CDATTR,CDMIN        INVOKED VIA ALIAS SUCH AS 'REV'?
         BZ    *+8                 NO
         L     R15,CDXLMJP         YES, POINT TO MAJOR CDE
         TM    CDATTR,CDNIP        IS CDE REALLY AN LPDE?
         BO    HELAVAIL            YES, REVIEW IS IN LINK PACK AREA
*                                      SO ASSUME A PROPER INSTALL
         DROP  R15                 CDENTRY
         L     R1,TCBJSTCB         JOB STEP TCB
         LA    R1,TCBJPQ           POINT TO LAST CDE POINTER
         USING CDENTRY,R1
CDELOOP  ICM   R1,7,CDCHAIN+1      POINT TO NEXT CDE ON CHAIN
         BZ    CDEEVAL             END OF CHAIN SO EVALUATE RESULTS
         MVC   BLDLNAME,HELNAME    FLAG WHICH IF FOUND
         CLC   HELNAME,CDNAME      IS 'HEL' IN THE JOB PACK AREA?
         BE    HELAVAIL            YES, STOP THE SEARCH
         MVC   BLDLNAME,HELNAME2   FLAG WHICH IF FOUND
         CLC   HELNAME2,CDNAME     IS 'FSHELP' IN THE JOB PACK AREA?
         BE    HELAVAIL            YES, STOP THE SEARCH
         B     CDELOOP             CONTINUE SEARCHING FOR 'HEL'
         DROP  R1                  CDENTRY
         USING CDENTRY,R15
CDEEVAL  TM    STATUS2,$2AUTH      APF AUTHORIZED?
         BO    CDEIDENT            YES, CAN MAKE A MINOR CDE
         TM    CDATTR2,CDSYSLIB    PROGRAM FROM AN APF LIBRARY?
         BO    CDEBLDLD            YES, CANNOT MAKE A MINOR CDE
CDEIDENT LA    R0,HELNAME          POINT TO HEL COMMAND NAME
         L     R1,CDENTPT          POINT TO REVIEW/HEL ENTRY POINT
         DROP  R15                 CDENTRY
         IDENTIFY EPLOC=(0),ENTRY=(1)   MAKE IT KNOWN TO THE SYSTEM
         LTR   R15,R15             DID IDENTIFY SUCCEED?
         BZ    HELAVAIL            YES, HEL IS NOW IN THE JPA
CDEBLDLD MVC   BLDLNAME,HELNAME    NO, RESORT TO A BLDL EVEN THOUGH
CDEBLDL  BLDL  0,BLDL                  IT INVOLVES (*GASP*!!) I/O
         LTR   R15,R15             IS HEL AVAILABLE?
         BZ    HELAVAIL            YES
         CLC   BLDLNAME,HELNAME2   SEARCHED FOR ALTERNATE NAME?
         BE    CDECHKX             YES, USE TSO HELP
         MVC   BLDLNAME,HELNAME2   NO
         B     CDEBLDL             DO IT NOW
HELAVAIL OI    STATUS4,HELOKAY     HELLO, BUT WHO IS KAY?
         CLC   BLDLNAME,HELNAME2   SEARCHED FOR ALTERNATE NAME?
         BNE   CDECHKX             NO, USE PRIMARY FULLSCREEN HELP NAME
         OI    STATUS6,HELALT      YES, USE ALTERNATE NAME
CDECHKX  DS    0H
         SPACE
**********************************************************************
*                                                          *         *
*         CREATE RECURSION VECTOR AND RECALL STACK         *  R42.1  *
*                                                          * JAN2009 *
**********************************************************************
         SPACE
         LA    R0,$GLBSIZE         GET REQUIRED STORAGE SIZE
         MVI   GETMNTRC,1          TRACK GETMAIN IN CASE OF FAILURE
         GETSTOR RC,LV=(0),LOC=(31,64)
         LTR   R15,R15             SUCCESS?
         BZ    GOT$GLB             YES
         WTO   MF=(E,MSG00)
         LA    R2,16
         B     FREEDYN
GOT$GLB  ST    R1,RECURS@          SAVE THE ADDRESS
         LR    R0,R1               POINT TO IT
         LR    R14,R1              POINT TO IT
         LA    R1,$GLBSIZE         GET ITS LENGTH
         SR    R15,R15             ZERO PAD AND SOURCE LENGTH
         MVCL  R0,R14              CLEAR THE NEW STORAGE
         LA    R0,1                CLAIM SESSION ID 1
         ST    R0,RECURS#          SET THE CURRENT SESSION ID
         STH   R0,0(,R14)          OCCUPY THE VECTOR ELEMENT
         ST    R9,4(,R14)          SET POINTER TO @DATA
         MVC   8(8,R14),=CL8' '    BLANK OUT SCREEN NAME
         SPACE
**********************************************************************
*                                                          *         *
*         SET UP THE RECALL LINKED LIST                    *  GP@P6  *
*                                                          *  10/87  *
**********************************************************************
         SPACE
         L     R1,RECURS@          POINT TO THE RECURSION VECTOR
         LA    R1,RCRSL+GDL(,R1)   POINT TO RECALL STACK
         LR    R14,R1              POINT TO RECALL STACK
         ST    R1,RECALUSE         FIRST IS NEXT ONE TO USE
         LA    R0,RECLDPTH-1       GET NUMBER TO LOOP THROUGH
         MVI   10(R1),C' '         BLANK OUT TEXT OF FIRST ELEMENT
RECALOOP LA    R5,10+RECALDLN(,R1) POINT TO NEXT AFTER CURRENT ELEMENT
         ST    R5,0(,R1)           FORWARD POINTER
         ST    R1,4(,R5)           BACKWARD POINTER
         MVI   8(R5),X'80'         NEGATIVE LENGTH FOR UNUSED ELEMENT
         LR    R1,R5               POINT TO NEXT ELEMENT
         BCT   R0,RECALOOP         LOOP THROUGH ELEMENTS
         ST    R14,0(,R5)          CLOSE FORWARD POINTER CIRCLE
         ST    R5,4(,R14)          CLOSE BACKWARD POINTER CIRCLE
         SPACE
**********************************************************************
*                                                          *         *
*         LOAD INVOKING TSO COMMAND INTO RECALL STACK      *  GP@HC  *
*                                                          * NOV2000 *
**********************************************************************
         SPACE
         L     R1,REVCBUF          POINT TO TSO COMMAND BUFFER
         LH    R14,0(,R1)          GET COMMAND BUFFER LENGTH
         LA    R1,4(,R1)           POINT TO TSO COMMAND JUST ISSUED
         SH    R14,=H'4'           GET COMMAND TEXT LENGTH
         L     R15,RECALUSE        POINT TO CURRENT ELEMENT
         BCTR  R14,0               DECREMENT FOR EXECUTE
         LTR   R14,R14             MORE THAN ONE CHARACTER?
         BNP   RECAL1X             NO, DON'T REMEMBER IT
         LA    R0,RECALDLN-1       GET MAXIMUM RECALL DATA LENGTH CODE
         L     R15,0(,R15)         POINT TO NEXT ONE TO USE
         XC    10(RECALDLN,R15),10(R15)  SIMPLIFY DEBUGGING
         CR    R14,R0              IS COMMAND TOO LONG?
         BNH   RECAL1EX            NO, BUFFER CAN HOLD ALL OF IT
         LR    R14,R0              YES, MUST HAVE HIT CLEAR FIRST
RECAL1LD MVC   10(0,R15),0(R1)     <<< EXECUTED >>>
RECAL1EX EX    R14,RECAL1LD        LOAD COMMAND STACK ENTRY
         STH   R14,8(,R15)         SAVE LENGTH CODE
         ST    R15,RECALUSE        NEW CURRENT ELEMENT
RECAL1X  DS    0H
         SPACE
**********************************************************************
*                                                          *         *
*         READ IN 'REVIEW' PROFILE FROM DISK               *  GP@P6  *
*                                                          *  10/90  *
**********************************************************************
         SPACE
         L     R15,=A(REVPROF)     POINT TO PROFILE I/O ROUTINE
         LA    R0,$$REVSIZ         GET PROFILE MEMBER BYTE COUNT
         SR    R1,R1               DO NOT SUPPLY DATA AREA
         MVC   DOUBLE,$$REVMEM     SUPPLY PROFILE MEMBER NAME
         BASR  R14,R15             READ BASE PROFILE MEMBER
         LM    R3,R4,DOUBLE        GET SIZE AND ADDRESS OF DATA
         STM   R3,R4,20(R13)       SAVE IT TO FREE DOUBLE FOR USE
         LA    R0,$$REVSIZ         GET PROFILE MEMBER BYTE COUNT
         CR    R3,R0               READ ENOUGH DATA?
         BL    $$REVIFM            NO, JUST USE DEFAULTS
         CLI   $PROFU(R4),C' '     DISPLAYABLE CODE POINT?
         BL    PNONDEF             NO, RETAIN PERIOD
         CLI   $PROFU(R4),X'FF'    DISPLAYABLE CODE POINT?
         BE    PNONDEF             NO, RETAIN PERIOD
         MVC   NONDISP,$PROFU(R4)  YES, USE IT FOR NON-DISPLAY DATA
PNONDEF  TM    $PROFF(R4),X'07'    VALID COLOUR?
         BZ    PSCDEF              NO, USE PROFILE SMF COLOUR DEFAULT
         MVC   FMTCOLOR,$PROFF(R4) COPY COLOUR CODE FOR USE
PSCDEF   NI    FMTCOLOR,X'0F'      GET CHARACTER COLOUR NUMBER
         TM    $PROFC(R4),X'07'    VALID COLOUR?
         BZ    PCCDEF              NO, USE PROFILE CHAR COLOUR DEFAULT
         MVC   CHRCOLOR,$PROFC(R4) COPY COLOUR CODE FOR USE
PCCDEF   NI    CHRCOLOR,X'0F'      GET CHARACTER COLOUR NUMBER
         TM    $PROFH(R4),X'07'    VALID COLOUR?
         BZ    PXCDEF              NO, USE PROFILE HEX COLOUR DEFAULT
         MVC   HEXCOLOR,$PROFH(R4) COPY COLOUR CODE FOR USE
PXCDEF   NI    HEXCOLOR,X'0F'      GET HEXADECIMAL COLOUR NUMBER
         CLI   $PROFS(R4),C'C'     CURSOR SCROLLING?
         BE    PSCRLDEF            YES, THIS IS ALREADY ASSUMED
         NI    STATUS4,255-$4PAGE  NO, FLAG HALF PAGE SCROLLING
         CLI   $PROFS(R4),C'H'     HALF PAGE SCROLLING?
         BE    PSCRLDEF            YES, THIS IS NOW FLAGGED
         NI    STATUS4,255-$4HALF  NO, RESET HALF PAGE FLAG
         OI    STATUS4,$4PAGE      FLAG HALF PAGE SCROLLING
         CLI   $PROFS(R4),C'P'     FULL PAGE SCROLLING?
         BE    PSCRLDEF            YES, THIS IS NOW FLAGGED
         CLI   $PROFS(R4),C'0'     NO, NUMERIC CHARACTER?
         BL    PSCRLCSR            NO, USE CURSOR SCROLLING
         CLI   $PROFS+1(R4),C'0'   YES, SECOND NUMERIC CHARACTER?
         BL    PSCRLCSR            NO, USE CURSOR SCROLLING
         NI    STATUS4,255-$4PAGE  YES, RESET PAGE SCROLLING FLAG
         PACK  DOUBLE,$PROFS(2,R4) GET PACKED DECIMAL
         CVB   R0,DOUBLE           GET BINARY
         ST    R0,SCROLL
         B     PSCRLDEF            SCROLL AMOUNT NOW SET
PSCRLCSR OI    STATUS4,$4CSR       FLAG CURSOR SCROLLING
PSCRLDEF MVC   PROFDISP,$PROFD(R4) COPY CODE POINT DISPLAY MODE
         NI    $PROFM(R4),$7SM     EXTRACT SESSION MANAGER SETTING
         OC    STATUS7,$PROFM(R4)  APPLY IT
         LR    R1,R4               POINT TO PROFILE READ AREA
         LA    R0,24               LOAD THE NUMBER OF PFK VALUES
         LA    R4,80(,R4)          POINT TO BEFORE SOURCE PFK VALUES
         LA    R3,PFKTAB-PFKTABL   POINT TO BEFORE TARGET PFK VALUES
         CLI   PROFDISP,C'A'       STANDARD CODE-POINT INTERPRETATION?
         BE    PPLOADLP            YES, PROCEED
         MVI   PROFDISP,C'T'       NO, MUST BE "TEXT" INTERPRETATION
PPLOADLP LA    R4,80(,R4)          POINT TO NEXT SOURCE PFK VALUE
         LA    R3,PFKTABL(,R3)     POINT TO NEXT TARGET PFK VALUE
         CLC   0(1,R3),0(R4)       AID AS EXPECTED?
         BNE   PPLOADNX            NO, SKIP THIS ONE
         CLI   1(R4),C'='          ASSIGNMENT AS EXPECTED?
         BNE   PPLOADNX            NO, SKIP THIS ONE
         MVC   1(PFKTABL-1,R3),2(R4)        LOAD PFK VALUE
PPLOADNX BCT   R0,PPLOADLP         LOAD NEXT PROFILE PFK IF ANY
$$REVIFM LM    R0,R1,20(R13)       GET SIZE AND ADDRESS OF DATA
         LTR   R1,R1               ANY BUFFER TO FREE?
         BZ    $$REVINX            NO
         LA    R0,$$REVSIZ         GET PROFILE MEMBER BYTE COUNT
         FREEMAIN RU,LV=(0),A=(1)  YES, FREE THE PROFILE DATA HOLD AREA
$$REVINX MVC   ACTCOLOR,CHRCOLOR   ALWAYS START WITH HEX OFF
         L     R1,RECURS@          POINT TO THE RECURSION VECTOR
         LA    R0,1
         A     R0,RCRSL+16(,R1)    INCREMENT PARALLEL SESSION COUNTER
         ST    R0,RCRSL+16(,R1)    SAVE UPDATED COUNTER
         SPACE
**********************************************************************
*                                                          *         *
*         GET SCREEN SIZE DEPENDENT AREAS                  *  GP@HC  *
*                                                          * JUL2002 *
**********************************************************************
         SPACE
         LM    R0,R1,SCRNLNES      LOAD THE SCREEN DIMENSIONS
         LTR   R0,R0               GOT ANY?
         BP    GOTSIZE             YES, MUST BE RECURSIVE SESSION
         GTSIZE
         STM   R0,R1,SCRNLNES      SAVE THE SCREEN DIMENSIONS
GOTSIZE  LTR   R6,R0               LOOKING LIKE A 3270 SCREEN?
         BNP   ERRTERM             NO, BETTER A MESSAGE THAN A S0C4
         SH    R6,=H'4'            DISCOUNT NON-DATA LINES
         BNP   ERRTERM             SCREEN LOOKS A BIT SMALL
         MH    R6,=Y(DIRSIZ)       GET THE HOLD DIRECTORY SIZE
         MR    R0,R0               GET SCREEN BUFFER SIZE
         ST    R1,SCREENSZ         SAVE IT
         SLA   R1,2
         A     R1,SCREENSZ         GET TOTAL 3270 BUFFER REQUIREMENTS
         LA    R0,7(R6,R1)         GET SCREEN DEPENDENT AREA SIZE + 7
         SRL   R0,3
         SLL   R0,3                ROUND UP TO DOUBLEWORD BOUNDARY
         ST    R0,HOLDSIZE         SAVE TOTAL SIZE OF THIS GETMAIN
         MVI   GETMNTRC,2          TRACK GETMAIN IN CASE OF FAILURE
         GETMAIN RC,LV=(0),LOC=(24,64)
         LTR   R15,R15             SUCCESS?
         BZ    GOTHOLD             YES
         WTO   MF=(E,MSG00)
         LA    R2,16
         B     HOLDGONE
GOTHOLD  ST    R1,HOLDDIR          SAVE HOLD DIRECTORY ADDRESS
         AR    R6,R1               POINT PAST HOLD DIRECTORY
         ST    R6,SCREENBF         SAVE PRIMARY SCREEN BUFFER ADDRESS
         A     R6,SCREENSZ         POINT PAST PRIMARY BUFFER
         ST    R6,SHADOWBF         SAVE SHADOW SCREEN BUFFER ADDRESS
         A     R6,SCREENSZ         POINT PAST SHADOW BUFFER
         ST    R6,SCREENWK         SAVE DATA STREAM AREA ADDRESS
         ST    R6,CBPRM3           SAVE DATA STREAM AREA ADDRESS
GTSIZEX  DS    0H
         SPACE
**********************************************************************
*                                                          *         *
*         PROCESS "POINT AND SHOOT" REQUEST                *  GP@FT  *
*                                                          *  11/96  *
**********************************************************************
         SPACE
         L     R15,=A(REVPNS)      "POINT-AND-SHOOT" - ALSO ISPF CHECK
         BASR  R14,R15             CALL SUBROUTINE
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    PPLSETUP            YES, POINT-AND-SHOOT INACTIVE
         LTR   R15,R15             A POSITIVE OUTCOME?
         BP    USEDAIR             YES, ATTEMPT ALLOCATION
         BM    ERRPNS              NO, NEGATIVE SO END THIS 'REVIEW'
         SPACE
**********************************************************************
*                                                          *         *
*         PROCESS REVIEW FRONT END                         *  R43.0  *
*                                                          * JAN2010 *
**********************************************************************
         SPACE
         TM    STATUS13,$13RFE     RFE REQUEST?
         BNO   NOTRFE              NO
         L     R15,=A(SCRNINIT)
         BASR  R14,R15             SWITCH TO FULLSCREEN MODE
         L     R15,=A(REVMENU)     YES
         BASR  R14,R15             CALL SUBROUTINE
         B     EXITA##             EXIT REVIEW
NOTRFE   DS    0H                  NOTHING DONE HERE
         SPACE
**********************************************************************
*                                                          *         *
*         PROCESS DATA SET LIST REQUEST                    *  R42.4  *
*                                                          * APR2009 *
**********************************************************************
         SPACE
         TM    STATUS11,$11LV      REVLEV REQUEST?
         BNO   NOTLEVEL            NO
         L     R15,=A(SCRNINIT)
         BASR  R14,R15             SWITCH TO FULLSCREEN MODE
         L     R15,=A(REVLEVL)     YES
         BASR  R14,R15             CALL SUBROUTINE
         B     EXITA##             EXIT REVIEW
NOTLEVEL DS    0H                  NOTHING DONE HERE
         SPACE
         AIF   (NOT &ENV390).HFSX
**********************************************************************
*                                                          *         *
*         DETECT HIERARCHICAL FILE REQUEST                 *  GP@HC  *
*                                                          * OCT2000 *
**********************************************************************
         SPACE
         L     R1,REVECT           POINT TO THE ECT
         USING ECT,R1
         TM    ECTSWS,ECTNOPD      ANY OPERANDS?
         BO    PPLSETUP            NO, SO NOT HFS REQUEST
         TM    STATUS11,$11OT      REVOUT COMMAND?
         BO    PPLSETUP            YES, SO NOT HFS REQUEST
         DROP  R1                  ECT
         L     R1,REVCBUF          POINT TO THE COMMAND BUFFER
         AH    R1,2(,R1)           POINT TO FIRST OPERAND
         CLI   4(R1),QUOTE         QUOTED NAME?
         BNE   *+8                 NO
         LA    R1,1(,R1)           YES, POINT PAST QUOTE
         CLI   4(R1),C'~'          HOME DIRECTORY REQUEST?
         BE    XOSCHECK            POSSIBLY, GO CHECK OS LEVEL
         CLI   4(R1),C'/'          COULD IT BE A PATH NAME?
         BNE   PPLSETUP            NO, SO NOT HFS REQUEST
XOSCHECK CLI   OSBITS,X'9B'        CAN UNIX BE PRESENT?
         BNE   PPLSETUP            NO, LET DSNAME PARSING HANDLE IT
         NI    STATUS2,255-$2PDS   YES, FORGET ABOUT MEMBERS AND HELP
         L     R15,=A(SCRNINIT)
         BASR  R14,R15             SWITCH TO FULLSCREEN MODE
         L     R15,UNIXADDR        TRY TO LIST UNIX DIRECTORY
         BASR  R14,R15             CALL REVUNIX
         B     EXITA##             EXIT REVIEW
.HFSX    ANOP
         SPACE
************************************************************
*                                                          *
*         SET UP PPL FOR PARSE                             *
*                                                          *
************************************************************
         SPACE
PPLSETUP DS    0H
         LA    R15,MYPPL
         USING PPL,R15
         MVC   PPLUPT(4),CPPLUPT
         MVC   PPLECT(4),CPPLECT
         LA    R0,MYECB
         ST    R0,PPLECB
         XC    MYECB,MYECB
         L     R0,=A(HELPCL)
         TM    STATUS6,HELSW
         BO    GOTPCL
         L     R0,=A(OUTPCL)
         TM    STATUS11,$11OT
         BO    GOTPCL
         L     R0,=A(REVPCL)
GOTPCL   ST    R0,PPLPCL
         LA    R0,MYANS
         ST    R0,PPLANS
         MVC   PPLCBUF(4),CPPLCBUF
         ST    R9,PPLUWA
         DROP  R15                 PPL
         TM    STATUS11,$11OT
         BNO   CALLPARS
         MVI   $DSNAME+2,C' '      BLANK THE JOB NAME AREA
         MVC   $DSNAME+3(43),$DSNAME+2
         L     R1,REVECT           POINT TO THE ECT
         USING ECT,R1
         TM    ECTSWS,ECTNOPD      REVOUT WITHOUT ANY OPERANDS?
         BO    SHOWOUT             YES, SKIP TSO COMMAND PARSE
         DROP  R1                  ECT
         L     R1,REVCBUF          POINT TO THE COMMAND BUFFER
         LH    R14,2(,R1)          GET OPERAND OFFSET
         LTR   R14,R14             VALID?
         BNP   CALLPARS            NO, TOO HARD TO FIGURE OUT
         LA    R14,4(R14,R1)       POINT TO OPERAND
         CLI   0(R14),C'*'         DOES IT START WITH AN ASTERISK?
         AIF   (&ENV390).OUTAST1
         BNE   CALLPARS            NO, GO PARSE AS NORMAL
         CLI   OSBITS,X'13'        MVS/370?
         BNE   SHOWOUT             NO, IGNORE OPERAND
         L     R3,CVTPTR(,0)       POINT TO THE CVT
         USING CVT,R3
         TM    CVTSMCA,X'80'       VSAM SMF DATA SETS?
         BO    SHOWOUT             YES, NOT MVS 3.8 VANILLA
         L     R3,CVTJESCT         POINT TO THE JESCT
         DROP  R3                  CVT
         USING JESCT,R3
         L     R3,JESSSCT          POINT TO PRIMARY SSCT
         DROP  R3                  JESCT
         USING SSCT,R3
         CLI   SSCTSSID,SSCTJES2   JES2 PRIMARY SUBSYSTEM?
         BNE   SHOWOUT             NO, IGNORE OPERAND
         DROP  R3                  SSCT
         MVI   $DSNAME+2,C'*'      LOAD THE JOB NAME AREA
         MVI   $DSNAME+1,1         INDICATE ITS LENGTH
         B     SHOWOUT             ALL NECESSARY PARSING NOW DONE
         AGO   .OUTAST2
.OUTAST1 ANOP
         BE    SHOWOUT             YES, IGNORE OPERAND
.OUTAST2 ANOP
         SPACE
************************************************************
*                                                          *
*         CALL THE PARSE SERVICE ROUTINE                   *
*                                                          *
************************************************************
         SPACE
CALLPARS LR    R1,R15              POINT TO PPL
         XASAM24
         AIF   (NOT &MVS).SKIP2
         L     R15,CVTPTR(,0)      POINT TO THE CVT
         USING CVT,R15
         ICM   R15,15,CVTPARS      GET ENTRY POINT TO CALL IKJPARS
         BNM   PARSELNK            IF SIGN BIT OFF DO LINK, NOT CALL
         DROP  R15                 CVT
         BASR  R14,R15             CALL IKJPARS
         B     PARSEEXT            SKIP AROUND LINK
PARSELNK DS    0H
.SKIP2   ANOP
         LINK  EPLOC=IKJPARS,SF=(E,LINKAREA)
         SPACE
PARSEEXT DS    0H
         XASAM31
         LTR   R15,R15
         BZ    PARSEOK
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    XCTLHELP            YES, LET TSO HELP TRY IT
         LA    R1,MSG01
         BAS   R14,PUTMSG1
         LA    R15,12
         B     EXIT
IKJPARS  DC    CL8'IKJPARS'
         SPACE
PARSEOK  L     R3,MYANS
         SPACE
**********************************************************************
*                                                          *         *
*         INVOKE REVOUT                                    *  GP@P6  *
*                                                          * OCT2005 *
**********************************************************************
         SPACE
         TM    STATUS11,$11OT
         BNO   NOTOUT
         LA    R15,$DSNAME+2
         USING OUTPARMD,R3
         LA    R6,JOB
         TM    6(R6),X'80'         IS THE JOB NAME SPECIFIED?
         BNO   SHOWOUT             NO, TREAT AS NO OPERANDS
         L     R14,0(,R6)          POINT TO JOB NAME VALUE
         LH    R1,4(,R6)           GET LENGTH
         TM    14(R6),X'80'        IS THE JOB ID SPECIFIED?
         BNO   JOBLENOK            NO
         LH    R1,12(,R6)          YES, ADD ITS LENGTH
         LA    R1,2(,R1)           COUNT PARENTHESES
JOBLENOK STH   R1,$DSNAME
         BCTR  R1,0                LENGTH MINUS 1 FOR EX
         EX    R1,COPYDSN          MOVE JOB NAME
         DROP  R3                  OUTPARMD
         SPACE
SHOWOUT  L     R15,=A(SCRNINIT)
         BASR  R14,R15             SWITCH TO FULLSCREEN MODE
         L     R15,=A(REVOUTPT)    POINT TO OUTPUT DISPLAY ROUTINE
         BASR  R14,R15             INVOKE IT
         B     EXITARC             EXIT - ROUTINE HAS SET RC
         SPACE
************************************************************
*                                                          *
*         FILL IN ALL INFO FROM PARSE                      *
*                                                          *
************************************************************
         SPACE
         USING IKJPARMD,R3
NOTOUT   TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    HARSE               YES - DO PARSING FOR HEL
         MVC   FILEKV,FILEKW
         MVC   DATAKV,DATAKW
         MVC   DATAKV(1),XISPKW+1
         LA    R6,DSN
         TM    6(R6),X'80'         IS DATASET NAME SPECIFIED?
         BO    OKDSN               YES - BRANCH
         LA    R1,MSG05            NO - JUST MEMBER NAME
         BAS   R14,PUTMSG1
         B     EXITA12
COPYCBUF MVC   REPLY(0),0(R1)      <<< EXECUTED >>>
COPYDSN  MVC   0(0,R15),0(R14)     <<< EXECUTED >>>
COPYTOP  EQU   COPYDSN             <<< EXECUTED >>>
COPYJOB  EQU   COPYDSN             <<< EXECUTED >>>
COPYMEMB MVC   $MEMBER(0),0(R14)   <<< EXECUTED >>>
COPYPSWD MVC   $PASSWRD(0),0(R14)  <<< EXECUTED >>>
COPYVLSR MVC   $VOLSER(0),0(R14)   <<< EXECUTED >>>
COPYUNIT MVC   $UNIT(0),0(R14)     <<< EXECUTED >>>
COPYSBSY MVC   $VOLSER+1(0),0(R14) <<< EXECUTED >>>
         SPACE
OKDSN    DS    0H
         MVC   UDSNAME(4),4(R6)    COPY LENGTH AND QUOTE FLAGS
         LA    R15,UDSNAME+4
         MVI   0(R15),C' '         BLANK THE DSNAME AREA
         MVC   1(43,R15),0(R15)
         L     R14,0(,R6)          POINT TO DSN VALUE
         LH    R1,4(,R6)           GET LENGTH
         STH   R1,UDSNAME
         BCTR  R1,0                LENGTH MINUS 1 FOR EX
         EX    R1,COPYDSN          MOVE DSN TO DSNAME (AFTER PREFIX)
         SPACE
         TM    14(R6),X'80'        MEMBER SPECIFIED?
         BZ    PARSEMX             NO - BRANCH
         LH    R1,12(,R6)          GET LENGTH OF MEMBER
         BCTR  R1,0                MINUS 1 FOR EX
         L     R14,8(,R6)          GET ADDRESS OF MEMBER NAME
         EX    R1,COPYMEMB         MOVE MEMBER NAME
PARSEMX  DS    0H
         SPACE
         TM    22(R6),X'80'        PASSWORD SPECIFIED?
         BZ    PARSEPX             NO - BRANCH
         LH    R1,20(,R6)          GET LENGTH OF PSWD
         BCTR  R1,0                MINUS 1 FOR EX
         L     R14,16(,R6)         GET ADDRESS OF PSWD
         EX    R1,COPYPSWD         MOVE PASSWORD
PARSEPX  DS    0H
         LA    R6,VOL
         TM    6(R6),X'80'         VOLUME SPECIFIED?
         BZ    PARSEVX             NO, LEAVE VOL AND UNIT BLANK
         L     R14,0(,R6)          POINT TO VOL VALUE
         LH    R1,4(,R6)           GET LENGTH
         BCTR  R1,0                LENGTH MINUS 1 FOR EX
         EX    R1,COPYVLSR         MOVE VOLUME
         MVC   $UNIT,=CL8'SYSALLDA'
         LA    R6,UNIT
         TM    6(R6),X'80'         UNIT SPECIFIED?
         BZ    PARSEUX             NO, BRANCH
         MVC   $UNIT,=CL8' '       ERASE 'SYSALLDA'
         L     R14,0(,R6)          POINT TO UNITNAME VALUE
         LH    R1,4(,R6)           GET LENGTH
         BCTR  R1,0                LENGTH MINUS 1 FOR EX
         EX    R1,COPYUNIT         MOVE UNIT NAME
PARSEUX  DS    0H
PARSEVX  DS    0H
         LA    R6,TOPTTR
         TM    6(R6),X'80'         TOP TTR/BLK SPECIFIED?
         BZ    PARSETX             NO - BRANCH
         LH    R1,4(,R6)           GET HEX DIGIT COUNT
         LA    R15,6               GET MAXIMUM HEX DIGIT COUNT
         SLR   R15,R1              GET MISSING LEADING ZERO COUNT
         BCTR  R1,0                MINUS 1 FOR EX
         LA    R15,DOUBLE(R15)     POINT TO TARGET
         MVC   DOUBLE(6),=CL6'000000'   ENSURE LEADING ZEROS
         L     R14,0(,R6)          GET ADDRESS OF INITIAL TOP
         EX    R1,COPYTOP          MOVE TOP ADDRESS
         L     R15,=A(HEXDATA)     POINT TO HEX TRANSLATE TABLE
         TR    DOUBLE(6),0(R15)    CONVERT CHARACTERS TO HEXADECIMAL
         PACK  TTR+1(4),DOUBLE(7)  CONVERT TO POINT FORMAT
         MVI   TTR+4,0             ERASE GARBAGE
PARSETX  DS    0H
         LA    R6,SUBSYS
         TM    6(R6),X'80'         SUBSYSTEM SPECIFIED?
         BZ    PARSESX             NO, NORMAL DATA SET TO BE REVIEWED
         CLI   $VOLSER,C' '        WAS ANY VOLUME SPECIFIED?
         BNE   PARSESX             YES, IGNORE SUBSYSTEM
         L     R14,0(,R6)          POINT TO VOL VALUE
         LH    R1,4(,R6)           GET LENGTH
         BCTR  R1,0                LENGTH MINUS 1 FOR EX
         EX    R1,COPYSBSY         MOVE SUBSYSTEM NAME
         MVI   $VOLSER,C'='        INDICATE SUBSYSTEM WITH EQUALS SIGNS
         MVI   $VOLSER+5,C'='               FOR THE HEADING
         XC    TTR,TTR             IGNORE ANY 'TOP' OPERAND
         B     PARSESX             END OF REVIEW COMMAND PARSING
         SPACE
HARSE    MVI   FILEKV,C'N'         ASSUME COMMAND WITH NO SUBCOMMANDS
         MVI   FILEKV+1,1          ASSUME FILE(SYSHELP)
         MVI   $DSNAME,0
         MVI   $DSNAME+1,7
         MVC   $DSNAME+2(8),=CL8'SYSHELP'
         MVC   $SUBCOM,=CL8' '
         MVC   $MEMBER,=CL8'COMMANDS'
         LA    R6,MEMBERPO
         TM    6(R6),X'80'         MEMBER SPECIFIED?
         BZ    HARSEMX             NO, BRANCH
         OI    STATUS6,HELFF       YES, INITIAL POSITIONING REQUIRED
         MVC   $MEMBER,=CL8' '
         L     R14,0(,R6)          POINT TO MEMBER VALUE
         LH    R1,4(,R6)           GET LENGTH
         BCTR  R1,0                LENGTH MINUS 1 FOR EX
         EX    R1,COPYMEMB         MOVE MEMBER NAME
HARSEMX  EQU   *
         L     R1,REVECT           START OF ECT
         CLC   =C'H ',ECTPCMD-ECT(R1)      HELP COMMAND?
         BE    HARSEO                      YES, BRANCH
         CLC   IBMHELP,ECTPCMD-ECT(R1)     HELP COMMAND?
         BE    HARSEO                      YES, BRANCH
         CLC   HELNAME,ECTPCMD-ECT(R1)     HELP COMMAND?
         BE    HARSEO                      YES, BRANCH
         CLC   HELNAME2(3),ECTPCMD-ECT(R1) HELP COMMAND?
         BE    HARSEO                      YES, BRANCH
         MVI   FILEKV,C'S'                 COMMAND WITH SUBCOMMANDS
         OI    STATUS6,HELFF+HELNEWS       SUBCOMMAND IS NOT SATISFIED
         MVC   $SUBCOM,$MEMBER             SUBCOMMAND IS MEMBER NAME
         MVC   $MEMBER,ECTPCMD-ECT(R1)     CHANGE MEMBER NAME
         CLC   $MEMBER,HEL4HEL             HELP FOR HEL?
         BNE   *+10                        NO, BRANCH
         MVC   $MEMBER,HELNAME             YES, CONVERT TO HEL
         CLC   $SUBCOM,$MEMBER             COMMAND NAME=SUBCOMMAND?
         BE    HARSEX                      YES, BRANCH
         TM    6(R6),X'80'                 SUBCOMMAND SPECIFIED?
         BO    HARSEO                      YES, BRANCH
HARSEX   NI    STATUS6,255-HELNEWS         SUBCOMMAND IS SATISFIED
         MVC   $SUBCOM,=CL8' '             NO SUBCOMMAND NAME
         SPACE
HARSEO   LA    R0,7
         LA    R15,$SUBCOM+8
HARSEO1  BCTR  R15,0               SCAN
         CLI   0(R15),C' '             FOR
         BNE   HARSEO2                    LAST
         BCT   R0,HARSEO1                     NON-BLANK
HARSEO2  STH   R0,$SUBLEN          MACHINE LENGTH OF SUBCOMMAND
         SPACE
         LA    R4,$OPERAND
         LA    R6,OPLIST
HARSELP  MVI   0(R4),C' '          CLEAR THIS ELEMENT
         MVC   1(19,R4),0(R4)
         LTR   R6,R6               ANY PARAMETER?
         BNP   HARSEOX             NO, BRANCH
         TM    6(R6),X'80'         OPERAND SPECIFIED?
         BZ    HARSEOX             NO, BRANCH
         L     R14,0(,R6)          POINT TO MEMBER VALUE
         LH    R1,4(,R6)           GET LENGTH
         BCTR  R1,0                LENGTH MINUS 1 FOR EX
         EX    R1,COPYOPER         MOVE OPERAND NAME
         LA    R4,20(,R4)          NEXT OPERAND OUTPUT LOCATION
         L     R6,8(,R6)           NEXT OPERAND PARAMETER LOCATION
         B     HARSELP
COPYOPER MVC   0(0,R4),0(R14)      <<< EXECUTED >>>
HARSEOX  DS    0H
         LA    R0,20               MAXIMUM OPERANDS+MSGS SUPPORTED
         LA    R4,$OPERAND
         LA    R6,MSGLIST
HARSMLP1 CLI   0(R4),C' '          BLANK ENTRY?
         BE    HARSMLP2            YES
         LA    R4,20(,R4)          NO, NEXT OPERAND OUTPUT LOCATION
         BCT   R0,HARSMLP1
         B     HARSMX              NO ROOM FOR MESSAGE IDENTIFIERS
HARSMLP2 MVI   0(R4),C' '          CLEAR THIS ELEMENT
         MVC   1(19,R4),0(R4)
         LTR   R6,R6               ANY PARAMETER?
         BNP   HARSMX              NO, BRANCH
         TM    6(R6),X'80'         MESSAGE SPECIFIED?
         BZ    HARSMX              NO, BRANCH
         L     R14,0(,R6)          POINT TO MEMBER VALUE
         LH    R1,4(,R6)           GET LENGTH
         BCTR  R1,0                LENGTH MINUS 1 FOR EX
         EX    R1,COPYOPER         MOVE MESSAGE IDENTIFIER
         LA    R4,20(,R4)          NEXT MESSAGE OUTPUT LOCATION
         L     R6,8(,R6)           NEXT MESSAGE PARAMETER LOCATION
         BCT   R0,HARSMLP2
HARSMX   DS    0H
         SPACE
         MVC   FKV,FKW             GET FUNCTION KEYWORD
         MVC   SKV,SKW             GET SYNTAX KEYWORD
         MVC   OKV,OKW             GET OPERANDS KEYWORD
         MVC   AKV,AKW             GET ALL KEYWORD
         MVC   MKV,MKW             GET MSGID KEYWORD
         MVC   PKV,PKW             GET POSITIONAL KEYWORD
         CLI   MKV+1,0             MSGID SPECIFIED?
         BE    PDSMSGOK            NO
         TM    STATUS2,$2PDS       INVOKED AS PDS(TOOLS) SUBCOMMAND?
         BO    XCTLHELP            YES, USE TSO HELP FOR PUTLINE
PDSMSGOK NI    STATUS2,255-$2PDS   NOT PDSTOOLS MEMBER GROUP PROCESSING
         CLI   PKV+1,1             POSITIONAL SPECIFIED?
         BNE   PARSESX             NO
         L     R6,POSITFF          YES, POINT TO IT
         MVC   HELPOS#,0(R6)       COPY FULLWORD INTEGER
PARSESX  DS    0H
         DROP  R3                  IKJPARMD
         IKJRLSA MYANS
         XC    MYANS,MYANS
         L     R15,=A(GET34VOL)    GET ISPF 3.4 HANDLER ENTRY POINT
         BASR  R14,R15             INVOKE IT
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    PREFOK              YES - SKIP DEFAULT PREFIXING
         SPACE
************************************************************
*                                                          *
*         QUALIFY THE DSNAME IF NECESSARY                  *
*                                                          *
************************************************************
         SPACE
         LA    R15,$DSNAME+2
         MVI   0(R15),C' '         BLANK THE DSNAME AREA
         MVC   1(43,R15),0(R15)
         SR    R1,R1
         STH   R1,$DSNAME          ZERO DSNAME LENGTH
         TM    UDSNAME+2,X'40'     IS DSN QUOTED?
         BO    NOPREF              YES, SKIP PREFIXING
         CLI   FILEKV+1,1          DSN TO BE TREATED AS DDNAME?
         BE    NOPREF              YES, SKIP PREFIXING
         AIF   (NOT &MVS).SKIPP    PREFIX WITH PREFIX
         L     R14,CPPLUPT         POINT TO UPT
         USING UPT,R14
         LA    R1,8                PREPARE FOR 8-CHARACTER PREFIX
         LA    R3,UPT+33           POINT TO UPTPREF8
         CLI   UPTPREFX,C'>'       8-CHARACTER PREFIX?
         BE    PREF0CHK            YES, '>7BYTES'
         IC    R1,UPTPREFL         GET LENGTH OF PREFIX
         LA    R3,UPTPREFX         POINT TO PREFIX
PREF0CHK LTR   R1,R1               IS IT ZERO?
         BZ    NOPREF              YES, SKIP PREFIXING
         B     *+10
         MVC   0(0,R15),0(R3)      <<< EXECUTED >>>
         DROP  R14                 UPT
.SKIPP   AIF   (&MVS).SKIPU        PREFIX WITH USERID
         L     R14,CPPLPSCB        POINT TO PSCB
         USING PSCB,R14
         IC    R1,PSCBUSRL         GET LENGTH OF USERID
         LTR   R1,R1               IS IT ZERO?
         BZ    NOPREF              YES, SKIP PREFIXING
         B     *+10
         MVC   0(0,R15),PSCBUSER   <<< EXECUTED >>>
         DROP  R14                 PSCB
.SKIPU   ANOP
         EX    R1,*-6              MOVE USERID TO DSNAME AREA
         LA    R15,0(R1,R15)       POINT PAST USERID
         MVI   0(R15),C'.'         APPEND PERIOD
         LA    R15,1(,R15)         POINT PAST PERIOD
         LA    R1,1(,R1)           ADD 1 TO LENGTH
         STH   R1,$DSNAME          STORE LENGTH OF USERID PLUS 1
NOPREF   DS    0H
         LH    R1,UDSNAME          GET LENGTH
         LR    R0,R1
         AH    R0,$DSNAME          ADD LENGTH OF PREFIX OR ZERO
         STH   R0,$DSNAME          SET COMBINED LENGTH
         LA    R14,UDSNAME+4       POINT TO DSN VALUE
         BCTR  R1,0                LENGTH MINUS 1 FOR EX
         EX    R1,COPYDSN          MOVE DSN TO DSNAME (AFTER PREFIX)
PREFOK   DS    0H
         SPACE
************************************************************
*                                                          *
*         IF 'FILE' KEYWORD IS SPECIFIED,                  *
*         GET DSNAME FROM JFCB USING FILE NAME.            *
*                                                          *
************************************************************
         SPACE
         CLI   FILEKV+1,1          'FILE' SPECIFIED?
         BNE   NOFILE              NO, BRANCH
         CLI   $DSNAME+1,8         IS LENGTH 8 OR LESS?
         BH    FILERR1             NO, BRANCH
         DEVTYPE $DSNAME+2,DEVDATA GET DEVICE TYPE
         LTR   R15,R15             WAS FILENAME VALID?
         BNZ   FILEHEL             NO, BRANCH
         TM    DEVDATA+2,X'A0'     DIRECT ACCESS OR MAGNETIC TAPE?
         BZ    FILERR3             NO, BRANCH
         LA    R4,DYNDCBW
         L     R1,=A(SEQDCB)
         MVC   0(SEQDCBL,R4),0(R1)
         USING IHADCB,R4
         LA    R1,DYNEXLST
         LA    R0,ARL
         ST    R0,0(,R1)
         MVI   0(R1),X'13'         ALLOCATION RETRIEVAL EXIT (DFP 2.3)
         LA    R0,JFCB
         ST    R0,4(,R1)
         MVI   4(R1),128+X'07'     READ JFCB EXIT
         ST    R1,DCBEXLST         SET EXIT LIST ADDRESS
         MVC   DCBDDNAM,$DSNAME+2  LOAD DDNAME
         MVC   $DDNAML(10),$DSNAME
         L     R1,PSATOLD          CURRENT TCB
         L     R1,TCBTIO-TCB(,R1)  TIOT
         LA    R1,24(,R1)          TIOENTRY
         SR    R15,R15
ARDDLOOP ICM   R15,1,0(R1)         TIOELNGH - END OF TIOT?
         BZ    EXITA12             YES, BRANCH (NEVER HAPPENS)
         CLC   4(8,R1),$DDNAME     DOES DDNAME MATCH?
         BE    ARDDFND
         LA    R1,0(R15,R1)
         B     ARDDLOOP
ARDDFND  LA    R1,0(R15,R1)        NO, POINT TO NEXT DD ENTRY
         CLI   0(R1),0             END OF TIOT?
         BE    DROPARL             YES, NOT CONCATENATED
         CLI   4(R1),C' '          CONCATENATED ENTRY?
         BNE   DROPARL             NO, NOT CONCATENATED
         CLI   OSBITS,X'9B'        MVS/ESA OR LATER?
         BE    USEARL              YES, LET OS FETCH ALLOCATION DATA
         TM    12(R1),X'FE'        NO, JFCB ADDRESS UNDER 128K LINE?
         BZ    USEARL              YES, WRONG SO MUST BE SVA FOR > 16M
         SR    R5,R5               NO, SO GO THRU CONCAT'D JFCBS < 16M
         ST    R1,DOUBLE           SAVE FIRST CONCAT'D ENTRY ADDRESS
ARCNCTLP ICM   R15,1,0(R1)         TIOELNGH - END OF TIOT?
         BZ    GOTARCNT            YES, NOW HAVE CONCATENATED COUNT
         CLI   4(R1),C' '          CONCATENATED ENTRY?
         BNE   GOTARCNT            NO, NOW HAVE CONCATENATED COUNT
         LA    R1,0(R15,R1)        YES, POINT TO NEXT DD ENTRY
         LA    R5,1(,R5)           INCREMENT CONCATENATION COUNTER
         B     ARCNCTLP
GOTARCNT STH   R5,ARLRTRVD         SAVE RETRIEVED JFCB COUNT
         MH    R5,=H'180'          GET SIZE OF JFCB LIST
         LA    R5,7(,R5)
         SRL   R5,3
         SLL   R5,3                ROUND TO DOUBLEWORD BOUNDARY
         LR    R0,R5               COPY INTO GETMAIN REGISTER
         ST    R0,ARLPOOL          SAVE SUBPOOL AND SIZE
         MVI   GETMNTRC,3          TRACK GETMAIN IN CASE OF FAILURE
         GETMAIN R,LV=(0)          GET ALLOCATION RETRIEVAL AREA
         ST    R1,ARLAREA          SAVE ITS ADDRESS
         LH    R0,ARLRTRVD         LOAD COUNT OF JFCB'S TO BE FETCHED
         L     R5,DOUBLE           POINT TO FIRST CONCAT'D TIOT ENTRY
         LA    R6,180              GET THE SIZE OF EACH ARL JFCB ENTRY
         SR    R15,R15
ARJFCBLP STH   R6,0(,R1)           INITIALIZE ENTRY LENGTH
         L     R7,12(,R5)          LOAD JFCB "TTR"/SVA
         SRL   R7,8                SHIFT TO CORRECT PLACE
         MVC   4(176,R1),16(R7)    COPY THE JFCB (WITHOUT THE PREFIX)
         IC    R15,0(,R5)          GET THIS TIOT ENTRY'S LENGTH
         ALR   R5,R15              POINT TO NEXT TIOT ENTRY
         ALR   R1,R6               POINT TO NEXT ARL JFCB ENTRY
         BCT   R0,ARJFCBLP         PROCESS THE NEXT CONCATENATION
DROPARL  LA    R1,DYNEXLST         POINT TO DCB EXIT LIST
         MVC   0(4,R1),4(R1)       REMOVE X'13' ENTRY FROM LIST
USEARL   MVI   OPEND,X'80'
         RDJFCB ((R4)),MF=(E,OPEND)
         DROP  R4                  IHADCB
         MVC   $DSNAME+2(44),JFCB
         LA    R1,$DSNAME+45       LAST CHAR OF DSNAME
         LA    R0,44               INITIAL LENGTH
FILEA    CLI   0(R1),C' '          IS THIS LAST NONBLANK?
         BNE   FILEB               YES, BRANCH
         BCTR  R1,0                BACK UP 1 CHARACTER
         BCT   R0,FILEA            DECREMENT LENGTH AND BRANCH
FILEB    STH   R0,$DSNAME          STORE LENGTH OF DSNAME
         MVI   DSORG,DS1DSGPS      DSORG PS
         CLI   $MEMBER,C' '        DDNAME(MEMBER)?
         BE    FILEC               NO
         MVI   DSORG,DS1DSGPO      YES, INDICATE PARTITIONED
         B     FILED               DON'T LOOK AT JFCB
FILEC    CLI   JFCBELNM,C' '       DDNAME ALLOCATED TO A MEMBER?
         BE    FILED               NO
         MVC   $MEMBER,JFCBELNM    YES, SAVE THE MEMBER NAME
         MVI   DSORG,DS1DSGPO      DSORG PO
FILED    DS    0H
*        MVC   $VOLSER(6),JFCBVOLS GET VOLUME FROM JFCB
         B     FILESPEC
FILERR1  LA    R0,MSG14A
         B     FILERR
FILEHEL  TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BZ    FILERR2             NO, MISSING FILE
         MVI   FILEKV+1,0          YES, CHANGE DDNAME SYSHELP
         MVI   $DSNAME+1,9                  TO DSNAME SYS1.HELP
         MVI   $DSNAME+2,C' '
         MVC   $DSNAME+3(43),$DSNAME+2
         MVC   $DSNAME+2(9),=CL9'SYS1.HELP'
         B     DEFX                SKIP DEFAULT QUALIFYING
FILERR2  LA    R0,MSG14B
         AIF   (&ENV390).PRMLIB1
         B     FILERR
         AGO   .FILERR3
.PRMLIB1 ANOP
         CLI   $DSNAME+1,7         IS DDNAME LENGTH 7?
         BNE   FILERR              NO, CAN'T BE PARMLIB
         CLC   PARMLIB,$DSNAME+2
         BNE   FILERR              NOT PARMLIB
         L     R1,CVTPTR(,0)       POINT TO THE CVT
         USING CVT,R1
         CLI   CVTDCB,X'9B'        MVS/ESA OR OS/390?
         BNE   FILERR              NO, CVTOSLVL DOES NOT EXIST
         TM    CVTOSLV1,CVTPARMC   OS/390 1.2 OR LATER?
         BNO   FILERR              NO, NO LOGICAL PARMLIB SERVICE
         DROP  R1                  CVT
         MVC   $DDNAME,PARMLIB     YES, PREPARE FOR SERVICE ROUTINE
         L     R1,SCREENBF         POINT TO IEFPRMLB PARAMETER AREA
         IEFPRMLB REQUEST=ALLOCATE,      ALLOCATE PARMLIB FILE(S)      +
               ALLOCDDNAME=$DDNAME,      BETTER USED SPECIFIED DDNAME  +
               READ=NO,                  DO THE I/O HERE (DEFAULT)     +
               CALLERNAME=REVCALER,      IDENTIFY MACRO CALLER         +
               PLISTVER=MAX,             PLENTY OF SPACE FOR GROWTH    +
               MF=(E,(1),COMPLETE)
         OI    STATUS,STALLOC      ASSUME ALLOCATION OCCURRED
         LTR   R15,R15             DID IT REALLY?
         BZ    PREFOK              YES, REDRIVE DDNAME PROCESSING
         NI    STATUS,255-STALLOC  NO, NOTHING TO FREE ON EXIT
BADPRMLB STM   R15,R0,DOUBLE
         MVC   MSG+2(L'MSG13),MSG13  LOAD THE ERROR MESSAGE
         UNPK  MSG+2+L'MSG13(3),DOUBLE+3(2)
         UNPK  MSG+2+L'MSG13+3(3),DOUBLE+7(2)
         TR    MSG+2+L'MSG13(5),HEXTAB1-240
         MVI   MSG+2+L'MSG13+2,C'-'
         LA    R0,L'MSG13+5        SHOW HEX RETURN AND REASON CODES
         B     LOCERRX0
.FILERR3 ANOP
FILERR3  TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    XCTLHELP            YES, LET TSO HELP DEAL WITH IT
         LA    R0,MSG14C
FILERR   MVC   MSG+2(L'MSG14),MSG14
         LA    R15,MSG+2+L'MSG14
         LA    R14,$DSNAME
         LH    R1,0(,R14)
         BCTR  R1,0
         EX    R1,FILEMSLD
         LA    R15,1(R1,R15)
         LR    R14,R0              POINT TO MSG14A, B, OR C
         ICM   R1,3,0(R14)         GET THE MESSAGE SEGMENT LENGTH
         BCTR  R1,0
         EX    R1,FILEMSLD
         LA    R0,L'MSG14+1(,R1)
         AH    R0,$DSNAME          GET THE TOTAL MESSAGE LENGTH
         STH   R0,MSG
         LA    R1,MSG
         BAS   R14,PUTMSG1
         B     EXITA12
FILEMSLD MVC   0(0,R15),2(R14)     <<< EXECUTED >>>
NOFILE   DS    0H
         TM    UDSNAME+2,X'40'     IS DSNAME QUOTED?
         BO    DEFX                YES - SKIP DEFAULT SERVICE
         CLI   $VOLSER,C' '        IS VOLUME SPECIFIED?
         BNE   DEFX                YES - SKIP DEFAULT SERVICE
         CLI   FILEKV+1,2          IS 'QUICK' SPECIFIED?
         BE    DEFX                YES, USER ENTERED ALL BUT PREFIX
         SPACE
         LA    R15,MYIOPL
         USING IOPL,R15
         LA    R14,MYDFPB
         ST    R14,IOPLIOPB
         USING DFPB,R14
         XC    0(20,R14),0(R14)
         LA    R0,$DSNAME
         ST    R0,DFPBDSN
         OI    DFPBCODE,X'04'      SEARCH CAT AND PROMPT IF MULTI
         MVC   DFPBPSCB,CPPLPSCB
*        MVI   DFPBCNTL,X'20'      PREFIX THE DSNAME
         DROP  R14,R15,R2          DFPB, IOPL, CPPL
         SPACE
         LR    R1,R15              POINT TO IOPL
         XASAM24
         AIF   (NOT &MVS).SKIP4
         L     R15,CVTPTR(,0)      POINT TO THE CVT
         USING CVT,R15
         ICM   R15,15,CVTEHDEF     GET ENTRY POINT TO CALL IKJEHDEF
         BNM   EHDEFLNK            IF SIGN BIT OFF THEN NEED TO LINK
         DROP  R15                 CVT
         BASR  R14,R15             CALL IKJEHDEF
         B     EHDEFEXT            SKIP AROUND LINK
EHDEFLNK DS    0H
.SKIP4   ANOP
         LINK  EPLOC=IKJDFLT,SF=(E,LINKAREA)    KNOWN EP IN MVS AND F4
EHDEFEXT DS    0H
         XASAM31
         SPACE
         B     DEFCODE(R15)
IKJDFLT  DC    CL8'IKJDFLT'        ALIAS OF IKJEHDEF
DEFCODE  B     DEF00               SUCCESS
         B     EXITA12             MSG ALREADY ISSUED
         B     DEF08               INVALID NAME GT 44
         B     EXITA12             MSG ALREADY ISSUED
         B     DEF16               NOT IN CATALOG
         B     DEF20               NOT IN CATALOG
         B     DEF24               IMPOSSIBLE
         B     DEF28               COMMAND SYSTEM ERROR
         B     DEF32               IMPOSSIBLE
         B     DEF36               ?
DEF08    DS    0H
DEF16    DS    0H
         B     DEF24
DEF20    DS    0H
LOCERR   DS    0H
         MVC   MSG+2(L'MSG02),MSG02
         LA    R15,MSG+2+L'MSG02
         LA    R14,$DSNAME
         LH    R1,0(,R14)
         BCTR  R1,0
         EX    R1,LOCERR02
         LA    R15,1(R1,R15)
         MVC   0(L'MSG02A,R15),MSG02A
         LA    R0,L'MSG02+L'MSG02A+1(,R1)
LOCERRX0 STH   R0,MSG
LOCERRX  LA    R1,MSG
         BAS   R14,PUTMSG1
         B     EXITA12
LOCERR02 MVC   MSG+2+L'MSG02(0),2(R14) <<< EXECUTED >>>
DEF24    DS    0H
DEF28    DS    0H
DEF32    DS    0H
DEF36    DS    0H
         LA    R1,MSG03
         BAS   R14,PUTMSG1
         B     EXITA12
         SPACE
DEF00    DS    0H
DEFX     DS    0H
         BAS   R14,BRVSPREP        GO SEE IF BROWSING STORAGE
         SPACE
**********************************************************************
*                                                          *         *
*         ALLOCATE THE SUBSYSTEM DATA SET WITH DYNALLOC    *  GP@P6  *
*                                                          *  12/90  *
**********************************************************************
         SPACE
*         WHEN SUBSYSTEM DATA SETS ARE BEING REVIEWED THEN:
*               $UCBAD  IS ZERO      -AND-
*               $VOLSER IS =SSSS=    WHERE SSSS IS THE SUBSYSTEM NAME.
*
*         (SHOULD REALLY CONVERT ALL DYNAMIC ALLOCATIONS IN REVIEW
*         FROM DAIR TO SVC 99, NOT JUST HERE BUT IN REVPDS AS WELL.
*         THE AREA POINTED TO BY DFIDP WOULD ALSO HAVE TO BE CHANGED IN
*         DAIRFAIL.  UNTIL THEN, IKJDAIR IS STILL WORKING PERFECTLY
*         WELL.)
*
*         USE SCREENBF FOR DYNALLOC WORK AREA:
*            +0 S99RBPTR
*            +4 S99RB
*           +18 S99RBX
*           +40 S99TUPL
*           +60 S99TUNIT
         SPACE
         CLI   $VOLSER,C'='        WAS SUBSYSTEM SPECIFIED?
         BE    USEDYNAL            YES, PROCEED
         CLI   $VOLSER,C' '        WAS VOLUME SPECIFIED?
         BE    USEDAIR             NO, PROCEED AS NORMAL
         CLI   $DSNAME+1,12        DSNAME LENGTH = 12?
         BNE   USEDAIR             NO, PROCEED AS NORMAL
         TM    UDSNAME+2,X'40'     IS DSN QUOTED?
         BNO   USEDAIR             NO, PROCEED AS NORMAL
         CLI   $MEMBER,C' '        WAS A MEMBER SPECIFIED?
         BNE   USEDAIR             YES, PROCEED AS NORMAL
         CLC   =C'FORMAT4.DSCB',$DSNAME+2    VTOC REQUESTED?
         BNE   USEDAIR             NO, PROCEED AS NORMAL
         B     USESVC99            YES
USEDYNAL TM    STATUS2,$2AUTH      APF AUTHORIZED?
         BO    USESVC99            YES, PROCEED WITH DYNALLOC
         LA    R1,MSG11            NO, CANNOT ALLOC SUBSYS DATA SET
         BAS   R14,PUTMSG1
         LA    R1,MSG11X           SUGGEST TRYING 'REVVSAM' COMMAND
         BAS   R14,PUTMSG1
         B     EXITA12
         SPACE
USESVC99 L     R1,SCREENBF         POINT TO DYNALLOC PARAMETER LIST
         XC    0(256,R1),0(R1)     ERASE SOME RESIDUAL DATA
         USING S99RBPTR,R1
         LA    R15,4(,R1)          POINT TO DYNALLOC REQUEST BLOCK
         USING S99RB,R15
         ST    R15,S99RBPTR        INITIALIZE PARAMETER LIST
         OI    S99RBPTR,S99RBPND   INDICATE END OF PARAMETER LIST
         MVI   S99RBLN,20          SUPPLY REQUEST BLOCK LENGTH
         MVI   S99VERB,S99VRBAL    VERB=X'01' - DSNAME ALLOCATION
         MVI   S99FLG11,S99NOCNV+S99NOMNT   NEW ALLOC AND NOMOUNT
         MVI   S99FLG12,0
*        SR    R0,R0               ALREADY ZEROED BY XC ABOVE
*        STH   R0,S99ERROR         ZERO ERROR REASON CODE
*        STH   R0,S99INFO          ZERO INFORMATION REASON CODE
*        ST    R0,S99FLAG2         ZERO AUTHORIZED FLAGS
         LA    R14,64(,R1)         GET TEXT POINTERS AREA ADDRESS
         ST    R14,S99TXTPP        SAVE IT
         AIF   (NOT &ENV390).RBXOKAY
         TM    OSBITS,X'93'        MVS/XA OR LATER?
         BNO   RBXOKAY             NO, LEAVE RB EXTENSION POINTER ZERO
         LA    R0,20(,R15)         GET REQUEST BLOCK EXTENSION ADDR
         ST    R0,S99S99X          SAVE IT
         DROP  R15                 S99RB
         LR    R15,R0
         USING S99RBX,R15
         MVC   S99EID,=C'S99RBX'   SUPPLY CONTROL BLOCK ID
         MVI   S99EVER,S99RBXVR    SUPPLY VERSION NUMBER (X'01')
         MVI   S99EOPTS,S99EIMSG   LET SYSTEM USE PUTLINE FOR MSG(S)
         MVI   S99EMGSV,S99XINFO   SHOW EVEN INFO-LEVEL MESSAGES
         MVC   S99ECPPL,CPPLPTR    SUPPLY CPPL ADDRESS FOR PUTLINE
*        SR    R0,R0               ALREADY ZEROED BY XC ABOVE
*        ST    R0,S99EMRC          ZERO RESERVED BYTES
*        STH   R0,S99EERR          ZERO ERROR REASON CODE
*        STH   R0,S99EINFO         ZERO INFORMATION REASON CODE
*        ST    R0,S99ERSN          ZERO SMS REASON CODE (WAS S99ERSV2)
.RBXOKAY ANOP
         DROP  R15                 S99RBX
         USING S99TUPL,R14
RBXOKAY  LA    R15,32(,R14)        POINT TO AREA FOR TEXT UNITS
         USING S99TUNIT,R15
         ST    R15,S99TUPTR        SAVE FIRST TEXT UNIT ADDRESS
         CLC   $VOLSER,=C'=PANV='  PANVALET ALLOCATION REQUEST?
         BE    SHRDSP99            YES, DISP=SHR REQUIRED
         CLI   $VOLSER,C'='        WAS SUBSYSTEM SPECIFIED?
         BE    SETDSN99            YES, ALLOCATE BY DSNAME ONLY
         LA    R0,DALVLSER         KEY = X'0010' - VOLUME SERIAL
         STH   R0,S99TUKEY
         LA    R0,1
         STH   R0,S99TUNUM         1 PARAMETER IN THIS TEXT UNIT
         LA    R0,6
         STH   R0,S99TULNG         MAXIMUM LENGTH IS 6
         MVC   S99TUPAR(6),$VOLSER LOAD VOLUME SERIAL NUMBER
         LA    R14,4(,R14)         POINT TO NEXT TEXT UNIT POINTER
         LA    R15,16(,R15)        POINT TO NEXT TEXT UNIT
         ST    R15,S99TUPTR        SAVE SECOND TEXT UNIT ADDRESS
         LA    R0,DALUNIT          KEY = X'0015' - UNIT DESCRIPTION
         STH   R0,S99TUKEY
         LA    R0,1
         STH   R0,S99TUNUM         1 PARAMETER IN THIS TEXT UNIT
         LA    R0,8
         STH   R0,S99TULNG         LENGTH IS 8
         MVC   S99TUPAR(8),=CL8'SYSALLDA'
         LA    R14,4(,R14)         POINT TO NEXT TEXT UNIT POINTER
         LA    R15,16(,R15)        POINT TO NEXT TEXT UNIT
         ST    R15,S99TUPTR        SAVE THIRD TEXT UNIT ADDRESS
SHRDSP99 LA    R0,DALSTATS         KEY = X'0004' - DATA SET STATUS
         STH   R0,S99TUKEY
         LA    R0,1
         STH   R0,S99TUNUM         1 PARAMETER IN THIS TEXT UNIT
*        LA    R0,1
         STH   R0,S99TULNG         LENGTH IS 1
         MVI   S99TUPAR,DA08SHR    USE SHARED ENQUEUE
         CLC   $VOLSER,=C'=PANV='  PANVALET ALLOCATION REQUEST?
         BNE   LAST99TU            NO, GO ADD LAST TEXT UNIT
         LA    R14,4(,R14)         POINT TO NEXT TEXT UNIT POINTER
         LA    R15,8(,R15)         POINT TO NEXT TEXT UNIT
         ST    R15,S99TUPTR        SAVE TEXT UNIT ADDRESS
SETDSN99 LA    R0,DALDSNAM         KEY = X'0002' - DATA SET NAME
         STH   R0,S99TUKEY
         LA    R0,1
         STH   R0,S99TUNUM         1 PARAMETER IN THIS TEXT UNIT
         MVC   S99TULNG(46),$DSNAME  SUPPLY LENGTH AND DATA SET NAME
         LA    R14,4(,R14)         POINT TO NEXT TEXT UNIT POINTER
         LA    R15,64(,R15)        POINT TO NEXT TEXT UNIT
         ST    R15,S99TUPTR        SAVE SECOND TEXT UNIT ADDRESS
         CLI   $MEMBER,C' '        WAS A MEMBER SPECIFIED?
         BE    MEM99OK             NO
         CLI   DATAKV+1,1          IS 'DATA' SPECIFIED?
         BNE   MEM99OK             NO, ALLOC WHOLE DATA SET FOR BPAM
         CLC   $VOLSER,=C'=PANV='  PANVALET ALLOCATION REQUEST?
         BE    MEM99OK             YES, DO NOT ALLOCATE MEMBER
         LA    R0,DALMEMBR         KEY = X'0003' - DATA SET MEMBER
         STH   R0,S99TUKEY
         LA    R0,1
         STH   R0,S99TUNUM         1 PARAMETER IN THIS TEXT UNIT
         LA    R0,8
         STH   R0,S99TULNG         MAXIMUM LENGTH IS 8
         MVC   S99TUPAR(8),$MEMBER LOAD MEMBER NAME
         LA    R14,4(,R14)         POINT TO NEXT TEXT UNIT POINTER
         LA    R15,16(,R15)        POINT TO NEXT TEXT UNIT
         ST    R15,S99TUPTR        SAVE TEXT UNIT ADDRESS
MEM99OK  LA    R0,DALSSNM          KEY = X'005F' - SUBSYSTEM NAME
         STH   R0,S99TUKEY
         LA    R0,1
         STH   R0,S99TUNUM         1 PARAMETER IN THIS TEXT UNIT
         LA    R0,4
         STH   R0,S99TULNG         MAXIMUM LENGTH IS 4
         MVC   S99TUPAR(4),$VOLSER+1        LOAD SUBSYSTEM NAME
         CLC   $VOLSER,=C'=PANV='  PANVALET ALLOCATION REQUEST?
         BNE   LAST99TU            NO, NO SUBSYSTEM PARAMETERS
         LA    R14,4(,R14)         POINT TO NEXT TEXT UNIT POINTER
         LA    R15,16(,R15)        POINT TO NEXT TEXT UNIT
         ST    R15,S99TUPTR        SAVE TEXT UNIT ADDRESS
         LA    R0,DALSSPRM         KEY = X'0060' - SUBSYSTEM PARAMETER
         STH   R0,S99TUKEY
         LA    R0,2
         STH   R0,S99TUNUM         2 PARAMETERS IN THIS TEXT UNIT
         LA    R0,8
         ST    R0,S99TULNG         FIRST LEN IS 0, SECOND LEN IS 8
         MVC   S99TULNG+4(8),$MEMBER     SECOND PARAMETER IS MEMBER
LAST99TU LA    R14,4(,R14)         POINT TO NEXT TEXT UNIT POINTER
         LA    R15,16(,R15)        POINT TO NEXT TEXT UNIT
         ST    R15,S99TUPTR        SAVE LAST TEXT UNIT ADDRESS
         OI    S99TUPTR,S99TUPLN   INDICATE THAT IT IS THE LAST
         LA    R0,DALRTDDN         KEY = X'0055' - RETURN DDNAME
         STH   R0,S99TUKEY
         LA    R0,1
         STH   R0,S99TUNUM         1 PARAMETER IN THIS TEXT UNIT
         LA    R0,8
         STH   R0,S99TULNG         MAXIMUM LENGTH IS 8
         MVC   S99TUPAR(8),=CL8' ' SUPPLY SLOT GENERATED DDNAME
         LA    R0,S99TULNG
         ST    R0,DOUBLE           REMEMBER THIS DDNAME LOCATION
         DROP  R1,R14,R15          S99RBPTR, S99TUPL, S99TUNIT
         DYNALLOC
         LTR   R15,R15             SUCCESS?
         BNZ   EXITA12             NO, TERMINATE (HOPE MVS ISSUED MSG)
         OI    STATUS,STALLOC      YES, TELL CLEANUP TO FREE IT
         L     R1,DOUBLE           POINT TO DDNAME DETAILS
         MVC   $DDNAML(10),0(R1)   COPY DDNAME LENGTH AND DDNAME
         CLI   $VOLSER,C'='        SUBSYSTEM ALLOCATION?
         BE    CHKSSDIV            YES
         MVI   DSORGTYP,X'DD'      FLAG "DISK DIRECTORY"
         NI    STATUS2,255-$2PDS   NOT MEMBER GROUP NOR FULLSCREEN HELP
         B     FILESPEC
CHKSSDIV SR    R0,R0               GET "DIV" ENTRY CODE (GETMAIN)
         ST    R0,DIVSZREQ         CLEAR REQUEST SIZE
         L     R15,DIVADDR1        LOAD "DIV" ENTRY POINT
         BASR  R14,R15             CALL REVDIV
         LTR   R15,R15             SUCCESS?
         BZ    FILESPEC            YES
         LA    R1,MSG12            NO, UNABLE TO OBTAIN "DIV" STORAGE
         BAS   R14,PUTMSG1
         B     EXITA12
         SPACE
**********************************************************************
*                                                          *         *
*         INVOKE BRVS INITIALIZATION                       *  R43.6  *
*                                                          * AUG2010 *
**********************************************************************
         SPACE
BRVSPREP CLI   $DSNAME+1,6         IS DATA SET NAME 'ACTIVE'?
         BNER  R14                 NO, DO NOT BROWSE STORAGE
         CLC   =C'ACTIVE',$DSNAME+2
         BNER  R14                 NO, DO NOT BROWSE STORAGE
         L     R15,=A(BRVSINIT)    GET BRVS SETUP ROUTINE ENTRY POINT
         BASR  R14,R15             INVOKE IT
         LTR   R15,R15             SUCCESS?
         BZ    PDSORNOT            YES
         BAS   R14,PUTMSG1
         B     EXITA12
         SPACE
************************************************************
*                                                          *
*         ALLOCATE THE DATA SET WITH IKJDAIR               *
*                                                          *
************************************************************
         SPACE
USEDAIR  XC    MYDAPB,MYDAPB
         MVI   DA08CD+1,X'08'
         LA    R0,$DSNAME
         ST    R0,DA08PDSN
         MVC   DA08DDN,=CL8' '
         MVC   DA08UNIT,$UNIT
         MVC   DA08SER,=CL8' '
         MVC   DA08SER(6),$VOLSER
         MVC   DA08MNM,=CL8' '     NEVER ALLOCATE WITH MEMBER
         MVC   DA08PSWD,$PASSWRD
         MVI   DA08DSP1,DA08SHR
         MVI   DA08DPS2,DA08KEEP
         MVI   DA08DPS3,DA08KEP
         LA    R1,MYDAPL
         SPACE
         BAS   R14,CALLDAIR
         LTR   R2,R15
         BZ    OKDAIR
         TM    MODE,MD_FS          IN FULLSCREEN MODE?
         BZ    BADDAIR             NO, NO ACTION REQUIRED
         TM    STATUS8,$8ISPF      RUNNING UNDER ISPF?
         BO    BADDAIR             YES, NO ACTION REQUIRED
         TM    MODE,MD_RECRS       RECURSIVE 'REVIEW' SESSION?
         BO    BADDAIR             YES, STAY IN FULLSCREEN MODE
         STFSMODE OFF              LET 'READY' PROMPT ACCEPT INPUT
         NI    MODE,255-MD_FS      FULL SCREEN MODE NOW OFF
         LR    R15,R2              RESTORE RETURN CODE FOR MESSAGE
BADDAIR  BAS   R14,DAIRFAIL
         B     EXITA12
OKDAIR   DS    0H
         OI    STATUS,STALLOC      TELL CLEANUP TO FREE IT
         MVC   $DDNAME,DA08DDN
         MVC   DSORG(1),DA08DSO
FILESPEC DS    0H
         AIF   (NOT &ENVZV2).GENRQOK
         CLI   FILEKV+1,3          'GEN' SPECIFIED?
         BNE   GENREQOK            NO
         TM    DSORG,DS1DSGPO      IS DSORG PO?
         BNO   GENREQBD            NO, BAD REQUEST
         OI    STATUS15,$15GEN     YES, FLAG REQUEST
         B     GENREQDN            REQUEST PROCESSED
GENREQBD MVI   MSG,222             NO MEMBER GENERATIONS ALLOWED
GENREQDN MVI   FILEKV+1,0          REQUEST PROCESSED OR CANCELLED
GENREQOK EQU   *
.GENRQOK ANOP
         SPACE
************************************************************
*                                                          *
*         GET THE UCB ADDRESS AND VOLUME SERIAL            *
*                                                          *
************************************************************
         SPACE
         LA    R1,$DDNAME
         L     R15,=A(REVDDLOC)
         BASR  R14,R15             FIND SUBJECT FILE DD TIOT ENTRY
         ICM   R15,7,17(R15)       TIOEFSRT
         ST    R15,$UCBAD          SAVE IT FOR LATER
         LTR   R15,R15             ANY UCB?
         BZ    PDSORNOT            NO, FORGET OBTAIN AND "FASTPATH"
         MVC   $VOLSER,28(R15)     UCBVOLI
         MVC   DEVDATA,16(R15)     COPY DEVICE TYPE FLAGS
         CLI   DEVDATA+2,X'20'     DIRECT ACCESS DEVICE?
         BE    DASDINIT            YES, OBTAIN DATA SET CONTROL BLOCK
         OI    STATUS2,$2TAPE      NO, FLAG AS MAGNETIC TAPE FILE
         NI    STATUS2,255-$2PDS   NOT MEMBER GROUP NOR FULLSCREEN HELP
         MVC   $MEMBER,=CL8' '     NO MEMBER ACCESS POSSIBLE
         CLI   DEVDATA+2,X'80'     REALLY A TAPE?
         BNE   PDSORNOT            NO, DON'T KNOW WHAT IT IS
         TM    DEVDATA+3,X'80'     3480 IN FULL FUNCTION MODE?
         BNO   PDSORNOT            NO, BYPASS OBTAIN AND "FASTPATH"
         OI    STATUS2,$2CART      YES, HI-SPEED SEARCH & MSGDISP AVAIL
         B     PDSORNOT            BYPASS OBTAIN AND "FASTPATH"
         SPACE
DASDINIT L     R15,=A(REVDASD)     POINT TO DASD DATA SET INIT. ROUTINE
         BASR  R14,R15             CALL IT - ONLY R9 TO R13 PRESERVED
         LTR   R15,R15             CHECK RESULT
         BP    LOCERRX             GO ISSUE PUTLINE AND EXIT WITH RC=12
         BM    USEDAIR             GO RETRY FOR AIX
         MVC   DSORG,DS1DSORG      OBTAIN SUCCEEDED
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BZ    PDSORNOT            NO, DON'T CHECK HELP FILE VALIDITY
         TM    DS1DSORG,DS1DSGPO   DSORG = PO?
         BZ    XCTLHELP            NO, LET TSO HELP SAY IT IS INVALID
         CLC   =H'80',DS1LRECL     LRECL = 80?
         BNE   XCTLHELP            NO, LET TSO HELP SAY IT IS INVALID
PDSORNOT L     R15,=A(SCRNINIT)
         BASR  R14,R15             SWITCH TO FULLSCREEN MODE
         SPACE
**********************************************************************
*                                                          *         *
*         INVOKE PARTITIONED DIRECTORY DISPLAY             * GP@SECV *
*                                                          *  03/86  *
**********************************************************************
         SPACE
         TM    DSORG,DS1DSGPO      DSORG = PO?
         BNO   CALLREV2            NO
         CLI   $MEMBER,C' '        WAS A MEMBER SPECIFIED?
         BNE   CALLREV2            YES, GO STRAIGHT TO IT
         ICM   R0,15,TTR           WAS A MEMBER IMPLIED BY 'TOP'?
         BNZ   CALLREV2            YES, GO STRAIGHT TO IT
         CLI   DSORGTYP,X'FF'      PDS DIRECTORY?
         BE    CALLREV2            YES
         XC    $MEMBER,$MEMBER     NO, START FROM FIRST MEMBER
SELNLIST L     R15,=A(REVPDS)          AND DISPLAY MEMBER LIST
         LA    R0,1
         A     R0,ISPFPAGE         ADJUST PAGE SIZE
         ST    R0,ISPFPAGE
         AIF   (NOT &ENV390).SHOWPDS
         TM    DS1SMSFG,DS1PDSE    PDSE?
         BNO   SHOWMEMS            NO, NOT PROGRAM OBJECT LIBRARY
         TM    DS1RECFM,DCBRECU    RECFM=U?
         BNO   SHOWMEMS            NO, NOT PROGRAM OBJECT LIBRARY
         ICM   R0,3,ARLRTRVD       ANY CONCATENATED JFCBS RETRIEVED?
         BNZ   SHOWMEMS            YES, NOT A SINGLE PROGRAM LIBRARY
         L     R15,=A(REVPDSE)     HANDLE SINGLE PROGRAM OBJECT LIBRARY
.SHOWPDS ANOP
SHOWMEMS BASR  R14,R15             CALL REVPDS OR REVPDSE
         B     EXITA##             EXIT REVIEW
         SPACE
************************************************************
*                                                          *
*         CALL PHASE 2 FOR MAIN PROCESSING                 *
*                                                          *
************************************************************
         SPACE
CALLREV2 L     R15,=A(REVIEW2)     GET ADDRESS OF PHASE 2
         TM    STATUS11,$11ED      IS EDIT REQUESTED?
         BNO   CALLFAS2            NO
         CLI   DS1FMTID,X'F1'      A DASD DATA SET SUITABLE FOR EDIT?
         BL    SUBSFAS2            NO, SUBSTITUTE BROWSE
         TM    DS1RECFM,DCBRECF+DCBRECV
         BNM   SUBSFAS2            NO, SUBSTITUTE BROWSE
         L     R15,EDITADR1        YES, GET CORRECT ROUTINE ADDRESS
         MVC   DSNAIM(46),$DSNAME
         B     CALLFAS2
SUBSFAS2 MVI   MSG,133             BROWSE SUBSTITUTED
CALLFAS2 BASR  R14,R15             GO TO PHASE 2 OR REVEDIT
DIRTEST1 TM    STATUS,STPODIR      IN MEMBER SELECT MODE?
         BO    SELNLIST            YES, SHOW MEMBER LIST
         CLI   MSG,19              ANY MESSAGE TO SHOW?
         BL    EXITARC             NO, EXIT - PHASE 2 HAS SET RC
         TM    MODE,MD_RECRS       RECURSIVE 'REVIEW' SESSION?
         BNO   PTLSTMSG            NO, HAVE TO TPUT THE LAST MESSAGE
         IC    R0,MSG              YES, GET THE MESSAGE NUMBER
         L     R1,@DATA+4          POINT TO CALLER'S SAVE AREA
         L     R1,SAVGRS9-SAVER(,R1)
         STC   R0,MSG-@DATA(,R1)   SHOW MESSAGE IN CALLING SESSION
         B     EXITARC             EXIT
PTLSTMSG L     R15,=A(REVMSGS)
         BASR  R14,R15             FETCH MESSAGE TEXT
         LA    R1,MSG+2            POINT TO ERROR MESSAGE
         LH    R0,MSG              GET ERROR MESSAGE LENGTH
         TPUT  (1),(0),R           DISPLAY MESSAGE
         STIMER WAIT,BINTVL==F'99' DELAY CLEARING THE SCREEN
         B     EXITARC             EXIT
         SPACE
************************************************************
*                                                          *
*         RETURN FROM PHASE 2 TO TERMINATE                 *
*                                                          *
************************************************************
         SPACE
EXITA12  LA    R15,12
EXITA##  STH   R15,RC
         TM    STATUS,STABEND      OPEN ABEND OCCURRED?
         BZ    EXITARC             NO
         MVI   RC+1,16             YES, UP THE RETURN CODE A BIT
EXITARC  TM    STATUS,STALLOC      FREE REQUIRED?
         BZ    NOFREE              NO
         AIF   (NOT &ENV390).PRMLIB2
         CLC   $DDNAME,PARMLIB     IS IT LOGICAL PARMLIB?
         BE    FREPRMLB            YES
.PRMLIB2 ANOP
         LA    R1,MYDAPL
         XC    MYDAPB,MYDAPB
         MVI   DA18CD+1,X'18'
         MVC   DA18DDN,$DDNAME
         MVC   DA18MNM(8),=CL8' '
         MVC   DA18SCLS(2),=CL8' '
         BAS   R14,CALLDAIR        UNALLOCATE
         NI    STATUS,255-STALLOC  UNALLOCATED
         B     NOFREE
         AIF   (NOT &ENV390).NOFREE
FREPRMLB L     R1,SCREENBF         POINT TO IEFPRMLB PARAMETER AREA
         IEFPRMLB REQUEST=FREE,          ALLOCATE PARMLIB FILE(S)      +
               DDNAME=$DDNAME,           SUPPLY DDNAME USED            +
               CALLERNAME=REVCALER,      IDENTIFY MACRO CALLER         +
               PLISTVER=MAX,             PLENTY OF SPACE FOR GROWTH    +
               MF=(E,(1),COMPLETE)
         NI    STATUS,255-STALLOC  DO NOT RETRY IF FAILED
         LTR   R15,R15             SUCCESSFULLY FREED?
         BNZ   BADPRMLB            NO, ISSUE MESSAGE
.NOFREE  ANOP
NOFREE   DS    0H
         ICM   R0,15,DIVORG        WAS "DIV" USED?
         BNP   NODIV16             NO, DON'T NEED TO FREE IT
         LA    R0,16               YES, GET ENTRY CODE (FREEMAIN)
         L     R15,DIVADDR1        LOAD REVDIV ENTRY POINT
         BASR  R14,R15             CALL IT
NODIV16  DS    0H                  ANY "DIV" HAS NOW BEEN FREED
         SPACE
         NI    MODE,255-MD_RECRS   RESET RECURSIVE SESSION FLAG
         L     R1,RECURS@          POINT TO THE RECURSION VECTOR
         L     R0,RCRSL+16(,R1)    GET CURRENT SESSION COUNT
         BCTR  R0,0                DECREMENT COUNT
         ST    R0,RCRSL+16(,R1)    SAVE UPDATED COUNTER
         LTR   R0,R0               IS THIS THE ONLY SESSION ACTIVE?
         BNP   *+8                 YES, FLAG IS NOW CORRECT
         OI    MODE,MD_RECRS       NO, SET RECURSIVE SESSION FLAG
         SPACE
         IKJRLSA MYANS
         SPACE
         XASAM24
         LA    R0,1
         CL    R0,REVIOWK@         NEED TO RESTORE ECTIOWA?
         BNL   STACKRC             NO
         TM    MODE,MD_RECRS       RECURSIVE 'REVIEW' SESSION?
         BO    STACKDX             YES, LEAVE I/O STACK ALONE
         XC    MYSTPB(STPBL),MYSTPB     CLEAR THE STPB
         STACK DELETE=ALL,PARM=MYSTPB,MF=(E,MYIOPL)
         L     R1,REVECT           POINT TO THE ECT
         USING ECT,R1
         MVC   ECTIOWA,REVIOWK@    RESTORE INVOCATION-TIME STACK
         DROP  R1                  ECT
         SPACE
STACKRC  CLI   RC+1,0              IS RC ZERO?
         BZ    STACKDX             YES, BRANCH
         XC    MYSTPB(STPBL),MYSTPB     CLEAR THE STPB
         SPACE
         STACK DELETE=ALL,PARM=MYSTPB,MF=(E,MYIOPL)
         SPACE
         TCLEARQ
STACKDX  DS    0H
         XASAM31
         SPACE
         ICM   R1,15,RECURS#       GET SESSION ID
         BNP   SESNGONE            NO SESSION ID
         BCTR  R1,0
         LA    R15,RCRSIZE         GET RECURSION ELEMENT LENGTH
         MR    R0,R15              GET ELEMENT OFFSET
         A     R1,RECURS@          POINT TO CURRENT ELEMENT
         XC    0(RCRSIZE,R1),0(R1) RESET THE ELEMENT
SESNGONE DS    0H
         SPACE
         ICM   R0,15,ATTNADDR      WAS ATTENTION EXIT ENABLED?
         BZ    STAXGONE            NO, NO NEED TO DISABLE
         L     R15,RECURS@         POINT TO GLOBAL AREA
         C     R9,RCRSL+4(,R15)    STAX OWNER TERMINATING?
         BNE   STAXGONE            NO, LEAVE STAX STATUS UNCHANGED
         SR    R0,R0               YES
         ST    R0,RCRSL+4(,R15)    CLEAR STAX OWNER
         STAX  ,                   DELETE ATTENTION EXIT
STAXGONE DS    0H
**********************************************************************
*                                                          *         *
*         UPDATE 'REVIEW' PROFILE ON DISK                  *  GP@P6  *
*                                                          *  10/90  *
**********************************************************************
         SPACE
*    THIS CODE WILL BE SKIPPED UNLESS A 'COLOR #' COMMAND OR A
*    'PFK' OR 'DISPLAY' COMMAND WERE SUCCESSFULLY ISSUED, OR THE
*    SCROLL INPUT FIELD WAS UPDATED.
         SPACE
         TM    MODE,MD_RECRS       RECURSIVE 'REVIEW' SESSION?
         BO    $$REVOTX            YES, AVOID DISK I/O TO REWRITE PROF
         SPACE
         L     R1,RECURS@          POINT TO ID VECTOR AND RECALL STACK
         LA    R0,$GLBSIZE         GET THEIR STORAGE SIZE
         FREEMAIN RU,LV=(0),A=(1)  FREE THEIR STORAGE
         ST    R15,RECURS@         CLEAR POINTER
         SPACE
         TM    STATUS,STPROF       WAS THE PROFILE CHANGED?
         BZ    $$REVOTX            NO, AVOID NEEDLESS OPEN, I/O, CLOSE
         SPACE
         NI    FMTCOLOR,X'0F'      FORMAT COLOURS AND SCROLL AMOUNT
         CLI   FMTCOLOR,9
         BH    *+8
         OI    FMTCOLOR,X'F0'
         OI    FMTCOLOR,X'70'
         NI    CHRCOLOR,X'0F'
         CLI   CHRCOLOR,9
         BH    *+8
         OI    CHRCOLOR,X'F0'
         OI    CHRCOLOR,X'70'
         NI    HEXCOLOR,X'0F'
         CLI   HEXCOLOR,9
         BH    *+8
         OI    HEXCOLOR,X'F0'
         OI    HEXCOLOR,X'70'
         MVC   DOUBLE(1),STATUS4   COPY SCROLLING MODE FLAGS
         NI    DOUBLE,$4CSR        RESET OTHER BITS
         SR    R1,R1               CLEAR FOR INSERT
         IC    R1,DOUBLE
         SRA   R1,2                SCALE TO CORRECT INDEX
         LA    R1,SCROLLS-2(R1)    POINT TO SCROLL AMOUNT
         BNZ   PRFSCROL            SHOW NON-NUMERIC SCROLL AMOUNT
         L     R1,SCROLL           SHOW NUMERIC SCROLL AMOUNT
         CVD   R1,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  DOUBLE(2),DOUBLE+6(2)
         LA    R1,DOUBLE
PRFSCROL MVC   PROFSCRL(2),0(R1)
         SPACE
         LA    R0,$$REVSIZ         GET PROFILE MEMBER BYTE COUNT
         GETSTOR RC,LV=(0),LOC=(31,64)
         LTR   R15,R15             GOT I/O BUFFER?
         BNZ   $$REVOTX            NO, SKIP SAVING PROFILE
         LR    R2,R1               POINT TO THE NEW STORAGE
         LA    R3,$$REVSIZ         GET ITS SIZE
         LA    R15,C' '            GET PAD CHARACTER
         SLL   R15,24              PROMOTE IT AND ZERO SOURCE LENGTH
         MVCL  R2,R14              BLANK WHOLE AREA
         MVC   80(L'PROFPRIM,R1),PROFPRIM  SET TAGS FOR HUMANS
         MVC   $PROFS(2,R1),PROFSCRL       LOAD SCROLL AMOUNT
         MVC   $PROFF(1,R1),FMTCOLOR       LOAD FORMAT COLOUR
         MVC   $PROFC(1,R1),CHRCOLOR       LOAD CHARACTER COLOUR
         MVC   $PROFH(1,R1),HEXCOLOR       LOAD HEXADECIMAL COLOUR
         MVC   $PROFU(1,R1),NONDISP        LOAD NON-DISPLAY TOKEN
         MVC   $PROFD(1,R1),PROFDISP       LOAD DISPLAY SETTING
         MVC   $PROFM(1,R1),STATUS7        LOAD SESSION MANAGER
         NI    $PROFM(R1),$7SM                  SETTING
         OI    $PROFM(R1),X'F0'
         LA    R14,24              GET NUMBER OF PFK SLOTS
         LA    R3,PFKTAB           POINT TO PFK TABLE
         LA    R4,2*80(,R1)        POINT TO FIRST PFK RECORD
$$REVPFL MVC   0(1,R4),0(R3)       LOAD A PFK SETTING
         MVI   1(R4),C'='
         MVC   2(PFKTABL-1,R4),1(R3)
         LA    R3,PFKTABL(,R3)     POINT TO NEXT CURRENT PFK VALUE
         LA    R4,80(,R4)          POINT TO NEXT RECORD
         BCT   R14,$$REVPFL        LOAD ALL 24 PFKS
         L     R15,=A(REVPROF)     POINT TO PROFILE I/O ROUTINE
         LA    R0,$$REVSIZ         GET PROFILE MEMBER BYTE COUNT
         MVC   DOUBLE,$$REVMEM     SUPPLY PROFILE MEMBER NAME
         LNR   R0,R0               REQUEST PROFILE SAVE
         BASR  R14,R15             SAVE BASE PROFILE MEMBER
         LA    R0,$$REVSIZ         GET PROFILE MEMBER BYTE COUNT
         FREEMAIN RU,LV=(0),A=(1)  FREE PROFILE SAVE BUFFER
$$REVOTX DS    0H
         SPACE
**********************************************************************
*                                                          *         *
*         VDELETE ALL REMAINING ISPF VARIABLES             *  GP@HC  *
*                                                          * DEC2001 *
**********************************************************************
         SPACE
         TM    STATUS9,$9ISPF      WAS REVIEW SESSION AN ISPF DIALOG?
         BNO   ISPFIOX             NO
         NI    STATUS9,255-$9ISPF  YES, RESET FLAG
         ICM   R15,15,@ISPLINK     LOAD ISPLINK ENTRY POINT
         BZ    ISPFIOX             ISPF HAD NOT YET BEEN CALLED
         CALL  (15),(VERASE1,REVS1),                                   +
               VL,MF=(E,LINKAREA)  VERASE REVS
         L     R15,@ISPLINK        LOAD ISPLINK ENTRY POINT
         CALL  (15),(VDELETE1,ALLVAR1),                                +
               VL,MF=(E,LINKAREA)  VDELETE ALL VDEFINED VARIABLES
         DELETE EPLOC==CL8'ISPLINK'
ISPFIOX  DS    0H
         SPACE
         LH    R15,RC
         SPACE
************************************************************
*                                                          *
*         EXIT TO CALLER                                   *
*                                                          *
************************************************************
         SPACE
EXIT     LR    R2,R15
         TM    MODE,MD_RECRS       RECURSIVE 'REVIEW' SESSION?
         BO    FSMODEX             YES, LEAVE IN FULLSCREEN MODE
         TM    STATUS5,$5STSZ      NEED TO RESTORE SCREEN SIZE?
         BZ    NOSTSIZE            NO
         MVC   GOTTERM+7(1),GOTTERM+2
         XC    GOTTERM(3),GOTTERM
         XC    GOTTERM+4(3),GOTTERM+4
         STSIZE SIZELOC=GOTTERM,LINELOC=GOTTERM+4
NOSTSIZE DS    0H
         TM    STATUS8,$8ISPF      IS ISPF ACTIVE?
         BO    FSMODEX             YES, LEAVE FULLSCREEN MODE ON FOR IT
         TM    MODE,MD_FS          STILL IN FULL SCREEN MODE?
         BZ    FSMODEX             NO, PROBABLY NEVER GOT THERE
*
*   FOR FAST TERMINATION WE DON'T WANT TO DO ANY MORE TERMINAL I/O,
*   BUT MERELY TELL THE SYSTEM THAT THIS FULLSCREEN APPLICATION HAS
*   FINISHED, AND THAT THE NEXT OUTPUT IS TO START ON THE FIRST LINE
*   (ASSUMING LINE MODE I/O), WHICH SHOULD CAUSE THE SYSTEM TO CLEAR
*   THE SCREEN WITH THE TPUT THAT SUPPLIES THE FIRST LINE.  BY POST-
*   PONING THIS ACTIVITY, 'REVIEW' IS FREE TO FINISH PRONTO.  MANY
*   PROGRAMS USE A TPUT TO CLEAR THE SCREEN, WHICH MAY INITIATE A SWAP
*   OUT AND THEREFORE NEEDLESSLY DELAY THE PROMPT FROM THE TMP OR ISPF
*   OR CALLER IN GENERAL.
*
*   CHARACTER ATTRIBUTES OF A DATA STREAM DISPLAY CHARACTER ARE
*   INHERITED FROM THE PREVIOUS CHARACTER BACK TO THE SET ATTRIBUTE
*   ORDERS.  THE DATA AT THE BEGINNING OF EACH WRITE WILL HAVE, IN THE
*   ABSENCE OF APPROPRIATE ORDERS, DEFAULT CHARACTER (AS DISTINCT FROM
*   FIELD) ATTRIBUTES.  THAT IS, FOR IBM 3270, CHARACTER ATTRIBUTES
*   TO BE INHERITED BY DISPLAY CHARACTERS ARE NOT REMEMBERED ACROSS
*   WRITE COMMANDS.  UNFORTUNATELY, THIS IS NOT THE CASE WITH FUJITSU
*   F668X SCREEN EQUIPMENT.  SUPPOSE A "MONOCHROME" PFD SESSION (REALLY
*   3-COLOURS) INVOKES REVIEW TO LOOK AT A PDS DIRECTORY.  PF3 WILL
*   EXIT REVIEW, BUT MAY LEAVE THE SCREEN WITH A COMPLETELY PINK (MORE
*   OF A LILAC, REALLY) PFD EDIT SESSION.  RATHER THAN LEAVE THE USER
*   TO HIT CLEAR AND THEN PA2, WE WILL ISSUE AN ERASE/WRITE OR
*   ERASE/WRITE ALTERNATE (DEPENDING ON SCREEN SIZES) WITH AN EXTRA
*   TPUT.  THIS IS A SCREEN EQUIPMENT DEPENDENCY AND NOT AN OPERATING
*   SYSTEM DEPENDENCY, SO:
*
*        CLI   SACHAR,X'0E'        FUJITSU TERMINAL HARDWARE?
*        BNE   SETMDOFF            NO, JUMP TO FAST EXIT
*
*   HOWEVER, SINCE PFD (UNLIKE ISPF) DOES NOT USE COLOUR AND HIGH-
*   LIGHTING, USERS OF IBM-COMPATIBLE COLOUR SCREENS ARE LEFT IN
*   2-COLOUR MODE INSTEAD OF 4-COLOUR MODE, WHEREAS IDEALLY THE
*   SCREEN SHOULD BE LEFT IN THE SAME MODE AS IT WAS BEFORE 'REVIEW'
*   WAS INVOKED.  HENCE, WE SHOULD END UP USING:
*
*        TM    OSBITS,X'13'        IBM OS?  (SOME FLAVOUR OF MVS?)
*        BO    SETMDOFF            YES, JUMP TO FAST EXIT
*
*   UNFORTUNATELY, THE LEVEL OF MVS 3.8J DOING THE ROUNDS (MAINLY TO
*   RUN UNDER THE HERCULES EMULATOR) HAS BUGS IN TSO TERMINAL CONTROL,
*   AND SPECIFYING LINE=1 ON THE STLINENO MACRO DOES NOT CAUSE THE TMP
*   TO CLEAR THE SCREEN.  HENCE, WE ACTUALLY END UP USING:
*
*        TM    OSBITS,X'93'        MVS/XA OR LATER?
*        BO    SETMDOFF            YES, JUMP TO FAST EXIT
*
*   BUT, THIS IS FIXED BY PTF, SO BACK TO:
*
         TM    OSBITS,X'13'        IBM OS?  (SOME FLAVOUR OF MVS?)
         BO    SETMDOFF            YES, JUMP TO FAST EXIT
*
*   ALSO NOTE THAT THE RESET FUNCTION OF ERASE/WRITE, ERASE/WRITE
*   ALTERNATE OR THE CLEAR KEY IS REQUIRED.  A TPUT TO NULL OUT THE
*   SCREEN BUFFER IS INSUFFICIENT.  FULLSCREEN PROGRAMMERS SHOULD
*   ALSO BE AWARE THAT THE CLEAR BUTTON RESETS THE SCREEN SIZE TO
*   THE PRIMARY SIZE (USUALLY 24 BY 80) AND IT IS UP TO THE APPLIC-
*   ATION PROGRAM TO SEND OUT AN ERASE/WRITE ALTERNATE TO CORRECT
*   THE SCREEN SIZE IF APPROPRIATE.  UNDER TSO, THE TMP HANDLES CLEAR
*   UNLESS THE TSO APPLICATION USES THE "STTMPMD ON,KEYS=ALL" MACRO.
*
         LA    R1,ERASECMD         POINT TO ERASE/WRITE COMMAND
         LA    R0,L'ERASECMD       LOAD DATA STREAM LENGTH
         ICM   R1,8,=X'03'         TPUT FLAGS (FULLSCREEN)
         TPUT  (1),(0),R           RESET CHARACTER ATTRIBUTES
SETMDOFF DS    0H
         STTMPMD OFF               ALLOW SESSION MANAGER
         STLINENO LINE=1,MODE=OFF  TURN OFF FS MODE
         NI    MODE,255-MD_FS      FULL SCREEN MODE NOW OFF
FSMODEX  DS    0H
         ICM   R1,15,ARLAREA       GET ARL ADDRESS
         BZ    NOARL               NO ARL WAS CREATED
         L     R0,ARLPOOL          LOAD ARL SUBPOOL AND SIZE
         FREEMAIN RU,LV=(0),A=(1)  FREE THE ALLOCATION RETRIEVAL LIST
NOARL    DS    0H
         ICM   R1,15,FMTAREA       GET FORMATTING DYNAMIC AREA ADDRESS
         BZ    NOFMT               FORMATTING WAS NOT USED
         USING @FMTAREA,R1
         L     R0,FMTSIZE          GET FORMAT AREA SUBPOOL AND SIZE
         DROP  R1                  @FMTAREA
         FREEMAIN R,LV=(0),A=(1)   FREE THE FORMATTING DYNAMIC AREA
NOFMT    DS    0H
         LM    R0,R1,HOLDSIZE
         LTR   R1,R1               ANYTHING TO FREE?
         BZ    HOLDGONE            NO
         FREEMAIN R,LV=(0),A=(1)   FREE HOLDDIR AND SCREEN BUFFERS
HOLDGONE LR    R1,R13              POINT TO AREA TO BE FREED (@DATA)
         L     R0,SIZE
         L     R13,4(,R13)         POINT TO CALLER'S SAVE AREA
         TM    MODE,MD_RECRS       RECURSIVE 'REVIEW' SESSION?
         BZ    FREEDYN             NO
         L     R15,56(,R13)        POINT TO PREVIOUS @DATA (R9 VALUE)
*                                  COPY RECALL STACK POINTERS
         MVC   RECALPTR-@DATA(8,R15),RECALPTR
         TM    MODE,MD_FS          STILL IN FULL SCREEN MODE?
         BZ    *+8                 NO
         OI    MODE-@DATA(R15),MD_FS
         LA    R14,1
         CL    R14,REVIOWK@        HAVE OLD ECTIOWA TO PRESERVE?
         BNL   STACKDIT            NO
         MVC   REVIOWK@-@DATA(4,R15),REVIOWK@
STACKDIT TM    STATUS,STPROF       WAS THE PROFILE CHANGED?
         BZ    FREEDYN             NO, DON'T PERCOLATE UPDATES
*                                  YES, TURN ON PROFILE-CHANGED FLAG
         OI    STATUS-@DATA(R15),STPROF
*                                  COPY DATA COLOURS
         MVC   FMTCOLOR-@DATA(3,R15),FMTCOLOR
*                                  COPY DISPLAY TRANSLATE TABLE
         MVC   PERIODS-@DATA(256,R15),PERIODS
*                                  COPY SCROLL AMOUNT
         MVC   SCROLL-@DATA(L'SCROLL,R15),SCROLL
         NI    STATUS4,$4CSR
         NI    STATUS4-@DATA(R15),255-$4CSR
         OC    STATUS4-@DATA(1,R15),STATUS4
*                                  COPY PFK VALUES
         LA    R14,6               (PFK-TABLE-SIZE)/256
UPDTPFLP MVC   PFKTAB-@DATA(256,R15),PFKTAB
         LA    R15,256(,R15)       POINT TO NEXT TARGET CHUNK
         LA    R9,256(,R9)         POINT TO NEXT SOURCE CHUNK
         BCT   R14,UPDTPFLP        COPY LATEST IN-CORE PFK TABLE
FREEDYN  DS    0H
         TM    STATUS6,HELX        XCTL TO "REAL" HELP?
         BO    XCTLEXIT            YES
         FREEMAIN R,LV=(0),A=(1)
         LR    R15,R2
         LM    0,12,20(R13)
         L     R14,12(,R13)
         BR    R14                 TERMINATE 'REVIEW'
         SPACE
**********************************************************************
*                                                          *         *
*         XCTL TO THE IBM HELP COMMAND                     *   ABL   *
*                                                          *         *
**********************************************************************
         SPACE
XCTLEXIT L     R15,REVECT
         USING ECT,R15
         CLI   FILEKV,C'S'         COMMAND WITH SUBCOMMANDS
         BE    *+10                YES, BRANCH
         MVC   ECTPCMD,IBMHELP     NO, HELP REQUEST ONLY
         MVC   ECTSCMD,SCMD        RESTORE SECONDARY COMMAND
         DROP  R15                 ECT
         XASAM24
         L     R15,REVCBUF         POINT TO THE COMMAND BUFFER
         MVC   2(2,R15),COMMND     RESTORE OFFSET TO OPERANDS
         FREEMAIN R,LV=(0),A=(1)
         LM    R14,R12,12(R13)
         DROP  R10,R11,R12         REVIEW
         BASR  R15,0
         USING *,R15
         XCTL  EPLOC=IBMHELP
         DROP  R15
         SPACE
IBMHELP  DC    CL8'&IBMHELP'       IBM-SUPPLIED TSO HELP COMMAND NAME
HELNAME  DC    CL8'&HEL    '       NAME OF THIS FULLSCREEN HELP COMMAND
HELNAME2 DC    CL8'&HEL2   '       ALIAS NAME: MUST BE AFTER HELNAME
HEL4HEL  DC    CL8'HLHL    '       FAKE NAME FOR FULLSCREEN HELP OF HEL
         SPACE
         USING REVIEW,R10,R11,R12
         SPACE
************************************************************
*                                                          *
*         CALL IKJDAIR SERVICE ROUTINE                     *
*                                                          *
************************************************************
         SPACE
CALLDAIR ST    R14,DAIRREGS
         XASAM24
         XC    MYECB,MYECB
         AIF   (NOT &MVS).SKIP6
         L     R15,CVTPTR(,0)      POINT TO THE CVT
         USING CVT,R15
         ICM   R15,15,CVTDAIR      GET ENTRY POINT TO CALL IKJDAIR
         BNM   DAIRLINK            IF SIGN BIT OFF THEN NEED TO LINK
         DROP  R15                 CVT
         BASR  R14,R15
         B     DAIRFINI
DAIRLINK DS    0H
.SKIP6   ANOP
         LINK  EPLOC=IKJDAIR,SF=(E,LINKAREA)
DAIRFINI DS    0H
         L     R14,DAIRREGS
         XABSM14
IKJDAIR  DC    CL8'IKJDAIR'
         SPACE
************************************************************
*                                                          *
*         DYNAMIC ALLOCATION FAILURE ROUTINE               *
*                                                          *
************************************************************
         SPACE
DAIRFAIL ST    R14,MYDFREGS
         XASAM24
         LA    R1,MYDFPARM
         USING DFDSECTD,R1         MAPPED BY IKJEFFDF DFDSECT=YES MACRO
         ST    R15,MYDFRC
         LA    R15,MYDFRC
         ST    R15,DFRCP
         LA    R15,MYDAPL
         ST    R15,DFDAPLP
*        SR    R15,R15             INITIALLY ZERO - BUT LEAVE EP THERE
*        ST    R15,MYJEFF02               IF THE SYSTEM ALREADY SET IT
         LA    R15,MYJEFF02
         ST    R15,DFJEFF02
         LA    R15,DFDAIR
         STH   R15,MYDFID
         LA    R15,MYDFID
         ST    R15,DFIDP
         MVC   DFCPPLP,CPPLPTR
         LINK  EPLOC=IKJEFF18,SF=(E,LINKAREA)
         DROP  R1                  DFDSECTD
         L     R15,MYDFRC
         L     R14,MYDFREGS
         XABSM14
IKJEFF18 DC    CL8'IKJEFF18'
         SPACE
************************************************************
*                                                          *
*         PUTMSG ROUTINE                                   *
*                                                          *
************************************************************
         SPACE
PUTMSG1  TM    MODE,MD_FS          IN FULLSCREEN MODE?
         BZ    PUTMSG              NO, NO ACTION REQUIRED
         TM    STATUS13,$13RFE     RUNNING UNDER RFE UMBRELLA?
         BO    PUTMSG              YES, STAY IN FULLSCREEN MODE
         TM    MODE,MD_RECRS       RECURSIVE 'REVIEW' SESSION?
         BO    PUTMSG              YES, STAY IN FULLSCREEN MODE
         TM    STATUS8,$8ISPF      RUNNING UNDER ISPF?
         BO    PUTMSG              YES, STAY IN FULLSCREEN MODE
         STM   R14,R2,PUTLINS
         STFSMODE OFF              LET 'READY' PROMPT ACCEPT INPUT
         LM    R14,R2,PUTLINS      RESTORE MESSAGE DETAILS
         NI    MODE,255-MD_FS      FULL SCREEN MODE NOW OFF
         DROP  R10,R11,R12         REVIEW
         SPACE
PUTMSG   STM   R14,R2,PUTLINS
         BASR  R2,0
         USING *,R2
         XASAM24
         XC    MYOLD(8),MYOLD
         XC    MYSEG1(4),MYSEG1
         MVC   MYPTPB(12),MODLPTPM
         LA    R14,1               NO. OF MESSAGE SEGMENTS
         ST    R14,MYOLD
         LA    R14,MYSEG1          POINT TO 1ST SEGMENT
         ST    R14,MYOLD+4
         LH    R14,0(,R1)          GET MESSAGE LENGTH
         LR    R0,R14              COPY IT
         LA    R14,4(,R14)         ADD 4
         LA    R15,MYSEG1+4
         CLC   2(3,R1),=C'IKJ'     IS DATA PRECEEDED BY MESSAGE ID?
         BE    *+16                YES - BRANCH
         LA    R14,1(,R14)         ADD 1 TO LENGTH
         MVI   0(R15),C' '         INSERT LEADING BLANK
         LA    R15,1(,R15)         BUMP POINTER
         STH   R14,MYSEG1
         LR    R14,R0
         BCTR  R14,0
         EX    R14,PUTMSGMV        MOVE MESSAGE IN
         L     R15,MYPUTLEP
         SPACE
         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),ENTRY=(15),MF=(E,MYIOPL)
         SPACE
         DROP  R2                  PUTMSG+6
         LM    R14,R2,PUTLINS
         XABSM14
PUTMSGMV MVC   0(0,R15),2(R1)      <<< EXECUTED >>>
         USING REVIEW,R10,R11,R12
         SPACE
************************************************************
*                                                          *
*         TERMINATION VARIATIONS                           *
*                                                          *
************************************************************
         SPACE
XCTLHELP OI    STATUS6,HELX        XCTL TO TSO HELP IS REQUIRED
         B     EXITARC
         SPACE
ERRPNS   LA    R1,MSGPNS           CANNOT INTERRUPT OUT OF RECURSIVE
         BAS   R14,PUTMSG1         AVOID THE POTENTIAL TRAP
         B     EXITA12
         SPACE
ERRCOLS  TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    XCTLHELP            YES, CALL LINE-MODE HELP INSTEAD
         LA    R1,MSGCOLS
         BAS   R14,PUTMSG1
         B     EXITA12
         SPACE
ERRSCRN  TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    XCTLHELP            YES, CALL LINE-MODE HELP INSTEAD
         LA    R1,MSGSCRN
         BAS   R14,PUTMSG1
         B     EXITA12
         SPACE
ERRTERM  TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    XCTLHELP            YES, CALL LINE-MODE HELP INSTEAD
         LA    R1,MSGTERM
         BAS   R14,PUTMSG1
         B     EXITA12
         DROP  R10,R11,R12         REVIEW
         SPACE
**********************************************************************
*                                                          *         *
*         ATTENTION EXIT                                   * GP@SECV *
*                                                          *  08/84  *
**********************************************************************
         SPACE
         USING ATTN,R15            ESTABLISH ADDRESSABILITY
ATTN     STM   R14,R12,12(R13)     SAVE REGISTERS
         L     R9,8(,R1)           GET GLOBAL AREA ADDRESS
         L     R9,RCRSL(,R9)       GET DYNAMIC AREA ADDRESS
         OI    STATUS4,$4ATTN      SET INTERRUPT REQUEST FLAG
         OI    STATUS7,$7RESHO     REQUEST SCREEN REFRESH
         STFSMODE ON               RESTORE FULL SCREEN MODE
         TM    STATUS7,$7SM        LEAVING SESSION MANAGER ACTIVE?
         BO    ATTNSMOK            YES
         STTMPMD ON                NO, SUPPRESS SESSION MANAGER
ATTNSMOK LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 RETURN
         DROP  R15                 ATTN
         EJECT
************************************************************
*                                                          *
*         PHASE 1 CONSTANTS                                *
*                                                          *
************************************************************
         SPACE
         DC    0D'0'
         LTORG
         DC    0D'0'
PFKDEF   DS    0D                  INITIAL VALUES OF PF KEYS
         DC    X'F1',CL11'HELP       '                   1
         DC    X'F2',CL11'START      '                   2
         DC    X'F3',CL11'END        '                   3
         DC    X'F4',CL11'TSO        '                   4
         DC    X'F5',CL11'RFIND      '                   5
         DC    X'F6',CL11'RCHANGE    '                   6
         DC    X'F7',CL11'UP         '                   7
         DC    X'F8',CL11'DOWN       '                   8
         DC    X'F9',CL11'SWAP NEXT  '                   9
         DC    X'7A',CL11'LEFT       '                  10
         DC    X'7B',CL11'RIGHT      '                  11
         DC    X'7C',CL11'RECALL     '                  12
         DC    X'C1',CL11'TOP        '                  13
         DC    X'C2',CL11'BOTTOM     '                  14
         DC    X'C3',CL11'END        '                  15
         DC    X'C4',CL11'SMF        '                  16
         DC    X'C5',CL11'RFIND      '                  17
         DC    X'C6',CL11'EREP       '                  18
         DC    X'C7',CL11'UP         '                  19
         DC    X'C8',CL11'DOWN       '                  20
         DC    X'C9',CL11'HEX        '                  21
         DC    X'4A',CL11'ASCII      '                  22
         DC    X'4B',CL11'TSO REV    '                  23
         DC    X'4C',CL11'HEXC       '                  24
PFKDEFL  EQU   12                  LENGTH OF EACH DEFAULT ENTRY
         SPACE
         DS    0F
DIVADDR1 DC    A(REVDIV)
EDITADR1 DC    A(REVEDIT)
         AIF   (NOT &ENV390).GOTUNIX
UNIXADDR DC    A(REVUNIX)
.GOTUNIX ANOP
         SPACE
MODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         +
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L
         SPACE
*ODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          +
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L
         SPACE
TPG      TPG   QUERY,L'QUERY,NOEDIT,WAIT,MF=L
TPGL     EQU   *-TPG
         SPACE
         AIF   (NOT &ENV390).PRMLIB4
PARMLIB  DC    CL8'PARMLIB '
REVCALER DC    CL16'REVIEW--&REL.'
.PRMLIB4 ANOP
         SPACE
VDELETE1 DC    CL8'VDELETE '
ALLVAR1  DC    CL8'*       '
VERASE1  DC    CL8'VERASE  '
REVS1    DC    CL8'REVS    '
KEYSMEM  DC    CL8'REVPROF '
         SPACE
$$REVMEM DC    CL8'$$REVIEW'
SCROLLS  DC    C'HFPGCS'          LITERALS OF NON-NUMERIC SCROLL AMTS
         SPACE
*ERASEWRT DC   X'27F540'          ESCAPE + ERASE/WRITE + WCC
*ERSWRALT DC   X'277E40'          ESCAPE + ERASE/WRITE ALT + WCC
RESETAID DC    X'27F1C3'          ESCAPE + WRITE + WCC
QUERY    DC    X'F3000501FF02'    WRITE STRUCTURED FIELD + QUERY
*QUERYI  DC    X'F300064000F1C3000501FF02' WSF, 3270DS, WRT+WCC, QUERY
         SPACE
PROFINIT DC    C'CS.T',AL1(&FC.,&CC.,&HC.)
PROFINIL EQU   *-PROFINIT
PROFPRIM DC    C'SCRL=?? FMT=? CHR=? HEX=? DSP=(?,?) SM=?'
$PROFS   EQU   80+5                SCROLL AMOUNT
$PROFF   EQU   80+12               FORMAT COLOUR
$PROFC   EQU   80+18               CHARACTER COLOUR
$PROFH   EQU   80+24               HEXADECIMAL COLOUR
$PROFU   EQU   80+31               UNSHOWABLE CHARACTER
$PROFD   EQU   80+33               DISPLAY TEXT
$PROFM   EQU   80+39               SESSION MANAGER
         SPACE
         DC    0F'0'
MSG00    WTO   '"REVIEW" COULD NOT INITIALIZE',ROUTCDE=11,MF=L
MSG01    MESG  '"REVIEW" ENCOUNTERED AN ERROR IN PARSE SERVICE ROUTINE'
MSG02    DC    C'IKJ58503I DATA SET '
MSG02A   DC    C' NOT IN CATALOG'
MSG03    MESG  '"REVIEW" ENCOUNTERED AN ERROR IN DEFAULT SERVICE ROUTIN+
               E'
MSG05    MESG  'IKJ58509I DATA SET NAME REQUIRED WHEN MEMBER IS SPECIFI+
               ED'
*SG06    DC    C'ORGANIZATION OF DATA SET MUST BE PARTITIONED OR SEQUEN
*              TIAL'
*SG07    DC    C'DATA SET IS PARTITIONED, MEMBER NOT SPECIFIED'
MSG11    MESG  '"REVIEW" OF SUBSYSTEM DATA SET SPECIFIED BUT ENVIRONMEN+
               T NOT APF AUTHORIZED'
MSG11X   MESG  ' - TRY "REVVSAM"'
MSG12    MESG  '"REVIEW" FOUND INSUFFICIENT STORAGE AVAILABLE IN EXTEND+
               ED REGION'
         AIF   (NOT &ENV390).PRMLIB3
MSG13    DC    C'"REVIEW" ENCOUNTERED IEFPRMLB FAILURE - HEX RC = '
.PRMLIB3 ANOP
MSG14    DC    C'"REVIEW" FOUND FILENAME '''
MSG14A   MESG  ''' IS INVALID, MORE THAN 8 CHARACTERS'
MSG14B   MESG  ''' IS NOT CURRENTLY ALLOCATED'
MSG14C   MESG  ''' IS NOT ALLOCATED TO A DASD OR TAPE DATA SET'
MSGCOLS  MESG  '"REVIEW" ONLY SUPPORTS SCREENS WITH AN EVEN NUMBER OF C+
               OLUMNS PER LINE'
MSGSCRN  MESG  '"REVIEW" REQUIRES AT LEAST 24 LINES AND 80 COLUMNS'
MSGTERM  MESG  '"REVIEW" TERMINATED BECAUSE TERMINAL IS NOT A 3270 DISP+
               LAY'
MSGPNS   MESG  '"REVIEW" CANCELLED - COULD NOT ASCERTAIN DATA SET NAME'
         SPACE
HEXTAB1  DC    C'0123456789ABCDEF' HEXADECIMAL DIGIT TRANSLATE TABLE
         SPACE
*              3270 EBCDIC/APL TRANSLATION
EDITT    DC    64X'4B'
         DC    X'404142434445464748494A4B4C4D4E4F'  (BYTES SHOULD BE
         DC    X'505152535455565758595A5B5C5D5E5F'  TABLE OFFSET OR
         DC    X'606162636465666768696A6B6C6D6E6F'  PERIOD)
         DC    X'707172737475767778797A7B7C7D7E7F'
         DC    X'808182838485868788898A8B8C8D8E8F'
         DC    X'909192939495969798999A9B9C9D9E9F'
         DC    X'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'
         DC    X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'
         DC    X'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'
         DC    X'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'
         DC    X'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'
         DC    X'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFE4B'
         DC    0H'0'
         EJECT
**********************************************************************
*                                                          *         *
*         GET CORRECT VOLUME FOR ISPF OPTION 3.4           *  GP@FT  *
*                                                          *  08/96  *
**********************************************************************
         SPACE
         USING GET34VOL,R4
GET34VOL DS    0H
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BOR   R14                 YES, VOLUME IS IRRELEVANT
         CLI   $VOLSER,C' '        WAS ANY VOLUME SPECIFIED?
         BNER  R14                 YES, NO NEED TO GET ANOTHER
         CLI   FILEKV+1,1          'FILE' SPECIFIED?
         BER   R14                 YES, VOLUME IS IRRELEVANT
         TM    UDSNAME+2,X'40'     IS DSN QUOTED?
         BNOR  R14                 NO, SO WASN'T SUPPLIED BY ISPF 3.4
         TM    MODE,MD_RECRS       IS THIS A RECURSIVE 'REVIEW'?
         BOR   R14                 YES, SO NOT INVOKED BY ISPF
         TM    OSBITS,X'93'        MVS/XA OR LATER?
         BNOR  R14                 NO, ASSUME NOT ISPF OPTION 3.4
         SPACE
         STM   R14,R12,12(R13)     SAVE REGISTERS
         LA    R1,CALLSAVE         POINT TO NEW SAVE AREA
         ST    R13,4(,R1)          CHAIN SAVE AREAS
         ST    R1,8(,R13)
         LR    R13,R1              USE NEW SAVE AREA
         LR    R4,R15              SET LOCAL BASE REGISTER
         SPACE
         L     R15,PSATOLD         POINT TO THE CURRENT TCB
         USING TCB,R15
TLDSCAN  L     R1,TCBFSA           GET POINTER TO FIRST SAVE AREA
         LTR   R1,R1               IS VALUE ZERO?
         BZ    NEXTTCB             YES, PROCESS NEXT TCB
         USING SAVER,R1
         L     R1,SAVGRS1          GET SAVED R1
         DROP  R1                  SAVER
         LTR   R1,R1               ANY GOOD?
         BNP   NEXTTCB             NO, PROCESS NEXT TCB
         CLI   0(R1),0             HIGH ORDER BYTE NULL?
         BNE   NEXTTCB             NO, PROCESS NEXT TCB
         L     R1,0(,R1)           GET POSSIBLE TLD ADDRESS
         CLC   =C'TLD',0(R1)       TLD?
         BE    YESISPF             YES, AN ISPF ENVIRONMENT
NEXTTCB  L     R15,TCBOTC          POINT TO ORIGINATING TCB
         C     R15,TCBJSTCB        BACK TO JOB STEP YET?
         BNE   TLDSCAN             NO, TRY THIS TCB
         B     GET34ERR            NOT AN ISPF ENVIRONMENT
         SPACE
YESISPF  L     R1,PSATOLD          ISPF, BUT...
         C     R15,TCBOTC-TCB(,R1) DIRECTLY ATTACHED FROM ISPF?
         BNE   GET34ERR            NO, CAN'T BE 3.4 LINE COMMAND
         L     R15,TCBRBP          POINT TO PARENT'S TOP RB
         DROP  R15                 TCB
         USING RBBASIC,R15
         ICM   R15,7,RBCDE1        POINT TO RB'S CDE
         DROP  R15                 RBBASIC
         USING CDENTRY,R15
         CLC   INITOP34,CDNAME     ATTACHED FROM ISPF OPTION 3.4?
         BNE   GET34ERR            NO, DO NOT FETCH RESIDUAL VARIABLES
*                                  YES, COULD BE PRIMARY THOUGH    :-(
         DROP  R15                 CDENTRY
         SPACE
         LA    R0,INITILNK         POINT TO ISPLINK ENTRY POINT NAME
         LOAD  EPLOC=(0),ERRET=GET34ERR  ALSO HANDLE MODULE NOT FOUND
         ST    R0,HOLDTOP          SAVE ISPF INTERFACE ADDRESS
INITV10  LA    R15,INITVDEF        VDEFINE
         LA    R0,INITVZDS         ZDLDSN
         LA    R1,STRING           WHERE TO PLACE OUTPUT
         LA    R2,INITVCHA         CHARACTER
         LA    R14,44              LENGTH 44
         ST    R14,DOUBLE
         LA    R3,DOUBLE           USE AS PARM
         STM   R15,R3,OPDL         PARAMETER LIST
         OI    OPDL+16,X'80'       END OF LIST
         LA    R1,OPDL             START OF PARAMETER LIST
         L     R15,HOLDTOP
         BASR  R14,R15             PERFORM VDEFINE
         LTR   R15,R15             DOES ZDLDSN EXIST?
         BNZ   GET34XIT            NO, BRANCH
         LA    R1,INITVGET         VGET
         LA    R2,INITVZDS         ZDLDSN
         LA    R3,INITVSHA         SHARED
         STM   R1,R3,OPDL          PARAMETER LIST
         OI    OPDL+8,X'80'        END OF LIST
         LA    R1,OPDL             START OF PARAMETER LIST
         L     R15,HOLDTOP
         BASR  R14,R15             PERFORM VGET
         LA    R2,INITVDEL         VDELETE
         LA    R3,INITVZDS         ZDLDSN
         STM   R2,R3,OPDL          PARAMETER LIST
         OI    OPDL+4,X'80'        END OF LIST
         LA    R1,OPDL             START OF PARAMETER LIST
         L     R15,HOLDTOP
         BASR  R14,R15             PERFORM VDELETE
         CLC   STRING(44),UDSNAME+4 THIS DSNAME?
         BNE   GET34XIT            NO, THIS WAS LEFT OVER SOMEHOW
         LA    R15,INITVDEF        VDEFINE
         LA    R0,INITVZCA         ZDLCAT
         LA    R1,STRING           WHERE TO PLACE OUTPUT
         LA    R2,INITVCHA         CHARACTER
         LA    R14,1               LENGTH 1
         ST    R14,DOUBLE
         LA    R3,DOUBLE           USE AS PARM
         STM   R15,R3,OPDL         PARAMETER LIST
         OI    OPDL+16,X'80'       END OF LIST
         LA    R1,OPDL             START OF PARAMETER LIST
         L     R15,HOLDTOP
         BASR  R14,R15             PERFORM VDEFINE
         LTR   R15,R15             DOES ZDLCAT EXIST?
         BNZ   GET34XIT            NO, BRANCH
         LA    R1,INITVGET         VGET
         LA    R2,INITVZCA         ZDLCAT
         LA    R3,INITVSHA         SHARED
         STM   R1,R3,OPDL          PARAMETER LIST
         OI    OPDL+8,X'80'        END OF LIST
         LA    R1,OPDL             START OF PARAMETER LIST
         L     R15,HOLDTOP
         BASR  R14,R15             PERFORM VGET
         LA    R2,INITVDEL         VDELETE
         LA    R3,INITVZCA         ZDLCAT
         STM   R2,R3,OPDL          PARAMETER LIST
         OI    OPDL+4,X'80'        END OF LIST
         LA    R1,OPDL             START OF PARAMETER LIST
         L     R15,HOLDTOP
         BASR  R14,R15             PERFORM VDELETE
         CLI   STRING,C'1'         CATALOGED?
         BL    GET34XIT            YES, SO NO NEED TO SUPPLY VOLUME
         LA    R15,INITVDEF        VDEFINE
         LA    R0,INITVZVO         ZDLVOL
         LA    R1,STRING           WHERE TO PLACE OUTPUT
         LA    R2,INITVCHA         CHARACTER
         LA    R14,6               LENGTH 6
         ST    R14,DOUBLE
         LA    R3,DOUBLE           USE AS PARM
         STM   R15,R3,OPDL         PARAMETER LIST
         OI    OPDL+16,X'80'       END OF LIST
         LA    R1,OPDL             START OF PARAMETER LIST
         L     R15,HOLDTOP
         BASR  R14,R15             PERFORM VDEFINE
         LTR   R15,R15             DOES ZDLVOL EXIST?
         BNZ   GET34XIT            NO, BRANCH
         LA    R1,INITVGET         VGET
         LA    R2,INITVZVO         ZDLVOL
         LA    R3,INITVSHA         SHARED
         STM   R1,R3,OPDL          PARAMETER LIST
         OI    OPDL+8,X'80'        END OF LIST
         LA    R1,OPDL             START OF PARAMETER LIST
         L     R15,HOLDTOP
         BASR  R14,R15             PERFORM VGET
         LA    R2,INITVDEL         VDELETE
         LA    R3,INITVZVO         ZDLVOL
         STM   R2,R3,OPDL          PARAMETER LIST
         OI    OPDL+4,X'80'        END OF LIST
         LA    R1,OPDL             START OF PARAMETER LIST
         L     R15,HOLDTOP
         BASR  R14,R15             PERFORM VDELETE
**********************************************************************
*        CLC   STRING(6),INITMIGR  MIGRAT VOLUME? | IF UNCATALOGUED  *
*        BE    GET34XIT            YES, BRANCH    | ON MIGRAT THEN   *
*        CLC   STRING(6),INITARCI  ARCIVE VOLUME? | MIGRAT MUST BE   *
*        BE    GET34XIT            YES, BRANCH    | A REAL VOLUME.   *
**********************************************************************
         MVC   $VOLSER,STRING      SUBSTITUTE THE VOLUME
         MVC   $UNIT,INITALDA      COULD BE ANY DASD UNIT
         OI    STATUS8,$8_34       FLAG VOLUME CAME FROM ZDLVOL
         SPACE
GET34XIT DELETE EPLOC=INITILNK     RESET ISPLINK USE COUNT IN JPA
         SPACE
GET34ERR LR    R1,R13              POINT TO CURRENT SAVE AREA
         L     R13,4(,R13)         POINT TO CALLER'S SAVE AREA
         XC    0(72,R1),0(R1)      RESET CURRENT SAVE AREA
         XC    8(4,R13),8(R13)     RESET NEW SAVE AREA POINTER
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER
         SPACE
         DROP  R4                  GET34VOL
         SPACE
*INITMIGR DC    CL6'MIGRAT'
*INITARCI DC    CL6'ARCIVE'
         DC    0D'0'
INITILNK DC    CL8'ISPLINK '
INITVDEF DC    CL8'VDEFINE '
INITVGET DC    CL8'VGET    '
INITVCHA DC    CL8'CHAR    '
INITVSHA DC    CL8'SHARED  '
INITVDEL DC    CL8'VDELETE '
INITVZDS DC    CL8'(ZDLDSN)'
INITVZCA DC    CL8'(ZDLCAT)'
INITVZVO DC    CL8'(ZDLVOL)'
INITOP34 DC    CL8'ISRUDL  '
INITALDA DC    CL8'SYSALLDA'
         LTORG
         DC    0H'0'
         SPACE
         AIF   (&ENV390).US7
         USING REVIEW,R10,R11,R12
         AGO   .US8
.US7     ANOP
         USING (REVIEW,GET34VOL),R10,R11,R12
.US8     ANOP
         EJECT
**********************************************************************
*                                                          *         *
*         DETERMINE TERMINAL CHARACTERISTICS AND SET-UP    *  GP@P6  *
*                                                          *  07/87  *
**********************************************************************
         SPACE
         USING SCRNINIT,R4
SCRNINIT LR    R4,R15              SET LOCAL BASE
         ST    R14,READR           SAVE RETURN ADDRESS
         LA    R5,ATTN             POINT TO ATTENTION EXIT
         ST    R5,ATTNADDR         REMEMBER ITS ADDRESS
         L     R2,RECURS@          POINT TO GLOBAL AREA
         ST    R9,RCRSL(,R2)       SET POINTER TO CURRENT @DATA
         ICM   R0,15,RCRSL+4(R2)   STAX CURRENTLY ACTIVE?
         ST    R9,RCRSL+4(,R2)     SET STAX OWNER
         BNZ   STAXREPL            YES, REPLACE IT
         STAX  (R5),REPLACE=NO,USADDR=(R2),MF=(E,ATTNLST)
         B     STAXDONE
STAXREPL STAX  (R5),REPLACE=YES,USADDR=(R2),MF=(E,ATTNLST)
STAXDONE TM    STATUS8,$8ISPF      ISPF SCREEN HANDLING A POSSIBILITY?
         BNO   VFYTERM             NO, GO VERIFY TERMINAL DIMENSIONS
         LA    R0,1                YES, GO VERIFY ISPF PANEL
         SLL   R0,31               SET AMODE31 BIT
         L     R15,=A(REVPQRY)     GET PQUERY ROUTINE ENTRY POINT
         BASR  R14,R15             REVPQRY MAY CHANGE SCREEN SIZE
VFYTERM  ICM   R0,14,SCRNLNES      LESS THAN 256 LINES?
         BNZ   ERRTERM             NO, CAN'T BE A 3270 TERMINAL
         ICM   R0,14,SCRNCOLS      LESS THAN 256 COLUMNS?
         BNZ   ERRTERM             NO, CAN'T BE A 3270 TERMINAL
         LM    R0,R1,SCRNLNES      LOAD THE SCREEN DIMENSIONS
         LTR   R0,R0               IS THIS A VDU?
         BZ    ERRTERM             NO, REVIEW CANNOT HANDLE IT
         CH    R0,=H'24'           ENSURE AT LEAST 24 LINES
         BL    ERRSCRN
         CH    R1,=H'80'           ENSURE AT LEAST 80 COLUMNS
         BL    ERRSCRN
         TM    SCRNCOLS+3,X'01'    ENSURE AN EVEN NUMBER OF COLUMNS
         BO    ERRCOLS
         LR    R6,R0               COPY LINE COUNT
         SH    R6,=H'4'            SUBTRACT 4 FOR HEADINGS AND RULER
         STH   R6,PAGESIZE         SAVE LINES PER PAGE
         ST    R6,ISPFPAGE         SAVE VISIBLE DATA LINE COUNT
         TM    STATUS4,$4CSR       CURSOR, PAGE OR HALF SCROLLING?
         BZ    SCRLOKAY            NO, ALREADY LOADED FROM PROFILE
         ST    R6,SCROLL           START WITH CURSOR/PAGE SCROLLING
         TM    STATUS4,$4PAGE      CURSOR OR PAGE SCROLLING?
         BO    SCRLOKAY            YES
         SRA   R6,1                NO HALVE IT FOR HALF PAGE SCROLLING
         ST    R6,SCROLL           SAVE HALF PAGE SIZE
SCRLOKAY GTTERM PRMSZE=GOTTERM,ALTSZE=GOTTERM+2,                       +
               ATTRIB=GOTTERM+4,TERMID=$TERMID,                        +
               MF=(E,GETTERML)     GET TERMINAL CHARACTERISTICS
         LR    R3,R15              SAVE THE GTTERM RETURN CODE
         TM    MODE,MD_RECRS       RECURSIVE 'REVIEW' SESSION?
         BO    QUERYXX             YES, ALREADY HAVE SCREEN DETAILS
         MVI   ERASECMD,ESC        CREATE ERASE/WRITE DATA STREAM
         MVI   ERASECMD+1,EWA      SET ERASE/WRITE FOR ALTERNATE SIZE
         MVI   ERASECMD+2,WCCNULL  SUPPLY NO-ACTION WRITE CONTROL CHAR
         ICM   R15,2,SCRNLNES+3    GET NUMBER OF LINES
         ICM   R15,1,SCRNCOLS+3    GET NUMBER OF COLUMNS
         CLM   R15,3,GOTTERM       CURRENTLY MATCHING PRIMARY SIZE?
         BE    SCRPRMSZ            YES, USE PRIMARY EVEN FOR BIG SIZE
         CLI   SCRNLNES+3,24       STAYING WITH ALTERNATE SIZE?
         BH    SCRNEWOK            YES
         CLI   SCRNCOLS+3,80       STAYING WITH ALTERNATE SIZE?
         BH    SCRNEWOK            YES
SCRPRMSZ MVI   ERASECMD+1,EW       NO, SET ERASE/WRITE FOR PRIMARY SIZE
SCRNEWOK DS    0H
         TM    STATUS9,$9ISPF      GOING AHEAD WITH ISPF SCREEN I/O?
         BO    QUERYXIT            YES, NO NEED FOR ANOTHER QUERY
         TM    OSBITS,X'13'        IBM OS?  (SOME FLAVOUR OF MVS?)
         BO    QRYORNOT            YES, BAD LUCK IF OS/VS2 SVS
         MVI   SACHAR,X'0E'        NO, LOAD 668X SET ATTRIBUTE CODE
*        TERMTYPE TERMIDL=DOUBLE   NON-MVS MSP-ONLY TSS MACRO
         SR    R1,R1               ZERO REGISTER 1
         LA    R0,DOUBLE           LOAD VTAM TERMINAL ID LOCATION
         LA    R15,2               LOAD ENTRY CODE
         SLL   R15,24              SHIFT TO TOP BYTE
         OR    R0,R15              GATE INTO REGISTER 0
         LNR   R0,R0               MAKE NEGATIVE
         SVC   94                  ISSUE TERMINAL CONTROL SVC
         LTR   R1,R1               ANY INTERESTING TERMINAL FLAGS?
         BZ    DOTHEQRY            NO, ASSUME IBM 3270 COMPATIBLE,
*                                  PROBABLY WITH THE QUERY BIT TURNED
*                                  OFF BECAUSE THEY CAN'T HANDLE THE
*                                  FUJITSU EXTENDED DATA STREAM
*        B     QRYORNOT            YES, SO FOR FUJITSU F9526/F6680 AND
*                                  JAPANESE TERMINALS LOOK AT QUERY BIT
*
*        FOR AN IBM OS, IF THE TERMINAL CAN HANDLE IBM 3270 EDS (AND
*   THE CONTROLLER CAN HANDLE A QUERY) THEN SET THE QUERY BIT ON.
*   (IN FACT, QUERY IS A CONTROLLER FUNCTION, SO SET IT ON EVEN FOR
*   "OLD" TERMINALS ON "MODERN" CONTROLLERS.)  IF NOT, THEN DON'T.
*   UNDER FUJTISU'S MSP, IF THE GEAR CAN HANDLE 668X EDS THEN SET
*   THE QUERY BIT ON BECAUSE FUJITSU S/W WILL USE THE ORDER CODES FOR
*   THEIR HARDWARE.  IF 3270 GEAR IS CONNECTED DON'T SET THE QUERY BIT
*   ON BECAUSE THE 3270 MAY SAY IT CAN HANDLE EXTENDED COLORS AND HIGH-
*   LIGHTING (FOR EXAMPLE) BUT CAN THEN NOT UNDERSTAND THE 6680 ORDERS
*   REQUESTING THESE FUNCTIONS, AND DATA STREAM ERRORS RESULT.
*        HOWEVER, IF 3270 COMPATIBLE GEAR IS CONNECTED TO MSP, AND THE
*   APPLICATION (SUCH AS THIS PROGRAM) CAN TELL THE DIFFERENCE BETWEEN
*   A 3270 QUERY RESPONSE AND A 6680 QUERY RESPONSE, THEN THE QUERY CAN
*   BE ISSUED ANYWAY, AS LONG AS THE APPLICATION THEN SENDS ORDER CODES
*   APPROPRIATE FOR THE HARDWARE DETECTED AT RUN TIME.
*
QRYORNOT CLI   DATAKV,1            WAS 'XISPMODE' SPECIFIED?
         BE    QUERYBIT            YES, DO QUERY NATIVELY
         TM    STATUS5,$5QRY       QUERY RESULTS COPIED FROM ISPF?
         BO    QUERYSPF            YES, JUST GET INTO FULLSCREEN MODE
QUERYBIT TM    GOTTERM+7,X'01'     IS THE QUERY BIT ON?
         BO    DOTHEQRY            YES, DO THE QUERY
QUERYSPF STFSMODE ON,INITIAL=YES   NO, GET INTO NORMAL FULLSCEEN MODE
         CLI   OSBITS,X'13'        MVS/370?
         BNE   QUERYXXX            NO
         CH    R3,=H'4'            IS GTTERM SUPPORTED?
         BNE   QUERYXXX            YES, RESULTS SHOULD BE GOOD
*  GTTERM MACRO GOT RC=4 ON MVS/370 SO GTTERM NOT VALID ON THIS SYSTEM.
*  THE "PROBLEM" IS THAT ACF/VTAM IS NOT INSTALLED, NOT THE BCP LEVEL.
*  ASSUME A "MODERN" 3270 EMULATOR AND USE EXTENDED DATA STREAM ANYWAY.
         OI    STATUS5,$5COLR+$5HILT+$5GE+$5EDS
         B     QUERYXXX
DOTHEQRY STFSMODE ON,INITIAL=YES,NOEDIT=YES
         TM    STATUS7,$7SM        LEAVING SESSION MANAGER ACTIVE?
         BO    INITSMOK            YES
         STTMPMD ON                NO, TURN OFF SESSION MANAGER
INITSMOK MVC   SBASAVE(TPGL),TPG   INITIALIZE TPG EXECUTE AREA
         LA    R1,RESETAID         RESET THE TERMINAL AID
         LA    R0,L'RESETAID             BEFORE ISSUING THE
         ICM   R1,8,=X'03'               READ PARTITION
         TPUT  (1),(0),R           TPUT FULLSCR,WAIT,NOHOLD
         TCLEARQ INPUT             CLEAR ANY TYPE-AHEAD INPUT
         TPG   MF=(E,SBASAVE)      ISSUE QUERY TO TSO TERMINAL
         LTR   R15,R15             WAS TPG ISSUED SUCCESSFULLY?
         BNZ   QUERYX              NO, DO NOT EXPECT A RESPONSE
         OI    STATUS5,$5QRY       REMEMBER THAT A QUERY WAS ISSUED
QUERYGET LA    R1,REPLY            POINT TO TGET BUFFER FOR RESPONSE
         LA    R0,512                       FROM READ PARTITION
         ICM   R1,8,=X'81'         FLAGS FOR TGET ASIS,WAIT
         TGET  (1),(0),R           TGET ASIS,WAIT
         STM   R15,R1,TGETREGS     SAVE FOR DEBUG
         CLI   REPLY,X'6B'         VTAM RESHOW REQUEST (PA/CLEAR KEY)?
         BL    QUERYX              NO, ASSUME QUERY NOT FUNCTIONAL
         CLI   REPLY,X'6F'
         BL    QUERYGET            YES, IGNORE AND GET QUERY RESPONSE
         CLI   REPLY,X'88'         QUERY RESPONSE AID?
         BNE   QUERYX              NO, STICK TO 3270 BASICS
         LA    R15,REPLY           POINT TO THE AID
NOTSBFLD LA    R15,1(,R15)         IGNORE A BYTE
         BCT   R1,QUERYFIX         DECREMENT LENGTH
         B     QUERYX              JUST IN CASE THAT WAS THE LAST BYTE
QUERYFIX TM    3(R15),X'80'        LOOK LIKE A VALID QCODE?
         BNO   NOTSBFLD            NO, SKIP A BYTE
         CLI   0(R15),0            LENGTH LESS THAN 256?
         BNE   NOTSBFLD            NO, SKIP A BYTE
QUERYPRS CLI   2(R15),X'81'        QUERY REPLY ID?
         BNE   NOTSBFLD            NO, SKIP A BYTE
         CLI   3(R15),X'86'        QUERY REPLY COLOUR ID?
         BE    QUERYCLR            YES
         CLI   3(R15),X'87'        QUERY REPLY HIGHLIGHTING ID?
         BE    QUERYHLT            YES
         CLI   3(R15),X'85'        QUERY REPLY SYMBOL SETS ID?
         BE    QUERYSYM            YES
         CLI   3(R15),X'80'        QUERY REPLY SUMMARY ID?
         BE    QUERYSUM            YES
         CLI   3(R15),X'93'        QUERY REPLY PC ATTACHMENT ID?
         BE    QUERYPCA            YES
         CLI   3(R15),X'B2'        QUERY REPLY LINE TYPE?
         BE    QRYNATVC            YES
         CLI   3(R15),X'A6'        QUERY IMPLICIT PARTITION ID?
         BE    QUERYPCA            YES
         CLI   3(R15),X'95'        QUERY DISTRIBUTED DATA MGMT ID?
         BE    QRYVECTR            YES
NXTSBFLD SR    R0,R0
         ICM   R0,3,0(R15)         LOAD SUB-FIELD LENGTH
         SR    R1,R0               SUBTRACT FROM TGET LENGTH
         BZ    QUERYEND            END OF QUERY REPLY DATA STREAM
         BM    QUERYGET            MORE DATA RETURNED IN NEXT BLOCK
         AR    R15,R0              POINT TO NEXT SUB-FIELD
         B     QUERYPRS            EXAMINE IT
QUERYCLR CLI   5(R15),8            AT LEAST EIGHT COLOUR PAIRS?
         BL    NXTSBFLD            NO, NO 7-COLOUR SUPPORT
         CLC   8(14,R15),=CL14'11223344556677' YES, ALL 7 SUPPORTED?
         BNE   NXTSBFLD            NO
         OI    STATUS5,$5COLR      YES, REMEMBER IT
         CLI   5(R15),16           AT LEAST SIXTEEN COLOUR PAIRS?
         BL    NXTSBFLD            NO, NO 16-COLOUR SUPPORT
         OI    STATUS5,$5CLR16     YES, REMEMBER IT
         B     NXTSBFLD            LOOK FOR NEXT QUERY REPLY SUB-FIELD
QUERYHLT CLI   4(R15),4            AT LEAST FOUR HIGHLIGHTING PAIRS?
         BL    NXTSBFLD            NO, NO EXTENDED HIGHLIGHTING SUPPORT
         CLC   6(7,R15),=CL7'0112244'  YES, ALL 3 SUPPORTED?
         BNE   NXTSBFLD            NO
         OI    STATUS5,$5HILT      YES, REMEMBER IT
         B     NXTSBFLD            LOOK FOR NEXT QUERY REPLY SUB-FIELD
QUERYSYM OI    STATUS5,$5SYM       SYMBOL SETS SUB-FIELD RETURNED
         MVC   MATRIXSZ,6(R15)     SAVE CHARACTER MATRIX WIDTH & HEIGHT
         TM    4(R15),X'80'        GRAPHIC ESCAPE SUPPORTED?
         BZ    NXTSBFLD            NO, SO UNLIKELY TO HAVE GRAPHICS
         OI    STATUS5,$5GE        YES, REMEMBER IT
         TM    4(R15),X'20'        LOAD PSSF SUPPORTED?
         BZ    NXTSBFLD            NO, CANNOT DO RASTER GRAPHICS
         TM    8(R15),X'40'        FORMAT TYPE 1 SUPPORTED BY TERMINAL?
         BZ    NXTSBFLD            NO, SO FORGET LOADABLE SYMBOLS
         SR    R14,R14
         LA    R2,13(,R15)         POINT TO FIRST DESCRIPTOR
         ICM   R14,3,0(R15)        GET LENGTH OF WHOLE SUBFIELD
         LA    R0,13
         SR    R14,R0              GET LENGTH OF ALL DESCRIPTORS
         IC    R0,12(,R15)         GET SYMBOL SET DESCRIPTOR LENGTH
         LA    R3,SYMSTG3          POINT TO TRIPLE-PLANE ID LIST
QRYSTGLP TM    1(R2),X'80'         LOADABLE TERMINAL STORAGE?
         BZ    QRYNXSTG            NO, READ-ONLY STORAGE
         CLI   SYMSTGF,0           FIRST LOADABLE STORAGE?
         BNE   QRYLASTG            NO
         MVC   SYMSTGF,0(R2)       YES, LOAD FIRST LOADABLE STORAGE
QRYLASTG MVC   SYMSTGL,0(R2)       UPDATE LAST LOADABLE STORAGE ID
         TM    4(R15),X'10'        LOAD PS EXTENDED SUPPORTED?
         BZ    QRYNXSTG            NO, CANNOT SPECIFY COLOURS
         TM    1(R2),X'40'         TRIPLE PLANE STORAGE
         BZ    QRYNXSTG            NO, SINGLE PLANE STORAGE
         MVC   0(1,R3),0(R2)       YES, COPY STORAGE ID NUMBER
         LA    R3,1(,R3)           INCREMENT LIST POINTER
QRYNXSTG SR    R14,R0              UPDATE REMAINING LENGTH
         BNP   NXTSBFLD            END OF SUBFIELD REACHED
         AR    R2,R0               POINT TO NEXT DESCRIPTOR
         B     QRYSTGLP            LOOK AT IT
QUERYSUM SR    R14,R14
         LA    R2,4(,R15)          POINT TO FIRST QCODE IN LIST
         ICM   R14,3,0(R15)        GET LENGTH OF WHOLE SUBFIELD
         LA    R0,4
         SR    R14,R0              GET NUMBER OF QCODES IN LIST
QRYSUMLP CLI   0(R2),X'B2'         LINE TYPE?
         BE    QRYNATVC            YES, SEEMS VECTOR GRAPHICS SUPPORTED
         LA    R2,1(,R2)           POINT TO NEXT QCODE
         BCT   R14,QRYSUMLP        CHECK IT
         B     NXTSBFLD            LOOK FOR NEXT QUERY REPLY SUB-FIELD
QRYVECTR CLI   1(R15),12           SUB-FIELD LONG ENOUGH?
         BL    NXTSBFLD            NO
         SR    R0,R0
         SR    R2,R2
         IC    R2,10(,R15)         GET DDMSS BYTE COUNT
         ICM   R0,3,0(R15)         GET LENGTH OF WHOLE SUB-FIELD
         LA    R2,11(,R2)          GET OFFSET TO SELF-DEFINING FIELDS
         SR    R0,R2               GET LENGTH OF SELF-DEFINING FIELDS
         BNP   NXTSBFLD            NO SELF-DEFINING FIELD PRESENT
         LA    R14,0(R2,R15)       POINT TO SELF-DEFINING FIELDS
QRYDDMLP CLI   1(R14),X'03'        PCLK?
         BE    QRYVECOK            YES, NEXT 2 BYTES HAVE THE VERSION
         IC    R2,0(,R14)          NO, GET THE LENGTH
         ALR   R14,R2              POINT TO NEXT ONE
         SR    R0,R2               REDUCE REMAINING LENGTH
         BP    QRYDDMLP            GO LOOK AT NEXT ONE
         B     NXTSBFLD            LOOK FOR NEXT QUERY REPLY SUB-FIELD
QRYNATVC OI    VECFLAGS,VCTRNATV   FLAG NATIVE VECTOR GRAPHICS
QRYVECOK OI    VECFLAGS,VCTR       FLAG VECTOR GRAPHICS SUPPORTED
         B     NXTSBFLD            LOOK FOR NEXT QUERY REPLY SUB-FIELD
QUERYPCA OI    STATUS5,$5SYM       REMEMBER NON-FUJITSU HARDWARE
         B     NXTSBFLD            LOOK FOR NEXT QUERY REPLY SUB-FIELD
QUERYEND TM    STATUS5,$5SYM       WAS THERE A SYMBOL SETS SUB-FIELD?
         BZ    HAVSACHR            NO, DON'T CHANGE SA CODE
         MVI   SACHAR,SA           YES, MUST BE IBM 3270 EVEN ON MSP
HAVSACHR TM    STATUS5,$5COLR+$5HILT 7-COLOUR AND HIGHLIGHTING OK?
         BZ    QUERYX              NO, JUST USE DUAL INTENSITY
         OI    STATUS5,$5EDS       YES, ACTIVATE 3270 EXTENSIONS
QUERYX   MVC   PERIODS,EDITT       RESTORE TABLE AFTER TGET BUFFER USE
         MVC   PERIODS(1),NONDISP
         MVC   PERIODS+1(63),PERIODS
         MVC   PERIODS+255(1),NONDISP
QUERYXX  STFSMODE ON,NOEDIT=NO     TURN OFF NOEDIT INPUT MODE
QUERYXXX OI    MODE,MD_FS          FLAG FOR FUTURE REFERENCE
QUERYXIT L     R14,READR           RESTORE RETURN ADDRESS
         TM    STATUS5,$5CLR16     SIXTEEN COLOUR TERMINAL?
         BOR   R14                 YES, ANY COLOUR CODE IS VALID
         NI    CHRCOLOR,X'F7'      NO, ONLY USE SEVEN COLOURS AT MOST
         NI    HEXCOLOR,X'F7'
         NI    FMTCOLOR,X'F7'
         BR    R14
         DROP  R4                  SCRNINIT
         SPACE
         DC    0D'0'
         LTORG
         DC    0H'0'
         SPACE
**********************************************************************
*                                                          *         *
*         BROWSE VIRTUAL STORAGE SET UP                    *  R43.6  *
*                                                          * AUG2010 *
**********************************************************************
         SPACE
         USING BRVSINIT,R4
BRVSINIT LR    R4,R15              SET LOCAL BASE REGISTER
         LR    R5,R14              SAVE RETURN ADDRESS
         SPACE
         OI    STATUS14,$14AS      BROWSING ADDRESS SPACE
         MVI   DSORG,DS1DSGPS      SET LOCAL DSORG FLAG
         MVI   DSORG+1,0           JUST IN CASE...
         XC    DYNDCBW,DYNDCBW     CLEAR ANY DCB RELIC
         LA    R0,4+16             GET "RECORD LENGTH"
         STH   R0,DYNDCBW+DCBLRECL-IHADCB
         STH   R0,DYNDCBW+DCBBLKSI-IHADCB
         MVC   DSNAIM+2(17),=CL17'ACTIVE -- ASID(X'''
         L     R1,PSAAOLD
         UNPK  DSNAIM+19(5),ASCBASID-ASCB(3,R1)
         NC    DSNAIM+19(4),=X'0F0F0F0F'
         TR    DSNAIM+19(4),=C'0123456789ABCDEF'
         MVI   DSNAIM+23,QUOTE
         MVI   DSNAIM+24,C')'
         MVI   DSNAIM+1,23
         MVI   $VOLSER,C'.'
         OI    MODE,MD_FMT         ENABLE FORMATTING
         L     R0,TTR              GET INITIAL "TOP" ADDRESS
         ST    R0,@ADDR            SAVE AS CURRENT ADDRESS
         SRL   R0,4                GET RELATIVE LINE NUMBER
         ST    R0,COUNT            SAVE INITIAL TOP LINE NUMBER
         LA    R1,1
         LA    R15,$ADRBITS-4      GET "RECORD COUNT"
         AIF   (&ENV390).BITS31
         CLI   OSBITS,X'93'        MVS/XA?
         BNE   *+8                 NO, LEAVE AS IS
         LA    R15,31-4            YES, ALLOW 31-BIT ADDRESSING
.BITS31  ANOP
         SLL   R1,0(R15)           GET "RECORD COUNT"
         ST    R1,DIVHICNT
         MVI   DIVORG+3,1          "DIV" IS AVAILABLE
         OI    STATUS9,$9BRVS
         OI    STATUS13,$13_L      NO FILE I/O
         MVI   DYNDCBW+DCBRECFM-IHADCB,X'80'
         MVI   TSTRECFM,X'80'
         MVI   DSORG,DS1DSGPS      DSORG PS
         L     R0,@FMTS1ZE         GET DYNAMIC AREA SUBPOOL AND SIZE
         LR    R2,R0               COPY THIS SUBPOOL AND SIZE
         MVI   GETMNTRC,5          TRACK GETMAIN IN CASE OF FAILURE
         GETMAIN R,LV=(0)
         ST    R1,FMTAREA          POINT TO THIS AREA FROM @DATA
         USING @FMTAREA,R1
         ST    R2,FMTSIZE          SAVE SUBPOOL AND SIZE OF THIS AREA
         LA    R0,TRCTABLE
         ST    R0,TRCURSOR         SET CURRENT TRACE ENTRY
         ST    R0,TRCLIMIT
         LA    R0,TRCTBEND
         ST    R0,TRCBNDRY         SET END OF TRACE TABLE
         MVC   FMTFELS(BVSFELEN),BVSFELS
         MVC   FMTNAME,=C'**BRVS**'
         MVC   $DDNAME,=C'**BRVS**'
         LA    R14,FMTFELS+FELSIZE POINT PAST LOADED FEL
         ST    R14,FMTFELAD        INDICATE USED FELS
         DROP  R1                  @FMTAREA
         LR    R14,R5
         SR    R15,R15
         BR    R14
         SPACE
         DC    0F'0'
@FMTS1ZE DC    AL1(1),AL3($FMTLEN)
         SPACE
BVSFELS  DC    0D'0'               READY-TO-USE FEL TABLE FOR BRVS
*               SYMBOL-NAME  FLAGS TYPE LENGTH  COLUMNS OFFSET
         DC    CL8' DUMMY  ',X'80',C'X',AL2(20),AL2(40),AL2(0)
BVSFELEN EQU   *-BVSFELS
         SPACE
         LTORG
         DC    0H'0'
         SPACE
         DROP  R10,R11,R12         REVIEW
*                   DC    (((*-C-1)/N)*N+N+C-*)X'00'
*                 WHERE N IS BOUNDARY (I.E. 256, 4096, ...)
*                 AND C IS THE BEGINNING OF THE CSECT.
         DC    (((*-REVIEW-1)/256)*256+256+REVIEW-*)X'00'
         DC    0D'0'
         TITLE '  R E V I E W   -   P H A S E   2  '
************************************************************
*                                                          *
*         PHASE 2 INITIALIZATION                           *
*                                                          *
************************************************************
         SPACE
*
*         FROM THIS POINT ON, PROCESSING IS THE SAME
*         FOR BOTH DSNAME AND DDNAME OPTIONS.
*
*         $DSNAME  - CONTAINS THE FULLY QUALIFIED DSNAME,
*                    FROM THE USER OR FROM THE JFCB.
*         $MEMBER  - CONTAINS THE MEMBER NAME, IF SPECIFIED,
*                    FROM THE USER OR FROM THE JFCB.
*         $DDNAME  - CONTAINS THE DDNAME, FROM IKJDAIR OR
*                    FROM THE USER.
*         $UCBAD   - CONTAINS THE UCB ADDRESS,
*                    FROM THE TIOT ENTRY.
*         $VOLSER  - CONTAINS THE VOLUME, FROM THE UCB POINTED
*                    TO BY THE TIOT ENTRY.
*
*         IF THE USER SPECIFIED A DSNAME (DID NOT SPECIFY THE FILE
*         KEYWORD) THEN THE STALLOC BIT IS SET ON SO THE DDNAME
*         WILL BE UNALLOCATED WHEN THE COMMAND IS FINISHED WITH IT.
*
*         REVIEW2 IS NORMALLY GIVEN CONTROL WITH AMODE=24 WHICH
*         MAINTAINS COMPATIBILITY WITH NON-DFSMS OS VERSIONS
*         (BOTH IBM AND FUJITSU).  HOWEVER, IT IS GIVEN CONTROL
*         WITH AMODE=31 BY REVHFDIR WHEN HFS DATA IS TO BE REVIEWED.
*         NOTE THAT R13 SHOULD POINT TO AN RMODE=24 SAVE AREA FOR
*         THE BENEFIT OF ANY TSO COMMAND PROCESSOR INVOKED BY THE
*         TSO SUBCOMMAND OF REVIEW.
*
*         NOTE: AS OF RELEASE 43, THE REVIEW AND RFE PACKAGE IS
*         A PURE 31-BIT APPLICATION.
*
         EJECT
REVIEW2  RSECT
REVIEW2  AMODE 31
REVIEW2  RMODE 24
         ENTRY SEQDCB
         ENTRY PDSDCB
         AIF   (NOT &ENVBIG).DCBENTX
         ENTRY PDSDCB2
         ENTRY SEQDCBE
.DCBENTX ANOP
         ENTRY HEXTEST
         ENTRY HEXDATA
         ENTRY TABALPHA
         ENTRY SEARCHIT
         WXTRN REVSMF
         B     @REVIEW2-REVIEW2(,R15)
         DC    AL1(7),CL7'REVIEW2'
         AIF   (&ENV390).US1
         USING REVIEW2,R10,R11,R12,R3
         AGO   .US2
.US1     ANOP
         USING (REVIEW2,TABALPHA),R10,R11,R12,R3
.US2     ANOP
@REVIEW2 STM   R14,R12,12(R13)     SAVE REGISTERS
         LR    R10,R15             RESET BASE REGISTER
         LA    R15,1
         LA    R11,4095(R15,R10)   BASE
         LA    R12,4095(R15,R11)   BASE
         LA    R3,4095(R15,R12)    BASE
         LA    R2,SAVE2            CHAIN SAVE AREAS
         ST    R13,4(,R2)
         ST    R2,8(,R13)
         LR    R13,R2              USE LOCAL SAVE AREA
         SPACE
**********************************************************************
*                                                          *         *
*         PERFORM PHASE 2 INITIALIZATION                   *  GP@P6  *
*                                                          *  10/90  *
**********************************************************************
         SPACE
         OI    STATUS11,$11FS2     FLAG IN PHASE 2
         L     R5,INIT2ADR         LOAD SUBROUTINE ADDRESS
         BR    R5                  PERFORM INITIALIZATION
         SPACE
         USING IHADCB,R4
         SPACE
************************************************************
*                                                          *
*         READ ENOUGH RECORDS TO FILL HOLD AREA            *
*                                                          *
************************************************************
         SPACE
FILLHOLD ST    R14,HOLDR           SAVE RETURN ADDRESS
         L     R0,HOLDPTR
         L     R1,SAVHOLDL
         SR    R14,R14
         SR    R15,R15
         ICM   R15,8,BLANKS        LOAD BLANK PAD CHARACTER
         MVCL  R0,R14              FILL HOLD AREA WITH BLANKS
         L     R7,HOLDTOP          POINT TO HOLD AREA DIRECTORY
         LH    R8,PAGESIZE         NUMBER OF DATA LINES PER SCREEN
HILLOOP  DS    0H
         BAS   R14,GET
         NI    STATUS14,255-$14UP  RESET SCROLLING UP FLAG
         ICM   R14,15,COUNT        VERY FIRST RECORD?
         BNZ   HILLFILE            NO, DO NOT CHECK "MAGIC NUMBER"
         LTR   R1,R1               NULL RECORD OR END-OF-FILE?
         BNP   HILLFILE            YES, NO "MAGIC NUMBER" TO CHECK
         SR    R15,R15
         TM    TSTRECFM,X'40'      RDWS PRESENT?
         BZ    *+8                 NO
         LA    R15,4               YES
         LR    R0,R1               COPY RECORD LENGTH
         S     R0,KOUNT            SUBTRACT DATA READ
         CR    R0,R15              VERY FIRST TIME?
         BNE   HILLFILE            NO, DO NOT CHECK "MAGIC NUMBER"
         CLI   DATAKV+1,1          IS 'DATA' SPECIFIED?
         BE    HILLFILE            YES, SHOW RAW DATA
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    HILLFILE            YES, SKIP ZIP PROCESSING
         TM    MODE,MD_FMT         ALREADY BEEN THROUGH THIS?
         BO    HILLFILE            YES, SUCCESSFULLY TOO
         L     R5,UNZIPDAD         NO, LOOK AT "MAGIC NUMBER" FOR
         BR    R5                      POSSIBLE SPECIAL PROCESSING
HILLFILE BAS   R14,RECTODIR        ENTER RECORD INTO SCREEN DIRECTORY
         LTR   R1,R1               END-OF-FILE?
         BM    HILLED              YES, BRANCH
         LR    R1,R7               SAVE PTR TO MOST CURRENT ENTRY
         L     R7,DIRNXT(,R7)      POINT TO NEXT DIRECTORY ENTRY
         BCT   R8,HILLOOP
         LR    R7,R1               GET MOST CURRENT ENTRY
HILLED   DS    0H
         ST    R7,HOLDEND          SAVE LAST RECORD ENTRY
         TM    STATUS14,$14STAE    BRVS ESTAE ACTIVE?
         BNO   HILLEXIT            NO
         TM    FINDSW,FACT         FIND ACTIVE?
         BO    HILLEXIT            YES, LEAVE ESTAE
         ESTAE 0                   DEACTIVATE ESTAE
         NI    STATUS14,255-$14STAE
HILLEXIT L     R14,HOLDR
         BR    R14
         SPACE
RECTODIR ST    R14,READR           SAVE RETURN ADDRESS
         LA    R0,1                COMPUTE
         A     R0,COUNT             THE
         ST    R0,COUNT              RECORD NUMBER
         ST    R0,DIRNUM(,R7)      STORE THE RECORD NUMBER
         ST    R1,DIRLEN(,R7)      LENGTH IN DIRECTORY
         MVC   DIRTTR(4,R7),TTR    SAVE BLOCK ADDRESS
         NI    DIRNXT(R7),X'7F'    RESET RRDS EMPTY SLOT FLAG
         LTR   R1,R1               END-OF-FILE?
         BMR   R14                 YES, RETURN TO CALLER
         TM    STATUS17,$17PIX     ZOOMED-IN ON PIXELS?
         BO    DIVTODIR            YES
         TM    DEBLOCKS,X'80'      EMPTY RRDS SLOT?
         BNO   *+8                 NO
         OI    DIRNXT(R7),X'80'    YES, SET FLAG
         C     R1,SAVLRECL         IS RECORD LONGER THAN MAX?
         BNH   *+8                 NO, SKIP NEXT INSTR
         L     R1,SAVLRECL         YES, TRUNCATE TO MAX
         LR    R0,R2               ADDRESS TO MOVE FROM
         L     R14,DIRREC(,R7)     ADDRESS TO MOVE TO
         L     R15,SAVLRECL        LENGTH OF RECEIVING FIELD
         ICM   R1,8,BLANKS         PAD WITH BLANKS
         MVCL  R14,R0
         L     R14,READR           RESTORE RETURN ADDRESS
         CLI   DIRTTR+3(R7),0      CAN MORE DATA BE SQUEEZED IN?
         BNER  R14                 NO, RETURN TO CALLER
         TM    STATUS13,$13_L      PROCESSING PRE-LOADED DATA?
         BOR   R14                 YES, RETURN TO CALLER
         TM    $UCBAD,$NONDCB      USING A DCB FOR I/O?
         BNZR  R14                 NO, RETURN TO CALLER
         TM    STATUS,STOPEN       IS THE DCB OPEN?
         BZR   R14                 NO, RETURN TO CALLER
         CLI   DS1FMTID,X'F1'      LOOKING AT A DASD DATA SET?
         BLR   R14                 NO, RETURN TO CALLER
         MVC   DIRTTR+3(1,R7),$CONCAT  SHOW WHICH DATA SET
         BR    R14                 RETURN TO CALLER
DIVTODIR ST    R2,DIRREC(,R7)      POINT DIRECTLY TO DIV DATA
         BR    R14                 RETURN TO CALLER
         SPACE
************************************************************
*                                                          *
*         SET UP THE SCREEN HEADER PRIOR TO DISPLAY        *
*                                                          *
************************************************************
         SPACE
FILLSCR  NI    STATUS4,255-$4REFR  REFRESH NO LONGER REQUIRED
         NI    FINDSW,255-FACT     FIND IS NO LONGER ACTIVE
         L     R6,SCREENBF         POINT TO THE PRIMARY BUFFER
         L     R5,SHADOWBF         POINT TO THE SHADOW BUFFER
         LR    R0,R6               POINT TO PRIMARY BUFFER
         L     R1,SCREENSZ         GET SIZE OF PRIMARY BUFFER
         SR    R15,R15             ZERO SOURCE LENGTH
         ICM   R15,8,BLANKS        SET PAD CHARACTER
         MVCL  R0,R14              BLANK OUT PRIMARY BUFFER
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    FILLTOP             YES, NO DASHES ON TOP LINE
         MVI   0(R6),C'-'          SUPPLY SEED DASH
         L     R15,SCRNCOLS        GET SCREEN WIDTH
         BCTR  R15,0               DECREMENT FOR TARGET LENGTH
         BCTR  R15,0               DECREMENT FOR EXECUTE
         EX    R15,FILSTARS        CREATE A LINE OF DASHES
FILLTOP  MVI   0(R5),X'07'         SHOW IT IN WHITE
         MVC   1(255,R5),0(R5)
         MVI   0(R6),FLDOUTHI      HIGH INTENSITY PROTECTED FIELD
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BZ    SHOWPOSI            NO
         MVC   1(14,R6),SCRHPRM    HELP MEMBER PROMPT
         MVI   15(R6),FLDINHI      HIGH INTENSITY INPUT FIELD
         MVC   16(8,R6),$MEMBER    SHOW THE HELP MEMBER NAME
         MVI   16(R5),X'32'        MEMBER NAME IN UNDERSCORE RED
         MVC   17(7,R5),16(R5)
         MVI   24(R6),FLDOUTHI     HIGH INTENSITY PROTECTED FIELD
         MVC   25(13,R6),SCRSBCM   SUBCOMMAND PROMPT
         MVI   38(R6),FLDINHI      HIGH INTENSITY INPUT FIELD
         MVC   39(8,R6),$SUBCOM    SHOW THE SUBCOMMAND NAME
         MVI   39(R5),X'32'        SUBCOMMAND NAME IN UNDERSCORE RED
         MVC   40(7,R5),39(R5)
         MVI   47(R6),FLDOUTHI     HIGH INTENSITY PROTECTED FIELD
SHOWPOSI A     R6,SCRNCOLS         POINT TO THE SECOND SCREEN LINE
         A     R5,SCRNCOLS         POINT TO THE SECOND SCREEN LINE
         MVC   1(254,R5),0(R5)     PROPAGATE WHITE FOR SECOND LINE
         L     R15,=A(FMTCOLS)     GET ROUTINE ADDRESS
         BASR  R14,R15             WORK OUT COLUMN RANGES AND FORMATS
         LR    R14,R6              POINT TO THE SECOND SCREEN LINE
         SH    R14,HW10            FORMAT LAST COLUMN OR RECORD COUNT
         MVC   1(9,R14),SCRMASK    MOVE IN EDIT MASK
         LA    R1,9(,R14)          POINT TO LAST DIGIT IN CASE OF ZERO
         ICM   R15,15,AMNLR        GET NUMBER OF RECORDS (ICF)
         BNZ   ISAMNLR             HAVE NON-ZERO COUNTER
         TM    STATUS13,$13_L      PROCESSING PRE-LOADED DATA?
         BZ    NOAMNLR             NO
         ICM   R15,15,DIVHICNT     GET NUMBER OF RECORDS (DIV)
         BNP   NOAMNLR             IGNORE ZERO COUNTER
         LA    R15,1(,R15)         COUNT BOTTOM OF DATA LINE AS WELL
ISAMNLR  CVD   R15,DOUBLE          DISPLAY OSTENSIBLE RECORD CONTENTS
         EDMK  0(10,R14),DOUBLE+3
         SH    R1,HW4
         MVC   0(4,R1),SCROF       ' OF '
         B     FILLCOLX            DO NOT SHOW FIRST AND LAST COLUMNS
NOAMNLR  DS    0H                  SHOW FIRST AND LAST COLUMNS
         CVD   R0,DOUBLE           USE RIGHT-MOST COLUMN FROM FMTCOLS
         EDMK  0(10,R14),DOUBLE+3
         BCTR  R1,0
         MVI   0(R1),C' '
         LR    R14,R1
         SH    R14,HW10            FORMAT FIRST COLUMN NUMBER
         MVC   1(9,R14),SCRMASK    MOVE IN EDIT MASK
         LA    R1,9(,R14)          POINT TO LAST DIGIT IN CASE OF ZERO
         LA    R0,1
         A     R0,OFFSET           GET NUMBER OF FIRST COLUMN
         CVD   R0,DOUBLE
         EDMK  0(10,R14),DOUBLE+3
         SH    R1,HW5
         MVC   0(5,R1),SCRCOL      ' COL '
FILLCOLX DS    0H
         LR    R14,R1
         SH    R14,HW10            FORMAT FIRST LINE NUMBER
         MVC   1(9,R14),SCRMASK    MOVE IN EDIT MASK
         LA    R1,9(,R14)          POINT TO LAST DIGIT IN CASE OF ZERO
         L     R7,HOLDTOP
         L     R0,DIRNUM(,R7)      GET NUMBER OF FIRST LINE
         CVD   R0,DOUBLE
         EDMK  0(10,R14),DOUBLE+3
         CH    R0,HW3              NEAR THE TOP OF THE WHOLE THING?
         BH    *+8                 PERHAPS NOT
*                                  YES, RESET ASSEMBLER LISTING FLAGS
         NI    STATUS12,255-$12ASM-$12CNT-$12QOT-$12CMT
         SH    R1,HW6
         MVC   0(6,R1),SCRLINE     ' LINE '
         SPACE
         L     R14,SCRNCOLS        GET SCREEN WIDTH
         BCTR  R14,0               DECREMENT FOR EXECUTE
         LR    R15,R6              POINT TO SECOND LINE
         MVI   0(R6),X'00'         SET SEED FOR NULLS
         EX    R14,REVERSPF        RESET SECOND LINE
         LR    R15,R5              POINT TO SECOND LINE SHADOW
         MVI   0(R5),X'32'         SET SEED FOR UNDERSCORE RED
         EX    R14,REVERSPF        SET SECOND LINE TO UNDERSCORE RED
         A     R15,SCRNCOLS        POINT TO THIRD SCREEN LINE SHADOW
         LA    R0,SCRRGEL          GET BYTE COUNT TO BACK UP
         SR    R15,R0              POINT TO WHERE SCROLL PROMPT GOES
         MVI   0(R15),X'07'        CHANGE PROMPT TO WHITE
         MVC   1(SCRRGEIO-1,R15),0(R15)
         S     R15,SCREENSZ        POINT BACK TO PRIMARY BUFFER
         MVC   0(SCRRGEL,R15),SCRRGE     LOAD SCROLL AMOUNT PROMPT
         TM    STATUS4,$4CSR       CURSOR SCROLLING ACTIVE?
         BO    GOTRANGE            YES, DON'T SHOW NUMERICS
         MVC   SCRRGEIO(2,R15),=C'PG'
         TM    STATUS4,$4PAGE      FULL PAGE SCROLLING ACTIVE?
         BO    GOTRANGE            YES, DON'T SHOW NUMERICS
         MVC   SCRRGEIO(2,R15),=C'HF'
         TM    STATUS4,$4HALF      HALF PAGE SCROLLING ACTIVE?
         BO    GOTRANGE            YES, DON'T SHOW NUMERICS
         L     R0,SCROLL           SCROLL AMOUNT
         CVD   R0,DOUBLE
         OI    DOUBLE+7,X'0F'      DISPLAY SCROLL AMOUNT
         UNPK  SCRRGEIO(2,R15),DOUBLE+6(2)
GOTRANGE MVI   0(R5),X'07'         SET COMMAND PROMPT SEED FOR WHITE
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BZ    FILLCMND            NO, MAKE SECOND LINE FOR REVIEW
         LR    R1,R6               YES, POINT TO SECOND LINE
         SH    R1,HW32             BACKUP TO MESSAGE AREA
         MVC   MSGDSN(32),0(R1)    SAVE LINE AND COLUMN LOCATION
         MVC   0(SCRINPTL,R6),SCRINPT   LOAD INPUT PROMPT
         MVC   1(SCRINPTL-1,R5),0(R5)   COLOUR IT WHITE
         B     FILLINE3
FILLCMND MVC   0(SCRCMDL,R6),SCRCMD     LOAD COMMAND PROMPT
         MVC   1(SCRCMDL-1,R5),0(R5)    COLOUR IT WHITE
FILLINE3 A     R6,SCRNCOLS         POINT TO THE THIRD SCREEN LINE
         SPACE
************************************************************
*                                                          *
*         SET UP THE COLUMN HEADER PRIOR TO DISPLAY        *
*                                                          *
************************************************************
         SPACE
*               IT WOULD BE MORE EFFICIENT TO DO MOST OF THIS WORK
*               ONLY WHEN THE OFFSET IS INITIALIZED OR CHANGED
*               AND SAVE THE RESULTS.
         SPACE
         MVI   LINKAREA,2          RESET TEMP COLOUR FLAG
         BAS   R14,COLRHIGH        SET NEW DISPLAY COLOUR
         L     R1,OFFSET
         TM    MODE,MD_HEX         HEX MODE?
         BO    HEXCOLNM            YES
         SPACE
         LTR   R1,R1               IS OFFSET ZERO?
         BNZ   COLXX1              NO
         MVC   0(8,R6),COL1LBL     YES, SPECIAL CASE, 1
COLXX1   SR    R0,R0
         LA    R14,10
         DR    R0,R14
         SR    R14,R0              10 MINUS REMAINDER
         LR    R0,R14
         L     R1,OFFSET
         AR    R1,R0               ADD (0 TO 9) TO OFFSET
         LR    R14,R6
         BCTR  R0,0                SUBTRACT 1 (-1 FOR 0 IS OK)
         TM    STATUS16,$16XX      HEXX MODE?
         BZ    COLXX2              NO
         SLL   R0,2                YES, QUADRUPLE IT
COLXX2   ALR   R14,R0              ADD (-1 TO 8) TO LINE
*                                  LINE+8 FOR OFFSET 1
*                                  LINE+7 FOR OFFSET 2
*                                  LINE+6 FOR OFFSET 3
*                                  LINE+0 FOR OFFSET 9
         L     R0,SCRNCOLS
         TM    STATUS16,$16XX      HEXX MODE?
         BZ    COLXX3              NO
         AH    R0,HW40             YES, COUNTERACT TRUNCATION
         SRA   R0,2                QUARTER IT
COLXX3   CVD   R0,DOUBLE
         SRP   DOUBLE,64-1,0       DIVIDE BY 10
         CVB   R0,DOUBLE           GET REASONABLE LOOP CONTROL LIMIT
COLNUML  C     R1,OFFEND
         BH    COLNUMX
         CVD   R1,DOUBLE
         OI    DOUBLE+7,X'0F'      PREPARE FOR UNPACK
         UNPK  COLNUM,DOUBLE       GET 6 DECIMALS
         CLI   COLNUM,C'0'         LEADING ZERO?
         BH    COLNUMN             NO, EITHER LRECL=X OR LBI & RECFM=U
         MVC   COLNUM,=X'402020202120'
         ED    COLNUM,DOUBLE+5     GET UP TO 5 DECIMALS
         CH    R1,HW10000          OVER 9999?
         BNL   COLNUMN             YES, DO NOT SHIFT DIGITS
         MVC   COLNUM(5),COLNUM+1  NO, SHIFT DIGITS LEFT 1 PLACE
         MVI   COLNUM+5,C' '
         CH    R1,HW100            OVER 99?
         BNL   COLNUMN             YES, NO MORE SHIFTING
         MVC   COLNUM(5),COLNUM+1  NO, SHIFT DIGITS LEFT 1 PLACE AGAIN
         MVI   COLNUM+5,C' '
COLNUMN  DS    0H
         SH    R14,HW3
         CR    R14,R6              ROOM TO LOAD 6 DIGITS?
         BL    *+10                NO
         MVC   0(6,R14),COLNUM     YES
         LA    R14,1(,R14)
         CR    R14,R6              ROOM TO LOAD 5 DIGITS?
         BL    *+10                NO
         MVC   0(5,R14),COLNUM+1   YES
         LA    R15,1(,R14)
         CR    R15,R6              ROOM TO LOAD 4 DIGITS?
         BL    COLXRX              NO ROOM EVEN FOR 4 DIGITS
         MVC   1(4,R14),COLNUM+2   THERE IS ROOM FOR 4 DIGITS
         TM    STATUS16,$16XR      HEXR MODE?
         BZ    COLXRX              NO
         LR    R15,R14             YES, POINT TO NUMBER LOCATION
         SR    R15,R6              GET LINE OFFSET
         MH    R15,HW3             TRIPLE THIS OFFSET
         L     R2,SCRNCOLS         GET THE SCREEN WIDTH
         SRL   R2,2                QUARTER IT
         AR    R15,R2              GET TARGET LINE OFFSET
         AR    R15,R6              POINT TO HEX AREA TARGET
         MVC   5(6,R15),COLNUM     REPEAT COLUMN NUMBER IN HEX AREA
COLXRX   LA    R14,12(,R14)
         TM    STATUS16,$16XX      HEXX MODE?
         BZ    *+8                 NO
         LA    R14,3*10(,R14)      QUADRUPLE JUMP SIZE
         LA    R1,10(,R1)
         BCT   R0,COLNUML
COLNUMX  DS    0H                  COLUMN LABELS COMPLETE
         A     R6,SCRNCOLS         POINT TO RULER LINE
         MVI   0(R6),C'-'
         MVC   1(19,R6),0(R6)      GET 20 DASHES
         L     R1,OFFSET
         SR    R0,R0
         LA    R14,5
         DR    R0,R14              DIVIDE OFFSET BY 5
         SR    R14,R0              GET 5 MINUS REMAINDER
         BCTR  R14,0               CONVERT COLUMN TO OFFSET
         TM    STATUS16,$16XX      HEXX MODE?
         BZ    MARKX1              NO
         SLL   R14,2               YES, QUADRUPLE IT
MARKX1   ALR   R14,R6
         MVI   0(R14),C'+'         MARK FIRST FIFTH COLUMN
         TM    STATUS16,$16XX      HEXX MODE?
         BO    MARKX2              YES
         MVI   5(R14),C'+'         NO, 4 5-BYTE PATTERNS IN 20 BYTES
         MVI   10(R14),C'+'
         MVI   15(R14),C'+'
MARKX2   MVC   20(236,R6),0(R6)    REPEAT 20-BYTE PATTERN
         L     R1,OFFEND
         S     R1,OFFSET
         TM    STATUS16,$16XX      HEXX MODE?
         BZ    MARKX3              NO
         SLL   R1,2                YES, QUADRUPLE IT
MARKX3   ALR   R1,R6
         MVI   0(R1),C' '
         MVC   1(255,R1),0(R1)
         ICM   R1,15,OFFSET        IS OFFSET ZERO?
         BNZ   *+8                 NO
         MVI   0(R6),C'+'          YES, SPECIAL CASE
         SR    R1,R1
         TM    STATUS16,$16RDW     DISPLAYING RDWS?
         BZ    *+8                 NO
         LA    R1,4                YES
         S     R1,OFFSET
         BM    MARKCCOK            SCROLLED RIGHT PAST CC AND RDW
         AR    R1,R6               POINT TO POSITION ON SCREEN
         TM    TSTRECFM,X'06'      ANY CARRIAGE CONTROL?
         BZ    MARKCCOK            NO, A '+' IS GOOD
         MVI   0(R1),C'A'          YES, INDICATE ANSI
         TM    TSTRECFM,X'04'      IS IT ANSI?
         BO    MARKCCOK            YES, GOOD GUESS
         MVI   0(R1),C'M'          NO, MACHINE CODE
         B     MARKCCOK
         SPACE
MARKCCOK TM    STATUS16,$16XR      HEXR MODE?
         BZ    COL1OK              NO, GO MAKE KEY RULER INDICATIONS
         L     R14,SCRNCOLS        YES, GET SCREEN WIDTH
         SRL   R14,2               QUARTER IT
         LA    R15,0(R14,R6)       POINT TO LAST 3/4 OF SCREEN LINE
         LR    R1,R6               POINT TO SCREEN LINE
MARKXRLP MVC   1(1,R15),0(R1)      SET HEX COLUMN RULER INDICATION
         MVC   2(1,R15),0(R1)      SET HEX COLUMN RULER INDICATION
         LA    R1,1(,R1)           POINT TO NEXT CHAR RULER CHAR
         LA    R15,3(,R15)         POINT TO NEXT HEX RULER SLOT
         BCT   R14,MARKXRLP
         B     FILLDATA            SKIP KEY INDICATORS WHEN HEXR ON
         SPACE
*                                  HEX MODE HEADER CONSTRUCTION
HEXCOLNM LTR   R1,R1               IS OFFSET ZERO?
         BNZ   *+10                NO
         MVC   1(8,R6),COL1LBL     YES, SPECIAL CASE, 1
         SR    R0,R0
         LA    R14,5
         DR    R0,R14
         SR    R14,R0              5 MINUS REMAINDER
         LTR   R0,R0               WAS REMAINDER 0?
         BZ    *+6                 YES, USE 0, NOT 5
         LR    R0,R14
*
         LR    R14,R6
         L     R1,OFFSET
         AR    R1,R0               ADD (0 TO 4) TO OFFSET
         SLL   R0,1                MULTIPLY BY 2
         AR    R14,R0              ADD (0 TO 8) TO LINE
         BCTR  R14,0               START AT LINE-1 FOR OFFSET 0
*                                  LINE+8 FOR OFFSET 1
*                                  LINE+6 FOR OFFSET 2
*                                  LINE+4 FOR OFFSET 3
*                                  LINE+2 FOR OFFSET 4
*                                  LINE+0 FOR OFFSET 5
         LA    R0,17
COLNUMLX C     R1,RECSIZE
         BH    COLNUMXX
         CVD   R1,DOUBLE
         OI    DOUBLE+7,X'0F'      PREPARE FOR UNPACK
         UNPK  COLNUM,DOUBLE       GET 6 DECIMALS
         CLI   COLNUM,C'0'         LEADING ZERO?
         BH    COLNUMNX            NO, EITHER LRECL=X OR LBI & RECFM=U
         MVC   COLNUM,=X'402020202120'
         ED    COLNUM,DOUBLE+5     GET UP TO 5 DECIMALS
         CH    R1,HW10000          OVER 9999?
         BNL   COLNUMNX            YES, DO NOT SHIFT DIGITS
         MVC   COLNUM(5),COLNUM+1  NO, SHIFT DIGITS LEFT 1 PLACE
         MVI   COLNUM+5,C' '
         CH    R1,HW100            OVER 99?
         BNL   COLNUMNX            YES, NO MORE SHIFTING
         MVC   COLNUM(5),COLNUM+1  NO, SHIFT DIGITS LEFT 1 PLACE AGAIN
         MVI   COLNUM+5,C' '
COLNUMNX DS    0H
         SH    R14,HW3
         CR    R14,R6              ROOM TO SHOW 6 DIGITS?
         BL    *+10                NO
         MVC   0(6,R14),COLNUM     YES
         LA    R14,1(,R14)
         CR    R14,R6              ROOM TO SHOW 5 DIGITS?
         BL    *+10                NO
         MVC   0(5,R14),COLNUM+1   YES
         LA    R14,12(,R14)
         LA    R1,5(,R1)
         BCT   R0,COLNUMLX
COLNUMXX DS    0H                  COLUMN LABELS COMPLETE
         A     R6,SCRNCOLS         POINT TO RULER LINE
         L     R1,OFFSET
         SR    R0,R0
         LA    R14,5
         DR    R0,R14
         SLL   R0,1                MULTIPLY BY 2
         LR    R1,R0
         LA    R14,MARKSX(R1)
         MVC   0(10,R6),0(R14)
         MVC   10(246,R6),0(R6)
         L     R1,RECSIZE
         S     R1,OFFSET
         SLL   R1,1
         C     R1,SCRNCOLS
         BNH   MARKXX
         L     R1,SCRNCOLS
MARKXX   ALR   R1,R6
         MVI   0(R1),C' '
         MVC   1(255,R1),0(R1)
         ICM   R1,15,OFFSET        IS OFFSET ZERO?
         BNZ   *+10                NO
         MVC   0(2,R6),MARKSX+8    YES, SPECIAL CASE
         SR    R1,R1
         TM    STATUS16,$16RDW     DISPLAYING RDWS?
         BZ    *+8                 NO
         LA    R1,4                YES
         S     R1,OFFSET
         BM    COL1OK              SCROLLED RIGHT PAST CC AND RDW
         AR    R1,R1               GET HEX MODE SCREEN OFFSET
         AR    R1,R6               POINT TO POSITION ON SCREEN
         TM    TSTRECFM,X'06'      ANY CARRIAGE CONTROL?
         BZ    COL1OK              NO, A '/\' IS GOOD
         MVC   0(2,R1),=C'AA'      YES, INDICATE ANSI
         TM    TSTRECFM,X'04'      IS IT ANSI?
         BO    COL1OK              YES, GOOD GUESS
         MVC   0(2,R1),=C'MM'      NO, MACHINE CODE
COL1OK   LH    R1,AMKLN
         LTR   R1,R1               ANY RECORD KEYS?
         BZ    FILLDATA            NO
         TM    $UCBAD,$RRDS        YES, BUT IS THIS A VRRDS?
         BO    FILLDATA            YES, SO NO REAL KEYS
         LH    R1,AMRKP            GET RELATIVE KEY POSITION
         S     R1,OFFSET           GET START OFFSET ON SCREEN
         BM    RKE                 NOT ON SCREEN, DO KEY END STUFF
         TM    MODE,MD_HEX         HEX MODE?
         BZ    *+8                 NO
         SLL   R1,1                YES, DOUBLE IT
         TM    STATUS16,$16XX      HEXX MODE?
         BZ    *+8                 NO
         SLL   R1,2                YES, QUADRUPLE IT
         C     R1,SCRNCOLS         PAST SCREEN?
         BNL   FILLDATA            YES, WHOLE KEY IS RIGHT OF SCREEN
         AR    R6,R1               NO, POINT TO IT
         LR    R15,R6              COPY THIS ADDRESS
         TM    STATUS16,$16RDW     SHOWING RDWS?
         BO    RKSE                YES
         MVI   0(R15),C'K'         DENOTE FIRST COLUMN IN KEY
         TM    MODE,MD_HEX         HEX MODE?
         BZ    RKSE                NO
         MVI   1(R15),C'S'         YES, DENOTE FIRST DATA BYTE IN KEY
         CLC   AMKLN,HW1           SINGLE BYTE KEY?
         BNE   RKSE                NO, SHOW 'KS'
         MVI   1(R15),C'K'         YES, SHOW 'KK'
RKSE     BAS   R14,COLRWARN        SET RED AS NEW DISPLAY COLOUR
         SR    R6,R1               POINT BACK TO CURRENT LINE START
         TM    STATUS16,$16XX      HEXX MODE?
         BZ    *+8                 NO
         SRL   R1,2                YES, QUARTER IT
         TM    MODE,MD_HEX         HEX MODE?
         BZ    RKE                 NO
         SRL   R1,1                YES, HALVE IT
RKE      AH    R1,AMKLN            GET OFFSET PAST END OF KEY
         BNP   FILLDATA            WHOLE KEY IS LEFT OF SCREEN
         TM    MODE,MD_HEX         HEX MODE?
         BZ    *+8                 NO
         SLL   R1,1                YES, DOUBLE IT
         TM    STATUS16,$16XX      HEXX MODE?
         BZ    *+8                 NO
         SLL   R1,2                YES, QUADRUPLE IT
         LR    R15,R6              COPY RULER LINE ADDRESS
         BAS   R14,COLRWARN        NO, ENSURE IN NOTEWORTHY COLOUR
         LA    R15,0(R1,R6)        POINT PAST LAST KEY COLUMN
         C     R1,SCRNCOLS         PAST SCREEN?
         BH    FILLDATA            YES, KEY END IS RIGHT OF SCREEN
         CLC   AMKLN,HW1           SINGLE BYTE KEY?
         BE    RKEE                YES, "K" INDICATOR ALREADY DONE
         TM    STATUS16,$16RDW     SHOWING RDWS?
         BO    RKEE                YES
         BCTR  R15,0               POINT TO LAST KEY COLUMN MARKER
         MVI   0(R15),C'K'         DENOTE LAST COLUMN IN KEY
         TM    MODE,MD_HEX         HEX MODE?
         BZ    RKEE                NO
         BCTR  R15,0               YES, TWO COLUMNS PER BYTE
         MVC   0(2,R15),=C'KE'     DENOTE LAST BYTE IN KEY
RKEE     C     R1,SCRNCOLS         AT THE LAST SCREEN COLUMN?
         BE    FILLDATA            YES, DO NOT BOTHER RESETING COLOUR
         AR    R6,R1               NO, POINT PAST LAST KEY COLUMN
         BAS   R14,COLRHIGH        SET NEW DISPLAY COLOUR
         SR    R6,R1               POINT BACK TO CURRENT LINE START
*                                  END OF RULER FORMATTING CODE
FILLDATA A     R6,SCRNCOLS         POINT TO FILE DATA SCREEN AREA
         MVI   0(R6),C' '          CLEAR EXCESS RULER
         MVC   1(175,R6),0(R6)
         SPACE
************************************************************
*                                                          *
*         FILL IN THE DATA AREA OF THE SCREEN              *
*                                                          *
************************************************************
         SPACE
         LH    R8,PAGESIZE         NUMBER OF DATA LINES
FILLOOP  DS    0H
         LM    R1,R2,DIRLEN(R7)    GET LENGTH AND ADDRESS
         LTR   R1,R1               END-OF-FILE?
         BM    FILBOT              YES
         BZ    FILNUL              BRANCH IF R1 ZERO
         TM    TSTRECFM,X'40'      DOES RECORD START WITH AN RDW?
         BZ    FILLNOTV            NO
         TM    STATUS16,$16RDW     YES, CAN IT BE DISPLAYED?
         BO    FILLNOTV            YES, TREAT IT AS DATA
         SH    R1,HW4              NO, REDUCE RECORD LENGTH
         AH    R2,HW4              ADJUST RECORD DATA ADDRESS
FILLNOTV TM    MODE,MD_FMT         IS DSECT FORMATTING ON?
         BO    CALLFMT             YES, BRANCH
         TM    MODE,MD_SMF         IS SMF FORMATTING ON?
         BO    CALLSMF             YES, BRANCH
         TM    MODE,MD_EREP        IS LOGREC FORMATTING ON?
         BO    CALLEREP            YES, BRANCH
FMTNOTON TM    MODE,MD_HEX
         BO    FILLHEX
         IC    R0,CHRCOLOR         LOAD CHARACTER COLOUR (GREEN)
         L     R15,=A(COLORMSG)    POINT TO MESSAGE COLOURING ROUTINE
         BASR  R14,R15             MAYBE JAZZ UP SYSOUT MESSAGES
         BAS   R14,COLOURSW        SET NEW DISPLAY COLOUR
         L     R15,=A(COLORASM)    POINT TO LISTING COLOURING ROUTINE
         BASR  R14,R15             MAYBE JAZZ UP ASSEMBLER LISTING
         S     R1,OFFSET           IS OFFSET BEYOND END OF RECORD?
         BNP   FILLNEXT            YES, LEAVE LINE BLANK
         A     R2,OFFSET
         C     R1,SCRNCOLS         MAXIMUM DATA IS ONE LINE'S WORTH
         BNH   *+8
         L     R1,SCRNCOLS
         BCTR  R1,0
         LR    R15,R6              SAVE LINE ADDRESS
         TM    STATUS17,$17PIX     PIXEL CLOSE-UP DATA?
         BNO   *+8                 NO
         A     R6,SCREENSZ         YES, LOAD SHADOW INSTEAD
         EX    R1,LOADCHRS         LOAD CHARACTERS INTO DISPLAY LINE
         LR    R6,R15              RESTORE LINE ADDRESS
         TM    MODE,MD_ASCII       IN ASCII MODE?
         BZ    AFTER103            NO, BRANCH TO AFTER XLATE
         LA    R0,1(,R1)           YES, GET LENGTH TO TRANSLATE
         LR    R1,R6               POINT TO ASCII DATA
         XLATE (1),(0),TO=E        PERFORM TRANSLATION
AFTER103 DS    0H                  FINISHED WITH SVC 103
         L     R1,SCRNCOLS
         BCTR  R1,0
         MVI   PERIODS+X'1C',X'1C' SHOW DUP CHARACTER
         MVI   PERIODS+X'1E',X'1E' SHOW FIELD MARK CHARACTER
         EX    R1,TRPERIOD         REMOVE UNDISPLAYABLE CODE POINTS
         MVC   PERIODS+X'1C'(3),PERIODS+X'1B'
         TM    STATUS16,$16XX      SHOWING HEX WITH CHARACTERS?
         BO    FILLHEXX            YES
         TM    STATUS4,$4MSG31     FIND COMMAND ISSUED?
         BNO   FILLCHAR            NO
         CLC   FNDNUM,DIRNUM(R7)   FOUND IN THIS RECORD?
         BNE   FILLCHAR            NO
         L     R1,FNDOFF           YES, GET OFFSET OF SEARCH STRING
         S     R1,OFFSET           GET SCREEN LINE OFFSET OF STRING
         BM    FILLCHAR            SMF TYPE BYTE NOT ON SCREEN
         LA    R15,0(R1,R6)        POINT TO FIRST CHARACTER
         S     R15,SCREENBF        GET OFFSET INTO PRIMARY BUFFER
         LA    R0,1                CONVERT OFFSET TO POSITION
         AR    R0,R15              GET CURSOR POSITION ON SCREEN
         S     R0,SCRNCOLS
         S     R0,SCRNCOLS         GET POSITION INTO ISPF DYNAMIC AREA
         ST    R0,REVPOS           SET CURSOR POSITION
         MVC   REVCSR,REVBUFNM     SET CURSOR FIELD
         A     R15,SHADOWBF        POINT TO SPOT IN SHADOW BUFFER
         LH    R1,STRINGL          GET SEARCH STRING LENGTH CODE
         LA    R1,1(,R1)           GET SEARCH STRING LENGTH
CHRSPFLP OI    0(R15),X'26'        USE REVERSE VIDEO YELLOW
         LA    R15,1(,R15)         POINT TO NEXT SHADOW BYTE
         BCT   R1,CHRSPFLP
FILLCHAR L     R15,APLEPADR        GET APL ROUTINE ADDRESS
         BR    R15                 INVOKE IT
         SPACE
LOADCHRS MVC   0(0,R6),0(R2)       <<< EXECUTED >>>
COPYCHRS MVC   0(0,R14),0(R6)      <<< EXECUTED >>>
REVERSPF MVC   1(0,R15),0(R15)     <<< EXECUTED >>>
TRPERIOD TR    0(0,R6),PERIODS     <<< EXECUTED >>>
         SPACE
**********************************************************************
*                                                          *         *
*         FORMAT AND DISPLAY HEXADECIMAL OF CHARACTERS     *  R46.8  *
*                                                          * JAN2017 *
**********************************************************************
         SPACE
CHK4HEXR DS    0H                  HANDLAPL RETURNS TO HERE
         TM    STATUS16,$16XR      NEED TO SHOW SOME HEX NOW?
         BZ    FILLNEXT            NO, LINE NOW READY
         L     R14,SCRNCOLS        GET SCREEN WIDTH
         LR    R1,R14              COPY SCREEN WIDTH
         SRL   R14,2               QUARTER IT
         LA    R15,0(R14,R6)       POINT TO THE LAST 3/4 OF THE LINE
         SR    R1,R14              GET 3/4 OF SCREEN WIDTH
         BCTR  R1,0                GET TARGET LENGTH
         BCTR  R1,0                DECREMENT FOR EXECUTE
         MVI   0(R15),C' '
         EX    R1,REVERSPF         BLANK LAST 3/4 OF SCREEN LINE
         A     R15,SCREENSZ        POINT TO ITS SHADOW
         MVC   0(1,R15),HEXCOLOR
         EX    R1,REVERSPF         COLOUR IT FOR HEXADECIMAL
         S     R15,SCREENSZ        POINT TO BACK TO PRIMARY BUFFER
         LR    R2,R6               POINT TO SCREEN LINE
         A     R2,SCREENSZ         POINT TO SCREEN LINE'S SHADOW
         LM    R0,R1,DIRLEN(R7)    GET LENGTH AND ADDRESS OF RECORD
         TM    TSTRECFM,X'40'      DOES RECORD START WITH AN RDW?
         BZ    HEXRNOTV            NO
         TM    STATUS16,$16RDW     YES, CAN IT BE DISPLAYED?
         BO    HEXRNOTV            YES, TREAT IT AS DATA
         SH    R0,HW4              NO, REDUCE RECORD LENGTH
         AH    R1,HW4              ADJUST RECORD DATA ADDRESS
HEXRNOTV TM    MODE,MD_FMT         IS DSECT FORMATTING ON?
         MVI   DOUBLE+7,0          FLAG NO REVERSE VIDEO YET
         A     R1,OFFSET           POINT TO DATA ON SHOW
         S     R0,OFFSET           GET RECORD LENGTH TO SHOW
         BNP   FILLNEXT            SHOULD NOT HAPPEN BUT JUST IN CASE
         CR    R0,R14              MORE THAN A LINE CAN SHOW?
         BNH   HEXRLINE            NO
         LR    R0,R14              YES, REDUCE TO MAXIMUM
HEXRLINE LR    R14,R15             POINT TO FIRST HEX UNPACK SLOT
         A     R14,SCREENSZ        POINT TO ITS SHADOW
HEXRLNLP MVC   DOUBLE(1),0(R1)     COPY RECORD'S DATA BYTE SO NO S0C4
         UNPK  1(3,R15),DOUBLE(2)  UNPACK IT ON SCREEN LINE
         TR    1(2,R15),HEXTAB-240 DISPLAY HEX DIGITS
         MVI   3(R15),C' '         TIDY UP
         TM    DOUBLE,X'FF'-C' '   IS BYTE A BLANK OR A NULL?
         BNZ   HEXRGLYF            NO, IT HAS A "GLYPH"
         MVI   1(R15),C'.'         TRY FOR NULL
         CLI   DOUBLE,X'00'        CORRECT?
         BE    *+8                 YES
         MVI   1(R15),C'_'         NO, IT'S A BLANK
         MVC   2(1,R15),1(R15)     REPLACE HEX DIGITS FOR CONTRAST
HEXRGLYF TM    0(R2),X'20'         IS CHARACTER IN REVERSE VIDEO?
         BZ    HEXRVIDO            NO
         OC    0(1,R14),DOUBLE+7   REVERSE FIRST BLANK IF NECESSARY
         OI    1(R14),X'20'        SHOW HEX IN REVERSE VIDEO
         OI    2(R14),X'20'        SHOW HEX IN REVERSE VIDEO
         MVI   DOUBLE+7,X'20'      FLAG DID DO FIRST REVERSE VIDEO
HEXRVIDO LA    R1,1(,R1)           POINT TO NEXT DATA BYTE IN RECORD
         LA    R2,1(,R2)           POINT TO NEXT SHADOW BUFFER BYTE
         LA    R15,3(,R15)         POINT TO NEXT HEX DISPLAY SLOT
         LA    R14,3(,R14)         POINT TO ITS SHADOW
         BCT   R0,HEXRLNLP         PROCESS NEXT DATA BYTE IN RECORD
         B     FILLNEXT            LINE NOW READY
         SPACE
**********************************************************************
*                                                          *         *
*         CONDITIONALLY SWITCH DISPLAY COLOUR              *  GP@P6  *
*                                                          *  08/92  *
**********************************************************************
         SPACE
COLRHIGH DS    0H                  SET HIGHLIGHTING COLOUR
         LA    R0,6                YELLOW FOR FIRST PREFERENCE
         CLI   ACTCOLOR,6          DATA DISPLAYED IN YELLOW?
         BNE   COLOURSW            NO, SO YELLOW IS DIFFERENT
         LA    R0,5                YES, USE TURQUOISE INSTEAD
         B     COLOURSW            GO SWITCH COLOUR IF APPROPRIATE
         SPACE
COLRWARN DS    0H                  SET WARNING DATA COLOUR
         LA    R0,2                RED FOR FIRST PREFERENCE
         CLI   ACTCOLOR,2          DATA DISPLAYED IN RED?
         BNE   COLOURSW            NO, SO RED IS DIFFERENT
         LA    R0,3                YES, USE PINK INSTEAD
         B     COLOURSW            GO SWITCH COLOUR IF APPROPRIATE
         SPACE
COLRINFO DS    0H                  SET INFORMATION DATA COLOUR
         LA    R0,1                BLUE FOR FIRST PREFERENCE
         CLI   ACTCOLOR,1          DATA DISPLAYED IN BLUE?
         BNE   COLOURSW            NO, SO BLUE IS DIFFERENT
         LA    R0,4                YES, USE GREEN INSTEAD
*        B     COLOURSW            GO SWITCH COLOUR IF APPROPRIATE
         SPACE
COLOURSW DS    0H
         CLM   R0,1,LINKAREA       CHECK TEMPORARY COLOUR CODE FLAG
         BER   R14                 ALREADY RIGHT COLOUR SO EXIT
         STC   R0,LINKAREA         DIFFERENT SO REMEMBER NEW COLOUR
         STM   R14,R12,12(R13)     SAVE REGISTERS
         NI    LINKAREA,X'37'      FORCE INTO VALID RANGE FOR SHADOW
         LR    R0,R6               COPY BUFFER POINTER
         S     R0,SCREENBF         GET PRIMARY AREA OFFSET
         L     R1,SCREENSZ         GET SCREEN SIZE
         SR    R1,R0               GET SIZE AFTER THIS OFFSET
         A     R0,SHADOWBF         GET SHADOW AREA ADDRESS TO UPDATE
         SR    R15,R15             ZERO SOURCE LENGTH
         ICM   R15,8,LINKAREA      SET COLOUR CODE AS PAD BYTE
         MVCL  R0,R14              PROPAGATE CODE TO END OF AREA
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER (R6 IS UNCHANGED)
         SPACE
**********************************************************************
*                                                          *         *
*         FORMAT AND DISPLAY CHARACTERS AND HEXADECIMAL    *  R46.8  *
*                                                          * JAN2017 *
**********************************************************************
         SPACE
FILLHEXX DS    0H
         L     R14,SCRNCOLS        GET SCREEN WIDTH
         SRL   R14,2               GET NUMBER OF DATA BYTES TO FORMAT
         LM    R1,R2,DIRLEN(R7)    GET THE RECORD'S LENGTH AND ADDRESS
         TM    TSTRECFM,X'40'      DOES RECORD START WITH AN RDW?
         BZ    FILXXNTV            NO
         TM    STATUS16,$16RDW     YES, CAN IT BE DISPLAYED?
         BO    FILXXNTV            YES, TREAT IT AS DATA
         SH    R1,HW4              NO, REDUCE RECORD LENGTH
         AH    R2,HW4              ADJUST RECORD DATA ADDRESS
FILXXNTV S     R1,OFFSET           DISCOUNT LENGTH LEFT OF SCREEN
         A     R2,OFFSET           POINT TO THE DATA BEING DISPLAYED
         CR    R14,R1              FEWER THAN MAXIMUM TO SHOW?
         BNH   *+6                 NO
         LR    R14,R1              YES, REDUCE TO DATA BYTE COUNT
         LR    R0,R14              COPY DATA BYTE COUNT
         LR    R5,R14              COPY DATA BYTE COUNT
         LR    R14,R6              POINT TO SCREEN LINE
         A     R14,SCREENSZ        POINT TO ITS SHADOW
         BCTR  R5,0                DECREMENT FOR EXECUTE
         EX    R5,COPYCHRS         COPY THE RECORD'S CHARACTERS
         LR    R5,R0               RESTORE BYTES-TO-SHOW COUNT
         LR    R15,R6              POINT TO DISPLAY LINE
         A     R15,SCRNCOLS        POINT TO NEXT LINE
         SH    R15,HW2             POINT TO LAST 2 COLUMNS OF THIS LINE
         MVC   0(2,R15),BLANKS     TIDY UP IF WIDTH NOT MULTIPLE OF 4
         LR    R15,R6              POINT TO DISPLAY LINE
FILXXLP1 MVC   DOUBLE(1),0(R2)     COPY THE DATA BYTE SO NO S0C4 ABEND
         UNPK  1(3,R15),DOUBLE(2)  UNPACK IT
         TR    1(2,R15),HEXTAB-240 FORMAT HEX NIBBLES
         MVI   3(R15),C' '         TIDY UP AFTERWARDS
         MVC   0(1,R15),0(R14)     COPY THE PROCESSED GLYPH TO SHOW
         LA    R15,4(,R15)         POINT TO NEXT DISPLAY SLOT
         LA    R2,1(,R2)           POINT TO NEXT DATA BYTE
         LA    R14,1(,R14)         POINT TO NEXT DATA BYTE GLYPH
         BCT   R0,FILXXLP1
         LR    R2,R6               POINT TO SCREEN LINE
         A     R2,SCREENSZ         POINT TO ITS SHADOW
         LR    R15,R2              POINT TO ITS SHADOW
         MVC   0(1,R15),HEXCOLOR   OVERLAY TEMPORARY GLYPH SAVE AREA
         IC    R0,CHRCOLOR         GET COLOUR CODE FOR CHARACTERS
         L     R1,SCRNCOLS               IN SHADOW BUFFER LINE
         BCTR  R1,0                      WITH THE COLOUR CODE
         EX    R1,REVERSPF               FOR HEXADECIMAL DATA
FILXXLP2 STC   R0,0(,R15)          COLOR DATA CHARACTERS
         LA    R15,4(,R15)         POINT TO NEXT DISPLAY SLOT
         BCT   R5,FILXXLP2         DO NOT GO PAST RECORD END
         TM    STATUS4,$4MSG31     FIND COMMAND ISSUED?
         BNO   FILLNEXT            NO
         CLC   FNDNUM,DIRNUM(R7)   FOUND IN THIS RECORD?
         BNE   FILLNEXT            NO
         L     R1,FNDOFF           GET OFFSET OF SEARCH STRING
         S     R1,OFFSET           GET CHAR OFFSET OF STRING
         BM    FILLNEXT            SMF TYPE BYTE NOT ON SCREEN
         LA    R14,X'25'           USE REVERSE VIDEO TURQUOISE
         CLI   HEXCOLOR,5          DISPLAYING DATA IN TURQUOISE?
         BNE   *+8                 NO, SO TURQUOISE IS A CONTRAST
         LA    R14,X'21'           YES, USE BLUE TO CONTRAST
         SLA   R1,2                GET SCREEN LINE OFFSET OF STRING
         LA    R15,0(R1,R6)        POINT TO FIRST CHARACTER
         LR    R1,R15              COPY POINTER
         S     R1,SCREENBF         GET OFFSET INTO PRIMARY BUFFER
         S     R1,SCRNCOLS
         S     R1,SCRNCOLS         GET OFFSET INTO DYNAMIC AREA
         LA    R1,1(,R1)           CONVERT TO POSITION NUMBER
         ST    R1,REVPOS           SET CURSOR POSITION
         MVC   REVCSR,REVBUFNM     SET CURSOR FIELD
         A     R15,SCREENSZ        POINT TO SHADOW OF FOUND STRING
         LR    R1,R6               POINT TO PRIMARY LINE
         A     R1,SCREENSZ         POINT TO SHADOW LINE
         A     R1,SCRNCOLS         POINT TO NEXT SHADOW LINE
         LA    R0,1
         AH    R0,STRINGL          GET LENGTH OF FOUND DATA
XXFINDLP MVI   0(R15),X'26'        REVERSE YELLOW FOR CHARACTER
         STC   R14,1(,R15)         ALSO HIGHLIGHT HEX
         MVC   2(2,R15),1(R15)     (SAVE 6 BYTES IN 3270 I/O)
         LA    R15,4(,R15)         POINT TO NEXT DATA BYTE'S SLOT
         CR    R15,R1              REACHED END OF SCREEN LINE?
         BNL   FILLNEXT            YES, FOUND HIGHLIGHTING DONE
         BCT   R0,XXFINDLP         NO, HIGHLIGHT MORE OF STRING
         B     FILLNEXT            WHOLE STRING HIGHLIGHTED
         SPACE
************************************************************
*                                                          *
*         FORMAT AND DISPLAY FILE HEXADECIMAL              *
*                                                          *
************************************************************
         SPACE
FILLHEX  DS    0H
         S     R1,OFFSET           IS OFFSET BEYOND END OF RECORD?
         BNP   FILLNEXT            YES, LEAVE LINE BLANK
         A     R2,OFFSET
         IC    R0,HEXCOLOR         LOAD HEXADECIMAL COLOUR (BLUE)
         BAS   R14,COLOURSW        SET NEW DISPLAY COLOUR
         L     R14,SCRNCOLS
         SRL   R14,1
         CR    R1,R14
         BNH   *+6
         LR    R1,R14
         LR    R0,R1
         LR    R1,R2
         LR    R15,R6
         BAS   R14,HEX
         TM    STATUS4,$4MSG31     FIND COMMAND ISSUED?
         BNO   FILLNEXT            NO
         CLC   FNDNUM,DIRNUM(R7)   FOUND IN THIS RECORD?
         BNE   FILLNEXT            NO
         L     R1,FNDOFF           GET OFFSET OF SEARCH STRING
         S     R1,OFFSET           GET CHAR OFFSET OF STRING
         BM    FILLNEXT            SMF TYPE BYTE NOT ON SCREEN
         L     R0,SCRNCOLS         GET SCREEN WIDTH
         SRL   R0,1                GET MAX CHARS DEPICTED WITH HEX ON
         BCTR  R0,0                GET MAX HIGHLIGHT TEXT LENGTH CODE
         SLA   R1,1                GET SCREEN LINE OFFSET OF STRING
         BZ    *+6                 HIGHLIGHTING STARTS IN COL 1
         BCTR  R0,0                FIX MAX HIGHLIGHT TEXT LENGTH CODE
         LA    R15,0(R1,R6)        POINT TO FIRST CHARACTER
         LR    R1,R15              COPY POINTER
         S     R1,SCREENBF         GET OFFSET INTO PRIMARY BUFFER
         S     R1,SCRNCOLS
         S     R1,SCRNCOLS         GET OFFSET INTO DYNAMIC AREA
         LA    R1,1(,R1)           CONVERT TO POSITION NUMBER
         ST    R1,REVPOS           SET CURSOR POSITION
         MVC   REVCSR,REVBUFNM     SET CURSOR FIELD
         A     R15,SCREENSZ        POINT TO SHADOW OF FOUND STRING
         MVI   0(R15),X'25'        USE REVERSE VIDEO TURQUOISE
         CLI   HEXCOLOR,5          DISPLAYING DATA IN TURQUOISE?
         BNE   HEXSPFOK            NO, SO TURQUOISE IS A CONTRAST
         MVI   0(R15),X'26'        YES, USE YELLOW TO CONTRAST
HEXSPFOK LH    R1,STRINGL          GET SEARCH STRING LENGTH CODE
         CR    R1,R0               IS STRING TOO LONG?
         BNH   *+6                 NO, CONTINUE
         LR    R1,R0               YES, PREVENT SCREEN ERRORS
         AR    R1,R1               GET "REST OF STRING" LENGTH CODE
         EX    R1,REVERSPF         PROPAGATE ATTRIBUTE CODE
         B     FILLNEXT            LINE NOW COMPLETE
         SPACE
************************************************************
*                                                          *
*         PROCESS NULL RECORDS                             *
*                                                          *
************************************************************
         SPACE
FILNUL   DS    0H
         TM    MODE,MD_HEX+MD_FMT  SHOWING DATA CHARACTERS?
         BZ    FILLNEXT            YES, DON'T CLUTTER UP DISPLAY
         BAS   R14,COLRINFO        SET INFORMATION DISPLAY COLOUR
         MVC   0(6,R6),=C'(NULL)'
         B     FILLNEXT
         SPACE
************************************************************
*                                                          *
*         PERFORM SMF RECORD FORMATTING                    *
*                                                          *
************************************************************
         SPACE
CALLSMF  LR    R15,R2              COPY RECORD ADDRESS
         TM    TSTRECFM,X'C0'      RECFM U? (VSAM SMF D/S?)
         BM    SMFRDWOK            NO
         CLC   0(2,R2),HW18        TOO SHORT FOR VALID SMF?
         BL    CALLSMFX            YES, DON'T FORMAT RECORD
         LA    R2,4(,R2)           POINT PAST RDW
SMFRDWOK CH    R1,HW14             TOO SHORT FOR VALID SMF?
         BL    CALLSMFX            YES, DON'T FORMAT RECORD
         CLC   DAYCENTI,2(R2)      VALID CENTISECOND TIME?
         BL    CALLSMFX            NO, DON'T FORMAT RECORD
         TM    9(R2),X'0F'         DATE SIGN AS EXPECTED?
         BNO   CALLSMFX            NO, DON'T FORMAT RECORD
         CLI   9(R2),X'9F'         VALID LOW-ORDER DECIMAL DIGIT?
         BH    CALLSMFX            NO, DON'T FORMAT RECORD
         CLI   8(R2),X'36'         VALID HIGH ORDER DAY DIGITS?
         BH    CALLSMFX            NO, DON'T FORMAT RECORD
         STM   R1,R2,CALLPARM      SUPPLY RECORD LENGTH AND ADDRESS
         ST    R6,CALLPARM+8
         LA    R0,CALLSAVE
         ST    R0,CALLPARM+12
         OI    CALLPARM+12,X'80'
         L     R0,SCRNCOLS         SUPPLY SCREEN WIDTH
         ICM   R0,12,OFFSET+2      SUPPLY SCROLL RIGHT OFFSET
         LA    R1,CALLPARM
         L     R15,CALLSMFA
         BASR  R14,R15             CALL REVSMF
         L     R1,SCRNCOLS
         BCTR  R1,0
         EX    R1,TRPERIOD         REMOVE UNDISPLAYABLE CODE POINTS
         IC    R0,FMTCOLOR         LOAD SMF COLOUR (ORIGINALLY RED)
         CLC   SMFTYPE,1(R2)       HIGHLIGHT RECORD?
         BNE   SMFCOLOR            NO
         CLI   SMFSBTYP,X'FF'      SUB-TYPE REQUESTED?
         BE    SMFHILIT            NO, PERFORM HIGHLIGHTING
*        TM    0(R2),X'C2'         SUBSYSID+SUBTYPES+OS/VS2?
*        BNO   SMFCOLOR            NO, SUB-TYPE MISMATCH
         L     R1,FSTYPADR         POINT TO SUBTYPE OFFSET TABLE
         SR    R15,R15
         IC    R15,1(,R2)          GET SMF RECORD TYPE
         IC    R15,0(R15,R1)       GET THE OFFSET FOR THIS TYPE
         ALR   R15,R2              ADD IT TO RECORD ADDRESS
         CLC   1(1,R15),SMFSBTYP+1 YES, CORRECT SUB-TYPE?
         BNE   SMFCOLOR            NO, SUB-TYPE MISMATCH
SMFHILIT OC    0(4,R6),MARKSX      HIGHLIGHT WITH DASHES FOR MONOCHROME
         LA    R0,3                USE PINK FOR THIS SMF RECORD TYPE
         CLI   FMTCOLOR,3          UNHIGHLIGHTED RECORDS IN PINK?
         BNE   SMFCOLOR            NO, PINK WILL STAND OUT
         LA    R0,2                YES, USE RED TO HIGHLIGHT
SMFCOLOR BAS   R14,COLOURSW        SET NEW DISPLAY COLOUR
         LR    R1,R6               POINT TO THIS SCREEN SIZE
         A     R1,SCREENSZ         POINT TO ITS SHADOW
         TM    STATUS4,$4MSG31     SHOWING RESULTS FROM 'FIND'?
         BNO   SMFTYPE#            NO
         TM    FINDSW,FSMF         WAS IT FROM A 'FINDSMF' COMMAND?
         BNO   SMFTYPE#            NO
         CLC   FNDNUM,DIRNUM(R7)   FOUND IN THIS RECORD?
         BNE   SMFTYPE#            NO
         OI    0(R1),X'20'         YES, SET REVERSE VIDEO
         MVC   1(3,R1),0(R1)       SPREAD IT ALONG A BIT
SMFTYPE# CLI   3(R6),C'0'          NUMERIC SUB-TYPE HERE?
         BL    FILLNXT             NO
         NI    3(R6),X'BF'         YES, MAKE "LOWER CASE" FOR ISPF
         TM    STATUS9,$9ISPF      ISPF PERFORMING TERMINAL I/O?
         BO    FILLNXT             YES, SMF RECORD HIGHLIGHTING DONE
         OI    3(R6),X'F0'         NO, RESTORE EBCDIC DECIMAL DIGIT
         TM    STATUS5,$5GE        GRAPHIC ESCAPE ALLOWABLE?
         BZ    FILLNXT             NO
         OI    3(R1),X'40'         TURN ON GE FLAG FOR SUPERSCRIPT
         B     FILLNXT             BYPASS FORMATTED DATA OVLY
CALLSMFX LR    R2,R15              RESTORE RECORD ADDRESS
         B     FMTNOTON            RECORD FAILED SMF VALIDITY CHECK
         SPACE
**********************************************************************
*                                                          *         *
*         INVOKE LOGREC RECORD FORMATTING ROUTINE          *  GP@FT  *
*                                                          *  01/94  *
**********************************************************************
         SPACE
CALLEREP L     R15,=A(EREPFMT)     GET EREP FORMATTING ROUTINE ADDRESS
         BR    R15                 CALL IT
         SPACE
**********************************************************************
*                                                          *         *
*         INVOKE DSECT RECORD FORMATTING ROUTINE           *  GP@FT  *
*                                                          *  01/96  *
**********************************************************************
         SPACE
CALLFMT  L     R15,=A(FORMATIT)    GET FORMATTING ROUTINE ADDRESS
         BR    R15                 CALL IT
         SPACE
************************************************************
*                                                          *
*         PERFORM FINAL RECORD EDITING                     *
*                                                          *
************************************************************
         SPACE
FILLNEXT TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    FILLLONG            YES, SO DON'T SHOW RECORD ADDRESS
         TM    STATUS13,$13_L      PROCESSING PRE-LOADED DATA?
         BO    FILLLONG            YES, SO DON'T SHOW RECORD ADDRESS
         TM    $UCBAD,$ACB+$HFSIO  HFS FILE OR USING VSAM ACB?
         BNZ   FILLTTR             YES, ZERO RBA IS VALID
         ICM   R0,15,DIRTTR(R7)    BLOCK LOCATION KNOWN?
         BZ    FILLLONG            NO, SO SKIP ALL THIS
FILLTTR  L     R15,SCRNCOLS
         SH    R15,HW40            GET LINE OFFSET TO NON-DATA START
         L     R1,RECSIZE          GET MAXIMUM RECORD LENGTH
         S     R1,OFFSET           GET DATA BYTES ON SCREEN
         CR    R1,R15              IS IT MORE THAN 40?
         BH    FILLLONG            YES, DON'T SHOW RECORD'S BLOCK
         ALR   R6,R15              POINT TO BLOCK POS'N FORMAT AREA
         CLC   0(40,R6),BLANKS     IS THE AREA REALLY BLANK?
         BNE   FILLONG             NO, DON'T OVERWRITE DATA
         MVC   40(3,R6),BLANKS     ENSURE TRAILING BLANKS
         BAS   R14,COLRINFO        SET INFORMATION DISPLAY COLOUR
         IC    R0,HEXCOLOR         LOAD HEXADECIMAL COLOUR (BLUE)
         TM    STATUS16,$16XX      IS HEXX ON?
         BNO   *+8                 YES, NO ADJUSTMENT REQUIRED
         BAS   R14,COLOURSW        SHOW IN SAME COLOUR ON ALL LINES
         MVC   0(30,R6),=C'(RECORD FROM BLOCK AT LOCATION'
         UNPK  31(9,R6),DIRTTR(5,R7)
         TR    31(8,R6),HEXTAB-240 MAKE DISPLAYABLE HEX CHARACTERS
         MVI   39(R6),C')'
         TM    $UCBAD,$ACB+$HFSIO  HFS FILE OR USING VSAM ACB?
         BNZ   FILLRBA             YES, SHOW EIGHT HEX DIGITS OF RBA
FILLTTRX SLR   R6,R15              POINT BACK TO CURRENT LINE START
         B     FILLNXT
FILLRBA  MVC   8(22,R6),=C'RELATIVE BYTE ADDRESS '
         TM    $UCBAD,$RRDS        ACCESSING AN RRDS?
         BZ    FILLTTRX            NO
         MVC   17(13,R6),=C'RECORD NUMBER'
         B     FILLTTRX
FILLONG  SLR   R6,R15              POINT BACK TO CURRENT LINE START
FILLLONG TM    TSTRECFM,X'40'      RECFM V?
         BZ    FILLPGM             NO, DON'T CHECK FOR LONG RECORD
         L     R0,DIRLEN(,R7)      GET TOTAL RECORD LENGTH
         C     R0,SAVLRECL         IS IT LARGER THAN LRECL?
         BNH   FILLSPAN            NO, CHECK FOR SPANNED FLAGS
         CVD   R0,DOUBLE           YES, CONVERT IT TO DECIMAL
         L     R15,SCRNCOLS
         SH    R15,HW8             LINE OFFSET TO NON-DATA START
         ALR   R6,R15              POINT TO RECORD ERROR NOTICE AREA
         BAS   R14,COLRWARN        SET WARNING DISPLAY COLOUR
         MVC   0(3,R6),=C'LEN'     INDICATE LENGTH DATA
         OI    DOUBLE+7,X'0F'      WANT NUMERIC CHARACTERS
         UNPK  3(5,R6),DOUBLE+5(3)
         CLI   3(R6),C'0'          RECORD LENGTH LESS THAN 10,000?
         BNE   FILLONGX            NO, LEAVE DIGIT AND LINE FINISHED
         MVI   3(R6),C'='          YES, ROOM FOR AN EQUALS SIGN
FILLONGX SLR   R6,R15              POINT BACK TO CURRENT LINE START
         B     FILLNXT             THIS DISPLAY LINE IS NOW FINISHED
FILLSPAN TM    TSTRECFM,X'48'      VARIABLE SPANNED RECORD FORMAT?
         BO    FILLNXT             YES, SEGMENT BITS ARE EXPECTED
         L     R2,DIRREC(,R7)      NO, POINT TO RDW
         ICM   R0,3,2(R2)          IS LAST HALF OF RDW NULL?
         BZ    FILLNXT             YES, NO PROBLEMS AT ALL
         L     R15,SCRNCOLS
         SH    R15,HW8             LINE OFFSET TO NON-DATA START
         ALR   R6,R15              POINT TO RECORD ERROR NOTICE AREA
         BAS   R14,COLRWARN        SET WARNING DISPLAY COLOUR
         MVC   0(4,R6),=C'RDW='    INDICATE HEX DATA IS FROM THE RDW
         UNPK  4(5,R6),0(3,R2)
         TR    4(4,R6),HEXTAB-240  SHOW 2ND HALF OF RDW IN HEX
         SLR   R6,R15              POINT BACK TO CURRENT LINE START
         B     FILLNXT             THIS DISPLAY LINE IS NOW FINISHED
FILLPGM  L     R15,=A(PGMFRMAT)
         BASR  R14,R15             PERFORM ANY CESD OR IDR FORMATTING
         TM    DIRNXT(R7),X'80'    TEST RRDS EMPTY SLOT FLAG
         BZ    FILLNXT             THE FLAG IS OFF
         L     R15,SCRNCOLS
         SH    R15,HW12            LINE OFFSET TO NON-DATA START
         ALR   R6,R15              POINT TO EMPTY SLOT FLAG AREA
         BAS   R14,COLRINFO        SET INFORMATION DISPLAY COLOUR
         MVC   0(12,R6),=C'(EMPTY-SLOT)'
         SLR   R6,R15              POINT BACK TO CURRENT LINE START
FILLNXT  A     R6,SCRNCOLS         POINT TO NEXT SCREEN LINE
         L     R7,DIRNXT(,R7)
         BCT   R8,FILLOOP
         B     FILLED
         SPACE
************************************************************
*                                                          *
*         FORMAT AND DISPLAY 'BOTTOM OF DATA' LINE         *
*                                                          *
************************************************************
         SPACE
FILSTARS MVC   1(0,R6),0(R6)       <<< EXECUTED >>>
FILBOT   BAS   R14,COLRHIGH        SET NEW DISPLAY COLOUR
         MVI   0(R6),C'*'          SUPPLY SEED ASTERISK
         L     R15,SCRNCOLS        GET SCREEN WIDTH
         LR    R14,R15             COPY IT
         BCTR  R14,0               DECREMENT FOR TARGET LENGTH
         BCTR  R14,0               DECREMENT FOR EXECUTE
         EX    R14,FILSTARS        CREATE A LINE OF ASTERISKS
         SRL   R15,1               GET LINE MID-POINT OFFSET
         SH    R15,HW8             GET TEXT LINE OFFSET
         ALR   R15,R6              GET POSITION
         MVC   0(16,R15),=C' BOTTOM OF DATA '
         CLI   SYNADSW,0           WAS SYNAD EXIT TAKEN?
         BNE   BOTIOERR            YES, BRANCH
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    BOTMDONE            YES, FORGET STATS AND FACTS
         TM    STATUS13,$13_L      PROCESSING PRE-LOADED DATA?
         BO    BOTMDONE            YES, FORGET STATS AND FACTS
         TM    STATUS2,$2FAST      IS "FASTPATH" ACTIVE?
         BZ    KOUNTOK             NO, SO THE BYTE COUNT IS CORRECT
         ICM   R1,15,COUNT         YES, GET RECORD COUNT
         BNP   KOUNT0              LESS THAN ONE RECORD SO SKIP IT
         BCTR  R1,0                DO NOT COUNT BOTTOM OF DATA LINE
         M     R0,RECSIZE          GET BYTE COUNT
         STM   R0,R1,KOUNT64       SET BYTE COUNT
KOUNTOK  OC    KOUNT64,KOUNT64     ANY BYTES?
         BZ    KOUNT0              NO, SO SKIP IT
         L     R15,SCRNCOLS
         SH    R15,HW40            GET LINE OFFSET
         ALR   R15,R6              GET POSITION
         AIF   (NOT &ENV390).KOUNTIT
         TM    FLCARCH,PSAZARCH    RUNNING ON Z/ARCHITECTURE?
         BZ    KOUNTIT             NO, DO IT THE OLD WAY
         LG    R1,KOUNT64          YES, GET THE WHOLE FIELD
         CVDG  R1,SBASAVE          MAKE DECIMAL
         MVC   DOUBLE,SBASAVE+8    GET LOW ORDER 15 DIGITS
         SGR   R1,R1               RESET REGISTER HIGH HALF
         B     KOUNTDEC            GO SHOW THE BYTE COUNT
KOUNTIT  DS    0H
.KOUNTIT ANOP
         L     R1,KOUNT            GET BYTE COUNT
         LR    R0,R1               COPY BYTE COUNT
         SLL   R0,1
         SRL   R0,1                DISCARD SIGN BIT
         CVD   R0,DOUBLE           MAKE DECIMAL
         LTR   R1,R1               WAS SIGN BIT SET?
         BNM   KOUNTDEC            NO
         AP    DOUBLE,=P'2147483648'
KOUNTDEC MVC   15(11,R15),=X'2020202020202020202120'
         ED    14(12,R15),DOUBLE+2
         MVC   26(6,R15),=C'-BYTES' DISPLAY BYTE COUNT FOR FILE/MEMBER
KOUNT0   TM    $UCBAD,$ACB+$HFSIO  HFS FILE OR USING VSAM ACB?
         BNZ   BOTMDONE            YES, FORMATTING NOW COMPLETE
         TM    STATUS,STNOMEM      IN 'MEMBER-NOT-FOUND' STATUS?
         BO    BOTMDONE            YES, FORMATTING NOW COMPLETE
         ICM   R0,7,$UCBAD3        ANY UCB?
         BZ    BOTMDONE            NO, FORMATTING NOW COMPLETE
         ICM   R0,15,EOFRELAD      ZERO EOF LOCATION?
         BZ    BOTMDONE            YES, SUPPRESS DISPLAY
         TM    STATUS2,$2SOFT      VSAM SOFTWARE END-OF-FILE?
         BZ    NVSAMEOF            NO, BRANCH
         MVC   2(4,R6),=C'S/W-'    YES, INDICATE NOT EOF MARKER
NVSAMEOF MVC   6(8,R6),=C'EOF-BLK=' NO, REAL EOF MARKER OR EXTENT END
         UNPK  14(9,R6),EOFRELAD(5) DISPLAY END-OF-FILE RELATIVE ADDR
         TR    14(8,R6),HEXTAB-240 MAKE DISPLAYABLE HEX CHARACTERS
         MVI   22(R6),C'*'         ERASE GARBAGE
         TM    STATUS2,$2TAPE      TAPE FILE?
         BO    BOTMDONE            YES, EOF ADDRESS NOW FORMATTED
         MVC   10(3,R6),=C'TTR'    NO, SAY 'TTR' FOR DISK FILE
EOFTTROK TM    DSORG,DS1DSGPO      IS DSORG PO?  LOOKING AT MEMBER?
         BO    BOTMDONE            YES, EOF ADDRESS NOW FORMATTED
         TM    STATUS8,$8ZIPU      PROCESSING UNZIPPED DATA?
         BO    BOTMDONE            YES, DO NOT HAVE DSCB TO LOOK AT
         TM    DS1SMSFG,DS1STRP    DATA STRIPED DATA SET?
         BO    BOTMDONE            YES, NON-STANDARD TTR INFORMATION
         LTR   R1,R1               ANY BYTES?
         BZ    BOTMDONE            NO, SKIP % USED FORMATTING
         CLI   $CONCAT,0           IS THE CURRENT DEB THE WHOLE STORY?
         BNE   BOTMDONE            NO, CANNOT GET THE TRUE TRACK COUNT
         ICM   R1,7,DS1LSTAR       IS DS1LSTAR ZERO?
         BZ    SHOWUSED            YES, SHOW % USED (UTILITIES WON'T)
         CLC   EOFRELAD(2),DS1LSTAR EOF MARKER ON DS1LSTAR TRACK?
         BE    BOTMDONE            YES, EOF ADDRESS NOW FORMATTED
         LA    R0,CHKPTLN          LENGTH OF CHKPT ENTRY
         L     R1,CHKPTBOT         POINT TO POSSIBLE E-O-F MARKER
         SR    R1,R0               POINT TO POSSIBLE LAST DATA BLOCK
         CLC   4(2,R1),DS1LSTAR    LAST DATA BLOCK ON DS1LSTAR TRK?
         BE    BOTMDONE            YES, EOF ADDRESS NOW FORMATTED
SHOWUSED SR    R1,R1               NO, UTILITIES DON'T SHOW % USED
         SR    R0,R0               CLEAR FOR INSERTS
         ICM   R1,7,DCBDEBA        POINT TO DATA EXTENT BLOCK
         USING DEBBASIC,R1
         IC    R0,DEBNMEXT         GET NUMBER OF EXTENTS
         LA    R15,DEBBASND        POINT TO DEB DASD SECTION
         DROP  R1                  DEBBASIC
         USING DEBDASD,R15         NOT ISAM SO DEBDASD FOLLOWS DEBBASIC
         SR    R1,R1               ZERO TRACK COUNTER
         SR    R14,R14             (CAN'T USE AH IF OVER 32K TRK XTNT)
DEBLOOP  ICM   R14,3,14(R15)       GET TRACKS IN THIS EXTENT
         AIF   (NOT &ENV390).BIN#IS0
         ICM   R14,4,DEBNMTRKHI    DSNTYPE=LARGE ALLOWS OVER 64K TRACKS
.BIN#IS0 ANOP
         AR    R1,R14              ACCUMULATE TRACK COUNT
         LA    R15,DEBDASDE        POINT TO SECTION FOR NEXT EXTENT
         BCT   R0,DEBLOOP          PROCESS NEXT EXTENT IF IT EXISTS
         DROP  R15                 DEBDASD
         L     R15,EOFRELAD
         SRL   R15,16              GET TT OF TTR
         LA    R15,1(,R15)         SAY THIS TRACK IS USED
         TM    STATUS2,$2SOFT      VSAM SOFTWARE END-OF-FILE?
         BZ    EOFADDR             NO
         CLI   EOFRELAD+2,1        WAS FIRST BLOCK ON TRACK?
         BNE   EOFADDR             NO
         BCTR  R15,0               YES, THIS TRACK WASN'T REALLY USED
EOFADDR  CR    R15,R1              EOF TT BIGGER THAN EODS TT?
         BH    BOTMDONE            YES, THAT'S JUST SILLY (MULTI-VOL?)
         LA    R0,100
         MR    R14,R0              TRACKS USED BY 100 FOR PERCENTAGE
         DR    R14,R1              DIVIDE BY NUMBER OF TRACKS ALLOC'D
         CVD   R15,DOUBLE
         MVC   22(5,R6),=X'7C2021206C'
         ED    22(4,R6),DOUBLE+6   SHOW (USED)/(ALLOCATED) AS A %
         CLI   DOUBLE+6,9          LESS THAN 100?
         BH    BOTMDONE            NO, END OF FORMATTING
         MVC   23(4,R6),22(R6)     YES, REMOVE SUPERFLUOUS CHARACTER
         CLI   DOUBLE+6,0          LESS THAN 10?
         BNE   BOTMDONE            NO, END OF FORMATTING
         MVC   23(3,R6),22(R6)     YES, REMOVE SUPERFLUOUS CHARACTER
         B     BOTMDONE
BOTIOERR L     R15,SCRNCOLS
         SRL   R15,1
         SH    R15,HW40            GET LINE OFFSET FOR ERROR MESSAGE
         ALR   R15,R6              GET POSITION FOR I/O ERROR MESSAGE
         MVC   1(78,R15),SYNADMSG  SUPPLY I/O ERROR MESSAGE TEXT
BOTMDONE BCTR  R8,0                ANOTHER SCREEN LINE USED
         A     R6,SCRNCOLS         POINT PAST THIS LINE
         L     R15,LBLEPADR        LOAD TAPE LABEL ROUTINE ADDRESS
         BASR  R14,R15             CALL IT
FILLED   TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    FILLDONE            YES, NO PICTURE TO RENDER
         ICM   R15,15,PICSTGSZ     ANY PICTURE DATA PRESENT?
         BZ    FILLDONE            NO, NO PICTURE TO RENDER
         L     R15,IMAGEADR        GET ROUTINE ENTRY POINT
         BASR  R14,R15             RENDER PICTURE IF APPROPRIATE
FILLDPIC TM    PICFLAGS,PICSRC     PICTURE SOURCE REQUESTED?
         BNO   FILLDONE            NO
         LA    R1,MSG+64           POINT TO OAIA
         L     R15,DALOADDR        POINT TO DEALLOCATION ROUTINE
         BASR  R14,R15             DEALLOCATE OUTPUT FILE
         NI    PICFLAGS,255-PICSRC PICTURE SOURCE REQUEST DONE
FILLDONE EQU   *
         SPACE
************************************************************
*                                                          *
*         WRITE SCREEN IMAGE TO TERMINAL                   *
*                                                          *
************************************************************
         SPACE
PROMPT   TM    STATUS6,HELFF       INITIAL POSITIONING FOR HEL?
         BO    FINDHELP            YES
         TM    STATUS4,$4REFR      SCREEN FORMAT REFRESH REQUIRED?
         BO    FILLSCR             YES
         TM    STATUS6,HELPARS     STILL TO LOOK AT PRIMARY INPUT?
         BO    PROMPTX             YES, PROCESS ANY OTHER COMMAND INPUT
         LH    R1,MSG              GET LENGTH OF MESSAGE
         LTR   R1,R1               ANY MESSAGE?
         BNZ   PROMPTFA            YES, DO NOT OVERLAY IT
         TM    FINDSW2,FALL        'FIND/FINDNOT ALL' ACTIVE?
         BZ    PROMPTFA            NO
         MVI   MSG,48              RESULTS OF <<FIND ALL/REST>>
         TM    FINDSW2,FNOT        'FINDNOT ALL' ACTIVE?
         BZ    PROMPTAI            NO
         MVI   MSG,49              RESULTS OF <<FINDNOT ALL/REST>>
PROMPTAI TM    STATUS4,$4ATTN      ATTENTION INTERRUPT DETECTED?
         BZ    PROMPTFA            NO
         MVI   MSG,50              <<ALL/REST>> PROCESSING INTERRUPTED
PROMPTFA NI    FINDSW2,255-FANY    RESET 'ALL' RECENTLY RESET FLAG
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    PROMPTR             YES, PROCESS HEL MESSAGE LOCATION
         L     R15,SHADOWBF        NO, POINT TO THE SHADOW BUFFER
         MVI   0(R15),X'07'        REPAIR ANY DAMAGE FROM DATA OVERRUN
         MVC   1(92,R15),0(R15)
         L     R15,SCREENBF        POINT TO THE PRIMARY BUFFER
         MVC   1(54,R15),MSGDSN    DISPLAY DSNAME
         TM    PICFLAGS,PICPUT     APPENDING PICTURE SYMBOLS?
         BNO   PROMPTR             NO
         OI    STATUS10,$102LN     YES, DO NOT OVERLAY PICTURE
         B     PROMPTR
PROMPTMH L     R15,SCREENBF        POINT TO PRIMARY SCREEN BUFFER
         A     R15,SCRNCOLS        POINT TO SECOND LINE
         SH    R15,HW32            BACK UP TO MESSAGE AREA
         MVC   0(32,R15),MSGDSN    RESET PREVIOUS MESSAGE WITH LOCATION
         A     R15,SCREENSZ        POINT TO SHADOW OF MESSAGE AREA
         MVI   0(R15),X'07'        WHITE FOR LOCATION
         MVC   1(31,R15),0(R15)
PROMPTR  TM    STATUS14,$14STAE    BRVS ESTAE ACTIVE?
         BNO   PROMPTE             NO
         ESTAE 0                   YES, DEACTIVATE ESTAE
         NI    STATUS14,255-$14STAE
PROMPTE  TM    STATUS2,$2PDS       ATTN TO END MEMBER GROUP PROCESSING?
         BZ    PROMPTS             NO, NO NEED TO DISABLE STAX
         STAX  ,                   YES, PDS COMMAND TO HANDLE ATTENTION
         L     R2,RECURS@          POINT TO GLOBAL AREA
         SR    R0,R0               GET ZERO
         ST    R0,RCRSL+4(,R2)     CLEAR STAX OWNER
PROMPTS  L     R15,IOCOMADR        NO PARAMETER LIST PASSED
         BASR  R14,R15             DISPLAY SCREEN AND RECEIVE INPUT
         TM    STATUS14,$14AS      BROWSING ADDRESS SPACE?
         BO    PROMPTA             YES
         TM    STATUS4,$4MSG31     HIGHLIGHTING A FOUND STRING?
         BNO   PROMPTF             NO
PROMPTA  NI    STATUS4,255-$4MSG31 YES, FOUND STRING NOW SHOWN
         OI    STATUS4,$4REFR      REFRESH THE SCREEN NEXT TIME
PROMPTF  DS    0H
         SPACE
************************************************************
*                                                          *
*         PROCESS REPLY FROM THE TERMINAL                  *
*                                                          *
************************************************************
         SPACE
         TM    STATUS2,$2PDS       REVIEWING A PDS UNDER A PDS (CMD)?
         BZ    PROMPTX             NO, NO NEED TO ISSUE STAX AGAIN
         XC    ATTNLST(ATTNLEN),ATTNLST   YES, ZERO ATTN LIST
         L     R5,ATTNADDR         GET ATTENTION EXIT ADDRESS
         L     R2,RECURS@          POINT TO GLOBAL AREA
         ST    R9,RCRSL+4(,R2)     SET STAX OWNER
         STAX  (R5),REPLACE=NO,USADDR=(R2),MF=(E,ATTNLST)
PROMPTX  DS    0H
         TM    STATUS13,$13NTRM    NEW SCREEN SIZE?
         BO    NEWTERM             YES, RELOAD SCREEN DATA
         SPACE
************************************************************
*                                                          *
*         PROCESS TYPED TEXT PART OF COMMAND               *
*                                                          *
************************************************************
         SPACE
         TM    STATUS6,HELNEWM     NEW HELP MEMBER REQUESTED?
         BO    TOPOFMEM            YES, GO LOOK FOR IT
         TM    STATUS6,HELNEWS     NEW SUBCOMMAND REQUESTED?
         BO    FINDSBCM            YES, GO LOOK FOR IT
         NI    STATUS6,255-HELPARS NOW LOOKING AT PRIMARY INPUT
         CLI   CMDAREA,C' '        ANY COMMAND PRESENT?
         BH    CMDSELN             YES, PROCESS THE COMMAND
         TM    STATUS9,$9BRVS      BROWSING VIRTUAL STORAGE?
         BO    PROMPTVS            YES, GET LATEST DATA
         TM    STATUS8,$8ZIP       IS CURSOR SELECTION ALLOWED?
         BNO   PROMPT              NO, NO ACTION
         L     R5,UNZIPFAD         YES
         BR    R5                  PROCESS IT
PROMPTVS L     R7,HOLDTOP          POINT TO ENTRY FOR FIRST RECORD
         L     R6,SCRNCOLS
         SLA   R6,2
         A     R6,SCREENBF         POINT TO FIRST DATA LINE ON SCREEN
PROMPTVL TM    DIRLEN(R7),X'80'    IS IT EOF?
         BO    PROMPTVE            YES, STOP SCREEN CONTENTS SCAN
         CLI   8(R6),FLDINHI       EXPECTED INPUT FIELD PRESENT?
         BNE   PROMPTVE            NO, $4REFR ON BEFORE SET AT PROMPTA
         LA    R0,4                GET NUMBER OF WORDS TO CHECK
         LA    R15,9(,R6)          POINT TO FIRST SELECTION AREA
PROMPTSL CLI   0(R15),C'%'         24-BIT JUMP SELECTION?
         BE    PROMPTVJ            YES
         CLI   0(R15),C'?'         31-BIT JUMP SELECTION?
         BE    PROMPTVJ            YES
         LA    R15,11(,R15)        POINT TO NEXT SELECTION AREA
         BCT   R0,PROMPTSL         GO CHECK NEXT WORD
         C     R7,HOLDEND          LAST RECORD ON SCREEN?
         BE    PROMPTVE            YES, END OF SCAN FOR JUMP SELECTION
         L     R7,DIRNXT(,R7)      NO, POINT TO THE NEXT ENTRY
         A     R6,SCRNCOLS         POINT TO THE NEXT LINE
         B     PROMPTVL            GO CHECK NEXT LINE
PROMPTVJ LA    R2,5
         SR    R2,R0               GET RELATIVE WORD NUMBER IN RECORD
         SLA   R2,2                GET OFFSET IN RECORD
         A     R2,DIRREC(,R7)      POINT TO WORD WITH ADDRESS
         L     R2,0(,R2)           LOAD ADDRESS
         LA    R0,0(,R2)           ENSURE ADDRESS FORMAT
         ST    R0,@ADDR            UPDATE CURRENT ADDRESS
         CLI   0(R15),C'?'         31-BIT JUMP SELECTION?
         BE    LISTPNTR            YES
         MVI   @ADDR,0             NO, CLEAR HIGH ORDER BYTE
         B     LISTPNTR
PROMPTVE TM    FINDSW2,FALL        IS 'ALL' STATUS SET?
         BO    TOP                 YES, RESCAN ADDRESS SPACE
         L     R7,HOLDTOP          NO, POINT TO ENTRY FOR FIRST RECORD
         TM    DIRLEN(R7),X'80'    IS EOF ON TOP OF SCREEN?
         BO    PROMPT              YES, SKIP AN UNPRODUCTIVE REFRESH
         L     R1,DIRNUM(,R7)      GET TOP RECORD NUMBER
         BCTR  R1,0                DECREMENT IN PREPARATION
         ST    R1,COUNT            SET LOCATION TO FETCH DATA FROM
         BAS   R14,FILLHOLD        REFRESH THE DATA FROM STORAGE
         B     FILLSCR             GO SHOW THE LATEST DATA
         SPACE
**********************************************************************
*                                                          *         *
*         HANDLE CHANGED SCREEN SIZE                       *  R43.0  *
*                                                          * NOV2009 *
**********************************************************************
         SPACE
NEWTERM  L     R5,=A(NEWTOP)       POINT TO ROUTINE ENTRY POINT
         XC    TTR,TTR             RESET TOP TTR
         L     R0,ANSWER+4         LENGTH
         L     R1,ANSWER           ADDRESS
         FREEMAIN RU,LV=(0),A=(1)
         NI    STATUS,255-STGMVU
         USING NEWTOP,R5
         B     NEWTOPOC            REINITIALIZE THE HOLD DIRECTORY
         DROP  R5                  NEWTOP
         SPACE
************************************************************
*                                                          *
*         SELECT AND INVOKE THE COMMAND ROUTINE            *
*                                                          *
************************************************************
         SPACE
CMDSELN  DS    0H
         L     R15,=A(SUBCMDTB)    POINT TO BEFORE SUBCOMMAND TABLE
         L     R1,OPD0             POINT TO REQUESTED SUBCOMMAND NAME
         TM    STATUS13,$13RFE     RUNNING UNDER RFE MENU SYSTEM?
         BNO   CMDRFEOK            NO
         CLI   0(R1),C'='          JUMPING TO OTHER MENU ITEM?
         BE    EQUALSX             YES, GO DO THAT
CMDRFEOK CLI   0(R1),C'.'          COMMAND BEGIN WITH A PERIOD?
         BE    CMDOTLBL            YES
         LH    R5,OPD0+4           GET SUBCOMMAND LENGTH CODE PLUS 1
         CH    R5,HW7              LARGER THAN MAXIMUM?
         BNH   SUBCMDLP            NO
         LH    R5,HW7              YES, REDUCE TO MAXIMUM
SUBCMDLP LA    R15,SUBCMDL(,R15)   POINT TO NEXT SUBCOMMAND
         EX    R5,CMDTEST          IS IT THIS SUBCOMMAND?
         BL    CMDINVLD            NO, IT'S NOT IN THE (SORTED) TABLE
         BH    SUBCMDLP            NO, NOT FOUND (YET)
         L     R15,8(,R15)         YES, POINT TO ROUTINE
         BR    R15                 GO PERFORM SUBCOMMAND
CMDTEST  CLC   0(0,R1),0(R15)      <<< EXECUTED >>>
CMDINVLD MVI   MSG,20              INVALID COMMAND
CMDRESHO CLI   REPLY,ENTERAID      ENTER AID PRESENT?
         BNE   PROMPT              NO, WHOLE COMMAND NOT RECALLABLE
         TM    STATUS9,$9ISPF      ISPF PERFORMING SCREEN I/O?
         BO    PROMPT              YES, CAN'T RECALL FROM HERE
         L     R15,OPD0            POINT TO THE COMMAND
         CLI   0(R15),C'A'         ANYTHING SENSIBLE?
         BL    PROMPT              NO, DO NOT RECALL IT
         OI    STATUS14,$14RCL     REDISPLAY THE COMMAND
         B     PROMPT
BELPRMPT OI    STATUS7,$7BELL      SOUND BELL FOR ERROR MESSAGE
         B     PROMPT
CMDOTLBL L     R15,=A(DOTLABEL)    GO PROCESS LABEL COMMAND
         BR    R15
         SPACE
************************************************************
*                                                          *
*         DOWN                                             *
*                                                          *
************************************************************
         SPACE
DOWN     DS    0H
         NI    FINDSW,255-FTOP-FEND
         LA    R15,OPD2            SET FOR ERRMANY
         TM    OPD2+6,PRESENT      ARE THERE TOO MANY OPERANDS?
         BO    ERRMANY             YES, INVALID
         L     R0,SCROLL
         TM    STATUS4,$4CSR       CURSOR SCROLLING ACTIVE?
         BNO   DOWNOTCS            NO
DOWNCSR  LH    R1,CSRLOCN          YES, GET CURSOR SCREEN ADDRESS
         LTR   R1,R1               IN DATA PART OF SCREEN?
         BZ    DOWNOTCS            NO, CAN'T BE CURSOR SCROLLING
         SR    R0,R0               YES, PREPARE FOR DIVIDE
         D     R0,SCRNCOLS         GET CURSOR X AND Y COORDINATES
         L     R0,ISPFPAGE         GET PAGE SCROLL AMOUNT
         SH    R1,HW4              GET LINE COUNT TO SCROLL DOWN
         BNP   DOWNOTCS            SCROLL A PAGE IF REQUIRED
         LR    R0,R1               LOAD INTO CORRECT REGISTER
DOWNOTCS DS    0H                  GOT SCROLL AMOUNT FROM CURSOR
         TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BZ    DOWNRGE             NO, USE RANGE
         TM    OPD1+6,QUOTED       IS OPERAND QUOTED?
         BO    ERRINV              YES, INVALID
         LH    R1,OPD1+4           GET LENGTH
         LTR   R1,R1               IS IT NULL STRING?
         BZ    ERRINV              YES, ERROR
         CH    R1,HW10             IS LENGTH MORE THAN 9?
         BNL   ERRINV              YES, ERROR
         L     R14,OPD1            GET ADDRESS OF DATA
         CLI   0(R14),C'C'         CURSOR SCROLLING REQUESTED?
         BNE   DOWNFIXD            NO, SCROLL DOWN BY A FIXED AMOUNT
         MVI   OPD1+6,0            YES, OBLITERATE OPERAND TRACE
         B     DOWNCSR             SCROLL DOWN BY CURSOR AMOUNT
DOWNFIXD L     R0,ISPFPAGE         GET VISIBLE DATA LINE COUNT
         CLI   0(R14),C'P'         FULL PAGE REQUESTED?
         BE    DOWNISH             YES
         SRL   R0,1                HALVE IT
         CLI   0(R14),C'H'         HALF PAGE REQUESTED?
         BE    DOWNISH             YES
         CLI   0(R14),C'M'         MAXIMUM REQUESTED?
         BE    BOTTOM              YES
         TM    OPD1+6,NUMERIC      IS IT NUMERIC?
         BNO   ERRINV              NO, ERROR
         BCTR  R1,0
         EX    R1,NUMRCPAK
         CVB   R1,DOUBLE
         LTR   R0,R1
         BZ    PROMPT
DOWNRGE  TM    FINDSW2,FALL        "FIND/FINDNOT ALL" ACTIVE?
         BO    DOWNISH             YES, READ DOWN SPECIFIED LINE COUNT
         CH    R0,PAGESIZE         SCROLL DOWN MORE THAN A PAGE?
         BNH   DOWNISH             NO, READ DOWN TO LINE NUMBER
         L     R7,HOLDTOP
         A     R0,DIRNUM(,R7)      GET THE REQUESTED TOP LINE
         B     LISTATAD            INVOKE "FASTPATH"
DOWNISH  LTR   R0,R0               ANY SCROLLING NEEDED?
         BZ    PROMPT              NO, BRANCH
         ST    R0,DOWNAMT
         BAS   R14,DOWNER
         LTR   R15,R15             ACTION TAKEN?
         BNZ   PROMPT              NO, NO NEED TO RELOAD SCREEN DATA
         TM    STATUS14,$14AS      BROWSING ADDRESS SPACE?
         BNO   FILLSCR             NO
         L     R7,HOLDTOP
         L     R0,DIRNUM(,R7)      GET THE CURRENT TOP LINE NUMBER
         B     LISTATAD            GO FINALIZE POSITIONING
         SPACE
DOWNER   DS    0H
*
*         SEE IF EOF IS ON SCREEN TOP AND WOULD BE FORCED OFF
*
         LA    R15,4               PREPARE FOR NO ACTION
         L     R7,HOLDTOP          POINT TO ENTRY FOR FIRST RECORD
         TM    DIRLEN(R7),X'80'    IS THIS END OF DATA?
         BOR   R14                 YES, CAN'T GO DOWN
*
*         EOF CAN MOVE WITHOUT BEING FORCED OFF TOP OF SCREEN
*
         L     R7,HOLDEND          POINT TO ENTRY FOR LAST RECORD
         ST    R14,DOWNR
         L     R8,DOWNAMT          GET NUMBER OF LINES TO GO DOWN
DOWNLOOP L     R15,HOLDTOP         POINT TO TOP ENTRY
         L     R15,DIRNXT(,R15)    GET ADDRESS OF ENTRY AFTER TOP
         ST    R15,HOLDTOP         MAKE IT NEW TOP
         TM    DIRLEN(R15),X'80'   IS EOF ON TOP OF SCREEN?
         BO    DOWNX               YES, EXIT
         TM    DIRLEN(R7),X'80'    IS EOF ON SCREEN?
         BO    DOWNNXT             YES, BYPASS GET
         L     R7,DIRNXT(,R7)      POINT TO NEXT ENTRY
         BAS   R14,GET
         BAS   R14,RECTODIR        ENTER RECORD INTO SCREEN DIRECTORY
DOWNNXT  TM    STATUS4,$4ATTN      IF ATTENTION INTERRUPT THEN
         BO    DOWNX               PRETEND WE'RE THERE AND STOP
         BCT   R8,DOWNLOOP
DOWNX    ST    R7,HOLDEND          NEW END POINTER
         SR    R15,R15             INDICATE SOME ACTION TAKEN
         L     R14,DOWNR
         BR    R14
         SPACE
NUMRCPAK PACK  DOUBLE(8),0(0,R14)  <<< EXECUTED >>>
         SPACE
CPYSYMNM MVC   DOUBLE(0),0(R14)    <<< EXECUTED >>>
         SPACE
************************************************************
*                                                          *
*         UP                                               *
*                                                          *
************************************************************
         SPACE
UP       DS    0H
         NI    FINDSW,255-FTOP-FEND
         LA    R15,OPD2            SET FOR ERRMANY
         TM    OPD2+6,PRESENT      ARE THERE TOO MANY OPERANDS?
         BO    ERRMANY             YES, INVALID
         TM    FINDSW2,FALL        IS 'ALL' STATUS SET?
         BZ    UPALLOFF            NO
         NI    FINDSW2,255-FALL    YES, RESET 'ALL' STATUS
         OI    FINDSW2,FANY        REMEMBER THAT IS WAS RESET
UPALLOFF L     R0,SCROLL
         TM    STATUS4,$4CSR       CURSOR SCROLLING ACTIVE?
         BNO   UPNOTCSR            NO
UPCSR    LH    R1,CSRLOCN          YES, GET CURSOR SCREEN ADDRESS
         LTR   R1,R1               IN DATA PART OF SCREEN?
         BZ    UPNOTCSR            NO, CAN'T BE CURSOR SCROLLING
         SR    R0,R0               YES, PREPARE FOR DIVIDE
         D     R0,SCRNCOLS         GET CURSOR X AND Y COORDINATES
         LA    R1,1(,R1)           CONVERT RELATIVE TO ABSOLUTE LINE
         LA    R0,4                COUNT LINES ABOVE DATA AREA
         A     R0,ISPFPAGE         COUNT ALL VISIBLE SCREEN LINES
         SR    R0,R1               GET LINES TO SCROLL UP
         BP    UPNOTCSR            GO DO IT
         L     R0,ISPFPAGE         SCROLL UP A PAGE IF ON LAST LINE
UPNOTCSR DS    0H                  GOT SCROLL AMOUNT FROM CURSOR
         TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BZ    UPRANGE             NO, USE RANGE
         TM    OPD1+6,QUOTED       IS OPERAND QUOTED?
         BO    ERRINV              YES, INVALID
         LH    R1,OPD1+4           GET LENGTH
         LTR   R1,R1               IS IT NULL STRING?
         BZ    ERRINV              YES, ERROR
         CH    R1,HW10             IS LENGTH MORE THAN 9?
         BNL   ERRINV              YES, ERROR
         L     R14,OPD1            GET ADDRESS OF DATA
         CLI   0(R14),C'C'         CURSOR SCROLLING REQUESTED?
         BNE   UPFIXED             NO, SCROLL UP BY A FIXED AMOUNT
         MVI   OPD1+6,0            YES, OBLITERATE OPERAND TRACE
         B     UPCSR               SCROLL UP BY CURSOR AMOUNT
UPFIXED  L     R0,ISPFPAGE         GET VISIBLE DATA LINE COUNT
         CLI   0(R14),C'P'         FULL PAGE REQUESTED?
         BE    UPRANGE             YES
         SRL   R0,1                HALVE IT
         CLI   0(R14),C'H'         HALF PAGE REQUESTED?
         BE    UPRANGE             YES
         CLI   0(R14),C'M'         MAXIMUM REQUESTED?
         BE    TOP                 YES
         TM    OPD1+6,NUMERIC      IS IT NUMERIC?
         BNO   ERRINV              NO, ERROR
         BCTR  R1,0
         EX    R1,NUMRCPAK
         CVB   R0,DOUBLE
UPRANGE  ST    R0,DOWNAMT
         L     R7,HOLDTOP
         TM    DIRLEN(R7),X'80'    IS FIRST LINE EOF?
         BZ    UPTOP               NO, BRANCH
         NC    COUNT,COUNT         IS DATA SET EMPTY?
         BZ    PROMPT              YES, BRANCH
UPTOP    DS    0H
         OI    STATUS14,$14UP      FLAG SCROLLING UP
         L     R0,DIRNUM(,R7)      GET RECORD NUMBER OF TOP LINE
         S     R0,DOWNAMT          GET RECORD NUMBER TO GO BACK TO
         BP    LISTATAD            IF POSITIVE THEN LIST IT
*                                     ELSE DROP THROUGH TO TOP
         NI    STATUS14,255-$14UP  RESET SCROLLING UP FLAG
         SPACE
************************************************************
*                                                          *
*         TOP                                              *
*                                                          *
************************************************************
         SPACE
TOP      DS    0H
         NI    FINDSW,255-FTOP-FEND
         SR    R0,R0
         ST    R0,FNDNUM           RESET LAST-FOUND NUMBER
         ST    R0,FNDOFF           RESET LAST-FOUND OFFSET
         LA    R0,1                WANT TO LIST FIRST RECORD
         TM    FINDSW2,FALL+FANY   IS 'ALL' STATUS SET OR RESET?
         BNZ   LISTATAD            YES, FILTER OR FIX FIRST SCREENFUL
         TM    STATUS9,$9BRVS      BROWSING VIRTUAL STORAGE?
         BO    LISTATAD            YES, GET LATEST DATA
         L     R7,HOLDTOP          GET TOP SCREEN RECORD STUFF
         C     R0,DIRNUM(,R7)      ALREADY AT TOP-OF-DATA?
         BE    LISTRDY             YES, NO NEED FOR POSITIONING I/O
         TM    STATUS2,$2FAST      IS "FASTPATH" AVAILABLE?
         BO    LISTAT              YES, USE IT
         TM    STATUS2,$2EOT       END-OF-FILE FOR TAPE?
         BO    LISTAT              YES, REPOSITION TAPE
         L     R1,CHKPTTOP
         TM    0(R1),X'80'         IS DATA SET EMPTY?
         BO    PROMPT              YES
         ST    R1,CALLPARM+8       NO, SAVE CHECKPOINT ENTRY ADDRESS
         ICM   R15,15,$UCBAD       TALKING TO PHYSICAL DEVICE?
         BZ    LISTATAD            NO, AVOID POINT
         BM    TOPPNTOK            ACB SO NOT DIRECTLY, AVOID POINT
         TM    STATUS8,DIVFULL     DIV STORING EVERYTHING SO FAR?
         BZ    LISTAT              YES, AVOID NEEDLESS FILE INTERACTION
         TM    STATUS,STOPEN       IS THE FILE OPEN?
         BNO   LISTAT              NO, CANNOT PERFORM I/O TO IT
         ICM   R15,15,DIVORG       DIV AVAILABLE?
         BP    LISTAT              YES, USE IT
         MVC   TTR,4(R1)           LOAD TTR OF FIRST BLOCK
         MVC   DOUBLE(1),11(R1)    LOAD VOLUME NUMBER OF FIRST BLOCK
         LA    R5,C'T'             FLAG "TOP" IF EOV->DYNEOF1 S0C4
         BAS   R14,VOLSWTCH        SWITCH TO FIRST VOLUME IF NEED BE
         XASAM24
         POINT (R4),TTR            POINT TO IT
         XASAM31
TOPPNTOK XC    DEBLOCKS(12),DEBLOCKS
         XC    COUNT,COUNT         RESET RELATIVE RECORD NUMBER
         BAS   R14,FILLHOLD
         TM    FINDSW,FACT         IS FIND ACTIVE?
         BO    FINDCONT            YES, CONTINUE WITH FIND
         B     FILLSCR
         SPACE
************************************************************
*                                                          *
*         BOTTOM                                           *
*                                                          *
************************************************************
         SPACE
BOTTOM   DS    0H
         TM    FINDSW2,FALL        IS 'ALL' STATUS SET?
         BZ    BOTANY              NO
         NI    FINDSW2,255-FALL    YES, RESET 'ALL' STATUS
         OI    FINDSW2,FANY        REMEMBER THAT IS WAS RESET
BOTANY   NI    FINDSW,255-FTOP-FEND
         L     R0,BOTNINES
         TM    STATUS13,$13_L      PROCESSING PRE-LOADED DATA?
         BZ    LISTATAD            NO
         LA    R0,2
         A     R0,DIVHICNT
         S     R0,ISPFPAGE
         B     LISTATAD
BOTRET   L     R0,ISPFPAGE         GET VISIBLE DATA LINE COUNT
         BCTR  R0,0                SHOW ** BOTTOM OF DATA **
         B     UPRANGE
         SPACE
************************************************************
*                                                          *
*         LIST                                             *
*                                                          *
************************************************************
         SPACE
LIST     DS    0H
         TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BZ    ERRMISS             NO, MISSING OPERAND
         LA    R15,OPD2            SET FOR ERRMANY
         TM    OPD2+6,PRESENT      ARE THERE TOO MANY OPERANDS?
         BO    ERRMANY             YES, INVALID
         TM    OPD1+6,QUOTED       IS OPERAND QUOTED?
         BO    ERRINV              YES, INVALID
         LH    R1,OPD1+4           GET LENGTH
         LTR   R1,R1               IS IT NULL STRING?
         BZ    ERRINV              YES, ERROR
         TM    OPD1+6,NUMERIC      IS IT NUMERIC?
         BNO   LISTNNUM            NO, TRY FOR STORAGE ADDRESS
         CH    R1,HW10             IS LENGTH MORE THAN 9?
         BNL   ERRINV              YES, ERROR
         TM    FINDSW2,FALL        IS 'ALL' STATUS SET?
         BZ    LISTANY             NO
         NI    FINDSW2,255-FALL    YES, RESET "ALL" STATUS
         OI    FINDSW2,FANY        REMEMBER THAT IS WAS RESET
LISTANY  L     R14,OPD1            GET ADDRESS OF DATA
         BCTR  R1,0                DECREMENT FOR EXPECTED EXECUTE
         EX    R1,NUMRCPAK
         CVB   R0,DOUBLE
         LTR   R0,R0
         BNP   TOP
         NI    FINDSW,255-FTOP-FEND
         SPACE
LISTATAD TM    STATUS14,$14AS      BROWSING ADDRESS SPACE?
         BNO   LISTAT              NO
         LR    R1,R0               COPY ORDINAL LINE NUMBER
         BCTR  R1,0                GET RELATIVE LINE NUMBER
         SLL   R1,4                CONVERT QUADWORD NUMBER TO ADDRESS
         ST    R1,@ADDR            SAVE REQUESTED ADDRESS
         BAS   R14,TRCSTGAD        KEEP ADDRESS TRACE HISTORY CURRENT
         B     LISTAT
         SPACE
LISTNNUM TM    STATUS14,$14AS      BROWSING ADDRESS SPACE?
         BO    LISTVSAD            YES
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    ERRINV              YES, BAD OPERAND
         ICM   R0,15,PICSTGSZ      ANY PICTURE PROCESSING?
         BNZ   ERRINV              YES, BAD OPERAND
         L     R14,OPD1            POINT TO THE OPERAND TEXT
         CLI   0(R14),C'.'         DOES IT BEGIN WITH A PERIOD?
         BE    LISTDOT             YES
         BCTR  R14,0               NO
         MVI   0(R14),C'.'         SUPPLY THE ASSUMED PERIOD
         LA    R1,1(,R1)           INCREMENT THE LENGTH
LISTDOT  CH    R1,HW8              OPERAND TOO LONG?
         BH    ERRINV              YES
         MVC   DOUBLE,BLANKS
         BCTR  R1,0                DECREMENT FOR EXECUTE
         EX    R1,CPYSYMNM         EXTRACT THE LABEL
         LA    R1,HSEACTIV         POINT TO LABEL CHAIN ANCHOR
LISTLBLP ICM   R1,15,0(R1)         POINT TO NEXT LABEL ELEMENT
         BZ    ERRINV              END OF CHAIN SO BAD OPERAND
         CLC   8(8,R1),DOUBLE      FOUND REQUESTED LABEL?
         BNE   LISTLBLP            NO, KEEP LOOKING
         L     R0,16(,R1)          YES, LOAD THE RECORD NUMBER
         B     LISTAT              GO POSITION TO IT
         SPACE
LISTVSAD LA    R1,OPD1             POINT TO ADDRESS OPERAND DESCRIPTOR
         L     R15,RESOLVEP        POINT TO ADDRESS RESOLUTION ROUTINE
         BASR  R14,R15             GET THE SPECIFIED ADDRESS
         TM    STATUS7,$7BELL      PROBLEM WITH THAT?
         BO    LISTPNTR            YES, DO NOT UPDATE CURRENT ADDRESS
         MVC   @ADDR,RESADDR       JUMP TO SPECIFIED ADDRESS
LISTPNTR BAS   R14,TRCSTGAD        KEEP ADDRESS TRACE HISTORY CURRENT
         L     R0,@ADDR            GET THE CURRENT ADDRESS
LISTADOK SRL   R0,4                GET RELATIVE LINE NUMBER
         AH    R0,HW1              GET ORDINAL LINE NUMBER
         SPACE
LISTAT   NI    FINDSW,255-FTOP-FEND
         ST    R0,LISTNUM
         TM    STATUS13,$13_L      PROCESSING PRE-LOADED DATA?
         BNZ   LISTZIP             YES, NO I/O SO USE CPU EVEN IF SAME
         L     R7,HOLDTOP          GET TOP SCREEN RECORD STUFF
         S     R0,DIRNUM(,R7)      GET REQUIRED CHANGE IN TOP NUMBER
         TM    FINDSW2,FALL+FANY   RECORD INCLUSION CRITERIA ALTERED?
         BNZ   LISTFAST            YES, CANNOT AVOID I/O
         LTR   R0,R0               NO, CHECK RELATIVE LOCATION CHANGE
         BZ    LISTRDY             ALREADY THERE SO AVOID I/O
         BM    LISTFAST            HAVE TO GO UP -CHECK FOR "FASTPATH"
         CH    R0,PAGESIZE         SCROLLING DOWN MORE THAN A PAGE?
         BNH   LISTFINE            NO, SO GO DOWN SEQUENTIALLY
LISTFAST L     R0,LISTNUM          RESTORE TARGET TOP SCREEN NO
         TM    STATUS2,$2FAST      IS "FASTPATH" AVAILABLE?
         BZ    LIST@               NO
         SR    R1,R1               YES
         ST    R1,CHKPTBOT         ZERO CHECKPOINT TABLE
         XC    DEBLOCKS(12),DEBLOCKS
         C     R0,MAXPOINT         FURTHER THAN ANY MAN HAS GONE B4?
         BNH   *+8                 NO
         L     R0,MAXPOINT         YES, USE DISCRETION
         AIF   (NOT &ENV390).HFSLST1
         TM    $UCBAD,$HFSIO       PROCESSING HFS FILE?
         BO    LISTHFS             YES, GET RBA FOR SEEK
.HFSLST1 ANOP
*
         SRDL  R0,32               PREPARE LINE NUMBER FOR DIVIDE
         A     R1,BLKFACTR
         BCTR  R1,0
         D     R0,BLKFACTR         GET RELATIVE BLOCK NUMBER
         LR    R6,R1               SAVE FOR LATER
         SR    R0,R0
         D     R0,BLKSATRK         GET TT IN R1, R IN R0
         LTR   R0,R0               ZERO REMAINDER?
         BNZ   LISTNOT0            NO
         BCTR  R1,0                YES, DECREMENT RELATIVE TRACK
         L     R0,BLKSATRK         CORRECT RECORD NUMBER
LISTNOT0 SLL   R1,8                MAKE ROOM FOR R OF TTTR
         OR    R1,R0               GATE R INTO TTTR
         TM    STATUS14,$14BIG     32-BIT NOTE/POINT VALUES?
         BO    LISTTTTR            YES, RETAIN TTTR
         SLL   R1,8                NO, CONVERT TTTR TO TTR0
LISTTTTR ST    R1,TTR              STORE ADDRESS FOR POINT
         BCTR  R6,0
         MH    R6,BLKFACTR+2
         ST    R6,COUNT            SAVE PREVIOUS RECORD'S NUMBER
LISTDA   DS    0H
         XASAM24
         POINT (R4),TTR            POINT TO THE CHOSEN RECORD
         XASAM31
         B     LISTFILL            READ SOME RECORDS
         AIF   (NOT &ENV390).LSTHFS2
LISTHFS  BCTR  R0,0
         ST    R0,COUNT
         MH    R0,DCBBLKSI         GET RBA
         ST    R0,TTR
         B     LISTDA
.LSTHFS2 ANOP
LISTZIP  BCTR  R0,0                DIRECTLY ACCESS DATA IN STORAGE
         ST    R0,COUNT
         C     R0,DIVHICNT
         BNH   LISTFILL
         MVC   COUNT,DIVHICNT
         B     LISTFILL
LIST@    LA    R15,CHKPTLN         LENGTH OF CHKPT ENTRY
         L     R1,CHKPTBOT
         TM    0(R1),X'80'         IS IT EOF?
         BZ    LISTCK              NO
         C     R1,CHKPTTOP         YES, IS DATA SET EMPTY?
         BE    PROMPT              YES
         SR    R1,R15              NO, BACK UP ONE ENTRY
LISTCK   C     R0,0(,R1)           DOES THIS BLOCK PRECEDE OUR RECORD?
         BH    LISTPNT             YES, GO POINT TO IT
         SR    R1,R15              NO, BACK UP ONE BLOCK ENTRY
         B     LISTCK
LISTPNT  L     R7,HOLDTOP          GET TOP SCREEN RECORD STUFF
         CLC   LISTNUM,DIRNUM(R7)  IS THE SCROLLING DIRECTION DOWN?
         BNH   LISTJUMP            NO, NEED TO POINT TO EARLIER DATA
         CLC   0(4,R1),DIRNUM(R7)  WOULD USING CHKPT BACK US UP?
         BNH   LISTFINE            YES, JUST READ DOWN SEQUENTIALLY
LISTJUMP MVC   COUNT,0(R1)
         ST    R1,CALLPARM+8       SAVE CHECKPOINT ENTRY ADDRESS
         ICM   R0,15,$UCBAD        TALKING TO PHYSICAL DEVICE VIA DCB?
         BNP   LISTFILL            NO, NO POINT IN A POINT
         TM    STATUS8,DIVFULL     DIV STORING EVERYTHING SO FAR?
         BZ    LISTFILL            YES, AVOID NEEDLESS FILE INTERACTION
         MVC   TTR,4(R1)           TTR OF PRIOR BLOCK
         MVC   DOUBLE(1),11(R1)    RELATIVE VOLUME OF PRIOR BLOCK
         XC    DEBLOCKS(12),DEBLOCKS
         TM    STATUS2,$2EOT       END-OF-FILE FOR TAPE?
         BZ    LISTPTOK            NO, CONTINUE AS PLANNED
         MVI   CLOSED,X'80'        YES, REPOSITION FOR POINT
         CLOSE ((R4),REREAD),TYPE=T,MF=(E,CLOSED)
         NI    STATUS2,255-$2EOT   REPOSITIONED AT START
LISTPTOK LA    R5,C'L'             FLAG "LIST" IF EOV->DYNEOF1 S0C4
         BAS   R14,VOLSWTCH        SWITCH TO CORRECT VOLUME IF NEED BE
         XASAM24
         POINT (R4),TTR
         XASAM31
         SPACE
LISTFILL BAS   R14,FILLHOLD        READ NEXT 20 OR MORE RECORDS
         SPACE
LISTFINE L     R7,HOLDTOP          GET ENTRY FOR TOP OF HOLD AREA
         TM    DIRLEN(R7),X'80'    IS EOF ON TOP OF SCREEN?
         BO    LISTRDY             YES, WE ARE FINISHED
         CLC   LISTNUM,DIRNUM(R7)  IS REQUESTED NUMBER AT TOP?
         BNH   LISTRDY             YES, WE ARE FINISHED
         TM    STATUS4,$4ATTN      ATTENTION INTERRUPT?
         BO    FILLSCR             YES
         MVC   DOWNAMT,FW1         DOWN 1
         BAS   R14,DOWNER
         B     LISTFINE
LISTRDY  TM    FINDSW,FACT         IS FIND ACTIVE?
         BO    FINDCONT            YES, CONTINUE WITH FIND
         CLC   LISTNUM,BOTNINES    WAS THIS A LIST 99999999?
         BE    BOTRET              YES, BRANCH
         B     FILLSCR
ERRMISS  MVI   MSG,35              MISSING OPERAND
         B     CMDRESHO
ERRMANY  MVI   MSG,51              TOO MANY OPERANDS
         ST    R15,16(,R13)        SAVE FOR ERROPSHO
         B     ERROPSHO
         SPACE
**********************************************************************
*                                                          *         *
*         MAINTAIN ADDRESS DISPLAY HISTORY TRACE TABLE     *  R44.0  *
*                                                          * JUL2013 *
**********************************************************************
         SPACE
TRCSTGAD STM   R14,R12,12(R13)     SAVE REGISTERS
         L     R1,FMTAREA          POINT TO FORMAT WORKING STORAGE
         USING @FMTAREA,R1
         L     R0,@ADDR            GET CURRENT ADDRESS
         L     R7,TRCURSOR
         C     R0,0(,R7)           SAME ADDRESS?
         BE    TRCADROK            YES
         LA    R7,4(,R7)           NO, POINT TO NEXT ENTRY
         C     R7,TRCBNDRY         PAST END OF TABLE?
         BL    TRCRAPOK            NO
         LA    R7,TRCTABLE         YES, WRAP AROUND TO TABLE START
         OI    FMTFLAGS,TTWRAP     FLAG WRAP AROUND OCCURRED
TRCRAPOK ST    R0,0(,R7)           SAVE NEW CURRENT ADDRESS
         ST    R7,TRCURSOR         SAVE UPDATE CURRENT ENTRY POINTER
         ST    R7,TRCLIMIT         SAVE UPDATE "NEXT" LIMIT
         DROP  R1                  FMTAREA
TRCADROK LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER
         SPACE
************************************************************
*                                                          *
*         FIND                                             *
*                                                          *
************************************************************
         SPACE
FIND     TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BZ    ERRMISS             NO, REQUIRED OPERAND IS MISSING
         LA    R15,OPD6            SET FOR ERRMANY
         TM    OPD6+6,PRESENT      ARE THERE TOO MANY OPERANDS?
         BO    ERRMANY             YES, INVALID
         NI    FINDSW2,255-FNOT    DO FIND, NOT FINDNOT
FITORNOT TM    FINDSW2,FALL        IS 'ALL' STATUS SET?
         BZ    FALLOFF             NO
         NI    FINDSW2,255-FALL    YES, RESET 'ALL' STATUS
         OI    FINDSW2,FANY        REMEMBER THAT IS WAS RESET
FALLOFF  MVI   FINDSW,0            CLEAR FIND FLAGS
         NI    FINDSW2,255-FWRD    CLEAR FIND FLAGS
         SR    R0,R0
         ST    R0,FNDNUM           RESET LAST-FOUND NUMBER
         ST    R0,FNDOFF           RESET LAST-FOUND OFFSET
         ST    R0,FINDCOL1         RESET COLUMN
         MVI   FINDCOL2,X'7F'      RESET COLUMN
         TM    STATUS14,$14AS      BROWSING ADDRESS SPACE?
         BNO   FCOLSCHK            NO
         LA    R5,20               YES
         MVI   FINDCOL1+3,4        DO NOT SEARCH ADDRESS
         ST    R5,FINDCOL2         SEARCH HEX ONLY, NOT CHARACTERS
         B     FCOLSOK
FCOLSCHK TM    TSTRECFM,X'40'      DOES RECORD START WITH AN RDW?
         BZ    FCOLSOK             NO
         TM    STATUS16,$16RDW     IS THE RDW HIDDEN?
         BO    FCOLSOK             NO
         MVI   FINDCOL1+3,4        YES, DO NOT SEARCH THE RDW
FCOLSOK  EQU   *
         LA    R5,OPD1             GET FIRST OPERAND ENTRY
         ST    R5,16(,R13)         SAVE OPERAND DETAILS FOR ERRINV
         LH    R5,OPD1+4           GET LENGTH
         L     R14,OPD1            GET ADDRESS OF DATA
         TM    OPD1+6,QUOTED       QUOTED?
         BO    FINDDIFF            YES, CAN'T BE 'FIND *'
         CH    R5,HW1              FIRST OPERAND LENGTH OF ONE?
         BNE   FINDDIFF            NO, CAN'T BE 'FIND *'
         CLI   0(R14),C'*'         YES, IS IT AN ASTERISK?
         BE    FNDXLATD            YES, LEAVE THE STRING AS IS
FINDDIFF XC    STRING,STRING       ERASE OLD STRING
         MVI   STRINGL,X'FF'       INVALIDATE SEARCH STRING
         LTR   R5,R5               IS IT NULL STRING?
         BNP   FINDNULL            YES, ERROR
         NI    FINDSW2,FNOT+FANY   RESET ALL RELEVANT FLAGS
         CLI   OPD1+7,C'X'         IS IT A HEXADECIMAL STRING?
         BE    FINDHEX             YES
         CLI   OPD1+7,C'P'         IS IT A PICTURE STRING?
         BNE   FINDTEXT            NO, IT MUST BE A TEXT STRING
         OI    FINDSW2,FPIC+FUOL   YES, FLAG IT
         B     FINDTEXT
FINDHEX  TM    OPD1+5,X'01'        IS THE LENGTH AN ODD NUMBER?
         BO    ERRINV              YES, INVALID NUMBER OF HEX DIGITS
         LR    R1,R5               GET LENGTH
         BCTR  R1,0                GET LENGTH CODE
         EX    R1,FINDXTRT         IS STRING ALL VALID HEX CHARACTERS?
         BNZ   ERRINV              NO, INVALID
         EX    R1,FINDXTR          YES, CONVERT TO ZONED HEX
         LR    R1,R5               GET BACK LENGTH OF OPERAND
         SRL   R1,1                GET LENGTH OF FIND ARGUMENT
         LR    R0,R1               COPY HEX FIND TARGET LENGTH
         LA    R15,STRING          POINT TO FIND COMPARISON TARGET
FINDXPAK PACK  0(2,R15),0(3,R14)   CONVERT TWO HEX DIGITS TO A BYTE
         LA    R15,1(,R15)         POINT TO NEXT TARGET BYTE
         LA    R14,2(,R14)         POINT TO NEXT HEX DIGIT PAIR
         BCT   R0,FINDXPAK         PROCESS NEXT HEX DIGIT PAIR
         MVI   0(R15),0            TIDY UP FOR THE FUN OF IT
         BCTR  R1,0
         STH   R1,STRINGL          SAVE LENGTH CODE
         B     FNDXLATD            SEARCH STRING NOW ALL SET
FINDTEXT BCTR  R5,0
         STH   R5,STRINGL          SAVE LENGTH CODE
         EX    R5,FINDMVC
         CLI   OPD1+7,C'C'         IS IT A CHARACTER STRING?
         BE    FCHARSET            YES, HONOUR CASE TYPED IN
         LA    R14,TABALPHA-2048   ADDRESS ALPHABETIC TABLE
         EX    R5,FINDALFT         ANY ALPABETICS IN STRING?
         BZ    FCHARSET            NO, USE CASE SENSITIVE FOR SPEED
         OI    FINDSW2,FUOL        YES, SET CASE INSENSITIVE SEARCH
FCHARSET TM    MODE,MD_ASCII       MAKE 'FIND' ARGUMENT ASCII?
         BZ    FNDXLATD            NO, NO TRANSLATION REQUIRED
         LA    R0,1(,R5)           YES, GET THE STRING LENGTH
         LA    R1,STRING           GET THE STRING ADDRESS
         XLATE (1),(0),TO=A        TRANSLATE CHARACTERS TO ASCII CODE
FNDXLATD DS    0H
         L     R15,KEYPRSAD        POINT TO KEYWORD PARSER
         LA    R1,FINDKYTB         POINT TO KEYWORD TABLE
         BASR  R14,R15             LOOK FOR KEYWORDS
         LA    R0,4                GET MAXIMUM OPERAND COUNT
         LA    R15,OPD2            POINT TO FIRST OPERAND DETAILS
FOPERLP  TM    6(R15),PRESENT      IS THERE ANOTHER OPERAND?
         BZ    FINDSAME            NO, GO COMMENCE SEARCHING
         ST    R15,16(,R13)        SAVE OPERAND DETAILS FOR ERRINV
         TM    6(R15),QUOTED       IS OPERAND QUOTED?
         BO    ERRINVFA            YES, INVALID
         LH    R1,4(,R15)          GET LENGTH
         LTR   R1,R1               IS IT NULL STRING?
         BZ    ERRINVFA            YES, ERROR
         TM    6(R15),NUMERIC      IS IT NUMERIC?
         BNO   FKEYWORD            NO, BRANCH
         TM    FINDSW,FNUM         COLUMN SPECIFICATIONS ALL DONE?
         BO    ERRINVFA            YES, ERROR
         L     R14,0(,R15)         GET ADDRESS OF DATA
         BCTR  R1,0                GET ITS LENGTH CODE
         EX    R1,NUMRCPAK
         CVB   R1,DOUBLE
         LTR   R1,R1               IS IT ZERO?
         BZ    ERRCOLOP            YES, ERROR
         C     R1,RECSIZE          COLUMN PAST END OF RECORD?
         BH    ERRCOLOP            YES, ERROR
         LR    R7,R1               COPY SPECIFIED NUMBER
         TM    TSTRECFM,X'40'      DOES RECORD START WITH AN RDW?
         BZ    F#ADJSTD            NO
         TM    STATUS16,$16RDW     IS THE RDW HIDDEN?
         BO    F#ADJSTD            NO
         LA    R1,4(,R1)           YES, ACCOUNT FOR HIDDEN BYTES
F#ADJSTD CLI   FINDCOL2,X'7F'      ALREADY USED?
         BNE   FCOL2               YES
         AH    R7,STRINGL          DETERMINE ENDING COLUMN OF DATA
         C     R7,RECSIZE          END OF STRING PAST END OF RECORD?
         BH    ERRCOLOP            YES, ERROR
         LH    R7,STRINGL          GET SEARCH STRING LENGTH CODE
         AR    R7,R1               DETERMINE ENDING COLUMN OF DATA
         ST    R7,FINDCOL2         SAVE ENDING COLUMN
         BCTR  R1,0                CONVERT COLUMN TO OFFSET
         ST    R1,FINDCOL1         SAVE STARTING OFFSET
         B     FOPERNXT            PROCESS ANY OTHER OPERAND
FCOL2    OI    FINDSW,FNUM         NO MORE NUMERIC OPERANDS ALLOWED
         C     R1,FINDCOL2         IS THE NEW NUMBER HIGHER?
         BNL   FCOL2HI             YES, HIGHER NUMBER GOES IN FINDCOL2
         BCTR  R1,0                CONVERT COLUMN TO OFFSET
         ST    R1,FINDCOL1         SAVE LOWER START OFFSET
         B     *+8                 LEAVE FINDCOL2 UNCHANGED
FCOL2HI  ST    R1,FINDCOL2         SAVE NEW HIGHER END COLUMN
         L     R1,FINDCOL2         GET END COLUMN OF END
         S     R1,FINDCOL1         SUBTRACT START OFFSET
         CH    R1,STRINGL          ENOUGH COLUMNS FOR STRING TO FIT?
         BH    FOPERNXT            YES, PROCESS ANY OTHER OPERAND
         B     ERRCOLOP            NO, STRING CAN'T FIT BETWEEN COLUMNS
FKEYWORD CLI   7(R15),9            KNOWN INTERNAL CODE?
         BH    ERRINVFA            NO, INVALID OPERAND
         SR    R1,R1               CLEAR FOR INSERT
         IC    R1,7(,R15)          LOAD OPERAND INTERNAL CODE
         SLL   R1,2                MULTIPLY BY 4
         B     *+4(R1)             BRANCH TO RELEVANT HANDLER
         B     ERRINVFA            0 - INVALID KEYWORD
         B     FSCPF               1 - 'FIRST'
         B     FSCPX               2 - 'NEXT'
         B     FSCPB               3 - 'PREV'
         B     FSCPL               4 - 'LAST'
         B     FSCPA               5 - 'ALL'
         B     FSCPR               6 - 'REST'
         B     FWORD               7 - 'WORD'
         B     FPREFIX             8 - 'PRE'/'PREFIX'
         B     FSUFFIX             9 - 'SUF'/'SUFFIX'
FSCPL    OI    FINDSW,FEND+FBAK    PROCESS 'LAST' REQUEST
         B     FSCPX
FSCPB    OI    FINDSW,FBAK         SEARCH DIRECTION IS BACKWARD
         XC    FNDOFF,FNDOFF       RESET LAST-FOUND COLUMN
         L     R7,HOLDTOP          GET INFO FOR FIRST HELD RECORD
         MVC   FNDNUM,DIRNUM(R7)   SET LAST-FOUND RECORD NUMBER
         B     FSCPX
FSCPA    OI    FINDSW,FTOP         PROCESS 'ALL' REQUEST
FSCPR    OI    FINDSW2,FALL        PROCESS 'REST' REQUEST
         B     FSCPX               START AS IF 'FIRST'
FSUFFIX  TM    FINDSW2,FWRD        CONFLICTING OPERAND?
         BNZ   ERRCONOP            YES, ERROR
         TM    FINDSW,FSMF         IS IT A 'FINDSMF' COMMAND?
         BO    ERRINVFA            YES, ERROR
         OI    FINDSW2,FSUF        PROCESS 'SUFFIX' REQUEST
         B     FOPERNXT
FPREFIX  TM    FINDSW2,FWRD        CONFLICTING OPERAND?
         BNZ   ERRCONOP            YES, ERROR
         TM    FINDSW,FSMF         IS IT A 'FINDSMF' COMMAND?
         BO    ERRINVFA            YES, ERROR
         OI    FINDSW2,FPRE        PROCESS 'PREFIX' REQUEST
         B     FOPERNXT
FWORD    TM    FINDSW2,FWRD        CONFLICTING OPERAND?
         BNZ   ERRCONOP            YES, ERROR
         TM    FINDSW,FSMF         IS IT A 'FINDSMF' COMMAND?
         BO    ERRINVFA            YES, ERROR
         OI    FINDSW2,FWRD        PROCESS 'WORD' REQUEST
         B     FOPERNXT
FSCPF    OI    FINDSW,FTOP         PROCESS 'FIRST' REQUEST
FSCPX    TM    FINDSW,FSCP         SCOPE OPERAND ALREADY DONE?
         BO    ERRCONOP            YES, ERROR
         OI    FINDSW,FSCP         NO, SCOPING OPERAND NOW DONE
FOPERNXT LA    R15,8(,R15)         POINT TO NEXT POSSIBLE OPD
         BCT   R0,FOPERLP          PROCESS NEXT POSSIBLE OPERAND
FINDSAME DS    0H
         CLI   STRINGL,0           HAS A STRING BEEN ENTERED?
         BNE   FINDNULL            NO, ERROR
         NI    FINDSW,255-FVRT
         TM    FINDSW2,FALL        'ALL' OR 'REST' REQUESTED?
         BNO   FINDACTV            NO, ACTIVATE CONVENTIONAL FIND
         TM    FINDSW,FTOP         'ALL' REQUESTED?
         BO    TOP                 YES, FILTER THE FIRST SCREENFUL
         SR    R0,R0               NO, MUST BE 'REST'
         ST    R0,FNDNUM           RESET LAST-FOUND NUMBER
         ST    R0,FNDOFF           RESET LAST-FOUND OFFSET
         L     R7,HOLDTOP          GET TOP SCREEN RECORD STUFF
         L     R0,DIRNUM(,R7)      GET CURRENT LOCATION
         B     LISTAT              FILTER CURRENT SCREENFUL
FINDACTV OI    FINDSW,FACT         FIND NOW ACTIVE AND THAT'S A FACT
         LA    R0,20               GET ENTRY CODE (ACTIVATE ESTAE)
         L     R15,DIVADDR2        LOAD REVDIV ENTRY POINT
         BASR  R14,R15             CALL IT
         TM    FINDSW,FTOP         SEARCH FROM TOP OF DATA?
         BO    FINDTOP             YES, BRANCH
         TM    FINDSW,FEND         SEARCH FROM END OF DATA?
         BO    FINDLAST            YES, BRANCH
         L     R7,HOLDTOP          GET INFO FOR FIRST HELD RECORD
         L     R0,DIRNUM(,R7)      GET RECORD NUMBER OF FIRST HELD
         TM    FINDSW2,FANY        WAS 'ALL' JUST RESET?
         BO    LISTAT              YES, SCREEN DIRECTORY IS INCOMPLETE
         LH    R15,CSRLOCN         GET CURSOR SCREEN ADDRESS
         LTR   R15,R15             IN DATA PART OF SCREEN?
         BZ    FINDCONT            NO, CAN'T BE SEARCH FROM CURSOR
         SR    R14,R14             YES, PREPARE FOR DIVIDE
         D     R14,SCRNCOLS        GET CURSOR X AND Y COORDINATES
         SH    R15,HW4             TAKE HEADINGS INTO ACCOUNT
         L     R7,HOLDTOP          POINT TO TOP RECORD'S INFO
         A     R15,DIRNUM(,R7)     GET RECORD NUMBER OF CURSOR
         ST    R15,FNDNUM          START SEARCH FROM THIS RECORD
         LR    R1,R14              GET SCREEN COLUMN OFFSET
         BAS   R14,DSP2RECO        CONVERT IT TO RECORD OFFSET
         TM    TSTRECFM,X'40'      DOES FILE HAVE RDWS?
         BZ    FINDCOFF            NO
         TM    STATUS16,$16RDW     SHOWING RDWS AS DATA?
         BO    FINDCOFF            YES
         LA    R1,4(,R1)           NO, ADJUST OFFSET ACCORDINGLY
FINDCOFF ST    R1,FNDOFF           START SEARCH FROM THIS OFFSET
FINDCONT TM    FINDSW,FBAK         PERFORMING BACKWARD SEARCH?
         BO    FINDBACK            YES
         L     R7,HOLDTOP          GET INFO FOR FIRST HELD RECORD
         L     R0,DIRNUM(,R7)      GET RECORD NUMBER OF FIRST HELD
         ICM   R1,15,FNDNUM        GET RECORD NUMBER WHERE LAST FOUND
         BNP   FINDSCR             NOT FOUND SO START WITH HELD RECORDS
         CR    R0,R1               ARE WE PAST LAST FOUND REC?
         BH    FINDSCR             YES, START WITH HELD RECORDS
         L     R14,HOLDEND
         L     R5,DIRNUM(,R14)     GET RECORD NUMBER OF LAST HELD
         CR    R1,R5               IS LAST FOUND REC ON SCREEN?
         BH    FINDSCR             NO, START WITH HELD RECORDS
FINDPREV C     R1,DIRNUM(,R7)      IS THIS RECORD WHERE LAST FOUND?
         BE    FINDTHIS            YES, BRANCH
         C     R7,HOLDEND          IS THIS LAST RECORD ON SCREEN?
         BE    FINDDOWN            SHOULD NOT HAPPEN
         L     R7,DIRNXT(,R7)      POINT TO NEXT RECORD
         B     FINDPREV
FINDTHIS L     R5,DIRREC(,R7)      POINT TO LAST FOUND STRING'S RECORD
         A     R5,FNDOFF           POINT TO LAST FOUND STRING
         LA    R5,1(,R5)           POINT PAST LAST FOUND STRING
         TM    TSTRECFM,X'40'      DOES THIS RECORD HAVE AN RDW?
         BZ    FINDSTR             NO
         TM    STATUS16,$16RDW     IS THE RDW BEING TREATED AS DATA?
         BO    FINDSTR             YES
         LA    R5,4(,R5)           ACCOUNT FOR HIDDEN RDW
         B     FINDSTR
FINDSBCM MVI   FINDSW,FACT+FTOP    PERFORM SEARCH FOR SUBCOMMAND HELP
         B     FINDTOP             START FROM THE TOP
FINDHELP MVI   FINDSW,FACT+FTOP    DO INITIAL SEARCH FOR HELP SECTION
         CLI   $SUBCOM,C' '        LOOKING FOR SUBCOMMAND HELP?
         BNE   FINDSECT            YES, CHECK SECTION REQUIREMENTS
         CLI   FILEKV,C'S'         COMMAND WITH SUBCOMMANDS?
         BE    FINDTOP             YES, START SEARCH
FINDSECT OC    HELKVS,HELKVS       ANY SPECIFIC HELP SECTION REQUESTED?
         BNZ   FINDTOP             YES, START SEARCH
         MVI   AKV+1,1             NO, ALL IS THE DEFAULT
FINDTOP  NI    FINDSW,255-FTOP     RESET 'FIRST' REQUEST FLAG
         SR    R0,R0
         ST    R0,FNDNUM           RESET LAST-FOUND NUMBER
         ST    R0,FNDOFF           RESET LAST-FOUND OFFSET
         LA    R0,1
         L     R7,HOLDTOP          GET ENTRY FOR TOP OF HOLD AREA
         OI    FINDSW,FVRT         FLAG VERTICAL SCROLLING
         C     R0,DIRNUM(,R7)      TOP OF DATA ON SCREEN?
         BNE   TOP                 NO, GO TO TOP OF DATA
         NI    FINDSW,255-FVRT     YES, NO VERTICAL SCROLLING YET
         TM    FINDSW2,FANY        WAS 'ALL' JUST RESET?
         BO    TOP                 YES, RESET LINE EXCLUSION
         B     FINDCONT            CONTINUE WITH FIND
FINDLAST SR    R0,R0
         ST    R0,FNDOFF           RESET LAST-FOUND OFFSET
         MVC   FNDNUM,BOTNINES     SET LAST-FOUND NUMBER LARGE
         L     R7,HOLDEND          GET SCREEN RECORD ENTRY
         OI    FINDSW,FVRT         FLAG VERTICAL SCROLLING
         TM    DIRLEN(R7),X'80'    IS EOF ON THE SCREEN?
         BZ    BOTTOM              NO, GO TO BOTTOM OF DATA
         TM    FINDSW2,FANY        WAS 'ALL' JUST RESET?
         BO    BOTTOM              YES, GO TO BOTTOM OF DATA
         NI    FINDSW,255-FVRT     NO, NO VERTICAL SCROLLING YET
FINDBACK TM    FINDSW,FEND+FVRT    JUST BACK FROM BOTTOM BRANCH?
         BO    FINDBAK1            YES, SCROLL UP A RECORD FOR SEARCH
         TM    FINDSW,FVRT         BEEN HERE BEFORE?
         BO    FBKNUMOK            YES, SEARCH THIS RECORD
         NI    FINDSW,255-FEND     RESET 'LAST' REQUEST FLAG IF ON
         L     R7,HOLDEND          GET BOTTOM SCREEN RECORD DETAILS
         TM    DIRLEN(R7),X'80'    IS THIS EOF?
         BZ    FNDBKCHK            NO
         CLC   FNDNUM,DIRNUM(R7)   SEARCH BACKWARD FROM PAST EOF?
         BL    FNDBKCHK            NO, PERFORM NORMAL PROCESSING
         MVC   FNDNUM,DIRNUM(R7)   YES, MAKE IT FROM LAST DATA RECORD
         XC    FNDOFF,FNDOFF       RESET LAST-FOUND OFFSET
FNDBKCHK ICM   R0,15,FNDOFF        IS LAST-FOUND OFFSET ZERO?
         BNZ   FBKNUMOK            NO, SEARCH RECORD NUMBER FNDNUM
FBKNUMLS L     R0,FNDNUM           YES, RECORD NUMBER
         BCTR  R0,0                DECREMENT IT
         LTR   R0,R0               IS NEW NUMBER ZERO?
         BNP   FINDROOF            YES, REACHED TOP OF DATA
         ST    R0,FNDNUM           NO, SAVE IT
         MVC   FNDOFF,RECSIZE      MAKE FNDOFF HIGH
FBKNUMOK L     R7,HOLDTOP          GET FIRST SCREEN RECORD'S DETAILS
         TM    FINDSW,FVRT         SCROLLED UP A BIT FOR THIS RECORD?
         BZ    FBKNUMLP            NO, ASCERTAIN NEXT SEARCH RECORD
         MVC   FNDNUM,OPEND        YES, LOAD NEXT SEARCH RECORD
FBKNUMLP CLC   FNDNUM,DIRNUM(R7)   IS THIS THE RECORD TO SEARCH FROM?
         BL    FINDBAK1            NO, MUST SCROLL UP
         BE    FBAKSRCH            YES
         L     R1,DIRNXT(,R7)      NO, POINT TO NEXT RECORD
         TM    DIRLEN(R1),X'80'    IS NEXT RECORD EOF?
         BO    FBAKSRCH            YES, SHOULDN'T HAPPEN
         LR    R7,R1               NO, NOW CONSIDER NEXT RECORD
         C     R7,HOLDEND          BOTTOM OF SCREEN?
         BE    FBAKSRCH            YES, FORCE THE SEARCH TO START HERE
         B     FBKNUMLP            NO, TRY NEXT RECORD FOR FIND START
FBAKSRCH LH    R14,STRINGL         GET SEARCH STRING LENGTH CODE
         L     R5,FINDCOL2         GET LAST COLUMN TO SEARCH
         C     R5,DIRLEN(,R7)      PAST THIS RECORD'S LENGTH?
         BNH   *+8                 NO, USE COLUMN NUMBER FROM COMMAND
         L     R5,DIRLEN(,R7)      YES, USE THIS RECORD'S LENGTH
         TM    STATUS14,$14AS      BROWSING ADDRESS SPACE?
         BO    *+8                 YES, IGNORE RECORD BOUNDARIES
         SH    R5,STRINGL          GET BIGGEST COLUMN TO SEARCH FIRST
         LTR   R5,R5               IS THIS RECORD TOO SHORT TO TEST?
         BNP   FINDBAK1            YES, BACK UP TO PREVIOUS RECORD
         BCTR  R5,0                GET BIGGEST OFFSET TO SEARCH FIRST
         CLC   FNDNUM,DIRNUM(R7)   LAST FOUND IN THIS RECORD?
         BNE   FBKOFFOK            NO
         L     R0,FNDOFF           YES, GET LAST-FOUND OFFSET
         CR    R5,R0               GOING OVER OLD GROUND?
         BL    FBKOFFOK            NO
         LR    R5,R0               YES, GET LAST-FOUND OFFSET
         BCTR  R5,0                GET NEW STARTING OFFSET
         C     R5,FINDCOL1         BEFORE COLUMN RANGE START?
         BL    FINDBAK1            YES, START FROM PREVIOUS RECORD
FBKOFFOK AL    R5,DIRREC(,R7)      POINT TO FIRST SEARCH ADDRESS
         L     R15,DIRREC(,R7)     POINT TO THE RECORD START
         AL    R15,FINDCOL1        ADJUST LOWER LIMIT WITH COLUMN RANGE
         LA    R0,1(,R5)           POINT TO SEARCH START PLUS ONE
         SR    R0,R15              GET COLUMNS TO SEARCH
         BNP   FINDBAK1            IT SHOULD BE POSITIVE
         TM    STATUS14,$14AS      BROWSING ADDRESS SPACE?
         BNO   FINDBRDY            NO, FIND BACKWARD READY TO START
         L     R15,DIRREC(,R7)     GET RECORD DATA ADDRESS
         SR    R5,R15              GET SEARCH OFFSET WITHIN RECORD
         SH    R5,HW4              GET SEARCH OFFSET WITHIN QUADWORD
         A     R5,0(,R15)          GET SEARCH ADDRESS START
FINDBRDY L     R15,SEARCHAD        TAKE ENTRY POINT LOAD OUT OF LOOP
         OI    STATUS14,$14SCH     TELL ESTAE NOW IN SEARCHIT
         TM    FINDSW2,FNOT        SEARCH FOR ARGUMENT MISMATCH?
         BO    FINDBNOT            YES
FBAKLOOP BASR  R14,R15             LOOK FOR STRING
         BE    FOUND               GUESS WHAT
         BCTR  R5,0                DECREMENT POINTER
         BCT   R0,FBAKLOOP         GO RECOMPARE
         B     FINDBAK1            GO GET PREVIOUS RECORD
FINDBNOT BASR  R14,R15             LOOK FOR STRING
         BNE   FOUND               GUESS WHAT
         BCTR  R5,0                DECREMENT POINTER
         BCT   R0,FINDBNOT         GO RECOMPARE
*        B     FINDBAK1            GO GET PREVIOUS RECORD
FINDBAK1 NI    STATUS14,255-$14SCH NO LONGER IN SEARCHIT
         TM    STATUS4,$4ATTN      ATTENTION INTERRUPT?
         BO    FNDSCRLX            YES
         NI    FINDSW,255-FEND     RESET 'LAST' REQUEST FLAG IF ON
         L     R0,DIRNUM(,R7)      GET THIS RECORD'S NUMBER
         LR    R1,R7               REMEMBER CURRENT RECORD DETAILS
         L     R7,HOLDTOP          POINT TO TOP SCREEN LINE DETAILS
         CR    R7,R1               LOOKING AT THE TOP SCREEN RECORD?
         BNE   FNDPRVLP            NO, PREVIOUS RECORD IS ON SCREEN
         L     R0,DIRNUM(,R7)      YES, GET THIS RECORD'S NUMBER
         OI    FINDSW,FVRT         FLAG VERTICAL SCROLLING
         MVC   FNDOFF,RECSIZE      ALLOW SEARCH OF ALL OF PREVIOUS REC
         BCT   R0,FINDBKPG         VERIFY THAT PREVIOUS RECORDS EXIST
         B     FINDROOF            HIT THE ROOF SO CAN'T GO UP MORE
FINDBKPG ST    R0,OPEND            SAVE NEXT RECORD NUMBER TO SEARCH
         A     R0,FW1              RESTORE LAST SEARCHED RECORD NUMBER
         OI    STATUS14,$14UP      FLAG SCROLLING UP
         SH    R0,PAGESIZE         SCROLL UP A WHOLE PAGE FOR LESS I/O
         BP    LISTAT              GO GET MORE PREVIOUS RECORDS
         LA    R0,1                LESS THAN A PAGE LEFT SO GO TO TOP
         B     LISTAT
FNDPRVLP C     R1,DIRNXT(,R7)      POINTING TO PREVIOUS RECORD?
         BE    FBAKSRCH            YES, EXAMINE IT
         L     R7,DIRNXT(,R7)      NO, GO DOWN ONE
         B     FNDPRVLP            GO SEE ABOUT THIS ONE
FINDMVC  MVC   STRING(0),0(R14)    <<< EXECUTED >>>
FINDALFT TRT   STRING(0),2048(R14) <<< EXECUTED >>>
FINDXTRT TRT   0(0,R14),HEXTEST    <<< EXECUTED >>>
FINDXTR  TR    0(0,R14),HEXDATA    <<< EXECUTED >>>
FINDSCR  TM    DIRLEN(R7),X'80'    ARE WE AT EOF?
         BO    FINDBOT             YES, BRANCH
         L     R5,DIRREC(,R7)      POINT TO FIRST BYTE TO EXAMINE
         SPACE
         DS    0H                  ADDITIONAL CODE FOR HEL POSITIONING
         TM    STATUS6,HELNEWS     POSITIONING FOR HELP SUBCOMMAND?
         BZ    NOTHELNS            NO
         CLI   0(R5),C'='          HELP SECTION HEADER?
         BNE   FINDNEXT            NO
         LH    R1,$SUBLEN          YES, GET SUBCOMMAND NAME LENGTH CODE
HELNSTST EX    R1,HELNSCLC         IS THIS THE RIGHT SUBCOMMAND?
         BE    GOTHELNS            YES
HELNSNXT LA    R5,1(,R5)           NO, POINT PAST '='
HELNSEQU LA    R5,1(,R5)           POINT TO NEXT CHARACTER
         CLI   0(R5),C' '          IS IT A BLANK?
         BE    FINDNEXT            YES, WRONG SUBCOMMAND HEADER
         CLI   0(R5),C'='          NAME INDICATOR?
         BNE   HELNSEQU            NO, KEEP LOOKING FOR EQUALS SIGN
         B     HELNSTST            YES, GO TEST FOR CORRECT NAME
HELNSCLC CLC   1(0,R5),$SUBCOM     <<< EXECUTED >>>
GOTHELNS LA    R1,2(R1,R5)         POINT PAST MATCHED SUBCOMMAND
         CLI   0(R1),C' '          REALLY RIGHT SUBCOMMAND?
         BE    GOTHELOK            YES, PROCEED
         CLI   0(R1),C'='          REALLY RIGHT SUBCOMMAND?
         BE    GOTHELOK            YES, PROCEED
         LH    R1,$SUBLEN          NO, RESTORE SUBCMD NAME LENGTH CODE
         B     HELNSNXT            FOUND LONGER NAME WITH SAME PREFIX
GOTHELOK NI    STATUS6,255-HELNEWS NO LONGER SEARCHING FOR SUBCOMMAND
         LA    R0,1                SHOW FROM AFTER SUBCOMMAND HEADER
         A     R0,DIRNUM(,R7)      GET NEXT RECORD NUMBER
         ST    R0,$SUBLINE         SAVE TOP SUBCMD DATA LINE NUMBER
         TM    STATUS6,HELFF       FIRST FIND UNDER HEL ACTIVE?
         BO    FINDNEXT            YES, LOOK FOR RIGHT SECTION HEADER
         NI    FINDSW,255-FACT     NO, FIND IS NO LONGER ACTIVE
         B     LISTAT              SHOW THIS AS THE TOP LINE
NOTHELNS TM    STATUS6,HELFF       FIRST FIND UNDER HEL ACTIVE?
         BZ    NOTHELFF            NO
         CLI   0(R5),C'='          HELP SUBCOMMAND HEADER?
         BE    FINDBOT             YES, SAME AS END-OF-DATA
         CLI   0(R5),C')'          HELP SECTION HEADER?
         BNE   FINDNEXT            NO
         CLI   1(R5),C')'          OPERAND OR MESSAGE IDENTIFIER?
         BE    FFOP                YES
         CLI   1(R5),C'I'          INSERT HELP MEMBER CONTROL?
         BE    FINDNEXT            YES, IGNORE IT
         CLI   AKV+1,1             ALL REQUESTED?
         BE    FFLOCATE            YES, SHOW THIS LINE AS THE TOP
         CLI   1(R5),C'F'          FUNCTION?
         BE    FFF                 YES
         CLI   1(R5),C'X'          SYNTAX?
         BE    FFX                 YES
         CLI   1(R5),C'O'          OPERANDS?
         BE    FFO                 YES
         CLI   1(R5),C'M'          MSGID?
         BE    FFM                 YES
         CLI   1(R5),C'P'          POSITIONAL?
         BE    FFP                 YES
         CLI   1(R5),C'S'          SUBCOMMANDS?
         BNE   FINDNEXT            NO, CONTINUE SEARCH
         CLI   FILEKV,C'S'         COMMAND WITH SUBCOMMANDS?
         BNE   FINDNEXT            NO, CONTINUE SEARCH
FFLOCATE NI    FINDSW,255-FACT     FIND IS NO LONGER ACTIVE
         NI    STATUS6,255-HELFF   NO LONGER DOING INITIAL POSITIONING
         L     R0,DIRNUM(,R7)      GET THIS RECORD NUMBER
         B     LISTAT              SHOW THIS AS THE TOP LINE
FFF      CLI   FKV+1,1             FUNCTION REQUESTED?
         BE    FFLOCATE            YES, SHOW THIS LINE AS THE TOP
         B     FINDNEXT            NO, CONTINUE SEARCH
FFX      CLI   SKV+1,1             SYNTAX REQUESTED?
         BE    FFLOCATE            YES, SHOW THIS LINE AS THE TOP
         B     FINDNEXT            NO, CONTINUE SEARCH
FFM      CLI   MKV+1,1             MSGID REQUESTED?
         BNE   FINDNEXT            NO, CONTINUE SEARCH
         B     FFMO                YES, GO TO COMMON CODE
FFO      CLI   PKV+1,1             POSITIONAL REQUESTED?
         BE    FFPO                YES, SHOW OPERANDS IF NOT FOUND
         CLI   OKV+1,1             OPERANDS REQUESTED?
         BNE   FINDNEXT            NO, CONTINUE SEARCH
FFMO     CLI   $OPERAND,C' '       YES, ANY SPECIFIC OPERAND(S)?
         BE    FFLOCATE            NO, SHOW THIS LINE AS THE TOP
FFPO     MVC   $SUBLINE,DIRNUM(R7) YES, SHOW THIS AS TOP IF NOT FOUND
         B     FINDNEXT            CONTINUE SEARCH
FFOP     LA    R1,$OPERAND         POINT TO FIRST OPERAND IN LIST
FFOPLP   CLI   0(R1),C' '          ANY OPERAND?
         BE    FINDNEXT            NO, END OF SUPPLIED OPERAND LIST
         LA    R14,20(,R1)         YES, POINT PAST IT
         LA    R0,19               GET MAXIMUM OPERAND LENGTH CODE
FFOPBL   BCTR  R14,0               SCAN
         CLI   0(R14),C' '             FOR
         BNE   FFOPLN                     LAST
         BCT   R0,FFOPBL                      NON-BLANK
FFOPLN   LR    R14,R0              COPY LENGTH CODE
         EX    R14,FFOPC           THIS OPERAND?
         BE    FFLOCATE            YES, SHOW THIS LINE AS THE TOP
         LA    R1,20(,R1)          NO, POINT TO NEXT ENTRY
         B     FFOPLP              CHECK NEXT OPERAND ENTRY
FFOPC    CLC   2(0,R5),0(R1)       <<< EXECUTED >>>
FFP      CLI   PKV+1,1             POSITIONAL REQUESTED?
         BNE   FINDNEXT            NO, CONTINUE SEARCH
         L     R0,HELPOS#          YES, GET THE POSITIONAL NUMBER
         BCTR  R0,0                DECREMENT REMAINING COUNT
         ST    R0,HELPOS#          SAVE IT
         LTR   R0,R0               ANY TO GO?
         BNP   FFLOCATE            NO, SHOW THIS LINE AS THE TOP
         B     FINDNEXT            YES, CONTINUE SEARCH
         SPACE
NOTHELFF DS    0H                  STANDARD 'FIND' CODE RESUMES HERE
         TM    FINDSW,FSMF         WAS IT A 'FINDSMF' COMMAND?
         BNO   FINDSTR             NO
         LR    R6,R5               YES, POINT TO RECORD
         A     R6,FINDCOL1         POINT TO WHERE RECORD TYPE SHOULD BE
         CLC   0(9,R6),=C'MFEOFMARK'   SMFEOFMARK?
         BNE   FINDSTR             NO
         MVI   MSG,30              END OF SMF RECORDS REACHED
         B     FILLSCR
FINDSTR  L     R0,DIRLEN(,R7)      GET LENGTH OF RECORD
         C     R0,FINDCOL2         NEED TO BACK UP SEARCH END COLUMN?
         BNH   *+8                 NO
         L     R0,FINDCOL2         YES, SO DO IT
         L     R1,DIRREC(,R7)      GET ADDRESS OF RECORD
         AR    R0,R1               GET OFFSET PAST DATA TO SEARCH
         TM    STATUS14,$14AS      BROWSING ADDRESS SPACE?
         BO    *+8                 YES, IGNORE RECORD BOUNDARIES
         SH    R0,STRINGL          GET OFFSET PAST START CANDIDATES
         A     R1,FINDCOL1         POINT TO FIRST BYTE TO CHECK
         CR    R5,R1               BEGIN SEARCH AFTER FIRST POSSIBLE?
         BH    *+6                 YES, SKIP SOME CANDIDATES
         LR    R5,R1               NO, START AT FIRST COLUMN IN RANGE
         SR    R0,R5               GET NUMBER OF COMPARISONS
         BNP   FINDNEXT            STRING TOO LONG FOR REMAINING TEXT
         TM    STATUS14,$14AS      BROWSING ADDRESS SPACE?
         BNO   FINDFRDY            NO, FIND FORWARD READY TO START
         L     R15,DIRREC(,R7)     GET RECORD DATA ADDRESS
         SR    R5,R15              GET SEARCH OFFSET WITHIN RECORD
         SH    R5,HW4              GET SEARCH OFFSET WITHIN QUADWORD
         A     R5,0(,R15)          POINT TO DATA IN QUADWORD
FINDFRDY L     R15,SEARCHAD        TAKE ENTRY POINT LOAD OUT OF LOOP
         OI    STATUS14,$14SCH     TELL ESTAE NOW IN SEARCHIT
         TM    FINDSW2,FNOT        SEARCH FOR ARGUMENT MISMATCH?
         BO    FINDNOTC            YES
FINDCOMP DS    0H                  GOT MATCHING SUBROUTINE ENTRY POINT
         BASR  R14,R15             COMPARE STRING TO DATA
         BE    FOUND               MATCH FOUND
         TM    STATUS4,$4ATTN      ATTENTION INTERRUPT?
         BO    FNDSCRLX            YES
         LA    R5,1(,R5)           INCREMENT DATA POINTER
         BCT   R0,FINDCOMP         GO COMPARE AGAIN
         B     FINDNEXT            JUMP OVER FINDNOT PROCESSING
FINDNOTC DS    0H                  GOT MATCHING SUBROUTINE ENTRY POINT
         BASR  R14,R15             COMPARE STRING TO DATA
         BNE   FOUND               MISMATCH FOUND
         TM    STATUS4,$4ATTN      ATTENTION INTERRUPT?
         BO    FNDSCRLX            YES
         LA    R5,1(,R5)           INCREMENT DATA POINTER
         BCT   R0,FINDNOTC         GO COMPARE AGAIN
FINDNEXT NI    STATUS14,255-$14SCH NO LONGER IN SEARCHIT
         C     R7,HOLDEND          WAS THAT LAST HELD RECORD?
         BE    FINDDOWN            YES, BRANCH
         L     R7,DIRNXT(,R7)      POINT TO NEXT RECORD
         B     FINDSCR             GO PROCESS NEXT RECORD
FINDBOT  DS    0H
         TM    STATUS6,HELNEWS     POSITIONING FOR SUBCOMMAND?
         BO    FINDSBOT            YES
         TM    STATUS6,HELFF       INITIAL POSITIONING FOR HEL?
         BO    FINDHBOT            YES
         MVI   MSG,32              BOTTOM OF DATA REACHED
         OI    FINDSW,FTOP         SEARCH FROM TOP OF DATA NEXT TIME
         B     FILLSCR
FINDSBOT MVI   MSG,46              HELP FOR SUBCOMMAND NOT FOUND
         NI    STATUS6,255-HELNEWS-HELPARS   SKIP OTHER HELP PROCESSING
         B     FINDHMSG
FINDHBOT MVI   MSG,45              HELP SECTION NOT FOUND
         ICM   R0,15,$SUBLINE      LOOKING FOR PARTICULAR OPERAND(S)?
         BZ    FINDHMSG            NO, HAVE CORRECT MESSAGE
         MVI   MSG,47              HELP FOR OPERAND(S) NOT FOUND
FINDHMSG NI    FINDSW,255-FACT     FIND IS NO LONGER ACTIVE
         NI    STATUS6,255-HELFF   NO LONGER DOING INITIAL POSITIONING
         ICM   R0,15,$SUBLINE      LOOKING AT SUBCOMMAND?
         BZ    TOP                 NO, DISPLAY FROM TOP OF HELP MEMBER
         B     LISTAT              YES, DISPLAY FROM TOP OF SUBCMD HELP
FINDROOF DS    0H
         MVI   MSG,44              TOP OF DATA REACHED
         OI    FINDSW,FEND         SEARCH FROM BOTTOM OF DATA NEXT TIME
         B     FILLSCR
FINDDOWN DS    0H
         L     R7,HOLDEND
         TM    DIRLEN(R7),X'80'    ARE WE AT EOF?
         BO    FINDBOT             YES, BRANCH
         MVC   DOWNAMT,FW1         DOWN 1
         BAS   R14,DOWNER          RETURNS WITH NEW HOLDEND IN R7
         OI    FINDSW,FVRT         FLAG VERTICAL SCROLLING
         B     FINDSCR
FINDNULL NI    FINDSW2,255-FALL    RESET 'ALL' STATUS
         MVI   MSG,33              STRING NOT SPECIFIED
         B     PROMPT
ERRCOLOP MVI   MSG,114             INVALID COLUMN RANGE
         B     ERRBADOP
ERRCONOP MVI   MSG,113             INCONSISTENT OPERANDS
         B     ERRBADOP
ERRINVFA MVI   MSG,34              INVALID OPERAND
ERRBADOP MVI   FINDSW,0            RESET FLAGS
         NI    FINDSW2,255-FALL-FWRD
         XC    FINDCOL1,FINDCOL1   RESET COLUMN
         MVI   FINDCOL2,X'7F'      RESET COLUMN
         B     ERROPSHO
ERRINV   MVI   MSG,34              INVALID OPERAND
ERROPSHO CLI   REPLY,ENTERAID      ENTER AID PRESENT?
         BNE   PROMPT              NO, WHOLE COMMAND NOT RECALLABLE
         TM    STATUS9,$9ISPF      ISPF PERFORMING SCREEN I/O?
         BO    PROMPT              YES, CAN'T RECALL FROM HERE
         LA    R15,OPD1            ASSUME PROBLEM WAS FIRST OPERAND
         TM    OPD2+6,PRESENT      MORE THAN ONE OPERAND?
         BNO   *+8                 NO, SO ASSUMPTION IS CORRECT
         L     R15,16(,R13)        YES, POINT TO OPERAND DESCRIPTOR
         TM    6(R15),QUOTED       IS THE OPERAND QUOTED?
         L     R15,0(,R15)         POINT TO THE OPERAND
         BNO   ERRGOTOP            NO, IT WAS NOT QUOTED
         BCTR  R15,0               BACK UP TO THE QUOTE
         BCTR  R15,0               BACK UP TO THE STRING TYPE
         CLI   0(R15),C'C'         IS IT REALLY A STRING TYPE?
         BNL   ERRGOTOP            YES, NOW HAVE REAL OPERAND START
         LA    R15,1(,R15)         NO, GO FORWARD TO THE QUOTE AGAIN
ERRGOTOP S     R15,OPD0            GET OPERAND OFFSET IN COMMAND STRING
         BNP   PROMPT              JUST IN CASE
         LA    R15,1(,R15)         CONVERT OFFSET TO POSITION
         ST    R15,REVPOS          SET CURSOR POSITION
         OI    STATUS14,$14RCL     REDISPLAY THE COMMAND
         B     PROMPT
FOUND    NI    STATUS14,255-$14SCH NO LONGER IN SEARCHIT
         TM    FINDSW,FSMF         IS THIS A FINDSMF COMMAND?
         BZ    FOUNDOK             NO, DON'T CHECK SMF SUBTYPE
         CLI   SMFSBTYP,X'FF'      YES, LOOKING FOR A SUBTYPE?
         BE    FOUNDOK             NO, DON'T CHECK SMF SUBTYPE
*        BCTR  R5,0                YES, POINT TO SMF FLAG BYTE
*        TM    0(R5),X'C2'         SUBSYSID+SUBTYPES+OS/VS2?
*        LA    R5,1(,R5)           POINT BACK TO SMF RECORD TYPE
*        BNO   4(,R14)             NO, CONTINUE SEARCH
         L     R1,FSTYPADR         POINT TO SUBTYPE OFFSET TABLE
         SR    R0,R0
         IC    R0,0(,R5)           GET SMF RECORD TYPE
         ALR   R1,R0               POINT TO OFFSET FOR THIS TYPE
         IC    R0,0(,R1)           GET THE OFFSET
         LR    R1,R0               COPY IT
         ALR   R1,R5               POINT TO SUBTYPE
         CLC   0(1,R1),SMFSBTYP+1  YES, SUBTYPE MATCH?
         BNE   4(,R14)             NO, CONTINUE SEARCH
FOUNDOK  MVI   MSG,31              FOUND IN LINE XXXXXXXXX COL XXXXX
         TM    STATUS14,$14AS      BROWSING ADDRESS SPACE?
         BNO   *+8                 NO, HAVE CORRECT MESSAGE
         MVI   MSG,188             FOUND AT ADDRESS XXXXXXXX.
         L     R15,REVMSGEP
         BASR  R14,R15             FETCH MESSAGE TEXT TEMPLATE
         OI    STATUS4,$4MSG31     REMEMBER JUST FOUND A STRING
         MVC   FNDNUM,DIRNUM(R7)   SAVE RECORD NUMBER
         L     R15,DIRREC(,R7)     POINT TO RECORD WITH FOUND DATA
         TM    STATUS14,$14AS      BROWSING ADDRESS SPACE?
         BNO   FNDGTCOL            NO, HAVE CORRECT OFFSET BASE
         ST    R5,@ADDR            SAVE VIRTUAL STORAGE ADDRESS
         BAS   R14,TRCSTGAD        KEEP ADDRESS TRACE HISTORY CURRENT
         L     R15,0(,R15)         POINT TO START OF QUADWORD
         SH    R15,HW4             GET CORRECT BASE FOR OFFSET
FNDGTCOL SR    R5,R15              GET OFFSET TO FOUND LOCATION
         TM    TSTRECFM,X'40'      DOES FILE HAVE RDWS?
         BZ    FNDGTOFF            NO
         TM    STATUS16,$16RDW     SHOWING RDWS AS DATA?
         BO    FNDGTOFF            YES
         SH    R5,HW4              NO, ACCOUNT FOR RDW
FNDGTOFF ST    R5,FNDOFF           SAVE OFFSET
         TM    STATUS14,$14AS      BROWSING ADDRESS SPACE?
         BO    FOUNDVS             YES, DO NOT REPORT COLUMN NUMBER
         LA    R15,1(,R5)          CONVERT OFFSET TO COLUMN NUMBER
         CVD   R15,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  MSG+30(5),DOUBLE+5(3)
         L     R15,FNDNUM
         CVD   R15,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  MSG+16(9),DOUBLE+3(5)  9 DIGIT LINE NUMBER
         LH    R15,MSG             GET THE LENGTH OF MSG31
FNDCOLLP CLI   MSG+30,C'0'         LEADING ZERO IN COLUMN?
         BNE   FNDROWLP            NO, PROCEED
         MVC   MSG+30(5),MSG+31    YES, SHUFFLE UP TO SUPPRESS IT
         BCT   R15,FNDCOLLP        LOOP UNTIL NON-ZERO
FNDROWLP CLI   MSG+16,C'0'         LEADING ZERO IN ROW?
         BNE   FNDMSGOK            NO, HAVE FINAL MESSAGE
         MVC   MSG+16(20),MSG+17   YES, SHUFFLE UP TO SUPPRESS IT
         BCT   R15,FNDROWLP        LOOP UNTIL NON-ZERO
         B     FNDMSGOK
FOUNDVS  UNPK  MSG+19(9),@ADDR(5)  SHOW ADDRESS IN HEX
         TR    MSG+19(8),HEXTAB-240
         MVI   MSG+27,C'.'
         LH    R15,MSG             GET MESSAGE LENGTH
FND188LP CLC   =C'00',MSG+19       MULTIPLE LEADING ZEROS?
         BNE   FNDAD0OK            NO
         MVC   MSG+19(8),MSG+20    YES, ELIMINATE ONE
         BCT   R15,FND188LP        GO CHECK AGAIN
FNDAD0OK CLI   MSG+19,C'0'         LEADING ZERO?
         BNE   FNDMSGOK            NO, HAVE FINAL MESSAGE
         CLI   MSG+20,C'0'         ZERO FOLLOWED BY DECIMAL DIGIT?
         BL    FNDMSGOK            NO, HAVE FINAL MESSAGE
         MVC   MSG+19(8),MSG+20    YES, ELIMINATE ONE
         BCTR  R15,0               ADJUST LENGTH
FNDMSGOK STH   R15,MSG             SAVE EDITED MESSAGE LENGTH
         NI    FINDSW,255-FACT     FIND IS NO LONGER ACTIVE
         TM    FINDSW,FSMF         WAS IT A 'FINDSMF' COMMAND?
         BO    FNDSCRLX            YES, DON'T SCROLL LEFT
         CLC   FNDOFF,OFFSET       WAS IT FOUND BEFORE 1ST COL?
         BE    FNDSCRLX            NO, AT FIRST COLUMN ALREADY
         LH    R14,STRINGL         GET LENGTH CODE OF FOUND DATA
         BL    FNDSCRL             YES, HAVE TO SCROLL LEFT
         A     R14,FNDOFF          FIND END OF FOUND STRING
         C     R14,OFFEND          WAS IT FOUND AFTER LAST COL?
         BL    FNDSCRLX            NO, SO COMPLETELY VIEWABLE
FNDSCRL  ICM   R14,15,FNDOFF       BASIS FOR NEW OFFSET
         BZ    *+6                 ZERO SO HAVE NEW TARGET
         BCTR  R14,0               LEFT ONE COL FOR GOOD LUCK
         L     R15,OFFEND
         S     R15,OFFSET          GET EFFECTIVE SCREEN WIDTH
         ST    R14,OFFSET          PRELIMINARY NEW OFFSET
         AR    R14,R15             ADD SCREEN WIDTH
         C     R14,RECSIZE         LONGER THAN RECSIZE?
         BNH   FNDSCRLX            NO, SCROLLING CALC ALL DONE
         L     R14,RECSIZE         GET MAX RECORD SIZE
         SR    R14,R15             SUBTRACT SCREEN WIDTH
         BNM   *+6                 NON-NEGATIVE IS OKAY
         SR    R14,R14             MAKE NEGATIVE OFFSET ZERO
         ST    R14,OFFSET          THAT'S IT
FNDSCRLX DS    0H                  END OF LEFT/RIGHT FOR FIND
         TM    STATUS4,$4ATTN      ATTENTION FLAG SET?
         BO    FILLSCR             YES, STOP PRONTO
         TM    FINDSW,FVRT         ANY VERTICAL SCROLLING?
         BZ    FINDLN3             NO
         TM    FINDSW,FBAK         SEARCHING BACKWARDS?
         BZ    FINDLN0             NO
         ICM   R0,15,FNDNUM        YES, GET RECORD NUMBER OF TEXT
         BNP   TOP                 BYPASS INVALID NUMBER FOR LISTAT
         BCT   R0,LISTAT           MAKE IT THE SECOND LINE
         B     FILLSCR             DON'T SCROLL UP FOR FIRST RECORD
FINDLN0  LH    R6,PAGESIZE
         C     R6,FNDNUM           FOUND TEXT IN LAST HELD RECORD?
         BNH   FINDLN1             YES, GO DOWN PAGESIZE MINUS 2
         L     R6,FNDNUM           NO, GO DOWN RECORD-NUMBER MINUS 2
FINDLN1  SH    R6,HW2
         BNP   FILLSCR             LEAVE AT TOP FOR RECORDS 1 AND 2
FINDLN2  ST    R6,DOWNAMT
         BAS   R14,DOWNER
         B     FILLSCR
FINDLN3  L     R7,HOLDTOP          POINT TO ENTRY FOR TOP DATA LINE
         L     R6,FNDNUM           GET LINE TO BE MADE VISIBLE
         S     R6,DIRNUM(,R7)      GET LINES PAST TOP SCREEN LINE
         C     R6,FW1              FOUND DATA IN FIRST TWO DATA LINES?
         BNH   FILLSCR             YES, DO NOT SCROLL VERTICALLY
         LA    R1,1(,R6)           NO, GET VISIBLE LINE REQUIREMENT
         C     R1,ISPFPAGE         SUFFICIENT VISIBLE LINES?
         BNH   FILLSCR             YES, NO NEED FOR VERTICAL SCROLL
         BCTR  R6,0                NO, GET THE SCROLL AMOUNT
         B     FINDLN2             MOVE FOUND DATA TO VISIBLE LINE
         SPACE
FINDKYTB DC    AL1(1,4),CL8'FIRST   '
         DC    AL1(2,3),CL8'NEXT    '
         DC    AL1(3,3),CL8'PREV    '
         DC    AL1(4,3),CL8'LAST    '
         DC    AL1(5,2),CL8'ALL     '
         DC    AL1(6,3),CL8'REST    '
         DC    AL1(7,3),CL8'WORD    '
         DC    AL1(8,5),CL8'PREFIX  '
         DC    AL1(8,2),CL8'PRE     '
         DC    AL1(9,5),CL8'SUFFIX  '
         DC    AL1(9,2),CL8'SUF     '
         DC    AL1(255,0)
         SPACE
**********************************************************************
*                                                          *         *
*         CONVERT DISPLAY OFFSET TO RECORD OFFSET          *  GP@FT  *
*                                                          *  01/96  *
**********************************************************************
         SPACE
DSP2RECO TM    MODE,MD_HEX         IN HEXADECIMAL MODE?
         BZ    *+8                 NO
         SRL   R1,1                YES, HALVE APPARENT SCREEN OFFSET
         TM    STATUS16,$16XX      IN EXTENDED HEXADECIMAL MODE?
         BZ    *+8                 NO
         SRL   R1,2                YES, QUARTER APPARENT SCREEN OFFSET
         TM    STATUS16,$16XR      IN HEXADECIMAL-ON-RIGHT MODE?
         BZ    D2ROXROK            NO
         STM   R14,R1,12(R13)      YES, SAVE SOME REGISTERS
         L     R15,SCRNCOLS        GET SCREEN WIDTH
         SRL   R15,2               QUARTER IT
         CR    R1,R15              CURSOR IN LEFT QUARTER OF SCREEN?
         BL    D2ROXRX             YES, USE THIS OFFSET
         SR    R1,R15              NO, GET OFFSET IN REST-OF-SCREEN
         SR    R0,R0               PREPARE FOR DIVIDE
         LA    R15,3               GET SCALING DOWN FACTOR
         DR    R0,R15              GET ONE THIRD OF THIS OFFSET
D2ROXRX  LM    R14,R0,12(R13)      RESTORE REGISTERS
D2ROXROK A     R1,OFFSET           GET OFFSET INTO RECORD
         TM    MODE,MD_FMT         IN GENERAL FORMATTING MODE?
         BNOR  R14                 NO, RETURN
         TM    MODE,MD_HEX         IN HEXADECIMAL MODE?
         BOR   R14                 YES, SO CAN'T BE FORMATTING, RETURN
         STM   R14,R12,12(R13)     SAVE REGISTERS
         L     R14,FMTAREA         POINT TO FORMATTING DYNAMIC AREA
         ST    R14,8(,R13)         CHAIN SAVE AREAS
         ST    R13,4(,R14)
         LR    R13,R14             POINT TO NEW SAVE AREA
         USING @FMTAREA,R13
         TM    STATUS14,$14AS      BROWSING ADDRESS SPACE?
         BO    D2ROBRVS            YES, USE HARD-CODED LOGIC
         ICM   R7,15,LEFTFEL       POINT TO LEFT-MOST FEL
         BNP   DSP2RECX            INVALID SO RIGHT OF RIGHT-MOST ITEM
         L     R8,LEFTFELO         LOAD ITS RECORD OFFSET
         S     R1,OFFSET           GET SCREEN OFFSET AGAIN
         L     R0,FMTFELAD         POINT TO FIRST UNUSED FEL
D2ROLOOP ICM   R14,3,FELDSPLN(R7)  ZERO DISPLAY LENGTH?
         BZ    D2RONEXT            YES, IGNORE THIS FEL
         LH    R6,FELDSPOF(,R7)    GET THE ITEM SCREEN DISPLAY OFFSET
         AH    R6,FELDSPLN(,R7)    ADD THE ITEM DISPLAY LENGTH
         CR    R1,R6               WAS CURSOR IN THIS ITEM "COLUMN"
         BL    D2ROITEM            YES
D2RONEXT AH    R8,FELSYMLN(,R7)    GET RECORD OFFSET OF NEXT ITEM
         LA    R7,FELSIZE(,R7)     POINT TO THE NEXT FEL
         CR    R7,R0               WAS THAT THE LAST FEL?
         BL    D2ROLOOP            NO, CONTINUE
         LR    R1,R8               YES, GET LATEST OFFSET
         B     DSP2RECX            USE IT
D2ROBRVS SR    R0,R0               CLEAR FOR DIVIDE
         LA    R15,11
         DR    R0,R15              GET WORD
         SRA   R0,1                HALVE REMAINDER - AS FOR HEX ON
         CH    R0,HW4              BEYOND THIS WORD?
         BNH   *+8                 NO
         LA    R0,4                YES, JUST GO TO NEXT WORD
         SLA   R1,2                CONVERT WORD OFFSET TO BYTE OFFSET
         AR    R1,R0               COMBINE BYTE OFFSETS
         B     DSP2RECX
D2ROITEM SH    R1,FELDSPOF(,R7)    GET OFFSET INTO ITEM
         TM    FELSYMFG(R7),FELHEX HEXADECIMAL DATA?
         BZ    *+8                 NO
         SRL   R1,1                YES, HALVE BYTES-INTO-ITEM
         TM    FELSYMFG(R7),FELBIN BINARY INTEGER?
         BZ    *+8                 NO
         SRL   R1,2                YES, QUARTER BYTES-INTO-ITEM
         TM    FELSYMFG(R7),FELBIT BIT STRING?
         BZ    *+8                 NO
         SRL   R1,3                YES, EIGHTH BYTES-INTO-ITEM
         CH    R1,FELSYMLN(,R7)    LONGER INTO ITEM THAN ITEM SIZE?
         BNH   *+8                 NO
         LH    R1,FELSYMLN(,R7)    YES, USE ITEM SIZE
         AR    R1,R8               GET RECORD OFFSET
         DROP  R13                 @FMTAREA
DSP2RECX L     R13,4(,R13)         POINT TO PREVIOUS SAVE AREA
         OI    11(R13),X'01'       INVALIDATE FORWARD POINTER
         ST    R1,24(,R13)         UPDATE THE R1 SLOT
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER
         SPACE
************************************************************
*                                                          *
*         MEMBER                                           *
*                                                          *
************************************************************
         SPACE
MEMBERP  DS    0H
         TM    DCBDSORG,X'02'      USING BPAM DCB?
         BZ    MEMPDS              NO, BRANCH
         TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BZ    ERRMISS             NO, MISSING OPERAND
         LA    R15,OPD1            GET FIRST OPERAND ENTRY
         ST    R15,16(,R13)        SAVE OPERAND DETAILS FOR ERRINV
**       TM    OPD1+6,QUOTED       IS OPERAND QUOTED?
**       BO    ERRINV              YES, ALLOW ACCESS TO UNUSUAL NAME
         LH    R1,OPD1+4           GET LENGTH
         LTR   R1,R1               IS IT NULL STRING?
         BZ    ERRMISS             YES, ERROR
         CH    R1,HW8              IS LENGTH MORE THAN 8?
         BH    ERRINV              YES, ERROR
         MVC   BLDLNAME,BLANKS
         L     R14,OPD1            GET ADDRESS OF DATA
         BCTR  R1,0
         EX    R1,MEMMVC
TOPOFMEM BLDL  (R4),BLDL
         NI    STATUS6,255-HELNEWM NEW HELP MEMBER SELECTION NOW DONE
         LTR   R15,R15
         BNZ   MEMERR
         TM    STATUS8,$8_S        'S' DIRECTORY LIST SELECTION?
         BNO   SELMEMOK            NO, DO NOT COMPARE BLDL RESULTS
         NI    STATUS8,255-$8_S    YES, RESET FLAG
         CLI   MSGDSN+2,0          IS R OF TTR ZERO?
         BE    SELMEMOK            YES, $8_S JUST FOR ERROR HANDLING
         CLC   BLDLCNCT,MSGDSN+3   MEMBER IN SAME DATA SET?
         BE    SELMEMOK            YES, SELECTED MEMBER IS GOOD
         BH    MEMERR              NO, NOT FOUND IN THAT DATA SET
         MVC   BLDLTTRP(54),MSGDSN NO, FETCH DATA FROM LATER DATA SET
SELMEMOK NI    STATUS,255-STNOMEM  MEMBER FOUND
         MVC   $MEMBER,BLDLNAME    UPDATE CURRENT MEMBER NAME
         TM    STATUS6,HELNEWS     NEW SUBCOMMAND NAME ALSO SUPPLIED?
         BO    *+10                YES
         MVC   $SUBCOM,BLANKS      NO, RESET HELP SUBCOMMAND NAME
         L     R15,BLDLTTRP        GET MEMBER START TTR
         TM    STATUS14,$14BIG     USING 32-BIT NOTE/POINT VALUES?
         BNO   *+8                 NO
         SRL   R15,8               YES, CONVERT TTR0 TO TTTR
         L     R1,CHKPTTOP
         ST    R15,4(,R1)          SAVE TOP TTR FOR MEMBER
         XASAM24
         FIND  (R4),BLDLTTRP,C     POINT TO THE NEW MEMBER'S DATA
         XASAM31
MEMFOUND MVC   DSNAIM(46),$DSNAME
         SR    R15,R15
         ICM   R15,1,BLDLCNCT      GET CONCATENATION NUMBER
         STC   R15,$CONCAT         REMEMBER IT FOR MEMBER LIST
         BZ    NOCONCAT
         CLI   ARLRCODE,0          WERE ALL JFCBS READ?
         BNE   USEDDNAM            NO
         ICM   R1,15,ARLAREA       POINT TO FIRST RETRIEVED JFCB
         BZ    USEDDNAM            THERE ARE NONE (BACK LEVEL DFP)
NEXTJFCB BCT   R15,JFCBLOOP        CHAIN THROUGH JFCBS
         B     GOTJFCB             NOW POINTING TO CORRECT JFCB
JFCBLOOP AH    R1,0(,R1)           POINT TO NEXT JFCB
         B     NEXTJFCB            PROCESS IT
GOTJFCB  MVC   DSNAIM+2(44),4(R1)  COPY DATA SET NAME FROM JFCB
         LA    R0,44               GET MAXIMUM DATA SET NAME LENGTH
         LA    R1,DSNAIM+45        POINT TO LAST DATA SET NAME CHAR
CNCTLNLP CLI   0(R1),C' '          TRAILING BLANK?
         BNE   GOTDSNLN            NO, NOW HAVE NEW $DSNAME LENGTH
         BCTR  R1,0                YES, POINT TO PREVIOUS CHARACTER
         BCT   R0,CNCTLNLP         DECREMENT LENGTH AND TEST PREVIOUS
GOTDSNLN STH   R0,DSNAIM           SAVE DATA SET NAME LENGTH
         B     NOCONCAT            SKIP DDNAME HEADING CODE
USEDDNAM DS    0H
         MVC   DSNAIM(10),$DDNAML  SHOW DDNAME INSTEAD OF DSNAME
         CVD   R15,DOUBLE          APPEND
         OI    DOUBLE+7,X'0F'       CONCAT     ENSURE $DDNAME IS NOT
         LH    R15,$DDNAML           NUMBER                   CORRUPTED
         LA    R0,4(,R15)             TO DDNAME
         LA    R15,DSNAIM+2(R15)        SO IT
         UNPK  1(3,R15),DOUBLE+6(2)      BECOMES
         MVI   0(R15),C'+'                DDNAME+NNN
         STH   R0,DSNAIM           SET LENGTH OF RESULTANT STRING
NOCONCAT DS    0H
         XC    DEBLOCKS(12),DEBLOCKS
         SR    R0,R0
         ST    R0,CHKPTBOT         ZERO CHKPT TABLE
         ST    R0,FNDNUM           RESET LAST-FOUND RECORD NUMBER
         ST    R0,FNDOFF           RESET LAST-FOUND OFFSET
         ST    R0,COUNT            RESET LOGICAL RECORD COUNT
         ST    R0,KOUNTHI
         ST    R0,KOUNT            RESET BYTE COUNT
         ST    R0,MAXPOINT         RESET FURTHEST RECORD READ
         MVI   SYNADSW,X'00'       RESET SYNAD ERROR FLAG
         TM    MODE,MD_OFFLD       HERE TO OFFLOAD?
         BO    MEMOFFLD            YES
         NI    FINDSW2,255-FALL    RESET 'ALL' STATUS
         BAS   R14,FREEHSE         FREE ANY ALLOCATED HSE STORAGE AREAS
         ICM   R15,15,DIVORG       DIV AVAILABLE?
         BNP   GETNEWNM            NO
         LA    R0,12               YES, GET ENTRY CODE (PAGE RELEASE)
         L     R15,DIVADDR2        LOAD REVDIV ENTRY POINT
         BASR  R14,R15             CALL IT
         NI    STATUS13,255-$13_L  RESET PRE-LOADED DATA FLAG
GETNEWNM L     R5,=A(NEWNAME)
         BR    R5
MEMOFFLD L     R7,=A(MEMRDWRT)     POINT TO OFFLOAD ROUTINE
         BR    R7                  JUST READ AND WRITE RECORDS
MEMMVC   MVC   BLDLNAME(0),0(R14)  <<< EXECUTED >>>
MEMERR   NI    STATUS9,255-$9_H-$9_M     CANCEL ANY HISTORY/MAP REQUEST
         NI    STATUS6,255-HELFF-HELPARS     SKIP OTHER HELP PROCESSING
         MVI   MSG,36              MEMBER NOT FOUND
         CH    R15,HW4
         BE    MEMERR2
         MVI   MSG,37              BLDL FAILED
MEMERR2  TM    MODE,MD_OFFLD       HERE TO OFFLOAD?
         BO    EXITRC              YES, JUST RETURN
         TM    STATUS8,$8_S        'S' DIRECTORY LIST SELECTION?
         BNO   MEMERRX             NO, STAY IN REVIEW2
         NI    STATUS8,255-$8_S    YES, RESET FLAG
         MVC   $MEMBER,BLDLNAME    RESTORE MEMBER NAME
         B     EXITRC              RETURN TO DIRECTORY LIST
MEMERRX  TM    STATUS,STNOMEM      LOOKING AT A MEMBER?
         BO    NOCONCAT            NO, DO A BIT OF RESETTING
         B     PROMPT
MEMPDS   MVI   MSG,38              DATA SET IS NOT PARTITIONED
         B     PROMPT
         SPACE
************************************************************
*                                                          *
*         SUBROUTINE TO CONVERT DATA TO HEX                *
*                                                          *
************************************************************
         SPACE
HEX      MVC   1(1,R15),0(R1)      MOVE BYTE
         UNPK  0(3,R15),1(2,R15)   UNPACK
         TR    0(2,R15),HEXTAB-240
         TM    STATUS16,$16XC      SHOWING KEYBOARD CHARACTERS?
         BZ    HEXEXIT             NO, LEAVE HEX ON SHOW
         TM    MODE,MD_HEX         HEX MODE DISPLAY?
         BZ    HEXEXIT             NO, LEAVE HEX ON SHOW
         CLI   0(R1),X'00'         IS DATA BYTE A NULL?
         BE    HEXNULL             YES
         TM    MODE,MD_ASCII       TRANSLATING ASCII?
         BNO   HEX_EBC             NO
         CLI   0(R1),X'20'         TOO LOW FOR A CHARACTER?
         BL    HEXEXIT             YES, LEAVE HEX ON SHOW
         CLI   0(R1),X'7F'         TOO HIGH FOR A CHARACTER?
         BH    HEXEXIT             YES, LEAVE HEX ON SHOW
         MVI   0(R15),C' '         SET 1ST DIGIT TO BLANK
         MVC   1(1,R15),0(R1)      SET 2ND DIGIT TO ASCII CODE POINT
         STM   R14,R1,SBASAVE      SAVE WORK REGISTERS
         LA    R1,1(,R15)          POINT TO CHARACTER TO TRANSLATE
         LA    R0,1                GET ITS LENGTH
         XLATE (1),(0),TO=E        PERFORM TRANSLATION
         LM    R14,R1,SBASAVE      RESTORE WORK REGISTERS
         B     HEXGREEN
HEXNULL  MVI   0(R15),C'_'         REPLACE 1ST HEX ZERO DIGIT
         MVI   1(R15),C'_'         REPLACE 2ND HEX ZERO DIGIT
         B     HEXGREEN
HEX_EBC  STM   R15,R2,SBASAVE      SAVE REGISTERS
         L     R15,=A(KEYBDTST)    ADDRESS TRANSLATE TABLE
         TRT   0(1,R1),0(R15)      IS THE BYTE A "KEYBOARD CHARACTER"?
         LM    R15,R2,SBASAVE      RESTORE REGISTERS
         BNZ   HEXEXIT             NO, LEAVE HEX ON DISPLAY
         MVI   0(R15),C' '         SET 1ST DIGIT TO BLANK
         MVC   1(1,R15),0(R1)      SET 2ND DIGIT TO EBCDIC CODE POINT
HEXGREEN A     R15,SCREENSZ        POINT TO THE SHADOW BUFFER
         MVC   0(1,R15),CHRCOLOR   SWITCH HEX COLOUR TO CHAR COLOUR
         MVC   1(1,R15),0(R15)     SET BOTH BYTES TO SAME COLOUR
         S     R15,SCREENSZ        POINT BACK TO PRIMARY BUFFER
HEXEXIT  LA    R15,2(,R15)         INCREMENT OUTPUT PTR
         LA    R1,1(,R1)           INCREMENT INPUT PTR
         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP
         MVI   0(R15),C' '         BLANK THE TRAILING BYTE
         BR    R14                 RETURN TO CALLER
         SPACE
HEXTAB   DC    C'0123456789ABCDEF' HEXADECIMAL DIGIT TRANSLATE TABLE
         SPACE
**********************************************************************
*                                                          *         *
*         EXTRACT ICF COMPONENT DETAILS FROM VVDS          *  GP@P6  *
*                                                          *  04/88  *
**********************************************************************
         SPACE
VVDSSCAN BAS   R14,GET             GET A VVDS RECORD
         LTR   R2,R2               END-OF-FILE?
         BZ    END                 YES, DETAILS NOT FOUND - VVDS ERROR
         CLI   4(R2),C'Z'          NO, IS IT A PRIMARY VVR HEADER?
         BNE   VVDSSCAN            NO, GET THE NEXT RECORD
         LH    R1,$DSNAME          YES, GET LENGTH CODE FOR COMPARE
         EX    R1,VVDSCMPR         PRIMARY VVR FOR CORRECT COMPONENT?
         BNE   VVDSSCAN            NO, GET THE NEXT RECORD
         MVC   DSORGTYP,5(R2)      YES, COPY VVRFLAG
         NI    DSORGTYP,VVRCOMTP   JUST KEEP COMPONENT TYPE (D/I)
         LA    R1,2                COUNT VVR LENGTH FIELD
         AH    R1,2(,R2)           ADD LENGTH OF HEADER CELL
VVRLOOP  LA    R6,0(R1,R2)         POINT TO NEXT CELL
         CLI   2(R6),X'60'         AMDSB CELL?
         BE    GOTAMDSB            YES, GO EXTRACT USEFUL DATA
         CLI   2(R6),X'23'         VOLUME INFORMATION CELL?
         BE    GOTVICEL            YES, GO EXTRACT USEFUL DATA
VVRNEXT  SR    R15,R15             NO
         ICM   R15,3,0(R6)         GET LENGTH OF THIS CELL
         AR    R1,R15              ACCUMULATE LENGTH
         CH    R1,0(,R2)           SCANNED ENTIRE VVR?
         BNL   END                 YES, TERMINATE VVDS SCAN
         B     VVRLOOP             NO, PROCESS NEXT VVR
VVDSCMPR CLC   CMDAREA+1(0),10(R2) <<< EXECUTED >>>
GOTAMDSB MVC   AMATR,3(R6)         COPY ATTRIBUTE FLAG BYTE
         MVC   AMKEY,8(R6)         COPY RECORD KEY OFFSET AND LENGTH
         MVC   AMCIV(8),22(R6)     COPY CISIZE AND MAXIMUM RECORD SIZE
         MVC   AMNLR,62(R6)        COPY THE LOGICAL RECORD COUNT
         MVC   AMASP,82(R6)        COPY THE FREE SPACE BYTE COUNT
         B     VVRNEXT             NOW HAVE REQUIRED DATA FROM CELL
GOTVICEL MVC   AMBLKSZ,19(R6)      COPY BLOCKSIZE
         MVC   AMCASZ,24(R6)       COPY TRACKS PER CA (ASSUME < 256)
         B     VVRNEXT             NOW HAVE REQUIRED DATA FROM CELL
         SPACE
************************************************************
*                                                          *
*         SUBROUTINE TO GET A LOGICAL RECORD               *
*                                                          *
************************************************************
         SPACE
*
*               INPUT
*                R4        -  DCB ADDRESS
*                CHKPTTOP  -  TOP OF CHECKPOINT TABLE
*                CHKPTBOT  -  BOTTOM OF CHECKPOINT TABLE, ZERO 1ST TIME
*                COUNT     -  LAST LOGICAL RECORD NUMBER READ
*                BLOCKPTR  -  ADDRESS OF BUFFER
*                DEBLOCKS  -  DEBLOCKING INFO (ZEROS FIRST TIME)
*                SPANPTR   -  ADDRESS OF AREA TO COMBINE
*                             SPANNED RECORD SEGMENTS
*
*               OUTPUT
*                 R1 CONTAINS LENGTH OF RECORD (OR -1 IF END-OF-FILE)
*                 R2 CONTAINS ADDRESS OF RECORD (OR 0 IF END-OF-FILE)
*
GET      ST    R14,READR
         TM    $UCBAD,$ACB         ACCESSING FILE VIA AN ACB?
         BZ    READDCB             NO, VIA A DCB
         L     R15,=A(ACBREAD)     YES, GET ENTRY POINT OF ROUTINE
         BR    R15                 INVOKE IT
READDCB  ICM   R0,15,SAVSPANL      ARE SPANNED RECORDS POSSIBLE?
         BZ    READGET             NO
         L     R1,SPANPTR          YES, POINT TO SPANNED RECORD AREA
         XC    0(2,R1),0(R1)       RESET CUMULATIVE RECORD LENGTH
READGET  TM    MODE,MD_VSAM        VSAM CI INTERPRETATION?
         BO    READVSAM            YES
         TM    MODE,MD_OFFLD       HERE TO OFFLOAD?
         BO    READDBLK            YES, JUST READ IT
         L     R0,DIVHICNT         GET LAST RECORD NUMBER IN DIV
         C     R0,COUNT            STORED THIS RECORD IN DIV?
         BL    READDBLK            NO, PROCEED WITH DEBLOCKING
         OC    KOUNT64,KOUNT64     ANY DATA DIGESTED YET?
         BZ    READDBLK            NO, NO POINT SEARCHING DIV
         TM    STATUS8,DIVFULL     STORED ALL DATA SO FAR IN DIV?
         BZ    READOLD             YES, RETRIEVE RECORD FROM DIV
READDBLK TM    DCBRECFM,X'10'      BLOCKED?
         BZ    READI               NO, BRANCH
         TM    DCBRECFM,X'C0'      UNDEFINED?
         BO    READI               YES, BRANCH
         LM    R0,R2,DEBLOCKS      GET DEBLOCKING STATUS
         AR    R2,R1               POINT TO NEXT RECORD
         CR    R2,R0               END OF BLOCK (OR FIRST TIME)?
         BNL   READI               YES, BRANCH
         TM    TSTRECFM,X'40'      VARIABLE LENGTH?
         BO    READVB              YES, BRANCH
         ST    R2,DEBLOCKS+8       FIXED BLOCKED
         B     READX
READI    LA    R5,CHKPTDUM         JUST IN CASE OF OFFLOAD
         TM    MODE,MD_OFFLD       HERE TO OFFLOAD?
         BO    READSPAN            YES, JUST READ IT
         ICM   R5,15,CHKPTBOT      GET LAST CHECKPOINT
         BNZ   READNF              PROCESS IT
         L     R5,CHKPTTOP         FIRST READ SO NOTHING READ YET
         B     READNEW             READING A RECORD NOT READ BEFORE
READNF   L     R1,0(,R5)           GET NUMBER OF HIGHEST RECORD READ
         LTR   R1,R1               WAS IT EOF?
         BM    READOLD             YES, BRANCH
         C     R1,COUNT            HAVE WE READ THIS RECORD BEFORE?
         BL    READADD             NO, BRANCH   (BNH CAUSED DUP CHKPTS)
         BE    READSAME            YES, BUT LET ENTRY GET UPDATED
READOLD  LA    R5,CHKPTDUM         DON'T CHANGE CHKPT TABLE
READSAME ICM   R0,15,DIVORG        DIV AVAILABLE?
         BNP   READ                NO
         LA    R0,8                YES, GET ENTRY CODE (RECORD FETCH)
         L     R15,DIVADDR2        LOAD REVDIV ENTRY POINT
         BASR  R14,R15             CALL IT
         LTR   R15,R15             SUCCESSFUL RETRIEVAL?
         BNZ   READ                NO, PROCEED AS IF NO DIV
         B     READFALL            YES, RETURN
READADD  LA    R5,CHKPTLN(,R5)     ADD AN ENTRY TO THE CHKPT TABLE
         C     R5,ENDPTR           IS TABLE FILLED UP?
         BL    READNEW             NO, SKIP NEXT INSTR
         BAS   R14,READHALF        YES, HALVE THE TABLE
READNEW  ST    R5,CHKPTBOT         SAVE NEW CURRENT CHECKPOINT POINTER
READ     MVC   0(4,R5),COUNT
         XC    4(4,R5),4(R5)
         TM    STATUS,STNOMEM      ARE WE IN MEMBER-NOT-FOUND STATUS?
         BO    DYNEOD              YES, JUST GO TO END-OF-FILE
         XC    DOUBLE,DOUBLE       RESET VSAM SPANNING STATUS
READSPAN L     R2,BLOCKPTR
         XASAM24
         READ  DYNDECBW,SF,(R4),(R2),'S',MF=E
         NI    SYNADSW,X'F0'       ZERO SOME BITS FOR THIS CHECK
         CHECK DYNDECBW
         XASAM31
         CLI   SYNADSW,X'FF'       WAS SYNAD EXIT TAKEN JUST NOW?
         BE    DYNEOD              YES, BRANCH
         LH    R1,DCBBLKSI
         A     R1,SAVKEYLE
         L     R14,DYNDECBW+16
         SH    R1,14(,R14)         SUBTRACT RESIDUAL COUNT
         AIF   (NOT &ENVBIG).VARCHEK
         USING DCBE,DYNDCBEW
         TM    DCBEFLG1,DCBESLBI   ALLOWING BLOCKS LONGER THAN 32KB?
         BZ    VARCHECK            NO, HAVE BLOCK SIZE AS EXPECTED
         AHI   R14,-12             YES, BACK UP 12 BYTES
         L     R1,0(,R14)          LOAD THE ACTUAL BLOCK SIZE
         TM    DCBRECFM,X'50'      UNDEFINED, VARIABLE OR BLOCKED?
         BNZ   VARCHECK            YES, SO NOT FIXED UNBLOCKED
         L     R1,DCBEBLKSI        NO, SO FIXED UNBLOCKED
VARCHECK DS    0H
.VARCHEK ANOP
         TM    TSTRECFM,X'40'      VARIABLE LENGTH RECORDS?
         BZ    OKREAD              NO, BRANCH
         LH    R1,0(,R2)           YES, GET LENGTH FROM BDW
         AIF   (NOT &ENVBIG).BDWGOOD
         TM    DCBEFLG1,DCBESLBI   ALLOWING BLOCKS LONGER THAN 32KB?
         BZ    BDWGOOD             NO, HAVE BLOCK SIZE AS EXPECTED
         LTR   R1,R1               NON-EXTENDED BDW?
         BNM   BDWGOOD             YES
         L     R1,0(,R2)           NO, LOAD WHOLE EXTENDED BDW
         LA    R1,0(,R1)           RESET BDW TYPE FLAG (SIGN BIT)
.BDWGOOD ANOP
BDWGOOD  CH    R1,HW8              BDW LENGTH < 8?
         BL    BLKEOD              YES, BAD BLOCK SO FORCE EOF
         ICM   R0,3,2(R2)          IS 2ND HALF OF BDW NULL?
         BNZ   BLKEOD              NO, SEEMS LIKE A BAD BLOCK
         LA    R14,4               GET LENGTH OF BDW
         SR    R0,R0               CLEAR FOR INSERTS
VARCHKLP LA    R15,0(R14,R2)       POINT TO NEXT RECORD OR SEGMENT
         CLI   0(R15),X'80'        INVALID RDW?
         BH    BLKEOD              YES, NOT SUPPORTED OR JUST ERROR
         BE    NULSEGCK            CHECK FOR NULL SEGMENT
         ICM   R0,3,0(R15)         GET THE RECORD/SEGMENT LENGTH
         CH    R0,HW4              IS IT LESS THAN 4?
         BL    BLKEOD              YES, INVALID
         CLM   R0,3,DCBLRECL       IS IT LARGER THEN THE RECORD SIZE?
         BH    BLKEOD              YES, INVALID
         AR    R14,R0              ACCUMULATE LENGTHS
         CR    R14,R1              CHECK FOR END OF BLOCK
         BH    BLKEOD              PAST IT SO BAD BLOCK
         BL    VARCHKLP            PROCESS NEXT RECORD/SEGMENT
OKREAD   LA    R0,0(R1,R2)         END OF BLOCK
         STM   R0,R2,DEBLOCKS      SAVE STATUS INFO
         TM    DCBMACF1,DCBMRPT1   NOTE/POINT ALLOWED?
         BZ    NOTED               NO
         XASAM24
         NOTE  (R4)
         XASAM31
         ST    R1,TTR              SAVE CI ADDRESS FOR REREAD
         ICM   R0,15,4(R5)         IS THIS 2ND READ PER GET?
         BNZ   NOTED               YES, DON'T SAVE IN CHKPT
         ST    R1,4(,R5)           SAVE TTR IN TABLE
         MVC   11(1,R5),$CONCAT    SAVE RELATIVE VOLUME NUMBER
NOTED    DS    0H
         LM    R0,R1,DEBLOCKS      RESTORE BLOCK END AND LENGTH
         TM    STATUS13,$13COMP    PROCESSING A COMPRESS REQUEST?
         BO    READX               YES, TREAT BLOCK AS ONE RECORD
         TM    MODE,MD_VSAM        VSAM CI INTERPRETATION?
         BO    OKRDVSAM            YES
         TM    DCBRECFM,X'C0'      UNDEFINED?
         BNM   READX               YES, RECFM=U
         TM    DCBRECFM,X'50'      VARIABLE OR BLOCKED?
         BZ    READX               NO, FIXED UNBLOCKED SO RECFM=F
         TM    DCBRECFM,X'40'      VARIABLE LENGTH?
         BO    READVBI             YES, BDW EXISTS
         CLC   DCBLRECL,DCBBLKSI   RECFM=FB BUT DOES BLKSIZE=LRECL?
         BNL   READX               YES, TREAT THE TURKEY AS RECFM=F
         LH    R1,DCBLRECL         FIXED BLOCKED
         ST    R1,DEBLOCKS+4       SAVE STATUS INFO
         B     READX
READVBI  LA    R2,4(,R2)           POINT PAST BDW
READVB   TM    DCBRECFM,X'08'      SPANNED
         BO    READVBS
READVBR  LH    R1,0(,R2)
         STM   R1,R2,DEBLOCKS+4    SAVE STATUS INFO
         B     READX
READVBS  CLI   2(R2),0             SEGMENT?
         BE    READVBR             NO, BRANCH
*               THIRD BYTE IS X'01' FOR FIRST SEGMENT
*                             X'03' FOR MIDDLE SEGMENT
*                             X'02' FOR LAST SEGMENT
         CLI   2(R2),1             FIRST SEGMENT?
         BNE   READSEG2            NO
         L     R14,SPANPTR         ADDRESS TO MOVE TO
         LH    R15,0(,R2)          LENGTH TO MOVE
         LR    R1,R15              LENGTH TO MOVE
         LR    R0,R2               ADDRESS TO MOVE FROM
         MVCL  R14,R0              MOVE SEGMENT RDW AND DATA
         B     READSEGD            GO DEBLOCK NEXT SEGMENT
READSEG2 L     R14,SPANPTR         ADDRESS OF PRIOR SEGMENTS
         LH    R0,0(,R14)          LENGTH OF PRIOR SEGMENTS
         LH    R15,0(,R2)          LENGTH+4 OF NEW SEGMENT
         SH    R15,HW4             LENGTH OF NEW SEGMENT
         LR    R1,R15              LENGTH TO BE MOVED
         AR    R15,R0              COMBINE LENGTHS
         STH   R15,0(,R14)         STORE COMBINED LENGTHS
         LR    R15,R1              LENGTH TO BE MOVED
         AR    R14,R0              ADDRESS TO MOVE TO
         LA    R0,4(,R2)           ADDRESS TO MOVE FROM
         MVCL  R14,R0              MOVE SEGMENT DATA
         CLI   2(R2),2             LAST SEGMENT?
         BNE   READSEGD            NO, GO DEBLOCK NEXT SEGMENT
         LH    R1,0(,R2)           GET LENGTH OF THIS SEGMENT
         STM   R1,R2,DEBLOCKS+4    SAVE LENGTH AND ADDRESS
         L     R2,SPANPTR          POINT TO COMBINED RECORD
         LH    R1,0(,R2)           GET COMBINED LENGTH
         B     READX               EXIT
READSEGD DS    0H                  NOT NECESSARY TO CHECK RECFM X'10'
         LH    R1,0(,R2)           LENGTH
         AR    R2,R1               POINT TO NEXT SEGMENT
         C     R2,DEBLOCKS         END OF BLOCK?
         BNL   READOLD             YES, BRANCH
         B     READVBS             GO PROCESS NEW SEGMENT
READX    TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BZ    READXX              NO
         LTR   R2,R2               END-OF-FILE?
         BZ    READHEND            YES
         CLI   0(R2),C'*'          TSO HELP COMMENT?
         BE    READDCB             YES, DISCARD
         L     R14,TABNUMAD        NO, POINT TO TRANSLATE TABLE
         STM   R1,R2,SBASAVE       SAVE BEFORE TRANSLATE-AND-TEST
         TRT   72(8,R2),0(R14)     RECORD SEQUENCE NUMBER PRESENT?
         LM    R1,R2,SBASAVE       RESTORE AFTER TRANSLATE-AND-TEST
         BNZ   RDHSEQOK            NO, DO NOT BLANK OUT HELP TEXT
         MVC   72(8,R2),BLANKS     YES, BLANK OUT SEQUENCE NUMBERS
RDHSEQOK CLC   =C')I ',0(R2)       INCLUDE SPECIFIED?
         BNE   READXX              NO, SHOW THIS RECORD
         LA    R0,60               GET MAXIMUM SCAN COUNT
         LA    R14,3(,R2)          POINT TO FIRST POSSIBLE SPOT
READINLP CLI   0(R14),C' '         LEADING BLANK?
         BNE   RDGOTINC            NO, FOUND INCLUDE NAME
         LA    R14,1(,R14)         YES, SKIP IT
         BCT   R0,READINLP         LOOK AT NEXT CHARACTER
         B     READXX              NO MEMBER SPECIFIED SO SHOW RECORD
RDGOTINC MVC   BLDLNAME,0(R14)     LOAD INCLUDE MEMBER NAME
         BLDL  (R4),BLDL           VERIFY EXISTENCE OF INCLUDE MEMBER
         LTR   R15,R15             DOES INCLUDE MEMBER EXIST?
         BNZ   READDCB             NO, OMIT RECORD WITHOUT ERROR
         XASAM24
         FIND  (R4),BLDLTTRP,C     POINT TO MEMBER FOR FIRST READ
         XASAM31
         LA    R0,$HSESIZE         GET HEL STATUS ELEMENT LENGTH
         MVI   GETMNTRC,6          TRACK GETMAIN IN CASE OF FAILURE
         GETMAIN R,LV=(0)          GET MAIN STORAGE
         XC    0($HSESIZE,R1),0(R1) CLEAR NEW HSE
         USING @HSESECT,R1
         MVI   HSESIZE+3,$HSESIZE  SET HSE SIZE
         L     R15,HSEACTIV        POINT TO ACTIVE HSE
         ST    R15,HSELINK         SAVE LINK TO OLDER HSE
         ST    R1,HSEACTIV         SAVE NEW HSE ADDRESS
         MVC   HSETTRZ,TTR         SAVE CURRENT TTR
         MVC   HSEDBLK,DEBLOCKS    SAVE DEBLOCKING STATUS
         MVC   HSEMEMN,BLDLNAME    SAVE MEMBER NAME TO BE INCLUDED
         DROP  R1                  @HSESECT
         XC    DEBLOCKS(12),DEBLOCKS      RESET DEBLOCKING STATUS
         B     READDCB             REDRIVE I/O ROUTINE
READHEND ICM   R15,15,HSEACTIV     ANY INCLUSIONS CURRENTLY OCCURRING?
         BNP   READHX              NO
         LR    R1,R15              YES, POINT TO ACTIVE HSE
         USING @HSESECT,R1
         MVC   TTR,HSETTRZ         RESTORE PHYSICAL STATUS INDICATORS
         MVC   DEBLOCKS(12),HSEDBLK
         MVC   HSEACTIV,HSELINK    OLDER HSE WILL BE REACTIVATED
         DROP  R1                  @HSESECT
         LA    R0,$HSESIZE         GET HEL STATUS ELEMENT LENGTH
         FREEMAIN R,LV=(0),A=(1)   FREE STORAGE OF TOP HSE
         MVC   BLDLNAME,$MEMBER    PREPARE FOR NO ACTIVE HSE
         ICM   R1,15,HSEACTIV      ANY HSE ACTIVE?
         BNP   HSEMEMOK            NO
         USING @HSESECT,R1
         MVC   BLDLNAME,HSEMEMN    YES, LOAD MEMBER NAME
         DROP  R1                  @HSESECT
HSEMEMOK BLDL  (R4),BLDL           VERIFY EXISTENCE OF INCLUDE MEMBER
         SR    R2,R2               PREPARE FOR END-OF-FILE SIMULATION
         SR    R1,R1
         BCTR  R1,0
         LTR   R15,R15             OLD MEMBER STILL THERE?
         BNZ   READHEND            NO, IT JUST VANISHED SO SIGNAL EOF
         XASAM24
         FIND  (R4),BLDLTTRP,C     POINT TO PREVIOUS MEMBER START
         POINT (R4),TTR            POINT TO THE INTERRUPTED BLOCK
         L     R2,BLOCKPTR
         READ  DYNDECBW,SF,(R4),(R2),'S',MF=E
         NI    SYNADSW,X'F0'       ZERO SOME BITS FOR THIS CHECK
         CHECK DYNDECBW
         XASAM31
         CLI   SYNADSW,X'FF'       WAS SYNAD EXIT TAKEN JUST NOW?
         BE    DYNEOD              YES, BRANCH
         B     READDCB             DEBLOCK THE NEXT RECORD
READHX   ICM   R0,15,DIVORG        DIV AVAILABLE?
         BNP   READXX              NO
         TM    STATUS8,DIVFULL     DIV STORED EVERYTHING SUCCESSFULLY?
         BO    READXX              NO, NOT EVERYTHING HAS BEEN CACHED
         OI    STATUS13,$13_L      YES, FLAG ALL DATA CACHED IN STORAGE
READXX   TM    STATUS2,$2FAST      "FASTPATH" ACTIVE?
         BO    READXXX             YES, SKIP BYTE COUNT
         CLC   MAXPOINT,COUNT      ALREADY COUNTED THIS RECORD?
         BH    READXXX             YES
         LTR   R0,R1               NO, GET THIS RECORD'S LENGTH
         BM    READXXX             DO NOT COUNT E-O-F MARKER
         TM    TSTRECFM,X'40'      RECFM V?
         BZ    READXVOK            NO
         SH    R0,HW4              DO NOT COUNT RDW AS DATA BYTES
READXVOK AL    R0,KOUNT            ACCUMULATE THE BYTE COUNT
         ST    R0,KOUNT
         BC    12,READXKOK         NO CARRY
         LA    R0,1                CATER FOR 4GB OR MORE
         AL    R0,KOUNTHI
         ST    R0,KOUNTHI
READXKOK LA    R0,1
         A     R0,MAXPOINT         REMEMBER NOT TO COUNT THIS RECORD
         ST    R0,MAXPOINT                         AGAIN
READXXX  TM    MODE,MD_OFFLD       NEED TO RETAIN DATA?
         BO    READFALL            NO, SKIP REREAD HOUSEKEEPING
         ICM   R0,15,DIVORG        DIV AVAILABLE?
         BNP   READDIVX            NO
         LA    R0,4                YES, GET ENTRY CODE (RECORD STORE)
         L     R15,DIVADDR2        LOAD REVDIV ENTRY POINT
         BASR  R14,R15             CALL IT
         LTR   R15,R15             WAS THERE ROOM TO STORE IT?
         BZ    READDIVX            YES, SUCCESS
         ICM   R14,7,$UCBAD3       TALKING TO A PHYSICAL DEVICE?
         BZ    EOSUBSYS            NO, REGRETABLY MUST FORCE E-O-F
READDIVX DS    0H
         L     R15,=A(CHKPTVFY)    INVOKE CHECKPOINT VERIFY ROUTINE
         BASR  R14,R15
READFALL L     R15,=A(FALLREC)     INVOKE "FIND ALL" DISCARD ROUTINE
         BASR  R14,R15
         L     R14,READR
         BR    R14
         SPACE
**********************************************************************
*                                                          *         *
*         VSAM CONTROLINTERVAL PROCESSING                  *  GP@P6  *
*                                                          *  10/87  *
**********************************************************************
         SPACE
READVSAM OC    DEBLOCKS,DEBLOCKS   FIRST READ?
         BZ    READI               YES
         TM    STATUS6,$6DB2       READING DB2 TABLESPACE?
         BO    READDB2             YES
         NI    DEBLOCKS,X'7F'      ENSURE RRDS EMPTY SLOT FLAG IS OFF
         LM    R0,R1,DEBLOCKS+4    GET DEBLOCKING STATUS
         L     R2,DEBLOCKS         GET CIDF POINTER
         L     R5,BLOCKPTR         POINT TO THE START OF THE CI
         AH    R5,0(R2)            POINT PAST END OF CI DATA
         AR    R1,R0               POINT TO NEXT RECORD
         CR    R1,R5               END OF CONTROLINTERVAL DATA?
         BNL   READI               YES, BRANCH
         ST    R1,DEBLOCKS+8       NO, SAVE NEXT RECORD POINTER
         L     R1,BLOCKPTR         POINT TO THE START OF THE CI
         SR    R5,R5
NEXTRDF  SH    R2,HW3              POINT TO "NEXT" RDF
         LA    R0,1                ASSUME ONE RECORD DESCRIBED BY IT
         ICM   R5,3,1(R2)          GET ITS HALFWORD COUNTER
         CLI   0(R2),X'40'         ASSOCIATED WITH RDF TO THE LEFT?
         BNE   RDFLOOP             NO, THE TESTED BYTE SHOULD BE NULL
         SH    R2,HW3              POINT TO ASSOCIATED RDF
         ICM   R0,3,1(R2)          GET ITS HALFWORD COUNTER
RDFLOOP  AR    R1,R5               POINT TO NEXT RECORD
         C     R1,DEBLOCKS+8       PAST THE CURRENT RECORD?
         BH    RDFEXIT             YES, NOW HAVE RECORD'S LENGTH
         BCT   R0,RDFLOOP          NO, KEEP GOING
         B     NEXTRDF             GET MORE RDF'S TO KEEP GOING
RDFEXIT  ST    R5,DEBLOCKS+4       SAVE THE CURRENT RECORD'S LENGTH
MTSLTCHK TM    0(R2),X'04'         EMPTY RRDS SLOT?
         BZ    NOTEMPTY            NO, NOW HAVE VSAM LOGICAL RECORD
         OI    DEBLOCKS,X'80'      YES, FLAG IT AS SUCH
NOTEMPTY LM    R1,R2,DEBLOCKS+4    LOAD RECORD'S LENGTH AND ADDRESS
         B     READX
         SPACE
OKRDVSAM TM    DSORGTYP,VVRCOMTP   INDEX COMPONENT?
         BO    VSAMCIOK            YES, ASSUME ONE BLOCK PER CI
         TM    AMATR,VVRAMSDT      IMBEDDED SEQUENCE SET?
         BZ    NOTIMBED            NO
         SR    R14,R14             YES, A DIVIDE COMING UP
         SR    R15,R15
         ICM   R15,3,TTR           GET THE RELATIVE TRACK NUMBER
         SR    R5,R5
         ICM   R5,1,AMCASZ         GET TRACKS PER CONTROLAREA
         BZ    NOTIMBED            AVOID S0C9 ABEND
         DR    R14,R5              GET RELATIVE TRACK WITHIN CA
         LTR   R14,R14             FIRST TRACK OF CONTROLAREA?
         BZ    VSJUMPSS            YES, SKIP OVER SEQUENCE SET
NOTIMBED TM    STATUS6,$6DB2       READING DB2 TABLESPACE?
         BZ    CILENCHK            NO
         ICM   R15,15,COUNT        FIRST RECORD BEING READ?
         BNZ   CILENCHK            NO
         USING DB2PAGE,R2
         ICM   R15,7,PGNUMBER      FIRST RECORD BEING READ?
         BNZ   CILENCHK            NO
         TM    PGFLAGS,X'18'       HEADER PAGE?
         BNO   NOTHDRPG            NO
         TM    PGFLAGS,X'04'       HEADER PAGE?
         BNZ   NOTHDRPG            NO
         MVC   AMCIV+2(2),HPGPGSZ  YES, ADJUST "CONTROLINTERVAL" SIZE
         B     CILENCHK            HANDLE ANY 4K MULTIPLE PAGE SIZE
         DROP  R2                  DB2PAGE
NOTHDRPG NI    STATUS6,255-$6DB2   SUPPRESS DB2 ROW EXTRACTION
         NI    MODE,255-MD_FMT     DISABLE FORMATTING
         MVC   AMCIV+2(2),HW4096   ADJUST "CONTROLINTERVAL" SIZE
CILENCHK C     R1,AMCIV            BLOCK SHORTER THAN CI?
         BE    VSAMCIOK            NO, PROCESS CONTROLINTERVAL
         BH    DYNEOD              NO, TOO LARGE SO SIGNAL E-O-D
         ST    R1,DEBLOCKS+4       YES, REMEMBER SIZE READ SO FAR
         LR    R2,R0               POINT PAST BLOCK JUST READ
         XASAM24
         READ  DYNDECBW,SF,(R4),(R2),'S',MF=E
         NI    SYNADSW,X'F0'       ZERO SOME BITS FOR THIS CHECK
         CHECK DYNDECBW
         XASAM31
         CLI   SYNADSW,X'FF'       WAS SYNAD EXIT TAKEN JUST NOW?
         BE    DYNEOD              YES, BRANCH
         LH    R1,DCBBLKSI
         L     R14,DYNDECBW+16
         SH    R1,14(,R14)         SUBTRACT RESIDUAL COUNT
         LA    R0,0(R1,R2)         END OF BLOCK
         A     R1,DEBLOCKS+4       ADD PREVIOUSLY READ DATA OF THIS CI
         STM   R0,R1,DEBLOCKS      UPDATE STATUS INFO
         B     CILENCHK            RECHECK FOR END OF CONTROLINTERVAL
VSAMCIOK TM    STATUS6,$6DB2       READING DB2 TABLESPACE?
         BO    OKRDDB2             YES
         L     R2,DEBLOCKS         POINT PAST END OF CI
         SH    R2,HW4              POINT TO CI DEFINITION FIELD
         ST    R2,DEBLOCKS         SAVE CIDF ADDRESS
         ICM   R0,15,0(R2)         NULL CIDF?
         BZ    SOFTEOD             YES, SOFTWARE END-OF-FILE
         SRA   R0,16               NO, EMPTY CONTROLINTERVAL?
         BNZ   VSAMRDF             NO, PROCESS THE DATA RECORD(S)
         ICM   R0,15,AMNLR         YES, GOT RECORD COUNT FROM VVDS?
         BZ    VSAMRDF             NO, PROCESS THE RDF
         C     R0,COUNT            YES, READ EXACTLY ALL RECORDS?
         BH    VSAMSPAN            NO, THROW NULLS AWAY - GET MORE DATA
         BE    SOFTEOD             YES, ASSUME ONLY EMPTY CI'S LEFT
*        BL    VSAMRDF             NO, FILL SCREEN WITH EMPTY CI'S
VSAMRDF  SH    R2,HW3              POINT TO "FIRST" RDF
         MVC   DEBLOCKS+6(2),1(R2) LOAD LENGTH OF FIRST RECORD
         TM    0(R2),X'30'         VSAM SPANNED SEGMENT?
         BNZ   READVSEG            YES, HANDLE IT
         ICM   R1,15,DOUBLE        NO, GET ACCUMULATED SEGMENT LENGTHS
         BZ    MTSLTCHK            ZERO SO SITUATION NORMAL
         SPACE
VSAMTRNC DS    0H                  POINT BACK TO CI JUST READ
         XASAM24
         POINT (R4),TTR            POINT BACK TO CI JUST READ
         XASAM31
         L     R2,SPANPTR          POINT TO TRUNCATED COMBINED RECORD
         L     R1,DOUBLE           GET LENGTH OF SOME OF LOGICAL REC
         B     READX               EXIT (RRDS CAN'T BE SPANNED)
         SPACE
VSJUMPSS SR    R1,R1
         ICM   R1,3,TTR            LOAD THE RELATIVE TRACK NUMBER
         LA    R1,1(,R1)           INCREMENT IT
         STH   R1,TTR              SAVE IT
         MVI   TTR+2,1             START FROM FIRST RECORD OF NEXT TRK
         XASAM24
         POINT (R4),TTR            SKIP ENTIRE SEQUENCE SET TRACK
         XASAM31
VSAMSPAN LA    R5,CHKPTDUM         DON'T CHANGE CHKPT TABLE
         B     READSPAN            IGNORE THIS RECORD AND FETCH NEXT
         SPACE
*               FLAG BYTE HAS X'50' FOR FIRST SEGMENT
*                             X'70' FOR MIDDLE SEGMENT
*                             X'60' FOR LAST SEGMENT
READVSEG CLI   0(R2),X'50'         FIRST SEGMENT?
         BNE   RDVSSEG2            NO
         ICM   R1,15,DOUBLE        YES, GET ACCUMULATED SEGMENT LENGTHS
         BNZ   VSAMTRNC            NON-ZERO SO MUST BE OUT OF ORDER
         L     R14,SPANPTR         ADDRESS TO MOVE TO
         LH    R15,DEBLOCKS+6      LENGTH TO MOVE
         LR    R1,R15              LENGTH TO MOVE
         ST    R1,DOUBLE           SAVE LENGTH SO FAR
         L     R0,DEBLOCKS+8       ADDRESS TO MOVE FROM
         MVCL  R14,R0              MOVE VSAM RECORD SEGMENT
         B     VSAMSPAN            GET NEXT CI FOR NEXT SEGMENT
RDVSSEG2 L     R14,SPANPTR         ADDRESS OF FIRST SEGMENT
         A     R14,DOUBLE          ADDRESS OF THIS SEGMENT
         LH    R15,DEBLOCKS+6      LENGTH TO MOVE
         LR    R1,R15              LENGTH TO MOVE
         A     R1,DOUBLE           ADD PREVIOUS LENGTH
         ST    R1,DOUBLE           SAVE LENGTH SO FAR
         LR    R1,R15              LENGTH TO MOVE
         L     R0,DEBLOCKS+8       ADDRESS TO MOVE FROM
         MVCL  R14,R0              MOVE SEGMENT DATA
         CLI   0(R2),X'60'         LAST SEGMENT?
         BNE   VSAMSPAN            NO, GET NEXT CI FOR NEXT SEGMENT
         L     R2,SPANPTR          YES, POINT TO COMBINED RECORD
         L     R1,DOUBLE           GET COMBINED LENGTH
         B     READX               EXIT
         SPACE
**********************************************************************
*                                                          *         *
*         DB2 TABLESPACE PROCESSING                        *  GP@FT  *
*                                                          *  08/93  *
**********************************************************************
         SPACE
OKRDDB2  LM    R0,R1,DEBLOCKS+4    GET DEBLOCKING STATUS
         L     R2,DEBLOCKS         POINT PAST END OF BLOCK
         SH    R2,HW2              POINT TO "CIDF"
         TM    1(R2),X'C5'         DB2 FORMATTED RECORD?
         BNO   SOFTEOD             NO, END OF DB2 DATA
         TM    11(R1),255-X'02'    DB2 DATA PAGE?  (X'00' OR X'02'?)
         BNZ   READ                NO, READ THE NEXT PAGE
         CLI   18(R1),0            ANY ROWS IN THIS PAGE?
         BE    READ                NO, READ THE NEXT PAGE
         MVI   DEBLOCKS+4,0        YES,
         MVC   DEBLOCKS+5(1),18(R1)     GET THE ROW COUNT FOR THIS PAGE
         MVC   DEBLOCKS+6(2),HW1   GET THE ROW COUNT TO BE RETURNED
READDB2  SR    R1,R1
         ICM   R1,3,DEBLOCKS+6     GET THE ROW-IN-PAGE NUMBER
         CLM   R1,3,DEBLOCKS+4     IS THIS HIGHER THAN THE MAXIMUM?
         BH    READI               YES, READ ANOTHER PAGE
         LA    R1,1(,R1)           NO, GET NEW ROW NUMBER FOR NEXT TIME
         STH   R1,DEBLOCKS+6       SAVE FOR NEXT TIME
         SLL   R1,1                DOUBLE IT FOR INDEX
         L     R2,DEBLOCKS         POINT PAST END OF PAGE
         SLR   R2,R1               POINT TO ROW-IN-PAGE OFFSET
         TM    0(R2),X'80'         EMPTY SLOT?
         BO    READDB2             YES, SKIP IT
         LH    R1,0(R2)            LOAD THIS OFFSET
         L     R2,DEBLOCKS+8       POINT TO THE PAGE
         ALR   R2,R1               POINT TO THE ROW
         USING DB2ROW,R2
         LA    R1,6                GET LENGTH FOR POINTER RECORD
         CLI   PGSFLAGS,X'40'      OVERFLOW POINTER?
         BO    READX               YES, ALREADY HAVE LENGTH
         ICM   R1,3,1(R2)          GET THE ROW LENGTH
         CH    R1,HW6              IS IT VALID?
         BL    READDB2             NO, DISCARD SHORT ROW
         B     READX               RETURN
         DROP  R2                  DB2ROW
         SPACE
************************************************************
*                                                          *
*         REAL/INDICATED/SIMULATED END-OF-FILE HANDLING    *
*                                                          *
************************************************************
         SPACE
EOSUBSYS MVI   SYNADSW,X'FF'       SIMULATE I/O ERROR
         MVC   SYNADMSG,SSEOFMSG   LOAD INFORMATIVE MESSAGE
         NI    STATUS8,255-DIVFULL NO MORE FILE I/O IS TO BE DONE
         B     DYNEOF
SOFTEOD  OI    STATUS2,$2SOFT      REMEMBER EOF WAS SOFTWARE
         L     R5,CHKPTBOT         GET LAST CHECKPOINT
         B     DYNEOF
NULSEGCK CLI   0(R15),X'00'        ACTUALLY A NULL SEGMENT?
         BE    READSPAN            YES, SKIP REST OF THIS BLOCK
BLKEOD   MVI   SYNADSW,X'BD'       SIMULATE I/O ERROR
         MVC   SYNADMSG,BDBLKMSG   LOAD BAD VARIABLE LENGTH DATA MSG
         CVD   R1,DOUBLE
         OI    DOUBLE+7,X'0F'      SHOW LENGTH IN BDW
         UNPK  SYNADMSG+55(5),DOUBLE+5(3)
         UNPK  SYNADMSG+39(9),0(5,R2)
         TR    SYNADMSG+39(8),HEXTAB-240
         MVI   SYNADMSG+47,QUOTE   SHOW WHOLE BDW IN HEX
         ICM   R1,3,DCBBLKSI       LOAD BLOCK SIZE FROM DCB
         CVD   R1,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  SYNADMSG+70(5),DOUBLE+5(3)
DYNEOD   DS    0H
         XASAM24
         TM    DCBMACF1,DCBMRPT1   NOTE/POINT ALLOWED?
         BZ    DYNEOF              NO
         XASAM24
         NOTE  (R4)                DETERMINE ADDRESS OF EOF
         ST    R1,TTR              SAVE A BRANCH
         XASAM31
         CLI   SYNADSW,X'BD'       BLOCK DESCRIPTOR WORD PROBLEM?
         BNE   DYNEOF              NO, LEAVE SYNADMSG AS IT IS
         UNPK  SYNADMSG+24(9),TTR(5)
         TR    SYNADMSG+24(8),HEXTAB-240
         MVI   SYNADMSG+32,C' '    SHOW BAD BLOCK RELATIVE ADDRESS
         TM    STATUS2,$2TAPE      REVIEWING A TAPE?
         BO    DYNEOF              YES, NEED EIGHT DIGITS
         MVC   SYNADMSG+30(2),BLANKS
DYNEOF   MVC   EOFRELAD,TTR        REMEMBER EOF LOCATION
         CLI   TTR+3,0             TTR0 FORMAT?
         BNE   DYNEOF1             NO, DO NOT OVERLAY ANYTHING
         MVC   EOFRELAD+3(1),$CONCAT   NOTE VOLUME AS WELL
DYNEOF1  SR    R1,R1
         BCTR  R1,0                FLAG EOF WITH -1
         ST    R1,0(,R5)           SAVE EOF IN CHKPT TABLE
         SR    R2,R2
         XASAM31
         TM    STATUS2,$2TAPE      TAPE REPOSITIONING REQUIRED?
         BZ    READX               NO
         OI    STATUS2,$2EOT       FLAG END-OF-FILE ENCOUNTERED
         B     READX
         SPACE
************************************************************
*                                                          *
*         CHECKPOINT TABLE COMPRESSION ROUTINE             *
*                                                          *
************************************************************
         SPACE
READHALF LA    R0,CHKPTLN          LENGTH OF EACH ENTRY
         L     R15,CHKPTTOP        POINT TO FIRST ENTRY
         AR    R15,R0              POINT TO SECOND ENTRY
         LR    R1,R15
         AR    R1,R0               POINT TO THIRD ENTRY
*                                  MOVE 3RD TO 2ND
READHMOV MVC   0(CHKPTLN,R15),0(R1)     5TH TO 3RD
*                                       7TH TO 4TH, ETC
         MVI   7(R1),X'FF'         FLAG OLD ENTRY (DEBUG)
         AR    R15,R0              RECEIVING FIELD DOWN 1
         AR    R1,R0               SENDING FIELD DOWN 1
         AR    R1,R0               SENDING FIELD DOWN 2
         CR    R1,R5               ARE WE PAST THE LAST ENTRY?
         BL    READHMOV            NO, BRANCH
         LR    R5,R15              YES, NEW CURRENT POINTER
         BR    R14                 RETURN
         SPACE
**********************************************************************
*                                                          *         *
*         FREE ALL HEL STATUS ELEMENTS ROUTINE             *  GP@FT  *
*                                                          *  08/95  *
**********************************************************************
         SPACE
*      AT THE END OF A BROWSE SESSION, THIS ROUTINE FREES
*      ASSOCIATED STORAGE.  FOR FULL SCREEN HELP, HEL STATUS
*      ELEMENTS DESCRIBING SYSHELP MEMBERS SUSPENDED BY
*      AN INCLUSION OF ANOTHER MEMBER ARE FREED.  FOR
*      PICTURES, THE DECODED PICTURE DATA IS FREED.
*      FOR A BROWSE OF THE ADDRESS SPACE, SYMBOLIC EQUATE
*      STORAGE - WITH PAGE HEADERS DELIBERATELY DESIGNED
*      TO LOOK LIKE HEL STATUS ELEMENTS - ARE FREED.
         SPACE
FREEHSE  ICM   R1,15,HSEACTIV      ANY HSE STORAGE ALLOCATED?
         BZR   R14                 NO, RETURN TO CALLER
         ST    R14,12(,R13)        YES, SAVE RETURN ADDRESS
         ICM   R0,15,PICSTGSZ      GET PICTURE ARRAY STORAGE SIZE
         BNZ   FREEPIC             IT EXISTS SO GO FREE IT
         USING @HSESECT,R1
         MVC   HSEACTIV,HSELINK    SAVE OLDER HSE ADDRESS
         L     R0,HSESIZE          GET HEL STATUS ELEMENT LENGTH
         DROP  R1                  @HSESECT
         FREEMAIN R,LV=(0),A=(1)   FREE STORAGE OF TOP HSE
         L     R14,12(,R13)        RESTORE RETURN ADDRESS
         B     FREEHSE             FREE ALL HSE STORAGE AREAS
         SPACE
FREEPIC  FREEMAIN RU,LV=(0),A=(1),SP=17
         XC    HSEACTIV,HSEACTIV   RESET STORAGE POINTER
         XC    PICDTLS(PICDTLEN),PICDTLS     AND PICTURE STATISTICS
         L     R14,12(,R13)        RESTORE RETURN ADDRESS
         BR    R14                 RETURN TO CALLER
         SPACE
**********************************************************************
*                                                          *         *
*         CANCEL  -  RESET PROFILE CHANGED FLAG AND END    *  GP@P6  *
*                                                          *  10/90  *
**********************************************************************
         SPACE
CANCEL   NI    STATUS,255-STPROF   TURN OFF PROFILE REWRITE FLAG
         B     END                 NOW PERFORM 'END' PROCESSING
         SPACE
**********************************************************************
*                                                          *         *
*         XCTL  -  TRANSFER CONTROL TO TSO HELP COMMAND    *  GP@FT  *
*                                                          *  01/93  *
**********************************************************************
         SPACE
XCTL     TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BZ    CMDINVLD            NO, COMMAND NOT ALLOWED
         OI    STATUS6,HELX        XCTL TO TSO HELP IS REQUIRED
         SPACE
**********************************************************************
*                                                          *         *
*         END OF PROGRAM  -  BYPASS DIRECTORY DISPLAY      * GP@SECV *
*                                                          *  03/86  *
**********************************************************************
         SPACE
EQUALSX  NI    STATUS,255-STPODIR  DO NOT RETURN TO PDS DIRECTORY
         NI    STATUS8,255-$8ZIPF  DO NOT RETURN TO ZIP DIRECTORY
         SPACE
************************************************************
*                                                          *
*         END OF PROGRAM                                   *
*                                                          *
************************************************************
         SPACE
*   FREEHSE IS NOW CALLED TO CLEAN UP HEL STATUS ELEMENTS WHICH EXIST
*   BECAUSE THE FULLSCREEN HELP HAD NOT SCROLLED DOWN FAR ENOUGH TO
*   TO REACH THE END OF THE INCLUDED HELP MEMBER SPECIFIED ON )I.
*   FREEHSE WILL ALSO FREE THE BITMAP PIXEL BYTE ARRAY.
END      BAS   R14,FREEHSE         FREE ANY ALLOCATED HSE STORAGE AREAS
*                                  RESET LRECL OVERRIDE STATUS FLAG
*                                    AND HISTORY/MAP FLAGS
         NI    STATUS9,255-$9F80-$9_H-$9_M
         NI    STATUS7,255-$7TACK  ENSURE APPEND FLAG IS RESET
         NI    FINDSW2,255-FALL    RESET 'ALL' STATUS
         LA    R0,16               GET ENTRY CODE (FREEMAIN)
         TM    DSORG,DS1DSGPO      PARTITIONED ORGANIZATION DATA SET?
         BNO   ENDDIV              NO, FREE THE STORAGE
         TM    STATUS,STPODIR      IN MEMBER SELECT MODE?
         BZ    ENDDIV              NO, FREE THE STORAGE
         TM    STATUS8,$8ZIPD      PROCESSING A ZIP DIRECTORY?
         BO    ENDDIV              YES
         LA    R0,12               GET ENTRY CODE (PAGE RELEASE)
ENDDIV   ICM   R1,15,DIVORG        DIV AVAILABLE?
         BNP   ENDDIVOK            NO
         L     R15,DIVADDR2        LOAD REVDIV ENTRY POINT
         BASR  R14,R15             CALL IT
ENDDIVOK NI    STATUS13,255-$13_L  RESET PRE-LOADED DATA FLAG
         NI    STATUS17,255-$17PIX RESET PIXEL ZOOM-IN FLAG
         NI    STATUS9,255-$9HIST  NO LONGER SHOWING PROGRAM HISTORY
         TM    STATUS14,$14AS      BROWSING ADDRESS SPACE?
         BO    ENDBRVS             YES
         TM    STATUS8,$8ZIPD      PROCESSING A ZIP DIRECTORY?
         BNO   EXIT00              NO
ENDBRVS  NI    STATUS8,255-$8ZIPA  YES, RESET ALL ZIP STATUS FLAGS
         NI    STATUS14,255-$14AS  RESET STORAGE BROWSE FLAG
         NI    MODE,255-MD_FMT     RESET FORMAT MODE FLAG
         ICM   R1,15,FMTAREA       GET FORMATTING DYNAMIC AREA ADDRESS
         BZ    EXIT00              FORMATTING WAS NOT USED - BUT HOW??
         USING @FMTAREA,R1
         L     R0,FMTSIZE          GET FORMAT AREA SUBPOOL AND SIZE
         DROP  R1                  @FMTAREA
         FREEMAIN R,LV=(0),A=(1)   FREE THE FORMATTING DYNAMIC AREA
         XC    FMTAREA,FMTAREA     CLEAR FORMAT AREA ADDRESS
         B     EXIT00
         SPACE
EXIT12   LA    R15,12
         B     EXITRC
EXITS34  OI    STATUS17,$17PAT     FLAG DATA FOUND IN THIS DATA SET
EXIT00   SR    R15,R15
EXITRC   CH    R15,RC
         BNH   *+8
         STH   R15,RC              SET HIGHEST RC
         TM    STATUS,STOPEN       IS IT OPEN?
         BZ    DNCLOSE             NO, BRANCH
         TM    DCBOFLGS,X'10'      IS IT OPEN?
         BZ    DNCLOSE             NO, BRANCH
         AIF   (NOT &ENV390).DOCLOSE
         TM    $UCBAD,$HFSIO       PROCESSING HFS FILE?
         BO    DNCLOSE             YES, NO DCB OR ACB WAS USED
.DOCLOSE ANOP
         TM    STATUS,STPODIR      PROCESSING FROM A DIRECTORY?
         BNO   DOCLOSE             NO, PERFORM THE CLOSE
         TM    MODE,MD_OFFLD       HERE TO OFFLOAD OR SEARCH?
         BO    NOCLOSE             YES, SKIP OVERHEAD, FEED BACK ERRORS
         TM    DS1SMSFG,DS1PDSE    PDSE?
         BO    DOCLOSE             YES, DISCONNECT FROM MEMBER
***      TM    STATUS9,$9PGMOBJ    LOOKING AT PDSE PROGRAM OBJECT?
***      BO    DOCLOSE             YES, PERFORM THE CLOSE
         TM    STATUS11,$11OT      RECEIVED CONTROL FROM REVOUTPT?
         BO    DOCLOSE             YES, PERFORM THE CLOSE
         TM    STATUS8,$8ZIPU      PROCESSING UNZIPPED DATA?
         BO    DOCLOSE             YES, PERFORM THE CLOSE
         TM    STATUS,STABEND      ENCOUNTERED A DCB ABEND?
         BO    DOCLOSE             YES, PERFORM THE CLOSE
         TM    STATUS,STPODIR      IN MEMBER SELECT MODE?
         BO    NOCLOSE             YES, KEEP THE DCB OPEN
DOCLOSE  MVI   CLOSED,X'80'
         CLOSE ((R4)),MF=(E,CLOSED)
*        DROP  R4                  IHADCB
DNCLOSE  NI    STATUS,255-STOPEN-STABEND
NOCLOSE  TM    STATUS,STGMVU
         BZ    NOGMVU
         L     R0,ANSWER+4         LENGTH
         L     R1,ANSWER           ADDRESS
         FREEMAIN RU,LV=(0),A=(1)
         NI    STATUS,255-STGMVU
NOGMVU   XC    TTR,TTR             CLEAR TOP TTR IN CASE REVISITED
         TM    STATUS13,$13_L      JUST LOOKING AT CACHED DATA?
         BO    FAS2EXIT            YES, NOT REALLY UNZIPPED DATA
         TM    STATUS8,$8ZIPU      PROCESSING UNZIPPED DATA?
         BO    ENDZIP              YES, FREE UNZIPPED DATA FILE
FAS2EXIT NI    STATUS11,255-$11FS2 NO LONGER IN PHASE 2
         MVI   DSORGTYP,0          CLEAR FILE TYPE INDICATOR
         L     R13,4(,R13)         POINT TO CALLER'S SAVE AREA
         OI    11(R13),X'01'       INVALIDATE FORWARD POINTER
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         LH    R15,RC              SET RETURN CODE
         BR    R14                 RETURN TO CALLER
         SPACE
**********************************************************************
*                                                          *         *
*         RETURN TO ZIP DIRECTORY DISPLAY                  *  GP@P6  *
*                                                          *  10/99  *
**********************************************************************
         SPACE
*
*   TO RETURN TO THE ZIP DIRECTORY, ALL TRACES OF UNZIP PROCESSING
*   ARE REMOVED, INCLUDING FREEING (AND THEREFORE DELETING) THE
*   TEMPORARY FILE HOLDING THE UNZIPPED DATA.  ALL KNOWLEDGE THAT
*   THE REVIEWED DATA SET IS A ZIP ARCHIVE IS DELETED, AND THE
*   TARGET DATA SET IS PROCESSED AFRESH.  IF IT STILL IS A ZIP
*   ARCHIVE THEN THE DIRECTORY DISPLAY WILL BE REGENERATED.  NOV2003
*
         SPACE
ENDZIP   NI    STATUS8,255-$8ZIPU  NO LONGER LOOKING AT UNZIPPED DATA
         NI    MODE,MD_RECRS+MD_FS RESET ALL OTHER MODE FLAGS
         MVC   DSNAIM(46),$DSNAME  RESTORE THE HEADING DATA SET NAME
         XC    MYDAPB,MYDAPB
         MVI   DA18CD+1,X'18'
         MVC   DA18DDN,UNZOUTDD    DDNAME
         MVC   DA18MNM,BLANKS      MEMBER NAME
         MVC   DA18SCLS,BLANKS     SYSOUT CLASS IS 2-BYTE FIELD
         XC    MYECB,MYECB
         XASAM24
         LA    R1,MYDAPL
         L     R15,CVTPTR(,0)      CVT
         L     R15,CVTDAIR-CVT(,R15)
         BASR  R14,R15             CALL IKJDAIR TO FREE UNZIPPED DATA
         XASAM31
         XC    UNZOUTDD,UNZOUTDD   CLEAR UNZIP OUTPUT DD NAME
         TM    STATUS8,$8ZIPF      IS UNZIP POSSIBLE?
         BZ    FAS2EXIT            NO, TERMINATE
         AIF   (NOT &ENV390).XENDZIP
         XC    $UCBAD,$UCBAD       RESET UCB ADDRESS
         CLI   $DDNAME,C'*'        UNIX FILE?
         BE    FAS2EXIT            YES, RETURN TO REVUNIX TO FIX DCB
.XENDZIP ANOP
         NI    STATUS8,255-$8ZIPA  RESET ALL ZIP STATUS FLAGS
         LA    R1,$DDNAME          POINT TO DDNAME
         L     R15,DDLOCADR        POINT TO SUBROUTINE
         BASR  R14,R15             FIND SUBJECT DD TIOT ENTRY
         LTR   R15,R15             IS IT ALLOCATED?
         BZ    FAS2EXIT            NO, TERMINATE
         MVC   $UCBAD3,17(R15)     YES, REFRESH UCB ADDRESS
         L     R5,INIT2ADR         LOAD SUBROUTINE ADDRESS
         CLI   DS1FMTID,X'F1'      LOOKING AT A DASD DATA SET?
         BLR   R5                  NO, PERFORM RE-INITIALIZATION
         MVC   DSORG,DS1DSORG      YES, RESET ORGANIZATION
         BR    R5                  PERFORM RE-INITIALIZATION
         SPACE
************************************************************
*                                                          *
*         SYNAD EXIT                                       *
*                                                          *
************************************************************
         SPACE
*         THIS ROUTINE IS ENTERED DURING THE 'CHECK' MACRO
*         IF AN I/O ERROR OCCURS.
         SPACE
DYNSYNAD DS    0H
         SYNADAF ACSMETH=BSAM
         MVC   SYNADMSG,50(R1)
         MVI   SYNADSW,X'FF'
         SYNADRLS
         TM    STATUS15,$153PT5    COUNTING A MEMBER'S RECORDS?
         BO    DYNIOERM            YES, GO SET MESSAGE
         TM    STATUS13,$13COMP    PROCESSING A COMPRESS REQUEST?
         BNOR  R14                 NO
         MVI   RC+1,4              YES, ENSURE IT DOES NOT PROCEED
DYNIOERM MVI   MSG,112             I/O ERROR
         BR    R14
         SPACE
**********************************************************************
*                                                          *         *
*         SWITCH TO RELEVANT VOLUME                        *  R48.3  *
*                                                          * JUN2018 *
**********************************************************************
         SPACE
*
*   SINCE BLOCKS FROM OTHER VOLUMES CANNOT BE POINTED TO, THIS
*   ROUTINE WILL CAUSE THE APPROPRIATE VOLUME TO BECOME THE
*   CURRENT VOLUME SO THAT THE CALLER CAN THEN POINT TO THE
*   DESIRED BLOCK.
*
*   IF THE CURRENT VOLUME IS THE REQUESTED VOLUME, THEN NO ACTION
*   IS TAKEN HERE.
*
*   IF THE CURRENT VOLUME IS BEFORE THE REQUESTED VOLUME, THEN
*   THE RELEVANT NUMBER OF FEOV REQUESTS ARE ISSUED.
*
*   IF THE CURRENT VOLUME IS AFTER THE REQUESTED VOLUME, THEN THE
*   FILE IS CLOSED, REOPENED, AND THE APPROPRIATE NUMBER OF FEOV
*   REQUESTS ARE ISSUED.
*
*   THIS ROUTINE IS ONLY CALLED AFTER IT HAS BEEN DETERMINED THAT
*   A BSAM/BPAM POINT MACRO WILL BE ISSUED.
*
*   ON ENTRY, $CONCAT CONTAINS THE CURRENT RELATIVE VOLUME NUMBER,
*   AND THE CALLER HAS PLACED THE TARGET RELATIVE VOLUME NUMBER IN
*   THE FIRST BYTE OF DOUBLE, AND GPR4 POINTS TO THE DCB.
*
         SPACE
VOLSWTCH TM    DCBDSORG,DS1DSGPS   USING BSAM?
         BNOR  R14                 NO, TAKE NO ACTION HERE
         CLC   $CONCAT,DOUBLE      ALREADY ON RIGHT VOLUME?
         BER   R14                 YES, TAKE NO ACTION HERE
         ST    R14,READR           NO, SAVE RETURN ADDRESS
         BL    VOLADVNC            NEED TO ADVANCE TO LATER VOLUME
         MVI   CLOSED,X'80'        DO CLOSE/OPEN FOR EARLIER VOLUME
         CLOSE ((R4)),MF=(E,CLOSED)
         NI    STATUS,255-STOPEN   CLOSED
         MVI   $CONCAT,0           RESET RELATIVE VOLUME NUMBER
         MVI   OPEND,X'80'         ONLY ONE DCB IN DCB LIST
         OPEN  ((R4)),MF=(E,OPEND)
         TM    DCBOFLGS,X'10'      DID THE OPEN SUCCEED?
         BO    VOL1OPEN            YES
         LA    R1,MSG04            NO
         LA    R0,L'MSG04
         L     R15,=A(PUTMSG)
         BASR  R14,R15             ISSUE MESSAGE
         B     END                 WIND IT UP
VOL1OPEN OI    STATUS,STOPEN       OPENED
         NI    STATUS,255-STABEND  RESET DCB ABEND FLAG
         MVI   SYNADSW,X'00'       NO SYNAD ERROR YET
         SR    R2,R2               CLEAR FOR INSERT
         ICM   R2,7,DCBDEBA        POINT TO DEB
         USING DEBBASIC,R2
         ICM   R2,7,DEBSUCBB       GET UCB ADDRESS (DEBUCBA IF DASD)
         DROP  R2                  DEBBASIC
         STCM  R2,7,$UCBAD3        UPDATE UCB ADDRESS
         BZ    VOLADVNC            IGNORE VOLUME IF ZERO ADDRESS
         MVC   $VOLSER,28(R2)      COPY THE CURRENT VOLUME SERIAL
         LH    R2,DSNAIM           GET THE DATA SET NAME LENGTH
         LA    R2,MSGDSN(R2)       POINT PAST IT IN TOP LINE
         CLI   1(R2),X'96'         SHOWING 'ON VOLUME'?
         BNE   VOLADVNC            NO, ALL DONE
         MVC   4(6,R2),$VOLSER     YES, UPDATE IT
         TR    4(6,R2),PERIODS     SANITISE IT
VOLADVNC SR    R2,R2               CLEAR FOR INSERTS
         SR    R1,R1
         IC    R2,DOUBLE           GET REQUESTED VOLUME
         IC    R1,$CONCAT          GET CURRENT VOLUME
         SR    R2,R1               GET VOLUMES TO GO
         BNP   VOLSWDON            ALREADY THERE
VOLEOVLP DS    0H
         FEOV  (R4)                SWITCH TO THE NEXT VOLUME
         TM    DCBOFLGS,X'10'      IS THE DCB STILL OPEN?
         BNO   END                 NO, WIND IT UP
         BCT   R2,VOLEOVLP         GET TO THE RIGHT VOLUME
VOLSWDON L     R14,READR           LOAD RETURN ADDRESS
         BR    R14                 RETURN TO CALLER
         SPACE
************************************************************
*                                                          *
*         CONSTANTS                                        *
*                                                          *
************************************************************
         SPACE
         DC    0D'0'
         LTORG
         SPACE
*BLUESA  DCS   SA,COLOUR,BLUE      UNCOMMENT IF REQUIRED   (COLOUR # 1)
REDSA    DCS   SA,COLOUR,RED                               (COLOUR # 2)
*PINKSA  DCS   SA,COLOUR,PINK      UNCOMMENT IF REQUIRED   (COLOUR # 3)
*GREENSA DCS   SA,COLOUR,GREEN     UNCOMMENT IF REQUIRED   (COLOUR # 4)
*TURQOISA DCS  SA,COLOUR,TURQ                              (COLOUR # 5)
*YELLOWSA DCS  SA,COLOUR,YELLOW                            (COLOUR # 6)
*NEUTRAL  DCS  SA,COLOUR,WHITE     UNCOMMENT IF REQUIRED   (COLOUR # 7)
*BLACK    \                                                (COLOUR # 8)
*DEEP BLUE \                                               (COLOUR # 9)
*ORANGE     \                                              (COLOUR # A)
*PURPLE      \                                             (COLOUR # B)
*PALE GREEN   \                                            (COLOUR # C)
*PALE TURQUOISE\                                           (COLOUR # D)
*GREY           \                                          (COLOUR # E)
*WHITE           \____THESE ONLY FOR 16-COLOUR TERMINALS   (COLOUR # F)
BLINK    DCS   SA,HILITE,BLINK
REVERSE  DCS   SA,HILITE,REVERSE
USCORE   DCS   SA,HILITE,USCORE
NORMAL   DCS   SA,HILITE,NORMAL
         SPACE
BOTNINES DC    F'999999999'
DIVADDR2 DC    A(REVDIV)
ALCOADDR DC    A(REVALCO)
DALOADDR DC    A(REVDALO)
INFOADDR DC    A(REVDSCB)
HISTADDR DC    A(REVHIST)
IMAGEADR DC    A(REVIMAGE)
IOCOMADR DC    A(REVCOMM)
DDLOCADR DC    A(REVDDLOC)
KEYPRSAD DC    A(REVKYPRS)
INIT2ADR DC    A(FAS2INIT)
LBLEPADR DC    A(TAPELBLS)
APLEPADR DC    A(HANDLAPL)
FSTYPADR DC    A(FSTYPTBL)
SEARCHAD DC    A(SEARCHIT)
UNZIPDAD DC    A(UNZIPDIR)
UNZIPFAD DC    A(UNZIPFIL)
RESOLVEP DC    A(RESOLVE@)
         SPACE
         AIF   (NOT &ENV390).DSP3480
* NOTIFY OPS OF TSO USER BROWSING CARTRIDGES (ROUTCDE=3,DESC=7)
* (COULD ADD SUPPORT FOR CARTRIDGE HIGH SPEED SEARCH)
DISP3480 MSGDISP MF=L,TXT='REVIEW'
DSP3480L EQU   *-DISP3480
.DSP3480 ANOP
         SPACE
         PRINT NOGEN
         SPACE
SEQDCB   DCB   DDNAME=DYNAM,DSORG=PS,MACRF=(RP),                       +
               EODAD=DYNEOD,SYNAD=DYNSYNAD
SEQDCBL  EQU   *-SEQDCB
         SPACE
PDSDCB   DCB   DDNAME=DYNAM,DSORG=PO,MACRF=(R),                        +
               EODAD=DYNEOD,SYNAD=DYNSYNAD
PDSDCBL  EQU   *-PDSDCB
         SPACE
         PRINT GEN
         SPACE
DYNREAD  READ  DYNDECB,SF,0,0,'S',MF=L
DYNDECBL EQU   *-DYNDECB
         SPACE
GMVU     GETMAIN VU,MF=L
GMVUL    EQU   *-GMVU
         SPACE
         AIF   (NOT &ENV390).NOISPF1
REVSPFEP DC    A(REVISPF)          ISPF CALLER ROUTINE ENTRY POINT
.NOISPF1 ANOP
REVEDADR DC    A(REVEDIT)          REVIEW EDITOR ROUTINE ENTRY POINT
REVMSGEP DC    A(REVMSGS)          REVIEW MESSAGES ROUTINE ENTRY POINT
REVSMFEP DC    A(REVSMF)           NOW A SEPARATE RMODE=ANY LOAD MODULE
TABNUMAD DC    A(TABNUMER)         DECIMAL TRANSLATE TABLE ADDRESS
DAYCENTI DC    F'8640000'          NUMBER OF CENTISECONDS IN A DAY
FW32760  DC    F'32760'
FW1      DC    F'1'
HW1      EQU   FW1+2,2
HW2      DC    H'2'
HW3      DC    H'3'
HW4      DC    H'4'
HW5      DC    H'5'
HW6      DC    H'6'
HW7      DC    H'7'
HW8      DC    H'8'
HW10     DC    H'10'
HW12     DC    H'12'
HW14     DC    H'14'
HW18     DC    H'18'
HW32     DC    H'32'
HW40     DC    H'40'
HW80     DC    H'80'
HW100    DC    H'100'
HW256    DC    H'256'
*HW1000  DC    H'1000'
HW4096   DC    H'4096'
HW10000  DC    H'10000'
         SPACE
MSG04    MESG  '"REVIEW" UNABLE TO OPEN DATASET'
MSG08    MESG  'SPECIFIED MEMBER NOT FOUND IN DATASET'
         SPACE
SCRHPRM  DC    C'HELP '                         CL14'HELP MEMBER==>'
         DC    X'948594828599',C'==>'
SCRSBCM  DC    X'E2A48283969494819584',C'==>'   CL13'SUBCOMMAND==>'
SCRLINE  DC    X'40D389958540'                  C' LINE '
SCRCOL   DC    X'40C3969340'                    C' COL '
SCROF    DC    X'40968640'                      C' OF '
SCRCMD   DC    X'40C396949481958440'            C' COMMAND '
ARROW    DC    C'===>'
         DC    AL1(FLDINHI)
SCRCMDL  EQU   *-SCRCMD
SCRINPT  DC    C'      I',X'9597A4A3',C'===>'   C'      INPUT===>'
         DC    AL1(FLDINHI)
SCRINPTL EQU   *-SCRINPT
SCRRGE   DC    AL1(FLDOUTHI),C'S',X'8399969393',C' ===>',AL1(FLDINHI)
SCRRGEIO EQU   *-SCRRGE            RANGE INPUT FIELD OFFSET
         DC    C'CS'               START WITH CURSOR SCROLLING
         DC    AL1(FLDOUTLO)
SCRRGEL  EQU   *-SCRRGE
SCRMASK  DC    XL9'202020202020202120'
         SPACE
MARKSX   DC    2C'--------/\'
         SPACE
@REVIEW  DC    CL8'REVIEW  '
REVHB00  DC    CL8'REVHB00 '
REVBUFNM DC    CL8'REVBUF  '
NOMEM    DC    C'*'                8-BYTE FIELD
BLANKS   DC    CL44' '             EXTEND IF NECESSARY
         SPACE
BDBLKMSG DC    CL78'** BAD DATA IN BLOCK AT ######## BDW=X''########''=+
               =>LEN=##### DCBBLKSI=12345 **'
SSEOFMSG DC    CL78'*************** REVIEW STORAGE AREA IN EXTENDED REG+
               ION IS FULL ***************'
         DC    0F'0'
         SPACE
         SPACE
************************************************************
*                                                          *
*         TRANSLATE TABLES                                 *
*                                                          *
************************************************************
         SPACE
XLATABLS DS    0F
         SPACE
HEXTEST  DC    193X'FF',6X'00',41X'FF',10X'00',6X'FF'
HEXDATA  DC    193X'00',X'FAFBFCFDFEFF',41X'00',C'0123456789',6X'00'
         SPACE
TABALPHA DC    129X'00'
         DC    9X'FF'              LOWER A-I
         DC    7X'00'
         DC    9X'FF'              LOWER J-R
         DC    8X'00'
         DC    8X'FF'              LOWER S-Z
         DC    23X'00'
         DC    9X'FF'              UPPER A-I
         DC    7X'00'
         DC    9X'FF'              UPPER J-R
         DC    8X'00'
         DC    8X'FF'              UPPER S-Z
         DC    22X'00'
         SPACE
         SPACE
**********************************************************************
*                                                          *         *
*         SUBCOMMAND LOOK-UP TABLE                         *  GP@P6  *
*                                                          *  02/94  *
**********************************************************************
         SPACE
*     SUBCOMMAND TABLE ENTRIES MUST BE SORTED INTO COLLATING SEQUENCE.
*     MAXIMUM SUBCOMMAND LENGTH IS 7 BYTES DUE TO TRAILING BLANK CHECK.
         SPACE
SUBCMDTB DS    0F  SUB-CMD     ROUTINE
         DC    CL8' SUBCMDS',A(0)
         DC    CL8'<       ',A(LEFT)
         DC    CL8'+       ',A(DOWN)
         DC    CL8'$ADD    ',A(APPEND)
         DC    CL8'$CUT    ',A(CUTOFF)
         DC    CL8'-       ',A(UP)
         DC    CL8'>       ',A(RIGHT)
         DC    CL8'?       ',A(QUESTION)
         DC    CL8'=X      ',A(EQUALSX)
         DC    CL8'ADD     ',A(APPEND)
         DC    CL8'APPEND  ',A(APPEND)
         DC    CL8'ASCII   ',A(ASCII)
         DC    CL8'BOT     ',A(BOTTOM)
         DC    CL8'BOTTOM  ',A(BOTTOM)
         AIF   (NOT &ENV390).NOISPF2
         DC    CL8'BROWSE  ',A(ISPFCMD)
.NOISPF2 ANOP
         DC    CL8'CAN     ',A(CANCEL)
         DC    CL8'CANCEL  ',A(CANCEL)
         DC    CL8'COLOR   ',A(COLRMODE)
         DC    CL8'COLOUR  ',A(COLRMODE)
         DC    CL8'COM     ',A(COMMAND)
         DC    CL8'COMMAND ',A(COMMAND)
         DC    CL8'COPYOUT ',A(CUTOFF)
         DC    CL8'CUT     ',A(CUTOFF)
         DC    CL8'CUTOFF  ',A(CUTOFF)
         DC    CL8'CUTOVER ',A(CUTOFF)
         DC    CL8'DEBUG   ',A(DEBUG)
         DC    CL8'DIR     ',A(DIRCMD)
         DC    CL8'DISP    ',A(DISPCMD)
         DC    CL8'DISPLAY ',A(DISPCMD)
         DC    CL8'DOWN    ',A(DOWN)
         DC    CL8'DROP    ',A(DROP)
         DC    CL8'EDIT    ',A(ISPFCMD)
         DC    CL8'END     ',A(END)
         DC    CL8'EQ      ',A(EQUATE)
         DC    CL8'EQUATE  ',A(EQUATE)
         DC    CL8'EREP    ',A(EREPMODE)
         DC    CL8'EXIT    ',A(EQUALSX)
         DC    CL8'F       ',A(FIND)
         DC    CL8'FIND    ',A(FIND)
         DC    CL8'FINDNOT ',A(FINDNOT)
         DC    CL8'FINDSMF ',A(FINDSMF)
         DC    CL8'FMT     ',A(FMTMODE)
         DC    CL8'FMTPRT  ',A(FMTPRT)
         DC    CL8'FMTVAR  ',A(FMTVAR)
         DC    CL8'FN      ',A(FINDNOT)
         DC    CL8'FORMAT  ',A(FMTMODE)
         DC    CL8'FS      ',A(FINDSMF)
         DC    CL8'FULL    ',A(FULL)
         DC    CL8'FV      ',A(FMTVAR)
         DC    CL8'HEX     ',A(HEXMODE)
         DC    CL8'HEXC    ',A(HEXCHAR)
         DC    CL8'HEXR    ',A(HEXRITE)
         DC    CL8'HEXX    ',A(HEXEXT)
         DC    CL8'IFIND   ',A(RFIND)
         DC    CL8'INFO    ',A(DSATTRS)
         DC    CL8'L       ',A(LIST)
         DC    CL8'LEFT    ',A(LEFT)
         DC    CL8'LIST    ',A(LIST)
         DC    CL8'LOC     ',A(LIST)
         DC    CL8'LOCATE  ',A(LIST)
         DC    CL8'MEM     ',A(MEMBERP)
         DC    CL8'MEMBER  ',A(MEMBERP)
         DC    CL8'NEWTOP  ',A(NEWTOP)
         DC    CL8'OFFLOAD ',A(CUTOFFLD)
         DC    CL8'PICDATA ',A(PICDATA)
         DC    CL8'RDW     ',A(RDWCMD)
         DC    CL8'RES     ',A(RESET)
         DC    CL8'RESET   ',A(RESET)
         DC    CL8'RETURN  ',A(EQUALSX)
         DC    CL8'RFIND   ',A(RFIND)
         DC    CL8'RIGHT   ',A(RIGHT)
         DC    CL8'RTF     ',A(RTF)
         DC    CL8'SB      ',A(SUBMIT)
         DC    CL8'SEQLOAD ',A(CUTOFFLD)
         DC    CL8'SETUNZ  ',A(SETUNZ)
         DC    CL8'SMF     ',A(SMFMODE)
         DC    CL8'SUB     ',A(SUB)
         DC    CL8'SUBCOM  ',A(SUBCOMP)
         DC    CL8'SUBMIT  ',A(SUBMIT)
         DC    CL8'SWAP    ',A(SWAP)
         DC    CL8'TACKON  ',A(APPEND)
         DC    CL8'TOP     ',A(TOP)
         DC    CL8'UP      ',A(UP)
         DC    CL8'UPDATE  ',A(ISPFCMD)
         DC    CL8'VIEW    ',A(ISPFCMD)
         DC    CL8'XCTL    ',A(XCTL)
         DC    F'-1'                         END OF SUBCOMMAND TABLE
SUBCMDL  EQU   12                            SUBCOMMAND ENTRY LENGTH
         SPACE
         SPACE
**********************************************************************
*                                                          *         *
*         HANDLE APL CHARACTERS AND SHOW SQUARE BRACKETS   *  GP@P6  *
*                                                          *  05/92  *
**********************************************************************
         SPACE
*
*         THIS CODE IS ONLY INVOKED WHEN IN CHARACTER MODE (IE.
*         'HEX OFF').  ITS FUNCTION IS TO ATTEMPT TO DISPLAY
*         NON-STANDARD PRIMARY CODE POINTS BY USING THE
*         CORRESPONDING CODE POINTS FROM THE ALTERNATE (IE. APL)
*         CHARACTER SET.  WHEN IN 'FULL ON' MODE THE BYTES TO BE
*         DISPLAYED ARE TRANSLATED THROUGH THE PERIODS TRANSLATE
*         TABLE AND THEN SENT TO THE TERMINAL.  WHEN IN 'FULL OFF'
*         MODE THE BYTES TO BE DISPLAYED UNDERGO EXTRA PROCESSING
*         HERE.
*
*         IF THE DISPLAY BYTES DO NOT HAVE ANY CODE POINTS
*         CORRESPONDING TO THE SUPPORTED APL CHARACTERS THEN
*         THE DISPLAY BYTES ARE SENT TO THE TERMINAL UNCHANGED.
*         OTHERWISE, IF GRAPHIC ESCAPE IS NOT SUPPORTED THEN
*         THESE EXTRA CODE POINTS ARE TRANSLATED TO PERIODS WITH
*         THE "APLOFFT" TRANSLATE TABLE TO PRODUCE AN EFFECT
*         SIMILAR TO THE OLD "KEYBT" TRANSLATION COMMENTED OUT
*         BELOW.
*
*         NOTE THAT SINCE ASCII TERMINALS SUPPORT SQUARE BRACKETS,
*         X'AD' AND X'BD' ARE SENT UNCHANGED.  THIS CHANGE IS
*         PROMPTED BY THE WIDER USE OF THE 'C' PROGRAMMING
*         LANGUAGE WHICH HAS SQUARE BRACKETS IN ITS SYNTAX.
*         SOME TSO HELP MEMBERS AND SOME OF THE NEWER SYSTEM MACROS
*         ALSO CONTAIN SQUARE BRACKETS (AND OTHER APL CHARACTERS)
*         IN THEIR SYNTAX DOCUMENTATION.
*
*         IF GRAPHIC ESCAPE IS SUPPORTED THEN CODE POINTS FLAGGED
*         IN THE "APLT" TABLE HAVE A GRAPHIC ESCAPE INSERTED IN
*         FRONT OF THEM, THUS CAUSING THE CORRESPONDING CODE POINTS
*         FROM THE APL CHARACTER SET TO BE DISPLAYED.
*
*         AS CODED HERE, "ISPF 3278A" BEHAVIOUR IS PERFORMED
*         AUTOMATICALLY IF APL IS SUPPORTED BY THE TERMINAL,
*         WITHOUT REFERENCE TO ANY PROFILE SETTINGS.
*
*         CHANGED TO ALLOW "ISPF 3278T" BEHAVIOUR FOR BETTER
*         PRINTOUT AND SYS1.MACLIB ESA MACRO COMMENTS READABILITY.
*         THE 'DISPLAY' SUBCOMMAND CAN BE USED TO CONTROL WHICH
*         DISPLAY CHARACTER SET IS USED.
*
*         IN SUMMARY, 'FULL ON' CAUSES AS MANY CODE POINTS AS
*         POSSIBLE TO BE SENT UNTRANSLATED TO THE TERMINAL FOR
*         DISPLAY FROM THE PRIMARY CHARACTER SET.  'FULL OFF' IS
*         MEANT TO MAXIMIZE THE MEANING OF THE CHARACTERS SHOWN.
*         THIS IS DONE BY JUST SHOWING KEYBOARD-SUPPORTED CHARS,
*         NOW INCLUDING SQUARE BRACKETS (SUPPORTED NATIVELY BY
*         ASCII TERMINALS).  FURTHER, OTHER APL CHARS ARE ALSO
*         INCLUDED TO DEMONSTRATE THE GENERALITY OF THIS CODE AND
*         TO JUST BE PERVERSE.  NOTE THAT THE APL DOWN ARROW (CODE
*         POINT X'8A') CORRESPONDS TO NEW-PAGE FOR RECFM=M.
*
*         THIS CODE IS INVOKED ONE DISPLAY LINE AT A TIME, AND
*         ONLY FOR FILE DATA AND NOT FOR STATUS INFORMATION.
*
HANDLAPL DS    0H
         USING HANDLAPL,R15
         CLI   PERIODS,X'00'       PERFORMING GLYPH ENHANCEMENT?
         BE    CHK4HEXR            NO, DO NOT EDIT FULL TRANSLATION
         LR    R1,R6               POINT TO DISPLAY LINE
CHECKAPL LR    R14,R6              POINT TO DISPLAY LINE
         A     R14,SCRNCOLS        POINT TO NEXT DISPLAY LINE
         BCTR  R14,0               POINT TO DISPLAY LINE'S LAST BYTE
         SR    R14,R1              GET LINE'S DATA STREAM LENGTH CODE
         BM    CHK4HEXR            RETURN IF WHOLE LINE NOW PROCESSED
         LA    R2,APLTA            POINT TO APL TEST TABLE
         CLI   PROFDISP,C'A'       CORRECT TABLE?
         BE    DOAPLCHK            YES
         LA    R2,APLTT            NO, POINT TO TEXT TEST TABLE
DOAPLCHK EX    R14,APLCHECK        ANY CODE POINTS REQUIRING GE?
         BZ    CHK4HEXR            NO, NO EDITING REQUIRED
         CLM   R2,1,APLOFFTA+C'.'  TRANSLATED TO PERIOD?
         BNE   PUTINAGE            NO, MAY HAVE TO ACTIVATE GE
         STC   R2,0(,R1)           YES, OVERLAY CHARACTER WITH PERIOD
         LA    R1,1(,R1)           THIS BYTE NOW PROCESSED
         B     CHECKAPL            GO TEST FOR MORE APL DATA
PUTINAGE TM    STATUS5,$5GE        IS GE SUPPORTED BY TERMINAL?
         BZ    REMOVAPL            NO, HANDLE IN THE USUAL WAY
         A     R1,SCREENSZ         YES, POINT TO SHADOW BUFFER
         OI    0(R1),X'40'         TURN ON GRAPHIC ESCAPE FOR THIS BYTE
         S     R1,SCREENSZ         POINT BACK TO PRIMARY BUFFER
         CLI   PROFDISP,C'A'       ANY TRANSLATION REQUIRED?
         BE    APLCHROK            NO
         TR    0(1,R1),APLTT       CONVERT DATA TO CORRECT CODE POINT
APLCHROK LA    R1,1(,R1)           ADJUST PROCESSED POINTER
         B     CHECKAPL            RESUME SCAN FOR APL CODE POINTS
REMOVAPL LA    R2,APLOFFTA         POINT TO KEYBOARD CHARACTER TABLE
         CLI   PROFDISP,C'A'       CORRECT TABLE?
         BE    DOAPLREM            YES
         LA    R2,APLOFFTT         NO, POINT TO PSEUDO-TEXT TABLE
DOAPLREM TR    0(1,R1),0(R2)       TRANSLATE APL CODE POINT
         CLI   0(R1),X'40'         VALID DISPLAYABLE CHARACTER?
         BNL   APLREMOK            YES
         OI    0(R1),X'40'         NO, MAKE IT SUCH (<=, +/-, >=)
         A     R1,SCREENSZ         POINT TO SHADOW BUFFER
         OI    0(R1),X'30'         TURN ON UNDERSCORE FOR THIS BYTE
         S     R1,SCREENSZ         POINT BACK TO PRIMARY BUFFER
APLREMOK LA    R1,1(,R1)           ADJUST PROCESSED POINTER
         B     CHECKAPL            RESUME SCAN FOR APL CODE POINTS
         SPACE
APLCHECK TRT   0(0,R1),0(R2)       <<< EXECUTED >>>
         DROP  R15                 HANDLAPL
         SPACE
*                        TABLE OF CODE POINTS ELIGIBLE FOR GE INSERTION
         SPACE
APLTA    DS    0H                                   "3278A"
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00414243444546474849000000000000'  (BYTES SHOULD BE
         DC    X'00515253545556575859000000000000'  TABLE OFFSET OR
         DC    X'00006263646566676869000000000000'  NULL FOR NATIVE
         DC    X'4B717200000000007800000000000000'  DISPLAY OR PERIOD
         DC    X'800000000000000000008A8B8C8D8E8F'  FOR TRANSLATION
         DC    X'900000000000000000009A9B4B9D4B9F'  TO PERIOD.)
         DC    X'A0000000000000000000AAABACADAEAF'
         DC    X'B0B1B2B3B44BB6B7B84BBABBBCBDBEBF'
         DC    X'00000000000000000000CACB4BCD4BCF'
         DC    X'00000000000000000000DADBDCDDDEDF'
         DC    X'004B0000000000000000EAEB4BEDEEEF'
         DC    X'000000000000000000004BFBFCFDFE00'
         SPACE
APLTT    DS    0H                                   "3278T"
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00E1E2E3000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'A4A10000000000000000000000000000'
         DC    X'000000000000000000008AC08CC1C2D3'
         DC    X'9000000000000000000000D09CD19EC3'
         DC    X'D2000000000000000000FDC4C5ADAEA3'
         DC    X'F0F1F2F3F4F5F6F7F8F9BAD4D5BDBEA2'
         DC    X'00000000000000000000BBC7D778EAEB'
         DC    X'00000000000000000000EEFCC8D89F8F'
         DC    X'00B70000000000000000FBC6D6DDDC71'
         DC    X'00000000000000000000BF8EEFFE8D00'
         SPACE
*                     CONVERT "APLT" CODE POINTS TO PERIODS TRANSLATION
         SPACE
APLOFFTA DS    0H                                   "3278A"
         DC    X'4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B'
         DC    X'4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B'
         DC    X'4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B'
         DC    X'4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B'
         DC    X'4041424B4B4B4B4B4B4B4A4B4C4D4E4F'
         DC    X'504B4B4B4B4B4B4B4B4B5A5B5C5D5E5F'
         DC    X'60614B4B4B4B4B4B4B4B6A6B6C6D6E6F'
         DC    X'4B4B4B4B4B4B4B4B4B797A7B7C7D7E7F'
         DC    X'4B8182838485868788894B4B4B4B4B4B'
         DC    X'4B9192939495969798994B4B4B4B4B4B'
         DC    X'4BA1A2A3A4A5A6A7A8A94B4B4BAD4B4B'
         DC    X'4B4B4B4B4B4B4B4B4B4B4B4B4BBD4B4B'
         DC    X'C0C1C2C3C4C5C6C7C8C94B4B4B4B4B4B'
         DC    X'D0D1D2D3D4D5D6D7D8D94B4B4B4B4B4B'
         DC    X'E04BE2E3E4E5E6E7E8E94B4B4B4B4B4B'
         DC    X'F0F1F2F3F4F5F6F7F8F94B4B4B4B4B4B'
         SPACE
APLOFFTT DS    0H                                   "3278T"
         DC    X'4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B'
         DC    X'4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B'
         DC    X'4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B'
         DC    X'4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B'
         DC    X'4041424B4B4B4B4B4B4B4A4B4C4D4E4F'
         DC    X'50F1F2F34B4B4B4B4B4B5A5B5C5D5E5F'
         DC    X'60614B4B4B4B4B4B4B4B6A6B6C6D6E6F'
         DC    X'954B4B4B4B4B4B4B4B797A7B7C7D7E7F'
         DC    X'4B8182838485868788894BC00C4D4E4E'
         DC    X'4B9192939495969798994BD05C5D0E4B'
         DC    X'60A1A2A3A4A5A6A7A8A94B6060AD2E96'
         DC    X'F0F1F2F3F4F5F6F7F8F94B6060BD5F60'
         DC    X'C0C1C2C3C4C5C6C7C8C94B60604B4B4B'
         DC    X'D0D1D2D3D4D5D6D7D8D94B4B4B4B4C6E'
         DC    X'E0E0E2E3E4E5E6E7E8E94B4F4F4B4B4B'
         DC    X'F0F1F2F3F4F5F6F7F8F94F4F4B4B4F4B'
         SPACE
*               ENGLISH ASCII/EBCDIC KEYBOARD CHARACTERS TRANSLATION
*               WHICH IS EFFECTIVELY USED WHEN IN 'FULL OFF' MODE
*               ON A TERMINAL WITHOUT GRAPHIC ESCAPE (APL) SUPPORT.
*KEYBT   DC    28X'4B',X'1C4B1E',33X'4B',X'40',9X'4B'   DUP,FM,BLANK
*        DC    X'4A4B4C4D4E4F'       CENT,PERIOD,LESS,LPAREN,PLUS,BAR
*        DC    X'50',9X'4B'          AMPERSAND
*        DC    X'5A5B5C5D5E5F'       EXCL,$,ASTERISK,RPAREN,SEMI,NOT
*        DC    X'6061',8X'4B'        HYPHEN,SLASH       POINT
*        DC    X'6A6B6C6D6E6F'       WHAT,COMMA,PERCENT,UNDLN,GT,QM
*        DC    9X'4B',X'79'          70-78              BACK-QUOTE
*        DC    X'7A7B7C7D7E7F'       COLON,POUND,AT,APOST,EQ,DBLQUOTE
*        DC    X'4B'
*        DC    X'818283848586878889',7X'4B'
*        DC    X'919293949596979899',7X'4B'
*        DC    X'A1A2A3A4A5A6A7A8A9'             TILDE
*        DC    3X'4B',X'AD',15X'4B',X'BD4B4B'    SQUARE BRACKETS
*        DC    X'C0',C'ABCDEFGHI',6X'4B'         LEFT BRACE
*        DC    X'D0',C'JKLMNOPQR',6X'4B'         RIGHT BRACE
*        DC    X'E04B',C'STUVWXYZ',6X'4B'        BACK SLASH
*        DC    C'0123456789',6X'4B'
         EJECT
************************************************************
*                                                          *
*         PHASE 2 INITIALIZATION SUBROUTINE                *
*                                                          *
************************************************************
         SPACE
FAS2INIT DS    0H
         USING FAS2INIT,R5
         SR    R0,R0
         ST    R0,OFFSET           START AT LEFT MAX
         NI    STATUS12,255-$12ASM-$12CNT-$12QOT-$12PRT-$12CMT
         NI    STATUS,255-STNOMEM  RESET "NO MEMBER" STATUS
         TM    STATUS11,$11OT      RECEIVED CONTROL FROM REVOUTPT?
         BO    FAS2CCOF            YES
         TM    MODE,MD_OFFLD       HERE TO OFFLOAD?
         BO    FAS2CCOK            YES
**       TM    STATUS13,$13COMP    PROCESSING A COMPRESS REQUEST?
**       BO    FAS2CCOK            YES, BUT MD_OFFLD ALSO SET
         L     R15,=A(REVNAME)     NO
         BASR  R14,R15             ATTEMPT TO NAME THE SESSION
         B     FAS2CCOK            START SCROLLED LEFT MAX
FAS2CCOF MVI   OFFSET+3,1          SCROLL RIGHT PAST CARRIAGE CONTROL
FAS2CCOK STH   R0,RC               RESET RETURN CODE
         TM    STATUS13,$13_L      SHOWING PRE-LOADED DATA?
         BO    FAS2PRSV            YES, PRESERVE LOADED DATA DETAILS
         ST    R0,COUNT            RESET RECORD COUNT (SHOW FROM TOP)
         ST    R0,KOUNTHI
         ST    R0,KOUNT            RESET BYTE COUNT
         TM    STATUS2,$2FAST      USING "FASTPATH"?
         BO    FAS2PRSV            YES, PRESERVE DIRECT ACCESS LIMIT
         ST    R0,MAXPOINT         RESET FURTHEST RECORD READ
FAS2PRSV DS    0H
         ST    R0,FNDNUM           RESET LAST-FOUND RECORD NUMBER
         ST    R0,FNDOFF           RESET LAST-FOUND OFFSET
         ST    R0,CHKPTBOT         ZERO CHECKPOINT TABLE
         XC    CHKPTDUM,CHKPTDUM
         MVC   COMPON,@REVIEW      FLAG COMPONENT FOR TSO HELP
         MVC   REVHELP,REVHB00     SET FIRST ISPF HELP PANEL NAME
         L     R2,ANSWER           MAYBE POINT TO ACB I/O WORK AREA
         MVC   COL1LBL,BLANKS      INITIALIZE COLUMN 1 LABEL
         MVI   COL1LBL,C'1'
         TM    STATUS13,$13_L      JUST LOOKING AT CACHED DATA?
         BO    FS2NORDW            YES, NO RDWS TO SHOW
         TM    $UCBAD,$NONDCB      WILL I/O BE VIA A DCB?
         BZ    *+8                 YES, PROBABLY
FS2NORDW NI    STATUS16,255-$16RDW NO, SO NO RDWS WILL EXIST
         LA    R4,ACBINIT          POINT TO ACB SET UP LOGIC
         TM    $UCBAD,$ACB         WILL I/O BE VIA AN ACB?
         BOR   R4                  YES, SO DON'T DO DCB INITIALIZATION
         LA    R4,DYNDCBW
*        USING IHADCB,R4
         AIF   (NOT &ENV390).HFSOPNX
         TM    $UCBAD,$HFSIO       WILL I/O BE VIA UNIX CALLS?
         BO    OPENX               YES, FILE IS ALREADY OPEN
.HFSOPNX ANOP
         TM    STATUS,STGMVU       DONE THIS BEFORE?
         BO    NORMOPEN            YES, MUST BE AFTER A 'NEWTOP'
         SR    R0,R0               CLEAR KEY DETAILS
         TM    STATUS13,$13_L      JUST LOOKING AT CACHED DATA?
         BO    KEYORNOT            YES, SKIP FILE OPEN PROCESSING
         SPACE
************************************************************
*                                                          *
*         SET UP THE DCB                                   *
*                                                          *
************************************************************
         SPACE
         MVC   DOUBLE(1),TSTRECFM  COPY RECFM FOR OPEN BPAM FILE
         TM    STATUS,STOPEN       FILE OPEN? (BEEN HERE BEFORE?)
         BO    OPENX               YES, EVERYTHING IS SET UP
         NI    STATUS14,255-$14BIG
         MVC   DYNDCBW(SEQDCBL),SEQDCB
         MVC   DCBDDNAM,UNZOUTDD   LOAD UNZIP DDNAME
         TM    STATUS8,$8ZIPU      PROCESSING UNZIPPED DATA?
         BO    NODCBZAP            YES, SKIP STUFF ALREADY DONE
         ICM   R0,15,$UCBAD        PERFORMING I/O TO ACTUAL DEVICE?
         BZ    SUBSYSAM            NO, USING A SUBSYSTEM ACCESS METHOD
         TM    DSORG,DS1DSGPO      PARTITIONED ORGANIZATION DATA SET?
         BO    USEBPAM             YES, USE BPAM
         AIF   (NOT &ENVBIG).DCBEOK
         XC    DYNDCBEW,DYNDCBEW   ENSURE ALL FLAGS ARE ZERO
         CLI   OSBITS,X'9B'        MVS/ESA OR LATER?
         BNE   DCBINITD            NO, SO DO NOT USE A DCBE
         L     R15,=A(SEQDCBEV)    POINT TO DCBE FOR VTOC
         CLI   DSORGTYP,X'DD'      PROCESSING VTOC?
         BE    USEDCBE             YES, USE DCBE
         L     R15,=A(SEQDCBET)    POINT TO DCBE FOR LBI
         TM    STATUS2,$2TAPE      PROCESSING A TAPE?
         BO    USEDCBE             YES, USE DCBE
         TM    DS1FLAG1,DS1LARGE   DSNTYPE=LARGE?
         BNO   DCBINITD            NO, DON'T USE DCBE
         L     R15,=A(SEQDCBE)     YES, POINT TO RELEVANT DCBE
         OI    STATUS14,$14BIG     FLAG USING TTTR INSTEAD OF TTR0
USEDCBE  L     R14,=A(SEQDCB2)     POINT TO MODEL DCB
         MVC   DYNDCBW(SEQDCBL),0(R14)
         MVC   DYNDCBEW,0(R15)     LOAD APPROPRIATE DCBE
         LA    R0,DYNDCBEW         GET THE DCBE ADDRESS
         ST    R0,DCBDCBE          SET IT INTO THE DCB
.DCBEOK  ANOP
         B     DCBINITD            NOW GO SET THE DDNAME
SUBSYSAM NI    DCBMACR1,255-DCBMRPT1    TURN OFF NOTE/POINT FOR BSAM
         CLC   $MEMBER,BLANKS      MEMBER NAME SUPPLIED?
         BNE   DCBINITD            YES, ASSUME A MEMBER NEEDS ACCESSING
         CLI   DATAKV+1,1          NO, IS 'DATA' SPECIFIED?
         BE    DCBINITD            YES, DO NOT USE BPAM
USEBPAM  MVC   DYNDCBW(PDSDCBL),PDSDCB
         AIF   (NOT &ENVBIG).DCBINIT
         XC    DYNDCBEW,DYNDCBEW   ENSURE ALL FLAGS ARE ZERO
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    DCBINITD            YES, FORGET ABOUT LARGE MEMBERS
         CLI   OSBITS,X'9B'        MVS/ESA OR LATER?
         BNE   DCBINITD            NO, SO CANNOT BE Z/OS
         L     R15,CVTPTR(,0)      POINT TO THE CVT
         USING CVT,R15
         TM    CVTOSLV6,X'80'      Z/OS VERSION 2 OR LATER?
         BNO   DCBINITD            NO
         DROP  R15                 CVT
         ICM   R0,3,ARLRTRVD       ANY CONCATENATED JFCBS RETRIEVED?
         BNZ   BIGMEMOK            YES, ONE MAY BE A PDSE
         TM    DS1SMSFG,DS1PDSE    PDSE?
         BNO   DCBINITD            NO, USE TTR0 NOTE/POINT VALUES
BIGMEMOK L     R15,=A(SEQDCBE)     POINT TO RELEVANT DCBE
         L     R14,=A(PDSDCB2)     POINT TO MODEL DCB
         MVC   DYNDCBW(PDSDCBL),0(R14)
         MVC   DYNDCBEW,0(R15)     LOAD APPROPRIATE DCBE
         LA    R0,DYNDCBEW         GET THE DCBE ADDRESS
         ST    R0,DCBDCBE          SET IT INTO THE DCB
         OI    STATUS14,$14BIG     FLAG USING TTR INSTEAD OF TTR0
.DCBINIT ANOP
DCBINITD MVC   DCBDDNAM(8),$DDNAME LOAD DDNAME INTO DCB BEFORE OPEN
         TM    DS1DSORG+1,DS1ACBM  VSAM DATA SET?
         BZ    CVOLDIR             NO
         CLI   DSORGTYP,X'CF'      SCANNING VVDS?
         BE    CVOLDIR             YES, USE 4K BLOCKSIZE FROM VTOC
         TM    STATUS6,$6DB2       REVIEWING DB2 TABLESPACE?
         BO    CVOLDIR             YES, USE 4K BLOCKSIZE FROM VTOC
         LH    R15,AMBLKSZ         YES, LOAD FETCHED BLOCKSIZE
         LTR   R15,R15             IS BLOCK SIZE LOOKING GOOD?
         BP    AMBLKSOK            YES, USE IT
         L     R15,FW32760         NO, USE BIGGEST BLOCKSIZE ALLOWED
AMBLKSOK CH    R15,HW4096          BLOCKSIZE MORE THAN 4K?
         BNH   CVOLDIR             NO, STAY WITH 4K (FROM FMT1 DSCB)
         STH   R15,DCBBLKSI        HANDLE DFP VSAM BLOCKS EVEN
CVOLDIR  DS    0H                      IF LARGER THAN VTOC SAYS
         CLI   DSORGTYP,X'FF'      CVOL? (OR PDS DIRECTORY?)
         BNE   NODCBZAP            NO
         MVC   DYNDCBW(SEQDCBL),SEQDCB
         MVC   DCBDDNAM(8),$DDNAME LOAD DDNAME INTO DCB BEFORE OPEN
         MVC   $MEMBER,BLANKS      ERASE MEMBER NAME
         MVI   DSORG,DS1DSGPS      PRETEND TO BE SEQUENTIAL
         MVI   DCBRECFM,X'81'      FIXED & KEYED
         MVI   DCBKEYLE,8          KEYLENGTH = 8
         MVI   AMKLN+1,8           KEYLENGTH = 8
         LA    R15,256
         STH   R15,DCBLRECL        LRECL = 256
         STH   R15,DCBBLKSI        BLKSIZE = 256
NODCBZAP DS    0H
         SPACE
*        LA    R15,DYNEOD
*        STCM  R15,7,DCBEODA
         SPACE
*        LA    R15,DYNSYNAD
*        STCM  R15,7,DCBSYNA
         SPACE
         TM    STATUS7,$7BELL      HAS THE ALARM BEEN RAISED?
         BO    *+8                 YES, PROBABLY UNZIP I/O ERROR
         MVI   SYNADSW,X'00'       NO SYNAD ERROR YET
         MVI   OPEND,X'80'         ONE DCB FOR RDJFCB AND OPEN
         SPACE
         LA    R15,DYNEXLST
         STCM  R15,7,DCBEXLSA
         SPACE
         LA    R1,DYNDCBEX
         ST    R1,0(,R15)
         MVI   0(R15),X'05'        OPEN EXIT
         SPACE
         LA    R1,DYNABEND
         ST    R1,4(,R15)
         MVI   4(R15),X'11'        ABEND EXIT (MVS)
         SPACE
         LA    R0,JFCB
         ST    R0,8(,R15)
         MVI   8(R15),128+X'07'    READ JFCB EXIT (LAST EXIT IN LIST)
         SPACE
         CLC   JFCBDSNM,$DSNAME+2  JFCB ALREADY SET UP?
         BE    HAVEJFCB            YES, DO NOT FETCH IT AGAIN
         RDJFCB ((R4)),MF=(E,OPEND)
HAVEJFCB DS    0H
         TM    DSORGTYP,X'DD'      PROCESSING VTOC OR PDS DIRECTORY?
         BNO   NORMOPEN            NO, DO NOT USE OPEN-J
         CLI   DSORGTYP,X'DD'      PROCESSING VTOC?
         BNE   TYPJOPEN            NO, DO NOT SET VTOC DCB VALUES
         MVI   JFCBDSNM,X'04'      SET VTOC DATA SET NAME
         MVC   JFCBDSNM+1(43),JFCBDSNM
         MVI   DCBRECFM,X'81'      FIXED & KEYED
         MVI   DCBKEYLE,44         KEYLENGTH = 44
         LA    R15,96
         STH   R15,DCBLRECL        LRECL = 96
         STH   R15,DCBBLKSI        BLKSIZE = 96
TYPJOPEN DS    0H
         OI    JFCBTSDM,JFCNWRIT   DO NOT WRITE BACK JFCB
         OPEN  ((R4),INPUT),TYPE=J,MF=(E,OPEND)
         B     AFTROPEN
         SPACE
NORMOPEN DS    0H
         OPEN  ((R4),INPUT),MF=(E,OPEND)
         SPACE
AFTROPEN DS    0H
         NI    STATUS2,255-$2SOFT
         TM    DCBOFLGS,X'10'
         BO    OKOPEN
         LA    R1,MSG08
         LA    R0,L'MSG08
         TM    STATUS,STNOMEM      MEMBER NOT FOUND?
         BO    DYNOPENM            YES, BRANCH
         LA    R1,MSG04
         LA    R0,L'MSG04
DYNOPENM L     R15,=A(PUTMSG)
         BASR  R14,R15
         B     EXIT12
         SPACE
DYNDCBEX DS    0H                  DCB OPEN EXIT - RUNS IN AMODE24
*              TESTING THE RECFM FOR RECFM V OR F
*              REQUIRES AT LEAST 2 TESTS BECAUSE BOTH THE
*              V AND F BITS ARE ON WHEN RECFM IS U.
*              THIS ROUTINE MAKES A COPY OF THE RECFM BITS
*              AND ZEROES BOTH THE V AND F BITS IN THE COPY
*              IF THE RECFM IS U.  NOW WE CAN DETERMINE
*              RECFM V OR F IN ONE TEST INSTEAD OF TWO.
*              (DOUBLE ONLY USED TO FUDGE SPANNED BIT FOR VSAM.)
*              TSTRECFM X'40' IS USED AS THE "RDWS EXIST" FLAG.
         TM    DCBRECFM,X'C0'      IS RECORD FORMAT F, V OR U?
         BNZ   DYNRFMOK            YES, I SHOULD HOPE SO
         OI    DCBRECFM,X'C0'      NO, MAKE IT U
DYNRFMOK OC    DCBBLKSI,DCBBLKSI   IS THE BLKSIZE NON-ZERO?
         BNZ   DYNBLKOK            YES, I SHOULD HOPE SO
         AIF   (NOT &ENVBIG).DNBLYOK
         TM    DCBEFLG1,DCBESLBI   ALLOWING BLOCKS LONGER THAN 32KB?
         BO    DYNBLKOK            YES, ASSUME BLOCK SIZE ALL OK
.DNBLYOK ANOP
         MVC   DCBBLKSI,FW32760+2  NO, MAKE IT 32760
         OI    DCBRECFM,X'C0'      ALSO FORCE RECFM U
DYNBLKOK MVC   TSTRECFM,DCBRECFM   COPY RECFM
         MVC   DOUBLE(1),DCBRECFM  COPY RECFM AGAIN
         TM    DCBRECFM,X'C0'      RECFM U?
         BNO   DYNTSTOK            NO, BRANCH
         NI    TSTRECFM,255-X'C0'  YES, SET BOTH BITS OFF
** DON'T CLC   HW40,DCBBLKSI       BLKSIZE=40?
** SEEM  BNE   DYNTSTOK            NO
** TO    TM    DSORG,DS1DSGPS      DSORG=PS?
** NEED  BNO   DYNTSTOK            NO
** THIS  LA    R8,1944             GET REAL LOGREC BLOCK SIZE
** THESE STH   R8,DCBBLKSI         SET IT FOR MVS 3.8 SYS1.LOGREC
** DAYS  STCM  R8,12,DCBLRECL      RESET LRECL
DYNTSTOK TM    TSTRECFM,X'80'      FIXED LENGTH RECORDS?
**       BNO   DYNVBSCK            NO  (JUST INCREASE SMFPRMXX BUF)
         BNOR  R14                 NO
         TM    TSTRECFM,X'10'      FIXED BLOCKED?
         BOR   R14                 YES
         MVC   DCBLRECL,DCBBLKSI   LRECL=BLKSIZE FOR FIXED UNBLOCKED
         BR    R14
**NVBSCK TM    DCBRECFM,X'58'      VARIABLE-LENGTH BLOCKED SPANNED?
**       BNOR  R14                 NO
** BLKSI LA    R8,1000             YES
** IS    CH    R8,DCBLRECL         IS RECORD LENGTH 1000?
** HALF  BNER  R14                 NO
** OF    CH    R8,DCBBLKSI         IS BLOCK SIZE 1000?
** SMF   BNER  R14                 NO
** BUF   MVC   DCBLRECL,HW10000    YES, PROBABLY SYS1.MANX/SYS1.MANY
** VALUE BR    R14                 HANDLE SMF RECORD LENGTHS OVER 1000
         SPACE
DYNEOVEX DS    0H                  DCB EOV EXIT - RUNS IN AMODE24
         IC    R2,$CONCAT          GET CURRENT RELATIVE VOLUME NUMBER
         LA    R2,1(,R2)           INCREMENT IT
         STC   R2,$CONCAT          SAVE UPDATED VALUE
         NI    STATUS2,255-$2FAST  DISABLE "FASTPATH"
         ICM   R2,7,DCBDEBA-IHADCB(R1)   POINT TO DEB
         BZR   R14                       CAN'T EXPLAIN THAT
         USING DEBBASIC,R2
         ICM   R2,7,DEBSUCBB       GET UCB ADDRESS (DEBUCBA IF DASD)
         DROP  R2                  DEBBASIC
         STCM  R2,7,$UCBAD3        UPDATE UCB ADDRESS
         BZR   R14                 IGNORE VOLUME IF ZERO ADDRESS
         MVC   $VOLSER,28(R2)      COPY THE CURRENT VOLUME SERIAL
         LH    R2,DSNAIM           GET THE DATA SET NAME LENGTH
         LA    R2,MSGDSN(R2)       POINT PAST IT IN TOP LINE
         CLI   1(R2),X'96'         SHOWING 'ON VOLUME'?
         BNER  R14                 NO, ALL DONE
         MVC   4(6,R2),$VOLSER     YES, UPDATE IT
         TR    4(6,R2),PERIODS     SANITISE IT
         BR    R14
         SPACE
DYNABEND DS    0H                  DCB ABEND EXIT - RUNS IN AMODE24
         OI    STATUS,STABEND      INDICATE OPEN ABENDED
         TM    3(R1),8+4+2         ANY OPTIONS AVAILABLE?
         BZR   R14                 NO
         TM    3(R1),4             ALLOWED TO IGNORE THE ABEND?
         MVI   3(R1),0             PREPARE FOR NO
         BZR   R14                 NO
         L     R8,0(,R1)           GET COMPLETION CODE
         N     R8,=A(X'FFF0FF00')
         CL    R8,=A(X'01301800')  IS IT AN 013-18 ABEND?
         BNE   *+8                 NO
         OI    STATUS,STNOMEM      INDICATE MEMBER NOT FOUND
         NI    STATUS9,255-$9_H-$9_M CANCEL ANY HISTORY/MAP REQUEST
         MVI   3(R1),4             IGNORE THE ABEND
         TM    STATUS,STNOMEM      MEMBER NOT FOUND?
         BOR   R14                 YES
         MVC   MSG+2(16),=CL16'OPEN ABENDED - S'
         UNPK  MSG+18(7),0(4,R1)
         TR    MSG+18(6),HEXTAB-240
         MVI   MSG+21,C'-'
         MVI   MSG+24,C' '
         LA    R0,22
         STH   R0,MSG              SHOW ABEND CODE IF IN RFE
         OI    STATUS7,$7BELL      REQUEST AUDIBLE ALARM
         BR    R14
         SPACE
OKOPEN   OI    STATUS,STOPEN       TELL CLEANUP TO CLOSE DCB
         NI    STATUS,255-STABEND  RESET DCB ABEND FLAG
         OI    DYNEXLST+4,X'80'    SHORTEN DCB EXIT LIST TO 2 ENTRIES
         XC    KOUNT64,KOUNT64     RESET WORD BORROWED FOR DYNEXLST
         XC    DEBLOCKS(12),DEBLOCKS
         TM    DCBDSORG,DCBDSGPS   DSORG=PS?
         BNO   DYNDSGOK            NO, EOV EXIT IS NOT APPLICABLE
         SR    R1,R1               CLEAR FOR INSERT
         ICM   R1,7,DCBDEBA        POINT TO DATA EXTENT BLOCK
         BZ    DYNDSGOK            CAN'T EXPLAIN THAT
         USING DEBBASIC,R1
         ICM   R14,7,DEBSUCBB      GET UCB ADDRESS (DEBUCBA IF DASD)
         BZ    DYNDSGOK            IGNORE ZERO ADDRESS
         DROP  R1                  DEBBASIC
         TM    18(R14),X'A0'       TAPE OR DASD?
         BNM   DYNDSGOK            NO, DON'T KNOW WHAT IT IS
         STCM  R14,7,$UCBAD3       YES, UPDATE UCB ADDRESS
         MVC   $VOLSER,28(R14)     COPY THE CURRENT VOLUME SERIAL
         MVI   $CONCAT,0           STARTING WITH FIRST VOLUME
         ICM   R0,3,ARLRTRVD       ANY CONCATENATED JFCBS RETRIEVED?
         BNZ   DYNDSGPS            YES, NOT A SINGLE DATA SET
         CLI   JFCBNVOL,1          IS ONLY DATA SET MULTI-VOLUME?
         BNH   DYNDSGOK            NO, SKIP EOV EXIT DEPLOYMENT
DYNDSGPS LA    R0,DYNEOVEX         GET EOV EXIT ADDRESS
         ST    R0,DYNEXLST         REPLACE OPEN EXIT WITH EOV EXIT
         MVI   DYNEXLST,X'06'      SET DCB EOV EXIT CODE
DYNDSGOK TM    STATUS,STGMVU       DONE THIS BEFORE?
         BO    GETNEWNM            YES, MUST BE AFTER A 'NEWTOP'
         AIF   (NOT &ENV390).OKOPNOK
         TM    STATUS2,$2CART      REVIEWING A 3480?
         BZ    OKOPENOK            NO
         MVC   REPLY(DSP3480L),DISP3480       (TEMPORARY WORK AREA)
         MSGDISP RDY,DCB=(R4),MF=(E,REPLY)    (1ST VOLUME ONLY)
OKOPENOK DS    0H
.OKOPNOK ANOP
         MVC   DYNDECBW,DYNDECB
OPENX    DS    0H
         SPACE
************************************************************
*                                                          *
*         SET UP THE BUFFER AREA                           *
*                                                          *
************************************************************
         SPACE
         SR    R0,R0
         IC    R0,DCBKEYLE         KEY LENGTH
         TM    STATUS2,$2TAPE      MAGNETIC TAPE FILE?
         BZ    GOTKEYLE            NO, HAVE NOW GOT THE KEY LENGTH
         SR    R0,R0               YES, TAPE BLOCKS DON'T HAVE KEYS
         TM    DCBDEVT,X'80'       MAGNETIC TAPE FILE?
         BZ    GOTKEYLE            NO, HAVE NOW GOT THE KEY LENGTH
         MVC   COL1LBL+2(5),=C'NOCMP'
         CLI   DCBTRTCH,X'04'      NO COMPACTION?
         BE    GOTKEYLE            YES
         MVC   COL1LBL+2(5),=C'CMPAC'
         CLI   DCBTRTCH,X'08'      COMPACTION?
         BE    GOTKEYLE            YES
         MVC   COL1LBL+2(5),=C'DEN=0'
         CLI   DCBDEN,X'03'        200 BPI?
         BE    GOTKEYLE            YES, DENSITY=0
         MVI   COL1LBL+6,C'1'
         CLI   DCBDEN,X'43'        556 BPI?
         BE    GOTKEYLE            YES, DENSITY=1
         MVI   COL1LBL+6,C'2'
         CLI   DCBDEN,X'83'        800 BPI?
         BE    GOTKEYLE            YES, DENSITY=2
         MVI   COL1LBL+6,C'3'
         CLI   DCBDEN,X'C3'        1600 BPI?
         BE    GOTKEYLE            YES, DENSITY=3
         MVI   COL1LBL+6,C'4'
         CLI   DCBDEN,X'D3'        6250 BPI?
         BE    GOTKEYLE            YES, DENSITY=4
         MVC   COL1LBL+2(5),=C'CART '
         CLI   DCBDEVT,X'80'       3480 MAGNETIC TAPE UNIT?
         BE    GOTKEYLE            YES
         MVC   COL1LBL+2(4),=C'TAPE'
GOTKEYLE LTR   R0,R0               READING LEADING KEYS (K OF CKD)?
         BNZ   RESETRKP            YES, ENSURE WE THINK RKP IS ZERO
         ICM   R1,3,AMKLN          NON-KEYED ACCESS OF KEYED FILE?
         BZ    KEYORNOT            NO, JUST PLAIN UNKEYED FILE
         ICM   R1,3,AMRKP          YES, IS KEY IMBEDDED IN DATA?
         BNZ   KEYORNOT            YES, RED RULER FOR SOFTWARE KEY
         STCM  R0,12,AMKLN         NO, KEY NOT READ SO NO RED RULER
*        B     KEYORNOT            AMRKP IS ZERO ANYWAY SO SKIP JUMP
RESETRKP STCM  R0,12,AMRKP         RED RULER FOR LEADING HARDWARE KEY
KEYORNOT ST    R0,SAVKEYLE
         TM    TSTRECFM,X'40'      DO RECORDS START WITH AN RDW?
         BO    *+8                 YES
         NI    STATUS16,255-$16RDW NO, SO THEY CANNOT BE DISPLAYED
         TM    STATUS16,$16RDW     DISPLAYING RDWS?
         BZ    COL1OK1             NO
         CLI   COL1LBL,C'1'        JUST SHOWING A 1?
         BNE   COL1OK1             NO, DO NOT OVERLAY IT
         MVC   COL1LBL(4),=C'RDW ' YES, INDICATE STARTING WITH RDW
         MVI   AMKLN+1,4           SET "KEY" LENGTH
COL1OK1  LH    R0,DCBBLKSI
         AIF   (NOT &ENVBIG).SVBLKOK
         TM    DCBEFLG1,DCBESLBI   ALLOWING BLOCKS LONGER THAN 32KB?
         BZ    SAVBLKOK            NO, HAVE BLOCK SIZE AS EXPECTED
         L     R0,DCBEBLKSI        YES, GET BLOCK SIZE
SAVBLKOK DS    0H
.SVBLKOK ANOP
         A     R0,SAVKEYLE
         AH    R0,HW7              ROUND
         N     R0,=A(X'FFFFFFF8')   UPWARDS TO MULTIPLE OF 8
         ST    R0,SAVBLKSI         SAVE FOR PARTITIONING
         SPACE
         SR    R0,R0
         ST    R0,SAVSPANL         ZERO FOR UNSPANNED
         TM    MODE,MD_VSAM        VSAM CI INTERPRETATION?
         BZ    SAMDCB              NO, DO USUAL CALCULATIONS
         OI    DOUBLE,X'08'        YES, TURN ON SPANNED BIT
         ICM   R0,15,AMCIV         EXTRACTED CISIZE?
         BZ    USEVSBLK            NO
         ST    R0,SAVBLKSI         YES, USE IT AS BLOCK SIZE
         ICM   R0,15,AMLCL         GET MAXIMUM LRECL
         BZ    DB2TBCHK            ZERO, LINEAR SO CHECK FOR DB2
         TM    AMATR,VVRAMSPN      SPANNED VSAM?
         BO    GOTLRECL            YES, SPANNED FLAG ALREADY ON
         NI    DOUBLE,255-X'08'    DEFINITELY NOT (VVDS SAID SO)
         B     GOTLRECL            USE IT
DB2TBCHK TM    STATUS6,$6DB2       CHECK FOR DB2 TABLESPACE
         BZ    USEVSBLK            USE BLOCK SIZE IF NON-DB2 LINEAR
         MVC   AMCIV,=F'32768'     SET "CONTROLINTERVAL" SIZE TO 32K
USEVSBLK LH    R0,DCBBLKSI         VVDS IS NOT SPANNED
         CLI   DSORGTYP,X'CF'      SCANNING VVDS?
         BE    GOTLRECL            YES, USE BLKSIZE AS MAXIMUM LRECL
         L     R0,FW32760          NO, CATER FOR SPANNED VSAM
         B     GOTLRECL            USE 32K-ISH AS LRECL
         SPACE
SAMDCB   TM    DCBRECFM,X'C0'      RECFM U?
         BO    USEBLKSI            YES, LRECL NOT ALWAYS ZERO
         LH    R0,DCBLRECL
         LTR   R0,R0               LRECL VALUE PRESENT?
         BP    USELRECL            YES
         BZ    USEBLKSI            NO
         LA    R0,64               LRECL=X
         SLL   R0,10               ALLOW FOR UP TO 64KB
         B     USELRECL
USEBLKSI LH    R0,DCBBLKSI
         AIF   (NOT &ENVBIG).LRECLOK
         TM    DCBEFLG1,DCBESLBI   ALLOWING BLOCKS LONGER THAN 32KB?
         BZ    USELRECL            NO, HAVE BLOCK SIZE AS EXPECTED
         L     R0,DCBEBLKSI        YES, GET BLOCK SIZE
.LRECLOK ANOP
USELRECL A     R0,SAVKEYLE
GOTLRECL ST    R0,RECSIZE
         AH    R0,HW7              ROUND
         N     R0,=A(X'FFFFFFF8')   UPWARDS TO MULTIPLE OF 8
*        CH    R0,HW1000           IS LRECL GREATER THAN MAX?
*        BNH   *+8                 NO, SKIP NEXT INSTR
*        LH    R0,HW1000           YES, HELD RECORDS MUST BE TRUNCATED
         ST    R0,SAVLRECL         SAVE FOR HOLD AREA DIVISION
         TM    DOUBLE,X'48'        VS OR VBS OR SPANNED VSAM?
         BNO   NOTSPAN             NO   (DOUBLE NOW FREE FOR WORK AREA)
         ST    R0,SAVSPANL         SAVE FOR PARTITIONING
NOTSPAN  MH    R0,PAGESIZE
         ST    R0,SAVHOLDL         SAVE FOR PARTITIONING
         SPACE
         A     R0,SAVSPANL         COMBINE LENGTHS FOR GETMAIN
         A     R0,SAVBLKSI         COMBINE LENGTHS FOR GETMAIN
         LA    R7,200              GET MINIMUM ENTRY COUNT
         MH    R7,=Y(CHKPTLN)      GET SPACE FOR MINIMUM ENTRY COUNT
         AR    R0,R7               PLUS ROOM FOR 200 CHECKPOINTS
         ST    R0,RANGE            SAVE MINIMUM STORAGE SIZE
         AIF   (&ENV390).ENTMORE
         LA    R8,2048-200         GET ADDITIONAL OPTIONAL ENTRY COUNT
         AGO   .ENTOKAY
.ENTMORE ANOP
         LA    R8,4096-200         GET ADDITIONAL OPTIONAL ENTRY COUNT
.ENTOKAY ANOP
         MH    R8,=Y(CHKPTLN)      GET ADDITIONAL SPACE TO REQUEST
         AR    R0,R8               GET MAXMIMUM SIZE TO REQUEST
         ST    R0,RANGE+4          SAVE MAXIMUM STORAGE SIZE
         MVI   GETMNTRC,7          TRACK GETMAIN IN CASE OF FAILURE
         AIF   (NOT &ENV390).GMVU1
         CLI   OSBITS,X'9B'        IS GETMAIN VRU SUPPORTED?
         BE    GMVU1               YES, DEFINITELY
.GMVU1   ANOP
         LA    R7,RANGE            POINT TO REQUEST STORAGE RANGE
         LA    R8,ANSWER           POINT TO REQUEST RESULTS AREA
         MVC   GMVUW(GMVUL),GMVU   INITIALIZE REQUEST PARAMETER AREA
         GETMAIN VU,LA=(R7),A=(R8),MF=(E,GMVUW)
         AIF   (NOT &ENV390).GMVU2
         B     GMVU2
GMVU1    L     R0,RANGE+4          LOAD MAXIMUM STORAGE SIZE
         L     R1,RANGE            LOAD MINIMUM STORAGE SIZE
         GETMAIN VRU,LV=((0),(1)),LOC=(31,64)
         ST    R1,ANSWER           SAVE NEW STORAGE ADDRESS
         ST    R0,ANSWER+4         SAVE NEW STORAGE SIZE
.GMVU2   ANOP
GMVU2    OI    STATUS,STGMVU
         L     R1,ANSWER
         LR    R0,R1
         A     R0,ANSWER+4
         ST    R0,ENDPTR           END OF GETMAINED AREA
         ST    R1,BLOCKPTR
         A     R1,SAVBLKSI         POINT PAST BLOCK AREA
         ST    R1,SPANPTR
         A     R1,SAVSPANL         POINT PAST SPANNED RECORD AREA
         ST    R1,HOLDPTR
         A     R1,SAVHOLDL         POINT PAST HOLD AREA
         ST    R1,CHKPTTOP
         XC    0(256,R1),0(R1)     FIRST ENTRY IN TABLE
         CLI   DSORGTYP,X'CF'      SCANNING VVDS FOR DETAILS?
         BE    VVDSSCAN            YES, GO DO IT
         TM    STATUS13,$13_L      JUST LOOKING AT CACHED DATA?
         BNO   HOLDINIT            NO
         L     R7,CHKPTTOP         POINT TO FIRST CHECKPOINT
         LA    R7,CHKPTLN(,R7)     POINT TO NEXT ENTRY
         SR    R1,R1               GET LOW VALUES
         BCTR  R1,0                GET HIGH VALUES
         ST    R1,0(,R7)           MAKE ONE FOR E-O-F
         MVC   4(4,R7),MAXPOINT
         ST    R7,CHKPTBOT         IT IS NOW THE LAST ONE
         SPACE
************************************************************
*                                                          *
*         INITIALIZE HOLD AREA DIRECTORY                   *
*                                                          *
************************************************************
         SPACE
HOLDINIT L     R7,HOLDDIR
         SR    R0,R0
         L     R15,HOLDPTR
         LH    R8,PAGESIZE         LINES PER PAGE
         TM    TSTRECFM,X'40'      RECFM V?
         BZ    HOLDLOOP            NO
         LH    R1,DCBLRECL         YES, GET THE LOGICAL RECORD LENGTH
         LTR   R1,R1               IS IT POSITIVE AS EXPECTED?
         BNP   HOLDLOOP            NO, BETTER NOT MESS WITH IT
         TM    STATUS16,$16RDW     SHOWING RDWS?
         BO    *+8                 YES, LEAVE RECSIZE AS IS
         SH    R1,HW4              NO, DISPLAY 4 BYTES LESS THAN LRECL
         ST    R1,RECSIZE          ENSURE RECSIZE IS CORRECT
HOLDLOOP ST    R0,DIRNUM(,R7)      PUT ZERO IN RECORD NUMBER
         ST    R0,DIRLEN(,R7)      PUT ZERO IN RECORD LENGTH
         ST    R0,DIRTTR(,R7)      PUT ZERO IN RECORD POSITION
         ST    R15,DIRREC(,R7)     STORE ADDRESS OF HELD RECORD
         A     R15,SAVLRECL        POINT TO NEXT HELD RECORD
         LA    R1,DIRSIZ(,R7)      POINT TO NEXT ENTRY
         ST    R1,DIRNXT(,R7)      STORE ITS ADDRESS IN THIS ENTRY
         LR    R14,R7              SAVE LAST ENTRY
         LR    R7,R1               MAKE NEXT ENTRY THIS ENTRY
         BCT   R8,HOLDLOOP         DO IT FOR ALL BUT LAST ENTRY
         L     R1,HOLDDIR          ADDRESS OF FIRST ENTRY
         ST    R1,DIRNXT(,R14)     CLOSE THE CIRCLE
         ST    R1,HOLDTOP          START WITH FIRST AS TOP
         SPACE
************************************************************
*                                                          *
*         PROCESS PRE-SPECIFIED MEMBER NAME AND TOP TTR    *
*                                                          *
************************************************************
         SPACE
         TM    STATUS8,$8ZIPU      PROCESSING UNZIPPED DATA?
         BO    TOPTTROK            YES, FILE NAME SET, STAY AT START
         TM    DCBOFLGS,DCBOFOPN   IS THE DCB OPEN?
         BNO   TOPTTROK            NO, CANNOT POINT TO A BLOCK
         MVC   DSNAIM(46),$DSNAME
         ICM   R0,15,TTR           INITIAL TOP-OF-DATA SPECIFIED?
         BZ    TOPTTROK            NO, PERFORM NORMAL DATA ACCESS
         XASAM24
         TM    STATUS2,$2TAPE      MAGNETIC TAPE FILE?
         BO    TOPBLKOK            YES, TTR CONTENTS IS A BLOCK NUMBER
         TM    STATUS14,$14BIG     32-BIT NOTE/POINT VALUES?
         BO    TOPBLKOK            YES, TTR CONTENTS IS TTTR
         SLL   R0,8                NO, CONVERT TO TTR0 FORMAT
         ST    R0,TTR              SAVE TOP-OF-DATA TTR0
TOPBLKOK POINT (R4),TTR            POINT TO USER-SPECIFIED TOP-OF-DATA
         XASAM31
TOPTTROK TM    DCBDSORG,X'02'      USING BPAM?
         BZ    SCANCHK             NO, SKIP MEMBER PROCESSING
         ICM   R0,15,TTR           INITIAL TOP-OF-DATA SPECIFIED?
         BNZ   TOPTTRNM            YES, GO CONSTRUCT "MEMBER" NAME
         MVC   BLDLNAME,$MEMBER    NO, LOAD MEMBER NAME TO SEARCH FOR
         OI    STATUS,STNOMEM      PREPARE FOR NO MEMBER OF THAT NAME
         MVC   $MEMBER,NOMEM
         AIF   (&ENVZV2).GENOK3
         B     TOPOFMEM
         AGO   .GENOK4
.GENOK3  ANOP
         TM    STATUS15,$15GEN     SHOWING MEMBER GENERATIONS?
         BZ    TOPOFMEM            NO
         TM    STATUS8,$8_S        'S' SELECTION CODE?
         BZ    TOPOFMEM            NO
         NI    STATUS8,255-$8_S    YES, RESET FLAG
         MVC   $MEMBER,BLDLNAME    SET MEMBER NAME
         LA    R2,BLDL+40          POINT TO PLIST AREA
         XC    0(20,R2),0(R2)      CLEAR SOME STORAGE
         MVI   1(R2),20            SET LENGTH OF PLIST
         MVI   7(R2),8             SET MEMBER NAME LENGTH
         MVC   8(8,R2),BLDLNAME    SET MEMBER NAME
         MVC   16(4,R2),MSGDSN+10  SET GENERATION NUMBER
         FIND  (R4),(R2),G         CONNECT TO MEMBER
         MVC   BLDLTTRP(34),MSGDSN MOCK UP BLDL RESULTS
         NI    STATUS,255-STNOMEM  RESET MEMBER-NOT-FOUND FLAG
         LTR   R15,R15             SUCCESS?
         BZ    MEMFOUND            YES
         STM   R15,R0,DOUBLE       NO, SAVE RETURN AND REASON CODES
         OI    STATUS7,$7BELL      REQUEST AUDIBLE ALARM
         MVI   MSG,36              MEMBER NOT FOUND <=> FIND RC=04-00
         CLI   DOUBLE+3,4          IS FIND RETURN CODE FOUR?
         BNE   SHOFNDRC            NO
         LTR   R0,R0               IS FIND REASON CODE ZERO?
         BZ    EXITRC              YES, RETURN TO REVPDS
SHOFNDRC MVC   MSG+2(8),=C'FIND RC='
         UNPK  MSG+10(3),DOUBLE+3(2)
         UNPK  MSG+13(3),DOUBLE+7(2)
         TR    MSG+10(5),HEXTAB-240
         MVI   MSG+12,C'-'
         MVI   MSG+15,C' '
         LA    R0,13
         STH   R0,MSG              SET MESSAGE LENGTH
         B     EXITRC              RETURN TO REVPDS
.GENOK4  ANOP
TOPTTRNM NI    STATUS,255-STNOMEM  RESET MEMBER-NOT-FOUND FLAG
         NI    STATUS8,255-$8_S    RESET BOUNCE-OUT-IF-ERROR FLAG
         TM    STATUS,STPODIR      CALLED FROM REVPDS?
         BO    GETNEWNM            YES, MEMBER NAME SUPPLIED AS USUAL
         MVI   $MEMBER,C'!'        MAKE "INVALID" MEMBER NAME
         UNPK  $MEMBER+1(7),TTR(4) SHOW SPECIFIED TTR
         TR    $MEMBER+1(6),HEXTAB-240  ENSURE PRINTABLE HEX DIGITS
         MVI   $MEMBER+7,C'!'      TIDY UP GARBAGE
         B     GETNEWNM            SKIP MEMBER PROCESSING
         SPACE
SCANCHK  TM    MODE,MD_OFFLD       PERFORMING HFS FILE SEARCH?
         BNO   GETNEWNM            NO, GO CONSTRUCT FILE NAME HEADING
         B     MEMOFFLD            YES, CALL MEMRDWRT
         SPACE
         DROP  R5                  FAS2INIT
         SPACE
         AIF   (NOT &ENVBIG).DCBEOKS
         PRINT NOGEN
SEQDCBE  DCBE  BLOCKTOKENSIZE=LARGE
SEQDCBEL EQU   *-SEQDCBE
SEQDCBET DCBE  BLKSIZE=0           LARGE BLOCK INTERFACE (LBI)
SEQDCBEV DCBE  EADSCB=OK           Z/OS 1.10: DCBE+20,X'20'
SEQDCB2  DCB   DDNAME=DYNAM,DSORG=PS,MACRF=(RP),                       +
               EODAD=DYNEOD,SYNAD=DYNSYNAD,DCBE=2
PDSDCB2  DCB   DDNAME=DYNAM,DSORG=PO,MACRF=(R),                        +
               EODAD=DYNEOD,SYNAD=DYNSYNAD,DCBE=2
         PRINT GEN
.DCBEOKS ANOP
         SPACE
         LTORG
         SPACE
**********************************************************************
*                                                          *         *
*         SET UP THE ACB                                   *  GP@FT  *
*                                                          *  06/92  *
**********************************************************************
         SPACE
         AIF   (NOT &ENV390).ACBINIT
         PUSH  ACONTROL
         ACONTROL FLAG(NOPAGE0)
.ACBINIT ANOP
         USING ACBINIT,R5
ACBINIT  DS    0H
         ST    R5,SBASAVE          SAVE PREVIOUS LOCAL BASE
         LR    R5,R4               SET LOCAL BASE
         TM    STATUS,STGMVU       DONE THIS BEFORE?
         BO    ACBREOPN            YES, MUST BE AFTER A 'NEWTOP'
         MVI   TSTRECFM,0
         NI    STATUS2,255-$2SOFT-$2FAST
         L     R4,SCREENBF         POINT TO MACRO PARAMETER LIST AREA
         LA    R6,DEBLOCKS         GET THE LENGTH OF AN ACB
         SHOWCB AREA=(R6),LENGTH=4,FIELDS=(ACBLEN),MF=(G,(R4))
*        LA    R6,DEBLOCKS+4       GET THE LENGTH OF AN EXLST
*        SHOWCB AREA=(R6),LENGTH=4,FIELDS=(EXLLEN),MF=(G,(R4))
         LA    R6,DEBLOCKS+8       GET THE LENGTH OF AN RPL
         SHOWCB AREA=(R6),LENGTH=4,FIELDS=(RPLLEN),MF=(G,(R4))
         SPACE
         ST    R4,DOUBLE           SAVE THE MACRO WORK AREA ADDRESS
         LA    R6,DEBLOCKS         POINT TO THE 3 RETURNED LENGTHS
         LA    R1,3                GET THE NUMBER OF THESE
ACBLOOP1 L     R0,0(,R6)           GET THE LENGTH
         AH    R0,HW7              ROUND
         N     R0,=A(X'FFFFFFF8')   UPWARDS TO MULTIPLE OF 8
         ST    R0,0(,R6)           SAVE THE LENGTH TO BE RESERVED
         LA    R6,4(,R6)           POINT TO THE NEXT LENGTH
         BCT   R1,ACBLOOP1
         L     R0,=F'32767'        GET MAXIMUM SUPPORTED RECORD LENGTH
         CL    R0,AMLCL            IS THIS TOO LONG?
         BNH   ACBLCLOK            NO, TRIM RECORDS TO THIS
         ICM   R0,15,AMLCL         YES, USE REAL MAXIMUM LRECL
         BNZ   ACBLCLOK                 IF NOT A LINEAR DATA SET
         LH    R0,HW4096           ASSUME 4K BLOCKS IF LINEAR
         TM    STATUS6,$6DB2       PROCESSING DB2 ROWS?
         BZ    ACBLCLOK            NO, OTHER LINEAR
         L     R0,=F'32767'        GET MAXIMUM SUPPORTED RECORD LENGTH
ACBLCLOK ST    R0,RECSIZE          SAVE IT FOR LEFT/RIGHT SCROLLING
         AH    R0,HW7              ROUND
         N     R0,=A(X'FFFFFFF8')   UPWARDS TO MULTIPLE OF 8
         ST    R0,SAVLRECL         SAVE FOR HOLD AREA DIVISION
         MH    R0,PAGESIZE
         ST    R0,SAVHOLDL         SAVE FOR PARTITIONING
         LA    R1,200              GET MINIMUM ENTRY COUNT
         LA    R6,4096-200         GET ADDITIONAL OPTIONAL ENTRY COUNT
         MH    R1,=Y(CHKPTLN)      GET MINIMUM ROOM
         MH    R6,=Y(CHKPTLN)      GET OPTIONAL ROOM
         SPACE
         LA    R0,$ACBWLEN         GET ACB I/O SUBROUTINE WORKAREA SIZE
         A     R0,SAVLRECL         ADD RECORD BUFFER SIZE
         A     R0,DEBLOCKS         ADD ACB SIZE
*        A     R0,DEBLOCKS+4       ADD EXLST SIZE
         A     R0,DEBLOCKS+8       ADD RPL SIZE
         A     R0,DEBLOCKS+8       ADD RPL SIZE AGAIN
         A     R0,SAVHOLDL         ADD SCREEN RECORD HOLD AREA SIZE
         AR    R0,R1               ADD MINIMUM CKECKPOINT SIZE
         ST    R0,RANGE            SAVE MINIMUM STORAGE SIZE
         AR    R0,R6               ADD OPTIONAL CHECKPOINT SIZE
         ST    R0,RANGE+4          SAVE MAXIMUM STORAGE SIZE
         MVI   GETMNTRC,8          TRACK GETMAIN IN CASE OF FAILURE
         LA    R7,RANGE            POINT TO REQUEST STORAGE RANGE
         LA    R8,ANSWER           POINT TO REQUEST RESULTS AREA
         MVC   GMVUW(GMVUL),GMVU   INITIALIZE REQUEST PARAMETER AREA
         GETMAIN VU,LA=(R7),A=(R8),MF=(E,GMVUW)
         OI    STATUS,STGMVU
         L     R2,ANSWER           POINT TO ACB I/O WORK AREA
         USING @ACBDATA,R2
         LR    R0,R2
         A     R0,ANSWER+4
         ST    R0,ENDPTR           END OF GETMAINED AREA
         LA    R1,$ACBWLEN(,R2)
         ST    R1,BLOCKPTR         SAVE RECORD BUFFER ADDRESS
         ST    R1,SPANPTR
         A     R1,SAVLRECL
         ST    R1,ACBADDR          SAVE ACB ADDRESS
         A     R1,DEBLOCKS
*        ST    R1,XLSTADDR         SAVE EXLST ADDRESS
*        A     R1,DEBLOCKS+4
         ST    R1,RPLADDR          SAVE FIRST RPL ADDRESS
         A     R1,DEBLOCKS+8
         ST    R1,RPL2ADDR         SAVE SECOND RPL ADDRESS
         A     R1,DEBLOCKS+8
         ST    R1,HOLDPTR          SAVE SCREEN RECORD HOLD AREA ADDRESS
         A     R1,SAVHOLDL
         ST    R1,CHKPTTOP         SAVE CHECKPOINT TABLE ADDRESS
         XC    0(256,R1),0(R1)     RESET FIRST ENTRY IN TABLE
         XC    VSAMKEY,VSAMKEY     RESET KEY HOLD AREA
         XC    ACBRBA,ACBRBA       RESET RBA HOLD AREA
         SPACE
**********************************************************************
*                                                          *         *
*         CREATE VSAM I/O CONTROL BLOCKS                   *  GP@FT  *
*                                                          *  06/92  *
**********************************************************************
         SPACE
         L     R4,ACBADDR          POINT TO WHERE THE ACB WILL GO
         L     R14,DEBLOCKS        GET SIZE OF ACB AREA
*        L     R6,XLSTADDR         POINT TO WHERE THE EXLST WILL GO
         L     R1,DOUBLE           POINT TO MACRO PLIST WORK AREA
         AIF   (NOT &ENV390).ACB370
         CLI   OSBITS,X'9B'        MVS/ESA OR LATER?
         BNE   ACB370              NO, DO NOT FIDDLE WITH RLS
         GENCB BLK=ACB,            GENERATE AN ACB                     +
               BUFND=1,            AT LEAST 1 DATA BUFFER              +
               BUFNI=2,            AT LEAST 2 INDEX BUFFERS            +
               DDNAME=DYNAM,       SUPPLY DUMMY DATA DEFINITION NAME   +
               MACRF=(ADR,KEY,DIR,SEQ,IN),                             +
               RMODE31=ALL,        LET VSAM USE ANY PART OF REGION     +
               RLSREAD=NRI,        NO READ INTEGRITY IF RLS            +
               STRNO=2,            ALLOW TWO CONCURRENT REQUESTS       +
               WAREA=(R4),         SUPPLY ACB ADDRESS                  +
               LENGTH=(R14),       SUPPLY ACB SIZE                     +
               MF=(G,(1))
         B     ACBOKAY             THE ACB IS NOW INITIALIZED
*              EXLST=(R6),         SUPPLY EXIT LIST ADDRESS           +
.ACB370  ANOP
ACB370   DS    0H
         GENCB BLK=ACB,            GENERATE AN ACB                     +
               BUFND=1,            AT LEAST 1 DATA BUFFER              +
               BUFNI=2,            AT LEAST 2 INDEX BUFFERS            +
               DDNAME=DYNAM,       SUPPLY DUMMY DATA DEFINITION NAME   +
               MACRF=(ADR,KEY,DIR,SEQ,IN),                             +
               STRNO=2,            ALLOW TWO CONCURRENT REQUESTS       +
               WAREA=(R4),         SUPPLY ACB ADDRESS                  +
               LENGTH=(R14),       SUPPLY ACB SIZE                     +
               MF=(G,(1))
*              EXLST=(R6),         SUPPLY EXIT LIST ADDRESS           +
         AIF   (NOT &ENV390).ACBOKAY
         TM    OSBITS,X'80'        IS 31-BIT ADDRESSING FOR VSAM OKAY?
         BZ    ACBOKAY             NO, THE ACB IS NOW INITIALIZED
         L     R1,DOUBLE           YES, EXPLOIT THIS IF POSSIBLE
         MODCB ACB=(R4),           MODIFY THE GENERATED ACB            +
               RMODE31=ALL,        LET VSAM USE ANY PART OF REGION     +
               MF=(G,(1))
.ACBOKAY ANOP
ACBOKAY  MVC   DCBDDNAM,$DDNAME    SUPPLY THE REAL DATA DEFINITION NAME
         SPACE
*        L     R14,DEBLOCKS+4      GET SIZE OF EXLST AREA
*        L     R1,DOUBLE           POINT TO MACRO PLIST WORK AREA
*        GENCB BLK=EXLST,          GENERATE AN EXLST                  +
*              WAREA=(R6),         SUPPLY EXLST ADDRESS               +
*              LENGTH=(R14),       SUPPLY EXLST SIZE                  +
*              MF=(G,(1))
         SPACE
         L     R14,DEBLOCKS+8      GET SIZE OF RPL AREA
         L     R6,RPLADDR          POINT TO WHERE THE RPL WILL GO
         L     R8,SAVLRECL         GET MAXIMUM RECORD LENGTH
         L     R1,DOUBLE           POINT TO MACRO PLIST WORK AREA
         GENCB BLK=RPL,            GENERATE AN RPL                     +
               ACB=(R4),           SUPPLY ACB ADDRESS                  +
               AREA=(S,VSAMREC),   SUPPLY RECORD MOVE BUFFER ADDRESS   +
               AREALEN=(R8),       SUPPLY RECORD MOVE BUFFER LENGTH    +
               ARG=(S,CHKPTDUM+4), SUPPLY RBA/RRN ARGUMENT ADDRESS     +
               MSGAREA=(S,ACBIOMSG),      SUPPLY AN I/O MESSAGE AREA   +
               MSGLEN=128,                SUPPLY MESSAGE AREA LENGTH   +
               OPTCD=(ADR,SEQ,FWD,SYN,MVE),                            +
               WAREA=(R6),         SUPPLY RPL ADDRESS                  +
               LENGTH=(R14),       SUPPLY RPL SIZE                     +
               MF=(G,(1))
         TM    $UCBAD,$KSDS        ACCESS IN KEY ORDER REQUIRED?
         BZ    ACBCICHK            NO, SEE IF CIMODE IS REQUIRED
         LA    R1,ACBIOMSG         POINT TO PARAMETER LIST WORK AREA
         MODCB RPL=(R6),OPTCD=DIR, CHANGE RBA RPL TO DIRECT ACCESS     +
               MF=(G,(1))
         L     R14,DEBLOCKS+8      GET SIZE OF RPL AREA
         L     R6,RPL2ADDR         POINT TO WHERE THE RPL WILL GO
*        L     R8,SAVLRECL         GET MAXIMUM RECORD LENGTH (DONE B4)
         L     R1,DOUBLE           POINT TO MACRO PLIST WORK AREA
         GENCB BLK=RPL,            GENERATE AN RPL                     +
               ACB=(R4),           SUPPLY ACB ADDRESS                  +
               AREA=(S,VSAMREC),   SUPPLY RECORD MOVE BUFFER ADDRESS   +
               AREALEN=(R8),       SUPPLY RECORD MOVE BUFFER LENGTH    +
               ARG=(S,VSAMKEY),    SUPPLY KEY ARGUMENT ADDRESS         +
               MSGAREA=(S,ACBIOMSG),      SUPPLY AN I/O MESSAGE AREA   +
               MSGLEN=128,                SUPPLY MESSAGE AREA LENGTH   +
               OPTCD=(KEY,SEQ,FWD,SYN,NUP,KGE,FKS,MVE),                +
               WAREA=(R6),         SUPPLY RPL ADDRESS                  +
               LENGTH=(R14),       SUPPLY RPL SIZE                     +
               MF=(G,(1))
         SPACE
ACBCICHK ICM   R0,15,AMLCL         LINEAR DATA SET?
         BNZ   ACBREOPN            NO, PROCEED
         LA    R1,ACBIOMSG         POINT TO PARAMETER LIST WORK AREA
         MODCB ACB=(R4),MACRF=CNV, CHANGE TO CONTROLINTERVAL ACCESS    +
               MF=(G,(1))
         LA    R1,ACBIOMSG         POINT TO PARAMETER LIST WORK AREA
         MODCB RPL=(R6),OPTCD=CNV, CHANGE TO CONTROLINTERVAL ACCESS    +
               MF=(G,(1))
         SPACE
ACBREOPN XC    DEBLOCKS(12),DEBLOCKS
         L     R4,ACBADDR          POINT TO THE ACB
         OI    STATUS,STOPEN       TELL CLEANUP TO CLOSE ACB
         MVI   OPEND,X'80'         FIRST OPEN LIST ITEM IS ALSO LAST
         OPEN  ((R4)),MF=(E,OPEND) OPEN THE VSAM FILE
         ST    R15,TTR             SUPPRESS 'TOP' OPERAND PROCESSING
         LTR   R15,R15             WAS THE OPEN SUCCESSFUL?
         BZ    ACBOPEND            YES, CONTINUE WITH INITIALIZATION
         L     R1,CHKPTTOP         NO, SIMULATE
         ST    R1,CHKPTBOT             END-OF-FILE
         MVI   0(R1),X'FF'             TRIGGERED BY I/O ERROR
         MVI   SYNADSW,X'FF'
         MVI   SYNADMSG,C'*'
         MVC   SYNADMSG+1(77),SYNADMSG
         MVC   SYNADMSG+23(32),=CL32' VSAM OPEN ERROR: RC=XX REAS=XX '
         STC   R15,DOUBLE+4
         UNPK  SYNADMSG+44(3),DOUBLE+4(2)
         TR    SYNADMSG+44(2),HEXTAB-240
         MVI   SYNADMSG+46,C' '
         L     R1,DOUBLE           POINT TO MACRO PLIST WORK AREA
         SHOWCB ACB=((R4)),        SHOW DATA FROM THE ACB              +
               AREA=(S,DOUBLE),    PUT THE ANSWER IN DOUBLE            +
               LENGTH=8,           ONLY 4 OF 8 BYTES SHOULD BE USED    +
               FIELDS=(ERROR),     EXTRACT THE OPEN REASON CODE        +
               MF=(G,(1))
         UNPK  SYNADMSG+52(3),DOUBLE+3(2)
         TR    SYNADMSG+52(2),HEXTAB-240
         MVI   SYNADMSG+54,C' '
         L     R7,HOLDDIR
         LA    R0,1
         ST    R0,DIRNUM(,R7)      PUT ONE IN RECORD NUMBER
         SR    R0,R0
         ST    R0,DIRTTR(,R7)      PUT ZERO IN RECORD POSITION
         ST    R0,DIRREC(,R7)      PUT ZERO IN RECORD ADDRESS
         BCTR  R0,0
         ST    R0,DIRLEN(,R7)      PUT NEGATIVE ONE IN RECORD LENGTH
         ST    R7,DIRNXT(,R7)      POINT TO ITSELF FOR ONE ENTRY CHAIN
         ST    R7,HOLDTOP          START WITH THIS AS TOP
         ST    R7,HOLDEND          START WITH THIS AS END
         MVC   DSNAIM(46),$DSNAME  INITIALIZE HEADING DATA SET NAME
         CLI   DOUBLE+3,X'A0'      TRYING TO READ EMPTY CLUSTER?
         BNE   GETNEWNM            NO, CONTINUE
         MVC   SYNADMSG+55(9),=C'==>EMPTY?'  POSSIBLY, SO SHOW THIS
         B     GETNEWNM
         SPACE
ACBOPEND LA    R1,ACBIOMSG         POINT TO PARAMETER LIST WORK AREA
         TESTCB ACB=(R4),          TEST THE DATA SET ATTRIBUTES        +
               ATRB=(KSDS),        CHECK FOR A KSDS CLUSTER            +
               MF=(G,(1))
         AIF   (&ENV390).ACBEA1
         BE    DOHLDINT            CLUSTER IS A KSDS SO CONTINUE
         AGO   .ACBEA2
.ACBEA1  ANOP
         BE    ACBEACHK            CLUSTER IS A KSDS - SEE IF EA NEEDED
.ACBEA2  ANOP
         CLI   AMKLN+1,4           IS THE KEY LENGTH FOUR?
         BE    ACBRRDS             YES, CLUSTER MUST BE A VRRDS
         LA    R1,ACBIOMSG         POINT TO PARAMETER LIST WORK AREA
         TESTCB ACB=(R4),          TEST THE DATA SET ATTRIBUTES        +
               ATRB=(RRDS),        CHECK FOR AN RRDS CLUSTER           +
               MF=(G,(1))
         AIF   (&ENV390).ACBEA3
         BNE   DOHLDINT            CLUSTER IS AN ESDS SO CONTINUE
         AGO   .ACBEA4
.ACBEA3  ANOP
         BNE   ACBEACHK            CLUSTER IS A ESDS - SEE IF EA NEEDED
.ACBEA4  ANOP
ACBRRDS  LA    R1,ACBIOMSG         POINT TO PARAMETER LIST WORK AREA
         L     R6,RPLADDR          POINT TO THE RPL TO BE USED
         MODCB RPL=(R6),           CLUSTER IS A (V)RRDS SO USE AND     +
               OPTCD=(KEY,SEQ),            CHECKPOINT THE RRN          +
               MF=(G,(1))
         NI    $UCBAD,255-$KSDS    RESET KSDS FLAG
         OI    $UCBAD,$RRDS        SET RRDS FLAG
         B     DOHLDINT            CONTINUE WITH INITIALIZATION
         AIF   (NOT &ENV390).ACBEA5
ACBEACHK CLI   OSBITS,X'9B'        MVS/ESA OR LATER?
         BNE   DOHLDINT            NO, DO NOT FIDDLE WITH EA
         LA    R1,ACBIOMSG         POINT TO PARAMETER LIST WORK AREA
         L     R6,RPLADDR          POINT TO THE RPL TO BE USED
         MODCB RPL=(R6),           CLUSTER IS ADDRESSED BY RBA         +
               ARG=(S,ACBXRBA),    SUPPLY XRBA ARGUMENT ADDRESS        +
               OPTCD=(XRBA),       USE VSAM EA                         +
               MF=(G,(1))
         OI    STATUS9,$9XRBA      SET EXTENDED ADDRESSABILITY FLAG
.ACBEA5  ANOP
         DROP  R5,R2               ACBINIT, @ACBDATA
         SPACE
         USING FAS2INIT,R5
DOHLDINT L     R5,SBASAVE          RESTORE PREVIOUS LOCAL BASE
         B     HOLDINIT            CONTINUE WITH INITIALIZATION
         DROP  R5                  FAS2INIT
         SPACE
         DC    0D'0'
         LTORG
         SPACE
************************************************************
*                                                          *
*         BUILD DATA SET NAME FOR TOP LINE                 *
*                                                          *
************************************************************
         SPACE
         USING NEWNAME,R5
NEWNAME  NI    STATUS10,255-$10CAP SET CAPS OFF
         MVC   DSPLUS(46),DSNAIM
         TM    STATUS8,$8ZIPU      PROCESSING UNZIPPED DATA?
         BO    DSPLUSOK            YES, THAT'S ALL TO SHOW
         TM    STATUS11,$11OT      RECEIVED CONTROL FROM REVOUTPT?
         BO    DSPLUSOK            YES, THAT'S ALL TO SHOW
         AIF   (NOT &ENV390).LN1NAME
         TM    $UCBAD,$HFSIO       PROCESSING HFS FILE?
         BO    DSPLUSOK            YES, THAT'S ALL TO SHOW
.LN1NAME ANOP
         LA    R15,DSPLUS+2
         AH    R15,DSNAIM          POINT PAST DATA SET NAME
         TM    DCBDSORG,X'02'      CHECK FOR PDS
         BO    DSPMEMBR            GO TACK ON THE MEMBER NAME
* THE ABOVE TEST WILL WORK EVEN FOR A MEMBER NAMED X'4040404040404040'
         CLI   $MEMBER,C' '        MEMBER NAME TO BE DISPLAYED?
         BNE   DSPMEMBR            YES, GO TACK IT ON FOR SUBSYS D/S
         LR    R1,R15
         BCTR  R15,0
         TM    STATUS13,$13_L      PROCESSING PRE-LOADED DATA?
         BO    DSPLUSX             YES, DO NOT SHOW VOLUME
         CLI   $VOLSER,C'.'        UNPRINTABLE VOLUME SERIAL?
         BE    DSPLUSX             YES, DO NOT SHOW IT
         MVC   0(7,R1),ONVIO
         LA    R15,6(,R1)          POINT TO LAST CHARACTER
         CLI   $VOLSER,C' '        REALLY ON VIO?
         BE    DSPLUSX             YES
         TM    STATUS8,$8_34       WAS VOLUME FROM ZDLVOL?
         BNO   FLAG34OK            NO, CONTINUE
         MVI   3(R1),C'-'          YES, LEAVE A SUBTLE HINT
FLAG34OK MVC   4(6,R1),$VOLSER     NO, SHOW REAL VOLUME
         LA    R15,3(,R15)         POINT TO LAST CHARACTER
         B     DSPLUSX
DSPMEMBR MVC   1(8,R15),$MEMBER    MOVE IN MEMBER NAME
         LA    R1,8(,R15)          POINT TO LAST MEMBER NAME CHARACTER
         LA    R6,7                MAXIMUM NUMBER OF TRAILING BLANKS
         MVI   0(R15),C'('
DSPMEM   CLI   0(R1),C' '          TRAILING BLANK?
         BNE   DSPMEMX             NO, SHOW MEMBER NAME UP TO HERE
         BCTR  R1,0                YES, POINT TO PREVIOUS CHARACTER
         BCT   R6,DSPMEM           GET NEW LENGTH CODE AND TEST CHAR
DSPMEMX  TR    1(8,R15),PERIODS    TRANSLATE OUT UNPRINTABLES
         LA    R15,2(R6,R15)       POINT PAST MEMBER NAME
         MVI   0(R15),C')'
         CLI   BLDLTTRP+2,0        R OF TTR 0? (MEM NOT FOUND?)
         BE    DSPLUSX             YES, NO SPF STATS
         MVC   DOUBLE(1),BLDLINDC  GET USER DATA LENGTH BYTE
         NI    DOUBLE,X'7F'        TURN OFF ALIAS FLAG
         CLI   DOUBLE,14           SPF/PFD TYPE USER DATA?
         BL    DSPLUSX             NO, END OF NAME FORMAT
         CLI   DOUBLE,20           ISPF EXTENDED STATS USER DATA?
         BNE   DSPSPFCK            NO
         TM    BLDLFLGS,BLDLXSTA   REALLY?
         BNO   DSPLUSX             NO, END OF NAME FORMAT
         B     DSPSPFOK            YES
DSPSPFCK CLI   DOUBLE,15           SPF/PFD TYPE USER DATA?
         BH    DSPLUSX             NO, END OF NAME FORMAT
DSPSPFOK EQU   *
         AIF   (NOT &ENVZV2).GENVMOK
         TM    STATUS15,$15GEN     PROCESSING MEMBER GENERATIONS?
         BZ    DSPGENOK            NO
         CLI   BLDLVVMM,0          VV.MM SUPPLIED?
         BNE   DSPLVMOK            YES, SHOW IT
.GENVMOK ANOP
DSPGENOK TM    BLDLCRED+3,X'0F'    DATE SIGN AS EXPECTED?
         BNO   DSPLUSX             NO, END OF NAME FORMAT
         TM    BLDLCHGD+3,X'0F'    DATE SIGN AS EXPECTED?
         BNO   DSPLUSX             NO, END OF NAME FORMAT
DSPLVMOK MVC   1(8,R15),=C' - VV.MM'
         SR    R1,R1
         IC    R1,BLDLVVMM         GET SPF VERSION NUMBER
         CVD   R1,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  4(2,R15),DOUBLE+6(2)
         IC    R1,BLDLVVMM+1       GET SPF MODIFICATION NUMBER
         CVD   R1,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  7(2,R15),DOUBLE+6(2)
         LA    R15,8(,R15)         ADJUST POINTER
DSPLUSX  LA    R1,DSPLUS+1
         SR    R15,R1
         STH   R15,DSPLUS
DSPLUSOK L     R15,SCREENBF
         MVI   1(R15),C'-'
         MVC   2(78,R15),1(R15)
         LA    R0,L'MSGDSN
         LH    R1,DSPLUS
         CLR   R1,R0               DSPLUS TOO LONG?
         BNH   *+6                 NO
         LR    R1,R0               YES, TRUNCATE IT (SPF STATS)
         BCTR  R1,0
         EX    R1,DSPLUSEX
         LA    R1,2(R1,R15)
         MVI   0(R1),C' '
         MVC   MSGDSN,1(R15)
         SPACE
         CLI   SYNADSW,X'FF'       I/O ERROR ALREADY?
         BE    FILLSCR             YES, MUST BE OPEN ERROR SO SHOW IT
         SPACE
         TM    STATUS9,$9_H+$9_M   PROGRAM HISTORY OR MAP REQUEST?
         BZ    HCODEOK             NO
         L     R15,HISTADDR        YES, GET ROUTINE ENTRY POINT
         BASR  R14,R15             PROCESS REQUEST
         SPACE
         DROP  R5                  NEWNAME
         SPACE
HCODEOK  BAS   R14,FILLHOLD        GET FIRST SCREENFUL OF FILE DATA
         USING *,R14
         L     R5,=A(PCXCHECK)     SEE IF FILE IS A SHOWABLE PICTURE
         TM    STATUS15,$15COPY    PERFORMING RFE OPTION 3.3 COPY?
         BNOR  R5                  NO, PCXCHECK WILL RETURN TO FILLSCR
         XC    RANGE,RANGE         YES, CLEAR REQUESTED LINE COUNT
         L     R5,=A(CUTOFF)       SET LOCAL BASE FOR ROUTINE
         DROP  R14                 HCODEOK+4
         USING CUTOFF,R5
         TM    STATUS12,$12ENQ     IN COPY MEMBER SELECTION DIALOG?
         BO    CUTALC              YES, SERIALIZE THE SELECTED MEMBER
         B     CUTCOPY             NO, GO PERFORM THE COPY
         DROP  R5                  CUTOFF
         SPACE
DSPLUSEX MVC   1(0,R15),DSPLUS+2   <<< EXECUTED >>>
         SPACE
ONVIO    DC    X'409695',C' VIO'   C' ON VIO'
         DC    0D'0'
         LTORG
         DC    0H'0'
         SPACE
**********************************************************************
*                                                          *         *
*         READ A VSAM RECORD                               *  GP@FT  *
*                                                          *  06/92  *
**********************************************************************
         SPACE
ACBREAD  STM   R14,R12,12(R13)     SAVE REGISTERS
         L     R1,ANSWER           POINT TO ACB I/O WORK AREA
         ST    R1,8(,R13)          FORWARD SAVE AREA POINTER
         ST    R13,4(,R1)          BACKWARD SAVE AREA POINTER
         LR    R13,R1
         USING @ACBDATA,R13
         LR    R7,R15
         USING ACBREAD,R7
         LA    R5,CHKPTDUM         JUST IN CASE OF OFFLOAD
         TM    MODE,MD_OFFLD       HERE TO OFFLOAD?
         BO    ACBGET              YES, JUST READ IT
         ICM   R5,15,CHKPTBOT      GET LAST CHECKPOINT
         BNZ   ACBRDNF             PROCESS IT
         L     R5,CHKPTTOP         FIRST READ SO NOTHING READ YET
         MVC   ACBCOUNT,COUNT      INITIALIZE LOGICAL RECORD NUMBER
         B     ACBRDNEW            READING A RECORD NOT READ BEFORE
ACBRDNF  LA    R0,1                INCREMENT RECORD COUNT
         A     R0,ACBCOUNT
         C     R0,COUNT            SEQUENTIAL ACCESS REQUEST?
         BE    ACBPNTOK            YES, NO NEED FOR A POINT
         XC    DEBLOCKS(12),DEBLOCKS   NO, RESET ROW EXTRACTION STATUS
         L     R6,RPLADDR          POINT TO THE RBA ACCESS RPL
         L     R1,CALLPARM+8       GET THE RELEVANT CHKPT ENTRY
         MVC   CHKPTDUM+4(4),4(R1) COPY THE RELEVANT RBA
         AIF   (NOT &ENV390).ACBDOPT
         TM    STATUS9,$9XRBA      USING VSAM EA?
         BNO   ACBDOPNT            NO
         SR    R0,R0               YES
         C     R1,CHKPTTOP         FIRST ENTRY?
         L     R1,4(,R1)           GET CHECKPOINTED VALUE
         BE    *+8                 YES, WAS STORED UNCHANGED
         SLDL  R0,8                NO, RESTORE XRBA FORMAT
         STM   R0,R1,ACBXRBA       PLACE IT IN STORAGE
ACBDOPNT DS    0H                  NOW READY FOR POINT
.ACBDOPT ANOP
         POINT RPL=(R6)            POSITION TO THE DESIRED RECORD
         LTR   R15,R15             WAS THE POINT SUCCESSFUL?
         BNZ   ACBPNTDN            NO, REPORT BAD RETURN CODE
         TM    $UCBAD,$KSDS        YES, USING KEYED ACCESS?
         BNO   ACBPNTDN            NO, STAY WITH RBA ACCESS
         GET   RPL=(R6)            GET THE VSAM RECORD SYNCHRONOUSLY
         LTR   R15,R15             WAS THE GET SUCCESSFUL?
         BNZ   ACBPNTDN            NO, REPORT BAD RETURN CODE
         LH    R15,AMKLN           YES, GET THE KEY LENGTH
         BCTR  R15,0               DECREMENT FOR EXECUTE
         LA    R1,VSAMREC          POINT TO THE FETCHED RECORD
         AH    R1,AMRKP            POINT TO THE KEY OF THE RECORD
         EX    R15,ACBKEYLD        LOAD KEY INTO RPL ARGUMENT AREA
         L     R6,RPL2ADDR         POINT TO THE KEYED ACCESS RPL
         POINT RPL=(R6)            POSITION TO THE DESIRED RECORD
         SPACE
ACBPNTDN SRL   R15,2               ENSURE THAT THE RETURN CODE
         SLL   R15,30                     IS A MULTIPLE OF FOUR
         SRL   R15,28                     IN THE ZERO TO TWELVE RANGE
         LTR   R15,R15             NOW TEST THE RETURN CODE
         BNZ   ACBRPLRC            NON-ZERO SO POINT FAILED
         L     R0,COUNT            POINT SUCCEEDED SO GET RECORD NUMBER
ACBPNTOK ST    R0,ACBCOUNT         UPDATE LOGICAL RECORD NUMBER
         OC    DEBLOCKS(12),DEBLOCKS  DB2 ROWS TO BE EXTRACTED?
         BNZ   ACBGTDB2            YES, PROCESS CURRENT CI FIRST
ACBOKGET L     R1,0(,R5)           GET NUMBER OF HIGHEST RECORD READ
         LTR   R1,R1               WAS IT EOF?
         BM    ACBRDOLD            YES, BRANCH
         C     R1,COUNT            HAVE WE READ THIS RECORD BEFORE?
         BL    ACBRDADD            NO, BRANCH
ACBRDOLD LA    R5,CHKPTDUM         YES, DON'T CHANGE CHKPT TABLE
         B     ACBGET
ACBRDADD LA    R5,CHKPTLN(,R5)     ADD AN ENTRY TO THE CHKPT TABLE
         C     R5,ENDPTR           IS TABLE FILLED UP?
         BL    ACBRDNEW            NO, SKIP NEXT INSTR
         BAS   R14,READHALF        YES, HALVE THE TABLE
ACBRDNEW ST    R5,CHKPTBOT         SAVE NEW CURRENT CHECKPOINT POINTER
ACBGET   MVC   0(4,R5),COUNT       LOAD CHECKPOINT ENTRY RECORD NUMBER
         XC    4(4,R5),4(R5)       RESET RBA AREA
         NI    SYNADSW,X'F0'       ZERO SOME BITS FOR THIS GET
         L     R6,RPLADDR          POINT TO THE RBA ACCESS RPL
         TM    $UCBAD,$KSDS        USING KEYED ACCESS?
         BNO   ACBDOGET            NO, STAY WITH RBA ACCESS
         L     R6,RPL2ADDR         YES, POINT TO THE KEYED ACCESS RPL
ACBDOGET DS    0H
         GET   RPL=(R6)            GET A VSAM RECORD SYNCHRONOUSLY
         SPACE
         SRL   R15,2               ENSURE THAT THE RETURN CODE
         SLL   R15,30                     IS A MULTIPLE OF FOUR
         SRL   R15,28                     IN THE ZERO TO TWELVE RANGE
ACBRPLRC B     ACBGOTEP(R15)       BRANCH TO APPROPRIATE CODE
         SPACE
ACBGOTEP B     ACBGOT              GET RC=0 - A RECORD WAS RETRIEVED
         B     ACBLOGER            GET RC=4 - THE GET WAS NOT ACCEPTED
         B     ACBLOGER            GET RC=8 - LOGICAL ERROR
         DS    0H                  GET RC=C - PHYSICAL ERROR
         MVI   SYNADSW,X'FF'       FLAG FILE FAILURE
         MVC   SYNADMSG,ACBIOMSG+50
         B     ACBEOD              SIGNAL END-OF-FILE
         SPACE
ACBGOT   DS    0H                  A RECORD WAS RETRIEVED
         LA    R1,ACBIOMSG         POINT TO PARAMETER LIST WORK AREA
         AIF   (NOT &ENV390).ACBSHO1
         TM    STATUS9,$9XRBA      USING VSAM EA?
         BNO   ACBSHOW1            NO
         SHOWCB RPL=(R6),          EXTRACT SOME DATA FROM THE RPL      +
               AREA=(S,ACBRBAHI),  DETERMINE THE RBA AND RECORD LENGTH +
               LENGTH=12,          12 BYTES ARE REQUIRED               +
               FIELDS=(XRBA,RECLEN), EXTRACT THE RBA AND RECORD LENGTH +
               MF=(G,(1))
         B     ACBSHOW2
ACBSHOW1 DS    0H
.ACBSHO1 ANOP
         SHOWCB RPL=(R6),          EXTRACT SOME DATA FROM THE RPL      +
               AREA=(S,ACBRBALO),  DETERMINE THE RBA AND RECORD LENGTH +
               LENGTH=8,           8 BYTES ARE REQUIRED                +
               FIELDS=(RBA,RECLEN),  EXTRACT THE RBA AND RECORD LENGTH +
               MF=(G,(1))
ACBSHOW2 TM    STATUS6,$6DB2       PROCESSING DB2 ROWS?
         BZ    ACBDB2OK            NO
         OC    ACBRBA,ACBRBA       HAVE JUST READ FIRST DB2 BLOCK?
         BNZ   ACBDB2OK            NO
         L     R2,BLOCKPTR         YES, POINT TO THE BLOCK
         USING DB2PAGE,R2
         ICM   R15,7,PGNUMBER      FIRST RECORD BEING READ?
         BNZ   ACBNTDB2            NO
         TM    PGFLAGS,X'18'       HEADER PAGE?
         BNO   ACBNTDB2            NO
         TM    PGFLAGS,X'04'       HEADER PAGE?
         BNZ   ACBNTDB2            NO
         CLI   HPGPGSZ+1,X'00'     DB2 PAGE SIZE A MULTIPLE OF 256?
         BNE   ACBNTDB2            NO, NOT REALLY A HEADER PAGE
         TM    HPGPGSZ,X'0F'       DB2 PAGE SIZE A MULTIPLE OF 4096?
         BNZ   ACBNTDB2            NO, NOT REALLY A HEADER PAGE
         TM    HPGPGSZ,X'F0'       DB2 PAGE SIZE NON-ZERO?
         BNM   ACBNTDB2            NO, NOT REALLY A HEADER PAGE
         MVC   AMCIV+2(2),HPGPGSZ  YES, ADJUST "CONTROLINTERVAL" SIZE
         B     ACBDB2OK
         DROP  R2                  DB2PAGE
ACBNTDB2 NI    STATUS6,255-$6DB2   NO, SUPPRESS DB2 ROW EXTRACTION
         NI    MODE,255-MD_FMT     DISABLE FORMATTING
ACBDB2OK TM    $UCBAD,$RRDS        ACCESSING AN RRDS?
         BZ    ACBADROK            NO, THE RBA IS THE ADDRESS TO NOTE
         MVC   ACBRBALO,CHKPTDUM+4 YES, GET THE RELATIVE RECORD NUMBER
ACBADROK MVC   4(4,R5),ACBRBALO    CHECKPOINT THE RECORD'S ADDRESS
         MVC   TTR,ACBRBALO        COPY THE RBA FOR DISPLAY
         AIF   (NOT &ENV390).ACBCKPT
         TM    STATUS9,$9XRBA      USING VSAM EA?
         BNO   ACBCHKPT            NO, CHECKPOINTING DONE
         C     R5,CHKPTTOP         CHECKPOINTING FIRST RECORD?
         BE    ACBCHKPT            YES, DO NOT EDIT IT
         MVC   4(4,R5),ACBRBALO-1  YES, SUPPORT UP TO 1TB
         C     R5,CHKPTBOT         ADDING THIS RECORD'S DETAILS?
         BNE   ACBCHKPT            NO, NO NEED TO EDIT IT
         CLI   ACBRBALO+3,0        ON A 256-BYTE BOUNDARY?
         BE    ACBCHKPT            YES, NOT A PROBLEM
         LA    R0,CHKPTLN          NO
         SR    R5,R0               DO NOT CHECKPOINT THIS RECORD
         ST    R5,CHKPTBOT         THIS ENTRY CAN CAN BE REUSED LATER
ACBCHKPT DS    0H                  VSAM CHECKPOINTING DONE
.ACBCKPT ANOP
         L     R1,ACBRECLN         GET THE RECORD LENGTH
         L     R2,BLOCKPTR         GET THE RECORD ADDRESS
         TM    STATUS6,$6DB2       PROCESSING DB2 ROWS?
         BO    ACBGODB2            YES, PERFORM ROW EXTRACTION
ACBREADX L     R13,4(,R13)         POINT TO CALLER'S SAVE AREA
         LM    R3,R12,32(R13)      RESTORE APPROPRIATE REGISTERS
         B     READX               RETURN AND EXIT
         SPACE
ACBGODB2 LA    R0,0(R1,R2)         POINT PAST END OF BLOCK
         STM   R0,R2,DEBLOCKS      UPDATE STATUS INFO
         CLC   ACBRECLN,AMCIV      SINGLE READ FOR WHOLE DB2 PAGE?
         BNL   ACBDB2RD            YES, DO NOT MODIFY RPL AT ALL
         C     R1,AMCIV            FINISHED READING DB2 PAGE?
         BNL   ACBDB2RS            YES, RESET RPL BUFFER POINTER
         AR    R2,R1               NO, POINT PAST DATA READ
         LA    R1,ACBIOMSG         POINT TO PARAMETER LIST WORK AREA
         MODCB RPL=(R6),                                               +
               AREA=(R2),          UPDATE RECORD BUFFER POINTER        +
               MF=(G,(1))
         GET   RPL=(R6)            GET A VSAM RECORD SYNCHRONOUSLY
         L     R2,BLOCKPTR         POINT TO START OF RECORD BUFFER
         LTR   R15,R15             SUCCESS?
         BNZ   ACBDB2ER            NO, TIDY UP AND PROCESS ERROR
         L     R1,DEBLOCKS+4       YES, GET PREVIOUS RECORD LENGTH
         A     R1,ACBRECLN         GET NEW RECORD LENGTH
         B     ACBGODB2            CHECK FOR DB2 PAGE COMPLETION
ACBDB2ER ST    R15,DOUBLE          SAVE GET RETURN CODE
         LA    R1,ACBIOMSG         POINT TO PARAMETER LIST WORK AREA
         MODCB RPL=(R6),                                               +
               AREA=(R2),          RESET RECORD BUFFER POINTER         +
               MF=(G,(1))
         L     R15,DOUBLE          RESTORE GET RETURN CODE
         B     ACBRPLRC            PROCESS NON-ZERO RETURN CODE
ACBDB2RS LA    R1,ACBIOMSG         POINT TO PARAMETER LIST WORK AREA
         MODCB RPL=(R6),                                               +
               AREA=(R2),          RESET RECORD BUFFER POINTER         +
               MF=(G,(1))
ACBDB2RD L     R2,DEBLOCKS         POINT PAST END OF BLOCK
         LM    R0,R1,DEBLOCKS+4    GET DEBLOCKING STATUS
         BCTR  R2,0                POINT TO LAST BYTE OF BLOCK
         TM    0(R2),X'C5'         DB2 FORMATTED RECORD?
         BNO   ACBEOD              NO, END OF DB2 DATA
         USING DB2PAGE,R1
         ICM   R6,7,PGNUMBER       FIRST PAGE IN DATA SET?
         BNZ   ACBNTHDR            NO, NOT A HEADER
         ICM   R6,3,HPGTBLC        ANY TABLES IN DATA SET?
         BZ    ACBEOD              NO, END OF DB2 DATA
ACBNTHDR TM    PGFLAGS,255-X'02'   DB2 DATA PAGE?  (X'00' OR X'02'?)
         BNZ   ACBOKGET            NO, READ THE NEXT PAGE
         CLI   PGMAXID,0           ANY ROWS IN THIS PAGE?
         BE    ACBOKGET            NO, READ THE NEXT PAGE
         MVI   DEBLOCKS+4,0        YES,
         MVC   DEBLOCKS+5(1),PGMAXID    GET THE ROW COUNT FOR THIS PAGE
         MVC   DEBLOCKS+6(2),HW1   GET THE ROW COUNT TO BE RETURNED
         DROP  R1                  DB2PAGE
ACBGTDB2 SR    R1,R1
         ICM   R1,3,DEBLOCKS+6     GET THE ROW-IN-PAGE NUMBER
         CLM   R1,3,DEBLOCKS+4     IS THIS HIGHER THAN THE MAXIMUM?
         BH    ACBOKGET            YES, READ ANOTHER PAGE
         LA    R1,1(,R1)           NO, GET NEW ROW NUMBER FOR NEXT TIME
         STH   R1,DEBLOCKS+6       SAVE FOR NEXT TIME
         SLL   R1,1                DOUBLE IT FOR INDEX
         L     R2,DEBLOCKS         POINT PAST END OF PAGE
         SLR   R2,R1               POINT TO ROW-IN-PAGE OFFSET
         TM    0(R2),X'80'         EMPTY SLOT?
         BO    ACBGTDB2            YES, SKIP IT
         LH    R1,0(R2)            LOAD THIS OFFSET
         L     R2,DEBLOCKS+8       POINT TO THE PAGE
         ALR   R2,R1               POINT TO THE ROW
         USING DB2ROW,R2
         LA    R1,6                GET LENGTH FOR POINTER RECORD
         CLI   PGSFLAGS,X'40'      OVERFLOW POINTER?
         BO    ACBREADX            YES, ALREADY HAVE LENGTH
         ICM   R1,3,1(R2)          GET THE ROW LENGTH
         CH    R1,HW6              IS IT VALID?
         BL    ACBGTDB2            NO, DISCARD SHORT ROW
         B     ACBREADX            RETURN
         DROP  R2                  DB2ROW
         SPACE
ACBLOGER DS    0H                  RECORD WAS NOT RETRIEVED
         MVI   SYNADMSG,C'*'
         MVC   SYNADMSG+1(77),SYNADMSG
         MVC   SYNADMSG+23(32),=CL32' VSAM READ ERROR: RC=XX REAS=XX '
         STC   R15,DOUBLE+4
         UNPK  SYNADMSG+44(3),DOUBLE+4(2)
         TR    SYNADMSG+44(3),HEXTAB-240
         MVI   SYNADMSG+46,C' '
         LA    R1,ACBIOMSG         POINT TO PARAMETER LIST WORK AREA
         SHOWCB RPL=(R6),          EXTRACT SOME DATA FROM THE RPL      +
               AREA=(S,DOUBLE),    PUT THE ANSWER IN DOUBLE            +
               LENGTH=8,           ONLY 4 OF 8 BYTES SHOULD BE USED    +
               FIELDS=(FDBK),      EXTRACT THE RPL FEEDBACK CODE       +
               MF=(G,(1))
         UNPK  SYNADMSG+52(3),DOUBLE+3(2)
         TR    SYNADMSG+52(3),HEXTAB-240
         MVI   SYNADMSG+54,C' '
         CLI   DOUBLE+3,4          NORMAL END-OF-FILE?
         BE    ACBEOD              YES, NOT AN ERROR
         MVI   SYNADSW,X'FF'       NO, FLAG FILE FAILURE
*        CLI   DOUBLE+3,X'FC'      REJECT OF LDS RECORD ACCESS?
*        BNE   ACBEOD              NO, BECAUSE REVIEW SUPPORTS LINEAR
*        MVC   SYNADMSG+55(18),=C'==>LINEAR-DATA-SET'  YES, SHOW THIS
ACBEOD   SR    R1,R1               GET THE RECORD LENGTH
         BCTR  R1,0                NEGATIVE ONE FOR E-O-F
         ST    R1,0(,R5)           SAVE EOF IN CHKPT TABLE
         SR    R2,R2               GET THE RECORD ADDRESS
         L     R13,4(,R13)         POINT TO CALLER'S SAVE AREA
         LM    R3,R12,32(R13)      RESTORE APPROPRIATE REGISTERS
         B     READX               RETURN AND EXIT
ACBKEYLD MVC   VSAMKEY(0),0(R1)    <<< EXECUTED >>>
         DROP  R7,R13              ACBREAD, @ACBDATA
         SPACE
         DC    0D'0'
         LTORG
         DC    0H'0'
         AIF   (NOT &ENV390).ACBDONE
         POP   ACONTROL
.ACBDONE ANOP
         SPACE
************************************************************
*                                                          *
*         RIGHT                                            *
*                                                          *
************************************************************
         SPACE
         USING RIGHT,R5
RIGHT    LR    R5,R15              LOCAL BASE REGISTER
         LA    R15,OPD2            SET FOR ERRMANY
         TM    OPD2+6,PRESENT      ARE THERE TOO MANY OPERANDS?
         BO    ERRMANY             YES, INVALID
         TM    STATUS14,$14AS      BROWSING ADDRESS SPACE?
         BO    TTNEXT              YES, "RIGHT" IS "NEXT"
         TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BZ    RIGHTDEF            NO, USE DEFAULT
         TM    OPD1+6,QUOTED       IS OPERAND QUOTED?
         BO    ERRINV              YES, INVALID
         LH    R1,OPD1+4           GET LENGTH
         LTR   R1,R1               IS IT NULL STRING?
         BZ    ERRINV              YES, ERROR
         CH    R1,HW5              IS LENGTH MORE THAN 5?
         BH    ERRINV              YES, ERROR
         L     R14,OPD1            GET ADDRESS OF DATA
         CLI   0(R14),C'C'         CURSOR REQUESTED?
         BE    RIGHTCSR            YES
         CLI   0(R14),C'M'         MAXIMUM REQUESTED?
         BE    RIGHTMAX            YES
         CLI   0(R14),C'P'         FULL PAGE REQUESTED?
         BE    RITEPAGE            YES
         CLI   0(R14),C'H'         HALF PAGE REQUESTED?
         BE    RITEHALF            YES
         TM    OPD1+6,NUMERIC      IS IT NUMERIC?
         BNO   ERRINV              NO, ERROR
         BCTR  R1,0
         EX    R1,NUMRCPAK
         CVB   R1,DOUBLE
         LTR   R1,R1
         BZ    PROMPT
         B     RIGHTR1
RIGHTCSR LH    R1,CSRLOCN          GET CURSOR SCREEN ADDRESS
         LTR   R1,R1               IN DATA PART OF SCREEN?
         BZ    RITEPAGE            NO, CAN'T BE CURSOR SCROLLING
         SR    R0,R0               YES, PREPARE FOR DIVIDE
         D     R0,SCRNCOLS         GET CURSOR X AND Y COORDINATES
         LTR   R1,R0               LOAD CURSOR COLUMN OFFSET
         BZ    RITEPAGE            CURSOR WAS IN COLUMN 1
         BAS   R14,DSP2RECO        CONVERT FOR DISPLAY TYPE
         S     R1,OFFSET           CURSOR AT FORMATTED START OF LINE?
         BNP   RITEPAGE            YES, SCROLL RIGHT A PAGE
         B     RIGHTR1             NO, GO SCROLL RIGHT
RITEHALF L     R1,SCRNCOLS
         SRL   R1,1                GET HALF OF SCREEN WIDTH
         BAS   R14,DSP2RECO        CONVERT FOR DISPLAY TYPE
         LR    R0,R1
         B     RIGHTR0             OFFSET ALREADY ADDED BY ROUTINE
RITEPAGE L     R0,OFFEND
         B     RIGHTR0             OFFSET ALREADY ADDED
RIGHTMAX L     R1,RECSIZE
         B     RIGHTR1
RIGHTDEF TM    STATUS4,$4CSR       CURSOR SCROLLING?
         BO    RIGHTCSR            YES
         TM    STATUS4,$4PAGE      FULL PAGE SCROLLING?
         BO    RITEPAGE            YES, IT MEANS RIGHT-A-PAGE
         TM    STATUS4,$4HALF      HALF PAGE SCROLLING?
         BO    RITEHALF            YES, IT MEANS HALF-A-PAGE
         L     R1,SCROLL           NO, USE SCROLL AMOUNT
RIGHTR1  L     R0,OFFSET
         AR    R0,R1
RIGHTR0  L     R1,RECSIZE
         L     R15,SCRNCOLS
         TM    STATUS16,$16HEX
         BNZ   RIGHTXX
         TM    MODE,MD_HEX
         BZ    RIGHTNX
         SRL   R15,1
         B     RIGHTED
RIGHTNX  TM    MODE,MD_FMT
         BNO   RIGHTED
         L     R14,FMTAREA         POINT TO FORMATTING DYNAMIC AREA
         USING @FMTAREA,R14
         ICM   R14,15,RITEFEL      POINT TO RIGHT-MOST FEL
         BNP   RIGHTED             TOO FAR RIGHT FOR FORMATTING
         DROP  R14                 FMTAREA
RIGHTXX  SRL   R15,2
RIGHTED  SR    R1,R15              GET RECSIZE-COLS
         BNM   *+6                 IF RECSIZE IS LESS THAN COLS
         SR    R1,R1                  THEN RECSIZE-COLS IS ZERO
         CR    R0,R1               IF OFFSET+COLS GT RECSIZE-COLS
         BNH   *+6                    THEN
         LR    R0,R1                  USE RECSIZE-COLS
         ST    R0,OFFSET
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    FILLSCR             YES
         NI    PICFLAGS,255-PICOK  NO, REDRAW OF ANY PICTURE REQUIRED
         B     FILLSCR
         SPACE
**********************************************************************
*                                                          *         *
*         NEXT / REDO  (TRACE TABLE NAVIGATION)            *  R44.0  *
*                                                          * JUL2013 *
**********************************************************************
         SPACE
TTNEXT   L     R1,FMTAREA          POINT TO FORMAT WORKING STORAGE
         USING @FMTAREA,R1
         L     R7,TRCURSOR         POINT TO CURRENT ENTRY
         C     R7,TRCLIMIT         UP TO MOST RECENT ENTRY?
         BE    TTNXTLIM            YES, DON'T ALLOW IT
         LA    R7,4(,R7)           POINT TO NEXT ENTRY
         C     R7,TRCBNDRY         PAST END OF TABLE?
         BL    TTNXTRAP            NO, NO WRAP AROUND ISSUES
         LA    R7,TRCTABLE         YES, TABLE MUST HAVE WRAPPED
TTNXTRAP ST    R7,TRCURSOR         MAKE THIS THE CURRENT ENTRY
         L     R0,0(,R7)           GET THIS ADDRESS
         ST    R0,@ADDR            SAVE REQUESTED ADDRESS
         B     LISTADOK            GO LOCATE TO REQUESTED ADDRESS
         DROP  R1                  FMTAREA
TTNXTLIM MVI   MSG,187             TRACE TABLE LIMIT REACHED
         B     PROMPT
         DROP  R5                  RIGHT
         SPACE
************************************************************
*                                                          *
*         LEFT                                             *
*                                                          *
************************************************************
         SPACE
         USING LEFT,R5
LEFT     LR    R5,R15              LOCAL BASE REGISTER
         LA    R15,OPD2            SET FOR ERRMANY
         TM    OPD2+6,PRESENT      ARE THERE TOO MANY OPERANDS?
         BO    ERRMANY             YES, INVALID
         TM    STATUS14,$14AS      BROWSING ADDRESS SPACE?
         BO    TTBACK              YES, "LEFT" IS "BACK"
         TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BZ    LEFTDEF             NO, USE DEFAULT
         TM    OPD1+6,QUOTED       IS OPERAND QUOTED?
         BO    ERRINV              YES, INVALID
         LH    R1,OPD1+4           GET LENGTH
         LTR   R1,R1               IS IT NULL STRING?
         BZ    ERRINV              YES, ERROR
         CH    R1,HW5              IS LENGTH MORE THAN 5?
         BH    ERRINV              YES, ERROR
         L     R14,OPD1            GET ADDRESS OF DATA
         CLI   0(R14),C'C'         CURSOR REQUESTED?
         BE    LEFTCSR             YES
         CLI   0(R14),C'M'         MAXIMUM REQUESTED?
         BE    LEFTMAX             YES
         CLI   0(R14),C'P'         FULL PAGE REQUESTED?
         BE    LEFTPAGE            YES
         CLI   0(R14),C'H'         HALF PAGE REQUESTED?
         BE    LEFTHALF            YES
         TM    OPD1+6,NUMERIC      IS IT NUMERIC?
         BNO   ERRINV              NO, ERROR
         BCTR  R1,0
         EX    R1,NUMRCPAK
         CVB   R1,DOUBLE
         LTR   R15,R1
         BZ    PROMPT
         B     LEFTR15
LEFTCSR  LH    R1,CSRLOCN          GET CURSOR SCREEN ADDRESS
         LTR   R1,R1               IN DATA PART OF SCREEN?
         BZ    LEFTPAGE            NO, CAN'T BE CURSOR SCROLLING
         SR    R0,R0               YES, PREPARE FOR DIVIDE
         ST    R0,DOUBLE           CLEAR A WORD
         L     R15,SCRNCOLS        GET THE NUMBER OF SCREEN COLUMNS
         DR    R0,R15              GET CURSOR X AND Y COORDINATES
         TM    STATUS16,$16XR      IS HEXR DISPLAY ON?
         BO    LEFTHEXR            YES
LEFTXRX  BCTR  R15,0               GET COLS-MINUS-ONE
         SR    R15,R0              LOAD CURSOR OFFSET FROM RIGHT SIDE
         TM    MODE,MD_HEX         IS HEX DISPLAY ON?
         BZ    *+8                 NO
         SRL   R15,1               YES, HALVE SCROLL AMOUNT
         TM    STATUS16,$16XX      IS HEXX DISPLAY ON?
         BZ    *+8                 NO
         SRL   R15,2               YES, QUARTER SCROLL AMOUNT
         SR    R14,R14             PREPARE FOR POSSIBLE DIVIDE
         CLI   DOUBLE+3,3          IS A DIVIDE NEEDED?
         BNE   *+8                 NO
         D     R14,DOUBLE          YES, DIVIDE BY 3
         LTR   R15,R15
         BZ    LEFTPAGE            CURSOR WAS IN LAST COLUMN
         TM    MODE,MD_FMT         GENERAL FORMATTING ACTIVE?
         BNO   LEFTR15             NO, COLUMN CALCULATION DONE
         TM    MODE,MD_HEX         IS HEX DISPLAY ON?
         BO    LEFTR15             YES, GO SCROLL LEFT
         B     LEFTFMT
LEFTHEXR SRL   R15,2               GET 1/4 OF SCREEN WIDTH
         CR    R0,R15              IS CURSOR IN LEFT QUARTER?
         BL    LEFTXRX             YES, PROCEED ALMOST NORMALLY
         MVI   DOUBLE+3,3          NO, FLAG A DIVIDE IS NEEDED
         L     R15,SCRNCOLS        RESTORE SCREEN WIDTH
         B     LEFTXRX             PROCEED ALMOST NORMALLY
LEFTHALF L     R15,OFFEND
         S     R15,OFFSET
         SRL   R15,1               GET HALF OF SCREEN WIDTH
         TM    MODE,MD_FMT         GENERAL FORMATTING ACTIVE?
         BNO   LEFTR15             NO, COLUMN CALCULATION DONE
         TM    MODE,MD_HEX         IS HEX DISPLAY ON?
         BO    LEFTR15             YES, GO SCROLL LEFT
         L     R15,SCRNCOLS        GET SCREEN WIDTH
         SRL   R15,1               GET HALF OF SCREEN WIDTH
         B     LEFTFMT
LEFTDEF  TM    STATUS4,$4CSR       CURSOR SCROLLING?
         BO    LEFTCSR             YES
         TM    STATUS4,$4PAGE      FULL PAGE SCROLLING?
         BO    LEFTPAGE            YES, IT MEANS LEFT-A-PAGE
         TM    STATUS4,$4HALF      HALF PAGE SCROLLING?
         BO    LEFTHALF            YES, IT MEANS HALF-A-PAGE
         L     R15,SCROLL          NO, USE SCROLL AMOUNT
         B     LEFTR15
LEFTPAGE L     R15,OFFEND
         S     R15,OFFSET
         TM    MODE,MD_FMT         GENERAL FORMATTING ACTIVE?
         BNO   LEFTR15             NO, COLUMN CALCULATION DONE
         TM    MODE,MD_HEX         IS HEX DISPLAY ON?
         BO    LEFTR15             YES, GO SCROLL LEFT
         L     R15,SCRNCOLS        GET SCREEN WIDTH
LEFTFMT  STM   R14,R12,12(R13)     YES, SAVE REGISTERS
         L     R1,FMTAREA          POINT TO FORMATTING DYNAMIC AREA
         ST    R1,8(,R13)          CHAIN SAVE AREAS
         ST    R13,4(,R1)
         LR    R13,R1              POINT TO NEW SAVE AREA
         USING @FMTAREA,R13
         ICM   R7,15,LEFTFEL       POINT TO LEFT-MOST VISIBLE FEL
         BM    LEFTFNUL            INVALID BECAUSE TOO FAR RIGHT
         L     R8,LEFTFELO         GET ITS OFFSET
         LH    R0,FELDSPOF(,R7)    LOAD ZERO OR NEGATIVE DISPLAY OFFSET
         AR    R15,R0              ADD IT
         BNP   LEFTPART            NO NEED TO LOOK AT PREVIOUS ELEMENTS
         LTR   R0,R0               WAS ITEM LEFT-JUSTIFIED ON SCREEN?
         BZ    *+6                 YES, DON'T ALLOW FOR BLANK
         BCTR  R15,0               NO, ALLOW FOR INTER-ITEM BLANK
         LA    R0,FMTFELS          POINT TO FIRST FEL
         LA    R14,FELSIZE         GET THE LENGTH OF A FORMAT ELEMENT
LEFTFELP CR    R0,R7               WANT LEFT OF FIRST ELEMENT?
         BNL   LEFTFMAX            YES, GO SETTLE FOR LEFT MAX
         SLR   R7,R14              POINT TO PREVIOUS FEL
         SH    R8,FELSYMLN(,R7)    SUBTRACT DATA ITEM BYTE COUNT
         OC    FELSYMLN(2,R7),FELSYMLN(R7)
         BZ    LEFTFELP            IGNORE ZERO LENGTH SYMBOL FEL
         SH    R15,FELDSPLN(,R7)   SUBTRACT DISPLAY LENGTH
         BNP   LEFTELEM            NO NEED TO LOOK AT PREVIOUS ELEMENTS
         BCTR  R15,0               ALLOW FOR INTER-ITEM BLANK
         B     LEFTFELP            LOOK BACK THROUGH FORMAT ELEMENTS
LEFTFMAX SR    R8,R8
         SR    R15,R15
LEFTELEM BZ    LEFTPART            DISPLAY IS ITEM-ALIGNED
         AH    R8,FELSYMLN(,R7)    ADD BACK DATA ITEM BYTE COUNT
         SR    R15,R15             NO MORE SCROLLING TO BE DONE
         ALR   R7,R14              POINT TO THE NEXT ITEM
LEFTPART TM    FELSYMFG(R7),FELHEX HEXADECIMAL DATA?
         BZ    *+8                 NO
         SRA   R15,1               YES, HALVE DATA BYTES PER COLUMN
         TM    FELSYMFG(R7),FELBIN BINARY INTEGER?
         BZ    *+8                 NO
         SRA   R15,2               YES, QUARTER DATA BYTES PER COLUMN
         TM    FELSYMFG(R7),FELBIT BIT STRING?
         BZ    *+8                 NO
         SRA   R15,3               YES, EIGHTH DATA BYTES PER COLUMN
         SR    R8,R15              SUBTRACT NEGATIVE NUMBER FROM OFFSET
         LTR   R8,R8               IS FINAL OFFSET NEGATIVE?
         BNM   *+6                 NO
         SR    R8,R8               YES, MAKE IT ZERO (SHOULDN'T HAPPEN)
         ST    R8,OFFSET           SAVE NEW OFFSET
         DROP  R13                 @FMTAREA
         L     R13,4(,R13)         POINT TO PREVIOUS SAVE AREA
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         B     FILLSCR
LEFTFNUL L     R13,4(,R13)         POINT TO PREVIOUS SAVE AREA
         LM    R14,R12,12(R13)     RESTORE REGISTERS
LEFTR15  L     R0,OFFSET
         SR    R0,R15              REDUCE OFFSET BY SCROLL AMOUNT
         BNM   *+6                 IF RESULT IS NEGATIVE
LEFTMAX  SR    R0,R0                  THEN MAKE IT ZERO
         ST    R0,OFFSET
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    FILLSCR             YES
         NI    PICFLAGS,255-PICOK  NO, REDRAW OF ANY PICTURE REQUIRED
         B     FILLSCR
         SPACE
**********************************************************************
*                                                          *         *
*         BACK / UNDO  (TRACE TABLE NAVIGATION)            *  R44.0  *
*                                                          * JUL2013 *
**********************************************************************
         SPACE
TTBACK   L     R1,FMTAREA          POINT TO FORMAT WORKING STORAGE
         USING @FMTAREA,R1
         L     R7,TRCURSOR         POINT TO CURRENT ENTRY
         SH    R7,HW4              POINT TO PREVIOUS ENTRY
         C     R7,TRCLIMIT         BACK TO MOST RECENT?
         BE    TTBAKLIM            YES, DON'T ALLOW IT
         LA    R0,TRCTABLE         POINT TO TABLE START
         CR    R7,R0               GONE BEFORE TABLE START?
         BNL   TTBAKRAP            NO, NO WRAP AROUND ISSUES
         TM    FMTFLAGS,TTWRAP     HAS THE TABLE WRAPPED AROUND?
         BNO   TTBAKLIM            NO, CAN'T DO ANY MORE
         LA    R7,TRCTBEND-4       YES, POINT TO HIGHEST ENTRY
TTBAKRAP ST    R7,TRCURSOR         MAKE THIS THE CURRENT ENTRY
         L     R0,0(,R7)           GET THIS ADDRESS
         ST    R0,@ADDR            SAVE REQUESTED ADDRESS
         B     LISTADOK            GO LOCATE TO REQUESTED ADDRESS
         DROP  R1                  FMTAREA
TTBAKLIM MVI   MSG,187             TRACE TABLE LIMIT REACHED
         B     PROMPT
         DROP  R5                  LEFT
         SPACE
**********************************************************************
*                                                          *         *
*         BROWSE/EDIT/VIEW/UPDATE - INVOKE ISPF/REVEDIT    *  GP@HC  *
*                                                          * AUG2001 *
**********************************************************************
         SPACE
         USING ISPFCMD,R5
ISPFCMD  LR    R5,R15              LOCAL BASE REGISTER
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    CMDINVLD            YES, COMMAND NOT ALLOWED
         TM    STATUS14,$14AS      BROWSING ADDRESS SPACE?
         BO    CMDINVLD            YES, COMMAND NOT ALLOWED
         AIF   (NOT &ENV390).HFSINV
         TM    $UCBAD,$HFSIO       PROCESSING HFS FILE?
         BO    CMDINVLD            YES, COMMAND NOT ALLOWED
.HFSINV  ANOP
         TM    STATUS2,$2TAPE      TAPE FILE?
         BO    CMDINVLD            YES, COMMAND NOT ALLOWED
         CLI   DS1FMTID,X'F1'      LOOKING AT A DASD DATA SET?
         BL    CMDINVLD            NO, COMMAND NOT ALLOWED
         TM    STATUS8,$8ZIP       PROCESSING A ZIP FILE?
         BNZ   CMDINVLD            YES, COMMAND NOT ALLOWED
         TM    DSORGTYP,X'DD'      PROCESSING VTOC OR PDS DIRECTORY?
         BO    CMDINVLD            YES, COMMAND NOT ALLOWED
         LA    R15,OPD1            SET FOR ERRMANY
         TM    OPD1+6,PRESENT      ANY OPERANDS?
         BO    ERRMANY             YES, TOO MANY
         NI    PICFLAGS,255-PICOK  REDRAW OF ANY PICTURE REQUIRED
         L     R1,OPD0             POINT TO SUBCOMMAND NAME
         CLI   0(R1),C'U'          UPDATE REQUEST?
         BE    UPDTCMD             YES
         AIF   (NOT &ENV390).NOISPF3
         CLI   $VOLSER,C' '        DATA SET ON VIO?
         BNH   ISPFVIO             YES, ISPF CANNOT ACCESS IT
         TM    STATUS8,$8ISPF      ISPF SERVICES AVAILABLE?
         BO    ISPFHERE            YES, USE THEM
.NOISPF3 ANOP
ISPFVIO  CLI   0(R1),C'E'          EDIT REQUEST?
         BE    UPDTCMD             YES
         AIF   (NOT &ENV390).NOISPF4
         CLI   0(R1),C'V'          VIEW REQUEST?
         BNE   ISPFHERE            NO, LET CALL TO ISPF FAIL
.NOISPF4 ANOP
         OI    STATUS11,$11VIEW    YES, TELL REVEDIT
UPDTCMD  OI    STATUS10,$10CAP     SET CAPS ON
         TM    FINDSW2,FALL        IS 'ALL' STATUS SET?
         BZ    UPDTCMDF            NO
         NI    FINDSW2,255-FALL    YES, RESET 'ALL' STATUS
         OI    FINDSW2,FANY        REMEMBER THAT IS WAS RESET
UPDTCMDF NI    STATUS11,255-$11FS2 NO LONGER IN PHASE 2
         L     R15,REVEDADR
         BASR  R14,R15             CALL ROUTINE
         NI    STATUS10,255-$10CAP SET CAPS OFF
         OI    STATUS11,$11FS2     FLAG IN PHASE 2
         MVC   COMPON,@REVIEW      FLAG COMPONENT FOR TSO HELP
         MVC   REVHELP,REVHB00     SET FIRST ISPF HELP PANEL NAME
         LA    R1,C'-'             GET PAD CHARACTER
         SLL   R1,24               PROMOTE PAD
         LH    R0,DSPLUS           GET SOURCE LENGTH
         OR    R1,R0               SET SOURCE LENGTH
         LA    R0,DSPLUS+2         SET SOURCE ADDRESS
         LA    R6,MSGDSN           SET TARGET ADDRESS
         LA    R7,L'MSGDSN         SET TARGET LENGTH
         MVCL  R6,R0               RESTORE DATA SET NAME DISPLAY
         LH    R1,DSPLUS           GET TEXT LENGTH
         LA    R1,MSGDSN(R1)       POINT TO AFTER DISPLAY TEXT
         CR    R1,R6               STILL IN MSGDSN?
         BNL   *+8                 NO
         MVI   0(R1),C' '          YES, INSERT A BLANK
         SH    R15,HW4             ANY PROBLEM?
         BP    FILLSCR             YES, REVEDIT HAS LOADED A MESSAGE
         BZ    ISPFEND             NO, BUT NO DATA WAS SAVED
         AIF   (NOT &ENV390).NOISPF5
         B     ISPFUPDT            DATA WAS SAVED
ISPFHERE L     R15,REVSPFEP        GET ENTRY POINT ADDRESS
         BASR  R14,R15             CALL ROUTINE
         CLI   0(R1),C'E'          EDIT REQUEST?
         BNE   FILLSCR             NO, MUST HAVE BEEN BROWSE OR VIEW
         CH    R15,HW4             ANY DATA SAVED?
         BE    FILLSCR             NO
         LTR   R15,R15             ANY PROBLEM?
         BNZ   FILLSCR             YES, REVISPF HAS LOADED A MESSAGE
.NOISPF5 ANOP
ISPFUPDT OI    STATUS7,$7SAVE      NO, DATA WAS SAVED
         MVI   MSG,75              DATA SAVED
ISPFEND  XC    OPDL(OPDLL),OPDL    ERASE ALL TRACE OF ANY OPERANDS
         LA    R15,NEWTOP          DATA SET UPDATED
*        BR    R15                 SO DISCARD CURRENT DATA
         DROP  R5                  ISPFCMD
         SPACE
**********************************************************************
*                                                          *         *
*         NEWTOP  -  SPECIFY ARBITRARY TOP-OF-DATA         *  GP@P6  *
*                                                          *  04/88  *
**********************************************************************
         SPACE
         USING NEWTOP,R5
NEWTOP   LR    R5,R15              LOCAL BASE REGISTER
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    CMDINVLD            YES, COMMAND NOT ALLOWED
         TM    STATUS14,$14AS      BROWSING ADDRESS SPACE?
         BO    CMDINVLD            YES, COMMAND NOT ALLOWED
         TM    STATUS13,$13_L      PROCESSING PRE-LOADED DATA?
         BO    CMDINVLD            YES, COMMAND NOT ALLOWED
         ICM   R0,15,$UCBAD        TALKING TO PHYSICAL DEVICE?
         BZ    CMDINVLD            NO, SO NEWTOP IS INVALID
         TM    DCBOFLGS,X'10'      IS THE FILE OPEN?
         BZ    CMDINVLD            NO, SO NEWTOP IS INVALID
         LA    R15,OPD2            SET FOR ERRMANY
         TM    OPD2+6,PRESENT      ARE THERE TOO MANY OPERANDS?
         BO    ERRMANY             YES, INVALID
         TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BZ    NEWTOP0             NO, RESET TO REAL TOP
         TM    OPD1+6,QUOTED       QUOTED?
         BO    ERRINV              YES, INVALID
         LH    R1,OPD1+4           GET LENGTH
         LTR   R1,R1               IS IT NULL STRING?
         BZ    NEWTOP0             YES, RESET TO REAL TOP
         CH    R1,HW6              IS LENGTH MORE THAN 6?
         BH    ERRINV              YES, ERROR
         L     R14,OPD1            GET ADDRESS OF DATA
         BCTR  R1,0                GET LENGTH CODE
         EX    R1,FINDXTRT         IS STRING ALL VALID HEX CHARACTERS?
         BNZ   ERRINV              NO, INVALID
         EX    R1,FINDXTR          YES, CONVERT TO ZONED HEX
         LA    R1,1(,R1)           GET LENGTH COUNT AGAIN
         SR    R0,R0               ZERO ACCUMULATOR
         LR    R15,R0              ZERO WORK REGISTER
NEWTOPLP SLL   R0,4                PROMOTE PREVIOUS HEX DIGITS
         NI    0(R14),X'0F'        ZERO ZONE
         IC    R15,0(,R14)         LOAD DIGIT
         OR    R0,R15              GATE DIGIT THROUGH TO ACCUMULATOR
         LA    R14,1(,R14)         POINT TO NEXT POSSIBLE DIGIT
         BCT   R1,NEWTOPLP         PROCESS NEXT DIGIT
         LTR   R0,R0               IS REAL TOP REQUESTED?
         BZ    NEWTOP0             YES
         ICM   R1,15,$UCBAD        TALKING DIRECTLY TO PHYSICAL DEVICE?
         BNP   ERRINV              NO, SO NON-ZERO OPERAND IS INVALID
NEWTOPS  TM    STATUS2,$2TAPE      REVIEWING A TAPE FILE?
         BO    NEWTOP8             YES, OPERAND IS RELATIVE BLOCK ADDR
         AIF   (NOT &ENV390).HFSTOP1
         TM    $UCBAD,$HFSIO       REVIEWING AN HFS FILE?
         BO    NEWTOP8             YES, OPERAND IS RELATIVE BYTE ADDR
.HFSTOP1 ANOP
         TM    STATUS14,$14BIG     32-BIT NOTE/POINT VALUES?
         BO    NEWTOP8             YES, PRESERVE RELATIVE TTTR
         SLL   R0,8                NO, CONVERT RELATIVE TTR TO TTR0
NEWTOP8  ST    R0,TTR              SAVE ADDRESS OF NEW TOP-OF-DATA
         TM    STATUS2,$2EOT       END-OF-FILE FOR TAPE?
         BZ    NEWTOPX             NO, PROCEED WITH POINT
         MVI   CLOSED,X'80'        YES, REPOSITION FOR POINT
         CLOSE ((R4),REREAD),TYPE=T,MF=(E,CLOSED)
         NI    STATUS2,255-$2EOT   REPOSITIONED AT START
NEWTOPX  DS    0H
         XASAM24
         POINT (R4),TTR            POINT TO REQUESTED ADDRESS
         XASAM31
         NI    STATUS2,255-$2FAST  DISABLE "FASTPATH"
         NI    STATUS,255-STNOMEM  ALLOW I/O EVEN IF NO MEMBERS
         TM    STATUS9,$9HIST      SHOWING PROGRAM HISTORY?
         BZ    NOCONCAT            NO, RESET POINTERS AND PROCEED
         NI    MODE,255-MD_FMT     YES, DISABLE FORMATTING
         NI    STATUS9,255-$9HIST  NO LONGER SHOWING PROGRAM HISTORY
         B     NOCONCAT            RESET POINTERS AND PROCEED
NEWTOP0  SR    R0,R0               LOAD FIRST PHYSICAL RBA
         AIF   (NOT &ENV390).HFSTOP2
         TM    $UCBAD,$HFSIO       ACCESSING HFS DATA?
         BO    NEWTOPS             YES, USE RBA 0 NOT RECORD 1
.HFSTOP2 ANOP
         LA    R0,1                LOAD FIRST PHYSICAL BLOCK NUMBER
         NI    FINDSW2,255-FALL    RESET 'ALL' STATUS
         TM    $UCBAD,$ACB         ACCESSING DATA VIA ACB?
         BO    NEWTOPOC            YES, PERFORM OPEN/CLOSE PROCESSING
         CLI   $CONCAT,0           GONE OFF THE FIRST VOLUME?
         BNE   NTDASDOK            YES, SKIP OBTAIN
         CLI   DS1FMTID,X'F1'      LOOKING AT A DASD DATA SET?
         BL    NTDASDOK            NO, SKIP OBTAIN
         TM    DSORGTYP,X'DD'      PROCESSING VTOC OR PDS DIRECTORY?
         BO    NTDASDOK            YES, SKIP OBTAIN
         IC    R2,DS1NOEPV         SAVE PREVIOUS EXTENT COUNT
         OBTAIN OBTAINW            REFRESH VTOC ENTRY COPY
         LA    R0,1                LOAD FIRST PHYSICAL BLOCK NUMBER
         CLM   R2,1,DS1NOEPV       HAS THE NUMBER OF EXTENTS CHANGED?
         BNE   NEWTOPOC            YES, PERFORM OPEN/CLOSE PROCESSING
NTDASDOK CLI   DYNEXLST,X'06'      IS THE EOV EXIT ACTIVE?
         BE    NEWTOPOC            YES, PERFORM OPEN/CLOSE PROCESSING
NTEOVXOK TM    DSORG,DS1DSGPO      IS DSORG PO?
         BZ    NEWTOPS             NO, PHYSICAL SEQUENTIAL
         MVC   BLDLNAME,$MEMBER    YES, LOAD MEMBER NAME
         OI    STATUS,STNOMEM      PREPARE FOR NO MEMBER OF THAT NAME
         MVC   $MEMBER,NOMEM
         B     TOPOFMEM            GO VERIFY AND READ LATEST STOW
NEWTOPOC MVI   CLOSED,X'80'        THIS IS ONE WAY TO DROP ALL BUFFERS
         CLOSE ((R4)),MF=(E,CLOSED)
         NI    STATUS,255-STOPEN   CLOSED
         L     R5,INIT2ADR         LOAD SUBROUTINE ADDRESS
         BR    R5                  PERFORM RE-INITIALIZATION
         DROP  R5                  NEWTOP
         SPACE
************************************************************
*                                                          *
*         FINDSMF  -  FIND SMF RECORD (SUB)TYPE            *
*                                                          *
************************************************************
         SPACE
         USING FINDSMF,R5
FINDSMF  LR    R5,R15              LOCAL BASE REGISTER
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    CMDINVLD            YES, COMMAND NOT ALLOWED
         TM    STATUS14,$14AS      BROWSING ADDRESS SPACE?
         BO    CMDINVLD            YES, COMMAND NOT ALLOWED
         TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BZ    ERRMISS             NO, REQUIRED OPERAND IS MISSING
         LA    R15,OPD4            SET FOR ERRMANY
         TM    OPD4+6,PRESENT      TOO MANY OPERANDS?
         BO    ERRMANY             YES
         LA    R15,OPD1            GET FIRST OPERAND ENTRY
         ST    R15,16(,R13)        SAVE OPERAND DETAILS FOR ERRINV
         TM    OPD1+6,NUMERIC      IS IT NUMERIC?
         BNO   ERRINV              NO, ERROR
         L     R15,KEYPRSAD        POINT TO KEYWORD PARSER
         LA    R1,FINDKYTB         POINT TO KEYWORD TABLE
         BASR  R14,R15             LOOK FOR KEYWORDS
         L     R14,OPD1            GET ADDRESS OF SMF RECORD TYPE
         LH    R1,OPD1+4           GET ITS LENGTH
         BCTR  R1,0
         EX    R1,NUMRCPAK
         CVB   R7,DOUBLE
         LA    R1,255
         CLR   R7,R1               IS IT GREATER THAN 255?
         BH    ERRINV              YES, ERROR
         TM    FINDSW2,FALL        IS 'ALL' STATUS SET?
         BZ    FSALLOFF            NO
         NI    FINDSW2,255-FALL    YES, RESET 'ALL' STATUS
         OI    FINDSW2,FANY        REMEMBER THAT IT WAS RESET
FSALLOFF NI    FINDSW2,255-FNOT    CAN'T DO FINDSMF-NOT
         MVI   FINDSW,FSMF         INDICATE FINDSMF
         XC    STRING,STRING       ERASE OLD STRING
         SR    R0,R0
         ST    R0,FNDNUM           RESET LAST-FOUND NUMBER
         ST    R0,FNDOFF           RESET LAST-FOUND OFFSET
         STH   R0,STRINGL          SAVE LENGTH CODE OF SMF TYPE BYTE
         STC   R7,SMFTYPE          STORE FLAVOUR OF THE DAY
         STC   R7,STRING           STORE BINARY VALUE 0 TO 255
         NI    FINDSW2,255-FUOL    PRECISE BIT PATTERN MATCH REQUIRED
         MVI   SMFSBTYP,X'FF'      INVALIDATE SMF RECORD SUBTYPE
         LA    R1,6                COLUMN 6 (INCLUDING THE RDW)
         ST    R1,FINDCOL2         SET SEARCH END COLUMN
         BCTR  R1,0
         ST    R1,FINDCOL1         SET SEARCH START OFFSET
         OI    FINDSW,FNUM         DISALLOW COLUMN SPECIFICATION
         LA    R8,OPD2             GET FIRST OPERAND ENTRY
         LA    R15,OPD3            GET SECOND OPERAND ENTRY
         TM    6(R8),PRESENT       ARE THERE ANY OPERANDS?
         BZ    FINDSAME            NO, USE PREVIOUS STRING
         LA    R0,1                PREPARE FIND MAINLINE OP CHECK COUNT
FSOPRLP  ST    R8,16(,R13)         SAVE OPERAND DETAILS FOR ERRINV
         LH    R1,4(,R8)           GET LENGTH
         L     R14,0(,R8)          GET ADDRESS OF DATA
         BCTR  R1,0
         TM    6(R8),NUMERIC       IS IT NUMERIC?
         BNO   FSOPRSWP            NO, TRY FOR OTHER OPERAND
         EX    R1,NUMRCPAK
         CVB   R8,DOUBLE
         LA    R1,255
         CLR   R8,R1               IS IT GREATER THAN 255?
         BH    ERRINV              YES, ERROR
         CLI   SMFTYPE,127         IS TYPE GREATER THAN 127?
         BH    FSUSRTYP            YES, ALLOW SUBTYPES FOR USER RECORDS
         STC   R7,DOUBLE           NO, SYSTEM TYPE SMF RECORD
         TRT   DOUBLE(1),FSTYPTBL  DOES THIS TYPE HAVE SUBTYPES?
         BZ    ERRINV              NO, ERROR
FSUSRTYP STH   R8,SMFSBTYP         SAVE SUBTYPE
         B     FOPERLP             GO CHECK IT
FSOPRSWP DS    0H                  NON-NUMERIC OPERAND FOUND
         CR    R8,R15              FIRST TIME HERE?
         BH    ERRINV              NO, ERROR
         XR    R8,R15              YES, SWAP OPERAND POINTERS
         XR    R15,R8
         XR    R8,R15
         TM    6(R8),PRESENT       SECOND OPERAND SPECIFIED?
         BO    FSOPRLP             YES, GO CHECK IT OUT
         B     FOPERLP             NO, GO CHECK THE FIRST OPERAND
         DROP  R5                  FINDSMF
         SPACE
*              TABLE OF SUBTYPE OFFSETS BY SMF RECORD TYPE
*                 OFFSET IS FROM SMFRTY (RECORD TYPE) BYTE
*                 OFFSET OF ZERO MEANS RECORD TYPE HAS NO SUBTYPES
FSTYPTBL DS    0H                                  SYSTEM RECORD TYPES
         DC    X'00000000000000000000000000000000' X'00'-X'0F' 000-015
         DC    X'00000000000000000000000012001200' X'10'-X'1F' 016-031
         DC    X'12120000000000002612120000000000' X'20'-X'2F' 032-047
         DC    X'00000000000000000000000000000000' X'30'-X'3F' 048-063
         DC    X'00000000000012121212121212121212' X'40'-X'4F' 064-079
         DC    X'00001212140000000012200012000000' X'50'-X'5F' 080-095
         DC    X'12000012110000000000000000000000' X'60'-X'6F' 096-111
         DC    X'00000000000000000000000000000000' X'70'-X'7F' 112-127
*               (INSTALLATION-TAILORABLE)          "USER" RECORD TYPES
         DC    X'12121212121212121212121212121212' X'80'-X'8F' 128-143
         DC    X'12121212121212121212121212121212' X'90'-X'9F' 144-159
         DC    X'12121212121212121212121212121212' X'A0'-X'AF' 160-175
         DC    X'12121212121212121212121212121212' X'B0'-X'BF' 176-191
         DC    X'12121212121212121212121212121212' X'C0'-X'CF' 192-207
         DC    X'12121212121212121212121212121212' X'D0'-X'DF' 208-223
         DC    X'12121212121212121212121212121212' X'E0'-X'EF' 224-239
         DC    X'12121212121212121212121212121212' X'F0'-X'FF' 240-255
         SPACE
**********************************************************************
*                                                          *         *
*         RFIND  -  REPEAT SEARCH (FIND OR FINDNOT)        *  GP@FT  *
*                                                          *  11/93  *
**********************************************************************
         SPACE
         USING RFIND,R5
RFIND    LR    R5,R15              LOCAL BASE REGISTER
         TM    OPD1+6,PRESENT      ANY OPERANDS?
         BZ    IFIND               NO
         OI    STATUS16,$16RF      YES, FLAG 'RFIND' QUEUED
         L     R15,KEYPRSAD        POINT TO KEYWORD PARSER
         SR    R1,R1               REQUEST 'FIND'/'CHANGE' TABLE
         BASR  R14,R15             DETECT 'RFIND FIND'
         NI    STATUS16,255-$16RF  RESET 'RFIND'-QUEUED FLAG
         CLI   OPD1+7,1            IS IT 'RFIND FIND'?
         BE    RFNDFIND            YES, GO HANDLE IT
         L     R14,OPD0            NO, POINT TO THE COMMAND
         LA    R15,OPD1            SET FOR ERRMANY
         CLI   0(R14),C'R'         WAS IT 'RFIND'?
         BE    ERRMANY             YES, TOO MANY OPERANDS
IFIND    TM    FINDSW2,FALL        IS 'ALL' STATUS SET?
         BZ    FINDSAME            NO, BRANCH TO COMMON CODE
         NI    FINDSW2,255-FALL    RESET 'ALL' STATUS
         OI    FINDSW2,FANY        REMEMBER THAT IS WAS RESET
         B     FINDSAME            BRANCH TO COMMON CODE
RFNDFIND MVC   OPD0(OPDLL-8),OPD1  SWALLOW 'RFIND'
         XC    OPDL+OPDLL-8(8),OPDL+OPDLL-8
         B     FIND                GO PARSE 'FIND' COMMAND
         DROP  R5                  RFIND
         SPACE
**********************************************************************
*                                                          *         *
*         FINDNOT                                          *  GP@FT  *
*                                                          *  11/93  *
**********************************************************************
         SPACE
         USING FINDNOT,R15
FINDNOT  TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BZ    ERRMISS             NO, REQUIRED OPERAND IS MISSING
         LA    R15,OPD6            SET FOR ERRMANY
         TM    OPD6+6,PRESENT      ARE THERE TOO MANY OPERANDS?
         BO    ERRMANY             YES, INVALID
         OI    FINDSW2,FNOT        DO FINDNOT, NOT FIND
         B     FITORNOT            BRANCH TO COMMON CODE
         DROP  R15                 FINDNOT
         SPACE
**********************************************************************
*                                                          *         *
*         DIR  -  SHOW DIRECTORY MEMBER LIST               * GP@SECV *
*                                                          *  03/86  *
**********************************************************************
         SPACE
         USING DIRCMD,R5
DIRCMD   LR    R5,R15              LOCAL BASE REGISTER
         AIF   (NOT &ENV390).HFSDIR
         TM    $UCBAD,$HFSIO       PROCESSING HFS FILE?
         BO    DIRCMDON            YES, FORCE DIRECTORY DISPLAY
.HFSDIR  ANOP
         TM    DSORG,DS1DSGPO      IS DSORG PO?
         BZ    MEMPDS              NO, BRANCH
         TM    STATUS,STPODIR      ALREADY IN MEMBER SELECT MODE?
         BO    END                 YES, DON'T DO OBTAIN TWICE
         OBTAIN OBTAINW            REFRESH VTOC ENTRY COPY
DIRCMDON OI    STATUS,STPODIR      TURN ON MEMBER SELECT MODE
         B     END                     AND RETURN TO MAINLINE
         DROP  R5                  DIRCMD
         SPACE
************************************************************
*                                                          *
*         HEX                                              *
*                                                          *
************************************************************
         SPACE
         USING HEXMODE,R5
HEXMODE  LR    R5,R15              LOCAL BASE REGISTER
         TM    STATUS14,$14AS      BROWSING ADDRESS SPACE?
         BO    CMDINVLD            YES, COMMAND NOT ALLOWED
         LA    R15,OPD2            SET FOR ERRMANY
         TM    OPD2+6,PRESENT      ARE THERE TOO MANY OPERANDS?
         BO    ERRMANY             YES
         TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BZ    HEXFLIP             NO, FLIP FLOP
         L     R15,KEYPRSAD        YES, POINT TO KEYWORD PARSER
         SR    R1,R1               REQUEST DEFAULT TABLE
         BASR  R14,R15             LOOK FOR KEYWORDS
         CLI   OPD1+7,1            IS IT 'ON'?
         BNE   HEXCHK              NO, TRY OFF
HEXON    OI    MODE,MD_HEX
         NI    STATUS16,255-$16HEX
         MVC   ACTCOLOR,HEXCOLOR   SET ACTIVE COLOUR FOR HEX ON
         TM    STATUS16,$16XC      IS HEXC ON?
         BZ    FILLSCR             NO
         MVI   MSG,227             00 SHOWN AS __
         B     FILLSCR
HEXCHK   CLI   OPD1+7,2            IS IT 'OFF'?
         BNE   ERRINV              NO, INVALID
HEXOFF   NI    MODE,255-MD_HEX
         NI    STATUS16,255-$16HEX
         MVC   ACTCOLOR,CHRCOLOR   SET ACTIVE COLOUR FOR HEX OFF
         B     FILLSCR
HEXFLIP  TM    MODE,MD_HEX         IS HEX ON?
         BO    HEXOFF              YES, GO TURN IT OFF
         B     HEXON               NO, GO TURN IT ON
         DROP  R5                  HEXMODE
         SPACE
**********************************************************************
*                                                          *         *
*         HEXX                                             *  R46.8  *
*                                                          * JAN2017 *
**********************************************************************
         SPACE
         USING HEXEXT,R5
HEXEXT   LR    R5,R15              LOCAL BASE REGISTER
         TM    STATUS14,$14AS      BROWSING ADDRESS SPACE?
         BO    CMDINVLD            YES, COMMAND NOT ALLOWED
         LA    R15,OPD2            SET FOR ERRMANY
         TM    OPD2+6,PRESENT      ARE THERE TOO MANY OPERANDS?
         BO    ERRMANY             YES
         TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BZ    HEXXFLIP            NO, FLIP FLOP
         L     R15,KEYPRSAD        YES, POINT TO KEYWORD PARSER
         SR    R1,R1               REQUEST DEFAULT TABLE
         BASR  R14,R15             LOOK FOR KEYWORDS
         CLI   OPD1+7,1            IS IT 'ON'?
         BNE   HEXXCHK             NO, TRY OFF
HEXXON   NI    STATUS16,255-$16HEX
         OI    STATUS16,$16XX
         NI    MODE,255-MD_HEX-MD_FMT
         MVC   ACTCOLOR,HEXCOLOR   SET ACTIVE COLOUR FOR HEX ON
         B     FILLSCR
HEXXCHK  CLI   OPD1+7,2            IS IT 'OFF'?
         BNE   ERRINV              NO, INVALID
HEXXOFF  NI    STATUS16,255-$16HEX
         NI    MODE,255-MD_HEX
         MVC   ACTCOLOR,CHRCOLOR   SET ACTIVE COLOUR FOR HEX OFF
         B     FILLSCR
HEXXFLIP TM    STATUS16,$16XX      IS HEXX ON?
         BO    HEXXOFF             YES, GO TURN IT OFF
         B     HEXXON              NO, GO TURN IT ON
         DROP  R5                  HEXEXT
         SPACE
**********************************************************************
*                                                          *         *
*         HEXR                                             *  R46.8  *
*                                                          * JAN2017 *
**********************************************************************
         SPACE
         USING HEXRITE,R5
HEXRITE  LR    R5,R15              LOCAL BASE REGISTER
         TM    STATUS14,$14AS      BROWSING ADDRESS SPACE?
         BO    CMDINVLD            YES, COMMAND NOT ALLOWED
         LA    R15,OPD2            SET FOR ERRMANY
         TM    OPD2+6,PRESENT      ARE THERE TOO MANY OPERANDS?
         BO    ERRMANY             YES
         TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BZ    HEXRFLIP            NO, FLIP FLOP
         L     R15,KEYPRSAD        YES, POINT TO KEYWORD PARSER
         SR    R1,R1               REQUEST DEFAULT TABLE
         BASR  R14,R15             LOOK FOR KEYWORDS
         CLI   OPD1+7,1            IS IT 'ON'?
         BNE   HEXRCHK             NO, TRY OFF
HEXRON   NI    STATUS16,255-$16HEX
         OI    STATUS16,$16XR
         NI    MODE,255-MD_HEX-MD_FMT
         MVC   ACTCOLOR,CHRCOLOR   SET ACTIVE COLOUR FOR HEX OFF (SIC)
         MVI   MSG,233             BLANK->'__'  NULL->'..'
         B     FILLSCR
HEXRCHK  CLI   OPD1+7,2            IS IT 'OFF'?
         BNE   ERRINV              NO, INVALID
HEXROFF  NI    STATUS16,255-$16HEX
         NI    MODE,255-MD_HEX
         MVC   ACTCOLOR,CHRCOLOR   SET ACTIVE COLOUR FOR HEX OFF
         B     FILLSCR
HEXRFLIP TM    STATUS16,$16XR      IS HEXR ON?
         BO    HEXROFF             YES, GO TURN IT OFF
         B     HEXRON              NO, GO TURN IT ON
         DROP  R5                  HEXRITE
         SPACE
**********************************************************************
*                                                          *         *
*         HEXC - SHOW KEYBOARD CHARACTERS IN HEX DISPLAY   *  R46.8  *
*                                                          * JAN2017 *
**********************************************************************
         SPACE
         USING HEXCHAR,R5
HEXCHAR  LR    R5,R15              LOCAL BASE REGISTER
         LA    R15,OPD2            SET FOR ERRMANY
         TM    OPD2+6,PRESENT      ARE THERE TOO MANY OPERANDS?
         BO    ERRMANY             YES
         TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BO    HEXCON              YES, CHECK IT OUT
         XI    STATUS16,$16XC      NO, TOGGLE THE SETTING
HEXCQM   TM    STATUS16,$16XC      IS IT NOW ON?
         BO    HEXC143             YES
         B     HEXC144             NO
HEXCON   L     R15,KEYPRSAD        YES, POINT TO KEYWORD PARSER
         SR    R1,R1               REQUEST DEFAULT TABLE
         BASR  R14,R15             LOOK FOR KEYWORDS
         CLI   OPD1+7,3            IS IT '?'?
         BE    HEXCQM              YES, GO SHOW THE SETTING
         CLI   OPD1+7,1            IS IT 'ON'?
         BNE   HEXCOFF             NO, TRY OFF
         OI    STATUS16,$16XC      YES
HEXC143  MVI   MSG,143             SETTING NOW ON
         TM    MODE,MD_HEX         IS HEX ON?
         BZ    FILLSCR             NO
         MVI   MSG,227             00 SHOWN AS __
         B     FILLSCR
HEXCOFF  CLI   OPD1+7,2            IS IT 'OFF'?
         BNE   ERRINV              NO, INVALID OPERAND
         NI    STATUS16,255-$16XC  YES
HEXC144  MVI   MSG,144             SETTING NOW OFF
         B     FILLSCR
         DROP  R5                  HEXCHAR
         SPACE
**********************************************************************
*                                                          *         *
*         RDW                                              *  R47.7  *
*                                                          * NOV2017 *
**********************************************************************
         SPACE
         USING RDWCMD,R5
RDWCMD   LR    R5,R15              LOCAL BASE REGISTER
         TM    TSTRECFM,X'40'      USING RDWS?
         BZ    CMDINVLD            NO, COMMAND NOT ALLOWED
         LA    R15,OPD2            SET FOR ERRMANY
         TM    OPD2+6,PRESENT      ARE THERE TOO MANY OPERANDS?
         BO    ERRMANY             YES
         TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BO    RDWCON              YES, CHECK IT OUT
         TM    STATUS16,$16RDW     IS IT NOW ON?
         BO    RDWSWOFF            YES, TURN IT OFF
         B     RDWSWON             NO, TURN IT ON
RDWCQM   TM    STATUS16,$16RDW     IS IT NOW ON?
         BO    RDWC143             YES, GO SAY SO
         B     RDWC144             NO, GO SAY SO
RDWCON   L     R15,KEYPRSAD        YES, POINT TO KEYWORD PARSER
         SR    R1,R1               REQUEST DEFAULT TABLE
         BASR  R14,R15             LOOK FOR KEYWORDS
         CLI   OPD1+7,3            IS IT '?'?
         BE    RDWCQM              YES, GO SHOW THE SETTING
         CLI   OPD1+7,1            IS IT 'ON'?
         BNE   RDWCOFF             NO, TRY OFF
         TM    STATUS16,$16RDW     ALREADY ON?
         BO    RDWC143             YES, RECSIZE ALREADY SET
RDWSWON  OI    STATUS16,$16RDW     NO, TURN IT ON
         MVI   AMKLN+1,4           SET "KEY" LENGTH
         LH    R0,DCBLRECL         GET THE LOGICAL RECORD LENGTH
         LTR   R0,R0               IS IT POSITIVE AS EXPECTED?
         BNP   *+8                 NO, BETTER NOT MESS WITH IT
         ST    R0,RECSIZE          SET DISPLAY RECORD LENGTH
         SR    R0,R0
         TM    FINDSW,FSMF         WAS LAST FIND A FINDSMF?
         BO    RDWFSOK1            YES, COLUMN RANGE UNAFFECTED
         ST    R0,FINDCOL1         RESET FIND LEFT BOUNDARY
         MVC   FINDCOL2,RECSIZE    RESET FIND RIGHT BOUNDARY
RDWFSOK1 STH   R0,AMRKP            SET RKP JUST IN CASE
         CLI   COL1LBL,C'1'        ANY GOOD STUFF HERE?
         BNE   RDWC143             YES, KEEP IT
         MVC   COL1LBL(4),RDWCRDW  NO, INDICATE RDW ON SHOW
RDWC143  MVI   MSG,143             SETTING NOW ON
         B     FILLSCR
RDWCOFF  CLI   OPD1+7,2            IS IT 'OFF'?
         BNE   ERRINV              NO, INVALID OPERAND
         TM    STATUS16,$16RDW     ALREADY OFF?
         BZ    RDWC144             YES, RECSIZE ALREADY SET
RDWSWOFF NI    STATUS16,255-$16RDW NO, TURN IT OFF
         LH    R0,DCBLRECL         GET THE LOGICAL RECORD LENGTH
         LTR   R0,R0               IS IT POSITIVE AS EXPECTED?
         BNP   *+12                NO, BETTER NOT MESS WITH IT
         SH    R0,HW4              DECREASE SHOWABLE RECORD LENGTH
         ST    R0,RECSIZE          SET DISPLAY RECORD LENGTH
         LA    R0,4
         TM    FINDSW,FSMF         WAS LAST FIND A FINDSMF?
         BO    RDWFSOK2            YES, COLUMN RANGE UNAFFECTED
         ST    R0,FINDCOL1         RESET FIND LEFT BOUNDARY
         MVC   FINDCOL2,RECSIZE    RESET FIND RIGHT BOUNDARY
RDWFSOK2 STCM  R0,12,AMKLN         RESET "KEY" LENGTH
         CLC   COL1LBL(4),RDWCRDW  ANY GOOD STUFF HERE?
         BNE   RDWC144             YES, KEEP IT
         MVC   COL1LBL,BLANKS      NO, CLEAR RDW ON SHOW INDICATOR
         MVI   COL1LBL,C'1'
RDWC144  MVI   MSG,144             SETTING NOW OFF
         B     FILLSCR
         DROP  R5                  RDWCMD
         SPACE
RDWCRDW  DC    CL4'RDW '
         SPACE
************************************************************
*                                                          *
*         SMF  -  FORMAT SMF RECORDS                       *
*                                                          *
************************************************************
         SPACE
         USING SMFMODE,R5
SMFMODE  LR    R5,R15              LOCAL BASE REGISTER
         TM    MODE,MD_SMF         SMF FORMATTING ON?
         BO    SMFALLOW            YES, ALLOW TURNING IT OFF
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    CMDINVLD            YES, COMMAND NOT ALLOWED
         TM    STATUS14,$14AS      BROWSING ADDRESS SPACE?
         BO    CMDINVLD            YES, COMMAND NOT ALLOWED
SMFALLOW LA    R15,OPD2            SET FOR ERRMANY
         TM    OPD2+6,PRESENT      ARE THERE TOO MANY OPERANDS?
         BO    ERRMANY             YES
         TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BZ    SMFFLIP             NO, FLIP FLOP
         L     R15,KEYPRSAD        YES, POINT TO KEYWORD PARSER
         SR    R1,R1               REQUEST DEFAULT TABLE
         BASR  R14,R15             LOOK FOR KEYWORDS
         CLI   OPD1+7,1            IS IT 'ON'?
         BNE   SMFOFF              NO, TRY OFF
         OI    MODE,MD_SMF         YES, ENABLE SMF FORMATTING
         NI    MODE,255-MD_EREP    DISABLE EREP FORMATTING
SMFLOAD  ICM   R0,15,CALLSMFA      GET REVSMF ADDRESS - IS IT LOADED?
         BNZ   FILLSCR             YES, BRANCH
         ICM   R0,15,REVSMFEP      REVSMF LINK-EDITED IN?
         BNZ   SMFLKED             YES
         LOAD  EPLOC=REVSMFNM,ERRET=SMFERR
SMFLKED  ST    R0,CALLSMFA         SAVE ADDRESS OF REVSMF
         B     FILLSCR
SMFOFF   CLI   OPD1+7,2            IS IT 'OFF'?
         BNE   ERRINV              NO, INVALID
         NI    MODE,255-MD_SMF
         B     FILLSCR
SMFFLIP  XI    MODE,MD_SMF
         NI    MODE,255-MD_EREP    DISABLE EREP FORMATTING
         TM    MODE,MD_SMF         DID WE FLIP IT ON?
         BO    SMFLOAD             YES - CHECK FOR REVSMF
         B     FILLSCR
SMFERR   NI    MODE,255-MD_SMF
         MVC   MSG(MSGSMFL),MSGSMF REVSMF COULD NOT BE LOADED
         SLL   R1,4                LEAVE ROOM FOR "SIGN"
         ST    R1,DOUBLE+4         SHOW ABEND CODE
         OI    DOUBLE+7,X'0F'
         UNPK  MSG+MSGSMFL-6(3),DOUBLE
         TR    MSG+MSGSMFL-6(3),HEXTAB-240
         CVD   R15,DOUBLE          SHOW REASON CODE
         OI    DOUBLE+7,X'0F'
         UNPK  MSG+MSGSMFL-2(2),DOUBLE
         B     BELPRMPT
         DROP  R5                  SMFMODE
REVSMFNM DC    CL8'REVSMF  '
MSGSMF   MESG  'REVSMF COULD NOT BE LOADED - SXXX-RC'
         SPACE
**********************************************************************
*                                                          *         *
*         EREP  -  FORMAT LOGREC RECORDS                   *  GP@FT  *
*                                                          *  01/94  *
**********************************************************************
         SPACE
         USING EREPMODE,R5
EREPMODE LR    R5,R15              LOCAL BASE REGISTER
         TM    MODE,MD_EREP        EREP FORMATTING ON?
         BO    EREPNKEY            YES, ALLOW TURNING IT OFF
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    CMDINVLD            YES, COMMAND NOT ALLOWED
         TM    STATUS14,$14AS      BROWSING ADDRESS SPACE?
         BO    CMDINVLD            YES, COMMAND NOT ALLOWED
         TM    DSORG,DS1DSGPO      IS DSORG PO?
         BZ    EREPSEQ             NO, BRANCH
         TM    TSTRECFM,X'C0'      UNDEFINED RECORD FORMAT?
         BZ    CMDINVLD            YES, ONLY ALLOWED FOR SYS1.LOGREC
EREPSEQ  TM    STATUS2,$2TAPE      MAGNETIC TAPE FILE?
         BO    EREPNKEY            YES, CAN'T BE A KEYED FILE
         CLI   DCBKEYLE,0          NO, IS DISK FILE KEYED?
         BNE   CMDINVLD            YES, CAN'T BE LOGREC RECORDS
EREPNKEY LA    R15,OPD2            SET FOR ERRMANY
         TM    OPD2+6,PRESENT      ARE THERE TOO MANY OPERANDS?
         BO    ERRMANY             YES
         TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BZ    EREPFLIP            NO, FLIP FLOP
         L     R15,KEYPRSAD        YES, POINT TO KEYWORD PARSER
         SR    R1,R1               REQUEST DEFAULT TABLE
         BASR  R14,R15             LOOK FOR KEYWORDS
         CLI   OPD1+7,1            IS IT 'ON'?
         BNE   EREPOFF             NO, TRY OFF
         OI    MODE,MD_EREP        YES, ENABLE EREP FORMATTING
         NI    MODE,255-MD_SMF     DISABLE SMF FORMATTING
EREPRDW  TM    STATUS16,$16RDW     SHOWING RDWS?
         BZ    FILLSCR             NO, GOOD
         NI    STATUS16,255-$16RDW YES, WELL, NOT ANYMORE
         SR    R0,R0
         ST    R0,FNDNUM           RESET LAST-FOUND NUMBER
         ST    R0,FNDOFF           RESET LAST-FOUND OFFSET
         STH   R0,AMKLN            RESET "KEY" LENGTH
         LH    R0,DCBLRECL
         SH    R0,HW4              DECREASE SHOWABLE RECORD LENGTH
         ST    R0,RECSIZE
         CLI   COL1LBL,C'R'        RDW INDICATOR PRESENT?
         BNE   FILLSCR             NO
         MVC   COL1LBL,BLANKS      YES, CLEAR IT
         MVI   COL1LBL,C'1'
         B     FILLSCR
EREPOFF  CLI   OPD1+7,2            YES, IS IT 'OFF'?
         BNE   ERRINV              NO, INVALID OPERAND
         NI    MODE,255-MD_EREP    YES, TURN IT OFF
         B     FILLSCR
EREPFLIP XI    MODE,MD_EREP
         NI    MODE,255-MD_SMF     DISABLE SMF FORMATTING
         TM    MODE,MD_EREP        WAS 'EREP' JUST TURNED ON?
         BO    EREPRDW             YES, CHECK OUT RDW HANDLING
         B     FILLSCR
         DROP  R5                  EREPMODE
         SPACE
**********************************************************************
*                                                          *         *
*         COLOUR                                           * GP@SECV *
*                                                          *  06/85  *
**********************************************************************
         SPACE
         USING COLRMODE,R5
COLRMODE LR    R5,R15              LOCAL BASE REGISTER
         LA    R15,OPD2            SET FOR ERRMANY
         TM    OPD2+6,PRESENT      ARE THERE TOO MANY OPERANDS?
         BO    ERRMANY             YES, INVALID
         TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BO    COLOURON            YES, CHECK IT OUT
         TM    STATUS5,$5EDS       NO, FLIP-FLOP
         BZ    COLOR7ON            NOW OFF SO TURN IT ON
         B     COLR7OFF            NOW ON SO TURN IT OFF
COLOURON L     R15,KEYPRSAD        YES, POINT TO KEYWORD PARSER
         SR    R1,R1               REQUEST DEFAULT TABLE
         BASR  R14,R15             LOOK FOR KEYWORDS
         CLI   OPD1+7,1            IS IT 'ON'?
         BNE   COLOROFF            NO, TRY OFF
COLOR7ON TM    STATUS5,$5QRY       WAS A QUERY PERFORMED?
         BNO   COLOURQ1            NO, ALLOW USER TO DECIDE
         TM    STATUS5,$5HILT      HIGHLIGHTING SUPPORTED?
         BNO   ERRCOLOR            NO, AVOID I/O ERRORS - REJECT 'ON'
COLOURQ1 OI    STATUS5,$5EDS       COLOUR OK OR CLEVER MONOCHROME OR
         B     FILLSCR                          NO QUERY WAS DONE
COLOROFF CLI   OPD1+7,2            IS IT 'OFF'?
         BNE   COLOUR#             NO, INVALID OPERAND
COLR7OFF NI    STATUS5,255-$5EDS
         B     FILLSCR
COLOUR#  CLI   OPD1+5,1            IS LENGTH 1?
         BNE   ERRINV              NO
         L     R14,OPD1            YES, POINT TO OPERAND
         TRT   0(1,R14),HEXTEST    HEX DIGIT?
         BNZ   ERRINV              NO
         TM    STATUS5,$5QRY       WAS A QUERY PERFORMED?
         BNO   COLOURQ2            NO, ALLOW USER TO DECIDE
         TM    STATUS5,$5COLR      IS 7-COLOUR A POSSIBILITY?
         BNO   ERRCOLOR            NO, REJECT THE NOMINATED COLOUR
COLOURQ2 TR    0(1,R14),HEXDATA    YES, CONVERT OPERAND TO HEXADECIMAL
         TM    0(R14),X'07'        COLOUR 0 OR 8 NOMINATED?
         BZ    ERRCOLOR            YES, BLACK ON VDU IS RIGHT OUT
         CLI   0(R14),X'F8'        IS IT A 7-COLOUR COLOUR?
         BL    COLOR#OK            YES, PROCEED
         TM    STATUS5,$5CLR16     NO, IS THIS A 16-COLOUR TERMINAL?
         BZ    ERRCOLOR            NO, CANNOT DO A COLOUR THIS FANCY
COLOR#OK TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    COLORHEL            YES, NO PICTURE DATA PRESENT
         ICM   R0,15,HSEACTIV      PICTURE DATA PRESENT?
         BNZ   COLR#PIC            YES
COLORHEL OI    STATUS,STPROF       PROFILE REWRITE NOW REQUIRED
         OI    STATUS5,$5EDS       TURN ON COLOUR AT THE SAME TIME
         NI    0(R14),X'0F'        CONVERT TO BINARY
         TM    MODE,MD_FMT         CURRENTLY FORMATTING RECORDS?
         BNZ   COLR#SMF            YES
         TM    MODE,MD_HEX         IN HEX MODE?
         BO    COLR#HEX            YES
         MVC   CHRCOLOR,0(R14)     NO, UPDATE CHARACTER MODE COLOUR
         MVC   ACTCOLOR,0(R14)     UPDATE NON-SMF ACTIVE COLOUR
         B     FILLSCR             REPAINT SCREEN
COLR#HEX MVC   HEXCOLOR,0(R14)     UPDATE HEXADECIMAL MODE COLOUR
         MVC   ACTCOLOR,0(R14)     UPDATE NON-SMF ACTIVE COLOUR
         B     FILLSCR             REPAINT SCREEN
COLR#SMF MVC   FMTCOLOR,0(R14)     UPDATE SMF MODE COLOUR
         B     FILLSCR             REPAINT SCREEN
COLR#PIC MVC   PICCOLOR,0(R14)     UPDATE PICTURE RENDERING COLOUR
         NI    PICFLAGS,255-PICOK  PICTURE REDRAW NOW REQUIRED
         B     FILLSCR             REPAINT SCREEN
ERRCOLOR MVI   MSG,42              COLOUR NOT SUPPORTED
         B     PROMPT
         DROP  R5                  COLRMODE
         SPACE
**********************************************************************
*                                                          *         *
*         FMTVAR                                           *  GP@FT  *
*                                                          *  01/96  *
**********************************************************************
         SPACE
         USING FMTVAR,R5
FMTVAR   LR    R5,R15              LOCAL BASE REGISTER
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    CMDINVLD            YES, COMMAND NOT ALLOWED
         TM    STATUS14,$14AS      BROWSING ADDRESS SPACE?
         BO    CMDINVLD            YES, COMMAND NOT ALLOWED
         LA    R15,OPD3            SET FOR ERRMANY
         TM    OPD3+6,PRESENT      TOO MANY OPERANDS?
         BO    ERRMANY             YES
         TM    OPD2+6,PRESENT      ENOUGH OPERANDS?
         BZ    ERRMISS             NO
         LA    R1,OPD1             GET FIRST OPERAND ENTRY
         ST    R1,16(,R13)         SAVE OPERAND DETAILS FOR ERRINV
         LH    R1,OPD1+4           GET LENGTH
         LTR   R1,R1               IS IT NULL STRING?
         BZ    ERRMISS             YES, ERROR
         CH    R1,HW8              IS LENGTH MORE THAN 8?
         BH    ERRINV              YES, ERROR
         MVC   DOUBLE,BLANKS
         L     R14,OPD1            GET ADDRESS OF DATA
         BCTR  R1,0                GET SYMBOL NAME LENGTH CODE
         EX    R1,CPYSYMNM         EXTRACT THE SYMBOL NAME
         ICM   R1,15,FMTAREA       HAS A FORMAT BEEN LOADED?
         BZ    DOMSGFV1            NO, NO SYMBOLS TO SEARCH
         USING @FMTAREA,R1
         LA    R7,FMTFELS          YES, POINT TO ELEMENT HOLD AREA
         C     R7,FMTFELAD         ANY ELEMENTS LOADED?
         BNL   DOMSGFV1            NO, NO SYMBOLS TO SEARCH
FVSRCHLP CLC   DOUBLE,FELSYMNM(R7) FOUND THE SYMBOL ENTRY?
         BE    FVUPDATE            YES, GO UPDATE IT
         LA    R7,FELSIZE(,R7)     NO, POINT TO NEXT FORMAT ELEMENT
         C     R7,FMTFELAD         ANY MORE ELEMENTS TO CHECK?
         BL    FVSRCHLP            YES
         DROP  R1                  @FMTAREA
         MVC   MSG(MSGFV2L),MSGFV2 NO, SYMBOL NOT FOUND
         MVC   MSG+9(8),DOUBLE     SHOW NAME THAT WAS SOUGHT
         LA    R15,MSG+16          POINT TO LAST BYTE OF NAME
         LH    R0,MSG              GET THE MESSAGE LENGTH
FVMSG2LP CLI   0(R15),C' '         TRAILING BLANK?
         BNE   BELPRMPT            NO, ISSUE MESSAGE
         MVC   0(10,R15),1(R15)    YES, OVERLAY IT
         BCTR  R15,0               BACK UP A BYTE
         BCTR  R0,0                DECREMENT MESSAGE LENGTH
         STH   R0,MSG              UPDATE MESSAGE LENGTH
         B     FVMSG2LP
FVUPDATE LA    R15,OPD2            POINT TO DATA TYPE ODE
         ST    R15,16(,R13)        SAVE OPERAND DETAILS FOR ERRINV
         CLI   OPD2+5,1            IS SECOND OPERAND 1 BYTE LONG?
         BNE   ERRINV              NO, INVALID
         L     R14,0(,R15)         POINT TO DATA TYPE OPERAND
         MVC   MSG(MSGFV3L),MSGFV3 DATA TYPE SET FOR SYMBOL
         MVC   MSG+12(1),0(R14)    SHOW DATA TYPE
         MVC   MSG+22(8),DOUBLE    SHOW NAME OF SYMBOL THAT WAS UPDATED
         LA    R15,MSG+29          POINT TO LAST BYTE OF NAME
         LH    R0,MSG              GET THE MESSAGE LENGTH
FVMSG3LP CLI   0(R15),C' '         TRAILING BLANK?
         BNE   FVMSG3OK            NO, PROCEED
         BCTR  R0,0                DECREMENT MESSAGE LENGTH
         STH   R0,MSG              UPDATE MESSAGE LENGTH
         BCT   R15,FVMSG3LP        BACK UP A BYTE
FVMSG3OK CLI   0(R14),C'C'         CHARACTER REQUEST?
         BE    FMTVARCZ            YES
         CLI   0(R14),C'X'         HEXADECIMAL REQUEST?
         BE    FMTVARX             YES
         CLI   0(R14),C'Z'         ZONED DECIMAL REQUEST?
         BE    FMTVARCZ            YES
         CLI   0(R14),C'P'         PACKED DECIMAL REQUEST?
         BE    FMTVARP             YES
         CLI   0(R14),C'I'         SIGNED INTEGER REQUEST?
         BE    FMTVARI             YES
         CLI   0(R14),C'U'         UNSIGNED INTEGER REQUEST?
         BE    FMTVARI             YES
         CLI   0(R14),C'B'         BIT STRING REQUEST?
         BE    FMTVARB             YES
         B     ERRINV              UNKNOWN DATA TYPE, INVALID OPERAND
FMTVARCZ NI    FELSYMFG(R7),255-FELHEX-FELBIN-FELDEC-FELBIT-FELUNS
         LH    R0,FELSYMLN(,R7)    GET DATA ELEMENT LENGTH
         STH   R0,FELDSPLN(,R7)    THIS IS NOW THE DISPLAY LENGTH
         CLI   0(R14),C'C'         CHARACTERS REQUEST?
         BE    FVLENCHK            YES
         OI    FELSYMFG(R7),FELDEC NO, MUST BE ZONED DECIMAL
         B     FVLENCHK
FMTVARX  NI    FELSYMFG(R7),255-FELBIN-FELDEC-FELBIT-FELUNS
         OI    FELSYMFG(R7),FELHEX
FMTVARXP LH    R0,FELSYMLN(,R7)    GET DATA ELEMENT LENGTH
         SLL   R0,1                DOUBLE IT
         STH   R0,FELDSPLN(,R7)    THIS IS NOW THE DISPLAY LENGTH
         B     FVLENCHK
FMTVARP  NI    FELSYMFG(R7),255-FELBIN-FELBIT-FELUNS
         OI    FELSYMFG(R7),FELHEX+FELDEC
         B     FMTVARXP            BRANCH TO COMMON CODE
FMTVARB  NI    FELSYMFG(R7),255-FELHEX-FELBIN-FELDEC-FELUNS
         OI    FELSYMFG(R7),FELBIT
         LA    R0,9
         MH    R0,FELSYMLN(,R7)    GET NINE TIMES DATA BYTE COUNT
         BCTR  R0,0                MINUS ONE
         STH   R0,FELDSPLN(,R7)    THIS IS NOW THE DISPLAY LENGTH
         B     FVLENCHK
FMTVARI  CLC   HW4,FELSYMLN(R7)    IS DATA ITEM LONGER THAN 4 BYTES?
         BL    DOMSGFV4            YES
         NI    FELSYMFG(R7),255-FELHEX-FELDEC-FELBIT-FELUNS
         OI    FELSYMFG(R7),FELBIN
         LH    R0,FELSYMLN(,R7)    GET DATA ELEMENT LENGTH
         SLL   R0,2                QUADRUPLE IT
         STH   R0,FELDSPLN(,R7)    THIS IS NOW THE DISPLAY LENGTH
         CLI   0(R14),C'U'         UNSIGNED REQUEST?
         BNE   FVLENCHK            NO
         OI    FELSYMFG(R7),FELUNS YES
FVLENCHK LA    R0,8                GET MAXIMUM SYMBOL NAME LENGTH
         LH    R15,FELDSPLN(,R7)   GET DISPLAY WIDTH
         SR    R0,R15              GET MAXIMUM POSSIBLE ENTENSION
         BNP   FILLSCR             NOT A PROBLEM ANYWAY
         SR    R14,R14
         LA    R15,FELSYMNM(R15,R7) POINT TO FIRST "LOST" NAME BYTE
FVDLENLP CLI   0(R15),C' '         TRAILING BLANK?
         BE    FVLENADD            YES, DON'T HAVE TO EXTEND WIDTH
         LA    R14,1(,R14)         NO, EXTEND DISPLAY WIDTH FOR NAME
         LA    R15,1(,R15)         POINT TO NEXT BYTE IN NAME
         BCT   R0,FVDLENLP
FVLENADD AH    R14,FELDSPLN(,R7)   GET NEW DISPLAY WIDTH
         STH   R14,FELDSPLN(,R7)   SAVE IT
         B     FILLSCR             REPAINT SCREEN
DOMSGFV1 MVC   MSG(MSGFV1L),MSGFV1 NO FORMAT CURRENTLY LOADED
         B     BELPRMPT
DOMSGFV4 MVC   MSG(MSGFV4L),MSGFV4 DATA ITEM TOO LONG FOR DATA TYPE
         B     BELPRMPT
         DROP  R5                  FMTVAR
MSGFV1   MESG  'NO FORMAT CURRENTLY LOADED'
MSGFV2   MESG  'SYMBOL ???????? NOT FOUND'
MSGFV3   MESG  'DATA TYPE ? SET FOR ????????'
MSGFV4   MESG  'DATA ITEM TOO LONG FOR DATA TYPE'
         SPACE
**********************************************************************
*                                                          *         *
*         OFFLOAD MEMBER CONTENTS TO SEQUENTIAL FILE       *  GP@P6  *
*                                                          *  02/90  *
**********************************************************************
         SPACE
         USING MEMRDWRT,R7
MEMRDWRT DS    0H                  READ AND WRITE MEMBER CONTENTS
         AIF   (NOT &ENV390).HFSMEM
         TM    $UCBAD,$HFSIO       SEARCHING AN HFS FILE?
         BO    MEMINOUT            YES, GO TO READ LOOP
.HFSMEM  ANOP
         TM    STATUS3,$3TTR       ARE ENTRIES IN TTR ORDER?
         BZ    MEMINOUT            NO, PROCESS AN ALIAS AS REAL MEMBER
         TM    BLDLINDC,X'80'      IS THIS MEMBER AN ALIAS?
         BO    EXIT00              YES, NO DATA AFTER ./ ALIAS
MEMINOUT BAS   R14,GET             GET A RECORD FROM THE MEMBER
         LTR   R2,R2               END-OF-FILE?
         BZ    EXIT00              YES, THIS MEMBER NOW OFFLOADED
         LA    R0,1
         A     R0,COUNT            INCREMENT RECORD COUNT
         ST    R0,COUNT
         TM    FINDSW2,FALL        IS "FIND ALL" ACTIVE?
         BO    MEMSCHFF            YES, THE SEARCH IS OVER
         TM    STATUS15,$153PT5    COUNTING RECORDS FOR STATISTICS?
         BO    MEMINOUT            YES, KEEP COUNTING
         TM    STATUS13,$13COMP    PROCESSING A COMPRESS REQUEST?
         BO    ALL2FB80            YES, ALWAYS USE REVLMOD FORMAT
         LR    R0,R2               NO, POINT TO THE RECORD
         TM    TSTRECFM,X'80'      FIXED LENGTH RECORDS?
         BO    GTOFFREC            YES
         TM    TSTRECFM,X'40'      VARIABLE LENGTH RECORDS?
         BO    GTOFVREC            YES
ALL2FB80 TM    DCBRECFM,X'C0'      POSSIBLY A PROGRAM LIBRARY?
         BNO   OVNOTEOK            NO
         TM    BLDLINDC,X'40'      MORE THAN ONE TTR IN USER DATA?
         BNO   OVNOTEOK            NO
         TM    BLDLATR1,BLDLOVLY   SEGMENT OVERLAY PROGRAM?
         BNO   OVNOTEOK            NO
*   NEED TO REMEMBER THE TTR OF EACH BLOCK OF A SEGMENT OVERLAY PROGRAM
         STM   R14,R1,SBASAVE      YES, SAVE SOME REGISTERS
         LA    R14,@ADDR           POINT TO CHAIN ORIGIN
OVNOTELP ICM   R1,15,0(R14)        POINT TO NEXT CHAIN ELEMENT
         BZ    OVNOTEDO            FOUND THE END OF THE CHAIN
         LR    R14,R1              POINT TO THE THIS ELEMENT
         B     OVNOTELP            KEEP FOLLOWING THE CHAIN
*   A GOOD SPOT TO PUT THE MEMRDWRT EXIT CODE...
OVLYEXIT ICM   R1,15,@ADDR         GET CHAIN ELEMENT ADDRESS
         BZ    EXIT00              CHAIN ALL FREED
         MVC   @ADDR,0(R1)         SAVE ADDRESS OF NEXT ELEMENT
         LA    R0,8                GET CHAINED ELEMENT STORAGE SIZE
         FREEMAIN RU,LV=(0),A=(1)  FREE THIS ELEMENT
         B     OVLYEXIT            CONTINUE TO FREE WHOLE CHAIN
*   BACK TO PROCESSING THE BLOCK FROM A SEGMENT OVERLAY PROGRAM
OVNOTEDO LA    R0,8                GET CHAINED ELEMENT STORAGE SIZE
         GETMAIN RC,LV=(0),LOC=(31,64)
         LTR   R15,R15             SUCCESS?
         BNZ   OVNOTEEX            NO, PRETEND NOT TO CARE
         ST    R15,0(,R1)          NEW ELEMENT IS NEW END OF CHAIN
         ST    R1,0(,R14)          ADD ELEMENT TO CHAIN
         MVC   4(4,R1),TTR         SAVE THE TTR OF THIS BLOCK
OVNOTEEX LM    R14,R1,SBASAVE      RESTORE WORK REGISTERS
*   WOULD THIS, BY ANY CHANCE, BE THE ACTUAL NOTE LIST?
         CLC   BLDLTTRN,TTR        SECOND TTR MATCH?
         BNE   OVNOTEOK            NO
         SRL   R1,2                YES, GET TTR COUNT IN BLOCK
         LR    R15,R2              POINT TO BLOCK
OVLISTLP SR    R5,R5               RESET BLOCK NUMBER
         LA    R14,@ADDR           POINT TO CHAIN ORIGIN
OVBLOKLP ICM   R14,15,0(R14)       POINT TO NEXT CHAINED ELEMENT
         BZ    OVLISTNX            DID NOT FIND THAT ONE
         LA    R5,1(,R5)           INCREMENT BLOCK NUMBER
         CLC   0(4,R15),4(R14)     MATCHING TTR?
         BNE   OVBLOKLP            NO, KEEP LOOKING
         ST    R5,0(,R15)          YES, CONVERT TTR TO BLOCK NUMBER
OVLISTNX LA    R15,4(,R15)         POINT TO NEXT TTR IN NOTE LIST
         BCT   R1,OVLISTLP         GO CONVERT NEXT TTR IN LIST
         XASAM24
         L     R14,CALLPARM+4      POINT TO OUTPUT BUFFER
         MVI   0(R14),C' '
         MVC   1(159,R14),0(R14)   BLANK IT (160 LIMIT EX REVOFFLD)
         MVC   0(11,R14),=C'./ NOTELIST'   FLAG TTRS NEEDED ON RELOAD
         L     R1,CALLPARM         GET THE OUTPUT DCB ADDRESS
         LR    R0,R14              POINT TO THE OUTPUT RECORD
         PUT   (1),(0)             PUT IT OUT TO SEQUENTIAL FILE
         XASAM31
         TM    STATUS,STABEND      WAS A DCB ABEND ENCOUNTERED?
         BO    EXIT00              YES, CEASE OFFLOAD OPERATIONS
         LM    R14,R1,SBASAVE      RESTORE WORK REGISTERS
*   END OF EXTRA LOGIC TO HANDLE A SEGMENT OVERLAY PROGRAM
OVNOTEOK L     R14,CALLPARM+4      POINT TO OUTPUT BUFFER
         ST    R1,0(,R14)          SAVE THE LENGTH OF THIS BLOCK
         LR    R5,R1               SET THE REMAINING LENGTH
         LA    R14,4(,R14)         SET OUTPUT BUFFER POINTER
         LA    R1,4                GET LENGTH OF OUTPUT RECORD USED
         LNR   R1,R1
         A     R1,CALLPARM+8       GET LENGTH OF OUTPUT RECORD LEFT
         B     PGM1ST76
MEMSCHFF MVI   CALLPARM,X'FF'      SET "SEARCH MATCH FOUND" FLAG
         B     EXIT00              STOP SEARCH AND RETURN TO REVSRCH
PGMNXT80 L     R1,CALLPARM+8       GET CAPACITY OF OUTPUT RECORD
         L     R14,CALLPARM+4      POINT TO OUTPUT BUFFER
PGM1ST76 CR    R5,R1               WILL RECORD FIT IN THIS CARD?
         BH    PGMCHUNK            NO, FILL UP ANOTHER CARD IMAGE
         LR    R1,R5               YES, GET LENGTH OF LAST OF DATA
         MVI   0(R14),C' '         (REVOFFLD SET LIMIT OF 160)
         MVC   1(159,R14),0(R14)   BLANK RESIDUAL DATA
PGMCHUNK SR    R5,R1               UPDATE REMAINING BYTE COUNT
         BCTR  R1,0                DECREMENT FOR EXECUTE
         EX    R1,FIXSMALL         COPY PIECE OF PROGRAM
         LA    R2,1(R1,R2)         POINT PAST COPIED DATA
         XASAM24
         L     R1,CALLPARM         GET THE OUTPUT DCB ADDRESS
         L     R0,CALLPARM+4       POINT TO THE EIGHTY BYTE RECORD
         PUT   (1),(0)             PUT IT OUT TO SEQUENTIAL FILE
         XASAM31
         TM    STATUS,STABEND      WAS A DCB ABEND ENCOUNTERED?
         BO    EXIT00              YES, CEASE OFFLOAD OPERATIONS
         LTR   R5,R5               ANY DATA REMAINING FOR THIS BLOCK?
         BP    PGMNXT80            YES
         TM    BLDLINDC,X'60'      ANY TTR(S) IN USER DATA?
         BZ    MEMINOUT            NO, GET NEXT BLOCK
         L     R0,TTR              GET CURRENT TTR
         TM    STATUS14,$14BIG     USING 32-BIT NOTE/POINT VALUES?
         BNO   CHKNOTE1            NO
         SLL   R0,8                YES, CONVERT TTTR TO TTR0
CHKNOTE1 ST    R0,DOUBLE           SAVE IT
         CLC   BLDLTTRT,DOUBLE     FIRST TTR MATCH?
         BNE   CHKNOTE2            NO
         XASAM24
         L     R14,CALLPARM+4      POINT TO OUTPUT BUFFER
         MVI   0(R14),C' '
         MVC   1(159,R14),0(R14)   BLANK IT (160 LIMIT EX REVOFFLD)
         MVC   0(8,R14),=C'./ NOTE1'
         L     R1,CALLPARM         GET THE OUTPUT DCB ADDRESS
         LR    R0,R14              POINT TO THE OUTPUT RECORD
         PUT   (1),(0)             PUT IT OUT TO SEQUENTIAL FILE
         XASAM31
         TM    STATUS,STABEND      WAS A DCB ABEND ENCOUNTERED?
         BO    EXIT00              YES, CEASE OFFLOAD OPERATIONS
CHKNOTE2 TM    BLDLINDC,X'40'      MORE THAN ONE TTR IN USER DATA?
         BZ    MEMINOUT            NO, GET NEXT BLOCK
         CLC   BLDLTTRN,DOUBLE     SECOND TTR MATCH?
         BNE   MEMINOUT            NO
         XASAM24
         L     R14,CALLPARM+4      POINT TO EIGHTY BYTE OUTPUT BUFFER
         MVI   0(R14),C' '
         MVC   1(159,R14),0(R14)   BLANK IT (160 LIMIT EX REVOFFLD)
         MVC   0(8,R14),=C'./ NOTE2'
         L     R1,CALLPARM         GET THE OUTPUT DCB ADDRESS
         LR    R0,R14              POINT TO THE OUTPUT RECORD
         PUT   (1),(0)             PUT IT OUT TO SEQUENTIAL FILE
         XASAM31
         TM    STATUS,STABEND      WAS A DCB ABEND ENCOUNTERED?
         BO    EXIT00              YES, CEASE OFFLOAD OPERATIONS
         B     MEMINOUT            GET NEXT BLOCK
GTOFVREC LA    R2,4(,R2)           POINT PAST RDW
GTOFFREC L     R1,CALLPARM         GET THE OUTPUT DCB ADDRESS
         TM    STATUS3,$3UPDTE     IEBUPDTE CONTROL CARDS TO BE MADE?
         BZ    NOTUPDTE            NO, DO NOT EDIT DATA RECORDS
         CLC   0(2,R2),=C'./'      IEBUPDTE CONTROL CARD?
         BNE   NOTUPDTE            NO
         MVC   0(2,R2),=C'><'      PROBABLY, BETTER CHANGE IT
NOTUPDTE DS    0H
         XASAM24
         TM    TSTRECFM,X'80'      FIXED LENGTH RECORDS?
         BZ    PTOFFREC            NO, MUST BE VARIABLE LENGTH SO OKAY
         LA    R15,80              YES, TRY TO AGREE WITH IEBUPDTE
         CH    R15,DCBLRECL        FIXED RECORD LENGTH LESS THAN 80?
         BNH   PTOFFREC            NO, PROCEED
         LH    R15,DCBLRECL        YES, LOAD IT
         BCTR  R15,0               DECREMENT FOR EXECUTE
         L     R14,CALLPARM+4      POINT TO EIGHTY BLANKS
         EX    R15,FIXSMALL        CREATE OUTPUT CARD IMAGE
         LR    R0,R14              POINT TO THE EIGHTY BYTE RECORD
PTOFFREC PUT   (1),(0)             PUT IT OUT TO SEQUENTIAL FILE
         XASAM31
         TM    STATUS,STABEND      WAS A DCB ABEND ENCOUNTERED?
         BO    EXIT00              YES, CEASE OFFLOAD OPERATIONS
         B     MEMINOUT            GO BACK FOR ANOTHER
FIXSMALL MVC   0(0,R14),0(R2)      <<< EXECUTED >>>
         DROP  R7                  MEMRDWRT
         SPACE
         DC    0D'0'
         LTORG
         DC    0H'0'
         SPACE
**********************************************************************
*                                                          *         *
*         COMMAND                                          *  GP@P6  *
*                                                          *  01/93  *
**********************************************************************
         SPACE
COMMAND  DS    0H
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    MEMBERP             YES, SAME AS 'MEMBER'
         B     CMDINVLD            NO, COMMAND NOT ALLOWED
         SPACE
**********************************************************************
*                                                          *         *
*         FULL  -  ALLOW FULL EBCDIC TRANSLATION           *  GP@P6  *
*                                                          *  10/87  *
**********************************************************************
         SPACE
         USING FULL,R5
FULL     LR    R5,R15              LOCAL BASE REGISTER
         LA    R15,OPD2            SET FOR ERRMANY
         TM    OPD2+6,PRESENT      ARE THERE TOO MANY OPERANDS?
         BO    ERRMANY             YES
         TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BO    FULLON              YES, CHECK IT OUT
         XC    PERIODS(1),NONDISP  NO, FLIP-FLOP
FULLQM   CLI   PERIODS,0           IS IT NOW ON?
         BE    FULL143             YES
         B     FULL144             NO
FULLON   L     R15,KEYPRSAD        YES, POINT TO KEYWORD PARSER
         SR    R1,R1               REQUEST DEFAULT TABLE
         BASR  R14,R15             LOOK FOR KEYWORDS
         CLI   OPD1+7,3            IS IT '?'?
         BE    FULLQM              YES, GO SHOW THE SETTING
         CLI   OPD1+7,1            IS IT 'ON'?
         BNE   FULLOFF             NO, TRY OFF
         MVI   PERIODS,X'00'       YES
FULL143  MVI   MSG,143             SETTING NOW ON
         B     FILLSCR
FULLOFF  CLI   OPD1+7,2            IS IT 'OFF'?
         BNE   ERRINV              NO, INVALID OPERAND
         MVC   PERIODS(1),NONDISP  YES
FULL144  MVI   MSG,144             SETTING NOW OFF
         B     FILLSCR
         DROP  R5                  FULL
         SPACE
**********************************************************************
*                                                          *         *
*         DISPLAY - SHOW APL OR TN/T11 CHARACTERS          *  GP@P6  *
*                                                          *  05/92  *
**********************************************************************
         SPACE
         USING DISPCMD,R5
DISPCMD  LR    R5,R15              LOCAL BASE REGISTER
         LA    R15,OPD2            SET FOR ERRMANY
         TM    OPD2+6,PRESENT      ARE THERE TOO MANY OPERANDS?
         BO    ERRMANY             YES
         TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BO    DISPTHIS            YES, CHECK IT OUT
         XI    PROFDISP,C'T'-C'A'  NO, FLIP-FLOP
         OI    STATUS,STPROF       PROFILE REWRITE NOW REQUIRED
         B     DISPDISP
DISPTHIS L     R14,OPD1            POINT TO OPERAND
         CLI   OPD1+5,1            IS LENGTH 1?
         BE    DISPNDSP            YES, SET NON-DISPLAY CODE POINT
         CLI   0(R14),C'?'         DISPLAY WITHOUT CHANGE?
         BE    DISPDISP            YES
         CLI   0(R14),C'A'         APL REQUEST?
         BE    DISPOKAY            YES
         CLI   0(R14),C'T'         TN/T11 PRINT TRAIN REQUEST?
         BNE   ERRINV              NO, INVALID OPERAND
DISPOKAY CLC   PROFDISP(1),0(R14)  ANY CHANGE IN PROFILE?
         BE    DISPDISP            NO
         MVC   PROFDISP(1),0(R14)  SET REQUESTED DISPLAY CHARACTERS
         OI    STATUS,STPROF       PROFILE REWRITE NOW REQUIRED
         B     DISPDISP
DISPNDSP CLI   0(R14),X'FF'        INVALID DISPLAY CHARACTER?
         BE    ERRINV              YES, INVALID OPERAND
         CLI   0(R14),C' '         INVALID DISPLAY CHARACTER?
         BL    ERRINV              YES, INVALID OPERAND
         CLC   NONDISP,0(R14)      ANY CHANGE?
         BE    DISPDISP            NO
         TM    OPD1+6,QUOTED       IS OPERAND QUOTED?
         BO    DISPQTOK            YES, MUST BE CHARACTER TO USE
         CLI   0(R14),C'A'         APL REQUEST?
         BE    DISPOKAY            YES
         CLI   0(R14),C'T'         TN/T11 PRINT TRAIN REQUEST?
         BE    DISPOKAY            YES
         CLI   0(R14),C'?'         DISPLAY WITHOUT CHANGE?
         BE    DISPDISP            YES
DISPQTOK MVC   NONDISP,0(R14)      UPDATE NON-DISPLAY REPRESENTATIVE
         MVC   PERIODS(1),NONDISP  YES
         MVC   PERIODS+1(63),PERIODS
         MVC   PERIODS+255(1),NONDISP
         OI    STATUS,STPROF       PROFILE REWRITE NOW REQUIRED
DISPDISP MVC   MSG+2(18),DISPTXT1
         MVC   MSG+12(1),NONDISP   SHOW NON-DISPLAY INDICATOR
         LA    R0,18
         STH   R0,MSG
         CLI   PROFDISP,C'T'       USING TEXT EBCDIC TRANSLATION?
         BNE   DISPASCI            NO
         MVC   MSG+17(4),DISPTXT2  YES
         MVI   MSG+1,19
DISPASCI TM    MODE,MD_ASCII       TRANSLATING ASCII?
         BNO   FILLSCR             NO
         MVC   MSG+17(8),DISPTXT3
         MVI   MSG+1,23
         B     FILLSCR
         DROP  R5                  DISPCMD
DISPTXT1 DC    CL18'DISPLAY: ''.'' && APL'
DISPTXT2 DC    CL4'TEXT'
DISPTXT3 DC    CL8'ASCII ON'
         SPACE
**********************************************************************
*                                                          *         *
*         PICDATA - WRITE PICTURE "SOURCE CODE"            *  GP@P6  *
*                                                          *  12/99  *
**********************************************************************
         SPACE
         USING PICDATA,R5
PICDATA  LR    R5,R15              LOCAL BASE REGISTER
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    CMDINVLD            YES, COMMAND NOT ALLOWED
         TM    STATUS14,$14AS      BROWSING ADDRESS SPACE?
         BO    CMDINVLD            YES, COMMAND NOT ALLOWED
         OC    HSEACTIV,HSEACTIV   IS ANY PICTURE DATA PRESENT?
         BZ    CMDINVLD            NO, INVALID REQUEST
         LA    R15,OPD1            SET FOR ERRMANY
         TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BO    ERRMANY             YES, TOO MANY
         NI    PICFLAGS,255-PICOK  PICTURE WILL NEED TO BE REDRAWN
         NI    STATUS7,255-$7TACK  ENSURE APPEND FLAG IS RESET
         LA    R1,MSG+64           POINT TO OAIA
         L     R15,ALCOADDR        POINT TO ALLOCATION ROUTINE
         BASR  R14,R15             ALLOCATE OUTPUT FILE
         LTR   R15,R15             PROCEED WITH OUTPUT?
         BNZ   PROMPT              NO, REQUEST CANCELLED
         NI    PICFLAGS,PICBIG+PICNBW   FORCE REDRAW
         OI    PICFLAGS,PICSRC     FLAG REQUEST
         B     FILLSCR
         DROP  R5                  PICDATA
         SPACE
**********************************************************************
*                                                          *         *
*         ASCII - TRANSLATE ASCII DATA FOR DISPLAY         *  GP@P6  *
*                                                          *  08/87  *
**********************************************************************
         SPACE
         USING ASCII,R5
ASCII    LR    R5,R15              LOCAL BASE REGISTER
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    CMDINVLD            YES, COMMAND NOT ALLOWED
         LA    R15,OPD2            SET FOR ERRMANY
         TM    OPD2+6,PRESENT      ARE THERE TOO MANY OPERANDS?
         BO    ERRMANY             YES
         TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BO    ASCIION             YES, CHECK IT OUT
         XI    MODE,MD_ASCII       NO, FLIP-FLOP
ASCIIQM  TM    MODE,MD_ASCII       IS IT NOW ON?
         BO    ASCII143            YES
         B     ASCII144            NO
ASCIION  L     R15,KEYPRSAD        YES, POINT TO KEYWORD PARSER
         SR    R1,R1               REQUEST DEFAULT TABLE
         BASR  R14,R15             LOOK FOR KEYWORDS
         CLI   OPD1+7,3            IS IT '?'?
         BE    ASCIIQM             YES, GO SHOW THE SETTING
         CLI   OPD1+7,1            IS IT 'ON'?
         BNE   ASCIIOFF            NO, TRY OFF
         OI    MODE,MD_ASCII       YES
ASCII143 MVI   MSG,143             SETTING NOW ON
         B     ASCIIXIT
ASCIIOFF CLI   OPD1+7,2            IS IT 'OFF'?
         BNE   ERRINV              NO, INVALID OPERAND
         NI    MODE,255-MD_ASCII   YES
ASCII144 MVI   MSG,144             SETTING NOW OFF
ASCIIXIT XI    STRINGL,X'FF'       INVALIDATE SEARCH STRING
         XI    STRING2L,X'F0'      INVALIDATE REPLACEMENT STRING
         B     FILLSCR
         DROP  R5                  ASCII
         SPACE
**********************************************************************
*                                                          *         *
*         FMTPRT - CONTROL PRINT OUTPUT FORMATTING         *  R46.2  *
*                                                          * JAN2016 *
**********************************************************************
         SPACE
         USING FMTPRT,R5
FMTPRT   LR    R5,R15              LOCAL BASE REGISTER
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    CMDINVLD            YES, COMMAND NOT ALLOWED
         LA    R15,OPD2            SET FOR ERRMANY
         TM    OPD2+6,PRESENT      ARE THERE TOO MANY OPERANDS?
         BO    ERRMANY             YES
         TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BO    FMTPRTON            YES, CHECK IT OUT
         XI    STATUS12,$12PRT     NO, FLIP-FLOP
FMTPRTQM TM    STATUS12,$12PRT     IS IT NOW ON?
         BO    FMTPRTM1            YES
         B     FMTPRTM0            NO
FMTPRTON L     R15,KEYPRSAD        YES, POINT TO KEYWORD PARSER
         SR    R1,R1               REQUEST DEFAULT TABLE
         BASR  R14,R15             LOOK FOR KEYWORDS
         CLI   OPD1+7,3            IS IT '?'?
         BE    FMTPRTQM            YES, GO SHOW THE SETTING
         CLI   OPD1+7,1            IS IT 'ON'?
         BNE   FMTPRTNO            NO, TRY OFF
         OI    STATUS12,$12PRT     YES
FMTPRTM1 MVI   MSG,143             SETTING NOW ON
         B     FILLSCR
FMTPRTNO CLI   OPD1+7,2            IS IT 'OFF'?
         BNE   ERRINV              NO, INVALID OPERAND
         NI    STATUS12,255-$12PRT YES
FMTPRTM0 MVI   MSG,144             SETTING NOW OFF
         B     FILLSCR
         DROP  R5                  FMTPRT
         SPACE
**********************************************************************
*                                                          *         *
*         SUB  -  ABBREVIATION FOR SUBCOM OR SUBMIT        *  GP@FT  *
*                                                          *  01/93  *
**********************************************************************
         SPACE
         USING SUB,R5
SUB      LR    R5,R15              LOCAL BASE REGISTER
         LA    R15,SUBMIT          POINT TO SUBMIT SUBCOMMAND CODE
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BZR   R15                 NO, PERFORM 'SUBMIT'
         LA    R15,SUBCOMP         YES, PERFORM 'SUBCOM'
         DROP  R5                  SUB
         SPACE
**********************************************************************
*                                                          *         *
*         SUBCOM  -  SPECIFY NEW SUBCOMMAND FOR HELP       *  GP@FT  *
*                                                          *  01/93  *
**********************************************************************
         SPACE
         USING SUBCOMP,R5
SUBCOMP  LR    R5,R15              LOCAL BASE REGISTER
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BZ    CMDINVLD            NO, COMMAND NOT ALLOWED
         LA    R15,OPD2            SET FOR ERRMANY
         TM    OPD2+6,PRESENT      ARE THERE TOO MANY OPERANDS?
         BO    ERRMANY             YES
         TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BO    SUBCOMOP            YES, GO CHECK FOR SUBCOMMAND
         CLC   $SUBCOM,BLANKS      NO, ANY PREVIOUS SUBCOMMAND?
         BE    ERRMISS             NO, ERROR
         B     SUBCOMLK            YES, GO LOOK FOR IT AGAIN
SUBCOMOP TM    OPD1+6,QUOTED       IS OPERAND QUOTED?
         BO    ERRINV              YES, INVALID
         LH    R1,OPD1+4           GET LENGTH
         LTR   R1,R1               IS IT NULL STRING?
         BZ    ERRMISS             YES, ERROR
         CH    R1,HW8              IS LENGTH MORE THAN 8?
         BH    ERRINV              YES, ERROR
         MVC   $SUBCOM,BLANKS
         L     R14,OPD1            GET ADDRESS OF DATA
         BCTR  R1,0                GET SUBCOMMAND NAME LENGTH CODE
         EX    R1,SUBCOMLD         MOVE IN THE SUBCOMMAND NAME
         STH   R1,$SUBLEN          SAVE IT FOR SEARCH PROCESSING
SUBCOMLK OI    STATUS6,HELNEWS     LOOK FOR NEW SUBCOMMAND
         MVI   FINDSW,FACT+FTOP    ACTIVATE FIND PROCESSING
         B     FINDTOP             START SEARCHING FROM THE TOP
SUBCOMLD MVC   $SUBCOM(0),0(R14)   <<< EXECUTED >>>
         DROP  R5                  SUBCOMP
         SPACE
**********************************************************************
*                                                          *         *
*         SUBMIT                                           *  GP@P6  *
*                                                          *  09/91  *
**********************************************************************
         SPACE
         USING SUBMIT,R5
SUBMIT   LR    R5,R15              LOCAL BASE REGISTER
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    CMDINVLD            YES, COMMAND NOT ALLOWED
         TM    STATUS14,$14AS      BROWSING ADDRESS SPACE?
         BO    CMDINVLD            YES, COMMAND NOT ALLOWED
         TM    STATUS8,$8ZIP       PROCESSING A ZIP FILE?
         BNZ   CMDINVLD            YES, COMMAND NOT ALLOWED
*                                  SEQUENTIAL OR PARTITIONED?
         TM    DS1DSORG,DS1DSGPS+DS1DSGPO
         BNM   CMDINVLD            NO, INVALID DATA SET TYPE
         CLC   HW80,DS1LRECL       IS RECORD LENGTH 80?
         BNE   CMDINVLD            NO, INVALID DATA SET TYPE
         TM    TSTRECFM,X'80'      FIXED LENGTH RECORDS?
         BZ    CMDINVLD            NO, INVALID DATA SET TYPE
*         THE ABOVE THREE TESTS REPRESENT NO LOSS OF FUNCTION
*               BECAUSE TSO SUBMIT ALSO MAKES THESE TESTS.
         LA    R15,OPD1            SET FOR ERRMANY
         TM    OPD1+6,PRESENT      TOO MANY OPERANDS?
         BO    ERRMANY             YES
         L     R1,OPD0             POINT TO COMMAND TEXT
         MVC   DOUBLE,0(R1)        SAVE IT
         MVI   CMDAREA,C' '
         MVC   CMDAREA+1(L'CMDAREA-1),CMDAREA
         MVC   CMDAREA(12),SUBTSO  LOAD COMMAND TEXT
         CLI   DOUBLE+1,C'U'       'SUBMIT' OR 'SUB'?
         BE    SUBMITCM            YES, HAVE CORRECT COMMAND
         MVC   CMDAREA+4(6),SUBREVSB
SUBMITCM MVC   CMDAREA+12(44),$DSNAME+2
         LH    R1,$DSNAME          GET LENGTH OF DATA SET NAME
         LA    R1,CMDAREA+12(R1)   POINT PAST DATA SET NAME
         MVI   0(R1),QUOTE         SUPPLY TRAILING QUOTE
         LR    R14,R1              POINT TO TRAILING QUOTE
         LA    R0,CMDAREA          POINT TO GENERATED COMMAND
         SR    R14,R0              GET COMMAND LENGTH CODE
         TM    DSORG,DS1DSGPO      IS DSORG PO?
         BZ    SUBMITIT            NO, SUBMIT SEQUENTIAL DATA SET
         MVI   0(R1),C'('          YES, SUPPLY OPEN BRACKET
         MVC   1(8,R1),$MEMBER     SUPPLY MEMBER NAME
         MVI   9(R1),C')'          SUPPLY CLOSE BRACKET
         MVI   10(R1),QUOTE        SUPPLY TRAILING QUOTE
         LA    R1,8(,R1)           POINT TO LAST BYTE OF MEMBER NAME
         LA    R14,10(,R14)        ADJUST LENGTH CODE
SUBMITLP CLI   0(R1),C' '          TRAILING BLANK?
         BNE   SUBMITIT            NO, SUBMIT THE PDS MEMBER
         MVC   0(3,R1),1(R1)       YES, SHUFFLE BRACKET, QUOTE + BLANK
         BCTR  R1,0                POINT TO NEW LAST MEMBER NAME BYTE
         BCT   R14,SUBMITLP        ADJUST LENGTH CODE AND RE-CHECK
SUBMITIT ST    R14,CMDLEN          SAVE COMMAND STRING LENGTH CODE
         OI    STATUS4,$4CMD       TELL REVCOMM TO SKIP TERMINAL I/O
         AIF   (&ENVESA).SUBDD1
         L     R1,PSATOLD          POINT TO THE CURRENT TCB
         L     R1,TCBJSCB-TCB(,R1) POINT TO THE JSCB
         USING IEZJSCB,R1
         LH    R0,JSCDDNUM         GET THE NUMBER OF ALLOCATIONS
.SUBDD1  ANOP
         L     R15,IOCOMADR        NO PARAMETER LIST PASSED
         BASR  R14,R15             PROCESS COMMAND STRING
         AIF   (&ENVESA).SUBDD2
         CH    R0,JSCDDNUM         ANY MORE ALLOCATIONS?
         BNL   FILLSCR             NO, GO REPAINT THE SCREEN
         LH    R0,JSCDDNNO         YES, GET THE LAST DDNAME NUMBER
         DROP  R1                  IEZJSCB
         XC    MYDAPB,MYDAPB
         MVI   DA18CD+1,X'18'
         MVC   DA18DDN(4),SYS0     DDNAME
         BCTR  R0,0
         CVD   R0,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  DA18DDN+3(5),DOUBLE+5(3)
         MVC   DA18MNM,BLANKS      MEMBER NAME
         MVC   DA18SCLS,BLANKS     SYSOUT CLASS IS 2-BYTE FIELD
         XC    MYECB,MYECB
         XASAM24
         LA    R1,MYDAPL
         L     R15,CVTPTR(,0)      CVT
         L     R15,CVTDAIR-CVT(,R15)
         BASR  R14,R15             CALL IKJDAIR TO FREE SUBMITTED D/S
         XASAM31
.SUBDD2  ANOP
         B     FILLSCR             REPAINT THE SCREEN
         DROP  R5                  SUBMIT
         SPACE
SUBTSO   DC    CL12'TSO SUBMIT '''
SUBREVSB DC    CL6'%REVSB'
SYS0     DC    CL4'SYS0'
         SPACE
**********************************************************************
*                                                          *         *
*         DEFINE A FILE BROWSE LABEL                       *  R46.5  *
*                                                          * MAY2016 *
**********************************************************************
         SPACE
         USING DOTLABEL,R5
DOTLABEL TM    STATUS14,$14AS      BROWSING ADDRESS SPACE?
         BO    CMDINVLD            YES, COMMAND NOT ALLOWED (USE EQ)
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    CMDINVLD            YES, CAN'T DO IT (HSEACTIV IN USE)
         ICM   R0,15,PICSTGSZ      ANY PICTURE STUFF?
         BNZ   CMDINVLD            YES, CAN'T DO IT (HSEACTIV IN USE)
         LR    R5,R15              SET LOCAL BASE
         TM    OPD1+6,PRESENT      A SINGLE WORD SPECIFIED?
         BO    DOTBAD              NO, INVALID LABEL
         CLC   OPD0+4(2),HW8       IS THE LENGTH TOO LONG?
         BH    DOTBAD              NO, INVALID LABEL
         LH    R1,OPD0+4           GET LABEL LENGTH
         CH    R1,HW1              JUST THE PERIOD?
         BNH   CMDINVLD            YES, NOT A VALID COMMAND
         MVC   DOUBLE,BLANKS
         L     R14,OPD0            POINT TO LABEL
         BCTR  R1,0                DECREMENT FOR EXECUTE
         EX    R1,CPYSYMNM         EXTRACT THE LABEL
         LA    R1,HSEACTIV         POINT TO CHAIN ANCHOR
DOTLOOP  LR    R2,R1               SAVE PREVIOUS ADDRESS
         ICM   R1,15,0(R1)         POINT TO NEXT LABEL ELEMENT
         BZ    DOTNEW              END OF CHAIN SO MAKE A NEW ELEMENT
         CLC   8(8,R1),DOUBLE      IS THIS ELEMENT FOR THE SAME LABEL?
         BNE   DOTLOOP             NO, KEEP LOOKING
         B     DOTSET#             YES, GO UPDATE ITS LOCATION
DOTNEW   LA    R0,24               GET THE SIZE OF A LABEL ELEMENT
         GETMAIN RC,LV=(0),LOC=(31,64)
         LTR   R15,R15             STORAGE ACQUIRED?
         BNZ   EQFAIL              NO
         XC    0(24,R1),0(R1)      CLEAR THE NEW STORAGE
         MVI   7(R1),24            SET THE STORAGE SIZE FOR FREEHSE
         ST    R1,0(,R2)           ADD THE ELEMENT TO THE CHAIN
         MVC   8(8,R1),DOUBLE      LOAD THE LABEL
DOTSET#  L     R2,HOLDTOP          POINT TO HOLD AREA DIRECTORY
         MVC   16(4,R1),DIRNUM(R2) LOAD THE LABELLED RECORD NUMBER
         MVC   MSG+2(6),DOT$LBL    GENERATE ASSIGNMENT MESSAGE
         XC    MSG+3(4),BLANKS
         MVC   MSG+8(8),DOUBLE
         LH    R1,OPD0+4           GET LABEL LENGTH
         LA    R1,MSG+8(R1)        POINT PAST TEXT SO FAR
         MVC   0(9,R1),DOT$ASN
         XC    1(8,R1),BLANKS
         LA    R0,MSG+2-9
         SR    R1,R0
         STH   R1,MSG              SET MESSAGE LENGTH
         B     PROMPT
DOT$LBL  DC    CL6'LABEL '
DOT$ASN  DC    CL9' ASSIGNED'
         DC    0H'0'
DOTBAD   MVI   MSG,225             INVALID LABEL
         CLI   REPLY,ENTERAID      ENTER AID PRESENT?
         BNE   PROMPT              NO, WHOLE COMMAND NOT RECALLABLE
         OI    STATUS14,$14RCL     REDISPLAY THE COMMAND
         B     PROMPT
         SPACE
**********************************************************************
*                                                          *         *
*         EQUATE SYMBOL NAME TO STORAGE ADDRESS            *  R44.0  *
*                                                          * AUG2013 *
**********************************************************************
         SPACE
*      SYMBOLIC EQUATES ARE KEPT IN DEDICATED 4096-BYTE PAGES.
*      THE FIRST PAGE IS POINTED TO BY 'SYMCHAIN'.
*      THE FIRST WORD OF EACH PAGE POINTS TO THE NEXT PAGE, IF ANY.
*      THE SECOND WORD OF EACH PAGE CONTAINS 4096.
*      THIS ORGANIZATION OF THE FIRST TWO WORDS IS REQUIRED BY FREEHSE.
*      THE FIRST 16-BYTE ENTRY BEGINS AT OFFSET 16 DECIMAL.
*      ENTRY FORMAT IS:
*        +0 - 8-BYTE SYMBOL NAME - 1ST BYTE NULL FOR UNUSED ENTRY
*        +8 - SYMBOL ADDRESS
*        +C - SYMBOL ADDRESS ROUNDED DOWN TO QUADWORD BOUNDARY
         SPACE
         USING EQUATE,R5
EQUATE   TM    STATUS14,$14AS      BROWSING ADDRESS SPACE?
         BNO   CMDINVLD            NO, COMMAND NOT ALLOWED
         LR    R5,R15              SET LOCAL BASE
         LA    R15,OPD3            SET FOR ERRMANY
         TM    OPD3+6,PRESENT      TOO MANY OPERANDS?
         BO    ERRMANY             YES
         TM    OPD2+6,PRESENT      ENOUGH OPERANDS?
         BNO   ERRMISS             NO
         TM    OPD2+6,QUOTED       IS ADDRESS OPERAND QUOTED?
         BO    ERRINV              YES, INVALID
         LH    R1,OPD1+4           GET LENGTH OF FIRST OPERAND
         LTR   R1,R1               NULL STRING?
         BNP   EQNAMBAD            YES, INVALID
         CH    R1,HW8              TOO LONG?
         BH    EQNAMBAD            YES, INVALID
         L     R14,OPD1            POINT TO THE FIRST OPERAND
         CLI   0(R14),C'0'         REJECT INVALID CHARACTERS
         BNL   EQNAMBAD
EQNAMCHK CLI   0(R14),C' '
         BE    EQNAMBAD
         CLI   0(R14),C'.'
         BE    EQNAMBAD
         CLI   0(R14),C'%'
         BE    EQNAMBAD
         CLI   0(R14),C'?'
         BE    EQNAMBAD
         CLI   0(R14),C'+'
         BE    EQNAMBAD
         CLI   0(R14),C'-'
         BE    EQNAMBAD
         LA    R14,1(,R14)         POINT TO NEXT CHARACTER
         BCT   R1,EQNAMCHK
         LA    R1,OPD2             POINT TO ADDRESS OPERAND DESCRIPTOR
         L     R15,RESOLVEP        POINT TO ADDRESS RESOLUTION ROUTINE
         BASR  R14,R15             GET THE SPECIFIED ADDRESS
         TM    STATUS7,$7BELL      ADDRESSING ERROR?
         BO    PROMPT              YES, CANNOT PERFORM EQUATE
         MVC   DOUBLE,BLANKS
         LH    R1,OPD1+4           GET SYMBOL NAME LENGTH
         L     R14,OPD1            POINT TO SYMBOL NAME
         BCTR  R1,0                DECREMENT FOR EXECUTE
         EX    R1,CPYSYMNM         EXTRACT THE SYMBOL NAME
         LA    R2,HSEACTIV         POINT TO CHAIN ANCHOR
EQPAGE   ICM   R1,15,0(R2)         POINT TO NEXT PAGE
         BNZ   EQSRCH              GO SEARCH THE PAGE
         GETMAIN RC,LV=4096,LOC=(31,64),BNDRY=PAGE
         LTR   R15,R15             PAGE AVAILABLE?
         BNZ   EQFAIL              NO
         XC    0(256,R1),0(R1)     TO BE SURE, TO BE SURE
         MVC   6(2,R1),HW4096      SET THE STORAGE SIZE INDICATOR
         ST    R1,0(,R2)           ADD NEW PAGE TO THE CHAIN
         ST    R1,LASTSYM@         PREPARE LAST USED ADDRESS
EQSRCH   LR    R2,R1               POINT TO THE CURRENT PAGE
         LR    R15,R1              POINT TO THE CURRENT PAGE
         AH    R15,HW4096          POINT PAST THE CURRENT PAGE
EQSCAN   LR    R0,R1               POINT TO OLD CURRENT ENTRY
         LA    R1,16(,R1)          POINT TO NEW CURRENT ENTRY
         CR    R1,R15              REACHED END OF THE PAGE?
         BNL   EQPAGE              YES, GO SCAN THE NEXT PAGE
         CLI   0(R1),0             UNUSED ENTRY?
         BE    EQHERE              YES
         CLC   DOUBLE,0(R1)        SAME SYMBOL NAME?
         BNE   EQSCAN              NO, CONTINUE SCAN
         L     R0,8(,R1)           YES, SAVE OLD ADDRESS
         MVC   8(4,R1),RESADDR     SET NEW ADDRESS
         MVC   12(4,R1),RESADDR
         NI    15(R1),X'F0'        ROUND TO QUADWORD
         ST    R0,RESADDR          PERCOLATE OLD ADDRESS DOWN CHAIN
         B     EQSCAN              RESUME SCAN
EQHERE   MVC   0(8,R1),DOUBLE      LOAD SYMBOL NAME
         MVC   8(4,R1),RESADDR     SET NEW ADDRESS
         MVC   12(4,R1),RESADDR
         NI    15(R1),X'F0'        ROUND TO QUADWORD
         C     R0,LASTSYM@         IS THIS THE NEW LAST ENTRY?
         BNE   PROMPT              NO
         ST    R1,LASTSYM@         YES, SAVE ITS ADDRESS
         B     PROMPT
EQFAIL   MVI   MSG,123             REQUEST ABORTED - STORAGE FULL
         B     PROMPT              CANNOT PERFORM EQUATE
EQNAMBAD MVI   MSG,178             INVALID NAME
         B     ERROPSHO            CANNOT PERFORM EQUATE
EQNAMELD MVC   DOUBLE(0),0(R15)    <<< EXECUTED >>>
         DROP  R5                  EQUATE
         SPACE
**********************************************************************
*                                                          *         *
*         DROP SYMBOLIC EQUATE                             *  R44.0  *
*                                                          * AUG2013 *
**********************************************************************
         SPACE
         SPACE
         USING DROP,R5
DROP     TM    STATUS14,$14AS      BROWSING ADDRESS SPACE?
         BNO   CMDINVLD            NO, COMMAND NOT ALLOWED
         LR    R5,R15              SET LOCAL BASE
         TM    OPD1+6,PRESENT      ANY OPERANDS?
         BNO   ERRMISS             NO
         LA    R15,OPD2            SET FOR ERRMANY
         TM    OPD2+6,PRESENT      TOO MANY OPERANDS?
         BO    ERRMANY             YES
         L     R14,OPD1            POINT TO THE OPERAND
         LH    R1,OPD1+4           GET ITS LENGTH
         LTR   R1,R1               NULL STRING?
         BNP   ERRINV              YES, INVALID
         CH    R1,HW8              TOO LONG?
         BH    ERRINV              YES, INVALID
         CH    R1,HW1              SINGLE CHARACTER OPERAND?
         BNE   DRSRCH              NO
         CLI   0(R14),C'*'         IS IT A SINGLE ASTERISK?
         BNE   DRSRCH              NO
         BAS   R14,FREEHSE         YES, DROP ALL SYMBOLIC EQUATES
         MVI   MSG,197             ALL SYMBOLIC EQUATES DROPPED
         B     PROMPT
DRSRCH   MVC   DOUBLE,BLANKS
         BCTR  R1,0                DECREMENT FOR EXECUTE
         EX    R1,CPYSYMNM         EXTRACT THE SYMBOL NAME
         LA    R2,HSEACTIV         POINT TO CHAIN ANCHOR
DRPAGE   ICM   R2,15,0(R2)         POINT TO NEXT PAGE
         BZ    DRPNOSYM            NO MORE PAGES TO SEARCH
         LR    R1,R2               POINT TO THE CURRENT PAGE
         LR    R15,R2              POINT TO THE CURRENT PAGE
         AH    R15,HW4096          POINT PAST THE CURRENT PAGE
DRSCAN   C     R1,LASTSYM@         SCAN ALL USED ENTRIES?
         BE    DRPNOSYM            YES, NO MORE PAGES TO SEARCH
         LA    R1,16(,R1)          NO, POINT TO NEXT ENTRY
         CR    R1,R15              REACHED END OF THE PAGE?
         BNL   DRPAGE              YES, GO SCAN THE NEXT PAGE
         CLC   DOUBLE,0(R1)        FOUND SYMBOL NAME?
         BNE   DRSCAN              NO, CONTINUE SCAN
         MVI   0(R1),0             YES, DROP IT
         B     PROMPT
DRPNOSYM MVI   MSG,189             SYMBOL NOT KNOWN
         L     R15,REVMSGEP
         BASR  R14,R15             FETCH MESSAGE TEXT TEMPLATE
         MVC   MSG+9(8),DOUBLE     LOAD SYMBOL NAME
         LH    R0,MSG              GET THE MESSAGE LENGTH
         LA    R1,MSG+16           POINT TO LAST SYMBOL NAME BYTE
DRPNOSLP CLI   0(R1),C' '          TRAILING BLANK?
         BNE   DRPNOSOK            NO
         MVC   0(10,R1),1(R1)      YES, SUPPRESS IT
         BCTR  R1,0
         BCT   R0,DRPNOSLP
DRPNOSOK STH   R0,MSG              UPDATE MESSAGE LENGTH
         B     PROMPT              TERMINATE ADDRESS RESOLUTION
         DROP  R5                  DROP
         SPACE
**********************************************************************
*                                                          *         *
*         VERIFY CHECKPOINT ENTRY ACCURACY                 *  GP@FT  *
*                                                          *  08/92  *
**********************************************************************
         SPACE
         USING CHKPTVFY,R15
CHKPTVFY TM    STATUS2,$2FAST      IS "FASTPATH" BEING USED?
         BOR   R14                 YES, PERFORM NO ACTION HERE
         LTR   R0,R0               IS DIV BEING USED?
         BPR   R14                 YES, PERFORM NO ACTION HERE
         LTR   R1,R1               RE-READ OF END-OF-FILE?
         BMR   R14                 YES, PERFORM NO ACTION HERE
         CLC   COUNT,CHKPTDUM      RE-READ OF ANY PHYSICAL RECORD?
         BNER  R14                 NO, VERIFY NOT APPROPRIATE
         OC    COUNT,COUNT         ACCESSING FIRST RECORD?
         BZR   R14                 YES, VERIFY NOT APPROPRIATE
         OC    $UCBAD3,$UCBAD3     TALKING TO ANY I/O DEVICE?
         BZR   R14                 NO, VERIFY NOT APPROPRIATE
         STM   R14,R12,12(R13)     PROCEED, SAVE REGISTERS
         L     R1,CHKPTTOP         GET FIRST CHECKPOINT ENTRY ADDRESS
         ICM   R2,15,CHKPTBOT      GET LAST CHECKPOINT ENTRY ADDRESS
         BZ    CPVFYXIT            UNDEFINED CHECKPOINT TABLE STATUS
CPVFYLP  CLR   R1,R2               GONE PAST LAST CHECKPOINT ENTRY?
         BH    CPVFYXIT            YES, BUT THIS SHOULDN'T HAPPEN
         CLC   CHKPTDUM(4),0(R1)   CHECKPOINT ENTRY MATCH?
         BL    CPVFYMIS            NO, ENTRY IS MISSING FROM TABLE
         BE    CPVMATCH            YES, GO COMPARE DATA
         LA    R1,CHKPTLN(,R1)     NO, POINT TO NEXT ENTRY
         B     CPVFYLP             CONTINUE LOOPING THROUGH TABLE
CPVFYMIS TM    0(R1),X'80'         ENCOUNTERED E-O-F ENTRY?
         BZ    CPVFYXIT            NO, ENTRY COMPRESSED OUT OF TABLE
         TM    TSTRECFM,X'48'      VARIABLE LENGTH SPANNED RECORDS?
         BNO   CPVOVRLY            NO, GO OVERLAY WITH NEW ENTRY
         L     R5,BLOCKPTR         POINT TO PHYSICAL BLOCK
         TM    6(R5),X'02'         IS "NOT FIRST SEGMENT" FLAG ON?
         BO    CPVFYXIT            YES, DO NOT CHECKPOINT THIS BLOCK
CPVOVRLY MVC   0(CHKPTLN,R1),CHKPTDUM   OVERLAY WITH NEW ENTRY
         ST    R1,CHKPTBOT         THIS SHOULD BE SUPERFLUOUS
         B     CPVFYXIT            NEW RECORD(S) ADDED TO END OF DATA
CPVMATCH CLC   CHKPTDUM+4(CHKPTLN-4),4(R1) IS RECORD LOCATE CORRECT?
         BE    CPVFYXIT            YES, NO UPDATE SINCE PREVIOUS READ
         MVC   4(CHKPTLN-4,R1),CHKPTDUM+4  NO, CORRECT IT
         ST    R1,CHKPTBOT         DROP SUBSEQUENT TABLE ENTRIES
CPVFYXIT LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER
         DROP  R15,R4              CHKPTVFY, IHADCB
         SPACE
**********************************************************************
*                                                          *         *
*         DISCARD RECORD FOR FIND/FINDNOT ALL              *  GP@FT  *
*                                                          *  07/94  *
**********************************************************************
         SPACE
**********************************************************************
* ON ENTRY:    R1 CONTAINS LENGTH OF RECORD (OR -1 IF END-OF-FILE)   *
*              R2 CONTAINS ADDRESS OF RECORD (OR 0 IF END-OF-FILE)   *
**********************************************************************
         SPACE
         USING FALLREC,R15
FALLREC  TM    FINDSW2,FALL        IS "FIND/FINDNOT ALL" ACTIVE?
         BNOR  R14                 NO, PERFORM NO ACTION HERE
         LTR   R1,R1               IS THIS RECORD END-OF-FILE?
         BMR   R14                 YES, PERFORM NO ACTION HERE
         TM    STATUS4,$4ATTN      ATTENTION INTERRUPT CURRENT?
         BNO   FALLREC$            NO, PROCESS THE RECORD
         TM    STATUS17,$17S34     SEARCHING A DATA SET LIST?
         BO    EXIT00              YES, EXIT THIS DATA SET NOW
         BR    R14                 PERFORM NO ACTION HERE SO THAT A
*                                  SCREEN LOAD OF RECORDS TO SHOW CAN
*                                  BE QUICKLY PROCURED AFTER THE ATTN
         DROP  R15                 FALLREC
         USING FALLREC,R4
FALLREC$ STM   R14,R12,12(R13)     PROCEED, SAVE REGISTERS
         LR    R4,R15              SET LOCAL BASE REGISTER
         LA    R5,CALLSAVE         POINT TO NEW SAVE AREA
         ST    R5,8(,R13)          CHAIN SAVE AREAS
         ST    R13,4(,R5)
         LR    R13,R5              ACTIVATE NEW SAVE AREA
         TM    MODE,MD_OFFLD       ENTRY SEARCH ACTIVE?
         BNO   FALLCASE            NO, REVSRCH SETS FALL AND MD_OFFLD
         TM    FINDSW2,FUOL+FPIC   NON-PICTURE CASE-INSENSITVE SEARCH?
         BNM   FALLCASE            NO, NEED FUOL ON AND FPIC OFF
         L     R5,KAPSADDR         YES, POINT TO TRANSLATE TABLE
         LR    R14,R2              POINT TO RECORD DATA
         LTR   R15,R1              GET RECORD DATA LENGTH
         BNP   FALLCASE            SKIP POSSIBLE UPPERCASING IF NO DATA
         LA    R0,256              GET CHUNK SIZE
FALLUCLP CR    R15,R0              LESS THAN 256 BYTES LEFT?
         BL    FALLUCEX            YES, PROCESS REST OF RECORD
         TR    0(256,R14),0(R5)    NO, UPPER CASE 256 BYTES
         AR    R14,R0              POINT PAST PROCESSED DATA
         SR    R15,R0              ADJUST REMAINING LENGTH
         BP    FALLUCLP            GO PROCESS NEXT CHUNK
         B     FALLUCDN            DATA LENGTH A MULTIPLE OF 256 BYTES
FALLUCEX BCTR  R15,0               GET LENGTH CODE OF REMAINING DATA
         EX    R15,FALLUCTR        CAPITALIZE LAST PIECE OF RECORD
FALLUCDN OI    FINDSW2,FKAP        FLAG RECORD HAS BEEN UPPERCASED
         NI    FINDSW2,255-FUOL    SIMPLE COMPARES NOW ADEQUATE
FALLCASE LR    R0,R1               GET THE RECORD LENGTH
         C     R0,FINDCOL2         RECORD LONGER THAN SEARCH AREA?
         BNH   FALENDOK            NO, END COLUMN LATER OR NOT SUPPLIED
         L     R0,FINDCOL2         YES, LIMIT SEARCH AS REQUESTED
FALENDOK SH    R0,STRINGL          GET THE REQUIRED COMPARE COUNT
         BNP   FAILFIND            RECORD IS TOO SHORT TO TEST
         LR    R5,R2               POINT TO START OF RECORD DATA
         A     R5,FINDCOL1         POINT TO STARTING COLUMN
         S     R0,FINDCOL1         ADJUST COLUMNS TO SEARCH
         BNP   FAILFIND            RECORD IS TOO SHORT TO TEST
         TM    FINDSW2,FNOT        IS THIS FOR A FINDNOT?
         BO    FNALLOOP            YES
FALLLOOP L     R15,SEARCHAD        GET MATCHING SUBROUTINE ENTRY POINT
         BASR  R14,R15             COMPARE STRING TO DATA
         BE    FALLSMFC            FOUND DATA BUT CHECK FOR SMF SUBTYPE
         LA    R5,1(,R5)           POINT TO NEXT RECORD LOCATION
         BCT   R0,FALLLOOP         CONTINUE THE SEARCH
         B     FAILRECX            NOT FOUND SO DISCARD RECORD
FNALLOOP L     R15,SEARCHAD        GET MATCHING SUBROUTINE ENTRY POINT
         BASR  R14,R15             COMPARE STRING TO DATA
         BNE   FALLRECX            FOUND NOT-DATA SO SHOW RECORD
         LA    R5,1(,R5)           POINT TO NEXT RECORD LOCATION
         BCT   R0,FNALLOOP         CONTINUE THE SEARCH
         B     FAILRECX            FOUND ONLY IT SO DISCARD RECORD
FALLSMFC TM    FINDSW,FSMF         IS THIS A FINDSMF COMMAND?
         BZ    FALLRECX            NO, SO SHOW THE RECORD
         CLI   SMFSBTYP,X'FF'      YES, LOOKING FOR A SUBTYPE?
         BE    FALLRECX            NO, SO SHOW THE RECORD
         L     R1,FSTYPADR         POINT TO SUBTYPE OFFSET TABLE
         SR    R0,R0
         IC    R0,0(,R5)           GET SMF RECORD TYPE
         ALR   R1,R0               POINT TO OFFSET FOR THIS TYPE
         IC    R0,0(,R1)           GET THE OFFSET
         LR    R1,R0               COPY IT
         ALR   R1,R5               POINT TO SUBTYPE
         CLC   0(1,R1),SMFSBTYP+1  SUBTYPE MATCH?
         BE    FALLRECX            YES, SO SHOW THE RECORD
FAILFIND TM    FINDSW2,FNOT        IS THIS A FINDNOT?
         BZ    FAILRECX            NO, DISCARD RECORD FOR "FIND ALL"
FALLRECX L     R13,4(,R13)         POINT TO CALLER'S SAVE AREA
         OI    11(R13),X'01'       INVALIDATE FORWARD POINTER
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         TM    STATUS17,$17S34     SEARCHING A DATA SET LIST?
         BO    EXITS34             YES, HAVE NOW PROCESSED THIS ONE
         TM    FINDSW2,FKAP        WAS THE RECORD UPPERCASED?
         BNOR  R14                 NO, RETURN TO CALLER
         OI    FINDSW2,FUOL        YES, RESTORE CORRECT SEARCH FLAG
         NI    FINDSW2,255-FKAP    RESET RECORD TRANSLATE FLAG
         BR    R14                 RETURN TO CALLER
FAILRECX LA    R0,1
         A     R0,COUNT            INCREMENT LAST READ RECORD NUMBER
         ST    R0,COUNT
         L     R13,4(,R13)         POINT TO CALLER'S SAVE AREA
         LM    R15,R12,16(R13)     RESTORE REGISTERS
         L     R14,READR           GET ULTIMATE RETURN ADDRESS
         TM    FINDSW2,FKAP        WAS THE RECORD UPPERCASED?
         BNO   GET                 NO, REDRIVE THE "READ A RECORD"
         OI    FINDSW2,FUOL        YES, RESTORE CORRECT SEARCH FLAG
         NI    FINDSW2,255-FKAP    RESET RECORD TRANSLATE FLAG
         B     GET                 REDRIVE THE "READ A RECORD" ROUTINE
FALLUCTR TR    0(0,R14),0(R5)      <<< EXECUTED >>>
         DROP  R4                  FALLREC
         SPACE
**********************************************************************
*                                                          *         *
*         RESET "FIND/FINDNOT ALL" STATUS                  *  GP@FT  *
*                                                          *  07/94  *
**********************************************************************
         SPACE
         USING RESET,R15
RESET    NI    FINDSW2,255-FALL    RESET "ALL" STATUS
         OI    FINDSW2,FANY        REMEMBER THAT IT WAS RESET
         L     R7,HOLDTOP          POINT TO HOLD AREA DIRECTORY
         L     R0,DIRNUM(,R7)      GET THE FIRST RECORD TO DISPLAY
         B     LISTAT              GO GET A SCREENFUL
         DROP  R15                 RESET
         SPACE
**********************************************************************
*                                                          *         *
*         DETERMINE FIND MATCH RESULTS                     *  GP@GE  *
*                                                          *  07/97  *
**********************************************************************
         SPACE
**********************************************************************
*                                                                    *
*        THIS SUBROUTINE TESTS WHETHER THE DATA CURRENTLY BEING      *
*        EXAMINED MATCHES THE SPECIFIED SEARCH STRING.  IT ONLY      *
*        COMPARES THE CURRENT PARTICULAR DATA INSTANCE.  IT IS       *
*        UP TO THE CALLER TO ENSURE THAT THIS ROUTINE IS CALLED      *
*        ONLY WHEN THE APPROPRIATE COLUMN RANGE CRITERIA HAVE        *
*        BEEN MET.                                                   *
*                                                                    *
*        WHEN AN EXACT MATCH IS REQUIRED A SIMPLE COMPARE IS         *
*        PERFORMED.  FOR CASE INSENSITIVE AND PICTURE SEARCHES       *
*        MORE SOPHISTICATED PROCESSING IS CARRIED OUT.               *
*                                                                    *
*        IF A MATCH IS FOUND FOR EITHER LOGIC PATH THEN A CHECK      *
*        FOR PREFIX, SUFFIX OR WORD IS PERFORMED.  IF NONE OF        *
*        THESE OPTIONS WAS REQUESTED THEN A MATCH HAS OCCURRED.      *
*        OTHERWISE, THE PREFIX/SUFFIX/WORD STATUS FOR THE MATCHED    *
*        TEXT IS ASSESSED AND COMPARED TO THE REQUEST FLAGS.         *
*        IF THEY MATCH THEN A MATCH HAS OCCURRED.                    *
*                                                                    *
*        THE SEARCH ARGUMENT IS IN STRING.  ITS LENGTH CODE IS       *
*        IN STRINGL.                                                 *
*                                                                    *
**********************************************************************
*                                                                    *
* ON ENTRY:    R1 =  RECORD DATA LENGTH (UNLESS CALLER IS REVIEW2)   *
*              R2 -> RECORD DATA (UNLESS CALLER IS REVIEW2 'FIND')   *
*              R5 -> FILE DATA BEING EXAMINED                        *
*              R7 -> HOLD DIRECTORY ENTRY OF CURRENT RECORD          *
*                    (ONLY IF CALLER IS REVIEW2 'FIND')              *
*              R13-> REGISTER SAVE AREA                              *
*              R14-> RETURN BRANCH TARGET                            *
*              R15-> ENTRY POINT                                     *
*                                                                    *
*              RECORD DETAILS FROM R1+R2 OR R7 ARE ONLY USED         *
*              FOR WORD/PREFIX/SUFFIX RECORD BOUNDARY CHECKING.      *
*                                                                    *
* ON EXIT:     ALL GENERAL PURPOSE REGISTERS ARE RESTORED.           *
*              PSW CONDITION CODE CONTAINS RESULT OF COMPARE.        *
*                                                                    *
**********************************************************************
         SPACE
         USING SEARCHIT,R15
SEARCHIT STM   R14,R12,12(R13)     PROCURE SOME WORK REGISTERS
         TM    FINDSW2,FUOL+FPIC   EXTENDED EXAMINATION REQUIRED?
         BNZ   SEARCHEX            YES, PERFORM EXTENDED CHECKING
         LH    R14,STRINGL         NO, GET THE STRING LENGTH CODE
         EX    R14,FINDCLC         PERFORM A SIMPLE COMPARE
         L     R14,12(,R13)        RESTORE RETURN ADDRESS
         BNER  R14                 MISMATCH SO EXIT IMMEDIATELY
SEARCHWD TM    FINDSW2,FWRD        PREFIX OR SUFFIX OR WORD REQUESTED?
         BZR   R14                 NO, QUICKLY RETURN WITH ZERO PSW CC
         IC    R0,FINDSW2          YES, GET FLAG BYTE
         LA    R4,FWRD             GET INTERESTING BIT MASK
         NR    R0,R4               EXTRACT FLAGS OF INTEREST
         LA    R4,FPRE             SET PREFIX FLAG
         TM    STATUS11,$11EDT     SEARCHIT CALLED BY REVEDIT?
         BO    SCHRECOK            YES, R2 HAS REC ADDR, R1 HAS REC LEN
         TM    FINDSW2,FALL        SEARCHIT CALLED FROM FALLREC?
         BO    SCHRECOK            YES, R2 HAS REC ADDR, R1 HAS REC LEN
         LM    R1,R2,DIRLEN(R7)    NO, GET RECORD LENGTH AND ADDRESS
SCHRECOK LR    R6,R2               POINT TO RECORD
         AR    R6,R1               POINT PAST RECORD
         BCTR  R5,0                POINT TO BYTE PRECEDING FILE DATA
         CR    R5,R2               DATA AT START OF RECORD?
         BL    SCHPREOK            YES, TEXT AT START OF WORD
         TRT   0(1,R5),ALFAMRIC    TEXT AT START OF WORD?
         BNZ   SCHPREOK            YES
         SR    R4,R4               NO, RESET PREFIX FLAG
SCHPREOK LA    R5,2(,R5)           NOW KNOW PREFIX STATUS
         AH    R5,STRINGL          POINT PAST MATCHED FILE DATA
         CR    R5,R6               DATA AT END OF RECORD?
         BNL   SCHSUFON            YES, TEXT AT END OF WORD
         TRT   0(1,R5),ALFAMRIC    TEXT AT END OF WORD?
         BZ    SCHSUFOK            NO
SCHSUFON LA    R4,FSUF(,R4)        SET SUFFIX FLAG
SCHSUFOK CR    R0,R4               TEST PREFIX/SUFFIX/WORD STATUS MATCH
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER WITH COND CODE SET
SEARCHEX DS    0H                  REGISTERS SAVED AT SEARCHIT ENTRY
         LH    R2,STRINGL          GET THE STRING LENGTH CODE
         EX    R2,SEARCHLD         COPY THE FILE DATA
         L     R6,KAPSADDR         POINT TO TRANSLATE TABLE
         TM    MODE,MD_ASCII       IS ASCII ON?
         BZ    SEARCHUC            NO, PROCESS EBCDIC
         LA    R6,KAPASCI          POINT TO ASCII TRANSLATE TABLE
SEARCHUC EX    R2,SEARCHTR         TRANSLATE FILE DATA TO UPPER CASE
         TM    FINDSW2,FPIC        PICTURE STRING SEARCH?
         BO    SEARCHPC            YES, PERFORM PICTURE CHECKING
SEARCHMC EX    R2,SEARCHCL         NO, COMPARE STRING TO MONOCASE DATA
SEARCHXX LM    R14,R12,12(R13)     RESTORE REGISTERS
         BNER  R14                 RETURN NOW IF MISMATCH ALREADY KNOWN
         B     SEARCHWD            NOW CHECK FOR PREFIX/SUFFIX/WORD
FINDCLC  CLC   0(0,R5),STRING      <<< EXECUTED >>>
SEARCHLD MVC   REPLY+64(0),0(R5)   <<< EXECUTED >>>
SEARCHTR TR    REPLY+64(0),0(R6)   <<< EXECUTED >>>
SEARCHCL CLC   REPLY+64(0),STRING  <<< EXECUTED >>>
SEARCHPC LA    R0,1(,R2)           GET NUMBER OF BYTES TO COMPARE
         SR    R2,R2               CLEAR TRANSLATE-AND-TEST REGISTER
         LA    R4,REPLY+64         POINT TO MONOCASE FILE DATA
         LA    R6,STRING           POINT TO SPECIFIED PICTURE STRING
SRCHPCLP LA    R14,TABPIC          POINT TO TRANSLATE TABLE
         TM    MODE,MD_ASCII       IS ASCII ON?
         BZ    SRCHPCTB            NO, PROCESS EBCDIC
         LA    R14,TABPICA         POINT TO ASCII TRANSLATE TABLE
SRCHPCTB TRT   0(1,R6),0(R14)      PICTURE MASK CHARACTER?
         BNZ   SRCHGTAD            YES, GO GET SUBROUTINE ADDRESS
         CLC   0(1,R6),0(R4)       DOES NON-MASK CHARACTER MATCH?
         BNE   SEARCHXX            NO, STOP BECAUSE MISMATCH FOUND
SRCHNXT  CR    R14,R14             RESET PSW CONDITION CODE
         LA    R4,1(,R4)           POINT TO NEXT MONOCASE DATA BYTE
         LA    R5,1(,R5)           POINT TO NEXT FILE DATA BYTE
         LA    R6,1(,R6)           POINT TO NEXT ARGUMENT BYTE
         BCT   R0,SRCHPCLP         YES, PROCESS NEXT CHARACTER
         B     SEARCHXX            PICTURE STRING MATCH FOUND
SRCHGTAD LH    R14,SRCHPATB-2(R2)  GET PICTURE ADDRESS TABLE ENTRY
         ALR   R14,R15             PERFORM RELOCATION
         BR    R14                 PROCESS PICTURE MASK CHARACTER
SRCHINV  CLI   0(R5),X'40'         DATA BYTE IN X'00' TO X'3F' RANGE?
         BL    SRCHNXT             YES, DATA BYTE IS INVALID
         CLI   0(R5),X'FF'         NO, IS DATA BYTE X'FF'?
         BE    SRCHNXT             YES, DATA BYTE IS INVALID
         B     SEARCHXX            NO, STOP BECAUSE MISMATCH FOUND
SRCHINVA CLI   0(R5),X'20'         DATA BYTE IN X'00' TO X'1F' RANGE?
         BL    SRCHNXT             YES, DATA BYTE IS INVALID
         CLI   0(R5),X'7F'         DATA BYTE IN X'80' TO X'FF' RANGE?
         BH    SRCHNXT             YES, DATA BYTE IS INVALID
         B     SEARCHXX            NO, STOP BECAUSE MISMATCH FOUND
SRCHLWR  CLI   0(R5),X'81'         DATA BYTE BEFORE LOWER CASE 'A'?
         BL    SEARCHXX            YES, STOP SEARCH BECAUSE OF MISMATCH
         CLI   0(R5),X'A9'         DATA BYTE ABOVE LOWER CASE 'Z'?
         BH    SEARCHXX            YES, STOP SEARCH BECAUSE OF MISMATCH
         TRT   0(1,R5),TABALF-X'80' NO, IS BYTE A LOWER CASE LETTER?
         BZ    SRCHNXT             YES, DATA BYTE IS LOWER CASE
         B     SEARCHXX            NO, STOP BECAUSE MISMATCH FOUND
SRCHLWRA CLI   0(R5),X'61'         DATA BYTE BEFORE LOWER CASE 'A'?
         BL    SEARCHXX            YES, STOP SEARCH BECAUSE OF MISMATCH
         CLI   0(R5),X'7A'         DATA BYTE ABOVE LOWER CASE 'Z'?
         BH    SEARCHXX            YES, STOP SEARCH BECAUSE OF MISMATCH
         B     SRCHNXT             NO, ALPHABETIC MATCH
SRCH@    CLI   0(R5),C'A'          CAN DATA BYTE BE UPPER CASE?
         BL    SRCHLWR             NO, TRY LOWER CASE
SRCHUPR  CLI   0(R5),C'A'          DATA BYTE BEFORE UPPER CASE 'A'?
         BL    SEARCHXX            YES, STOP SEARCH BECAUSE OF MISMATCH
         CLI   0(R5),C'Z'          DATA BYTE ABOVE UPPER CASE 'Z'?
         BH    SEARCHXX            YES, STOP SEARCH BECAUSE OF MISMATCH
         TRT   0(1,R5),TABALF-X'C0' NO, IS BYTE A UPPER CASE LETTER?
         BZ    SRCHNXT             YES, DATA BYTE IS UPPER CASE
         B     SEARCHXX            NO, STOP BECAUSE MISMATCH FOUND
SRCH@A   CLI   0(R5),X'5A'         CAN DATA BYTE BE UPPER CASE?
         BH    SRCHLWRA            NO, TRY LOWER CASE
SRCHUPRA CLI   0(R5),X'41'         DATA BYTE BEFORE LOWER CASE 'A'?
         BL    SEARCHXX            YES, STOP SEARCH BECAUSE OF MISMATCH
         CLI   0(R5),X'5A'         DATA BYTE ABOVE LOWER CASE 'Z'?
         BH    SEARCHXX            YES, STOP SEARCH BECAUSE OF MISMATCH
         B     SRCHNXT             NO, ALPHABETIC MATCH
SRCH$    TRT   0(1,R5),TAB$        SPECIAL CHARACTER?
         BZ    SRCHNXT             YES
         B     SEARCHXX            NO, STOP BECAUSE MISMATCH FOUND
SRCH$A   CLI   0(R5),X'21'         ABOVE BLANK?
         BL    SEARCHXX            NO, MISMATCH
         CLI   0(R5),X'30'         BELOW ZERO?
         BL    SRCHNXT             YES, MATCH
         CLI   0(R5),X'3A'         NUMERIC?
         BL    SEARCHXX            YES, MISMATCH
         CLI   0(R5),X'41'         ALPHABETIC?
         BL    SRCHNXT             NO, MATCH
         CLI   0(R5),X'5B'         ALPHABETIC?
         BL    SEARCHXX            YES, MISMATCH
         CLI   0(R5),X'61'         ALPHABETIC?
         BL    SRCHNXT             NO, MATCH
         CLI   0(R5),X'7B'         ALPHABETIC?
         BL    SEARCHXX            YES, MISMATCH
         CLI   0(R5),X'7F'         IN FIRST HALF?
         BNH   SRCHNXT             YES, MATCH
         B     SEARCHXX            NO, MISMATCH
SRCHNTB  CLI   0(R5),C' '          NON-BLANK?
         BNE   SRCHNXT             YES
         CR    R11,R12             NO, GENERATE NON-ZERO PSW CC
         B     SEARCHXX            STOP BECAUSE MISMATCH FOUND
SRCHNTBA CLI   0(R5),X'20'         NON-BLANK?
         BNE   SRCHNXT             YES
         CR    R11,R12             NO, GENERATE NON-ZERO PSW CC
         B     SEARCHXX            STOP BECAUSE MISMATCH FOUND
SRCH#    CLI   0(R5),C'0'          DATA BYTE BEFORE '0'?
         BL    SEARCHXX            YES, STOP SEARCH BECAUSE OF MISMATCH
         CLI   0(R5),C'9'          DATA BYTE ABOVE '9'?
         BH    SEARCHXX            YES, STOP SEARCH BECAUSE OF MISMATCH
         B     SRCHNXT             DATA BYTE IS NUMERIC
SRCH#A   CLI   0(R5),X'30'         DATA BYTE BEFORE '0'?
         BL    SEARCHXX            YES, STOP SEARCH BECAUSE OF MISMATCH
         CLI   0(R5),X'39'         DATA BYTE ABOVE '9'?
         BH    SEARCHXX            YES, STOP SEARCH BECAUSE OF MISMATCH
         B     SRCHNXT             DATA BYTE IS NUMERIC
SRCHN#   CLI   0(R5),X'EF'         DATA BYTE BEFORE '0'?
         BNH   SRCHNXT             YES, DATA IS NON-NUMERIC
         CLI   0(R5),X'FA'         DATA BYTE ABOVE '9'?
         BNL   SRCHNXT             YES, DATA IS NON-NUMERIC
         B     SEARCHXX            STOP BECAUSE MISMATCH FOUND
SRCHN#A  CLI   0(R5),X'2F'         DATA BYTE BEFORE '0'?
         BNH   SRCHNXT             YES, DATA IS NON-NUMERIC
         CLI   0(R5),X'3A'         DATA BYTE ABOVE '9'?
         BNL   SRCHNXT             YES, DATA IS NON-NUMERIC
         B     SEARCHXX            STOP BECAUSE MISMATCH FOUND
         DROP  R15                 SEARCHIT
         SPACE
SRCHPATB DS    0H                  PICTURE MASK SUBROUTINE TABLE
         DC    Y(SRCHINV-SEARCHIT) EP FOR INVALID CHARACTER
         DC    Y(SRCHLWR-SEARCHIT) EP FOR LOWER CASE ALPHABETIC
         DC    Y(SRCH$-SEARCHIT)   EP FOR SPECIAL CHARACTER
         DC    Y(SRCHNTB-SEARCHIT) EP FOR NON-BLANK
         DC    Y(SRCHN#-SEARCHIT)  EP FOR NON-NUMERIC
         DC    Y(SRCHUPR-SEARCHIT) EP FOR UPPER CASE ALPHABETIC
         DC    Y(SRCH#-SEARCHIT)   EP FOR NUMERIC
         DC    Y(SRCH@-SEARCHIT)   EP FOR ALPHABETIC
         DC    Y(SRCHNXT-SEARCHIT) EP FOR ANY CHARACTER
         DC    Y(SRCHINVA-SEARCHIT) ASCII INVALID CHARACTER
         DC    Y(SRCHLWRA-SEARCHIT) ASCII LOWER CASE ALPHABETIC
         DC    Y(SRCH$A-SEARCHIT)   ASCII SPECIAL CHARACTER
         DC    Y(SRCHNTBA-SEARCHIT) ASCII NON-BLANK
         DC    Y(SRCHN#A-SEARCHIT)  ASCII NON-NUMERIC
         DC    Y(SRCHUPRA-SEARCHIT) ASCII UPPER CASE ALPHABETIC
         DC    Y(SRCH#A-SEARCHIT)   ASCII NUMERIC
         DC    Y(SRCH@A-SEARCHIT)   ASCII ALPHABETIC
         DC    Y(SRCHNXT-SEARCHIT)  ASCII ANY CHARACTER
         SPACE
KAPSADDR DC    A(EDITKAPS)         DO NOT PROMOTE NULLS TO BLANKS
         SPACE
TABPIC   DS    0CL256              EBCDIC PICTURE MASK CHARACTER TABLE
         DC    75AL1(0)
         DC    AL1(1*2)      (4B)  . INVALID CHARACTER
         DC    AL1(2*2)      (4C)  < LOWER CASE ALPHABETIC CHARACTER
         DC    14AL1(0)
         DC    AL1(3*2)      (5B)  $ SPECIAL CHARACTER
         DC    3AL1(0)
         DC    AL1(4*2)      (5F)  ¬ NON-BLANK CHARACTER
         DC    AL1(5*2)      (60)  - NON-NUMERIC CHARACTER
         DC    13AL1(0)
         DC    AL1(6*2)      (6E)  > UPPER CASE ALPHABETIC CHARACTER
         DC    12AL1(0)
         DC    AL1(7*2)      (7B)  # NUMERIC CHARACTER
         DC    AL1(8*2)      (7C)  @ ALPHABETIC CHARACTER
         DC    AL1(0)
         DC    AL1(9*2)      (7E)  = ANY CHARACTER
         DC    129AL1(0)
         SPACE
TABPICA  DS    XL256'00'           ASCII PICTURE MASK CHARACTER TABLE
         ORG   TABPICA+X'2E'
         DC    AL1(10*2)     (2E)  . INVALID CHARACTER
         ORG   TABPICA+X'3C'
         DC    AL1(11*2)     (3C)  < LOWER CASE ALPHABETIC CHARACTER
         ORG   TABPICA+X'24'
         DC    AL1(12*2)     (24)  $ SPECIAL CHARACTER
         ORG   TABPICA+X'5E'
         DC    AL1(13*2)     (5E)  ¬ NON-BLANK CHARACTER
         ORG   TABPICA+X'2D'
         DC    AL1(14*2)     (2D)  - NON-NUMERIC CHARACTER
         ORG   TABPICA+X'3E'
         DC    AL1(15*2)     (3E)  > UPPER CASE ALPHABETIC CHARACTER
         ORG   TABPICA+X'23'
         DC    AL1(16*2)     (23)  # NUMERIC CHARACTER
         ORG   TABPICA+X'40'
         DC    AL1(17*2)     (40)  @ ALPHABETIC CHARACTER
         ORG   TABPICA+X'3D'
         DC    AL1(18*2)     (3D)  = ANY CHARACTER
         ORG
         SPACE
TABALF   DC    X'FF000000000000000000FFFFFFFFFFFF'
         DC    X'FF000000000000000000FFFFFFFFFFFF'
         DC    X'FFFF0000000000000000'
         SPACE
TAB$     DS    0CL256                SPECIAL CHARACTERS
         DC    4X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'  X'00' - X'3F'
         DC    1X'FF000000000000000000000000000000'  X'40' - X'4F'
         DC    3X'00000000000000000000000000000000'  X'50' - X'7F'
         DC    2X'00FFFFFFFFFFFFFFFFFF000000000000'  X'80' - X'9F'
         DC    1X'0000FFFFFFFFFFFFFFFF000000000000'  X'A0' - X'AF'
         DC    1X'00000000000000000000000000000000'  X'B0' - X'BF'
         DC    2X'00FFFFFFFFFFFFFFFFFF000000000000'  X'C0' - X'DF'
         DC    1X'0000FFFFFFFFFFFFFFFF000000000000'  X'E0' - X'EF'
         DC    1X'FFFFFFFFFFFFFFFFFFFF0000000000FF'  X'F0' - X'FF'
         SPACE
ALFAMRIC DS    0CL256                ALPHAMERIC CHARACTERS
         DC    5X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'  X'00' - X'4F'
         DC    1X'FFFFFFFFFFFFFFFFFFFFFF00FFFFFFFF'  X'50' - X'5F'
         DC    1X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'  X'60' - X'6F'
         DC    1X'FFFFFFFFFFFFFFFFFFFFFF0000FFFFFF'  X'70' - X'7F'
         DC    2X'FF000000000000000000FFFFFFFFFFFF'  X'80' - X'9F'
         DC    1X'FFFF0000000000000000FFFFFFFFFFFF'  X'A0' - X'AF'
         DC    1X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'  X'B0' - X'BF'
         DC    2X'FF000000000000000000FFFFFFFFFFFF'  X'C0' - X'DF'
         DC    1X'FFFF0000000000000000FFFFFFFFFFFF'  X'E0' - X'EF'
         DC    1X'00000000000000000000FFFFFFFFFFFF'  X'F0' - X'FF'
         SPACE
KAPASCI  DC    97AL1(*-KAPASCI)          00-60
         DC    26AL1(*-KAPASCI-X'20')    61-7A BECOME 41-5A
         DC    123AL1(*-KAPASCI)         7B-FF
         SPACE
**********************************************************************
*                                                          *         *
*         LOAD MODULE RECORD FORMAT ROUTINE                *  GP@FT  *
*                                                          *  09/92  *
**********************************************************************
         SPACE
         USING PGMFRMAT,R8
PGMFRMAT TM    DSORG,DS1DSGPO      IS DSORG PO?
         BZR   R14                 NO, CAN'T BE A LOAD MODULE
         TM    TSTRECFM,X'C0'      RECFM U?
         BMR   R14                 NO, CAN'T BE A LOAD MODULE
         STM   R14,R12,12(R13)     SAVE REGISTERS
         LR    R8,R15              SET BASE REGISTER
         LA    R15,CALLSAVE        POINT TO NEW SAVE AREA
         ST    R13,4(,R15)         CHAIN SAVE AREAS
         ST    R15,8(,R13)
         LR    R13,R15             POINT TO NEW SAVE AREA
         L     R2,DIRREC(,R7)      POINT TO DATA RECORD
         CLI   0(R2),X'20'         COMPOSITE EXTERNAL SYMBOL RECORD?
         BE    ESDFRMAT            POSSIBLY, PERFORM ANY ESD FORMATTING
         CLI   0(R2),X'80'         IDENTIFICATION RECORD?
         BE    IDRFRMAT            POSSIBLY, PERFORM ANY IDR FORMATTING
PGMFMXIT L     R13,4(,R13)         POINT TO PREVIOUS SAVE AREA
         OI    11(R13),X'01'       INVALIDATE FORWARD POINTER
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER
         SPACE
**********************************************************************
*                                                          *         *
*         FORMAT EXTERNAL SYMBOL DICTIONARY RECORD         *  GP@FT  *
*                                                          *  09/92  *
**********************************************************************
         SPACE
ESDFRMAT DS    0H                  BREAK OUT CESD RECORD DATA
         LH    R1,6(,R2)           GET ESD DATA LENGTH INDICATOR
         LA    R0,8(,R1)           GET THE RECORD LENGTH
         C     R0,DIRLEN(,R7)      IS THIS CORRECT?
         BNE   PGMFMXIT            NO, RETURN WITHOUT ACTION
         CLI   6(R2),0             CESD DATA LENGTH LESS THAN 256?
         BNE   PGMFMXIT            NO, UNEXPECTED FORMAT SO EXIT
         TM    7(R2),X'0F'         CESD DATA LENGTH A MULTIPLE OF 16?
         BNZ   PGMFMXIT            NO, UNEXPECTED FORMAT SO EXIT
         L     R1,OFFSET           GET LEFT/RIGHT SCROLL OFFSET
         SH    R1,=H'280'          GET INDEX NUMBER OF ENTRY TO SHOW
         BM    PGMFMXIT            TOO FAR LEFT FOR ANY FORMATTING
         SR    R0,R0               PREPARE FOR DIVIDE
         L     R15,SCRNCOLS
         DR    R0,R15              GET ENTRY INDEX NUMBER
         LR    R15,R1              COPY IT
         SLL   R1,4                MULTIPLY BY 16 FOR INDEX
         CH    R1,6(,R2)           IS THE CESD RECORD LONG ENOUGH?
         BNL   PGMFMXIT            NO, TOO FAR RIGHT FOR ANY FORMATTING
         LA    R1,8(R1,R2)         YES, POINT TO THE ESD ENTRY
         OI    DSORGTYP,OVLY       FLAG OVERLAY SEGMENT NUMBERS PRESENT
         TM    1(R2),X'80'         IS THIS TRUE?
         BNO   *+8                 YES
         NI    DSORGTYP,255-OVLY   NO, RSECT/RMODE/AMODE DATA PRESENT
         BAS   R14,COLRINFO        SET INFORMATION DISPLAY COLOUR
         TM    STATUS5,$5EDS+$5COLR+$5HILT USING COLOURS?
         BO    ESDHIOK1            YES, HIGHLIGHTING FINISHED
         MVI   0(R6),FLDOUTHI      NO, MAKE HIGH INTENSITY
ESDHIOK1 AH    R15,4(,R2)          GET ESD ID
         STH   R15,LINKAREA+2
         UNPK  1(5,R6),LINKAREA+2(3)    LOAD ESD ID INTO DISPLAY LINE
         TR    1(4,R6),HEXTAB-240  MAKE DISPLAYABLE HEX CHARACTERS
         MVI   5(R6),C' '          ERASE GARBAGE
         MVC   6(8,R6),0(R1)       COPY THE EXTERNAL SYMBOL NAME
         OC    6(8,R6),6(R6)       IS IT NULL?
         BNZ   *+10                NO
         MVC   6(8,R6),=CL8'--NULL--' YES, INDICATE THIS
         CLC   6(8,R6),BLANKS      IS IT BLANK?
         BNE   *+10                NO
         MVC   6(8,R6),$PRIVATE    YES, INDICATE THIS
         TR    6(8,R6),PERIODS     TRANSLATE UNPRINTABLES
         UNPK  15(3,R6),8(2,R1)    LOAD SYMBOL TYPE INTO DISPLAY LINE
         TR    15(2,R6),HEXTAB-240 MAKE DISPLAYABLE HEX CHARACTERS
         MVI   17(R6),C' '         ERASE GARBAGE
         TM    DSORGTYP,OVLY       IS THIS AN OVERLAY PROGRAM?
         BNO   ESDNOTOV            NO
         CLI   8(R1),X'14'         SEGMENT OR ENTRY TABLE SECTION?
         BNE   ESDNOTOV            NO
         MVC   15(2,R6),=C'ET'     YES, GO WITH ENTRY TABLE
         CLC   FW1,9(R1)           OFFSET ZERO IN ROOT SEGMENT?
         BNE   *+8                 NO, ENTRY TABLE
         MVI   15(R6),C'S'         YES, SEGMENT TABLE
         CLI   0(R1),C' '          BLANK ENTRY NAME?
         BH    ESDTYPOK            NO, DO NOT OVERLAY IT
         MVC   6(8,R6),=CL8'$ENTAB'
         CLC   FW1,9(R1)           OFFSET ZERO IN ROOT SEGMENT?
         BNE   ESDTYPOK            NO, ENTRY TABLE
         MVC   6(8,R6),=CL8'$SEGTAB'
         B     ESDTYPOK            SEGMENT TABLE
ESDNOTOV MVC   DOUBLE(1),8(R1)     COPY TYPE INDICATOR BYTE
         NI    DOUBLE,X'0F'        RESET UNINTERESTING BITS
         SR    R15,R15
         IC    R15,DOUBLE          LOAD SYMBOL TYPE
         SLL   R15,1               DOUBLE FOR INDEX
         LA    R15,ESDTYPES(R15)   POINT TO TYPE LABEL
         MVC   15(2,R6),0(R15)     LOAD SYMBOL TYPE INTO DISPLAY LINE
         MVC   18(14,R6),$UNRESOL  PREPARE FOR UNRESOLVED REFERENCE
         CLI   DOUBLE,X'0A'        WEAK EXTERNAL REFERENCE?
         BE    ESDFMTOK            YES, DO NOT SHOW LENGTH OR OFFSET
         MVC   29(3,R6),BLANKS     NO, ERASE THE '(W)'
         CLI   DOUBLE,X'02'        EXTERNAL REFERENCE?
         BE    ESDFMTOK            YES, DO NOT SHOW LENGTH OR OFFSET
         MVC   18(11,R6),BLANKS    ERASE THE '$UNRESOLVED'
ESDTYPOK UNPK  18(7,R6),9(4,R1)    LOAD SYMBOL OFFSET INTO DISPLAY LINE
         TR    18(6,R6),HEXTAB-240 MAKE DISPLAYABLE HEX CHARACTERS
         MVI   24(R6),C' '         ERASE GARBAGE
         UNPK  32(3,R6),12(2,R1)   LOAD XA FLAGS INTO DISPLAY LINE
         TR    32(2,R6),HEXTAB-240 MAKE DISPLAYABLE HEX CHARACTERS
         MVI   34(R6),C' '         ERASE GARBAGE
         CLI   8(R1),X'03'         LABEL REFERENCE?
         BE    ESDXACHK            YES, SUPPRESS LENGTH AND IDR SEARCH
         CLI   8(R1),X'07'         NULL REFERENCE?
         BE    ESDXACHK            YES, SUPPRESS LENGTH AND IDR SEARCH
         UNPK  25(7,R6),13(4,R1)   LOAD SYMBOL LENGTH INTO DISPLAY LINE
         TR    25(6,R6),HEXTAB-240 MAKE DISPLAYABLE HEX CHARACTERS
         MVI   31(R6),C' '         ERASE GARBAGE
         MVC   DOUBLE(4),COUNT     SAVE CURRENT COUNT VALUE
         MVI   LINKAREA+1,0        CLEAR A FLAG BYTE
         SR    R1,R1               ZERO BYTES-TO-GO COUNTER
ESDHLDLP TM    LINKAREA+1,X'80'    EXTRACTING DATA FROM DIV?
         BO    ESDIVREC            YES, EXAMINE DIV
         C     R7,HOLDEND          IS THIS THE LAST HELD RECORD?
         BE    ESDIVREC            YES, EXAMINE DIV
         MVC   COUNT,DIRNUM(R7)    NO, SAVE THIS RECORD NUMBER
         L     R7,DIRNXT(,R7)      POINT TO NEXT HELD RECORD DETAILS
         TM    DIRLEN(R7),X'80'    IS THIS END-OF-FILE?
         BO    ESDFMTDN            YES, ABORT IDR SEARCH
         L     R0,DIRLEN(,R7)      GET THE LENGTH OF THE RECORD
         L     R2,DIRREC(,R7)      POINT TO THE RECORD DATA
         B     ESDRECRD            LOOK AT THE RECORD DATA
ESDIVREC OI    LINKAREA+1,X'80'    FLAG USING DIV FOR IDR RECORD SCAN
         ICM   R0,15,DIVORG        DIV AVAILABLE?
         BP    ESDDIVLP            YES, GO INVOKE IT
         MVC   60(19,R6),ESDNOIDM  NO, IDR RECORDS MAY NOT BE ON SCREEN
         B     ESDFMTDN            TERMINATE IDR SCAN
ESDDIVLP LR    R4,R1               SAVE THE BYTES-TO-GO COUNTER
         LR    R5,R15              SAVE THE IDR SCANNING CURSOR
         LA    R0,1                INCREMENT RECORD NUMBER
         A     R0,COUNT
         ST    R0,COUNT
         OI    $UCBAD,$ACB         TELL REVDIV TO SKIP THE POINT
         LA    R0,8                GET ENTRY CODE (RECORD FETCH)
         L     R15,DIVADDR2        LOAD REVDIV ENTRY POINT
         BASR  R14,R15             CALL IT
         NI    $UCBAD,255-$ACB     RESTORE THE FLAG BYTE OF $UCBAD
         LTR   R15,R15             SUCCESSFUL RETRIEVAL?
         BNZ   ESDFDOWN            NO, NEED TO SCROLL DOWN MORE FIRST
         LTR   R0,R1               YES, COPY THE RECORD LENGTH
         BNP   ESDFMTDN            ABORT IDR SCAN IF END-OF-FILE
         LR    R1,R4               RESTORE THE BYTES-TO-GO COUNTER
         LA    R15,0(,R5)          RESTORE THE IDR SCANNING CURSOR
ESDRECRD CLI   0(R2),X'80'         IDENTIFICATION RECORD?
         BNE   ESDHLDLP            NO, READ NEXT RECORD
         SR    R14,R14             CLEAR FOR INSERT
         IC    R14,1(,R2)          GET THE IDR DATA LENGTH
         LA    R14,1(,R14)         COUNT THE IDR TYPE BYTE
         CR    R14,R0              CORRECT LENGTH FOR IDR RECORD?
         BNE   ESDFMTDN            NO, UNEXPECTED FORMAT SO ABORT SCAN
         LTR   R1,R1               YES, ANY DATA FROM PREVIOUS RECORD?
         BNZ   ESDPTROK            YES, DO NOT RESET CURRENT POINTER
         L     R15,BLOCKPTR        NO
         LA    R15,256(,R15)       RESTART FROM START OF AREA
ESDPTROK L     R14,SAVLRECL        GET THE MAXIMUM BLOCK LENGTH
         SRL   R14,1               HALVE IT
         AL    R14,BLOCKPTR        POINT TO HALF-WAY ALONG BLOCK
         CR    R14,R15             COMBINED IDR PASSED THIS POINT?
         BNL   ESDRMOK             NO, STILL ROOM FOR IDR CONCAT
         L     R14,BLOCKPTR        YES
         LA    R14,256(,R14)       POINT TO START OF AREA
         MVC   0(256,R14),0(R15)   SHUFFLE DATA LEFT TO ENSURE ROOM
         MVC   256(256,R14),256(R15)
         MVC   512(256,R14),512(R15)
         LR    R15,R14             UPDATE CURRENT POINTER
ESDRMOK  LA    R14,0(R1,R15)       POINT PAST ANY PREVIOUS DATA
         MVC   0(253,R14),3(R2)    CONCATENATE IDR (MAX LENGTH IS 256)
         SR    R0,R0
         IC    R0,1(,R2)           GET THE IDR DATA LENGTH
         SH    R0,HW2
         AR    R1,R0               ADJUST REMAINING IDR BYTE COUNT
         BAS   R14,ESDIDREC        EXTRACT SOME (MORE) IDR DATA
*                                  RETURN HERE ONLY IF MORE IDRS FOLLOW
         B     ESDHLDLP            GET NEXT HELD RECORD
ESDXACHK TM    DSORGTYP,OVLY       IS THIS AN OVERLAY PROGRAM?
         BO    ESDFMTOK            YES, BYTE IS NOT XA FLAGS
         TM    12(R1),X'3F'        ANY XA FLAGS ON FOR THIS LABEL?
         BZ    ESDFMTOK            NO  (ALWAYS ZERO FOR NULL)
         LA    R15,34
         ALR   R6,R15              POINT TO AFTER XA FLAG BYTE DISPLAY
         LA    R0,1                DISPLAY ESDXAMSG IN BLUE
         BAS   R14,COLOURSW        SET NEW DISPLAY COLOUR
         SLR   R6,R15              POINT BACK TO NEXT LINE MINUS 80
         TM    STATUS5,$5EDS+$5COLR+$5HILT USING COLOURS?
         BO    ESDXALOK            YES, HIGHLIGHTING FINISHED
         MVI   34(R6),FLDOUTLO     NO, REVERT TO LOW INTENSITY
ESDXALOK MVC   35(45,R6),ESDXAMSG  YES, SHOW AMODE/RMODE BIT MEANINGS
         B     ESDHIOK2            THIS LINE DONE SO GO LOAD HEADINGS
ESDFDOWN MVC   60(18,R6),ESDDOWNM  NEED TO SCROLL DOWN FOR ID RECORDS
ESDFMTDN MVC   COUNT,DOUBLE        RESTORE CURRENT COUNT VALUE
ESDFMTOK TM    STATUS5,$5EDS+$5COLR+$5HILT USING COLOURS?
         BO    ESDHIOK2            YES, HIGHLIGHTING FINISHED
         MVI   79(R6),FLDOUTLO     NO, REVERT TO LOW INTENSITY
ESDHIOK2 L     R1,SCRNCOLS         LOAD SCREEN WIDTH
         AR    R1,R1               DOUBLE IT
         A     R1,SCRNCOLS         TRIPLE IT TO GET RULER LINE OFFSET
         AL    R1,SCREENBF         POINT TO THE RULER LINE
         MVC   0(80,R1),ESDFMTHD   SUPPLY ESD FORMAT COLUMN HEADINGS
         TM    DSORGTYP,OVLY       IS THIS AN OVERLAY PROGRAM?
         BZ    PGMFMXIT            NO, ESD FORMATTING NOW COMPLETE
         MVC   32(2,R1),=C'OV'     YES, CORRECT HEADING
         B     PGMFMXIT            ESD FORMATTING NOW COMPLETE
         SPACE
ESDIDREC DS    0H                  EXTRACT DETAILS FOR AN ESDID
         TM    2(R2),X'01'         ZAP SERVICE AID TYPE?
         BO    ESDIDZAP            YES
         TM    2(R2),X'04'         TRANSLATOR TYPE?
         BO    ESDIDTRN            YES
         TM    2(R2),X'08'         USER TYPE?
         BO    ESDIDUSR            YES
         B     ESDIDNUL            NO, DISCARD RECORD AND RETURN
ESDIDZAP DS    0H                  PROCESS ZAP IDR
         CLI   1(R2),X'FA'         250 DATA BYTES?
         BNE   ESDIDNUL            NO, DISCARD RECORD AND RETURN
         ICM   R1,8,3(R2)          LOAD THE ZAP ENTRY COUNT BYTE
         SLL   R1,3                SHIFT OUT POSSIBLE FLAG BITS
         SRL   R1,27               GET THE ZAP ENTRY COUNT
         LTR   R1,R1
         BNP   ESDIDRTN            ZERO SO NO DATA IN THIS RECORD
         LA    R15,4(,R2)          POINT TO FIRST ZAP ENTRY
ESDZAPLP CLC   0(2,R15),LINKAREA+2 MATCHING ESD ID?
         BE    ESDZAPON            YES
         LA    R15,13(,R15)        NO, POINT TO NEXT ZAP ENTRY
         BCT   R1,ESDZAPLP         CONTINUE SCAN OF ZAP IDR
         B     ESDIDRTN            SCAN OF ZAP IDR NOW COMPLETE
ESDZAPON MVI   57(R6),C'Y'         INDICATE THAT CSECT HAS BEEN ZAPPED
         A     R6,SCREENSZ         POINT TO SHADOW BUFFER
         OI    57(R6),X'10'        MAKE THE ZAP FLAG BLINK
         S     R6,SCREENSZ         POINT BACK TO PRIMARY BUFFER
         B     ESDIDNUL            SCAN OF ZAP IDR NOW COMPLETE
ESDIDTRN DS    0H                  PROCESS TRANSLATOR IDR
         CLI   35(R6),C' '         SOME INFORMATION ALREADY LOADED?
         BNE   ESDIDNUL            YES, DISCARD THIS RECORD
ESDTRNLP CH    R1,=H'320'          MORE THAN 320 BYTES TO GO?
         BH    ESDTRNOK            YES, CONTINUE
         CLI   1(R2),X'FF'         LAST IDR OF THIS TYPE?
         BNE   ESDTRNOK            YES, CONTINUE
         TM    2(R2),X'80'         LAST IDR RECORD OF ANY TYPE?
         BO    ESDTRNOK            YES, CONTINUE
         TM    LINKAREA+1,X'80'    EXTRACTING DATA FROM DIV?
         BO    ESDIDRTN            YES, TACK ON MORE DATA TO SCAN
         C     R7,HOLDEND          IS THIS THE LAST HELD RECORD?
         BE    ESDIDRTN            YES, TACK ON MORE DATA TO SCAN
         LR    R0,R7               SAVE CURRENT RECORD CURSOR
         L     R7,DIRNXT(,R7)      POINT TO NEXT HELD RECORD DETAILS
         TM    DIRLEN(R7),X'80'    IS THIS END-OF-FILE?
         BO    ESDTRNEX            YES, TIME TO BALE OUT
         L     R7,DIRREC(,R7)      POINT TO NEXT RECORD'S DATA
         CLI   0(R7),X'80'         IS IT AN IDR?
         BNE   ESDTRNGO            NO, NO MORE DATA TO TACK ON
         TM    2(R7),X'04'         IS IT A TRANSLATOR IDR?
         BNO   ESDTRNGO            NO, NO MORE DATA TO TACK ON
ESDTRNEX LR    R7,R0               RESTORE CURRENT RECORD CURSOR
         B     ESDIDRTN            TRY TO TACK ON MORE DATA TO SCAN
ESDTRNGO LR    R7,R0               RESTORE CURRENT RECORD CURSOR
ESDTRNOK ICM   R0,12,0(R15)        LOAD ESD ID
         SLL   R0,1                SHIFT OUT LAST-ID BIT
         SRL   R0,1                RESTORE TO CORRECT ALIGNMENT
         CLM   R0,12,LINKAREA+2    MATCHING ESDID?
         BE    ESDGOTRN            YES
         TM    0(R15),X'80'        LAST ESD ID IN ENTRY?
         BO    ESDNXTRN            YES
         LA    R15,2(,R15)         NO, POINT TO NEXT ESD ID
         SH    R1,HW2              ADJUST DATA COUNT
         BP    ESDTRNLP            NO DATA LEFT SO RETURN
         B     ESDIDNUL            GO TACK ON MORE DATA TO SCAN
ESDNXTRN LA    R0,18               GET LENGTH IF ONE TRANSLATOR
         TM    2(R15),X'01'        TWO TRANSLATORS?
         BZ    *+8                 NO
         LA    R0,18+15            YES, GET OFFSET TO NEXT ENTRY
         AR    R15,R0              POINT TO NEXT TRANSLATOR
         SR    R1,R0               ADJUST LENGTH
         BNP   ESDIDNUL            NO DATA LEFT SO RETURN
         B     ESDTRNLP            PROCESS NEXT ESD TRANSLATOR ENTRY
ESDGOTRN TM    0(R15),X'80'        LAST ESD ID IN ENTRY?
         BO    ESDLDTRN            YES
         LA    R15,2(,R15)         NO, POINT TO NEXT ESD ID
         SH    R1,HW2              ADJUST DATA COUNT
         BNP   ESDIDNUL            NO DATA LEFT SO RETURN
         B     ESDGOTRN            SEE IF THIS IS THE LAST ONE
ESDLDTRN TM    2(R15),X'01'        TWO TRANSLATORS?
         BZ    ESDSLTRN            NO, JUST ONE SLOT PRESENT
         CLC   =X'000F',31(R15)    ZERO JULIAN DAY IN SECOND SLOT?
         BE    ESDSLTRN            YES, NOT A "PROPER" SLOT SO USE 1ST
         LA    R0,15               NO, GET 1ST TO 2ND OFFSET DIFFERENCE
         AR    R15,R0              USE THE SECOND TRANSLATOR IDR SLOT
         SR    R1,R0
ESDSLTRN STM   R14,R5,12(R13)      SAVE REGISTERS
         MVC   52(8,R13),DOUBLE    SAVE DOUBLE
         LA    R2,35(,R6)          POINT TO THE DATE DISPLAY SLOT
         ICM   R4,7,15(R15)        LOAD THE JULIAN DATE OF TRANSLATE
ESDCHKDT ST    R4,DOUBLE           STORE DATE FOR EXAMINATION
         TM    DOUBLE+3,X'0F'      SIGN AS EXPECTED?
         BNO   ESDDATDN            NO, REJECT IT
         NI    DOUBLE+3,X'F0'      YES, ZERO IT
         CLI   DOUBLE+2,X'36'      DDD OVER 369?
         BH    ESDDATDN            YES, REJECT IT
         LA    R0,3                THREE BYTES TO CHECK
         LA    R1,DOUBLE+1         POINT TO FIRST BYTE
ESDVFYLP CLI   0(R1),X'A0'         IS THE HIGH-ORDER DIGIT DECIMAL?
         BNL   ESDDATDN            NO, REJECT IT
         NI    0(R1),X'0F'         YES, ZERO IT
         CLI   0(R1),X'0A'         IS THE LOW-ORDER DIGIT DECIMAL?
         BNL   ESDDATDN            NO, REJECT IT
         LA    R1,1(,R1)           THIS BYTE OKAY, POINT TO THE NEXT
         BCT   R0,ESDVFYLP         PROCESS NEXT BYTE
         L     R15,=A(IDRDATE)
         BASR  R14,R15             CONVERT JULIAN DATE TO YY-MM-DD
         MVC   0(8,R2),DOUBLE      LOAD THE DATE INTO THE DISPLAY LINE
         MVI   8(R2),C'_'          INDICATE RELATED DATUM
ESDDATDN MVC   DOUBLE,52(R13)      RESTORE DOUBLE
         LM    R14,R5,12(R13)      RESTORE REGISTERS
         TM    2(R2),X'08'         USER TYPE?
         BO    ESDFMTDN            YES, TERMINATE ESD FORMATTING
         MVC   44(10,R6),3(R15)    NO, LOAD THE TRANSLATOR NAME
         TR    44(10,R6),PERIODS   TRANSLATE UNPRINTABLES
         LA    R0,9                CHECK FOR LEADING BLANK NINE TIMES
ESDTRBLP CLI   44(R6),C' '         LEADING BLANK?
         BNE   ESDTRBOK            NO
         MVC   44(10,R6),45(R6)    YES, SUPPRESS IT
         BCT   R0,ESDTRBLP         CONTINUE
ESDTRBOK CLI   53(R6),C' '         ONE BLANK TO SPARE?
         BE    ESDTR1BL            YES
         CLI   13(R15),X'0F'       SINGLE HEX DIGIT VERSION/RELEASE?
         BH    ESDIDNUL            NO, SKIP TRANSLATOR RELEASE FORMAT
         MVI   54(R6),C'_'         YES, INDICATE RELATED DATUM
         MVC   55(1,R6),13(R15)    SHOW ONE HEX DIGIT VERSION/RELEASE
         TR    55(1,R6),HEXTAB     MAKE IT HEX NUMERIC CHARACTER
         B     ESDIDNUL            TRANSLATOR LEVEL FORMATTING ALL DONE
ESDTR1BL LA    R4,52(,R6)          POINT TO BEFORE TARGET BYTE
ESDTRBLT CLI   0(R4),C' '          ANOTHER TRAILING BLANK?
         BNE   ESDTRFMT            NO, START FORMATTING
         BCTR  R4,0                YES, BACK UP ONE BYTE
         B     ESDTRBLT            GO TEST FOR BLANK AGAIN
ESDTRFMT MVI   1(R4),C'_'          YES, INDICATE RELATED DATUM
         UNPK  2(3,R4),13(2,R15)   SHOW TWO HEX DIGIT VERSION/RELEASE
         TR    2(2,R4),HEXTAB-240  MAKE IT HEX NUMERIC CHARACTERS
         MVI   4(R4),C' '          ERASE GARBAGE
         CLI   2(R4),C'0'          LEADING ZERO?
         BNE   *+10                NO
         MVC   2(2,R4),3(R4)       YES, SHUFFLE UP TO SUPPRESS IT
         CLI   55(R6),C' '         ROOM FOR MORE DATA?
         BNE   ESDIDNUL            NO, DONE FORMAT PROCESSING
         CLI   14(R15),16          SINGLE DIGIT TRANSLATOR MOD-LEVEL?
         BL    ESDTRREL            YES, GO USE IT
         CLI   53(R6),C' '         NO, ROOM FOR '.MM'?
         BNE   ESDTRMD1            NO, TRY AGAIN FOR SINGLE DIGIT
         MVI   53(R6),C'.'         YES, SUPPLY THE POINT
         UNPK  54(3,R6),14(2,R15)  LOAD THE TRANSLATOR MODIFICATION
         TR    54(2,R6),HEXTAB-240 MAKE IT HEX NUMERIC CHARACTER
         MVI   56(R6),C' '         ERASE GARBAGE
         LA    R4,52(,R6)          POINT TO BEFORE POINT
ESDTRM2L CLI   0(R4),C' '          POINT PRECEEDED BY A BLANK?
         BNE   ESDIDNUL            NO, TRANSLATOR LEVEL FORMATTING DONE
         MVC   0(4,R4),1(R4)       YES, SHUFFLE UP
         BCTR  R4,0                BACKUP ONE BYTE
         B     ESDTRM2L            CONTINUE IMBEDDED BLANK CHECK
ESDTRMD1 TM    14(R15),X'0F'       SINGLE DIGIT TRANSLATOR MOD-LEVEL?
         BNZ   ESDIDNUL            NO, TERMINATE TRANSLATOR LEVEL FMT
         UNPK  55(1,R6),14(1,R15)  COPY THE TRANSLATOR MODIFICATION
         B     ESDTRLOK            JUMP OVER THE CONVENTIONAL MOVE
ESDTRREL MVC   55(1,R6),14(R15)    COPY THE TRANSLATOR MODIFICATION
ESDTRLOK TR    55(1,R6),HEXTAB     MAKE IT HEX NUMERIC CHARACTER
         CLI   54(R6),C' '         ROOM FOR THE POINT?
         BNE   ESDTRNLC            NO, TRY TO SHOW IT IN LOWER CASE
         MVI   54(R6),C'.'         YES, SUPPLY THE POINT
         LA    R4,53(,R6)          POINT TO BEFORE THE POINT
ESDTRPBL CLI   0(R4),C' '          POINT PRECEEDED BY A BLANK?
         BNE   ESDIDNUL            NO, TRANSLATOR LEVEL FORMATTING DONE
         MVC   0(3,R4),1(R4)       YES, SHUFFLE UP
         BCTR  R4,0                BACKUP ONE BYTE
         B     ESDTRPBL            CONTINUE IMBEDDED BLANK CHECK
ESDTRNLC CLI   55(R6),C'0'         DECIMAL NUMERIC?
         BL    ESDTRELX            NO, HEX DIGIT GREATER THAN NINE
         BH    ESDTRNGE            YES, MAYBE USE SUPERSCRIPT DIGIT
         MVI   55(R6),C' '         SUPPRESS ZERO MODIFICATION LEVEL
         B     ESDIDNUL            TRANSLATOR LEVEL FORMATTING ALL DONE
ESDTRNGE TM    STATUS5,$5GE        GRAPHIC ESCAPE ALLOWABLE?
         BO    ESDTRNSS            YES, USE SUPERSCRIPT FOR MOD LEVEL
         MVI   55(R6),C' '         NO, ERASE MOD LEVEL DIGIT (1 TO 9)
*                                  BECAUSE 2.1 WOULD LOOK LIKE 21
         B     ESDIDNUL            TRANSLATOR LEVEL FORMATTING ALL DONE
ESDTRNSS A     R6,SCREENSZ         POINT TO SHADOW BUFFER
         OI    55(R6),X'40'        ACTIVATE GRAPHIC ESCAPE FOR BYTE
         S     R6,SCREENSZ         POINT BACK TO PRIMARY BUFFER
         B     ESDIDNUL            TRANSLATOR LEVEL FORMATTING ALL DONE
ESDTRELX NI    55(R6),X'BF'        CHANGE ALPHA HEX DIGIT TO LOWER CASE
         B     ESDIDNUL            TRANSLATOR LEVEL FORMATTING ALL DONE
ESDIDUSR DS    0H                  PROCESS USER IDENTIFY IDR
ESDUSRLP CLC   0(2,R15),LINKAREA+2 MATCHING ESDID?
         BE    ESDGOTID            YES
         ICM   R4,8,5(R15)         NO, GET LENGTH OF IDENTIFY DATA
         SLL   R4,2                MAX LENGTH IS FORTY
         SRL   R4,26
         LA    R0,6(,R4)           GET THE LENGTH OF THIS ENTRY
         AR    R15,R0              POINT TO NEXT USER IDENTIFY ENTRY
         SR    R1,R0               ADJUST LENGTH
         BNP   ESDIDRTN            NO DATA LEFT SO RETURN
         CH    R1,=H'320'          MORE THAN 320 BYTES TO GO?
         BH    ESDUSRLP            YES, CONTINUE
         CLI   1(R2),X'FF'         LAST IDR OF THIS TYPE?
         BNE   ESDUSRLP            YES, CONTINUE
         TM    2(R2),X'80'         LAST IDR RECORD OF ANY TYPE?
         BO    ESDUSRLP            YES, CONTINUE
         B     ESDIDRTN            NO, TACK ON MORE DATA TO SCAN
ESDGOTID STM   R14,R5,12(R13)      SAVE REGISTERS
         MVC   52(8,R13),DOUBLE    SAVE DOUBLE
         ICM   R4,8,5(R15)         GET LENGTH OF IDENTIFY DATA
         SLL   R4,2                MAX LENGTH IS FORTY
         SRL   R4,26
         BCTR  R4,0                DECREMENT FOR EXECUTE
         EX    R4,ESDLDUSR         SHOW THE USER IDENTIFY DATA
         EX    R4,ESDTRUSR         TRANSLATE UNPRINTABLES
         LA    R2,59(,R6)          POINT TO THE DATE DISPLAY SLOT
         ICM   R4,7,2(R15)         LOAD THE JULIAN DATE OF IDENTIFY
         B     ESDCHKDT            GO PROCESS DATE INFORMATION
ESDLDUSR MVC   68(0,R6),6(R15)     <<< EXECUTED >>>
ESDTRUSR TR    68(12,R6),PERIODS   <<< EXECUTED >>>
ESDIDNUL SR    R1,R1               DISCARD THIS RECORD COMPLETELY
ESDIDRTN DS    0H                  RETURN FOR THE NEXT RECORD
         TM    2(R2),X'80'         LAST IDR RECORD?
         BO    ESDFMTDN            YES, THIS SCREEN LINE NOW COMPLETE
         BR    R14                 NO, RETURN FOR NEXT RECORD
         SPACE
**********************************************************************
*                                                          *         *
*         FORMAT LOAD MODULE IDENTIFICATION RECORD         *  GP@FT  *
*                                                          *  09/92  *
**********************************************************************
         SPACE
IDRFRMAT DS    0H                  BREAK OUT IDENTIFICATION RECORD DATA
         CLC   38(42,R6),BLANKS    GOT FORTY-TWO BLANKS FOR FORMAT?
         BNE   PGMFMXIT            NO, SO RETURN WITHOUT ACTION
         SR    R1,R1               PREPARE FOR INSERT
         IC    R1,1(,R2)           GET IDR LENGTH INDICATOR
         LA    R0,1(,R1)           GET THE RECORD LENGTH
         C     R0,DIRLEN(,R7)      IS THIS CORRECT?
         BNE   PGMFMXIT            NO, RETURN WITHOUT ACTION
**       S     R0,OFFSET           GET LENGTH EXTENDING ON TO SCREEN
**       TM    MODE,MD_HEX         IN HEXADECIMAL MODE?
**       BZ    *+8                 NO
**       SLL   R0,1                YES, SO DOUBLE IT
**       CH    R0,=H'38'           GOT FORTY-TWO BLANKS FOR FORMAT?
**       BH    PGMFMXIT            NO, SO RETURN WITHOUT ACTION
         TM    2(R2),X'01'         ZAP SERVICE AID TYPE?
         BO    IDRZAP1             YES
         TM    2(R2),X'02'         LINKAGE EDITOR TYPE?
         BO    IDRLKED1            YES
         TM    2(R2),X'04'         TRANSLATOR TYPE?
         BO    IDRTRAN1            YES
         TM    2(R2),X'08'         USER TYPE?
         BO    IDRUSER1            YES
         B     PGMFMXIT            UNSUPPORTED TYPE SO JUST EXIT
         SPACE
IDRZAP1  CLI   1(R2),X'FA'         250 DATA BYTES?
         BNE   PGMFMXIT            NO, CAN'T BE A ZAP IDR
         L     R1,OFFSET           GET THE SCROLL LEFT/RIGHT OFFSET
         SH    R1,=H'240'
         BM    PGMFMXIT            TOO FAR LEFT FOR ANY EXTRA DISPLAY
         ICM   R4,8,3(R2)          LOAD THE ZAP ENTRY COUNT BYTE
         SLL   R4,3                SHIFT OUT POSSIBLE FLAG BITS
         SRL   R4,27               GET THE ZAP ENTRY COUNT
         L     R15,SCRNCOLS
         SRL   R15,1
         SR    R1,R15
         BM    IDRZAPCT            JUST SHOW THE ZAP COUNT
         SR    R0,R0               CLEAR FOR DIVIDE
         DR    R0,R15              DETERMINE WHICH ENTRIES TO FORMAT
         LTR   R1,R1
         BZ    IDRZAPCT            JUST SHOW THE ZAP COUNT
         CR    R1,R4               TOO FAR RIGHT FOR DETAILS?
         BH    IDRZAPCT            YES, JUST SHOW THE ZAP COUNT
         STC   R1,LINKAREA+3       NO, SAVE THE NUMBER FOR LATER
         BCTR  R1,0                DECREMENT FOR INDEX
         MH    R1,=H'13'
         LA    R1,4(R1,R2)         POINT TO THE ZAP IDR ENTRY
         ST    R1,CALLPARM+12      REMEMBER FOR LATER
         ICM   R4,7,2(R1)          LOAD JULIAN DATE OF ZAP
         B     IDRDTCHK            GO CHECK THE IDR DATE
IDRZAPCT LA    R15,38              LINE OFFSET TO NON-DATA START
         ALR   R6,R15              POINT TO ZAP COUNT FORMAT AREA
         BAS   R14,COLRINFO        SET INFORMATION DISPLAY COLOUR
         SLR   R6,R15              POINT BACK TO CURRENT LINE START
         MVC   46(34,R6),IDRZPMSG
         CVD   R4,DOUBLE           SHOW THE RECORD'S ZAP ENTRY COUNT
         MVC   42(3,R6),=X'202120'
         LA    R1,44(,R6)          IN CASE OF ZERO COUNT
         EDMK  41(4,R6),DOUBLE+6
         BCTR  R1,0                POINT TO BEFORE FIRST DIGIT
         MVI   0(R1),C'('
         CLI   3(R2),1             EXACTLY ONE ENTRY?
         BNE   IDRTIDY             NO, GO DO FINAL TIDY UP
         MVC   76(4,R6),IDRZPSUF   YES, CHANGE NOUN TO SINGULAR
         B     IDRTIDY             GO DO FINAL TIDY UP
         SPACE
IDRLKED1 ICM   R4,7,15(R2)         LOAD JULIAN DATE OF LINK EDIT
         CLI   1(R2),17            SEVENTEEN DATA BYTES?
         BE    IDRDTCHK            YES, GO CHECK THE IDR DATE
         CLI   1(R2),17+4          TWENTY-ONE DATA BYTES?
         BE    IDRDTCHK            YES, GO CHECK THE IDR DATE
         B     PGMFMXIT            NO, CAN'T BE A LINK EDIT IDR
         SPACE
IDRTRAN1 CLI   1(R2),X'FF'         PROBABLE DATA OVERFLOW?
         BE    PGMFMXIT            YES, RETURN WITHOUT ACTION
         CLI   1(R2),20            AT LEAST TWENTY IDR DATA BYTES?
         BL    PGMFMXIT            NO, RETURN WITHOUT ACTION
         L     R1,DIRLEN(,R7)      LOAD THE RECORD LENGTH
         SH    R1,HW4              GET OFFSET TO JULIAN DATE
         LA    R1,0(R1,R2)         POINT TO THE DATE
         ICM   R4,7,1(R1)          LOAD JULIAN DATE OF TRANSLATE
         B     IDRDTCHK            GO CHECK THE IDR DATE
         SPACE
IDRUSER1 CLI   2(R2),X'88'         LAST IDR IN LOAD MODULE?
         BNE   PGMFMXIT            NO, RETURN WITHOUT ACTION
         SR    R1,R1
         IC    R1,8(,R2)           GET ENTRY DATA LENGTH
         LA    R1,8(,R1)           GET RECORD DATA LENGTH
         CLM   R1,1,1(R2)          CORRECT ASSUMPTION?
         BNE   PGMFMXIT            NO, RETURN WITHOUT ACTION
         ICM   R4,7,5(R2)          YES, ONLY ONE ENTRY SO LOAD DATE
*        B     IDRDTCHK            GO CHECK THE IDR DATE
         SPACE
IDRDTCHK ST    R4,DOUBLE           STORE DATE FOR EXAMINATION
         TM    DOUBLE+3,X'0F'      SIGN AS EXPECTED?
         BNO   PGMFMXIT            NO, REJECT IT
         NI    DOUBLE+3,X'F0'      YES, ZERO IT
         CLI   DOUBLE+2,X'36'      DDD OVER 369?
         BH    PGMFMXIT            YES, REJECT IT
         ICM   R0,3,DOUBLE+2       ZERO DDD?
         BZ    PGMFMXIT            YES, REJECT IT
         LA    R0,3                THREE BYTES TO CHECK
         LA    R1,DOUBLE+1         POINT TO FIRST BYTE
IDRVFYLP CLI   0(R1),X'A0'         IS THE HIGH-ORDER DIGIT DECIMAL?
         BNL   PGMFMXIT            NO, REJECT IT
         NI    0(R1),X'0F'         YES, ZERO IT
         CLI   0(R1),X'0A'         IS THE LOW-ORDER DIGIT DECIMAL?
         BNL   PGMFMXIT            NO, REJECT IT
         LA    R1,1(,R1)           THIS BYTE OKAY, POINT TO THE NEXT
         BCT   R0,IDRVFYLP         PROCESS NEXT BYTE
         L     R15,=A(IDRDATE)
         BASR  R14,R15             CONVERT JULIAN DATE TO YY-MM-DD
         TM    2(R2),X'01'         ZAP SERVICE AID TYPE?
         BO    IDRZAP2             YES
         TM    2(R2),X'02'         LINKAGE EDITOR TYPE?
         BO    IDRLKED2            YES
         TM    2(R2),X'04'         TRANSLATOR TYPE?
         BO    IDRTRAN2            YES
*        TM    2(R2),X'08'         USER TYPE?
         B     IDRUSER2            YES
         SPACE
IDRZAP2  CLI   0(R6),C'('          ALREADY DONE ONE ON THIS LINE?
         BE    IDRZAP3             YES, GO FORMAT ON THE RIGHT
         BAS   R14,COLRINFO        SET INFORMATION DISPLAY COLOUR
         TM    STATUS5,$5EDS+$5COLR+$5HILT USING COLOURS?
         BO    IDRZOKAY            YES, HIGHLIGHTING FINISHED
         MVI   0(R6),FLDOUTHI      NO, MAKE HIGH INTENSITY
         MVI   79(R6),FLDOUTLO     REVERT TO LOW INTENSITY
IDRZOKAY L     R1,CALLPARM+12      POINT TO THE ZAP IDR ENTRY
         MVC   0(4,R6),=C'(ZAP'
         MVC   5(8,R6),5(R1)       LOAD IDR DATA INTO DISPLAY LINE
         TR    5(8,R6),PERIODS     TRANSLATE UNPRINTABLES
         MVC   14(7,R6),=X'A39640C5E28984'   C'TO ESID'
         UNPK  21(5,R6),0(3,R1)    LOAD ESD ID INTO DISPLAY LINE
         TR    21(4,R6),HEXTAB-240 MAKE DISPLAYABLE HEX CHARACTERS
         MVI   25(R6),C' '         ERASE GARBAGE
         MVC   26(2,R6),=X'9695'   C'ON'
         MVC   29(8,R6),DOUBLE     LOAD DATE INTO DISPLAY LINE
         MVI   37(R6),C')'
         BAS   R14,IDRESDID        ATTEMPT TO IDENTIFY EXTERNAL SYMBOL
         L     R7,4(,R13)          POINT TO PREVIOUS SAVE AREA
         L     R7,48(,R7)          RESTORE CURRENT RECORD POINTERS
         L     R2,DIRREC(,R7)
         LTR   R15,R15             SUCCESSFUL IDENTIFICATION?
         BNP   IDRIDOKL            NO
         MVC   17(8,R6),0(R15)     YES, LOAD EXTERNAL SYMBOL NAME
         TR    17(8,R6),PERIODS    TRANSLATE UNPRINTABLES
IDRIDOKL CLC   3(1,R2),LINKAREA+3  ANOTHER ENTRY AFTER THIS?
         BNH   IDRTIDYX            NO, GO DO FINAL TIDY UP
         ICM   R4,7,15(R1)         YES, GET ITS DATE
         B     IDRDTCHK            VERIFY THE DATE FORMAT
IDRZAP3  L     R1,CALLPARM+12      POINT TO FIRST (LEFT) ENTRY
         LA    R1,13(,R1)          POINT TO NEXT (RIGHT) ENTRY
         ST    R1,CALLPARM+12      SAVE FOR IDRESDID
         MVC   40(4,R6),=C'(ZAP'
         MVC   45(8,R6),5(R1)      LOAD IDR DATA INTO DISPLAY LINE
         TR    45(8,R6),PERIODS    TRANSLATE UNPRINTABLES
         MVC   54(7,R6),=X'A39640C5E28984'   C'TO ESID'
         UNPK  61(5,R6),0(3,R1)    LOAD ESD ID INTO DISPLAY LINE
         TR    61(4,R6),HEXTAB-240 MAKE DISPLAYABLE HEX CHARACTERS
         MVI   65(R6),C' '         ERASE GARBAGE
         MVC   66(2,R6),=X'9695'   C'ON'
         MVC   69(8,R6),DOUBLE     LOAD DATE INTO DISPLAY LINE
         MVI   77(R6),C')'
         BAS   R14,IDRESDID        ATTEMPT TO IDENTIFY EXTERNAL SYMBOL
         LTR   R15,R15             SUCCESSFUL IDENTIFICATION?
         BNP   IDRTIDYX            NO, GO DO FINAL TIDY UP
         MVC   57(8,R6),0(R15)     YES, LOAD EXTERNAL SYMBOL NAME
         TR    57(8,R6),PERIODS    TRANSLATE UNPRINTABLES
         B     IDRTIDYX            GO DO FINAL TIDY UP
         SPACE
IDRLKED2 LA    R15,38              LINE OFFSET TO NON-DATA START
         ALR   R6,R15              POINT TO LINK EDIT INTERPRET AREA
         BAS   R14,COLRINFO        SET INFORMATION DISPLAY COLOUR
         SLR   R6,R15              POINT BACK TO START OF LINE
         MVC   40(5,R6),=C'(LKED'
         BAS   R14,IDRTRAN3        CALL COMMON FORMAT ROUTINE
         CLI   1(R2),21            FOUR-BYTE TIME EXTENSION PRESENT?
         BNE   IDRTIDY             NO, GO DO FINAL TIDY UP
         TM    21(R2),X'0F'        EXPECTED DECIMAL SIGN?
         BNO   IDRTIDY             NO, GO DO FINAL TIDY UP
         UNPK  DOUBLE,18(4,R2)     YES, UNPACK THE TIME
         MVC   41(4,R6),=C'BIND'   FLAG NEW IDR FORMAT
         MVC   58(2,R6),=X'81A3'   C'AT'
         MVC   61(2,R6),DOUBLE+2   COPY HH
         MVI   63(R6),C':'
         MVC   64(2,R6),DOUBLE+4   COPY MM
         MVI   66(R6),C':'
         MVC   67(2,R6),DOUBLE+6   COPY SS
         MVC   69(2,R6),BLANKS     ERASE LAST OF BINDER NAME
         B     IDRTIDY             GO DO FINAL TIDY UP
         SPACE
IDRTRAN3 MVC   46(2,R6),=X'9695'   C'ON'
         MVC   49(8,R6),DOUBLE     LOAD DATE INTO DISPLAY LINE
         MVC   58(2,R6),=X'82A8'   C'BY'
         MVC   61(10,R6),3(R2)     LOAD THE LINKAGE EDITOR NAME
         MVI   72(R6),C'V'
         UNPK  73(3,R6),13(2,R2)   SHOW LINKAGE EDITOR VERSION NUMBER
         TR    73(2,R6),HEXTAB-240 MAKE DISPLAYABLE HEX CHARACTERS
         MVI   75(R6),C' '         ERASE GARBAGE
         MVI   76(R6),C'M'
         UNPK  77(3,R6),14(2,R2)   SHOW LINKAGE EDITOR MOD LEVEL
         TR    77(2,R6),HEXTAB-240 MAKE DISPLAYABLE HEX CHARACTERS
         MVI   79(R6),C')'         ERASE GARBAGE
         BR    R14                 RETURN TO CALLER
         SPACE
IDRTRAN2 LA    R15,38              LINE OFFSET TO NON-DATA START
         ALR   R6,R15              POINT TO LINK EDIT INTERPRET AREA
         BAS   R14,COLRINFO        SET INFORMATION DISPLAY COLOUR
         SLR   R6,R15              POINT BACK TO CURRENT LINE START
         A     R2,DIRLEN(,R7)      POINT PAST END OF RECORD
         SH    R2,HW18             POINT TO LAST 18 BYTES OF RECORD
         MVC   40(5,R6),=C'(TRAN'
         BAS   R14,IDRTRAN3        USE CODE COMMON WITH LINK EDIT IDR
         B     IDRTIDY             GO DO FINAL TIDY UP
         SPACE
IDRUIDLD MVC   65(0,R6),9(R2)      <<< EXECUTED >>>
IDRUSER2 LA    R15,38              LINE OFFSET TO NON-DATA START
         ALR   R6,R15              POINT TO LINK EDIT INTERPRET AREA
         BAS   R14,COLRINFO        SET INFORMATION DISPLAY COLOUR
         SLR   R6,R15              POINT BACK TO CURRENT LINE START
         MVC   40(9,R6),=C'(IDENTIFY'
         MVC   50(2,R6),=X'9695'   C'ON'
         MVC   53(8,R6),DOUBLE     LOAD DATE INTO DISPLAY LINE
         MVC   62(2,R6),=X'89A2'   C'IS'
         MVC   64(16,R6),BLANKS    ERASE RESIDUAL DATA
         SR    R1,R1
         IC    R1,8(,R2)           GET THE IDENTIFY DATA LENGTH
         BCTR  R1,0                DECREMENT FOR EXECUTE
         EX    R1,IDRUIDLD         COPY THE IDENTIFY DATA
         LA    R1,66(R1,R6)        POINT PAST THE COPIED DATA
         MVI   0(R1),C')'
*        B     IDRTIDY             GO DO FINAL TIDY UP
         SPACE
IDRTIDY  TR    40(40,R6),PERIODS   TRANSLATE UNPRINTABLES
IDRTIDYX TM    STATUS5,$5EDS+$5COLR+$5HILT USING COLOURS?
         BO    PGMFMXIT            YES, HIGHLIGHTING FINISHED
         MVI   38(R6),FLDOUTHI     NO, MAKE HIGH INTENSITY
         MVI   79(R6),FLDOUTLO     REVERT TO LOW INTENSITY
         B     PGMFMXIT            FORMAT SUCCESSFULLY COMPLETED
         SPACE
IDRESDID DS    0H                  LOOK FOR CESD ENTRY IN DATA ON SCRN
         SR    R15,R15             INDICATE NOTHING FOUND YET
         L     R7,HOLDTOP          POINT TO FIRST HELD RECORD ENTRY
IDRESTST ICM   R2,15,DIRREC(R7)    POINT TO DATA OF RECORD
         BZR   R14                 RETURN IF E-O-F (SHOULDN'T HAPPEN)
         CLI   0(R2),X'40'         TEST/SYM RECORD?
         BE    IDRESNXT            YES, IGNORE AND GET THE NEXT RECORD
         CLI   0(R2),X'20'         CESD RECORD?
         BNE   IDRESDIV            NO, PAST THEM SO CHECK DIV
         SR    R15,R15             PREPARE FOR INSERT
         ICM   R15,3,0(R1)         GET THE REQUIRED ESDID
         SH    R15,4(,R2)          GET ENTRY INTO THIS RECORD
         BM    IDRESDIV            PAST IT SO CHECK DIV
         SLL   R15,4               MULTIPLY BY SIXTEEN FOR INDEX
         LA    R15,8(,R15)         GET ENTRY OFFSET INTO RECORD
         C     R15,DIRLEN(,R7)     IS THE ENTRY IN THIS RECORD?
         BNL   IDRESNXT            NO, TRY NEXT RECORD
         ALR   R15,R2              POINT TO THE EXTERNAL SYMBOL NAME
         BR    R14                 RETURN TO CALLER
IDRESNXT SR    R15,R15             INDICATE NOTHING FOUND YET
         C     R7,HOLDEND          WAS THAT LAST HELD RECORD?
         BER   R14                 YES, REQUIRED DATA NOT ON SCREEN
         L     R7,DIRNXT(,R7)      POINT TO THE NEXT HELD RECORD
         B     IDRESTST            GO TEST THIS RECORD
IDRESDIV DS    0H                  CESD ENTRY NOT ON SCREEN SO TRY DIV
         ICM   R15,15,DIVORG       DIV AVAILABLE?
         BNPR  R14                 NO, RETURN WITHOUT SYMBOL NAME
         MVC   DOUBLE(4),COUNT     SAVE CURRENT COUNT VALUE
         ST    R14,DOUBLE+4        SAVE THE RETURN ADDRESS
         XC    COUNT,COUNT         START RETRIEVAL WITH FIRST RECORD
IDRESDTS LA    R0,8                GET ENTRY CODE (RECORD FETCH)
         L     R15,DIVADDR2        LOAD REVDIV ENTRY POINT
         BASR  R14,R15             CALL IT
         L     R1,CALLPARM+12      RESTORE IDR ENTRY POINTER
         LTR   R15,R15             SUCCESSFUL RETRIEVAL?
         BNZ   IDRESDNO            NO, SO GIVE UP
         CLI   0(R2),X'40'         TEST/SYM RECORD?
         BE    IDRESDNX            YES, IGNORE AND GET THE NEXT RECORD
         CLI   0(R2),X'20'         CESD RECORD?
         BNE   IDRESDNO            NO, PAST THEM SO GIVE UP
         ICM   R15,3,0(R1)         GET THE REQUIRED ESDID
         SH    R15,4(,R2)          GET ENTRY INTO THIS RECORD
         BM    IDRESDNO            PAST IT SO GIVE UP
         SLL   R15,4               MULTIPLY BY SIXTEEN FOR INDEX
         CH    R15,6(,R2)          IS THE ENTRY IN THIS RECORD?
         BNL   IDRESDNX            NO, TRY NEXT RECORD
         LA    R15,8(R15,R2)       POINT TO THE EXTERNAL SYMBOL NAME
         MVC   COUNT,DOUBLE        RESTORE CURRENT COUNT VALUE
         L     R14,DOUBLE+4        RESTORE THE RETURN ADDRESS
         BR    R14                 RETURN TO CALLER
IDRESDNX LA    R0,1                INCREMENT RECORD NUMBER
         A     R0,COUNT
         ST    R0,COUNT
         B     IDRESDTS            GO TEST NEXT RECORD
IDRESDNO SR    R15,R15             INDICATE NOTHING FOUND YET
         MVC   COUNT,DOUBLE        RESTORE CURRENT COUNT VALUE
         L     R14,DOUBLE+4        RESTORE THE RETURN ADDRESS
         BR    R14                 YES, REQUIRED DATA NOT ON SCREEN
         DROP  R8                  PGMFRMAT
         SPACE
*        DC    C'$PRIVATE'
$PRIVATE DC    X'5B979989A581A385'
*        DC    C'$UNRESOLVED(W)'
$UNRESOL DC    X'5BA4959985A29693A585844DA65D'
ESDTYPES DC    C'SD01ERLDPCCMPRNL0809WX0BPCQSQPQC' 111213OT'
*        SD  - SECTION DEFINITION
*        ER  - EXTERNAL REFERENCE ($UNRESOLVED)
*        LD  - LABEL DEFINITION
*        PC  - PRIVATE CODE DEFINITION ($PRIVATE)
*        CM  - COMMON BLOCK
*        PR  - PSEUDO REGISTER
*        NL  - NULL
*        WX  - WEAK EXTERNAL REFERENCE ($UNRESOLVED WEAK)
*        QS  - QUAD-ALIGNED SECTION DEFINITION
*        QP  - QUAD-ALIGNED PRIVATE CODE DEFINITION
*        QC  - QUAD-ALIGNED COMMON BLOCK
*        OT  - OVERLAY SEGMENT/ENTRY TABLE
*        ST  - SEGMENT TABLE
*        ET  - ENTRY TABLE
ESDFMTHD DC    CL80' ESID SYMBOL+TYPE OFFSET LENGTH XA TRANSLATION-DETA+
               ILS ZAP USER-IDENTIFY-DETAILS'
ESDXAMSG DC    C'(20:R64 10:A64 08:RSECT 04:R31 02:A31 01:A24)'
*        DC    C'IDR DATA OFF SCREEN'
ESDNOIDM DC    C'IDR ',X'8481A3814096868640A28399858595'
*        DC    C'(GO DOWN FOR DATA)'
ESDDOWNM DC    C'(',X'8796',C' DOWN ',X'869699408481A381',C')'
*        DC    C'ZAP IDENTIFICATION RECORD ENTRIES)'
IDRZPMSG DC    C'ZAP ID',X'8595A38986898381A389969540D9858396998440'
         DC    X'8595A3998985A2',C')'
*        DC    C'Y)  '
IDRZPSUF DC    X'A8',C')  '
         DC    0D'0'
         LTORG
         DC    0H'0'
         SPACE
**********************************************************************
*                                                          *         *
*         TAPE LABEL FORMAT ROUTINES                       *  GP@P6  *
*                                                          *  10/90  *
**********************************************************************
         SPACE
         USING TAPELBLS,R15
TAPELBLS TM    TSTRECFM,X'40'      VARIABLE LENGTH RECORDS?
         BOR   R14                 YES, CAN'T BE TAPE LABELS
         ICM   R0,15,OFFSET        SCROLLED LEFT MAXIMUM?
         BNZR  R14                 NO, WON'T HAVE RIGHT DATA ON SHOW
         L     R1,SCRNCOLS         GET THE SCREEN WIDTH
         SLL   R1,2                QUADRUPLE IT TO GET DATA OFFSET
         AL    R1,SCREENBF         POINT TO FILE DATA
         CLI   3(R1),C'1'          VOL1/HDR1/EOV1/EOF1?
         BNER  R14                 NO, CAN'T BE TAPE LABELS
         ST    R14,HOLDR           SAVE RETURN ADDRESS
         CLC   VOLLBL,0(R1)        VOL1?
         BNE   DSLB1CHK            NO
         SH    R8,HW3              YES, ROOM FOR THREE LINES?
         BMR   R14                 NO, CAN'T SHOW ANYTHING
         BAS   R14,COLRINFO        SET INFORMATION DISPLAY COLOUR
         A     R6,SCRNCOLS         POINT TO NEXT LINE
         A     R6,SCRNCOLS         POINT TO NEXT LINE
         MVC   0(8,R6),VOLAB11     SUPPLY 'VOL=SER='
         MVC   8(6,R6),4(R1)       SUPPLY VOLUME SERIAL NUMBER
         MVC   53(6,R6),VOLAB12    SUPPLY 'OWNER='
         MVC   59(10,R6),41(R1)    SUPPLY THE OWNER NAME
*        TR    0(80,R6),PERIODS    FILE DATA LINES ALREADY TRANSLATED
         A     R6,SCRNCOLS         POINT TO NEXT LINE
         LA    R5,3(,R5)           ADD EXTRA LINES USED
         A     R1,SCRNCOLS         POINT TO NEXT DATA LINE
         CLI   3(R1),C'1'          HDR1/EOV1/EOF1?
         BNE   TPLBLRTN            NO, CAN'T BE TAPE LABELS
DSLB1CHK CLC   HDRLBL,0(R1)        HDR1?
         BE    DODSLBL1            YES
         CLC   EOVLBL,0(R1)        EOV1?
         BE    DODSLBL1            YES
         CLC   EOFLBL,0(R1)        EOF1?
         BNE   TPLBLRTN            NO, RETURN
DODSLBL1 SH    R8,HW4              ROOM FOR FOUR LINES?
         BM    TPLBLRTN            NO
         BAS   R14,COLRINFO        SET INFORMATION DISPLAY COLOUR
         A     R6,SCRNCOLS         POINT TO NEXT LINE
         MVC   0(80,R6),DSLAB11    SUPPLY TEMPLATE
         MVC   7(17,R6),4(R1)      LOAD DATA SET IDENTIFIER
         MVC   42(6,R6),21(R1)     LOAD DATA SET SERIAL NUMBER (VOL #1)
         MVC   69(4,R6),27(R1)     LOAD VOLUME SEQUENCE NUMBER
*        TR    0(80,R6),PERIODS    FILE DATA LINES ALREADY TRANSLATED
         A     R6,SCRNCOLS         POINT TO NEXT LINE
         MVC   0(80,R6),DSLAB12    SUPPLY TEMPLATE
         MVC   7(4,R6),31(R1)      LOAD DATA SET SEQUENCE NUMBER
         TM    MODE,MD_ASCII       TRANSLATING ASCII DATA?
         BZ    LABTYPOK            NO, ASSUME IBM STANDARD LABELS
         MVI   12(R6),C'A'         YES, INDICATE ASCII LABELS
LABTYPOK MVC   32(3,R6),47(R1)     LOAD EXPIRATION DATE CYY
         MVC   36(3,R6),50(R1)     LOAD EXPIRATION DATE DDD
         MVI   31(R6),C'2'         ASSUME 21ST CENTURY
         CLI   32(R6),C'0'         CORRECT?
         BNL   EXPDTOK             YES
         MVC   31(2,R6),CENT20TH   NO, IT WAS THE 20TH CENTURY
EXPDTOK  CLI   53(R1),C'1'         PASSWORD PROTECTED?
         BE    PWRDPROT            YES
         CLI   53(R1),C'3'         PASSWORD PROTECTED FOR CHANGE?
         BE    PWWRPROT            YES
         MVC   15(26,R6),23(R6)    NO, SUPPRESS LABEL SUBFIELD
         B     PWPROTOK
PWRDPROT MVC   15(8,R6),PASWRDLB   SUPPLY LABEL=(,,,PASSWORD,)
         B     PWPROTOK
PWWRPROT MVC   15(8,R6),NOPWRDLB   SUPPLY LABEL=(,,,NOPWREAD,)
PWPROTOK MVC   65(6,R6),54(R1)     LOAD BLOCK COUNT
*        TR    0(80,R6),PERIODS    FILE DATA LINES ALREADY TRANSLATED
         A     R6,SCRNCOLS         POINT TO NEXT LINE
         MVC   0(80,R6),DSLAB13    SUPPLY TEMPLATE
         MVC   15(3,R6),41(R1)     LOAD CREATION DATE CYY
         MVC   19(3,R6),44(R1)     LOAD CREATION DATE DDD
         MVI   14(R6),C'2'         ASSUME 21ST CENTURY
         CLI   15(R6),C'0'         CORRECT?
         BNL   CREDTOK             YES
         MVC   14(2,R6),CENT20TH   NO, IT WAS THE 20TH CENTURY
CREDTOK  MVC   43(1,R6),53(R1)     LOAD DATA SET SECURITY CODE
         MVC   65(13,R6),60(R1)    LOAD OPERATING SYSTEM CODE
*        TR    0(80,R6),PERIODS    FILE DATA LINES ALREADY TRANSLATED
         A     R6,SCRNCOLS         POINT TO NEXT LINE
         LA    R5,4(,R5)           ADD EXTRA LINES USED
         A     R1,SCRNCOLS         POINT TO NEXT DATA LINE
         CLI   3(R1),C'2'          HDR2/EOV2/EOF2?
         BNE   TPLBLRTN            NO, CAN'T BE TAPE LABELS
         CLC   HDRLBL,0(R1)        HDR2?
         BE    DODSLBL2            YES
         CLC   EOVLBL,0(R1)        EOV2?
         BE    DODSLBL2            YES
         CLC   EOFLBL,0(R1)        EOF2?
         BNE   TPLBLRTN            NO, RETURN
DODSLBL2 SH    R8,HW4              ROOM FOR FOUR LINES?
         BM    TPLBLRTN            NO
         MVI   0(R6),C' '
         A     R6,SCRNCOLS         POINT TO NEXT LINE
         MVC   0(80,R6),DSLAB21    SUPPLY TEMPLATE
         LA    R14,6(,R6)          POINT TO RECFM DISPLAY AREA
         MVC   0(1,R14),4(R1)      LOAD FIRST RECORD FORMAT CODE
         MVC   1(1,R14),38(R1)     LOAD SECOND RECORD FORMAT CODE
         CLI   1(R14),C'R'         IS IT AN 'R'?
         BNE   TPRECFM1            NO, LEAVE IT
         MVC   1(2,R14),RECFMBS    YES, THIS MEANS 'BS'
TPRECFM1 LA    R14,1(,R14)
         CLI   0(R14),C' '         FOUND A BLANK?
         BNE   TPRECFM1            NO, INCREMENT AND TRY AGAIN
         MVC   0(1,R14),36(R1)     LOAD THIRD RECORD FORMAT CODE
         MVC   39(5,R6),5(R1)      LOAD BLOCK LENGTH
         MVC   21(5,R6),10(R1)     LOAD RECORD LENGTH
         MVC   53(1,R6),15(R1)     LOAD TAPE DENSITY
         CLI   15(R1),C'0'         KNOWN DENSITY CODE?
         BL    DENSDONE            NO
         CLI   15(R1),C'4'         KNOWN DENSITY CODE?
         BH    DENSDONE            NO
         MVC   DOUBLE(1),15(R1)    YES, COPY IT
         NI    DOUBLE,X'0F'        ZERO THE ZONE
         SR    R14,R14
         IC    R14,DOUBLE
         MH    R14,HW10            GET INDEX INTO DENSTBL
         LA    R14,DENSTBL(R14)    POINT TO CORRECT ENTRY
         MVC   55(10,R6),0(R14)    SHOW BITS-PER-INCH MEANING OF CODE
DENSDONE MVC   75(2,R6),34(R1)     LOAD TAPE RECORDING TECHNIQUE
*        TR    0(80,R6),PERIODS    FILE DATA LINES ALREADY TRANSLATED
         A     R6,SCRNCOLS         POINT TO NEXT LINE
         MVC   0(80,R6),DSLAB22    SUPPLY TEMPLATE
         MVC   14(1,R6),16(R1)     LOAD DATA SET POSITION
         CLI   16(R1),C'1'         KNOWN MEANING?
         BH    POSIDONE            NO
         CLI   16(R1),C'0'         KNOWN MEANING?
         BL    POSIDONE            NO
         MVC   16(24,R6),SINGLBL   YES, INDICATE SINGLE VOLUME DS
         BE    POSIDONE            GOOD GUESS
         MVC   17(5,R6),MULTLBL    INDICATE MULTIPLE VOLUME DS
         MVC   22(20,R6),23(R6)    TIDY UP EDITING
POSIDONE MVC   62(17,R6),17(R1)    LOAD JOB/JOBSTEP IDENTIFICATION
*        TR    0(80,R6),PERIODS    FILE DATA LINES ALREADY TRANSLATED
         A     R6,SCRNCOLS         POINT TO NEXT LINE
         MVC   0(80,R6),DSLAB23    SUPPLY TEMPLATE
         MVC   11(8,R6),39(R1)     LOAD TAPE DRIVE PARTICULARS
         MVC   47(1,R6),47(R1)     LOAD CHECKPOINT DATA SET IDENTIFIER
*        TR    0(80,R6),PERIODS    FILE DATA LINES ALREADY TRANSLATED
         A     R6,SCRNCOLS         POINT TO NEXT LINE
         LA    R5,4(,R5)           ADD EXTRA LINES USED
TPLBLRTN L     R14,HOLDR           RESTORE RETURN ADDRESS
         BR    R14                 RETURN TO CALLER
         DROP  R15                 TAPELBLS
         SPACE
VOLLBL   DC    C'VOL'
HDRLBL   DC    C'HDR'
EOVLBL   DC    C'EOV'
EOFLBL   DC    C'EOF'
VOLAB11  DC    C'VOL=SER='
VOLAB12  DC    C'OWNER='
RECFMBS  DC    C'BS'
CENT20TH DC    C'19'
PASWRDLB DC    C'PASSWORD'
NOPWRDLB DC    C'NOPWREAD'
DENSTBL  EQU   *
         DC    CL10'(200 BPI) '
         DC    CL10'(556 BPI) '
         DC    CL10'(800 BPI) '
         DC    CL10'(1600 BPI)'
         DC    CL10'(6250 BPI)'
DSLAB11  DC    CL80'DSNAME=12345678.12345678     FIRST-VOLUME=123456   +
                 VOLUME-SEQUENCE=1234       '
DSLAB12  DC    CL80'LABEL=(1234,SL,________,,EXPDT=YYYY/DDD)           +
                 BLOCK-COUNT=123456         '
DSLAB13  DC    CL80'CREATION-DATE=YYYY/DDD       SECURITY-CODE=?       +
                 SYSTEM-CODE=123456789ABCD  '
DSLAB21  DC    CL80'RECFM=?        LRECL=12345     BLKSIZE=12345     DE+
               N=1               TRTCH=12   '
DSLAB22  DC    CL80'VOLUME-SWITCH=1                                  CR+
               EATION-JOB=AJOBNAME/STEPNAME '
DSLAB23  DC    CL80'TAPE-DRIVE=12345678            CHECKPOINT-FLAG=1 ('+
               'C'' FOR CHECKPOINT DATA SET)  '
SINGLBL  DC    C'(SINGLE-VOLUME DATA SET)'
MULTLBL  DC    C'MULTI'
         SPACE
**********************************************************************
*                                                          *         *
*         PERFORM LOGREC RECORD FORMATTING                 *  GP@FT  *
*                                                          *  01/94  *
**********************************************************************
         SPACE
*         ON ENTRY: R0 = SHADOW CODE FOR DISPLAY LINE
*                   R1 = RECORD LENGTH
*                   R2 = RECORD ADDRESS
*                   R6 = DISPLAY LINE ADDRESS
*                   R7 = RECORD DIRECTORY ENTRY ADDRESS
         SPACE
         USING EREPFMT,R5
         USING SAVER,R13
EREPFMT  STM   R14,R12,12(R13)     SAVE REGISTERS
         LR    R5,R15              LOAD BASE REGISTER
         CH    R1,=H'24'           IS RECORD TOO SHORT TO BE VALID?
         BL    EREPNOOP            YES, DO NOT ATTEMPT FORMATTING
         TM    TSTRECFM,X'C0'      UNDEFINED RECORD FORMAT?
         BZ    EREPOKAY            YES, CAN'T HAVE EREP ON LOAD LIBRARY
         CLI   2(R2),X'18'         NO, MUST HAVE BEEN COPIED BY EREP
         BE    EREPOKAY            WITH 370XA MODE AND TIME MACRO FMT
         CLI   2(R2),X'28'         ALSO ACCEPT MVS/370 RECORD WITH
         BNE   EREPNOOP            TIMESTAMP IN TIME MACRO FORMAT
EREPOKAY L     R15,SCRNCOLS        LOAD SCREEN WIDTH
         AR    R15,R15             DOUBLE IT
         A     R15,SCRNCOLS        TRIPLE IT TO GET RULER LINE OFFSET
         AL    R15,SCREENBF        POINT TO THE RULER LINE
         MVC   0(80,R15),EREPFMHD  SUPPLY EREP FORMAT COLUMN HEADINGS
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         IC    R0,FMTCOLOR         LOAD FORMATTING COLOUR
         BAS   R14,COLOURSW        SET NEW DISPLAY COLOUR
         LR    R5,R15              RELOAD BASE REGISTER
         CLC   =X'FFFF',0(R2)      HEADER RECORD IDENTIFIER?
         BE    EREPHD40            YES, GO FORMAT HEADER
         TM    2(R2),X'08'         TIME MACRO USED?
         BZ    EREPSTCK            NO, STORE CLOCK INSTRUCTION WAS USED
         UNPK  0(3,R6),9(2,R2)     SHOW THE YEAR
         UNPK  3(3,R6),10(2,R2)    SHOW THE JULIAN DAY
         UNPK  7(3,R6),12(2,R2)    SHOW THE HOUR
         UNPK  10(3,R6),13(2,R2)   SHOW THE MINUTE
         UNPK  13(3,R6),14(2,R2)   SHOW THE SECOND
         UNPK  16(3,R6),15(2,R2)   SHOW THE CENTISECOND
         B     EREPTSOK
EREPNOOP LM    R14,R12,12(R13)     RESTORE REGISTERS
         B     FMTNOTON            SKIP FORMATTING WITHOUT COMMENT
EREPSTCK UNPK  1(9,R6),8(5,R2)     SHOW STCK VALUE IN HEX
         UNPK  9(9,R6),12(5,R2)
         TR    1(16,R6),HEXTAB-240
         MVI   17(R6),C' '
         AIF   (&ENV390).SCKCNV3
         B     EREPTSDN            STCKCONV NOT AVAILABLE
         AGO   .SCKCNV1
.SCKCNV3 ANOP
         L     R15,CVTPTR(,0)      POINT TO THE CVT
         USING CVT,R15
         CLI   CVTDCB,X'9B'        MVS/ESA?
         BNE   EREPTSDN            NO, STCKCONV NOT AVAILABLE
         TM    CVTOSLV0,CVTH4410   MVS/SP 4.1 OR LATER?
         BNO   EREPTSDN            NO, STCKCONV NOT AVAILABLE
         DROP  R15                 CVT
         MVC   DOUBLE,8(R2)        COPY THE STCK VALUE
         STCKCONV STCKVAL=DOUBLE,  POINT TO INPUT STCK VALUE           +
               CONVVAL=SBASAVE,    POINT TO OUTPUT FOUR WORDS          +
               TIMETYPE=DEC,       GET TIME DECIMAL DIGITS (DEFAULT)   +
               DATETYPE=YYYYDDD,   SPECIFY DATE FORMAT (DEFAULT)       +
               MF=(E,STCKCNVL)     SPECIFY PARAMETER LIST
         L     R0,SBASAVE+8        LOAD 0YYYYDDD
         SLL   R0,4                CONVERT IT TO YYYYDDD0
         ST    R0,SBASAVE+8        STORE IT FOR UNPACKING
*        OI    SBASAVE+11,X'0F'    SUPPLY SIGN - DONE LATER AT EREPTSOK
         UNPK  0(3,R6),SBASAVE+9(2)   SHOW THE YEAR
         UNPK  3(3,R6),SBASAVE+10(2)  SHOW THE JULIAN DAY
         UNPK  7(3,R6),SBASAVE(2)     SHOW THE HOUR
         UNPK  10(3,R6),SBASAVE+1(2)  SHOW THE MINUTE
         UNPK  13(3,R6),SBASAVE+2(2)  SHOW THE SECOND
         UNPK  16(3,R6),SBASAVE+3(2)  SHOW THE CENTISECOND
.SCKCNV1 ANOP
EREPTSOK OI    5(R6),X'F0'         HANDLE BAD SIGN IN DATE
         TR    0(17,R6),HEXTAB-240 HANDLE BAD DECIMAL DIGITS
         MVI   2(R6),C'.'          SUPPLY SEPARATORS AND
         MVI   6(R6),C' '                 TIDY UP AFTER TRANSLATE
         MVI   9(R6),C':'                 AND THE LAST UNPACK
         MVI   12(R6),C':'
         MVI   15(R6),C'.'
         MVI   18(R6),C' '
EREPTSDN UNPK  26(7,R6),17(4,R2)   SHOW CPU SERIAL NUMBER
         TR    26(6,R6),HEXTAB-240
         MVI   32(R6),C'-'
         UNPK  33(5,R6),20(3,R2)   SHOW CPU MODEL NUMBER
         TR    33(4,R6),HEXTAB-240
         MVI   37(R6),C' '
         CLI   0(R2),X'13'         MACHINE CHECK RECORD?
         BE    EREPMCH             YES
         CLI   0(R2),X'21'         CHANNEL CHECK RECORD?
         BE    EREPCCH             YES
         CLI   0(R2),X'23'         SUBCHANNEL LOGOUT HANDLER RECORD?
         BE    EREPSLH             YES
         CLI   0(R2),X'25'         CHANNEL REPORT WORD RECORD?
         BE    EREPCRW             YES
         CLI   0(R2),X'30'         OUTBOARD RECORD?
         BE    EREPOBR             YES
         CLI   0(R2),X'34'         TCAM OUTBOARD RECORD?
         BE    EREPOBR             YES
         CLI   0(R2),X'36'         VTAM OUTBOARD RECORD?
         BE    EREPOBR             YES
         CLI   0(R2),X'3A'         DYNAMIC PATHING AVAILABILITY RECORD?
         BE    EREPOBR             YES
         CLI   0(R2),X'3C'         DYN PATH VALIDATION ANALYSIS RECORD?
         BE    EREPOBR             YES
         CLI   0(R2),X'40'         SOFTWARE ABEND RECORD?
         BE    EREPABND            YES
         CLI   0(R2),X'42'         SOFTWARE PROGRAM INTERRUPT RECORD?
         BE    EREPSPI             YES
         CLI   0(R2),X'44'         OPERATOR RESTART RECORD?
         BE    EREPSRST            YES
         CLI   0(R2),X'48'         MACHINE CHECK (RTM1) RECORD?
         BE    EREPSMCH            YES
         CLI   0(R2),X'4C'         SOFTWARE SYMPTOM RECORD?
         BE    EREPSYMP            YES
         CLI   0(R2),X'4F'         RECORDS LOST RECORD?
         BE    EREPLOST            YES
         CLI   0(R2),X'50'         IPL RECORD?
         BE    EREPIPL             YES
         CLI   0(R2),X'60'         DDR RECORD?
         BE    EREPDDR             YES
         CLI   0(R2),X'70'         MISSING INTERRUPT HANDLER RECORD?
         BE    EREPMIH             YES
         CLI   0(R2),X'71'         MISSING INTERRUPT HANDLER RECORD?
         BE    EREPMIX             YES
         CLI   0(R2),X'80'         EOD RECORD?
         BE    EREPEOD             YES
         CLI   0(R2),X'90'         MISCELLANEOUS DATA RECORD?
         BE    EREPMDR             YES
         CLI   0(R2),X'91'         MISCELLANEOUS DASD RECORD?
         BE    EREPDASD            YES
         CLI   0(R2),X'A1'         EXTERNAL TIME REFERENCE RECORD?
         BE    EREPCLOK            YES
         CLI   0(R2),X'A2'         LINK MAINTENANCE INFORMATION RECORD?
         BE    EREPLINK            YES
         CLI   0(R2),X'A3'         ASYNCHRONOUS NOTIFICATION RECORD?
         BE    EREPNTFY            YES
         CLI   0(R2),X'A0'         A-TO-F TYPE RECORD?
         BNL   EREPXREC            YES
         MVC   19(6,R6),=C'<UNKN>' UNKNOWN RECORD TYPE
EREPHD40 L     R1,SAVGRS1          GET THE RECORD LENGTH
         CH    R1,HW40             FORTY-BYTE RECORD?
         BNE   EREPEXIT            NO
         LA    R0,2
         C     R0,DIRNUM(,R7)      RECORD 1 OR RECORD 2?
         BL    EREPEXIT            NO
         MVC   19(6,R6),=C'LOGREC' INDICATE SYS1.LOGREC RECORD ONLY
         BH    EREPCKPT            HANDLE FIRST RECORD
         MVC   38(24,R6),=C'3-MINUTE CURRENCY RECORD'
         B     EREPEXIT
EREPCKPT MVC   39(41,R6),=C'* INVALID SYS1.LOGREC CHECKPOINT RECORD *'
         CLC   =X'FFFF',0(R2)      CORRECT RECORD IDENTIFIER?
         BNE   EREPEXIT            NO
         CLI   39(R2),X'FF'        CORRECT CHECK BYTE?
         BNE   EREPEXIT            NO
         MVC   0(5,R6),=C'XTNT:'   NOTE: ASSUME LESS THAN 257 TRACKS
         UNPK  5(5,R6),2(3,R2)           PER CYLINDER ON LOGREC DISK
         UNPK  10(3,R6),5(2,R2)    SHOW DATA SET EXTENT START
         UNPK  13(5,R6),6(3,R2)
         UNPK  18(3,R6),9(2,R2)    SHOW DATA SET EXTENT END
         TR    5(15,R6),HEXTAB-240
         MVI   9(R6),C'.'          SUPPLY SEPARATOR FOR START CCCC.HH
         MVI   12(R6),C'-'         CONNECT START AND END OF EXTENT
         MVI   17(R6),C'.'         SUPPLY SEPARATOR FOR END CCCC.HH
         MVC   20(11,R6),=C'  LAST-REC:'
         UNPK  31(5,R6),24(3,R2)
         UNPK  36(3,R6),27(2,R2)
         UNPK  39(3,R6),28(2,R2)   SHOW LATEST RECORD ADDRESS
         TR    31(10,R6),HEXTAB-240
         MVI   35(R6),C'.'
         MVI   38(R6),C'.'         SUPPLY SEPARATORS FOR CCCC.HH.RR
         MVC   41(6,R6),=C'  90%:'
         UNPK  47(5,R6),34(3,R2)
         UNPK  52(3,R6),37(2,R2)
         TR    47(7,R6),HEXTAB-240
         MVI   51(R6),C'.'         SUPPLY SEPARATOR FOR 90% CCCC.HH
         MVC   54(10,R6),=C'  DEVTYPE='
         UNPK  64(3,R6),33(2,R2)   DISPLAY DASD DEVICE TYPE FLAG
         TR    64(2,R6),HEXTAB-240
         MVC   66(14,R6),=C':BAD ???%-FULL'
         ICM   R15,15,$UCBAD       GET DEVICE UCB ADDRESS
         BNP   EREPDTYP            NO UCB SO NO MATCH
         CLC   33(1,R2),19(R15)    DEVICE TYPE FLAG BYTE MATCH?
         BNE   EREPDTYP            NO, LEAVE 'BAD' ON DISPLAY
         MVC   67(3,R6),=C'OK '    YES, OVERLAY 'BAD' WITH 'OK '
EREPDTYP SR    R1,R1
         ICM   R1,3,29(R2)         GET HIGHEST HEAD NUMBER
         LA    R1,1(,R1)           GET TRACKS PER CYLINDER
         ST    R1,DOUBLE           SAVE IT FOR LATER
         SR    R14,R14
         ICM   R14,3,2(R2)         GET THE EXTENT START CCCC
         SR    R15,R15
         ICM   R15,3,6(R2)         GET THE EXTENT END CCCC
         SR    R15,R14
         MR    R14,R1              GET TRACKS IN CYLINDERS
         SR    R0,R0
         ICM   R0,3,4(R2)          GET THE EXTENT START HHHH
         ICM   R1,3,8(R2)          GET THE EXTENT END HHHH
         SR    R1,R0
         LA    R1,1(R1,R15)        GET TOTAL TRACKS IN EXTENT
         ST    R1,DOUBLE+4         SAVE IT FOR LATER
         ICM   R14,3,2(R2)         GET THE EXTENT START CCCC
         ICM   R15,3,24(R2)        GET THE LAST RECORD CCCC
         SR    R15,R14
         M     R14,DOUBLE          GET TRACKS IN CYLINDERS
         ICM   R1,3,26(R2)         GET THE LAST RECORD HHHH
         SR    R1,R0
         LA    R1,1(R1,R15)        GET TOTAL USED TRACKS
         M     R0,=F'1000'         PREPARE FOR PERCENTAGE
         D     R0,DOUBLE+4         GET FULLNESS PERMILLAGE
         CVD   R1,DOUBLE
         MVC   70(4,R6),=X'40202120'
         CP    DOUBLE,=PL2'99'     MORE THAN 9.9% FULL?
         BH    EREPFULL            YES
         ED    70(4,R6),DOUBLE+6
         MVC   71(1,R6),72(R6)
         MVI   72(R6),C'.'         SHOW TENTHS OF PERCENT IF < 10%
         B     EREPEXIT
EREPFULL SRP   DOUBLE,64-1,5       ROUND TO PERCENTAGE
         ED    70(4,R6),DOUBLE+6
EREPEXIT LM    R14,R12,12(R13)     RESTORE REGISTERS
         B     FILLNXT
EREPMCH  MVC   19(3,R6),=C'MCH'    X'13'
         B     EREPEXIT
EREPCCH  MVC   19(3,R6),=C'CCH'    X'21'
         OC    38(8,R6),24(R2)     SHOW JOB NAME
         UNPK  47(5,R6),76(3,R2)   SHOW DEVICE NUMBER
         TM    5(R2),X'04'         CHANNEL RECONFIGURATION HARDWARE?
         BZ    EREPHDEV            NO
         MVC   22(3,R6),=C'CRH'    YES
         B     EREPHDEV
EREPSLH  MVC   19(3,R6),=C'SLH'    X'23'
         OC    38(8,R6),24(R2)     SHOW JOB NAME
         OC    52(6,R6),122(R2)    COPY VOLUME SERIAL (BLANK OUT NULLS)
         UNPK  47(5,R6),120(3,R2)  SHOW DEVICE NUMBER
         B     EREPHDEV
EREPCRW  MVC   19(3,R6),=C'CRW'    X'25'
         OC    61(8,R6),24(R2)     SHOW RECORDING MODULE CSECT NAME
         UNPK  47(5,R6),44(3,R2)   SHOW DEVICE NUMBER
         B     EREPHDEV
EREPOBR  MVC   19(3,R6),=C'OBR'    X'30'
         BAS   R14,EREPOTYP
         TM    3(R2),X'20'         SHORT RECORD?
         BO    EREPOSHT            YES
         OC    38(8,R6),24(R2)     SHOW JOB NAME
         UNPK  47(5,R6),50(3,R2)   SHOW DEVICE NUMBER
         CLI   0(R2),X'36'         VTAM OUTBOARD RECORDER?
         BNE   EREPHDEV            NO
         OC    52(8,R6),72(R2)     SHOW VTAM LOGICAL UNIT NAME
         B     EREPHDEV
EREPOSHT UNPK  47(5,R6),30(3,R2)   SHOW DEVICE NUMBER
         B     EREPHDEV
EREPOTYP CLI   0(R2),X'3A'         DYNAMIC PATHING AVAILABILITY?
         BE    EREPODPA            YES
         CLI   0(R2),X'3C'         DYNAMIC PATHING VALIDATION ANALYSIS?
         BE    EREPODPS            YES
         TM    3(R2),X'80'         COUNTERS DUMPED AT END-OF-DAY?
         BO    EREPOEOD            YES
         TM    3(R2),X'40'         TEMPORARY SWITCH (COUNTERS FULL)?
         BO    EREPOTMP            YES
         TM    3(R2),X'04'         VOLUME DEMOUNT?
         BO    EREPODMT            YES
         BR    R14
EREPODPA MVC   22(3,R6),=C'DPA'
         BR    R14
EREPODPS MVC   22(3,R6),=C'DPS'
         BR    R14
EREPOEOD MVC   22(3,R6),=C'EOD'
         BR    R14
EREPOTMP MVC   22(3,R6),=C'TMP'
         BR    R14
EREPODMT MVC   22(3,R6),=C'DMT'
         OC    52(6,R6),64(R2)     COPY VOLUME SERIAL (BLANK OUT NULLS)
         BR    R14
EREPABND MVC   19(6,R6),=C'SFTABN' X'40'
EREPABCD OC    38(8,R6),24(R2)     SHOW JOB NAME
         LA    R15,32(,R2)         POINT TO SDWA
         USING SDWA,R15
         UNPK  47(5,R6),SDWAASID(3)
         TR    47(4,R6),HEXTAB-240 SHOW THE HOME ASID
         MVI   51(R6),C' '
         OC    52(8,R6),SDWAMODN   SHOW THE LOAD MODULE NAME
         OC    61(8,R6),SDWACSCT   SHOW THE CSECT NAME
         CLI   SDWAREXN,C' '       ANY RECOVERY ROUTINE NAME?
         BNH   EREPMDOK            NO, DON'T SHOW IT
         CLC   SDWAREXN,=C'UNKNOWN '
         BE    EREPMDOK
         CLC   SDWAMODN,SDWACSCT   BOTH LOAD MODULE AND CSECT THE SAME?
         BNE   EREPMDOK            NO, SHOULD BE SOME VALID DATA
         CLI   SDWAMODN,C' '       YES, ANY DATA?
         BNH   EREPRRTN            NO, SHOW RECOVERY ROUTINE NAME
         CLC   SDWAMODN,=C'UNKNOWN '
         BNE   EREPMDOK
EREPRRTN MVC   52(9,R6),=C' REC.RTN='
         MVC   61(8,R6),SDWAREXN
EREPMDOK L     R0,SDWAABCC         LOAD THE ABEND CODE
         SLL   R0,8                SHIFT OUT FLAG BYTE
         SRL   R0,20               SHIFT OUT USER ABEND CODE
         SLA   R0,4                LEAVE ROOM FOR DECIMAL SIGN
         BZ    EREPUSRA            IF ZERO THEN MUST BE USER ABEND
         ST    R0,DOUBLE+4
         OI    DOUBLE+7,X'0F'
         UNPK  72(3,R6),DOUBLE+6(2)
         TR    72(3,R6),HEXTAB-240
         MVI   71(R6),C'S'         INDICATE SYSTEM ABEND
         TM    SDWAERRA,SDWAPCHK+SDWARKEY+SDWATEXC
         BZ    EREPABRC            DO NOT SHOW INTERRUPT CODE
         UNPK  75(5,R6),SDWAINC1(3)
         B     EREPAIRC            GO TIDY UP INTERRUPT CODE
EREPABRC TM    SDWAERRA,SDWASVCD+SDWASVCE
         BZ    EREPEXIT            NO REASON CODE FOR SYSTEM ABTERM
         UNPK  75(5,R6),SDWAGR15+2(3)
EREPAIRC TR    75(4,R6),HEXTAB-240 TIDY UP INTERRUPT OR REASON CODE
         ICM   R0,15,75(R6)
         STCM  R0,15,76(R6)        MOVE TO CORRECT POSITION
         MVI   75(R6),C'-'         INDICATE RELATED DATUM
         B     EREPEXIT
EREPUSRA L     R0,SDWAABCC         LOAD THE ABEND CODE
         SLL   R0,20
         SRL   R0,20               EXTRACT USER ABEND CODE
         CVD   R0,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  70(5,R6),DOUBLE+5(3)
         MVI   70(R6),C'U'         INDICATE USER ABEND
         B     EREPEXIT
         DROP  R15                 SDWA
EREPSPI  MVC   19(5,R6),=C'SFTPI'  X'42'
         B     EREPABCD
EREPSRST MVC   19(6,R6),=C'SFTRST' X'44'
         B     EREPABCD
EREPSMCH MVC   19(6,R6),=C'SFTMCH' X'48'
         B     EREPABCD
EREPSYMP MVC   19(6,R6),=C'SFTSYM' X'4C'
         MVC   38(6,R6),58(R2)     SHOW SYSTEM NAME
         L     R0,DIRLEN(,R7)      GET THE RECORD LENGTH
         SH    R0,=H'88'
         BM    EREPEXIT            TOO SHORT FOR SEARCH
         LA    R1,80(,R2)
EREPABLP CLC   =C'AB/',0(R1)       FOUND THE ABEND CODE?
         BE    EREPSYMA            YES
         LA    R1,1(,R1)           NO, CONTINUE SEARCH
         BCT   R0,EREPABLP
         B     EREPEXIT
EREPSYMA MVC   70(5,R6),3(R1)      DISPLAY ABEND CODE
         CLC   =C'PRCS/',9(R1)     REASON CODE PRESENT?
         BNE   EREPID1L            NO
         MVI   75(R6),C'-'         YES
         MVC   76(4,R6),18(R1)     DISPLAY REASON CODE
EREPID1L CLC   =C'RIDS/',0(R1)     FOUND THE LOAD MODULE NAME?
         BE    EREPSYLM            YES
         LA    R1,1(,R1)           NO, CONTINUE SEARCH
         BCT   R0,EREPID1L
         B     EREPEXIT
EREPSYLM MVC   52(8,R6),5(R1)      DISPLAY LOAD MODULE NAME
EREPID2L CLC   =C'RIDS/',0(R1)     FOUND THE CSECT NAME?
         BE    EREPSYCS            YES
         LA    R1,1(,R1)           NO, CONTINUE SEARCH
         BCT   R0,EREPID2L
         B     EREPEXIT
EREPSYCS MVC   61(8,R6),5(R1)      DISPLAY CSECT NAME
         B     EREPEXIT
EREPLOST MVC   19(6,R6),=C'SFTLST' X'4F'
         SR    R0,R0
         IC    R0,24(R2)           SHOW THE LOST RECORD COUNT
         CVD   R0,DOUBLE
         MVC   46(4,R6),=X'40202120'
         ED    46(4,R6),DOUBLE+6
         MVC   51(12,R6),=C'RECORDS LOST'
         B     EREPEXIT
EREPIPL  MVC   19(3,R6),=C'IPL'    X'50'
         MVC   38(7,R6),=C'REASON='
         OC    45(2,R6),28(R2)     SHOW IPL REASON CODE
         MVC   48(10,R6),=C'SUBSYS-ID='
         UNPK  58(3,R6),24(1,R2)   SHOW SUBSYSTEM IDENTIFIER
         TR    58(2,R6),HEXTAB-240
         MVI   60(R6),C' '
         B     EREPEXIT
EREPDDR  MVC   19(3,R6),=C'DDR'    X'60'
         OC    38(8,R6),24(R2)     SHOW JOB NAME
         UNPK  47(5,R6),46(3,R2)   SHOW "FROM" DEVICE NUMBER
         OC    52(6,R6),38(R2)     COPY VOLUME SERIAL (BLANK OUT NULLS)
         UNPK  59(5,R6),54(3,R2)   SHOW "TO" DEVICE NUMBER
         TR    59(4,R6),HEXTAB-240
         MVI   63(R6),C' '
         CLI   59(R6),C'0'         LEADING ZERO ON DEVICE NUMBER?
         BNE   EREPDDR2            NO
         MVI   59(R6),C' '         YES, SUPPRESS IT
EREPDDR2 TM    3(R2),X'02'         OPERATOR REQUESTED DEVICE SWAP?
         BZ    EREPHDEV            NO
         MVC   22(3,R6),=C'OPR'    YES
         B     EREPHDEV            TIDY UP "FROM" DEVICE NUMBER
EREPMIH  MVC   19(3,R6),=C'MIH370' X'70'
         OC    38(8,R6),24(R2)     SHOW JOB NAME
         OC    52(6,R6),38(R2)     COPY VOLUME SERIAL (BLANK OUT NULLS)
         UNPK  47(5,R6),33(3,R2)   SHOW DEVICE NUMBER
         TM    3(R2),X'C0'         CHANNEL-END OR DEVICE-END?
         BZ    EREPHDEV            NO
         MVC   22(3,R6),=C'CE '
         TM    3(R2),X'80'
         BO    EREPHDEV            NO
         MVI   22(R6),C'D'
         B     EREPHDEV
EREPMIX  MVC   19(3,R6),=C'MIH'    X'71'
         OC    38(8,R6),24(R2)     SHOW JOB NAME
         OC    52(6,R6),130(R2)    COPY VOLUME SERIAL (BLANK OUT NULLS)
         UNPK  47(5,R6),122(3,R2)  SHOW DEVICE NUMBER
         TM    92(R2),X'04'        MOUNT PENDING?
         BZ    EREPHDEV            NO
         MVC   59(13,R6),=C'MOUNT-PENDING'
         B     EREPHDEV
EREPEOD  MVC   19(3,R6),=C'EOD'    X'80'
         B     EREPEXIT
EREPMDR  MVC   19(3,R6),=C'MDR'    X'90' (FROM VOLSTAT ==> NOT DASD)
EREPMDEV OC    52(6,R6),26(R2)     COPY VOLUME SERIAL (BLANK OUT NULLS)
         UNPK  47(5,R6),24(3,R2)   SHOW DEVICE NUMBER
EREPHDEV TR    47(4,R6),HEXTAB-240
         MVI   51(R6),C' '
         CLI   47(R6),C'0'         LEADING ZERO ON DEVICE NUMBER?
         BNE   EREPEXIT            NO
         MVI   47(R6),C' '         YES, SUPPRESS IT
         B     EREPEXIT
EREPDASD MVC   19(6,R6),=C'MDRDAS' X'91'
         B     EREPMDEV
EREPCLOK MVC   19(5,R6),=C'CLOCK'  X'A1'
         OC    38(42,R6),162(R2)   SHOW FIRST BIT OF OPERATOR MESSAGE
         B     EREPEXIT
EREPLINK MVC   19(4,R6),=C'LINK'   X'A2'
         B     EREPEXIT
EREPNTFY MVC   19(6,R6),=C'NOTIFY' X'A3'
         UNPK  47(5,R6),57(3,R2)   SHOW DEVICE NUMBER
         B     EREPHDEV
EREPXREC MVC   20(5,R6),=C'X-REC'  X'A0' TO X'FF'
         UNPK  19(1,R6),0(1,R2)
         OI    19(R6),X'F0'        SHOW FIRST HEX DIGIT OF RECORD TYPE
         TR    19(1,R6),HEXTAB-240
         B     EREPEXIT
         DROP  R5,R13              EREPFMT, SAVER
         SPACE
         DC    0D'0'
EREPFMHD DC    CL80'*DATE* TIME-OF-DAY RECTYP CPU-SERIAL# JOB-NAME IDNO+
                VOLUME/LMOD+CSECT ABEND-REAS'
         LTORG
         DC    0H'0'
         SPACE
**********************************************************************
*                                                          *         *
*         CALCULATE HORIZONTAL SCREEN FORMAT               *  GP@FT  *
*                                                          *  01/96  *
**********************************************************************
         SPACE
         USING FMTCOLS,R15
FMTCOLS  DS    0H                  CALCULATE OFFSET OF RIGHT SIDE OF
*                                  SCREEN, AS WELL AS THE DISPLAY
*                                  OFFSET FOR EVERY FEL FROM THE
*                                  LEFT-MOST VISIBLE ITEM TO THE END
*                                  OF THE RECORD.
         L     R0,SCRNCOLS         GET HEX OFF DATA COLUMN COUNT
         TM    STATUS16,$16HEX
         BZ    *+8
         SRL   R0,2                GET HEX% ON DATA COLUMN COUNT
         TM    MODE,MD_HEX
         BZ    *+8
         SRL   R0,1                GET HEX ON DATA COLUMN COUNT
         A     R0,OFFSET           GET NUMBER OF LAST COLUMN
         C     R0,RECSIZE          DO NOT EXCEED THE MAX RECORD LENGTH
         BNH   *+8
         L     R0,RECSIZE
         ST    R0,OFFEND           SAVE LAST SCREEN COLUMN NUMBER
         TM    MODE,MD_FMT         IN GENERAL FORMATTING MODE?
         BNOR  R14                 NO, RETURN TO CALLER
         STM   R14,R12,12(R13)     YES, HERE FOR THE LONG HAUL
         L     R1,FMTAREA          POINT TO THE FORMATTING DYNAMIC AREA
         ST    R13,4(,R1)          BACKWARD POINTER
         ST    R1,8(,R13)          FORWARD POINTER
         LR    R13,R1              POINT TO THE NEW SAVE AREA
         USING @FMTAREA,R13
         OI    LEFTFEL,X'80'       INVALIDATE LEFT-MOST FEL ADDRESS
         OI    RITEFEL,X'80'       INVALIDATE RIGHT-MOST FEL ADDRESS
         SR    R6,R6               RESET OFFSET COUNTER
         LA    R1,FMTFELS          POINT TO THE FIRST FORMAT ELEMENT
         L     R4,OFFSET           GET CURRENT LEFT/RIGHT SCROLL OFFSET
         TM    $UCBAD,$ACB         FILE DATA ACCESSED VIA A DCB?
         BO    FMTFELLP            NO
         TM    TSTRECFM,X'40'      VARIABLE-LENGTH RECORDS?
         BZ    FMTFELLP            NO
         LA    R0,4                YES, GET LENGTH OF RDW
         SR    R6,R0               ADJUST FOR HIDDEN RDW
FMTFELLP AH    R6,FELSYMLN(,R1)    ADD LENGTH OF THIS FIELD
         OC    FELSYMLN(2,R1),FELSYMLN(R1)
         BZ    FMTFESKP            IGNORE ZERO LENGTH SYMBOL FEL
         CR    R6,R4               UP TO VISIBLE VARIABLE YET?
         BH    FMTOFFOK            YES
FMTFESKP LA    R1,FELSIZE(,R1)     NO, POINT TO NEXT FORMATTING ELEMENT
         C     R1,FMTFELAD         PAST LAST FORMATTING ELEMENT?
         BL    FMTFELLP            NO
         B     FMTCOLSX            YES, RECORD TOO LONG FOR FORMATTING
FMTOFFOK SH    R6,FELSYMLN(,R1)    GET OFFSET OF VISIBLE FIRST ITEM
         ST    R6,LEFTFELO         SAVE OFFSET OF LEFT-MOST SHOWING FEL
         LR    R4,R6               COPY IT
         ST    R1,LEFTFEL          SAVE LEFT-MOST SHOWING FEL ADDRESS
         S     R6,OFFSET           GET SCREEN OFFSET
         LR    R7,R6               COPY SCREEN OFFSET
         SLA   R7,1                DOUBLE IT FOR HEX MODE
         SR    R5,R5               CLEAR A REGISTER
         TM    FELSYMFG(R1),FELHEX+FELBIN+FELBIT
         BZ    FMTCOLLP            IF CHARACTER THEN OFFSET IS KNOWN
         SLA   R6,1                DOUBLE OFFSET FOR HEX-ISH
         TM    FELSYMFG(R1),FELHEX
         BO    FMTCOLLP            IF HEX-ISH THEN OFFSET IS KNOWN
         SLA   R6,1                QUADRUPLE OFFSET FOR BINARY
         TM    FELSYMFG(R1),FELBIT
         BZ    FMTCOLLP            IF BINARY THEN OFFSET IS KNOWN
         SRA   R6,2                RESTORE UNSHIFTED COUNT
         MH    R6,FMTCOL9          9 DISPLAY BYTES PER DATA BYTE
FMTCOLLP AH    R4,FELSYMLN(,R1)    GET RECORD OFFSET OF NEXT FEL
         OC    FELSYMLN(2,R1),FELSYMLN(R1)
         BZ    FMTCLSKP            IGNORE ZERO LENGTH SYMBOL FEL
         STH   R7,FELDSPOF(,R1)    SAVE HEX MODE SCREEN OFFSET IN FEL
         TM    MODE,MD_HEX         IN HEX MODE?
         BO    FMTCLNXT            YES, NOW KNOW THE DISPLAY OFFSET
         STH   R6,FELDSPOF(,R1)    NO, USE FORMAT MODE OFFSET INSTEAD
         AH    R6,FELDSPLN(,R1)    POINT PAST THIS ITEM IN LINE
         LA    R6,1(,R6)           GET DISPLAY OFFSET FOR NEXT ITEM
         LTR   R5,R5               RIGHT-MOST VISIBLE FEL FOUND?
         BNZ   FMTCLNXT            YES
         L     R0,SCRNCOLS         GET SCREEN WIDTH
         CR    R6,R0               WILL NEXT FEL BE PAST SCREEN?
         BNL   FMTCLAST            YES, THIS IS LAST VISIBLE FEL
         LR    R14,R1              NO, POINT TO THE CURRENT FEL
FMTNXTSZ LA    R14,FELSIZE(,R14)   POINT TO THE NEXT FEL
         C     R14,FMTFELAD        GONE PAST THE LAST FEL?
         BNL   FMTCLNXT            YES, PROCEED AS NORMAL
         OC    FELSYMLN(2,R14),FELSYMLN(R14)
         BZ    FMTNXTSZ            IGNORE ZERO LENGTH SYMBOL FEL
         SR    R0,R6               GET REMAINING SCREEN WIDTH
         CH    R0,FELDSPLN(,R14)   WILL THE NEXT ITEM FIT?
         BNL   FMTCLNXT            YES, CONTINUE
FMTCLAST LR    R5,R1               POINT TO RIGHT-MOST VISIBLE FEL
         SH    R4,FELSYMLN(,R1)    GET RECORD OFFSET OF THIS ITEM AGAIN
         ST    R4,RITEFELO         SAVE IT
FMTCLNXT LH    R0,FELSYMLN(,R1)    GET BYTE COUNT OF DATA ITEM
         SLA   R0,1                DOUBLE IT FOR HEX MODE
         AR    R7,R0               GET NEXT HEX MODE DISPLAY OFFSET
FMTCLSKP LA    R1,FELSIZE(,R1)     POINT TO THE NEXT FORMAT ELEMENT
         C     R1,FMTFELAD         WAS THAT THE LAST ONE?
         BL    FMTCOLLP            NO, PROCESS NEXT ITEM IN RECORD
         TM    MODE,MD_HEX         IN HEX MODE?
         BO    FMTCOLSX            YES, NOW FINISHED HERE
         LTR   R5,R5               DID WE FIND THE RIGHT-MOST FEL?
         BNZ   FMTCOLRM            YES
         LA    R5,FELSIZE          NO
         SLR   R1,R5               POINT TO THE LAST FEL
         LR    R5,R1               USE IT
         SH    R4,FELSYMLN(,R5)    GET RECORD OFFSET OF THIS ITEM AGAIN
         ST    R4,RITEFELO         SAVE IT
FMTCOLRM ST    R5,RITEFEL          SAVE ADDRESS OF RIGHT-MOST FEL
         L     R4,SCRNCOLS         GET THE WIDTH OF THE SCREEN
         SH    R4,FELDSPOF(,R5)    GET LENGTH DISPLAYED OF THE LAST FEL
         TM    FELSYMFG(R5),FELBIT BIT DATA?
         BZ    FMTCOLNB            NO
         LA    R5,1(,R4)           YES
         LA    R1,9
         SR    R4,R4               CLEAR FOR DIVIDE
         DR    R4,R1
         LR    R4,R5               GET OFFSET OF FEL'S TRUNCATED DATA
         L     R5,RITEFEL          RESTORE FEL POINTER
FMTCOLNB TM    FELSYMFG(R5),FELHEX HEXADECIMAL DATA?
         BZ    *+8                 NO
         SRL   R4,1                YES, HALVE DATA BYTES ON SHOW
         TM    FELSYMFG(R5),FELBIN BINARY INTEGER?
         BZ    *+8                 NO
         SRL   R4,2                YES, QUARTER DATA BYTES ON SHOW
         CH    R4,FELSYMLN(,R5)    LONGER THAN THE ITEM LENGTH?
         BNH   *+8                 NO
         LH    R4,FELSYMLN(,R5)    YES
         AL    R4,RITEFELO         ADD RECORD OFFSET OF THIS FEL
         L     R1,4(,R13)          POINT TO PREVIOUS SAVE AREA
         ST    R4,20(,R1)          UPDATE R0 SLOT WITH RIGHT COL NUMBER
         DROP  R15,R13             FMTCOLS, @FMTAREA
FMTCOLSX L     R13,4(,R13)         POINT TO PREVIOUS SAVE AREA
         OI    11(R13),X'01'       INVALIDATE FORWARD POINTER
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         ST    R0,OFFEND           SAVE LAST SCREEN COLUMN NUMBER
         BR    R14                 SHOW RECORD WITHOUT FORMATTING
         SPACE
FMTCOL9  DC    H'9'
         SPACE
**********************************************************************
*                                                          *         *
*         PERFORM DSECT RECORD FORMATTING                  *  GP@FT  *
*                                                          *  01/96  *
**********************************************************************
         SPACE
         USING FORMATIT,R5
FORMATIT STM   R14,R12,12(R13)     SAVE REGISTERS
         LR    R5,R15              LOAD BASE REGISTER
         L     R1,FMTAREA          POINT TO THE FORMATTING DYNAMIC AREA
         ST    R13,4(,R1)          BACKWARD POINTER
         ST    R1,8(,R13)          FORWARD POINTER
         LR    R13,R1              POINT TO THE NEW SAVE AREA
         USING @FMTAREA,R13
         USING SAVER,@FMTAREA
         TM    STATUS14,$14AS      BROWSING ADDRESS SPACE?
         BO    FMTSTOR             YES
         C     R7,HOLDTOP          IS THIS THE FIRST DATA LINE?
         BNE   FMTHDGDN            NO, HEADING ALREADY DONE
         ICM   R1,15,LEFTFEL       POINT TO LEFT-MOST VISIBLE FEL
         BP    FMTDOHDG            GO LOAD THE ITEM HEADING LINE
FMTNONE  L     R13,SAVPREV         RECORD TOO LONG FOR FORMATTING
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         B     FMTNOTON            SHOW RECORD WITHOUT FORMATTING
FMTDOHDG BAS   R14,FMTRULER        CLEAR THIRD AND FOURTH LINES
         L     R0,LEFTFELO         GET OFFSET OF LEFT-MOST SHOWING FEL
         L     R1,LEFTFEL          GET LEFT-MOST SHOWING FEL ADDRESS
         ST    R0,SAVGRS0          SAVE RECORD OFFSET VALUE
FMTHDGLP ICM   R15,3,FELSYMLN(R1)  ZERO LENGTH SYMBOL FEL?
         BZ    FMTHDNXT            YES, IGNORE THIS FEL
         LH    R6,FELDSPOF(,R1)    GET THE DISPLAY OFFSET OF THE ITEM
         L     R15,SAVGRS15        POINT TO LABEL LINE
         LTR   R6,R6
         BNM   FMTHDNRM            LEFT OF FEL IS NOT TO LEFT OF SCREEN
         AH    R6,HW7              GET LENGTH OF VISIBLE PART OF LABEL
         BM    FMTHDNXT            WHOLE OF LABEL IS LEFT OF SCREEN
*                                  POINT TO LAST BYTE OF SYMBOL NAME
         LA    R14,FELSYMNM+FELSYMNL-1(,R1)
         SLR   R14,R6              POINT TO FIRST VISIBLE PART OF LABEL
         EX    R6,FMTLDCOL         SHOW TRAILING PART OF SYMBOL NAME
         B     FMTHDNXT            DO NOT SHOW STARTING COLUMN NUMBER
FMTHDNRM L     R0,SCRNCOLS         GET WIDTH OF SCREEN
         CR    R6,R0               PAST RIGHT OF SCREEN?
         BNL   FMTHDGOK            YES, HEADING NOW DONE
         ALR   R15,R6              POINT TO POSITION IN LABEL LINE
         MVC   0(8,R15),FELSYMNM(R1)     LOAD SYMBOL NAME AS LABEL
         SL    R15,SCRNCOLS        POINT TO COLUMN NUMBER LINE POSITION
         L     R14,SAVGRS0         GET ITEM OFFSET INTO RECORD
         LA    R0,1(,R14)          GET FIRST COLUMN NUMBER OF ITEM
         CVD   R0,DOUBLE           GET INTO DECIMAL
         OI    DOUBLE+7,X'0F'
         UNPK  FSYNADMS(5),DOUBLE+5(3)
         LA    R6,4                GET MAXIMUM NUMBER LENGTH CODE
         LA    R14,FSYNADMS        POINT TO NUMBER
FITMCOLP CLI   0(R14),C'0'         LEADING ZERO?
         BNE   FITEMCOL            NO, GOT NUMBER TO SHOW
         LA    R14,1(,R14)         YES, POINT TO NEXT DIGIT
         BCT   R6,FITMCOLP
FITEMCOL LA    R0,1(R6,R15)        POINT PAST WHERE LAST DIGIT WILL GO
         C     R0,SAVGRS15         INTO SECOND HEADING (LABEL) LINE?
         BH    FMTHDNXT            YES, DON'T SHOW COLUMN NUMBER
         TM    MODE,MD_HEX         IN HEXADECIMAL DISPLAY MODE?
         BO    FITMCOLX            YES
         LA    R0,1(,R6)           GET NUMBER LENGTH
         CH    R0,FELDSPLN(,R1)    IS IT LONGER THAN DISPLAY LENGTH?
         BH    FMTHDNXT            YES, DON'T SHOW COLUMN NUMBER
         B     FITMCOLD            NO, GO SHOW THE NUMBER
FITMCOLX LH    R0,FELSYMLN(,R1)    GET THE ITEM BYTE COUNT
         SLL   R0,1                DOUBLE IT FOR HEX DIGITS
         BCTR  R0,0                GET HEX DATA LENGTH CODE
         CR    R0,R6               HEX DATA LONGER THAN COLUMN NUMBER?
         BNH   FMTHDNXT            NO, NO ROOM FOR NUMBER AND A BLANK
FITMCOLD EX    R6,FMTLDCOL         LOAD FIRST COLUMN NUMBER OF ITEM
FMTHDNXT L     R14,SAVGRS0         GET ITEM OFFSET INTO RECORD
         AH    R14,FELSYMLN(,R1)   GET OFFSET OF NEXT RECORD ITEM
         ST    R14,SAVGRS0         SAVE RECORD OFFSET OF NEXT ITEM
         LA    R1,FELSIZE(,R1)     POINT TO THE NEXT FORMAT ELEMENT
         C     R1,RITEFEL          WAS THAT THE LAST ONE?
         BNH   FMTHDGLP            NO, PROCESS NEXT ITEM IN RECORD
         TM    STATUS8,$8ZIP       CAN CURSOR SELECTION TRIGGER UNZIP?
         BNO   FMTHDGOK            NO
         L     R0,SCRNCOLS         YES, GET THE WIDTH OF THE SCREEN
         LR    R14,R0              COPY IT
         LR    R1,R0               COPY IT AGAIN
         AR    R0,R0               DOUBLE IT
         SRA   R14,1               HALVE IT
         A     R0,SCREENBF         POINT TO THE COLUMNS LABEL LINE
         LA    R15,C' '            GET PAD CHARACTER
         SH    R14,HW40            GET MESSAGE TARGET OFFSET
         SLL   R15,24              PROMOTE PAD AND ZERO LENGTH
         ALR   R14,R0              GET MESSAGE TARGET ADDRESS
         MVCL  R0,R14              CLEAR COLUMN NUMBERS IN THIRD LINE
         MVC   0(80,R14),UNZIPMSG  SUPPLY CURSOR SELECTION MESSAGE
FMTHDGOK L     R1,SAVPREV          POINT TO PREVIOUS SAVE AREA
         L     R6,44(,R1)          GET CURRENT SCREEN BUFFER ADDRESS
FMTHDGDN MVI   0(R6),C' '          CLEAR EXCESS DATA FROM PREVIOUS LINE
         MVC   1(79,R6),0(R6)
         TM    MODE,MD_HEX         IN HEX DISPLAY MODE?
         BO    FMTNONE             YES, DO NO SPECIAL FORMATTING
         ICM   R8,15,LEFTFEL       DATA BEYOND ITEM DEFINITIONS?
         BNP   FMTNONE             YES, DO NO SPECIAL FORMATTING
         IC    R0,FMTCOLOR         LOAD FORMATTING COLOUR
         BAS   R14,COLOURSW        SET NEW DISPLAY COLOUR
         L     R14,LEFTFELO        GET FIRST ITEM'S RECORD OFFSET
FMTDSPLP ST    R14,SAVGRS0         SAVE ITEM'S RECORD OFFSET
         LH    R15,FELDSPOF(,R8)   GET THIS ITEM'S DISPLAY OFFSET
         C     R15,SCRNCOLS        IS IT BEYOND SCREEN WIDTH?
         BNL   FMTDONE             YES, LINE NOW FORMATTED
         LH    R1,FELSYMLN(,R8)    NO, GET ITEM'S LENGTH
         LTR   R1,R1               ZERO LENGTH?
         BZ    FMTITMDN            YES, IGNORE THIS FEL
         TM    FELSYMFG(R8),FELBIN BINARY INTEGER?
         BZ    FMTBNOK1            NO
         ALR   R14,R2              POINT TO DATA ITEM
         SR    R0,R0
         TM    FELSYMFG(R8),FELUNS UNSIGNED BINARY INTEGER?
         BO    FMTBNLP2            YES
         ALR   R14,R1              POINT PAST DATA ITEM
FMTBNLP1 BCTR  R14,0               POINT TO NEXT DATA BYTE TO PROCESS
         SRL   R0,8                DEMOTE PREVIOUS BYTES
         ICM   R0,8,0(R14)         GET NEW HIGH-ORDER BYTE
         BCT   R1,FMTBNLP1
         LA    R1,4                GET MAXIMUM ITEM LENGTH
         SH    R1,FELSYMLN(,R8)    GET BYTE COUNT TO BE SHIFTED
         SLL   R1,3                MULTIPLY BY 8 FOR BIT COUNT
         SRA   R0,0(R1)            MOVE DATA TO CORRECT POSITION
         CVD   R0,DOUBLE           (SIGN SHOULD BE PRESERVED)
         B     FMTBINUM            NOW HAVE DECIMAL OF DATA ITEM
FMTBNLP2 SLL   R0,8                PROMOTE PREVIOUS BYTES
         IC    R0,0(,R14)          GET NEW LOW-ORDER BYTE
         LA    R14,1(,R14)         POINT TO NEXT DATA BYTE
         BCT   R1,FMTBNLP2
         ST    R0,SAVGRS10         SAVE FOR SIGN BIT CHECK LATER
         SLL   R0,1
         SRL   R0,1                SHIFT OUT SIGN BIT
         CVD   R0,DOUBLE
         TM    SAVGRS10,X'80'      WAS THE SIGN (TOP) BIT ON?
         BZ    *+10                NO
         AP    DOUBLE,FMT2GIG      YES
FMTBINUM MVC   FSYNADMS(16),FMTBNMSK
         LA    R1,FSYNADMS+15      HANDLE ZERO
         EDMK  FSYNADMS,DOUBLE+2
         BCTR  R1,0                POINT TO BEFORE FIRST DIGIT
         TM    DOUBLE+7,X'03'      POSITIVE?
         BNM   *+8                 YES
         MVI   0(R1),C'-'          NO, INSERT MINUS SIGN
         L     R14,SAVGRS0         RESTORE ITEM'S RECORD OFFSET
FMTBNOK1 LTR   R15,R15             IS START OF ITEM ON SCREEN?
         BNM   FMTITEM             YES
         L     R15,OFFSET          NO, GET SCROLL RIGHT OFFSET
         SR    R15,R14             MINUS SMALLER ITEM RECORD OFFSET
         SR    R1,R15              REDUCE ITEM DATA BYTES TO SHOW
         AR    R14,R15             INCREASE START DATA RECORD OFFSET
         SR    R15,R15             START FROM LEFT OF SCREEN
FMTITEM  C     R14,DIRLEN(,R7)     DOES RECORD END BEFORE THIS ITEM?
         BNL   FMTDONE             YES, LINE NOW FORMATTED
         L     R0,DIRLEN(,R7)      GET THE RECORD LENGTH
         SR    R0,R14              SUBTRACT DATA LENGTH LEFT OF ITEM
         CR    R1,R0               SHOW MORE DATA THAN RECORD HAS?
         BNH   *+6                 NO
         LR    R1,R0               YES, REDUCE DATA-TO-FORMAT SIZE
         L     R0,SCRNCOLS         GET THE SCREEN WIDTH
         SR    R0,R15              GET REMAINING COLUMNS ON LINE
         TM    FELSYMFG(R8),FELHEX HEXADECIMAL DATA?
         BZ    *+8                 NO
         SRL   R0,1                YES, CAN ONLY HANDLE HALF
         TM    FELSYMFG(R8),FELBIT BIT DATA?
         BZ    FMTBITOK            NO
         L     R4,SCRNCOLS         GET SCREEN WIDTH
         ALR   R4,R6               POINT PAST THIS SCREEN LINE
         ST    R4,DOUBLE           SAVE FOR FUTURE REFERENCE
         ALR   R15,R6              POINT TO TARGET IN SCREEN BUFFER
         ALR   R14,R2              POINT TO SOURCE IN DATA RECORD
         B     FMTBTSTR            GO SHOW BIT STRING
FMTBITOK CR    R1,R0               DOES DATA GO PAST END OF LINE?
         BNH   *+6                 NO
         LR    R1,R0               YES, TRUNCATE DATA
         LTR   R1,R1               ANY DATA LENGTH LEFT TO SHOW?
         BNP   FMTDONE             NO, LINE NOW FORMATTED
         ALR   R15,R6              POINT TO TARGET IN SCREEN BUFFER
         ALR   R14,R2              POINT TO SOURCE IN DATA RECORD
         TM    FELSYMFG(R8),FELHEX HEXADECIMAL DATA?
         BO    FMTHXNUM            YES, SHOW HEX DIGITS
         TM    FELSYMFG(R8),FELBIN BINARY DATA?
         BZ    FMTCHROK            NO, SHOW CHARACTERS
         LH    R1,FELDSPLN(,R8)    YES, GET THE DISPLAY LENGTH
         LA    R14,FSYNADMS+16     POINT PAST FORMATTED NUMBER
         SLR   R14,R1              BACK UP TO START OF NUMBER
         TM    FELDSPOF(R8),X'80'  NEGATIVE DISPLAY OFFSET?
         BZ    FMTCHROK            NO, PROCEED
         AH    R1,FELDSPOF(,R8)    YES, REDUCE DATA LENGTH
         SH    R14,FELDSPOF(,R8)   BUMP UP DATA SOURCE ADDRESS
FMTCHROK BCTR  R1,0                DECREMENT FOR EXECUTE
         EX    R1,FMTLDCOL         LOAD CHARACTERS INTO LINE
         TM    FELSYMFG(R8),FELBIN BINARY DATA?
         BO    FMTITMDN            YES, NUMBER NOW LOADED
         LA    R0,1(,R1)           NO, GET CHARACTER LENGTH
         STM   R15,R0,DOUBLE       SAVE ADDRESS AND LENGTH FOR LATER
         TM    MODE,MD_ASCII       IN ASCII MODE?
         BZ    FMTCHRDN            NO, CHARACTERS NOW LOADED
         LR    R1,R15              YES, POINT TO ASCII DATA
         XLATE (1),(0),TO=E        PERFORM TRANSLATION
FMTCHRDN TM    FELSYMFG(R8),FELDEC ZONED DECIMAL DATA?
         BZ    FMTITMDN            NO, CHARACTERS NOW LOADED
         LH    R0,FELDSPOF(,R8)    GET THE DISPLAY OFFSET TO ITEM
         LTR   R0,R0               ITEM STARTING TO LEFT OF SCREEN?
         BNM   FMTDECZN            NO
         LPR   R0,R0               YES, GET HIDDEN BYTE COUNT
FMTZONLP CLI   0(R14),C'0'         LEADING ZERO?  (BAD LUCK IF ASCII)
         BNE   FMTITMDN            NO, DO NO ZERO SUPPRESSION
         LA    R14,1(,R14)         POINT TO NEXT SOURCE BYTE
         BCT   R0,FMTZONLP
FMTDECZN LM    R15,R0,DOUBLE       GET DISPLAY ADDRESS AND LENGTH
         BCTR  R0,0                LEAVE LAST DIGIT VISIBLE
         LTR   R0,R0               ANY DIGITS TO SCAN?
         BP    FMTDECLP            YES, GO SUPPRESS LEADING ZEROS
         B     FMTITMDN            CHARACTERS NOW LOADED
FMTBTLP1 MVI   0(R15),C'_'         FLAG CONNECTED TO PREVIOUS BYTE
         LA    R15,1(,R15)         POINT PAST UNDERSCORE
         C     R15,DOUBLE          GONE PAST END OF SCREEN LINE?
         BNL   FMTITMDN            YES, BETTER LEAVE IT THERE
FMTBTSTR ICM   R0,8,0(R14)         INSERT BYTE TO FORMAT
         LA    R14,1(,R14)         POINT TO NEXT DATA BYTE
         LA    R4,8                GET BITS PER BYTE
FMTBTLP2 LTR   R0,R0               IS THE SIGN BIT SET?
         MVI   0(R15),C'0'         LOAD ZERO
         BNM   *+8                 NO
         MVI   0(R15),C'1'         YES, LOAD ONE
         SLL   R0,1                PROMOTE NEXT BIT
         LA    R15,1(,R15)         POINT TO NEXT DISPLAY BYTE
         C     R15,DOUBLE          GONE PAST END OF SCREEN LINE?
         BNL   FMTITMDN            YES, BETTER LEAVE IT THERE
         BCT   R4,FMTBTLP2         PROCESS NEXT DATA BIT
         BCT   R1,FMTBTLP1         PROCESS NEXT DATA BYTE
         B     FMTITMDN            BITS NOW LOADED
FMTHXNUM LR    R0,R1               GET NUMBER OF BYTES TO UNPACK
         LR    R1,R14              COPY SOURCE ADDRESS
         STM   R15,R0,DOUBLE       SAVE DECIMAL POSTPROCESSING DATA
         BAS   R14,HEX             UNPACK DATA BYTES
         TM    FELSYMFG(R8),FELDEC PACKED DECIMAL?
         BZ    FMTITMDN            NO, JUST STRAIGHT HEX
         BCTR  R15,0               YES, POINT TO POSSIBLE SIGN
         CLI   0(R15),C'0'         DECIMAL DIGIT IN SIGN POSITION?
         BNL   *+10                YES, UNSIGNED PACKED DECIMAL
         TR    0(1,R15),PACKSIGN-C'A'  NO, TREAT ACCORDINGLY
         LH    R1,FELDSPOF(,R8)    GET THE ITEM DISPLAY OFFSET
         LTR   R1,R1               NEGATIVE DISPLAY OFFSET?
         BNM   FMTDEC00            NO, START OF ITEM IS VISIBLE
         LPR   R1,R1               GET DIGIT COUNT TO LEFT OF SCREEN
         SLL   R1,1                GET BYTE COUNT TO LEFT OF SCREEN
         BCTR  R1,0                DECREMENT FOR EXECUTE
         L     R14,SAVGRS0         RESTORE ITEM'S RECORD OFFSET
         ALR   R14,R2              POINT TO SOURCE IN DATA RECORD
         EX    R1,FDEC0TST         ARE ALL MISSING BYTES NULL?
         BNZ   FMTITMDN            NO, DO NO ZERO SUPPRESSION
FMTDEC00 LM    R15,R0,DOUBLE       RESTORE DISPLAY ADDRESS & DATA SIZE
         BCTR  R0,0                DO NOT ZERO SUPPRESS LAST DIGIT
         SLA   R0,1                DOUBLE FOR DIGIT COUNT
         BZ    FMTITMDN            SKIP EDIT IF ZERO DIGITS TO SCAN
FMTDECLP CLI   0(R15),C'0'         LEADING ZERO?
         BNE   FMTITMDN            NO, NUMBER NOW READY TO SHOW
         MVI   0(R15),C' '         YES, OVERLAY WITH BLANK
         LA    R15,1(,R15)         POINT TO NEXT BYTE
         BCT   R0,FMTDECLP
FMTITMDN BAS   R14,FMTEXTRA        PERFORM EXTRA FORMATTING
         L     R14,SAVGRS0         GET RECORD OFFSET OF THIS ITEM
         AH    R14,FELSYMLN(,R8)   ADD LENGTH OF THIS ITEM
         LA    R8,FELSIZE(,R8)     POINT TO NEXT FEL
         C     R8,RITEFEL          ANOTHER FEL TO LOOK AT?
         BNH   FMTDSPLP            YES
FMTDONE  L     R15,SCRNCOLS        GET SCREEN WIDTH
         BCTR  R15,0               DECRMENT FOR EXECUTE
         EX    R15,TRPERIOD        ENSURE NO UNPRINTABLES ON LINE
         TM    STATUS4,$4MSG31     FIND COMMAND ISSUED?
         BNO   FORMATDN            NO
         CLC   FNDNUM,DIRNUM(R7)   FOUND IN THIS RECORD?
         BNE   FORMATDN            NO
         L     R15,FNDOFF          YES, GET OFFSET OF FOUND STRING
         LR    R1,R15              COPY IT
         S     R1,OFFSET           IS DATA LEFT OF SCREEN SOMEHOW?
         BM    FORMATDN            YES, DO NOT MOVE CURSOR TO IT
         NI    FMTFLAGS,255-FFSW   FLAG DOING START OF FOUND DATA
         BAS   R14,FGTDSPOF        GET DISPLAY OFFSET OF FOUND DATA
         C     R1,SCRNCOLS         GREATER THAN SCREEN WIDTH?
         BNL   FORMATDN            YES, DATA TO RIGHT OF SCREEN
         LA    R1,0(R1,R6)         POINT TO FOUND TEXT
         A     R1,SCREENSZ         POINT TO ITS SHADOW
         LA    R0,1(,R1)
         S     R0,SHADOWBF         GET OFFSET INTO SCREEN BUFFER
         S     R0,SCRNCOLS
         S     R0,SCRNCOLS         GET POSITION INTO ISPF DYNAMIC AREA
         ST    R0,REVPOS           SET CURSOR POSITION
         MVC   REVCSR,REVBUFNM     SET CURSOR FIELD
         MVI   0(R1),X'22'         USE REVERSE VIDEO RED
         CLI   FMTCOLOR,3          USING PINK AS FORMAT COLOUR?
         BE    FMTSPFOK            YES, KEEP RED TO CONTRAST
         MVI   0(R1),X'23'         NO, USE PINK AS HIGHLIGHT COLOUR
FMTSPFOK LR    R0,R1               REMEMBER HIGHLIGHT START LOCATION
         AH    R15,STRINGL         ADD LENGTH CODE OF FIND DATA
         LA    R15,1(,R15)         GET OFFSET PAST FOUND DATA
         OI    FMTFLAGS,FFSW       FLAG DOING END OF FOUND DATA
         BAS   R14,FGTDSPOF        GET DISPLAY OFFSET PAST FOUND DATA
         C     R1,SCRNCOLS         GREATER THAN SCREEN WIDTH?
         BNH   *+8                 NO
         L     R1,SCRNCOLS         YES, END HIGHLIGHT AT END OF LINE
         LA    R1,0(R1,R6)         POINT TO PASSED FOUND TEXT
         A     R1,SCREENSZ         POINT TO ITS SHADOW
         SR    R1,R0               GET HIGHLIGHTING LENGTH
         LR    R15,R0              POINT TO START OF HIGHLIGHTING
         BCTR  R1,0                GET LENGTH CODE OF HIGHLIGHTING
         LTR   R1,R1               MORE THAN ONE SCREEN LOCATION?
         BNP   FORMATDN            NO, HIGHLIGHTING COMPLETE
         BCTR  R1,0                YES, GET PROPAGATION LENGTH CODE
         EX    R1,REVERSPF         SPREAD THE HIGHLIGHTING ALONG
FORMATDN L     R13,SAVPREV         POINT TO PREVIOUS SAVE AREA
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         B     FILLCHAR            EDIT ANY CHARACTER DATA
FMTLDCOL MVC   0(0,R15),0(R14)     <<< EXECUTED >>>
FDEC0TST OC    0(0,R14),0(R14)     <<< EXECUTED >>>
         SPACE
FGTDSPOF DS    0H                  CONVERT OFFSET TO DISPLAY OFFSET
         L     R8,LEFTFEL          POINT TO THE FIRST VISIBLE FEL
         L     R1,LEFTFELO         GET ITS OFFSET
FMTFNDLP AH    R1,FELSYMLN(,R8)    GET OFFSET OF NEXT FEL
         CR    R1,R15              IS OFFSET IN THIS DATA ITEM?
         BH    FMTFIND             YES
         BL    FMTFNDNX            NO
         TM    FMTFLAGS,FFSW       DOING END OF FOUND DATA?
         BO    FMTFIND             YES, LEAVE INTER-ITEM BLANK NORMAL
FMTFNDNX LA    R8,FELSIZE(,R8)     NO, POINT TO NEXT FEL
         C     R8,FMTFELAD         WAS THAT THE LAST FEL?
         BL    FMTFNDLP            NO, CONTINUE SCAN
         B     FORMATDN            YES
FMTFIND  SH    R1,FELSYMLN(,R8)    GET OFFSET OF ITEM
         SR    R1,R15
         LPR   R1,R1               GET FIND OFFSET INTO DATA ITEM
         CH    R1,FELSYMLN(,R8)    OFFSET AT END OF ITEM?
         BE    FMTHIEND            YES, ONLY HAPPENS FOR HIGHLIGHT END
         TM    FELSYMFG(R8),FELHEX HEXADECIMAL DATA?
         BZ    *+8                 NO
         SLL   R1,1                YES, DOUBLE FOR DISPLAYFIELD OFFSET
         TM    FELSYMFG(R8),FELBIN BINARY INTEGER?
         BZ    *+8                 NO
         SLL   R1,2                YES, QUADRUPLE FOR DISP FIELD OFFSET
         TM    FELSYMFG(R8),FELBIT BIT DATA?
         BZ    *+8                 NO
         MH    R1,=H'9'            YES, BY 9 FOR DISPLAY FIELD OFFSET
         AH    R1,FELDSPOF(,R8)    GET FIND DATA SCREEN OFFSET
         BR    R14                 RETURN TO CALLER
FMTHIEND LH    R1,FELDSPLN(,R8)    HIGHLIGHT ENDS AT END OF ITEM
         AH    R1,FELDSPOF(,R8)    GET FIND DATA SCREEN OFFSET
         BR    R14                 RETURN TO CALLER
         SPACE
FMTEXTRA TM    FELSYMFG(R8),FELDS1+FELDB2
         BZR   R14                 NO EXTRA FORMATTING SO RETURN
         TM    FELSYMFG(R8),FELBIT SHOWING AS BIT STRING?
         BOR   R14                 YES, DON'T FIDDLE WITH IT HERE
         L     R1,SAVGRS0          RESTORE ITEM'S RECORD OFFSET
         ALR   R1,R2               POINT TO SOURCE IN DATA RECORD
         LH    R4,FELDSPOF(,R8)    GET ITEM'S DISPLAY OFFSET
         ALR   R4,R6               POINT TO TARGET IN SCREEN LINE
         TM    FELSYMFG(R8),FELDS1 EXTRA FORMATTING FOR FORMAT-1 DSCB?
         BO    FMTDSCB1            YES
         SPACE
         CLI   SAVGRS0+3,0         ROW TYPE?
         BE    FMTRTYPE            YES
         CLI   SAVGRS0+3,5         ROW ID?
         BE    FMTRID              YES
         BR    R14                 UNKNOWN FIELD OFFSET
FMTRTYPE TM    0(R1),X'66'         KNOWN BIT ON?
         BZR   R14                 NO, RETURN WITHOUT ACTION
         MVC   2(5,R4),=X'609795A399'  C'-PNTR'
         TM    0(R1),X'40'         POINTER RECORD?
         BOR   R14                 YES
         MVC   3(5,R4),=X'96A58693A6'  C'OVFLW'
         TM    0(R1),X'20'         OVERFLOW RECORD?
         BOR   R14                 YES
         MVC   3(5,R4),=X'83949799A2'  C'CMPRS'
         TM    0(R1),X'04'         COMPRESSED RECORD?
         BOR   R14                 YES
         MVC   3(5,R4),=X'97A4958340'  C'PUNC '
         BR    R14                 POSSIBLY UNCOMMITTED RECORD
FMTRID   ICM   R15,15,RIDSHIFT     GET BITS TO SHIFT FOR CONVERSION
         BNZ   FMTDORID            SHIFT COUNT CALCULATED
         L     R0,AMCIV            GET DB2 PAGE SIZE FOR CALCULATION
FMTRIDLP SRL   R0,1                DO A SHIFT
         LTR   R0,R0               LOST THE ONE?
         BZ    FMTRIDSZ            YES
         LA    R15,1(,R15)         NO, COUNT THE SHIFT
         B     FMTRIDLP
FMTRIDSZ ST    R15,RIDSHIFT        SAVE RBA SHIFT SIZE FOR RID DISPLAY
FMTDORID L     R0,DIRTTR(,R7)      GET BLOCK RBA
         SRL   R0,0(R15)           GET RELATIVE BLOCK PAGE NUMBER
         STH   R0,DOUBLE
         ICM   R0,3,0(R4)          SAVE ROW-IN-PAGE NUMBER
         UNPK  0(5,R4),DOUBLE(3)
         TR    0(4,R4),HEXTAB-240
         STCM  R0,3,4(R4)          SHOW SIX HEX DIGIT RID
         BR    R14
         SPACE
FMTDSCB1 CLI   44(R2),C'1'         IS THIS A FORMAT-1 DSCB?
         BNE   FMTDSCB0            NO, CHECK FOR FORMAT-0 DSCB
         SR    R15,R15
         CLI   SAVGRS0+3,DS1CREDT-DS1DSNAM
         BE    FMTDATE1            CREATION DATA
         CLI   SAVGRS0+3,DS1EXPDT-DS1DSNAM
         BE    FMTDATE1            EXPIRY DATE
         CLI   SAVGRS0+3,DS1FLAG1-DS1DSNAM
         BE    FMTFLAG1            DATA SET FLAGS
         CLI   SAVGRS0+3,DS1REFD-DS1DSNAM
         BE    FMTDATE1            REFERENCE DATE
         CLI   SAVGRS0+3,DS1SMSFG-DS1DSNAM
         BE    FMTSMSFG            SMS FLAGS
         CLI   SAVGRS0+3,DS1DSORG-DS1DSNAM
         BE    FMTDSORG            DATA SET ORGANISATION
         CLI   SAVGRS0+3,DS1RECFM-DS1DSNAM
         BE    FMTRECFM            RECORD FORMAT
         CLI   SAVGRS0+3,DS1DSIND-DS1DSNAM
         BE    FMTDSIND            DATA SET INDICATORS
         CLI   SAVGRS0+3,DS1SCALO-DS1DSNAM
         BE    FMTSCAL1            SECONDARY ALLOCATION TYPE
         BR    R14                 UNKNOWN FIELD OFFSET
FMTDSCB0 CLI   44(R2),X'00'        IS THIS A FORMAT-0 DSCB?
         BNER  R14                 NO, RETURN WITHOUT ACTION
         CLI   FELSYMFG(R8),FELDS1 CHARACTER FIELD?
         BNER  R14                 NO, RETURN WITHOUT ACTION
         LH    R15,FELSYMLN(,R8)   GET ITEM'S DATA LENGTH
         BCTR  R15,0               DECREMENT FOR EXECUTE
         EX    R15,FMT0ZERO        IS THE WHOLE FIELD ZERO?
         BNZR  R14                 NO, RETURN WITHOUT ACTION
         LH    R0,FELDSPOF(,R8)    GET ITEM'S DISPLAY OFFSET
         LTR   R0,R0               IS ITEM'S DISPLAY OFFSET NEGATIVE?
         BNM   FMT0LNOK            NO
         AR    R15,R0              YES, DECREASE DISPLAY LENGTH
         LR    R4,R6               START FROM START OF DISPLAY LINE
FMT0LNOK EX    R15,FMT0BLNK        JUST SHOW BLANKS FOR NULL DATA
         BR    R14                 EXTRA FORMATTING FOR DSCB-0 DONE
FMT0ZERO OC    0(0,R1),0(R1)       <<< EXECUTED >>>
FMT0BLNK MVC   0(0,R4),BLANKS      <<< EXECUTED >>>
FMTDATE1 CLI   FELDSPOF(R8),X'FF'  NEGATIVE DISPLAY OFFSET?
         BNE   FMTDATE0            NO, CAN ACCESS WHOLE DISPLAY AREA
         MVC   0(4,R6),BLANKS      YES, BLANK START OF LINE INSTEAD
         B     FMT1DAT0            ZERO DATE HANDLING NOW COMPLETE
FMTDATE0 MVC   1(5,R4),BLANKS      SHOW ONE 0 FOR ZERO DATE
FMT1DAT0 ICM   R0,7,0(R1)          ZERO DATE?
         BZR   R14                 YES, RETURN
         IC    R15,0(,R1)          GET BINARY YEAR SINCE 1900
         LA    R15,1900(,R15)      GET 4-DIGIT YEAR
         CVD   R15,DOUBLE
         OI    DOUBLE+7,X'0F'
         CLI   FELDSPOF(R8),X'FF'  NEGATIVE DISPLAY OFFSET?
         BNE   FMT1YROK            NO, OKAY TO FORMAT YEAR NORMALLY
         CLI   FELDSPOF+1(R8),X'FE'    IS IT NEGATIVE TWO?
         BNE   FMT1YRDN            NO, NO ROOM FOR YEAR
         UNPK  2(2,R4),DOUBLE+6(2) YES, ROOM FOR LAST 2 YEAR DIGITS
         B     FMT1YRDN            YEAR FORMATTING NOW DONE
FMT1YROK UNPK  0(4,R4),DOUBLE+5(3) SHOW YEAR
FMT1YRDN MVI   4(R4),C'.'
         ICM   R15,3,1(R1)         GET JULIAN DAY
         CVD   R15,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  5(3,R4),DOUBLE+6(2) SHOW JULIAN DAY
         BR    R14                 EXTRA FORMATTING FOR DSCB-1 DONE
FMTFLAG1 TM    0(R1),DS1COMPR      COMPRESSABLE EXTENDED FORMAT?
         BO    FMTCOMPR            YES
         TM    0(R1),DS1CPOIT      CHECKPOINTED DATA SET?
         BO    FMTCHKPT            YES
         TM    0(R1),DS1LARGE      LARGE SEQUENTIAL?
         BO    FMTLARGE            NO, ADD NO EXTRA TEXT
         TM    0(R1),DS1RECAL      RECALLED DATA SET?
         BZR   R14                 NO, ADD NO EXTRA TEXT
         MVC   2(6,R4),=C'-RECAL'  YES
         BR    R14
FMTCOMPR MVC   2(6,R4),=C'-COMPR'
         BR    R14
FMTCHKPT MVC   2(6,R4),=C'-CHKPT'
         BR    R14
FMTLARGE MVC   2(6,R4),=C'-LARGE'
         BR    R14
FMTSMSFG TM    0(R1),DS1PDSEX      HFS DATA SET?
         BO    FMTPDSEX            YES
         TM    0(R1),DS1PDSE       PDSE DATA SET?
         BO    FMTPDSE             YES
         TM    0(R1),DS1STRP       EXTENDED FORMAT DATA SET?
         BO    FMTSTRP             YES
         TM    0(R1),DS1SMSUC      ANY BCS ENTRY FOR DATA SET?
         BZR   R14                 YES, ADD NO EXTRA TEXT
         MVC   2(6,R4),=C'-UNCAT'  NO
         BR    R14
FMTPDSEX MVC   2(4,R4),=C'-HFS'
         BR    R14
FMTPDSE  MVC   2(5,R4),=C'-PDSE'
         BR    R14
FMTSTRP  MVC   2(6,R4),=C'-EXFMT'
         BR    R14
FMTDSORG TM    0(R1),DS1DSGU       UNMOVABLE?
         BZ    *+8                 NO
         MVI   7(R4),C'U'          YES, FLAG IT
         ICM   R15,12,0(R1)        LOAD DS1DSORG
         LA    R0,14               LOAD COUNT OF BITS TO TEST
         LA    R1,DSORGLIT         POINT TO DSORG LABELS
FMTDSOLP LTR   R15,R15             TOP BIT ON?
         BM    FMTDSOOK            YES, FOUND DSORG
         SLL   R15,1               NO, PROMOTE NEXT BIT
         LA    R1,2(,R1)           POINT TO NEXT LABEL
         BCT   R0,FMTDSOLP
         BR    R14                 RETURN WITHOUT LABEL
FMTDSOOK MVI   4(R4),C'-'
         MVC   5(2,R4),0(R1)       SUPPLY DSORG LABEL
         BR    R14                 EXTRA FORMATTING FOR DSCB-1 DONE
FMTRECFM ICM   R15,1,0(R1)         LOAD DS1RECFM
         BZR   R14                 NO LABEL FOR NULL RECFM
         SRL   R15,6
         LA    R15,RECFM1ST(R15)   POINT TO FIRST RECFM LETTER
         MVI   2(R4),C'-'
         MVC   3(1,R4),0(R15)      SHOW FIRST RECFM LETTER
         IC    R15,0(,R1)          LOAD DS1RECFM
         SLL   R15,26              PROMOTE BITS OF INTEREST
         LA    R0,5                LOAD COUNT OF BITS TO TEST
         LA    R1,RECFMLIT         POINT TO DSORG LABELS
FMTRFMLP LTR   R15,R15             TOP BIT ON?
         BNM   FMTRFMOK            YES, FOUND RECFM
         MVC   4(1,R4),0(R1)       SUPPLY RECFM LETTER
         LA    R4,1(,R4)           INCREMENT DISPLAY POINTER
FMTRFMOK SLL   R15,1               NO, PROMOTE NEXT BIT
         LA    R1,1(,R1)           POINT TO NEXT LABEL
         BCT   R0,FMTRFMLP
         BR    R14                 EXTRA FORMATTING FOR DSCB-1 DONE
FMTDSIND TM    0(R1),X'02'         DATA SET CHANGED?
         BZR   R14                 NO, RETURN WITHOUT ACTION
         MVC   2(6,R4),=CL6'-CHNGD'
         BR    R14                 EXTRA FORMATTING FOR DSCB-1 DONE
FMTSCAL1 CLI   0(R1),0             ABSOLUTE TRACK ALLOCATION?
         BE    FMTABSTR            YES
         TM    0(R1),X'C0'         CYLINDER ALLOCATION?
         BO    FMTCYLS             YES
         TM    0(R1),X'80'         TRACK ALLOCATION?
         BNO   FMTNOTRK            NO
         MVC   2(4,R4),=CL4'-TRK'
FMTNOTRK TM    0(R1),X'40'         BLOCK ALLOCATION?
         BNO   FMTNOBLK            NO
         MVC   2(4,R4),=CL4'-BLK'
FMTNOBLK TM    0(R1),X'01'         ROUNDED ALLOCATION?
         BNOR  R14                 NO
         MVC   6(2,R4),=CL2'-R'
         BR    R14                 EXTRA FORMATTING FOR DSCB-1 DONE
FMTABSTR MVC   2(6,R4),=CL6'-ABSTR'
         BR    R14                 EXTRA FORMATTING FOR DSCB-1 DONE
FMTCYLS  MVC   2(4,R4),=CL5'-CYL'
         BR    R14                 EXTRA FORMATTING FOR DSCB-1 DONE
         SPACE
*
*         BLANK 3RD & 4TH LINES AND UNDERSCORE 4TH LINE
*
         SPACE
FMTRULER L     R1,SCRNCOLS         GET SCREEN WIDTH
         L     R0,SCREENBF         POINT TO THE PRIMARY BUFFER
         AR    R1,R1               GET THE LENGTH OF TWO SCREEN LINES
         AR    R0,R1               POINT TO THE THIRD LINE
         LA    R15,C' '
         SLL   R15,24              SET PAD TO BLANK AND ZERO LENGTH
         MVCL  R0,R14              BLANK 3RD AND 4TH LINES
         L     R1,SCRNCOLS         GET SCREEN WIDTH
         LR    R0,R1               COPY IT
         AR    R1,R1               DOUBLE IT
         L     R15,SCREENBF        POINT TO THE PRIMARY BUFFER
         AR    R15,R0              POINT TO THE 2ND LINE
         AR    R15,R1              POINT TO THE 4TH LINE
         ST    R15,SAVGRS15        SAVE THE LABEL LINE ADDRESS
         A     R15,SCREENSZ        POINT TO ITS SHADOW
FMTRULLP OI    0(R15),X'30'        TURN ON UNDERSCORE KEEPING COLOUR
         LA    R15,1(,R15)         POINT TO THE NEXT BYTE
         BCT   R0,FMTRULLP         UNDERSCORE FOR THE WHOLE LINE
         BR    R14                 RETURN TO CALLER
         SPACE
**********************************************************************
*                                                          *         *
*         FORMAT ADDRESS SPACE VIRTUAL STORAGE             *  R44.0  *
*                                                          * AUG2013 *
**********************************************************************
         SPACE
FMTSTOR  C     R7,HOLDTOP          IS THIS THE FIRST DATA LINE?
         BNE   FMTSTGLN            NO, HEADING ALREADY DONE
         BAS   R14,FMTRULER        CLEAR THIRD AND FOURTH LINES
         L     R0,SCRNCOLS         GET THE SCREEN WIDTH
         L     R15,SAVGRS15        POINT TO THE LABEL LINE
         MVC   0(7,R15),=CL7'ADDRESS'
         LA    R0,4                GET WORDS PER LINE
         LA    R15,8(,R15)         POINT PAST THE ADDRESS MARGIN
         LA    R4,C'0'             INITIALIZE NUMERIC
         CLC   @ADDR,0(R2)         IS ADDRESS BEFORE FIRST LINE?
         BNL   FMTHDWRD            NO
         MVC   @ADDR,0(R2)         YES, UPDATE ADDRESS TO FIRST LINE
FMTHDWRD MVC   4(5,R15),=CL5'WORD-'
         AIF   (&ENV390).JUMPCD1
         MVI   1(R15),C'%'         FLAG JUMP SELECTION COLUMN
         AGO   .JUMPCD2
.JUMPCD1 ANOP
         MVI   1(R15),C'?'         FLAG JUMP SELECTION COLUMN
.JUMPCD2 ANOP
         STC   R4,9(,R15)
         LA    R4,1(,R4)
         LA    R15,8+3(,R15)
         BCT   R0,FMTHDWRD
         MVC   5(5,R15),=CL5'ASCII'
         TM    MODE,MD_ASCII       ASCII ON?
         BO    FMTADLOC            YES, HAVE CORRECT COLUMN HEADING
         MVC   5(6,R15),=CL6'EBCDIC'
         SPACE
FMTADLOC STM   R14,R12,12(R13)     MAKE IT EASY TO RESTORE REGISTERS
         L     R6,SCRNCOLS         GET SCREEN WIDTH
         AR    R6,R6               DOUBLE IT
         A     R6,SCREENBF         POINT TO THE THIRD SCREEN LINE
         L     R2,CVTPTR(,0)       POINT TO THE CVT
         USING CVT,R2
         L     R14,@ADDR           LOAD TARGET VIRTUAL ADDRESS
         AIF   (&ENV390).STG390
         L     R4,CVTGDA           POINT TO THE GDA
         USING GDA,R4
         C     R14,PASTRT          BELOW THE PRIVATE AREA?
         BNH   FMTNUC              YES, MUST BE NUCLEUS
         L     R15,SQASPQEP        POINT TO THE SQA SPQE
         USING SPQESECT,R15
         L     R15,SPDQEPTR        POINT TO FIRST DQE
         DROP  R15                 SPQESECT
         USING DQESECT,R15
         C     R14,DQEBLKAD        BELOW SYSTEM QUEUE AREA?
         BNL   FMTSQA              NO, MUST BE SQA
         DROP  R15                 DQESECT
         CLM   R14,7,CVTLPDIA+1    BELOW THE PAGABLE LINK PACK AREA?
         BNL   FMTPLPA             NO, MUST BE PLPA
         L     R15,CSAPQEP         POINT TO THE CSA PQE
         USING PQESECT,R15
         L     R0,PQEREGN          POINT TO THE CSA
         A     R0,PQESIZE          POINT PAST THE CSA
         CR    R14,R0              ABOVE THE COMMON SERVICE AREA?
         BNL   FMTMLPA             YES, MUST BE MLPA
         C     R14,PQEREGN         BELOW THE COMMON SERVICE AREA?
         BL    FMTPVTSP            YES, MUST BE IN THE REGION
         LA    R4,CSASPQEP         POINT TO THE FIRST CSA SPQE
         DROP  R15,R4,R2           PQESECT, GDA, CVT
         USING SPQESECT,R4
FMTCNXSP ICM   R4,15,SPQEPTR       GET SPQE ADDRESS
         BZ    FMTADXIT            CSA SCAN NOW COMPLETE
         LR    R2,R4               POINT TO FIRST DQE POINTER
         USING DQESECT,R2
FMTCNXDQ ICM   R2,15,DQEPTR        POINT TO DQE
         BZ    FMTCNXSP            END OF CHAIN FOR THIS SPQE
         CR    R6,R4               END OF CHAIN?
         BE    FMTCNXSP            YES, DONE THIS KEY FOR THIS SUBPOOL
         L     R0,DQEBLKAD         POINT TO ALLOCATED BLOCK
         CR    R14,R0              IN ALLOCATED AREA?
         BL    FMTCNXDQ            NO
         A     R0,DQELNTH
         CR    R14,R0
         BNL   FMTCNXDQ            NO
         SR    R0,R0               YES
         IC    R0,SPQEKEY          SHOW THE KEY
         SRL   R0,4
         MVC   1(3,R6),=C'KEY'
         STC   R0,5(,R6)
         TR    5(1,R6),HEXTAB
         IC    R0,SPQEID           SHOW THE SUBPOOL ID
         CVD   R0,DOUBLE
         MVC   10(7,R6),=C'SUBPOOL'
         MVC   18(3,R6),SCRMASK+6
         ED    17(4,R6),DOUBLE+6
         B     FMTADXIT
         DROP  R4,R2               SPQESECT, DQESECT
         SPACE
         USING CVT,R2
FMTNUC   MVC   10(7,R6),=C'NUCLEUS'
         B     FMTADXIT
FMTSQA   MVC   10(3,R6),=C'SQA'
         B     FMTADXIT
         SPACE
         AGO   .FMTPLPA
.STG390  ANOP
         L     R4,CVTSMEXT         POINT TO CVT VS ADDRESS EXTENSION
         USING CVTVSTGX,R4
         C     R14,CVTPLPAS        BELOW PLPA?
         BL    FNOTPLPA            YES
         C     R14,CVTPLPAE        ABOVE PLPA?
         BNH   FMTPLPA             NO, IS IN PLPA
         C     R14,CVTEPLPE        ABOVE EPLPA?
         BH    FNOTPLPA            YES
         C     R14,CVTEPLPS        BELOW EPLPA?
         BNL   FMTPLPA             NO, IS IN EPLPA
FNOTPLPA C     R14,CVTRWNS         IN NUCLEUS?
         BL    FMTNTNUC            NO, BELOW
         C     R14,CVTERWNE        IN NUCLEUS?
         BH    FMTNTNUC            NO, ABOVE
         DROP  R4                  CVTVSTGX
         SPACE
         MVC   8(7,R6),=C'NUCLEUS'
         SR    R0,R0               CLEAR FOR INSERT
         L     R15,CVTNUCMP        POINT TO THE NUCLEUS MAP
         L     R4,12(,R15)         GET LENGTH OF NUCLEUS MAP
         SRL   R4,4                DIVIDE BY 16 FOR ENTRY POINT COUNT
         LA    R15,16(,R15)        POINT TO THE FIRST ENTRY
         BCTR  R4,0                DECREMENT FOR HEADER
FNUCLOOP TM    12(R15),X'10'       JUST AN ENTRY POINT?
         BZ    FNXTNUCE            YES, SKIP IT
         L     R1,8(,R15)          NO, LOAD CSECT START ADDRESS
         CR    R14,R1              NO, PAST REQUIRED CSECT?
         BL    FNUCGAP             YES, MUST BE INTER-CSECT GAP
         ICM   R0,7,13(R15)        NO, LOAD CSECT LENGTH
         ALR   R1,R0               POINT PAST END OF CSECT
         CR    R14,R1              IN THIS CSECT?
         BNL   FNXTNUCE            NO, TRY NEXT CSECT
         MVC   16(5,R6),=C'CSECT'
         TM    12(R15),X'08'       READ-ONLY SECTION?
         BZ    FNUCREAD            NO
         MVI   16(R6),C'R'         YES, INDICATE THIS
FNUCREAD MVC   22(8,R6),0(R15)     SHOW CSECT NAME
         MVC   30(10,R6),=C'  OFFSET +'
         SL    R14,8(,R15)         DETERMINE OFFSET
         ST    R14,DOUBLE
         UNPK  40(7,R6),DOUBLE+1(4)
         TR    40(6,R6),HEXTAB-240
         MVI   46(R6),C' '         SHOW HEXADECIMAL OFFSET INTO CSECT
         B     FMTADXIT            EXIT FROM SUBROUTINE
FNXTNUCE LA    R15,16(,R15)        ADJUST ENTRY POINTER
         BCT   R4,FNUCLOOP         PROCESS NEXT NUCLEUS MAP ENTRY
FNUCGAP  MVC   16(15,R6),=C'INTER-CSECT GAP'
         B     FMTADXIT            EXIT FROM SUBROUTINE
         SPACE
FMTNTNUC L     R4,CVTGDA           POINT TO THE GDA
         USING GDA,R4
         C     R14,GDACSA          BELOW CSA?
         BL    FMTPVTSP            YES
         L     R0,GDAECSA          GET ECSA START ADDRESS
         A     R0,GDAECSAS         POINT TO EXTENDED PRIVATE AREA
         CR    R14,R0              ABOVE ECSA?
         BNL   FMTPVTSP            YES
         B     FMTMLPA
         DROP  R4                  GDA
         SPACE
.FMTPLPA ANOP
FMTPLPA  MVC   10(4,R6),=C'PLPA'
         L     R15,CVTLPDIA        POINT TO LINK PACK AREA DIRECTORY
         USING LPDE,R15
FMTLPDLP TM    LPDEATTR,LPDEMIN    JUST A MINOR LPDE?
         BO    FMTNXLPD            YES, SKIP IT
         L     R1,LPDEXTAD         NO, LOAD MODULE EXTENT START ADDRESS
         CR    R14,R1              NO, ABOVE REQUIRED ADDRESS?
         BL    FMTNXLPD            YES, CAN'T BE THIS MODULE
         AL    R1,LPDEXTLN         NO, ADD MODULE EXTENT LENGTH
         LA    R1,0(,R1)           ENSURE ADDRESS FORMAT
         CR    R14,R1              IN THIS MODULE?
         BNL   FMTNXLPD            NO, TRY NEXT MODULE
         MVC   15(6,R6),=C'MODULE'
         MVC   22(8,R6),LPDENAME   SHOW MODULE NAME
         TM    LPDEATT2,LPDEAUTH   LINKED WITH AC=1?
         BZ    PLPAACOK            NO
         MVC   52(4,R6),=C'AC=1'
PLPAACOK TM    LPDEATTR,LPDENLR    ONLY LOADABLE?
         BO    PLPAOLOK            NO
         MVC   57(2,R6),=C'OL'
PLPAOLOK TM    LPDEATTR,LPDEREN    REENTERABLE?
         BZ    PLPARNOK            NO
         MVC   60(2,R6),=C'RN'
PLPARNOK TM    LPDEATTR,LPDESER    SERIALLY REUSABLE?
         BZ    PLPARUOK            NO
         MVC   64(2,R6),=C'RU'
PLPARUOK SL    R14,LPDEXTAD        DETERMINE OFFSET
PLPAOFST MVC   30(10,R6),=C'  OFFSET +'
         ST    R14,DOUBLE
         UNPK  40(7,R6),DOUBLE+1(4)
         TR    40(6,R6),HEXTAB-240
         MVI   46(R6),C' '         SHOW HEXADECIMAL OFFSET INTO MODULE
         B     FMTADXIT            EXIT FROM SUBROUTINE
FMTNXLPD LA    R15,40(,R15)        ADJUST LPDE POINTER
         AIF   (NOT &ENV390).LPDELOK
         CLI   CVTDCB,X'9B'        MVS/ESA OR LATER?
         BNE   FMTLPLOK            NO, USE THE STANDARD LPDE LENGTH
         TM    CVTOSLV6,X'10'      TEST CVTH77B0
         BNO   FMTLPLOK            OS IS EARLIER THAN Z/OS 2.3
         LA    R15,8(,R15)         ADJUST FOR EXTRA LPDE SIZE
FMTLPLOK DS    0H
.LPDELOK ANOP
         CLI   LPDENAME,X'FF'      END OF LINK PACK AREA DIRECTORY?
         BNE   FMTLPDLP            NO, PROCESS THIS ENTRY
         LA    R15,16(,R15)        YES, POINT PAST PLPA DIRECTORY
         CR    R14,R15             IN DIRECTORY?
         BNL   PLPAGAP             NO
         MVC   15(9,R6),=C'DIRECTORY'
         SL    R14,CVTLPDIA        GET PLPA DIRECTORY OFFSET
         B     PLPAOFST            DISPLAY OFFSET
PLPAGAP  MVC   15(16,R6),=C'INTER-MODULE GAP'
         B     FMTADXIT            EXIT FROM SUBROUTINE
         DROP  R15                 LPDE
         SPACE
FMTMLPA  MVC   10(4,R6),=C'LPAQ'
         L     R2,CVTQLPAQ         POINT TO LPAQ ORIGIN
         DROP  R2                  CVT
         B     FMTNXCDE            CHECK FOR ANY LPAQ MODULES
         USING CDENTRY,R2
FMTCDELP TM    CDATTR,CDMIN        JUST A MINOR CDE?
         BO    FMTNXCDE            YES, SKIP IT
         L     R15,CDXLMJP         NO, POINT TO EXTENT LIST
         USING XTLST,R15
         L     R1,XTLMSBAA         LOAD MODULE EXTENT START ADDRESS
         CR    R14,R1              NO, ABOVE REQUIRED ADDRESS?
         BL    FMTNXCDE            YES, CAN'T BE THIS MODULE
         SLR   R0,R0               NO
         ICM   R0,7,XTLMSBLN       GET MODULE EXTENT LENGTH
         ALR   R1,R0               ADD MODULE EXTENT LENGTH
         LA    R1,0(,R1)           RESET TOP BYTE
         CR    R14,R1              IN THIS MODULE?
         BNL   FMTNXCDE            NO, TRY NEXT MODULE
         CLC   10(7,R6),=C'SUBPOOL'
         BNE   FMTPAKOK
         MVC   10(5,R6),=C'JPA  '
FMTPAKOK MVC   15(6,R6),=C'MODULE'
         MVC   22(8,R6),CDNAME     SHOW MODULE NAME
         MVC   30(10,R6),=C'  OFFSET +'
         SL    R14,XTLMSBAA        DETERMINE OFFSET
         ST    R14,DOUBLE
         UNPK  40(7,R6),DOUBLE+1(4)
         TR    40(6,R6),HEXTAB-240
         MVI   46(R6),C' '         SHOW HEXADECIMAL OFFSET INTO MODULE
         TM    CDATTR2,CDAUTH      LINKED WITH AC=1?
         BZ    LPAQACOK            NO
         MVC   52(4,R6),=C'AC=1'
LPAQACOK TM    CDATTR,CDNLR        ONLY LOADABLE?
         BO    LPAQOLOK            NO
         MVC   57(2,R6),=C'OL'
LPAQOLOK TM    CDATTR,CDREN        REENTERABLE?
         BZ    LPAQRNOK            NO
         MVC   60(2,R6),=C'RN'
LPAQRNOK TM    CDATTR,CDSER        SERIALLY REUSABLE?
         BZ    LPAQRUOK            NO
         MVC   64(2,R6),=C'RU'
LPAQRUOK TM    CDATTR2,CDOLY       OVERLAY FORMAT PROGRAM?
         BZ    LPAQOVOK            NO
         MVC   67(2,R6),=C'OV'
LPAQOVOK LH    R0,CDUSE            LOAD USE COUNT
         CVD   R0,DOUBLE
         OI    DOUBLE+7,X'0F'
         MVC   70(2,R6),=C'US'
         UNPK  72(5,R6),DOUBLE+5(3)
         CLI   72(R6),C'0'         LEADING ZERO?
         BNE   LPAQUSOK            NO
         MVI   72(R6),C'E'         YES, SHOW SOMETHING MORE USEFUL
         CLI   73(R6),C'0'         LEADING ZERO?
         BNE   LPAQUSOK            NO
         MVI   73(R6),C'='         YES, SHOW SOMETHING MORE USEFUL
LPAQUSOK B     FMTADXIT
FMTNXCDE ICM   R2,15,CDCHAIN       POINT TO NEXT CDE
         BNZ   FMTCDELP            PROCESS THIS ENTRY
         DROP  R2,R15              CDENTRY, XTLST
         B     FMTEOCDE            END OF CDE CHAIN
         SPACE
FMTPVTSP L     R1,PSAAOLD          POINT TO CURRENT ASCB
         USING ASCB,R1
         L     R1,ASCBASXB         POINT TO CURRENT ASXB
         DROP  R1                  ASCB
         USING ASXB,R1
         L     R7,ASXBFTCB         POINT TO TCB ON TCB CHAIN
         DROP  R1                  ASXB
         USING TCB,R7
         B     QSRCHMSS
         AIF   (&ENV390).FMTPVTZ
FMTNXTCB ICM   R7,15,TCBTCB        POINT TO NEXT TCB
         BZ    FMTJPA              END OF TCB CHAIN REACHED
QSRCHMSS LA    R1,TCBMSS           POINT TO FIRST SPQE ANCHOR
         LA    R2,TCBUKYSP         POINT TO SECOND SPQE ANCHOR
         USING SPQESECT,R1
VQSPQELP ICM   R1,15,SPQEPTR       POINT TO NEXT SPQE
         BNZ   VDQESCAN            SCAN ITS DQES
         LTR   R2,R2               ANY MORE SPQE ANCHORS?
         BZ    FMTNXTCB            NO, NO MORE SPQES TO CHECK
         LA    R1,TCBSWA           YES, POINT TO LAST SPQE ANCHOR
         CR    R1,R2               ALREADY QUEUED LAST ANCHOR?
         LR    R1,R2               COPY NEXT TCB SPQE POINTER
         BE    VSWADONE            YES
         LA    R2,TCBSWA           NO, QUEUE UP LAST ANCHOR
         B     VQSPQELP            TRY THIS SPQE CHAIN
VSWADONE SLR   R2,R2               DON'T DO THIS AGAIN
         B     VQSPQELP            TRY THIS SPQE CHAIN
VDQESCAN LR    R15,R1              POINT TO FIRST DQE ANCHOR
         USING DQESECT,R15
VDQELOOP ICM   R15,15,DQEPTR       POINT TO NEXT DQE
         BZ    VQSPQELP            END OF CHAIN
         CR    R15,R1              END OF DQE CHAIN?
         BE    VQSPQELP            YES, CHECK FOR MORE ANCHORS
         L     R0,DQEBLKAD         POINT TO ALLOCATED BLOCK
         CR    R14,R0              IN ALLOCATED AREA?
         BL    VDQELOOP            NO
         A     R0,DQELNTH
         CR    R14,R0
         BNL   VDQELOOP            NO
         SLR   R0,R0
         MVC   1(3,R6),=C'KEY'
         IC    R0,SPQEKEY          SHOW STORAGE KEY
         SRL   R0,4
         STC   R0,5(,R6)
         TR    5(1,R6),HEXTAB
         IC    R0,SPQEID           SHOW SUBPOOL NUMBER
         CVD   R0,DOUBLE
         MVC   10(7,R6),=C'SUBPOOL'
         MVC   18(3,R6),SCRMASK+6
         ED    17(4,R6),DOUBLE+6
         ST    R7,DOUBLE           SAVE TCB ADDRESS FOR UNPACK
         UNPK  32(7,R6),DOUBLE+1(4)
         TR    32(6,R6),HEXTAB-240
         MVI   38(R6),C' '
         L     R4,TCBRBP           POINT TO TOP RB
         MVC   23(8,R6),=C'OWNED BY'
         TM    SPQEFLGS,SPSHARE    OWNED PAGE?
         BZ    VQRBLOOP            YES
         MVC   22(4,R6),=C'SHAR'   NO, SHARED
         USING RBBASIC,R4
VQRBLOOP ICM   R0,7,RBLINKB        GET RBLINK
         CR    R0,R7               BOTTOM RB?
         BE    VQGOTPRB            YES
         LR    R4,R0               NO
         B     VQRBLOOP
VQGOTPRB ICM   R4,7,RBCDE1         POINT TO THE CDE
         BZ    VQCHKFQE            NO CDE SO LEAVE TCB ADDRESS ON SHOW
         DROP  R4                  RBBASIC
         USING CDENTRY,R4
         MVC   32(8,R6),CDNAME     COPY PROGRAM NAME
         TR    32(8,R6),PERIODS    HANDLE UNPRINTABLES
         DROP  R4                  CDENTRY
VQCHKFQE LR    R4,R15              COPY DQE ADDRESS
         USING FQESECT,R4
VFQELOOP ICM   R4,7,FQEPTR+1       POINT TO THE NEXT FQE
         BZ    FMTJPA              END OF CHAIN, SO LINE NOW COMPLETE
         CR    R4,R15              END OF FQE CHAIN?
         BE    FMTJPA              YES, GO CHECK IF IN PROGRAM EXTENT
         L     R0,FQAREA           POINT TO ALLOCATED BLOCK
         CR    R14,R0              IN FREE AREA?
         BNL   VFQELOOP            NO
         S     R0,FQELNTH
         CR    R14,R0
         BL    VFQELOOP            NO
         MVC   43(12,R6),=C'FREE STORAGE'
         B     FMTADXIT            DISPLAY LINE NOW COMPLETE
         DROP  R1,R4,R15,R7        SPQESECT, FQESECT, DQESECT, TCB
         AGO   .FMTJPA
.FMTPVTZ ANOP
FMTNXTCB ICM   R7,15,TCBTCB        POINT TO NEXT TCB
         BZ    FMTJPAZ             END OF TCB CHAIN REACHED
QSRCHMSS LA    R1,TCBMSS           POINT TO FIRST SPQE ANCHOR
         LA    R2,TCBUKYSP         POINT TO SECOND SPQE ANCHOR
         USING SPQE,R1
VQSPQELP ICM   R1,15,SPQENEXT      POINT TO NEXT SPQE
         BNZ   VGETSPQA            GO FIND THE SPQA
         LTR   R2,R2               ANY MORE SPQE ANCHORS?
         BZ    FMTNXTCB            NO, NO MORE SPQES TO CHECK
         LA    R1,TCBSWA           YES, POINT TO LAST SPQE ANCHOR
         CR    R1,R2               ALREADY QUEUED LAST ANCHOR?
         LR    R1,R2               COPY NEXT TCB SPQE POINTER
         BE    VSWADONE            YES
         LA    R2,TCBSWA           NO, QUEUE UP LAST ANCHOR
         B     VQSPQELP            TRY THIS SPQE CHAIN
VSWADONE SLR   R2,R2               DON'T DO THIS AGAIN
         B     VQSPQELP            TRY THIS SPQE CHAIN
VGETSPQA L     R14,SPQESPQA        POINT TO SPQA
         USING SPQA,R14
         XC    DOUBLE,DOUBLE       RESET A FLAG
         ST    R14,DOUBLE+4        SAVE FOR SPQA CHECK
         L     R15,CVTPTR(,0)      POINT TO THE CVT
         USING CVT,R15
         LA    R0,2
         TM    CVTOSLV2,CVTH7703   OS/390 R10 OR LATER?
         BNO   *+8                 NO
         LA    R0,3                YES
         TM    @ADDR,X'7F'         EXTENDED ADDRESS?
         BZ    VDQESCAN            NO
         LA    R14,SPQAADQE+8      YES, POINT TO EXTENDED DQE ANCHORS
         LA    R0,1
         TM    CVTOSLV2,CVTH7703   OS/390 R10 OR LATER?
         BNO   VDQESCAN            NO
         L     R14,SPQESPQX        YES, POINT TO EXTENDED DQE ANCHORS
         LA    R0,2
         DROP  R15                 CVT
VDQESCAN STH   R0,DOUBLE           SAVE DQE QUEUE COUNT
         LR    R15,R14             POINT TO FIRST DQE ANCHOR
         USING DQE,R15
VDQELOOP L     R15,DQENEXT         POINT TO NEXT DQE
         CR    R15,R14             END OF DQE CHAIN?
         BE    VANKCHEK            YES, CHECK FOR MORE ANCHORS
         L     R0,DQEAREA          POINT TO ALLOCATED BLOCK
         C     R0,@ADDR            IN ALLOCATED AREA?
         BH    VDQELOOP            NO
         A     R0,DQESIZE
         C     R0,@ADDR
         BNH   VDQELOOP            NO
         DROP  R14                 SPQA
         SLR   R0,R0
         MVC   1(3,R6),=C'KEY'
         IC    R0,SPQEKEY          SHOW STORAGE KEY
         SRL   R0,4
         STC   R0,5(,R6)
         TR    5(1,R6),HEXTAB
         C     R14,DOUBLE+4        PAGE-FIXED BELOW THE LINE?
         BNE   *+10                NO
         MVC   70(7,R6),=C'(R<16M)'
         IC    R0,SPQEID           SHOW SUBPOOL NUMBER
         CVD   R0,DOUBLE
         MVC   10(7,R6),=C'SUBPOOL'
         MVC   18(3,R6),SCRMASK+6
         ED    17(4,R6),DOUBLE+6
         UNPK  32(7,R6),DOUBLE+1(4)
         TR    32(6,R6),HEX-C'0'
         MVI   38(R6),C' '
         TM    SPQEFLGS,SPQEOWN    OWNED BY A TCB?
         BZ    VQCHKFQE            NO, DON'T SHOW TCB ADDRESS
         MVC   23(9,R6),=C'OWNED BY '
         UNPK  32(7,R6),SPQETCB+1(4)
         TR    32(6,R6),HEXTAB-240
         MVI   38(R6),C' '
         L     R7,SPQETCB          POINT TO OWNING TCB
         L     R4,TCBRBP           POINT TO TOP RB
         USING RBBASIC,R4
VQRBLOOP ICM   R0,7,RBLINKB        GET RBLINK
         C     R0,SPQETCB          BOTTOM RB?
         BE    VQGOTPRB            YES
         LR    R4,R0               NO
         B     VQRBLOOP
VQGOTPRB ICM   R4,7,RBCDE1         POINT TO THE CDE
         BZ    VQCHKFQE            NO CDE SO LEAVE TCB ADDRESS ON SHOW
         DROP  R4                  RBBASIC
         USING CDENTRY,R4
         MVC   32(8,R6),CDNAME     COPY PROGRAM NAME
         TR    32(8,R6),PERIODS    HANDLE UNPRINTABLES
         DROP  R4                  CDENTRY
VQCHKFQE LR    R4,R15              COPY DQE ADDRESS
         USING FQE,R4
VFQELOOP L     R4,FQENEXT          POINT TO THE NEXT FQE
         CR    R4,R15              END OF FQE CHAIN?
         BE    FMTJPAZ             YES, GO CHECK IF IN PROGRAM EXTENT
         L     R0,FQEAREA          POINT TO ALLOCATED BLOCK
         C     R0,@ADDR            IN FREE AREA?
         BH    VFQELOOP            NO
         A     R0,FQESIZE
         C     R0,@ADDR
         BNH   VFQELOOP            NO
         MVC   43(12,R6),=C'FREE STORAGE'
         B     FMTADXIT            DISPLAY LINE NOW COMPLETE
         DROP  R4,R15              FQE, DQE
VANKCHEK LA    R14,8(,R14)         POINT TO NEXT DQE ANCHORS
         LH    R0,DOUBLE
         BCT   R0,VDQESCAN         LOOK AT NEXT DQE CHAIN
         B     VQSPQELP            CHECK NEXT SUBPOOL QUEUE ELEMENT
         DROP  R1,R7               SPQE, TCB
FMTJPAZ  L     R14,@ADDR           RELOAD FOR FMTJPA
.FMTJPA  ANOP
         SPACE
FMTJPA   L     R2,PSATOLD          POINT TO THE CURRENT TCB
         USING TCB,R2
         L     R2,TCBJSTCB         POINT TO THE JOB STEP TCB
         LA    R2,TCBJPQ           POINT TO THE JPA CDE ANCHOR
         DROP  R2                  TCB
         B     FMTNXCDE            EXAMINE JPA MODULE ADDRESSES
FMTEOCDE CLI   10(R6),C'S'         SUBPOOL INFO PRESENT?
         BE    FMTADXIT            YES, DO NOT OVERLAY IT
         MVC   10(4,R6),9(R6)      NO, BLANK OUT LABEL
FMTADXIT L     R2,SAVGRS2          RESTORE RECORD POINTER
         L     R6,SAVGRS6          RESTORE SCREEN LINE POINTER
         SPACE
FMTSTGLN LR    R15,R6              POINT TO LINE'S BUFFER
         LR    R1,R2               POINT TO LINE'S DATA
         LA    R0,5                GET NUMBER OF WORDS TO SHOW
FMTLNWRD UNPK  0(9,R15),0(5,R1)    SHOW WORD CONTENTS IN HEX
         TR    0(8,R15),HEXTAB-240
         MVI   8(R15),FLDINHI
         MVI   10(R15),FLDOUTLO
         LA    R15,8+3(,R15)
         LA    R1,4(,R1)           POINT TO NEXT WORD
         BCT   R0,FMTLNWRD
         SH    R15,HW3
         MVC   0(3,R15),3(R15)     BLANK OUT EXCESS ATTRIBUTE CODES
         MVC   3(16,R15),4(R2)     SHOW DATA IN CHARACTERS
         LA    R4,3(,R15)          POINT TO DATA CHARACTERS
         TM    MODE,MD_ASCII       ASCII ON?
         BNO   FMTLNCLR            NO, SHOW CHARACTERS AS EBCDIC
         LA    R0,16               YES, GET DATA LENGTH
         XLATE (4),(0),TO=E        PERFORM TRANSLATION FROM ASCII
FMTLNCLR MVI   PERIODS+X'1C',X'1C' SHOW DUP CHARACTER
         MVI   PERIODS+X'1E',X'1E' SHOW FIELD MARK CHARACTER
         TR    0(16,R4),PERIODS    REMOVE UNPRINTABLES IN DATA
         MVC   PERIODS+X'1C'(3),PERIODS+X'1B'
         LR    R0,R6               POINT TO LINE'S BUFFER
         A     R0,SCREENSZ         POINT TO LINE'S SHADOW
         L     R1,SCRNCOLS         GET SCREEN LINE LENGTH
         LA    R15,X'01'           BLUE FOR ADDRESS AND DATA < @ADDR
         SLL   R15,24              SET AS PAD AND ZERO LENGTH
         MVCL  R0,R14              MAKE WHOLE LINE BLUE FOR STARTERS
         TM    OSBITS,X'80'        ARE ALL ADDRESSES 24-BIT?
         BO    FMTADROK            NO, SHOW 8-DIGIT ADDRESS
         MVI   0(R6),C' '          SHOW 6-DIGIT ADDRESS FOR MVS/370
         MVC   1(6,R6),2(R6)
         MVI   7(R6),C' '
FMTADROK L     R0,@ADDR            GET CURRENT BROWSE ADDRESS
         SR    R1,R1
         SRDL  R0,4
         SLL   R0,4
         C     R0,0(,R2)           @ADDR -> THIS LINE?
         BH    FORMATDN            AFTER THIS LINE SO LEAVE IT BLUE
         STM   R0,R1,SAVGRS0       SAVE IT FOR LATER
         LR    R0,R6               POINT TO LINE'S BUFFER
         A     R0,SCREENSZ         POINT TO LINE'S SHADOW
         L     R1,SCRNCOLS         GET SCREEN LINE LENGTH
         AH    R0,HW8              POINT PAST ADDRESS - LEAVE IT BLUE
         SH    R1,HW8              REDUCE LENGTH ACCORDINGLY
         LA    R15,X'05'           TURQUOISE FOR DATA AT/AFTER @ADDR
         SLL   R15,24              SET AS PAD AND ZERO LENGTH
         MVCL  R0,R14              MAKE LINE'S DATA TURQUOISE
         CLC   SAVGRS0,0(R2)       @ADDR -> THIS LINE?
         BNE   FMTSTORF            NO, THIS LINE IS LATER
         ICM   R1,15,SAVGRS1       YES, BUT IS IT OFFSET ZERO?
         BZ    FMTSTORF            YES, SO BLUE/TURQ ALL DONE
         SRL   R1,28               GET OFFSET WITHIN QUADWORD
         LR    R15,R6              POINT TO LINE'S BUFFER
         LR    R4,R1               NO, SAVE OFFSET IN 1->15 RANGE
         A     R15,SCREENSZ        POINT TO LINE'S SHADOW
         IC    R1,FMTPTROF(R1)     GET LENGTH CODE
         EX    R1,REVERSPF         PROPAGATE BLUE FROM ADDRESS ALONG
         LA    R15,54(,R15)        POINT TO SHADOW OF EBCDIC/ASCII
         BCTR  R4,0                DECREMENT FOR EXECUTE
         MVI   0(R15),X'01'        MAKE CORRESPONDING CHARS BLUE
         EX    R4,REVERSPF
FMTSTORF TM    STATUS4,$4MSG31     FIND COMMAND ISSUED?
         BNO   FORMATDN            NO, FORMAT OF LINE COMPLETE
         CLC   FNDNUM,DIRNUM(R7)   FOUND IN THIS RECORD?
         BNE   FMTCSROK            NO, DON'T MOVE CURSOR HERE
         L     R15,FNDOFF          YES, GET OFFSET OF FOUND STRING
         SH    R15,HW4             DISCOUNT ADDRESS WORD
         IC    R15,FMTPTROF(R15)   GET LINE OFFSET
         LA    R15,3(,R15)         GET LINE COLUMN
         AR    R15,R6              GET SCREEN ADDRESS + 1
         S     R15,SCREENBF        GET SCREEN POSITION
         S     R15,SCRNCOLS
         S     R15,SCRNCOLS        GET DYNAMIC AREA POSITION
         ST    R15,REVPOS          SET CURSOR POSITION
         MVC   REVCSR,REVBUFNM     SET CURSOR FIELD
FMTCSROK L     R15,FNDNUM          GET FOUND DATA RECORD NUMBER
         BCTR  R15,0               MAKE RELATIVE TO ZERO
         SLL   R15,4
         A     R15,FNDOFF
         SH    R15,HW4             GET FOUND ADDRESS
         LH    R14,STRINGL         GET FOUND DATA LENGTH CODE
         AR    R14,R15             POINT TO FOUND DATA LAST BYTE
         C     R14,0(,R2)          FOUND DATA BEFORE THIS LINE?
         BL    FORMATDN            YES, NOTHING TO HIGHLIGHT HERE
         S     R15,0(,R2)          GET START OFFSET
         BNM   FMTHIOK1            FOUND DATA STARTS ON THIS LINE
         SR    R15,R15             FOUND DATA STARTS BEFORE HERE
FMTHIOK1 LA    R0,15
         A     R0,0(,R2)           GET LAST ADDRES FOR THIS LINE
         CR    R14,R0              DOES DATA EXTEND PAST THIS LINE?
         BNH   FMTHIOK2            NO
         LR    R14,R0              YES, RESTRICT TO CURRENT LINE
FMTHIOK2 S     R14,0(,R2)          GET RECORD OFFSET OF LAST BYTE
         SR    R14,R15             GET LENGTH CODE FOR THIS LINE'S PART
         LA    R15,55(R15,R6)      POINT TO FIRST BYTE ON SCREEN
         A     R15,SCREENSZ        POINT TO ITS SHADOW
         MVI   0(R15),X'23'        REVERSE PINK FOR FOUND DATA
         LTR   R14,R14             MORE THAN ONE BYTE?
         BNP   FORMATDN            NO, FORMATTING OF STORAGE DONE
         BCTR  R14,0               YES, DECREMENT FOR EXECUTE
         EX    R14,REVERSPF        PROPAGATE HIGHLIGHTING
         B     FORMATDN            FORMATTING OF STORAGE DONE
         SPACE
         DROP  R5,R13              FORMATIT, @FMTAREA, SAVER
         SPACE
UNZIPMSG EQU   *,80
*        DC    CL40' ** PLACE CURSOR ON ZIPPED FILE ENTRY AN'
         DC    XL20'405C5C40D7938183854083A499A2969940969540'
         DC    XL20'A989979785844086899385408595A399A8408195'
*        DC    CL40'D PRESS <ENTER> TO SEE UNZIPPED DATA ** '
         DC    XL20'8440979985A2A2404CC5D5E3C5D96E40A39640A2'
         DC    XL20'858540A495A98997978584408481A381405C5C40'
DSORGLIT DC    CL28'ISPSDACXCQMQPO  GSTXTQ??VSTR'
RECFM1ST DC    CL4'*VFU'
RECFMLIT DC    CL5'TBSAM'
*              PACKED DECIMAL MAY BE SIGNED OR UNSIGNED.
*              IF UNSIGNED THEN SHOW THE LAST DIGIT.
*              IF SIGNED AND NEGATIVE THEN REPLACE WITH MINUS SIGN.
*              IF SIGNED AND POSITIVE THEN REPLACE WITH BLANK.
*   SIGN VALUE-> ABCDEF
PACKSIGN DC    C' - -  '           DISPLAY TABLE FOR DECIMAL SIGN
FMT2GIG  DC    P'2147483648'       UNSIGNED VALUE OF TOP BINARY BIT
FMTBNMSK DC    X'404020206B2020206B2020206B202120'
* LENGTH CODES FOR  0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F
FMTPTROF DC    AL1(09,11,13,15,20,22,24,26,31,33,35,37,42,44,46,48)
         DC    0D'0'
         LTORG
         DC    0H'0'
         SPACE
**********************************************************************
*                                                          *         *
*         COLOUR SYSOUT MESSAGES - ONLY IF HEX OFF         *  GP@P6  *
*                                                          * APR2006 *
**********************************************************************
         SPACE
*         ON ENTRY: R0 = SHADOW CODE FOR DISPLAY LINE
*                   R1 = RECORD LENGTH
*                   R2 = RECORD ADDRESS
         SPACE
         USING COLORMSG,R15
COLORMSG TM    STATUS12,$12PRT     LOOKING AT A "PRINTOUT"?
         BNOR  R14                 NO, SKIP MESSAGE COLOURING
         CH    R1,HW10             LINE SHORTER THAN 10 BYTES?
         BLR   R14                 YES, DATA TOO SHORT TO COMPARE
         CLC   STAR5,1(R2)         AT LEAST 5 ASTERISKS?
         BER   R14                 YES, NOT CHANGED HERE
         STM   R14,R12,12(R13)     SAVE REGISTERS
         USING SAVER,R13
         LA    R14,CLRMSGTB        POINT TO COMPARE TABLE
         CLC   STAR4,1(R2)         4 LEADING ASTERISKS?
         BNE   NOTSTAR4            NO
         CLI   5(R2),C'$'          POSSIBLE MODULE NAME?
         BL    NOTSTAR4            NO
         LA    R14,C@YELLOW        LINKAGE EDITOR PGM NAME IN YELLOW
         B     CLRMSGEQ            GO LOAD IT UP
NOTSTAR4 CLC   IER0,1(R2)          OS/360 SORT/MERGE MESSAGE?
         BNE   NOTSMERR            NO
         CLI   7(R2),C'A'          ACTION REQUIRED ERROR MESSAGE?
         BNE   NOTSMERR            NO
         LA    R14,C@REVRED        YES, SO IN REVERSE VIDEO RED
         B     CLRMSGEQ            GO LOAD IT UP
NOTSMERR CH    R1,HW20             LONG ENOUGH FOR JOB LOG?
         BL    CLRMSGCK            NO
         CLC   C@CPU,1(R2)         Z/OS JOB/STEP CPU TIME?
         BE    C@ZOSCPU            YES
         CLC   C@VIRT,1(R2)        Z/OS END-OF-STEP?
         BE    C@STPEND            YES
         CLC   C@REAL,1(R2)        Z/OS END-OF-STEP?
         BE    C@STPEND            YES
         CLI   9(R2),C' '          EXPECTED BLANK?
         BNE   CLRMSGCK            NO, NOT JOB LOG
         CLC   1(8,R2),2(R2)       NINE LEADING BLANKS?
         BNE   NOTXFERR            NO, NOT XF ASSEMBLER ERROR
         CLC   XFERRMSG,10(R2)     *** ERROR *** LINE?
         BNE   NOTXFERR            NO, CONTINUE WITH JOB LOG CHECKS
         MVI   SAVGRS0+3,X'22'     SHOW IN REVERSE RED
         B     CLRMSGOK            ALL DONE HERE
NOTXFERR CLI   18(R2),C' '         EXPECTED BLANK?
         BNE   CLRMSGCK            NO, NOT JOB LOG
         AIF   (&ENV390).C@LOG1
         CLI   3(R2),C'.'          EXPECTED PERIOD?
         BNE   CLRMSGCK            NO
         CLI   6(R2),C'.'          EXPECTED PERIOD?
         BNE   CLRMSGCK            NO
         CLC   JOB4,10(R2)         JOB?
         BE    CLRISLOG            YES
         CLC   STC4,10(R2)         STC?
         BE    CLRISLOG            YES
         CLC   TSU4,10(R2)         TSU?
         BE    CLRISLOG            YES
.C@LOG1  ANOP
         MVC   DOUBLE,10(R2)       COPY POSSIBLE JOBID
         LA    R5,DSNAIM+2-12
         AH    R5,DSNAIM           POINT TO DSNAME LOW-LEVEL QUALIFIER
         CLI   8(R5),C'.'          IS LLQ ACTUALLY H01?
         BE    *+8                 YES, SECOND LAST QUALIFIER IS THE GO
         LA    R5,4(,R5)           NO, PROBABLY MVS/370 SO USE LLQ
         OC    DOUBLE+3(4),FOUR0S  ENSURE LEADING ZEROS PRESENT
         CLC   DOUBLE,0(R5)        JOB LOG MESSAGE?
         BNE   CLRMSGCK            NO
*                                  RESET ASSEMBLER LISTING FLAGS
CLRISLOG NI    STATUS12,255-$12ASM-$12CNT-$12QOT-$12CMT
         MVI   SAVGRS0+3,X'07'     SHOW ACTION MESAGE IN WHITE
         CLI   19(R2),C'*'         ACTION MESSAGE?
         BE    CLRMSGOK            YES, ALL DONE HERE
         CLI   19(R2),C'@'         ACTION MESSAGE?
         BE    CLRMSGOK            YES, ALL DONE HERE
         MVI   SAVGRS0+3,X'01'     SHOW NON-ACTION MESSAGE IN BLUE
         B     CLRMSGOK            ALL DONE HERE
CLRMSGCK CLI   4(R2),C' '          IS 4TH (AFTER CC) CHARACTER BLANK?
         BE    CLRMSGOK            YES, NOT MSGID SO NO CHANGE
         CLI   1(R2),C'I'          POSSIBLE IBM MESSAGE?
         BNE   CLRMSGLP            NO, GO CHECK MESSAGE ID TABLE
         CLI   4(R2),C'0'          NUMERICS AFTER COMPONENT PREFIX?
         BL    CLRMSGOK            NO, DO NOT HIGHLIGHT
CLRMSGLP IC    R5,8(,R14)          GET LENGTH CODE OF COMPARE
         EX    R5,CLRMSGCP         MATCHING TABLE ENTRY?
         BE    CLRMSGEQ            YES
         LA    R14,10(,R14)        NO, POINT TO NEXT ENTRY IN TABLE
         CLI   0(R14),X'FF'        END OF TABLE?
         BNE   CLRMSGLP            NO, KEEP SEARCHING TABLE
         B     CLRMSGOK            YES, NOT IN TABLE
CLRMSGCP CLC   1(0,R2),0(R14)      <<< EXECUTED >>>
C@ZOSCPU LA    R14,C@373           NON-LAST END-OF-STEP MESSAGE
         B     CLRMSGEQ
C@STPEND LA    R14,C@374           LAST END-OF-STEP MESSAGE
CLRMSGEQ MVC   SAVGRS0+3(1),9(R14) SET LINE SHADOW CODE
*                                  RESET ASSEMBLER LISTING FLAGS
         NI    STATUS12,255-$12ASM-$12CNT-$12QOT-$12CMT
         CLI   SAVGRS0+3,X'04'     SPECIFYING NORMAL GREEN?
         BNE   CLRMSGOK            NO, USE NOMINATED VALUE
         MVC   SAVGRS0+3(1),CHRCOLOR   YES, REALLY MEANT "NO CHANGE"
CLRMSGOK LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER
         DROP  R15,R13             COLORMSG, SAVER
         SPACE
HW20     DC    H'20'
FOUR0S   DC    C'0000'
IER0     DC    C'IER0'
JOB4     DC    C'JOB '
STC4     DC    C'STC '
TSU4     DC    C'TSU '
STAR5    EQU   *,5
         DC    C'*'
STAR4    EQU   *,4
         DC    C'*'
XFERRMSG DC    CL10'*** ERROR '
C@CPU    DC    C'        CPU:'
C@VIRT   DC    C'        VIRT:'
C@REAL   DC    C'        REAL:'
* INTERNAL ATTRIBUTE CODE IS X'YZ' WHERE Y=HIGHLIGHTING AND Z=COLOUR
* Y IN 0-3 RANGE: 0=NORMAL 1=BLINK 2=REVERSE 3=UNDERSCORE
* Z IN 1-7 RANGE: 1=BLUE 2=RED 3=PINK 4=GREEN 5=TURQ 6=YELLOW 7=WHITE
*              CL8'MSGIDENT',AL1(LENGTH-CODE),X'INTERNAL-ATTR-CODE'
CLRMSGTB DC    CL8' ENTRY A',AL1(7),X'05' LINKAGE EDITOR
         DC    CL8' F64-LEV',AL1(7),X'07' LINKAGE EDITOR HEADING
         DC    CL8' INITOBJ',AL1(7),X'07' INITOBJ HEADING
         DC    CL8' TOTAL L',AL1(7),X'05' LINKAGE EDITOR
         DC    CL8' STMT NO',AL1(7),X'07'  STMT NO.
C@REVRED DC    CL8'** ASMA*',AL1(6),X'22' HLASM ERROR MESSAGES
         DC    CL8'** TXA**',AL1(5),X'22' X390 ERROR MESSAGES
         DC    CL8'**MODULE',AL1(7),X'05' LINKAGE EDITOR
         DC    CL8'ACF*****',AL1(2),X'02' ACF2 MESSAGES
         DC    CL8'ASMA****',AL1(3),X'05' HLASM MESSAGES
         DC    CL8'AUTHORIZ',AL1(7),X'05' LINKAGE EDITOR
         DC    CL8'ICH*****',AL1(2),X'02' RACF MESSAGES
         DC    CL8'IDC000**',AL1(5),X'05' IDCAMS RESULTS MESSAGES
         DC    CL8'IEA*****',AL1(2),X'26' ** SUPERVISOR MESSAGES
         DC    CL8'IEB144I ',AL1(7),X'05' UNUSED TRACKS IN OUTPUT D/S
         DC    CL8'IEB147I ',AL1(7),X'07' END OF JOB - HIGHEST CODE
         DC    CL8'IEB149I ',AL1(7),X'05' UNUSED DIRBLKS IN OUTPUT D/S
         DC    CL8'IEB151I ',AL1(7),X'22' JOB TERMINATED WITH ERRORS
         DC    CL8'IEB152I ',AL1(7),X'04' COMPRESSED - ALREAY IN PLACE
         DC    CL8'IEB153I ',AL1(7),X'04' ALL ORIGINALLY COMPRESSED
         DC    CL8'IEB154I ',AL1(7),X'04' MEMBER SUCCESSFULLY PROCESSED
         DC    CL8'IEB155I ',AL1(7),X'04' "   "   "  AND IS A NEW NAME
         DC    CL8'IEB161I ',AL1(7),X'05' COMPRESS TO BE DONE USING DD
         DC    CL8'IEB167I ',AL1(7),X'05' FOLLOWING MEMBERS PROCESSED
         DC    CL8'IEB818I ',AL1(7),X'07' HIGHEST CONDITION CODE
         DC    CL8'IEB819I ',AL1(7),X'35' END OF JOB IEBUPDTE
C@YELLOW DC    CL8'IEB*****',AL1(2),X'06' ** DATA SET UTILITIES
*        DC    CL8'IECSDS**',AL1(5),X'04' IECSDSL1 - DSCB MACRO LABELS
         DC    CL8'IEC*****',AL1(2),X'26' ** DATA MANAGEMENT MESSAGES
         DC    CL8'IEF032I*',AL1(6),X'05' STEP STOP (Z/OS 1.12 ONWARDS)
         DC    CL8'IEF033I*',AL1(6),X'06' JOB STOP  (Z/OS 1.12 ONWARDS)
         DC    CL8'IEF142I*',AL1(6),X'07' STEP WAS EXECUTED
         DC    CL8'IEF19***',AL1(4),X'22' (VARIOUS ALLOCATION ERRORS)
         DC    CL8'IEF20***',AL1(4),X'22' STEP NOT RUN: VARIOUS REASONS
         DC    CL8'IEF21***',AL1(4),X'22' DATA SET NOT FOUND (& OTHERS)
         DC    CL8'IEF221I*',AL1(6),X'22' REF PGM=*.DD STEP NOT RUN
         DC    CL8'IEF236I*',AL1(6),X'06' ALLOC. FOR
         DC    CL8'IEF237I*',AL1(6),X'01' ALLOCATED TO
         DC    CL8'IEF25***',AL1(4),X'22' (VARIOUS DASD ALLOC FAILURES)
         DC    CL8'IEF26***',AL1(4),X'22' (VARIOUS ISAM & OTHER ERRORS)
         DC    CL8'IEF272I*',AL1(6),X'07' STEP WAS NOT EXECUTED
         DC    CL8'IEF283I*',AL1(6),X'25' NOT DELETED
         DC    CL8'IEF285I*',AL1(6),X'04' (SUCCESSFUL DISPOSITION)
         DC    CL8'IEF286I*',AL1(6),X'22' DISP FIELD INCOMPATIBLE
         DC    CL8'IEF287I*',AL1(6),X'25' NOT CATLG/RECTLG/UNCTLG
         DC    CL8'IEF318I*',AL1(6),X'22' 'UNIT=AFF' INVALID FOR DASD
         DC    CL8'IEF367I*',AL1(6),X'22' PATTERN DSCB OBTAIN I/O ERR
C@373    DC    CL8'IEF373I*',AL1(6),X'05' STEP START
C@374    DC    CL8'IEF374I*',AL1(6),X'35' STEP STOP
         DC    CL8'IEF375I*',AL1(6),X'06' JOB START
         DC    CL8'IEF376I*',AL1(6),X'36' JOB STOP
         DC    CL8'IEF470I*',AL1(6),X'22' UNALLOCATION FAILED
         DC    CL8'IEF472I*',AL1(6),X'22' (ABNORMAL) COMPLETION CODE
         DC    CL8'IEF702I*',AL1(6),X'22' UNABLE TO ALLOCATE
         DC    CL8'IER000I ',AL1(7),X'07' OS/360 SORT/MERGE HEADING
         DC    CL8'IER038I ',AL1(7),X'06' ESTIMATED MAXIMUM RECORDS
         DC    CL8'IER052I ',AL1(7),X'34' END OF SORT
         DC    CL8'IER054I ',AL1(7),X'06' RECS INSERTED, RECS DELETED
         DC    CL8'IER055I ',AL1(7),X'06' RECORDS IN, RECORDS OUT
         DC    CL8'IER070I ',AL1(7),X'01' SORT/MERGE CONTROL STMTS
         DC    CL8'IEW0000 ',AL1(7),X'01' LINKAGE EDITOR CONTROL STMTS
         DC    CL8'IEW0****',AL1(3),X'06' LINKAGE EDITOR MESSAGES
         DC    CL8'IEW2****',AL1(3),X'05' PROGRAM BINDER MESSAGES
         DC    CL8'IGD100I*',AL1(6),X'01' DEV ALLOCATED TO DDNAME
         DC    CL8'IGD101I*',AL1(6),X'01' SMS ALLOCATED TO DDNAME DSN
         DC    CL8'IGD103I*',AL1(6),X'01' SMS ALLOCATED TO DDNAME
         DC    CL8'LC0*****',AL1(2),X'07' X390 MESSAGES
         DC    CL8'TACHYON ',AL1(7),X'24' X390 SUMMARY
         DC    CL8'TLC0****',AL1(3),X'07' X390 MESSAGES
         DC    CL8'TSS*****',AL1(2),X'02' TOP SECRET MESSAGES
         DC    CL8'TXA0****',AL1(3),X'35' X390 SUMMARY MESSAGE
         DC    CL8'XA000I *',AL1(6),X'35' X390 SUMMARY MESSAGE
         DC    H'-1'
         SPACE
**********************************************************************
*                                                          *         *
*         COLOUR ASSEMBLER LISTING - ONLY IF HEX OFF       *  GP@P6  *
*                                                          * APR2008 *
**********************************************************************
         SPACE
*         ON ENTRY: R0 = SHADOW CODE FOR DISPLAY LINE
*                   R1 = RECORD LENGTH
*                   R2 = RECORD ADDRESS
*                   R6 = DISPLAY LINE ADDRESS
*
*   THE CURRENT DISPLAY LINE IN THE PRIMARY SCREEN BUFFER IS USED
*   AS A WORK AREA TO CONSTRUCT THE ASSEMBLER SYNTAX SHADOW LINE.
*   THE PRIMARY BUFFER DISPLAY LINE CONTENTS ARE LOADED AFTER THIS
*   ROUTINE IS CALLED, BUT MUST BE RESTORED TO BLANKS IN READINESS
*   FOR SHORT RECORDS.  LOGIC ASSUMES AT LEAST 80 BYTES CAN BE USED.
         SPACE
         USING COLORASM,R15
COLORASM TM    STATUS12,$12PRT     LOOKING AT A "PRINTOUT"?
         BNOR  R14                 NO, SKIP SOURCE COLOURING
         TM    STATUS12,$12ASM     ENCOUNTERED ASSEMBLER SOURCE?
         BNO   C@CHEKLN            NO, MAKE NO ADJUSTMENT
         STM   R14,R1,SBASAVE      SAVE SOME REGISTERS
         LR    R14,R6              POINT TO SCREEN LINE
         A     R14,SCREENSZ        POINT TO ITS SHADOW
         CLC   0(1,R14),C@ASMSRC   GREENISH COLOUR CLASH?
         BNE   C@INITLN            NO, NO NEED FOR ADJUSTMENT
         XI    0(R14),X'05'        YES, CONVERT GREEN TO BLUE
         IC    R1,0(,R14)          LOAD COLOUR CODE
         SLL   R1,24               PROMOTE TO PAD AND ZERO LENGTH
         L     R15,SCRNCOLS        GET SCREEN WIDTH
         MVCL  R14,R0              MAKE THIS LINE BLUE, NOT GREEN
C@INITLN LM    R14,R1,SBASAVE      RESTORE WORK REGISTERS
C@CHEKLN CH    R1,HW40             LINE AT LEAST 41 BYTES LONG?
         BNHR  R14                 NO, DATA TOO SHORT TO PROCESS
         CLI   0(R2),C'1'          PAGE HEADING?
         BNLR  R14                 YES, NOT A SOURCE STATEMENT
         MVC   DOUBLE(1),CHRCOLOR  GET THE DEFAULT COLOUR
         TM    STATUS17,$17RTF     OUTPUTTING RICH TEXT FORMAT?
         BNO   *+8                 NO, HAVE THE DEFAULT COLOUR
         MVI   DOUBLE,0            YES, GET THE RTF DEFAULT COLOUR
         CLM   R0,1,DOUBLE         MESSAGE ALREADY RECOGNIZED?
         BNER  R14                 YES, SKIP SOURCE COLOURING
         MVC   DOUBLE,1(R2)        COPY FIRST 8 BYTES OF TEXT
         OC    DOUBLE,BLANKS       FOLD TO UPPER CASE FOR SINGLE TEST
         CLC   DOUBLE,C@LOCO       SOURCE CODE HEADING?
         BE    C@GOTASM            YES
         CLC   DOUBLE,C@DLOCO      SOURCE CODE HEADING?
         BE    C@GOTASM            YES
         CLC   DOUBLE,C@POSID      POST-SOURCE LISTING ASM HEADING?
         BE    C@NOTASM            YES
         CLC   DOUBLE(7),C@POSID+1 POST-SOURCE LISTING ASM HEADING?
         BE    C@NOTASM            YES
         CLC   DOUBLE,C@SYMBOL     POST-SOURCE LISTING ASM HEADING?
         BNE   C@INDEEP            NO
*                                  YES, RESET ASSEMBLER LISTING FLAGS
C@NOTASM NI    STATUS12,255-$12ASM-$12CNT-$12QOT-$12CMT
         BR    R14                 RETURN
C@GOTASM OI    STATUS12,$12ASM
         BR    R14                 RETURN
C@INDEEP C     R1,OFFSET           LINE LONG ENOUGH TO SHOW?
         BNHR  R14                 NO, COLOUR IRRELEVANT FOR BLANKS
         CLI   34(R2),C'0'         LEADING ZERO ON STATEMENT NUMBER?
         BER   R14                 YES, NOT AN ASSEMBLER STATEMENT
         STM   R14,R12,12(R13)     SAVE REGISTERS
         LA    R4,34(,R2)          POINT TO START OF STMT NUMBER AREA
         LA    R5,6                GET MAXIMUM NUMBER OF DIGITS
C@VFYLP1 CLI   0(R4),C' '          LEADING BLANK?
         BNE   C@VFYLP2            NO, CHECK FOR DIGIT
         CLI   1(R4),C' '          FOLLOWED BY ANOTHER BLANK?
         BE    C@VFYNX1            YES, THAT'S FINE
         CLI   0(R4),C'0'          LEADING ZERO ON STATEMENT NUMBER?
         BE    C@SKIPIT            YES, NOT AN ASSEMBLER STATEMENT
C@VFYNX1 LA    R4,1(,R4)           POINT PAST LEADING BLANK
         BCT   R5,C@VFYLP1         CONTINUE CHECK
         LA    R0,57
         CR    R1,R0               LONG ENOUGH TO BE A CONTINUATION?
         BL    C@SKIPIT            NO
         TM    STATUS12,$12ASM     ENCOUNTERED ASSEMBLER SOURCE?
         BNO   C@SKIPIT            NO, SHOULDN'T START WITH CONT~N
         CLI   0(R4),C'+'          GENERATED STATEMENT?
         BE    C@CNTCHK            YES, GOOD ENOUGH
         CLI   0(R4),C'='          COPIED STATEMENT?
         BE    C@CNTCHK            YES, GOOD ENOUGH
         CLI   0(R4),C'>'          INSERTED STATEMENT?
         BE    C@CNTCHK            YES, GOOD ENOUGH
         CLI   0(R4),C'-'          AREAD STATEMENT?
         BE    C@CNTCHK            YES, GOOD ENOUGH
         CLC   1(39,R2),BLANKS     CONTINUATION?
         BNE   C@SKIPIT            NO, NOT ASSEMBLER SOURCE
C@CNTCHK IC    R0,STATUS12         SAVE STATUS FLAGS
         NI    STATUS12,255-$12CNT-$12QOT-$12CMT
         CLC   41(15,R2),BLANKS    CONTINUATION?
         BNE   C@CONTOK            NO
         STC   R0,STATUS12         MAY WELL BE - RESTORE FLAGS
         OI    STATUS12,$12CNT     CANNOT BE A NEW STATEMENT
         B     C@CONTOK
C@VFYLP2 CLI   0(R4),C'0'          PRINTABLE DECIMAL DIGIT?
         BL    C@SKIPIT            NO, SO NOT A STATEMENT NUMBER
         CLI   0(R4),C'9'          PRINTABLE DECIMAL DIGIT?
         BH    C@SKIPIT            NO, SO NOT A STATEMENT NUMBER
         LA    R4,1(,R4)           YES, POINT TO NEXT BYTE
         BCT   R5,C@VFYLP2         CONTINUE CHECK
*        LA    R4,40(,R2)          THIS DESCRIBES WHAT WE NOW HAVE
         CLI   29(R2),C'A'         ADDR2 STARTS WITH A HEX DIGIT?
         BNL   C@CONTOK            MAYBE
         CLC   28(6,R2),BLANKS     NO, IS IT ALL BLANK?
         BNE   C@SKIPIT            NO, SO NOT ASSEMBLER SOURCE LISTING
C@CONTOK CLI   0(R4),C' '          BLANK AFTER THE NUMBER?
         BE    C@LISTNG            YES, PRIMARY SOURCE RECORD
         CLI   0(R4),C'+'          PLUS AFTER THE NUMBER?
         BE    C@LISTNG            YES, MACRO GENERATED RECORD
         CLI   0(R4),C'='          EQUALS AFTER THE NUMBER?
         BE    C@LISTNG            YES, COPIED SOURCE RECORD
         CLI   0(R4),C'>'          GREATER-THAN AFTER THE NUMBER?
         BE    C@LISTNG            YES, INSERTED SOURCE RECORD
         CLI   0(R4),C'-'          MINUS AFTER THE NUMBER?
*        BE    C@LISTNG            YES, AREAD STATEMENT
         BNE   C@SKIPIT            NOT A LISTING SO RETURN TO CALLER
C@LISTNG CLC   C@PAGE,112(R2)      ASSEMBLER PAGE HEADING?
         BE    C@SKIPIT            YES, DO NOT COLOUR IT HERE
         LA    R0,41
         SR    R1,R0               GET THE LENGTH OF SOURCE PRINT
         LA    R0,1(,R4)           POINT TO SOURCE PRINT
         LR    R4,R6               POINT TO WORK AREA
         LA    R5,80               GET WORK AREA LENGTH
         ICM   R1,8,BLANKS         SET THE SHORT RECORD PAD CHARACTER
         MVCL  R4,R0               COPY PRINT OF SOURCE LINE
         XC    DOUBLE,DOUBLE       RESET STATUS INDICATION AREA
         MVC   DOUBLE(1),71(R6)    SAVE CONTINUATION COLUMN DATA
         CLC   0(15,R6),BLANKS     BLANKS IN FIRST 15 COLUMNS?
         BE    C@NTCMNT            YES, NOT A COMMENT STATEMENT
         NI    STATUS12,255-$12CNT NO, CANNOT BE A CONTINUATION
         CLI   0(R6),C'*'          ASSEMBLER SOURCE COMMENT?
         BE    C@ISCMNT            YES
         CLC   C@DTSTAR,0(R6)      ASSEMBLER MACRO COMMENT?
         BNE   C@NTCMNT            NO
C@ISCMNT MVI   0(R6),X'05'         TURQUOISE FOR WHOLE COMMENT LINE
         CLI   40(R2),C'+'         GENERATED LINE?
         BNE   *+8                 NO, TURQUOISE IT IS
         MVI   0(R6),X'01'         YES, USE BLUE INSTEAD
         CLI   40(R2),C'-'         AREAD RECORD?
         BNE   *+8                 NO, STAY BLUE-ISH
         MVI   0(R6),X'02'         YES, USE RED INSTEAD
         MVC   1(79,R6),0(R6)
         OI    STATUS12,$12ASM     FLAG ENCOUNTERED ASSEMBLER SOURCE
         B     C@SHADOW            GO SET SHADOW LINE
C@NTCMNT LA    R8,C@ASMSRC         POINT TO NORMAL COLOUR LIST
         CLI   40(R2),C'+'         LINE GENERATED BY MACRO?
         BNE   *+8                 NO
         LA    R8,C@ASMMAC         YES, USE OTHER COLOUR LIST
         CLI   40(R2),C'>'         LINE GENERATED BY AINSERT?
         BNE   *+8                 NO
         LA    R8,C@ASMINS         YES, USE OTHER COLOUR LIST
         SR    R7,R7               RESET PARENTHESES DEPTH
         TM    STATUS12,$12CNT     CONTINUATION LINE?
         BNO   C@NTCONT            NO
         TM    STATUS12,$12CMT     ONLY COMMENTS POSSIBLE?
         BO    C@ISCMNT            YES
         LA    R8,2(,R8)           NO, GO STRAIGHT TO OPERAND(S)
         MVC   0(1,R6),0(R8)       PROCESS LEADING BLANKS HERE
         MVC   1(14,R6),0(R6)
         LA    R4,15(,R6)          START AT COLUMN 16
         LA    R5,80-15            GET COLUMNS TO COLOUR
         B     C@SCNLP1
C@NTCONT OI    STATUS12,$12ASM     FLAG ENCOUNTERED ASSEMBLER SOURCE
         LR    R4,R6               POINT TO SOURCE LINE COPY
         LA    R5,80               GET COLUMNS TO COLOUR
C@SCNLP1 CLI   0(R4),X'50'         FOUND AN AMPERSAND?
         BNE   *+8                 NO
         MVI   DOUBLE+1,X'50'      YES, FLAG THIS
         TM    STATUS12,$12QOT     IN QUOTES?
         BO    C@BLNKOK            YES, BLANK DOES NOT MEAN END
         CLI   0(R4),C' '          NON-BLANKS ALL DONE?
         BNE   C@BLNKOK            NO, KEEP SCANNING
         LTR   R7,R7               IN PARENTHESES?
         BZ    C@SCNLP2            NO, END OF THIS STRING
         CLI   1(R8),X'00'         IN OPERANDS PART OF STATEMENT?
         BNE   C@SCNLP2            NO, SO WHAT'S WITH THE PARENTHESES?
*  NORMALLY A BLANK MEANS THE END OF THE INSTRUCTION OR OPERANDS.
*  BUT, THE SET(A/B/C) AND AIF ASSEMBLER LOGIC INSTRUCTIONS ALLOW
*  BLANKS WITHIN PARENTHESES.  WHEN THIS HAPPENS, USUALLY A SYMBOL
*  HAS BEEN USED PREVIOUSLY IN THE STATEMENT.  SO, IF AN AMPERSAND
*  HAS BEEN ENCOUNTERED THEN DO NOT FORCE THE BEGINNING OF COMMENTS.
         CLI   DOUBLE+1,X'50'      ANY PREVIOUS AMPERSAND IN RECORD?
         BNE   C@SCNLP2            NO, END OF THIS STRING
C@BLNKOK CH    R5,HW10             INTO COMPULSORY COMMENT ZONE?
         BL    C@SCNCMT            YES
         CLI   0(R4),QUOTE         IS THIS A QUOTE?
         BNE   C@OPNCHK            NO
         TM    STATUS12,$12QOT     IN QUOTES?
         BO    C@TOGLQT            YES, NO ATTRIBUTES OF VARIABLES
         LR    R14,R4              NO, POINT TO PROBABLE START QUOTE
         SR    R14,R6              GET OFFSET INTO LINE
         LA    R14,41-1(R14,R2)    POINT TO PREVIOUS BYTE IN RECORD
         MVC   DOUBLE+3(1),0(R14)  COPY IT
         OI    DOUBLE+3,X'40'      FOLD LOWER CASE TO UPPER CASE
         CLI   DOUBLE+3,C'L'       LENGTH ATTRIBUTE?
         BE    C@CLOSOK            YES, NO QUOTING
         CLI   DOUBLE+3,C'N'       NUMBER ATTRIBUTE?
         BE    C@CLOSOK            YES, NO QUOTING
         CLI   DOUBLE+3,C'T'       TYPE ATTRIBUTE?
         BE    C@CLOSOK            YES, NO QUOTING
         CLI   DOUBLE+3,C'K'       COUNT ATTRIBUTE?
         BE    C@CLOSOK            YES, NO QUOTING
         CLI   DOUBLE+3,C'S'       SCALING ATTRIBUTE?
         BE    C@CLOSOK            YES, NO QUOTING
         CLI   DOUBLE+3,C'I'       INTEGER ATTRIBUTE?
         BE    C@CLOSOK            YES, NO QUOTING
C@TOGLQT XI    STATUS12,$12QOT     TOGGLE QUOTING STATUS
C@INSTRG MVI   0(R4),X'07'         COLOUR QUOTED DATA
         B     C@COLROK            BYTE COLOUR NOW SET
C@OPNCHK TM    STATUS12,$12QOT     IN QUOTES?
         BO    C@INSTRG            YES, PARENTHESIS ARE ONLY DATA
         CLI   0(R4),C'('          OPEN PARENTHESIS?
         BNE   C@OPENOK            NO
         LA    R7,1(,R7)           YES, INCREMENT DEPTH
C@OPENOK CLI   0(R4),C')'          CLOSE PARENTHESIS?
         BNE   C@CLOSOK            NO
         BCTR  R7,0                YES, DECREMENT DEPTH
C@CLOSOK SR    R1,R1               CLEAR FOR INSERT
         IC    R1,0(,R4)           LOAD PRINTED CHARACTER
         MVC   0(1,R4),0(R8)       COPY CURRENT COLOUR CODE
         STC   R1,DOUBLE+2         SAVE NON-COMMENT NON-BLANK
         CLI   2(R8),0             PROCESSING INSTRUCTION NAME?
         BE    C@COLROK            YES, CHARACTER NOW COLOURED
         A     R1,C@EDASMT         POINT TO COLOUR CODE FOR CHARACTER
         CLI   0(R1),X'04'         IS IT GREEN?
         BE    C@COLROK            YES, THAT MEANS "NO CHANGE"
         MVC   0(1,R4),0(R1)       NO, COLOUR CHARACTER ACCORDINGLY
C@COLROK LA    R4,1(,R4)           POINT TO NEXT SOURCE BYTE
         BCT   R5,C@SCNLP1
         B     C@SHADOW            CAN NEVER HAPPEN
C@SCNLP2 CLI   0(R4),C' '          FOUND A NON-BLANK?
         BNE   C@SCNNXT            YES
         CH    R5,HW10             INTO COMPULSORY COMMENT ZONE?
         BL    C@SCNCMT            YES
         MVC   0(1,R4),0(R8)       COPY CURRENT COLOUR CODE
         LA    R4,1(,R4)           POINT TO NEXT SOURCE BYTE
         BCT   R5,C@SCNLP2
         B     C@SHADOW            CAN NEVER HAPPEN
C@SCNNXT LA    R8,1(,R8)           POINT TO NEXT COLOUR CODE
         CLI   0(R8),0             REACHED END OF COLOUR CODES?
         BE    C@SCNCMT            YES, ONLY COMMENTS REMAIN
         CLI   0(R8),X'02'         SWITCHING TO RED?
         BNE   C@SCNLP1            NO, KEEP COLOURING
         CLC   41(15,R2),BLANKS    RECORD STARTS WITH 15 BLANKS?
         BNE   C@SCNLP1            NO, KEEP COLOURING
         LA    R0,15(,R6)
         CR    R0,R4               UP TO COLUMN 16 NOW?
         BNE   C@SCNLP1            NO, KEEP COLOURING
         CLI   0(R4),C'='          IS THIS LTORG DATA?
         BNE   C@SCNLP1            NO, KEEP COLOURING
         LA    R8,1(,R8)           YES, SKIP INSTRUCTION COLOUR CODE
         B     C@SCNLP1            NOW KEEP COLOURING
C@SCNCMT LA    R0,X'05'            TURQUOISE FOR COMMENT
         CLI   40(R2),C'+'         GENERATED LINE?
         BNE   C@SCNLP3            NO, TURQUOISE IT IS
         LA    R0,X'01'            YES, USE BLUE INSTEAD
C@SCNLP3 STC   R0,0(,R4)           SET COLOR FOR COMMENT CHARACTER
         LA    R4,1(,R4)           POINT TO NEXT SOURCE BYTE
         BCT   R5,C@SCNLP3
C@SHADOW OI    STATUS12,$12CNT     PREPARE FOR CONTINUATION NEEDED
         TM    STATUS12,$12QOT     WITHIN QUOTED TEXT?
         BO    C@CONTCK            YES, SO NON-COMMENT TEXT REQUIRED
         CLI   DOUBLE+2,C','       A COMMA LEFT DANGLING?
         BE    C@CONTCK            YES, MORE OPERAND(S) ARE POSSIBLE
         OI    STATUS12,$12CMT     NO, CONTINUATION MUST BE COMMENT
C@CONTCK CLI   DOUBLE,C' '         CONTINUATION NEEDED?
         BNE   *+8                 YES
         NI    STATUS12,255-$12CNT-$12QOT-$12CMT
         TM    STATUS17,$17RTF     OUTPUTTING RICH TEXT FORMAT?
         BO    C@DONEIT            YES, NOT REALLY LOADING SCREEN
         LA    R0,41
         LR    R4,R6               POINT TO SOURCE SHADOW JUST BUILT
         LR    R14,R6              POINT TO CURRENT DISPLAY LINE
         C     R0,OFFSET           COMPARE LEFT OFFSET WITH 41
         BE    C@GETLEN            LEFT OFFSET IS 41
         BL    C@RIGHT             COLUMN 42 IS LEFT OF SCREEN
         AR    R14,R0
         S     R14,OFFSET          POINT TO START OF SOURCE LINE PRINT
         B     C@GETLEN
C@RIGHT  A     R4,OFFSET
         SR    R4,R0               POINT TO VISIBLE SHADOW START
C@GETLEN LA    R1,80               PREPARE FOR RIGHT OF COLUMN 42
         S     R0,OFFSET           GET SOURCE START DISTANCE FROM LEFT
         BM    *+8                 SCROLLED RIGHT OF COLUMN 41
         L     R1,SCRNCOLS         GET SCREEN WIDTH
         LPR   R0,R0               GET SCROLL DIFFERENCE ABSOLUTE VALUE
         SR    R1,R0               GET LENGTH OF SOURCE SHADOW SHOWING
         BNP   C@SKIPIT            SCROLLED RIGHT BEYOND SOURCE CODE
         CH    R1,HW80             IS RESULT MORE THAN THE MAXIMUM?
         BNH   *+8                 NO
         LA    R1,80               YES, REDUCE TO THE MAXIMUM
         A     R14,SCREENSZ        POINT TO SHADOW, NOT ACTUAL LINE
         BCTR  R1,0                DECREMENT FOR EXECUTE
         EX    R1,C@LDSHDW         LOAD SYNTAX-RELATED SHADOW DATA
C@SKIPIT TM    STATUS17,$17RTF     OUTPUTTING RICH TEXT FORMAT?
         BO    C@DONEIT            YES, NOT REALLY LOADING SCREEN
         MVI   0(R6),C' '          BLANK SHADOW BUILD WORK AREA
         MVC   1(79,R6),0(R6)      IN CASE SHORT RECORD LOADED
C@DONEIT LM    R14,R12,12(R13)     RESTORE ALL REGISTERS
         BR    R14                 RETURN TO CALLER
C@LDSHDW MVC   0(0,R14),0(R4)      <<< EXECUTED >>>
         DROP  R15                 COLORASM
         SPACE
C@DTSTAR DC    C'.*'
C@EDASMT DC    V(EDASMTAB)
C@ASMSRC DC    X'04020400'         GREEN, RED, GREEN
C@ASMMAC DC    X'01030100'         BLUE, PINK, BLUE
C@ASMINS DC    X'02030200'         RED, PINK, RED
C@SYMBOL DC    C'SYMBOL  '
C@LOCO   DC    C'  LOC  O'
C@DLOCO  DC    C'D-LOC  O'
C@POSID  DC    C' POS.ID '
C@PAGE   DC    C'PAGE'
         SPACE
**********************************************************************
*                                                          *         *
*         DISPLAY DATA SET ATTRIBUTES                      *  GP@P6  *
*                                                          * APR2008 *
**********************************************************************
         SPACE
         USING DSATTRS,R15
DSATTRS  DS    0H
         AIF   (NOT &ENV390).NOHFSAT
         TM    $UCBAD,$HFSIO       PROCESSING HFS FILE?
         BO    CMDINVLD            YES, COMMAND NOT ALLOWED
.NOHFSAT ANOP
         TM    STATUS2,$2TAPE      TAPE DATA SET?
         BNO   DSATTRS2            NO, PROCEED
         MVC   DS1DSORG,DYNDCBW+DCBDSORG-IHADCB
         MVC   DS1RECFM,DYNDCBW+DCBRECFM-IHADCB
         MVC   DS1BLKL,DYNDCBW+DCBBLKSI-IHADCB
         MVC   DS1LRECL,DYNDCBW+DCBLRECL-IHADCB
         MVC   DS1VOLSQ,JFCBFLSQ
         DROP  R15                 DSATTRS
DSATTRS2 L     R15,INFOADDR        GET ROUTINE ENTRY POINT
         BASR  R14,R15             INVOKE IT
         B     FILLSCR
         SPACE
**********************************************************************
*                                                          *         *
*         CUT (COPY) REVIEWED DATA AND PASTE TO FILE       *  GP@FT  *
*                                                          *  05/94  *
**********************************************************************
         SPACE
         USING APPEND,R15
APPEND   OI    STATUS7,$7TACK      FLAG APPEND REQUESTED FOR CUT
         LA    R5,CUTOFF           INITIALIZE NEW BASE REGISTER
         B     CUT                 BRANCH TO COMMON CODE
         DROP  R15                 APPEND
         SPACE
         USING RTF,R5
RTF      TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    CMDINVLD            YES, COMMAND NOT ALLOWED
         TM    STATUS14,$14AS      BROWSING ADDRESS SPACE?
         BO    CMDINVLD            YES, COMMAND NOT ALLOWED
         LR    R5,R15              LOAD BASE REGISTER
         LA    R15,CUTOFF          POINT TO COMMON CODE
         TM    STATUS12,$12PRT     LOOKING AT A "PRINTOUT"?
         BO    RTFON               YES, ENABLE RTF OUTPUT
         MVC   MSG(MSGRTFL),MSGRTF IGNORED - NOT A PRINT FILE
         B     BELPRMPT
         SPACE
RTFON    OI    STATUS17,$17RTF     FLAG RICH TEXT FORMAT REQUESTED
         DROP  R5                  RTF
         SPACE
         USING CUTOFF,R5
CUTOFF   LR    R5,R15              LOAD BASE REGISTER
         NI    STATUS7,255-$7TACK  FLAG OVERLAY REQUESTED FOR CUT
CUT      IC    R6,STATUS17         SAVE FLAG BYTE
         NI    STATUS17,255-$17RTF RESET RICH TEXT FORMAT FLAG
         TM    STATUS15,$15PDS     BROWSING MEMBER FROM OPTION 3.3?
         BO    CMDINVLD            YES, 'CUT' NOT SUPPORTED FROM THERE
         LA    R15,OPD2            SET FOR ERRMANY
         TM    OPD2+6,PRESENT      TOO MANY OPERANDS?
         BO    ERRMANY             YES
         L     R7,HOLDTOP          POINT TO FIRST LINE DIRECTORY ENTRY
         TM    DIRLEN(R7),X'80'    IS EOF AT TOP OF SCREEN?
         BO    CUTNONE             YES, NO DATA TO CUT
         SPACE
         SR    R0,R0
         ST    R0,RANGE            RESET REQUESTED LINE COUNT
         TM    OPD1+6,PRESENT      IS THERE AN OPERAND?
         BZ    CUTOPOK             NO, GO ALLOCATE OUTPUT FILE
         TM    OPD1+6,QUOTED       IS OPERAND QUOTED?
         BO    ERRINV              YES, INVALID
         TM    OPD1+6,NUMERIC      IS IT NUMERIC?
         BNO   ERRINV              NO, INVALID
         LH    R1,OPD1+4           GET LENGTH
         LTR   R1,R1               IS IT NULL STRING?
         BZ    ERRINV              YES, ERROR
         L     R14,OPD1            GET ADDRESS OF DATA
         BCTR  R1,0
         EX    R1,NUMRCPAK
         CVB   R1,DOUBLE
         LTR   R1,R1               IS IT ZERO?
         BZ    ERRINV              YES, ERROR
         ST    R1,RANGE            NO, SAVE IT
CUTOPOK  STC   R6,STATUS17         RESTORE $17RTF SETTING
CUTALC   LA    R1,MSG+64           POINT TO OAIA
         OI    STATUS10,$10LIKE    CAN COPY DATA SET ATTRIBUTES
         L     R15,ALCOADDR        POINT TO ALLOCATION ROUTINE
         BASR  R14,R15             ALLOCATE OUTPUT FILE
         LTR   R15,R15             PROCEED WITH OUTPUT?
         BZ    CUTCOPY             YES
         NI    STATUS17,255-$17RTF NO, RESET RICH TEXT FORMAT FLAG
         TM    STATUS15,$15COPY    PERFORMING RFE OPTION 3.3 COPY?
         BNO   PROMPT              NO, GO SHOW THE MESSAGE
         B     EXIT00              ALL DONE HERE
         SPACE
CUTNONE  MVC   MSG(MSGCUT0L),MSGCUT0
         TM    STATUS15,$15COPY    PERFORMING RFE OPTION 3.3 COPY?
         BNO   BELPRMPT            NO
         B     EXIT00              YES, ALL DONE HERE
         SPACE
*
*         ACQUIRE AND CLEAR WORKING STORAGE
*
*  CUTWORK@ SHOULD ONLY BE REFERENCED IN AN OPTION 3.3 COPY SCENARIO.
*
CUTCOPY  LA    R5,CUTCOPY          ADVANCE LOCAL BASE
         DROP  R5                  CUTOFF
         USING CUTCOPY,R5
         STM   R14,R12,12(R13)     SAVE REGISTERS
         L     R7,HOLDTOP          POINT TO FIRST LINE DIRECTORY ENTRY
         MVC   RANGE+4(4),DIRNUM(R7)   REMEMBER FIRST RECORD ON SHOW
         L     R8,RANGE            GET REQUESTED LINE COUNT
         SR    R0,R0
         ST    R0,RANGE            RESET CUT RECORDS COUNTER
         TM    STATUS15,$15COPY+$15PDS
         BNO   CUTCPYGM            NOT REVPDS MEMBER COPYING
         ICM   R1,15,CUTWORK@      WORKING STORAGE ALREADY ACQUIRED?
         BZ    CUTCPYGM            NO, GO ACQUIRE IT
         ST    R13,4(,R1)          YES, CHAIN SAVE AREAS
         ST    R1,8(,R13)
         LR    R13,R1              POINT TO THE NEW STORAGE
         USING @CUTWORK,R13
         L     R1,CUTBUFAD         POINT TO THE WRITE BUFFER
         B     CUTBUFOK            ALREADY PASSED OPEN AND RECFM TESTS
         DROP  R13                 @CUTWORK
CUTCPYGM LA    R0,$CUTSIZE         GET WORKING STORAGE SIZE
         MVI   GETMNTRC,9          TRACK GETMAIN IN CASE OF FAILURE
         GETMAIN RC,LV=(0),LOC=(24,64)
         LTR   R15,R15             ACQUIRED WORKING STORAGE?
         BZ    CUTITNOW            YES
         MVI   MSG,123             REQUEST ABORTED - STORAGE FULL
         NI    STATUS17,255-$17RTF RESET RICH TEXT FORMAT FLAG
         TM    STATUS15,$15COPY    PERFORMING RFE OPTION 3.3 COPY?
         BNO   PROMPT              NO, GO SHOW THE MESSAGE
         B     EXIT00              YES, ALL DONE HERE
CUTITNOW TM    STATUS15,$15COPY    PERFORMING RFE OPTION 3.3 COPY?
         BNO   *+8                 NO
         ST    R1,CUTWORK@         YES, SAVE WORKING STORAGE ADDRESS
         LR    R14,R1              POINT TO IT
         LA    R15,$CUTSIZE        GET ITS SIZE
         SR    R7,R7               ZERO SOURCE LENGTH AND PAD
         MVCL  R14,R6              ZERO NEW WORK AREA
         ST    R13,4(,R1)          CHAIN SAVE AREAS
         ST    R1,8(,R13)
         LR    R13,R1              POINT TO THE NEW STORAGE
         USING @CUTWORK,R13
         UNPK  CUTWKID(3),RECURS#+3(2)
         TR    CUTWKID(2),HEXTAB-240
         MVI   CUTWKID+2,C'C'      IDENTIFY THE AREA
         MVI   CUTWKID+3,C'W'
*        MVI   RTFATRSV,0          START RTF WITH DEFAULT ATTRIBUTES
         STM   R4,R5,RTFR4SAV      SAVE DCB ADDRESS AND LOCAL BASE
         L     R7,HOLDTOP          POINT TO FIRST LINE DIRECTORY ENTRY
         SPACE
*
*         OPEN THE OUTPUT FILE
*
         LA    R1,CUTDCBS-800      POINT TO SEQUENTIAL DCB
         TM    STATUS15,$15STOW    NEED TO USE BPAM?
         BNO   *+8                 NO, USE BSAM
         LA    R1,CUTDCBP-800      YES, POINT TO PARTITIONED DCB
         MVC   CUTDW,800(R1)       INITIALIZE DCB
         USING IHADCB,CUTDW
         MVC   DCBDDNAM,MSG+64+OAIADDN-OAIAREA
         DEVTYPE DCBDDNAM,DOUBLE   GET DEVICE TYPE DETAILS FOR CUTOPENX
         MVI   OPEND,X'80'         OPEN THE OUTPUT DCB
         TM    STATUS7,$7TACK      DATA TO BE APPENDED?
         BZ    CUTOVER             NO, OVERWRITE DATA IN OUTPUT FILE
         OPEN  (CUTDW,EXTEND),MF=(E,OPEND)
         B     CUTOPEN             GO WRITE TO OPEN FILE
CUTOVER  OPEN  (CUTDW,OUTPUT),MF=(E,OPEND)
CUTOPEN  TM    STATUS,STABEND      WAS A DCB ABEND ENCOUNTERED?
         BO    CUTDEALC            YES, ABORT OUTPUT OPERATIONS
         TM    DCBOFLGS,DCBOFOPN   DID THE OPEN SUCCEED?
         BNO   CUTBDOPN            NO, BAD OPEN
         TM    STATUS15,$15COPY+$15STOW
         BNO   CUTRFMOK            NOT COPYING TO A PDS MEMBER
         TM    DCBRECFM-IHADCB(R4),X'C0'
         BNO   CUTNOTU             SOURCE DATA SET NOT RECFM = U
         TM    DCBRECFM,X'C0'      SOURCE IS RECFM = U
         BO    CUTRFMOK            SO IS TARGET SO PROCEED
         B     CUTRFMMM            SOURCE IS NOT SO MISMATCH
CUTNOTU  TM    DCBRECFM,X'C0'      SOURCE IS NOT RECFM = U
         BNO   CUTRFMOK            NEITHER IS TARGET SO PROCEED
CUTRFMMM MVI   MSG,216             RECORD FORMAT MISMATCH
         B     CUTCLOSE            BETTER PREVENT A PROBABLE MISTAKE
CUTBDOPN MVI   MSG,159             OPEN FAILED
         B     CUTCLOSE            BETTER PREVENT A PROBABLE MISTAKE
         SPACE
*
*         ACQUIRE THE WRITE BUFFER
*
CUTRFMOK LH    R1,DCBBLKSI         GET THE OUTPUT MAXIMUM BLOCK SIZE
         ST    R1,CUTBLKSI         SAVE IT FOR REFERENCE
         ST    R1,CUTLRECL         SAVE IT FOR REFERENCE IF RECFM=U
         LA    R0,7(,R1)
         SRL   R0,3
         SLL   R0,3                GET WRITE BUFFER SIZE
         ST    R0,CUTBUFSZ         SAVE IT
         GETSTOR RC,LV=(0),LOC=(31,64)
         LTR   R15,R15             WRITE BUFFER ACQUIRED?
         BZ    CUTBUFOK            YES
         MVI   MSG,123             REQUEST ABORTED - STORAGE FULL
         B     CUTCLOSE            GO CLEAN UP
CUTBUFOK ST    R15,@ADDR           RESET POTENTIAL CHAIN ORIGIN
         ST    R1,CUTBUFAD         SAVE WRITE BUFFER ADDRESS
         ST    R1,CUTRECAD         SAVE ADDRESS FOR NEXT RECORD
         LR    R2,R1               POINT TO BUFFER
         A     R1,CUTBLKSI         POINT PAST USABLE BUFFER
         ST    R1,CUTBFLIM         SAVE THIS ADDRESS
         TM    DCBRECFM,X'C0'      UNDEFINED RECORD FORMAT?
         BO    CUTLRLOK            YES, ALREADY HAVE LRECL LIMIT
         LH    R0,DCBLRECL         NO, GET THE OUTPUT MAXIMUM LRECL
         ST    R0,CUTLRECL         SAVE IT FOR REFERENCE
CUTLRLOK TM    DCBRECFM,X'80'      NEED A BDW?
         BO    CUTRPCHK            NO
         LA    R0,4                YES, GET THE SIZE OF A BDW
         STH   R0,0(,R2)           RESET BDW LENGTH
         STCM  R0,12,2(R2)         ZERO REST OF BDW
         AR    R2,R0               POINT PAST BDW
         ST    R2,CUTRECAD         SAVE ADDRESS FOR NEXT RECORD
         SPACE
*
*         PROCESS COPY OF AN ALIAS MEMBER
*
*
*               TEMPORARY USE OF FIRST 64 BYTES OF 'MSG'
*               (SINCE TARGET OAIA RESIDES AT MSG+64) IS:
*                 +0  ZERO TO INDICATE NO MESSAGE IS IN 'MSG'
*                 +4  BLDLFF   DC    H'1'
*                 +6  BLDLLL   DC    H'56'
*                 +8  BLDLNAME DS    CL8
*                +16  BLDLTTRP DS    XL3
*                +19  BLDLCNCT DS    XL1
*                +20  BLDLLIBF DS    XL1
*                +21  BLDLINDC DS    XL1
*                +22  BLDLUSER EQU   *
*                +22  BLDLTTRT DS    XL3
*                +25  BLDLZERO DS    XL1
*                +26  BLDLTTRN DS    XL3
*                +29  BLDLNL   DS    XL1
*                +30  BLDLATR1 DS    XL1
*
CUTRPCHK TM    STATUS15,$15COPY+$15STOW
         BNO   CUTRTFHD            NOT COPYING PDS MEMBER(S)
         XC    MSG(64),MSG         CLEAR A BLDL AREA
         MVI   MSG+5,1             SET BUILD LIST ENTRY COUNT
         MVI   MSG+7,56            SET BUILD LIST ENTRY SIZE
         TM    STATUS12,$12REP     IS "NOREPLACE" REQUESTED?
         BO    CUTALCHK            NO
         MVC   MSG+8(8),MSG+64+OAIAMEM-OAIAREA
         CLI   MSG+8,C' '          BLANK MEMBER NAME?
         BH    CUTRPNOK            NO, GOOD
         MVC   MSG+8(8),=CL8'TEMPNAME'
CUTRPNOK BLDL  CUTDW,MSG+4         LOOK SAME MEMBER NAME IN TARGET
         LTR   R15,R15             WAS IT FOUND?
         BNZ   CUTALCHK            NO, GO AHEAD AND COPY IT
         MVI   MSG,217             MEMBER COPY PREVENTED BY REP NO
         MVC   BLDLNAME,MSG+8      SUPPLY MEMBER NAME FOR REVMSGS
         B     CUTLEAVE            END OF PROCESSING FOR THIS MEMBER
CUTALCHK TM    STATUS15,$15PDS     REVPDS DRIVING AN OPTION 3.3 COPY?
         BNO   CUTRTFHD            NO
         XC    BLDLTTRP+2(3),BLDLTTRP+2  CLEAR STOW TTR
         TM    BLDLINDC,X'80'      IS SOURCE MEMBER AN ALIAS?
         BNO   CUTRTFHD            NO, PROCEED
         CLC   REALNAME,=FL8'-1'   IS THE REAL NAME KNOWN?
         BE    CUTALOFF            NO, TREAT AS REAL MEMBER
         MVC   MSG+8(8),REALNAME   COPY THE REAL MEMBER NAME
         BLDL  CUTDW,MSG+4         LOOK FOR THE REAL NAME
         LTR   R15,R15             WAS IT FOUND?
         BNZ   CUTALOFF            NO, TREAT AS REAL MEMBER
         MVC   DOUBLE(1),BLDLINDC  GET INPUT INDICATOR BYTE
         MVC   DOUBLE+1(1),MSG+21  GET OUTPUT REAL MEMBER'S BYTE
         NI    DOUBLE,X'60'        GET NOTE LIST TTR COUNT
         NI    DOUBLE+1,X'60'      GET NOTE LIST TTR COUNT
         CLC   DOUBLE(1),DOUBLE+1  DO THEY MATCH?
         BNE   CUTALOFF            NO, INPUT ALIAS IS NOT RELATED
         MVC   BLDLTTRP+2,MSG+16   COPY THE MEMBER START TTR
         TM    MSG+21,X'60'        ANY NOTE LIST TTRS?
         BZ    CUTSTOW             NO, TTR INFORMATION COMPLETE
         MVC   BLDLTTRT,MSG+22     COPY THE FIRST TEXT BLOCK TTR
         TM    MSG+21,X'40'        MORE THAN ONE NOTE LIST TTR?
         BZ    CUTSTOW             NO, TTR INFORMATION COMPLETE
         MVC   BLDLTTRN,MSG+26     COPY NOTE LIST OR SCATTER TABLE TTR
         B     CUTSTOW             THAT SAVED A BIT OF I/O
CUTALOFF NI    BLDLINDC,X'7F'      RESET ALIAS FLAG
         SPACE
*
*         OUTPUT RTF HEADER RECORDS IF APPROPRIATE
*
CUTRTFHD TM    STATUS17,$17RTF     OUTPUTTING RICH TEXT FORMAT?
         BNO   CUTDIRLP            NO
         LA    R0,L'RTFREC01       YES, OUTPUT HEADER RECORDS FIRST
         LA    R1,RTFREC01
         STM   R0,R1,CUTRDTLS
         BAS   R14,CUTAREC
         SPACE
         LM    R14,R15,CUTRDTLS
         LA    R0,L'RTFREC02
         LA    R1,0(R14,R15)
         STM   R0,R1,CUTRDTLS
         BAS   R14,CUTAREC
         SPACE
         LM    R14,R15,CUTRDTLS
         LA    R0,L'RTFREC03
         LA    R1,0(R14,R15)
         STM   R0,R1,CUTRDTLS
         BAS   R14,CUTAREC
         SPACE
         LM    R14,R15,CUTRDTLS
         LA    R0,L'RTFREC04
         LA    R1,0(R14,R15)
         STM   R0,R1,CUTRDTLS
         BAS   R14,CUTAREC
         SPACE
         LM    R14,R15,CUTRDTLS
         LA    R0,L'RTFREC05
         LA    R1,0(R14,R15)
         STM   R0,R1,CUTRDTLS
         BAS   R14,CUTAREC
         SPACE
         LM    R14,R15,CUTRDTLS
         LA    R0,L'RTFREC06
         LA    R1,0(R14,R15)
         STM   R0,R1,CUTRDTLS
         BAS   R14,CUTAREC
         SPACE
         LM    R14,R15,CUTRDTLS
         LA    R0,L'RTFREC07
         LA    R1,0(R14,R15)
         STM   R0,R1,CUTRDTLS
         BAS   R14,CUTAREC
         SPACE
         LM    R14,R15,CUTRDTLS
         LA    R0,L'RTFREC08
         LA    R1,0(R14,R15)
         STM   R0,R1,CUTRDTLS
         BAS   R14,CUTAREC
         SPACE
         LM    R14,R15,CUTRDTLS
         LA    R0,L'RTFREC09
         LA    R1,0(R14,R15)
         STM   R0,R1,CUTRDTLS
         BAS   R14,CUTAREC
         SPACE
         LM    R14,R15,CUTRDTLS
         LA    R0,L'RTFREC10
         LA    R1,0(R14,R15)
         STM   R0,R1,CUTRDTLS
         BAS   R14,CUTAREC
         SPACE
         LM    R14,R15,CUTRDTLS
         LA    R0,L'RTFREC11
         LA    R1,0(R14,R15)
         STM   R0,R1,CUTRDTLS
         BAS   R14,CUTAREC
         SPACE
         LM    R14,R15,CUTRDTLS
         LA    R0,L'RTFREC12
         LA    R1,0(R14,R15)
         STM   R0,R1,CUTRDTLS
         BAS   R14,CUTAREC
         SPACE
         LM    R14,R15,CUTRDTLS
         LA    R0,L'RTFREC13
         LA    R1,0(R14,R15)
         STM   R0,R1,CUTRDTLS
         BAS   R14,CUTAREC
         SPACE
         OI    CUTFLGS,RTF1ST      FLAG FIRST DATA LINE
         SPACE
*
*         PROCESS RECORDS ALREADY ON THE SCREEN
*
CUTDIRLP TM    DIRLEN(R7),X'80'    EOF?
         BO    RTFCLOSE            YES, END OF DATA TO CUT
         L     R0,DIRTTR(,R7)      GET THE RECORD'S TTR
         BAS   R14,CUTNTLST        PERFORM NOTE LIST PROCESSING
         L     R0,DIRLEN(,R7)      GET THE DATA LENGTH
         L     R1,DIRREC(,R7)      GET THE DATA ADDRESS
         LA    R14,4
         TM    TSTRECFM,X'40'      DOES THE RECORD START WITH AN RDW?
         BZ    *+8                 NO
         SR    R0,R14              YES
         AR    R1,R14              MAKE ADJUSTMENTS
         STM   R0,R1,CUTRDTLS      SAVE THE OUTPUT DATA DETAILS
         BAS   R14,RTFAREC         CUT A RECORD
         LA    R0,1
         A     R0,RANGE            INCREMENT THE CUT LINE COUNTER
         ST    R0,RANGE
         MVC   RANGE+4(4),DIRNUM(R7)   REMEMBER LAST RECORD CUT
         BCT   R8,CUTDIRLN         DECREMENT REMAINING LINE COUNTER
         B     RTFCLOSE            NO MORE LINES HAVE TO BE COPIED
CUTDIRLN C     R7,HOLDEND          IS THIS THE LAST HELD RECORD?
         BE    CUTDEEPR            YES, PREPARE TO READ MORE RECORDS
         L     R7,DIRNXT(,R7)      POINT TO THE NEXT HOLD ENTRY
         B     CUTDIRLP
         SPACE
*
*         DETECT NOTE LIST TTR BLOCKS
*
CUTNTLST TM    STATUS15,$15COPY+$15STOW
         BNOR  R14                 NO NEED TO CHECK NOTE LIST
         TM    BLDLINDC,X'60'      ANY NOTE LIST FOR THIS MEMBER?
         BZR   R14                 NO, NO NOTE LIST TO CHECK
         SR    R15,R15             YES
         BCTR  R15,0               PREPARE HIGH VALUES
         TM    STATUS14,$14BIG     32-BIT NOTE/POINT VALUES?
         BNO   CUTNTLS1            NO, TTR0 READY FOR USE
         SLL   R0,8                YES, CONVERT TTTR TO TTR0
CUTNTLS1 CLM   R0,14,BLDLTTRT      NOTE LIST TTR 1?
         BNE   CUTNTLS2            NO
         ST    R15,CUTNOTE1        YES, FLAG UPDATE REQUIRED
CUTNTLS2 TM    BLDLINDC,X'40'      MORE THAN 1 TTR IN NOTE LIST?
         BNOR  R14                 NO, CHECKING COMPLETE
         TM    TSTRECFM,X'C0'      RECFM = U ?
         BM    CUTNTLS4            NO, CANNOT BE A PROGRAM
         CLI   BLDLNL,0            SEGMENT OVERLAY NOTE LIST?
         BE    CUTNTLS4            NO, SCATTER TABLE
         TM    BLDLATR1,BLDLOVLY   SEGMENT OVERLAY PROGRAM?
         BNO   CUTNTLS4            NO, NO NOTE LIST BLOCK
*-------- REMEMBER THE TTR OF EACH BLOCK OF A SEGMENT OVERLAY PROGRAM
         STM   R14,R1,SBASAVE      YES, SAVE SOME REGISTERS
         LA    R0,16               GET CHAINED ELEMENT STORAGE SIZE
         GETMAIN RC,LV=(0),LOC=(31,64)
         LTR   R15,R15             SUCCESS?
         BNZ   CUTNTLS3            NO, PRETEND NOT TO CARE
         MVC   0(4,R1),@ADDR       YES, POINT TO SECOND-NEWEST ELEMENT
         MVC   4(4,R1),SBASAVE+8   LOAD SOURCE BLOCK TTR FROM GPR0 SLOT
         ST    R15,8(,R1)          ENSURE TARGET BLOCK TTR ITEM IS ZERO
         ST    R1,@ADDR            SAVE NEWEST ELEMENT ADDRESS
CUTNTLS3 LM    R14,R1,SBASAVE      RESTORE WORK REGISTERS
*-------- END OF SEGMENT OVERLAY PROGRAM INPUT RECORD PROCESSING
CUTNTLS4 CLM   R0,14,BLDLTTRN      NOTE LIST TTR 2?
         BNER  R14                 NO, CHECKING COMPLETE
         ST    R15,CUTNOTE2        YES, FLAG UPDATE REQUIRED
         BR    R14                 CHECKING COMPLETE
         SPACE
*
*         READ IN AND PROCESS ADDITIONAL RECORDS
*
CUTDEEPR L     R4,RTFR4SAV         ENSURE DCB POINTER IS CORRECT
         BAS   R14,GET             GET THE NEXT RECORD
         L     R5,RTFR5SAV         RESTORE LOCAL BASE REGISTER
         LTR   R1,R1               END-OF-FILE?
         BM    CUTEOF              YES, NO MORE DATA TO COPY
         LA    R0,1                COMPUTE
         A     R0,COUNT             THE
         ST    R0,COUNT              RECORD NUMBER
         L     R0,TTR              GET THE RECORD'S TTR
         BAS   R14,CUTNTLST        PERFORM NOTE LIST PROCESSING
         TM    TSTRECFM,X'40'      RDW PRESENT?
         BNO   CUTDTLOK            NO, HAVE THE DATA DETAILS
         AH    R2,HW4              YES, POINT PAST THE INPUT RDW
         SH    R1,HW4              ADJUST DATA LENGTH ACCORDINGLY
CUTDTLOK STM   R1,R2,CUTRDTLS      SAVE RECORD LENGTH AND ADDRESS
         BAS   R14,RTFAREC         CUT A RECORD
         MVC   RANGE+4(4),COUNT    REMEMBER LAST RECORD CUT
         LA    R0,1
         A     R0,RANGE            INCREMENT THE CUT LINE COUNTER
         ST    R0,RANGE
         TM    STATUS4,$4ATTN      ATTENTION INTERRUPT?
         BO    CUTCUT              YES, TERMINATE CUT PREMATURELY
         BCT   R8,CUTDEEPR         SEE IF REQUESTED LINE COUNT REACHED
         B     RTFCLOSE            CLOSE OUTPUT FILE WITHOUT MUCH ADO
CUTEOF   L     R7,HOLDTOP          POINT TO FIRST SCREEN RECORD ENTRY
         ST    R1,DIRLEN(,R7)      SAY IT'S EOF TO INVALIDATE BUFFER
         B     RTFCLOSE
         SPACE
*
*         OUTPUT A RECORD          CUTRDTLS DESCRIBES OUTPUT DATA
*
         SPACE
*======== DETERMINE IF COPYING FILE OR WRITING RICH TEXT FORMAT
RTFAREC  TM    STATUS17,$17RTF     OUTPUTTING RICH TEXT FORMAT?
         BNO   CUTAREC             NO
         SPACE
*======== RTF RECORD PROCESSING  -  PHASE 0 - RECORD LEVEL
         SPACE
*-------- PROCESS RECORD'S CARRIAGE CONTROL BYTE
         ST    R14,RTFRETSV        SAVE RETURN ADDRESS
         MVC   RTFDTLS1,CUTRDTLS   SAVE DATA DETAILS
         L     R1,CUTRDTLS+4       POINT TO THE DATA
         MVC   RTFCCSAV,0(R1)      SAVE THE CARRIAGE CONTROL CODE
         CLI   0(R1),C'1'          SKIP TO CHANNEL 1?
         BE    RTFPGNEW            YES
         CLI   0(R1),X'8B'         SKIP TO CHANNEL 1 IMMEDIATE?
         BE    RTFPGNOW            YES
         IC    R4,0(,R1)           INSERT THE CARRIAGE CONTROL CODE
         LA    R0,B'11100111'      GET MASK
         NR    R4,R0               RESET LINE COUNT BITS
         LA    R0,X'03'
         C     R4,FW1              SPACE AFTER?
         BE    RTFSPCOK            YES
         CR    R4,R0               SPACE IMMEDIATE?
         BNE   RTFANSI             NO, ASSUME ANSI CARRIAGE CONTROL
RTFNOWSP OI    CUTFLGS,RTFIMMED    YES, FLAG SPACE IMMEDIATE
         TM    CUTFLGS,RTF1ST      FIRST DATA LINE?
         BO    RTFSPCOK            YES, SUPPRESS SPACE
         IC    R4,0(,R1)           INSERT THE CARRIAGE CONTROL CODE
         SRL   R4,3
         NR    R4,R0               GET THE LINE COUNT
         BZ    RTFSPCOK            ZERO LINES = NO OPERATION
         B     RTFLINLP            START SPACING
RTFANSI  TM    CUTFLGS,RTF1ST      FIRST DATA LINE?
         BO    RTFSPCOK            YES, SUPPRESS SPACE
         LA    R4,3                ASSUME 1 LINE TO SPACE
         CLI   0(R1),C'-'          3 LINES?
         BE    RTFLINLP            YES
         LA    R4,2                YES
         CLI   0(R1),C'0'          2 LINES?
         BE    RTFLINLP            YES
         LA    R4,1                TREAT EVERYTHING ELSE AS 1 LINE
RTFLINLP LA    R0,L'RTFLINE        GET DATA LENGTH
         LA    R1,RTFLINE          GET DATA ADDRESS
         STM   R0,R1,CUTRDTLS      SAVE THE DETAILS
         BAS   R14,CUTAREC         GO SIGNAL NEW LINE
         BCT   R4,RTFLINLP
         B     RTFSPCOK            GO SIGNAL NEW LINE
RTFPGAFT MVI   RTFCCSAV,X'8B'      PREVENT X'89' INFINITE LOOP
RTFPGNOW OI    CUTFLGS,RTFIMMED    FLAG SKIP IMMEDIATE
RTFPGNEW TM    CUTFLGS,RTF1ST      FIRST DATA LINE?
         BO    RTFSPCOK            YES, SUPPRESS SKIP
         LA    R0,L'RTFPAGE        GET DATA LENGTH
         LA    R1,RTFPAGE          GET DATA ADDRESS
         STM   R0,R1,CUTRDTLS      SAVE THE DETAILS
         BAS   R14,CUTAREC         GO SIGNAL NEW PAGE
RTFSPCOK LM    R1,R2,RTFDTLS1      GET DATA DETAILS
         TM    CUTFLGS,RTFIMMED    CARRIAGE CONTROL ONLY?
         BO    RTFEXIT             YES, RECORD PROCESSED
         C     R1,FW1              IS THE DATA LENGTH 1?
         BNH   RTFEXIT             YES, RECORD PROCESSED
         SPACE
*-------- DETERMINE THE DISPLAY ATTRIBUTES OF THE LINE'S TEXT
         SR    R0,R0               GET DEFAULT DISPLAY ATTRIBUTES
         L     R15,=A(COLORMSG)    POINT TO MESSAGE COLOURING ROUTINE
         BASR  R14,R15             DETERMINE THE COLOUR FOR THIS LINE
         STC   R0,CUTSHDW          SET THE SHADOW BUFFER
         MVC   CUTSHDW+1(255),CUTSHDW
         LA    R6,CUTSHDW+41       POINT TO SOURCE COLOUR CODE BUFFER
         L     R15,=A(COLORASM)    POINT TO LISTING COLOURING ROUTINE
         BASR  R14,R15             DETERMINE SOURCE CODE COLOURING
         CLC   =C'RELOC',51(R2)
         BNE   XYZZY
         LA    R15,0
XYZZY    LA    R2,1(,R2)           POINT PAST CARRIAGE CONTROL
         BCTR  R1,0                DECREMENT DATA LENGTH
         LA    R15,0(R1,R2)        POINT PAST DATA
         BCTR  R15,0               POINT TO ITS LAST BYTE
RTFTRLLP CLI   0(R15),C' '         TRAILING BLANK?
         BNE   RTFTRLOK            NO
         BCTR  R15,0               YES, BACK UP ONE BYTE
         BCT   R1,RTFTRLLP         GO TEST PRECEDING BUTE
         B     RTFEXIT             NO NON-BLANKS SO ALL DONE
RTFTRLOK LA    R6,CUTSHDW+1        POINT TO LINE'S FIRST SHADOW CODE
         STM   R1,R2,RTFDTLS1      SAVE THE DETAILS
         C     R1,FW1              IS THE TEXT LENGTH 1?
         BE    RTFCCSCH            YES, GO PRINT IT
         BCTR  R1,0                NO, GET LENGTH MINUS ONE
         AR    R2,R1               POINT TO THE LAST TEXT BYTE
         AR    R6,R1               POINT TO ITS SHADOW
         BCTR  R2,0                MAKE THAT SECOND LAST BYTE
         BCTR  R6,0                POINT TO ITS SHADOW
RTFBLXLP CLI   0(R2),C' '          IS THIS TEXT BYTE A BLANK?
         BNE   RTFBLXOK            NO, THE COLOURING IS SIGNIFICANT
         MVC   0(1,R6),1(R6)       YES, PERCOLATE THE COLOUR BACK ONE
RTFBLXOK BCTR  R2,0                POINT TO THE PREVIOUS TEXT BYTE
         BCTR  R6,0                POINT TO ITS SHADOW
         BCT   R1,RTFBLXLP         KEEP SCANNING BACKWARDS
         LA    R6,CUTSHDW+1        POINT TO LINE'S FIRST SHADOW CODE
         SPACE
*======== RTF RECORD PROCESSING  -  PHASE 1 - CONTROL CODE LEVEL
         SPACE
*-------- BREAK RECORD INTO SEGMENTS WITHOUT RTF CONTROL CODES
*-------- - RECORD STAYS TOGETHER UNLESS TEXT HAS { OR } OR \
*-------- - THOSE THREE TEXT CHARACTERS MUST BE PRECEDED BY A \
RTFCCSCH LM    R14,R15,RTFDTLS1    GET THE DATA DETAILS
         LTR   R14,R14             ANY DATA TO PROCESS?
         BNP   RTFEXIT             NO, RECORD PROCESSED
         STM   R14,R15,RTFDTLS2    PREPARE FOR NO CONTROL CODES
         XC    RTFDTLS1,RTFDTLS1   IN WHICH CASE ALL DATA PROCESSED
         LR    R0,R14              COPY ORIGINAL LENGTH
         BCTR  R14,0               DECREMENT FOR EXECUTE
         LA    R2,RTFCTLTB-888     PREPARE FOR TRT
         EX    R14,RTFCCCHK        CHECK FOR AN RTF CONTROL CODE
         BZ    RTFDOTXT            NONE SO PERFORM NEXT PHASE
         CR    R1,R15              FIRST CHARACTER A MATCH?
         BE    RTFCCNOW            YES, PROCESS CONTROL CODE NOW
         LR    R14,R1              POINT TO THE FOUND CONTROL CODE
         SR    R14,R15             GET DATA LENGTH BEFORE THE CODE
         STM   R14,R15,RTFDTLS2    SAVE DETAILS PASSED TO NEXT PHASE
         SR    R0,R14              REDUCE THE LENGTH FOR NEXT TIME
         STM   R0,R1,RTFDTLS1      SAVE DETAILS FOR THIS PHASE
         B     RTFDOTXT            GO PERFORM NEXT PHASE
         SPACE
*-------- EMIT BACKSLASH+CONTROL_CODE
RTFCCNOW LA    R15,1(,R15)         POINT PAST RTF CONTROL CODE
         STM   R14,R15,RTFDTLS1    SAVE FOR AFTER CC IS PROCESSED
         BCTR  R1,0                POINT TO BEFORE RTF CONTROL CODE
         BCTR  R6,0                BACK UP THE SHADOW ALSO
         MVI   0(R1),C'\'          INSERT ESCAPE SEQUENCE
         MVC   0(1,R6),1(R6)       ENSURE NO ATTR CHANGE IN THE MIDDLE
         LA    R0,2                JUST DO THE RTF CONTROL CODE NOW
         STM   R0,R1,RTFDTLS2      SAVE DETAILS FOR NEXT PHASE
         SPACE
*======== RTF RECORD PROCESSING  -  PHASE 2 - DISPLAY STYLE LEVEL
         SPACE
*-------- CHANGE DISPLAY ATTRIBUTES AS REQUIRED
RTFDOTXT CLC   RTFATRSV,0(R6)      NEED TO CHANGE ATTRIBUTES?
         BE    RTFATROK            NO, GO LOOK AT ACTUAL DATA
         MVC   RTFWRK(1),RTFATRSV  COPY OLD ATTRIBUTES
         MVC   RTFWRK+1(1),0(R6)   COPY NEW ATTRIBUTES
         MVC   RTFWRK+2(2),RTFWRK  COPY THESE COPIES
         NI    RTFWRK,X'30'        EXTRACT HIGHLIGHTING CODE
         NI    RTFWRK+1,X'30'      EXTRACT HIGHLIGHTING CODE
         NI    RTFWRK+2,X'07'      EXTRACT COLOUR CODE
         NI    RTFWRK+3,X'07'      EXTRACT COLOUR CODE
         MVC   RTFATRSV,0(R6)      YES, REMEMBER NEW ATTRIBUTES
         CLC   RTFWRK(1),RTFWRK+1  DIFFERENT HIGHLIGHTING?
         BE    RTFCOLOR            NO, GO STRAIGHT TO COLOUR SETTING
         SR    R2,R2               YES, CLEAR FOR INSERT
         CLI   RTFWRK+1,0          RESETTING HIGHLIGHTING?
         BE    RTF2NORM            YES, GOING TO NORMAL
         IC    R2,RTFWRK+1         GET THE NEW ATTRIBUTE CODE BY 16
         SRA   R2,1                GET THE NEW ATTRIBUTE CODE BY 8
         LA    R2,RTFATRTB-8(R2)   GET HIGHLIGHTING TABLE ENTRY
         B     RTFATCHG
RTF2NORM IC    R2,RTFWRK           GET THE OLD ATTRIBUTE CODE BY 16
         SRA   R2,1                GET THE OLD ATTRIBUTE CODE BY 8
         LA    R2,RTFNRMTB-8(R2)   GET HIGHLIGHTING TABLE ENTRY
RTFATCHG MVC   CUTRDTLS,0(R2)      GET CODE ADDRESS AND LENGTH
         BAS   R14,CUTAREC         GO CHANGE HIGHLIGHTING
         CLC   RTFWRK+2(1),RTFWRK+3   DIFFERENT COLOUR?
         BE    RTFATROK            NO, GO PROCESS TEXT
RTFCOLOR MVC   RTFWRK(3),RTFCLRCD SET UP COLOUR ORDER
         OI    RTFWRK+3,X'F0'      CONVERT BINARY TO ZONED
         LA    R0,4                GET THE ORDER LENGTH
         LA    R1,RTFWRK           GET THE ORDER ADDRESS
         STM   R0,R1,CUTRDTLS      SAVE THE DETAILS
         BAS   R14,CUTAREC         GO CHANGE COLOUR
         SPACE
*-------- EMIT A CHARACTER STRING WITH THE SAME DISPLAY ATTRIBUTES
RTFATROK LM    R14,R15,RTFDTLS2    LOAD CURRENT DATA DETAILS
         ST    R15,CUTRDTLS+4      SAVE ADDRESS FOR TEXT OUTPUT
RTFATRLP CLC   RTFATRSV,0(R6)      ANY ATTRIBUTE CHANGE?
         BNE   RTFCUTXT            YES, OUTPUT TEXT SO FAR
         LA    R6,1(,R6)           POINT TO NEXT ATTRIBUTE CODE
         LA    R15,1(,R15)         POINT TO NEXT TEXT CHARACTER
         BCT   R14,RTFATRLP        KEEP SCANNING FOR ATTR CHANGE
RTFCUTXT STM   R14,R15,RTFDTLS2    SAVE DETAILS FOR THIS PHASE
         S     R15,CUTRDTLS+4      GET THE SIZE TO BE OUTPUT NOW
         ST    R15,CUTRDTLS        SAVE THIS LENGTH
         BAS   R14,CUTAREC         OUTPUT A TEXT RECORD OR SEGMENT
         ICM   R0,15,RTFDTLS2      ANY MORE DATA FOR THIS PHASE?
         BP    RTFDOTXT            YES, GO DO IT
         B     RTFCCSCH            NO, RETURN TO CALLING PHASE
         SPACE
*-------- INPUT RECORD HAS BEEN COMPLETELY PROCESSED
RTFEXIT  MVI   CUTFLGS,0           RESET FLAGS
         CLI   RTFCCSAV,X'89'      NEED TO SKIP TO CHANNEL 1 NOW?
         BE    RTFPGAFT            YES
         L     R14,RTFRETSV        RESTORE RETURN ADDRESS
         IC    R4,RTFCCSAV         INSERT THE CARRIAGE CONTROL CODE
         LA    R0,B'11100111'      GET MASK
         NR    R4,R0               RESET LINE COUNT BITS
         C     R4,FW1              NEED TO SPACE NOW?
         BNER  R14                 NO, RETURN TO CALLER
         OI    RTFCCSAV,X'03'      PREVENT INFINITE LOOP
         LA    R1,RTFCCSAV         POINT TO CARRIAGE CONTROL CODE
         LA    R0,X'03'            LOAD BIT MASK
         B     RTFNOWSP            GO PERFORM SPACING
         SPACE
RTFCCCHK TRT   0(0,R15),888(R2)    <<< EXECUTED >>>
         SPACE
*======== WRITE A RECORD OR STRING TO THE OUTPUT FILE
         SPACE
CUTAREC  ST    R14,CUTRETSV        SAVE RETURN ADDRESS
         TM    STATUS15,$15COPY    PERFORMING RFE OPTION 3.3 COPY?
         BO    CUTXLTCK            YES, SO NO COMMAND TO CHECK
         L     R1,OPD0             POINT TO COMMAND NAME
         CLI   0(R1),C'$'          DOES IT BEGIN WITH A '$'?
         BNE   CUTXLTCK            NO, GO CHECK FOR ASCII
         LM    R0,R1,CUTRDTLS      YES, GET DATA LENGTH AND ADDRESS
         XLATE (1),(0),TO=A        PERFORM TRANSLATION
         B     CUTXLTOK            BRANCH TO AFTER XLATE
CUTXLTCK TM    MODE,MD_ASCII       IN ASCII MODE?
         BZ    CUTXLTOK            NO, BRANCH TO AFTER XLATE
         LM    R0,R1,CUTRDTLS      YES, GET DATA LENGTH AND ADDRESS
         XLATE (1),(0),TO=E        PERFORM TRANSLATION
CUTXLTOK LM    R14,R15,CUTRDTLS    GET DATA LENGTH AND ADDRESS
*
*   TRAILING BLANKS TRIMMED FROM FIXED-LENGTH RECORDS ARE NOT
*   REPORTED AS TRUCATED DATA.  SO, THE FIRST THING TO DO IS
*   DETERMINE IF THE SOURCE HAS FIXED-LENGTH RECORDS, AND IF
*   SO, REDUCE THE NOMINAL DATA LENGTH TO NOT COUNT TRAILING
*   BLANKS.  IF THE RECORDS ARE BEING COPIED TO A FIXED-LENGTH
*   RECORD DATA SET, THE RECORDS WILL BE PADDED WITH BLANKS TO
*   MAKE UP THE CORRECT LENGTH.  IF THE NOMINAL DATA LENGTH IS
*   LONGER THAN THE MAXIMUM OUTPUT RECORD DATA LENGTH, THEN
*   RECORD TRUCATION WILL BE FLAGGED.
*
         TM    STATUS17,$17RTF     OUTPUTTING RICH TEXT FORMAT?
         BO    CUTREADY            YES, MAY NOT BE LAST SEGMENT
         TM    STATUS12,$12PRT     LOOKING AT A "PRINTOUT"?
         BO    CUTFIXIT            YES, TRIM TRAILING BLANKS
         AIF   (NOT &ENV390).CUTMVS
         TM    $UCBAD,$HFSIO       COPYING A UNIX FILE?
         BO    CUTREADY            YES
.CUTMVS  ANOP
         TM    STATUS13,$13_L      PROCESSING PRE-LOADED DATA?
         BO    CUTREADY            YES
         TM    $UCBAD,$ACB         FILE DATA ACCESSED VIA AN ACB?
         BO    CUTREADY            YES
         TM    STATUS,STOPEN       IS THE INPUT FILE OPEN?
         BNO   CUTREADY            NO
         TM    DYNDCBW+DCBRECFM-IHADCB,X'40'
         BO    CUTREADY            NOT COPYING FIXED-LENGTH RECORDS
CUTFIXIT LA    R1,0(R14,R15)       POINT PAST FIXED-LENGTH RECORD
         BCTR  R1,0                POINT TO ITS LAST BYTE
CUTFIXLP CLI   0(R1),C' '          TRAILING BLANK?
         BNE   CUTFIXLN            NO, NON-DISCARDABLE DATA FOUND
         BCTR  R1,0                YES, BACK UP A BYTE
         BCT   R14,CUTFIXLP        REDUCE LENGTH AND RECHECK
CUTFIXLN ST    R14,CUTRDTLS        UPDATE "MUST HAVE" DATA LENGTH
CUTREADY LR    R1,R14              GET DATA LENGTH
         AR    R14,R15             POINT PAST THE RECORD
         TM    DCBRECFM,X'80'      RDW REQUIRED?
         BO    *+8                 NO
         LA    R1,4(,R1)           YES, ADJUST LENGTH
         LR    R0,R1               COPY OUTPUT RECORD LENGTH
         S     R1,CUTLRECL         IS RECORD TOO LONG?
         BNP   CUTLENOK            NO
         OI    CUTFLGS,$CUTCUT     YES, FLAG TRUNCATION
         L     R0,CUTLRECL         GET NEW OUTPUT RECORD LENGTH
CUTLENOK L     R15,CUTBFLIM        POINT PAST USABLE BUFFER
         S     R15,CUTRECAD        GET UNUSED BUFFER SIZE
         TM    DCBRECFM,X'40'      FIXED-LENGTH RECORDS?
         BO    *+8                 NO
         L     R0,CUTLRECL         YES, GET THE LENGTH THEY HAVE TO BE
         ST    R0,DOUBLE           SAVE RECORD LENGTH
         CR    R0,R15              WILL THIS RECORD FIT?
         BNH   CUTNLOAD            YES, GO LOAD IT
         L     R2,CUTBUFAD         NO, POINT TO THE WRITE BUFFER
         XASAM24
         WRITE CUTDECB,SF,CUTDW,(R2),'S',MF=E
         XASAM31
         TM    STATUS,STABEND      WAS A DCB ABEND ENCOUNTERED?
         BO    CUTCRASH            YES, CEASE COPY OPERATIONS
         XASAM24
         CHECK CUTDECB             WAIT FOR WRITE TO FINISH
         XASAM31
         TM    CUTFLGS,$CUTIOER    WAS AN I/O ERROR ENCOUNTERED?
         BO    CUTCRASH            YES, CEASE COPY OPERATIONS
         TM    STATUS,STABEND      WAS A DCB ABEND ENCOUNTERED?
         BO    CUTCRASH            YES, CEASE COPY OPERATIONS
         BAS   R14,CUTLSTNT        UPDATE NOTE LIST
         TM    DCBRECFM,X'80'      USING RDWS?
         BO    CUTWROTE            NO
         LA    R0,4                YES, GET THE SIZE OF A BDW
         STH   R0,0(,R2)           RESET BDW LENGTH
         STCM  R0,12,2(R2)         ZERO REST OF BDW
         AR    R2,R0               POINT PAST BDW
CUTWROTE ST    R2,CUTRECAD         SAVE ADDRESS FOR NEXT RECORD
CUTNLOAD L     R14,CUTRECAD        POINT TO WHERE NEXT RECORD GOES
         L     R15,DOUBLE          POINT TO ITS OUTPUT LENGTH
         TM    DCBRECFM,X'80'      USING RDWS?
         BO    CUTMOVE             NO
         STCM  R15,3,0(R14)        YES, SET LENGTH IN RDW
         STCM  R15,12,2(R14)       ZERO REST OF RDW
         L     R2,CUTBUFAD         POINT TO WRITE BUFFER
         LR    R1,R15              COPY RECORD LENGTH
         AH    R1,0(,R2)           GET UPDATED BLOCK LENGTH
         STH   R1,0(,R2)           SAVE IT
         LA    R0,4                GET LENGTH OF RDW
         AR    R14,R0              POINT PAST RDW
         SR    R15,R0              DISCOUNT RDW FROM RECORD LENGTH
CUTMOVE  L     R1,CUTRDTLS         GET DATA LENGTH
         L     R0,CUTRDTLS+4       GET DATA ADDRESS
         LA    R2,C' '
         SLL   R2,24
         OR    R1,R2               SET PAD TO BLANK
         MVCL  R14,R0              LOAD OUTPUT RECORD DATA
         TM    DCBRECFM,X'C0'      RECFM = U ?
         BO    CUTUNDEF            YES, GO WRITE IT NOW
         ST    R14,CUTRECAD        SAVE NEXT RECORD'S LOAD POINT
         L     R14,CUTRETSV        RESTORE RETURN ADDRESS
         BR    R14                 RETURN TO CALLER
CUTUNDEF ICM   R1,15,@ADDR         TTR CONVERSION CHAIN PRESENT?
         BZ    CUTTTROK            NO, CANNOT UPDATE NOTE LIST BLOCK
*-------- CONVERT INPUT TTRS TO OUTPUT TTRS IN SEGMENT NOTE LIST
         CLC   4(3,R1),BLDLTTRN    IS THIS THE NOTE LIST BLOCK?
         BNE   CUTTTROK            NO, JUST GO WRITE IT AS USUAL
         L     R0,DOUBLE           YES, GET THE BLOCK LENGTH
         SRA   R0,2                DIVIDE BY 4 TO GET THE TTR COUNT
         L     R2,CUTBUFAD         POINT TO THE BLOCK
CUTTTRL1 LA    R1,@ADDR            POINT TO THE TTR CHAIN ORIGIN
CUTTTRL2 ICM   R1,15,0(R1)         POINT TO THE NEXT TTR CHAIN ELEMENT
         BZ    CUTTTRN1            COULD NOT TRANSLATE THAT ONE
         CLC   0(4,R2),4(R1)       INPUT TTR MATCH?
         BNE   CUTTTRL2            NO, TRY NEXT ONE IN CHAIN
         MVC   0(4,R2),8(R1)       YES, OVERLAY IT WITH THE OUTPUT TTR
CUTTTRN1 LA    R2,4(,R2)           POINT TO THE NEXT TTR IN THE LIST
         BCT   R0,CUTTTRL1         NOW CONVERT THE NEXT TTR
*-------- END OF SEGMENT OVERLAY PROGRAM NOTE LIST UPDATE PROCESSING
CUTTTROK L     R2,CUTBUFAD         POINT TO THE BLOCK TO WRITE
         L     R4,DOUBLE           GET THE BLOCK LENGTH TO WRITE
         XASAM24
         WRITE CUTDECB,SF,CUTDW,(R2),(R4),MF=E
         XASAM31
         TM    STATUS,STABEND      WAS A DCB ABEND ENCOUNTERED?
         BO    CUTCRASH            YES, CEASE COPY OPERATIONS
         XASAM24
         CHECK CUTDECB             WAIT FOR WRITE TO FINISH
         XASAM31
         TM    CUTFLGS,$CUTIOER    WAS AN I/O ERROR ENCOUNTERED?
         BO    CUTCRASH            YES, CEASE COPY OPERATIONS
         TM    STATUS,STABEND      WAS A DCB ABEND ENCOUNTERED?
         BO    CUTCRASH            YES, CEASE COPY OPERATIONS
         BAS   R14,CUTLSTNT        UPDATE NOTE LIST
         L     R14,CUTRETSV        RESTORE RETURN ADDRESS
         BR    R14                 RETURN TO CALLER
         SPACE
*
*         UPDATE TTR FOR DETECTED NOTE LIST BLOCK
*
CUTLSTNT TM    STATUS15,$15COPY+$15STOW
         BNOR  R14                 NO NEED TO CHECK NOTE LIST
         TM    BLDLINDC,X'60'      ANY NOTE LIST FOR THIS MEMBER?
         BZR   R14                 NO, NO NOTE LIST TO CHECK
         LR    R2,R14              SAVE RETURN ADDRESS
         XASAM24
         NOTE  CUTDW               GET TTR OF BLOCK JUST WRITTEN
         XASAM31
         LR    R14,R2              RESTORE RETURN ADDRESS
         SR    R15,R15             PREPARE LOW VALUES
*-------- REMEMBER THE TTR OF EACH BLOCK OF A SEGMENT OVERLAY PROGRAM
         ICM   R2,15,@ADDR         POINT TO MOST RECENT TTR ELEMENT
         BZ    CUTLSTN0            NOT DOING SEGMENT OVERLAY STUFF
         C     R15,8(,R2)          IS THE ENTRY FOR THIS BLOCK?
         BNE   CUTLSTN0            NO, THIS ENTRY IS ALREADY COMPLETE
         ST    R1,8(,R2)           YES, COMPLETE ENTRY WITH TARGET TTR
*-------- END OF SEGMENT OVERLAY PROGRAM OUTPUT RECORD PROCESSING
CUTLSTN0 BCTR  R15,0               PREPARE HIGH VALUES
         TM    STATUS14,$14BIG     32-BIT NOTE/POINT VALUES?
         BNO   CUTLSTN1            NO, TTR0 READY FOR USE
         SLL   R1,8                YES, CONVERT TTTR TO TTR0
CUTLSTN1 CL    R15,CUTNOTE1        NEED TO SET NOTE LIST TTR 1?
         BNE   CUTLSTN2            NO
         STCM  R1,14,BLDLTTRT      YES, UPDATE IT IN USERDATA
         ST    R1,CUTNOTE1         OVERLAY TTR 1 MATCH FLAG
CUTLSTN2 TM    BLDLINDC,X'40'      MORE THAN 1 TTR IN NOTE LIST?
         BNOR  R14                 NO, CHECKING COMPLETE
         CL    R15,CUTNOTE2        NOTE LIST TTR 2?
         BNER  R14                 NO, CHECKING COMPLETE
         STCM  R1,14,BLDLTTRN      YES, UPDATE IT IN USERDATA
         ST    R1,CUTNOTE2         OVERLAY TTR 2 MATCH FLAG
         BR    R14                 CHECKING COMPLETE
         SPACE
*
*         CLOSE OUTPUT FILE
*
RTFCLOSE TM    STATUS17,$17RTF     OUTPUTTING RICH TEXT FORMAT?
         BNO   CUTFLUSH            NO
         LA    R0,L'RTFLAST        YES, CLOSE THE GROUP
         LA    R1,RTFLAST
         STM   R0,R1,CUTRDTLS
         BAS   R14,CUTAREC
CUTFLUSH L     R1,CUTBUFAD         POINT TO THE WRITE BUFFER
         TM    DCBRECFM,X'80'      USING RDWS?
         BO    *+8                 NO
         LA    R1,4(,R1)           YES, POINT PAST BDW
         C     R1,CUTRECAD         ANY RECORD WRITE PENDING?
         BNL   CUTSTOW             NO, ALL DATA HAS BEEN WRITTEN
         L     R2,CUTBUFAD         POINT TO THE BLOCK TO WRITE
         L     R1,CUTRECAD         POINT PAST DATA TO WRITE
         SR    R1,R2               GET LENGTH TO WRITE
         STH   R1,DCBBLKSI         SET LENGTH IN DCB
         XASAM24
         WRITE CUTDECB,SF,CUTDW,(R2),'S',MF=E
         CHECK CUTDECB             WAIT FOR WRITE TO FINISH
         XASAM31
         MVC   DCBBLKSI,CUTBLKSI+2 RESTORE BLOCK SIZE BEFORE CLOSE
CUTSTOW  XC    BLDLNAME,BLDLNAME   CLEAR STOW RETURN CODE SAVE AREA
         TM    STATUS15,$15STOW    NEED TO CREATE DIRECTORY ENTRY?
         BNO   CUTCLOSE            NO, JUST CLOSE THE FILE
         MVC   BLDLNAME+2(8),MSG+64+OAIAMEM-OAIAREA
         CLI   BLDLNAME+2,C' '     BLANK MEMBER NAME?
         BH    CUTMNMOK            NO, GOOD
         MVC   BLDLNAME+2(8),=CL8'TEMPNAME'
CUTMNMOK EQU   *
         STOW  CUTDW,BLDLNAME+2,R  FINALIZE THE NEW OUTPUT MEMBER
         STH   R15,BLDLNAME        SAVE STOW RETURN CODE
CUTTTRFM ICM   R1,15,@ADDR         ANY TTR CHAINED ELEMENTS TO FREE?
         BZ    CUTLEAVE            NO
         MVC   @ADDR,0(R1)         SAVE POINTER TO OLDER ONE ON CHAIN
         LA    R0,16               YES, GET ELEMENT SIZE
         FREEMAIN RU,LV=(0),A=(1)  FREE THE ELEMENT
         B     CUTTTRFM            CONTINUE UNTIL WHOLE CHAIN IS FREED
CUTLEAVE TM    STATUS15,$15PDS     RETURNING TO REVPDS?
         BNO   CUTCLOSE            NO, JUST COPYING A SINGLE MEMBER
         TM    STATUS15,$15STAR    COPYING ALL MEMBERS?
         BNO   CUTNOBUF            NO, LEAVE I/O BUFFER AND OPEN DCB
         CLI   BLDLNAME+1,8        TERMINATING ALL-MEMBER COPY?
         BH    CUTCLOSE            YES, CLOSE IT DOWN
         B     CUTNOBUF            NO, LEAVE I/O BUFFER AND OPEN DCB
CUTCRASH TM    STATUS15,$15PDS+$15STAR SELECTING MEMBERS FROM LIST?
         BZ    CUTCLOSE            NO, CLOSE AND CLEAN FOR SINGLE FILE
         BM    CUTNOBUF            YES, LEAVE I/O BUFFER AND OPEN DCB
         MVC   $MEMBER,BLANKS      NO, ALL MEMBERS - CLEAR SEL'D MEMBER
         B     CUTCLOSE            CLOSE THE FILE AND TIDY UP
CUTCUT   MVI   MSG,122             PROCESSING INTERRUPTED
CUTCLOSE MVI   CLOSED,X'80'        CLOSE THE OUTPUT DCB
         CLOSE (CUTDW),MF=(E,CLOSED)
         LM    R0,R1,CUTBUFSZ      GET WRITE BUFFER DETAILS
         LTR   R1,R1               DOES IT EXIST?
         BZ    CUTNOBUF            NO
         FREEMAIN RU,LV=(0),A=(1)  YES, SO FREE IT
         XC    CUTBUFSZ(8),CUTBUFSZ
CUTNOBUF TM    STATUS,STABEND      WAS A DCB ABEND ENCOUNTERED?
         BO    CUTDEALC            YES, LEAVE ABEND MESSAGE ON SHOW
         CLI   MSG,$MSG#1          ANY MESSAGE LOADED?
         BNL   CUTDEALC            YES, OPERATION NOT SUCCESSFUL
         CLI   BLDLNAME+1,12       SUCCESS?
         BL    CUTMEMOK            YES, TARGET DIRECTORY UPDATED
         MVI   MSG,112             I/O ERROR
         BH    CUTDEALC            NO, WELL, THE STOW FAILED, ANYWAY
         MVI   MSG,117             PDS DIRECTORY FULL
         MVC   BLDLNAME,BLDLNAME+2 SET MEMBER NAME FOR REVMSGS
         B     CUTDEALC            INSUFFICIENT SPACE IN DIRECTORY
CUTMEMOK L     R0,RANGE            GET THE COPIED RECORD COUNT
         TM    STATUS15,$15STAR    COPYING ALL MEMBERS?
         BNO   CUTGOTCT            NO, USE COUNT ONLY FOR THIS MEMBER
         A     R0,CUTACCUM         YES, ACCUMULATE THE TOTAL COUNT
         ST    R0,CUTACCUM         SAVE IT - THEN REDO MSG IN CASE LAST
CUTGOTCT CVD   R0,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  MSG+2(15),DOUBLE    SHOW THIS COUNT
         LA    R6,14               GET THE NUMBER LENGTH
CUT0LOOP CLI   MSG+2,C'0'          LEADING ZERO?
         BNE   CUT0DONE            NO
         MVC   MSG+2(14),MSG+3     YES, DELETE IT
         BCT   R6,CUT0LOOP
CUT0DONE LA    R15,MSG+3(R6)       POINT PAST NUMBER
         MVC   0(L'MSGCUT1+L'MSGCUT1A,R15),MSGCUT1
         LA    R6,1+L'MSGCUT1(,R6) GET MESSAGE LENGTH
         TM    CUTFLGS,$CUTCUT     TRUNCATED ANY DATA?
         BNO   CUTMSGLN            NO
         LA    R6,L'MSGCUT1A(,R6)  YES, GET TOTAL MESSAGE LENGTH
         OI    STATUS7,$7BELL      REQUEST AUDIBLE ALARM
CUTMSGLN STH   R6,MSG              LOAD MESSAGE LENGTH
         SPACE
*
*         DEALLOCATE OUTPUT DATA SET
*
CUTDEALC LA    R1,MSG+64           POINT TO OAIA
         L     R15,DALOADDR        POINT TO DEALLOCATION ROUTINE
         BASR  R14,R15             DEALLOCATE OUTPUT FILE
         NI    STATUS,255-STABEND  RESET DCB ABEND FLAG
         NI    STATUS7,255-$7TACK  RESET APPEND FLAG
         NI    STATUS17,255-$17RTF RESET RICH TEXT FORMAT FLAG
         LA    R0,$CUTSIZE         GET WORKING STORAGE SIZE
         LR    R1,R13              GET WORKING STORAGE ADDRESS
         TM    DCBOFLGS,DCBOFOPN   IS THE DCB STILL OPEN?
         DROP  R13                 @CUTWORK, IHADCB
         L     R13,4(,R13)         POINT TO CALLER'S SAVE AREA
         BO    CUTGONE             YES, LEAVE I/O BUFFER AND OPEN DCB
         FREEMAIN R,LV=(0),A=(1)   NO, RELEASE WORKING STORAGE
         OI    11(R13),X'01'       INVALIDATE FORWARD POINTER
         TM    STATUS15,$15COPY    PERFORMING RFE OPTION 3.3 COPY?
         BNO   CUTGONE             NO
         XC    CUTWORK@,CUTWORK@   YES, RESET WORKING STORAGE POINTER
CUTGONE  LM    R14,R12,12(R13)     RESTORE REGISTERS
         TM    STATUS15,$15COPY    PERFORMING RFE OPTION 3.3 COPY?
         BO    EXIT00              YES, ALL DONE HERE
         LA    R0,1
         A     R0,RANGE+4          GET FIRST RECORD AFTER CUT RECORDS
         NI    STATUS4,255-$4ATTN  ALLOW LOCATE TO COMPLETE
         TM    DIRLEN(R7),X'80'    E-O-F NOW AT TOP?
         BZ    LISTAT              NO, GO ADJUST TOP-OF-SCREEN
         ST    R0,DIRNUM(,R7)      YES, SUPPLY THE RECORD NUMBER
         B     LISTAT              ADJUST TOP-OF-SCREEN
         SPACE
*
*         OUTPUT DCB OPEN EXIT
*
         USING IHADCB,R1
CUTOPENX TM    STATUS17,$17RTF     WRITING RICH TEXT FORMAT?
         BNO   CUTRFMCK            NO, GO CHECK RECORD FORMAT
*  RTF
         MVI   DCBRECFM,X'50'      SET RECFM = VB
         LA    R0,255
         CH    R0,DCBLRECL         IS LRECL < 255 ?
         BNH   CUTRFMCK            NO
         STH   R0,DCBLRECL         YES, SET LRECL = 255
*  RECFM DIVERGE
CUTRFMCK TM    DCBRECFM,X'C0'      ANY RECORD FORMAT?
         BZ    CUTRFM0             NO
         BO    CUTRFMU             YES, UNDEFINED
         TM    DCBRECFM,X'80'      FIXED-LENGTH RECORDS?
         BO    CUTRFMF             YES
*  VARIABLE-LENGTH
         LA    R0,4                ACCOUNT FOR RDW
         CH    R0,DCBLRECL         LRECL > 4 ?
         BL    CUTVRLOK            YES
         A     R0,RECSIZE          NO
         STH   R0,DCBLRECL         USE CURRENT DATA WIDTH
CUTVRLOK LA    R0,4                ACCOUNT FOR BDW
         AH    R0,DCBLRECL
         CH    R0,DCBBLKSI         IS LRECL + 4 > BLKSIZE ?
         BNHR  R14                 NO, SO USE IT
         STCM  R0,12,DCBBLKSI      YES, SET BLKSIZE = 0
         TM    OSBITS,X'93'        SYSTEM DETERMINED BLOCKSIZE HERE?
         BOR   R14                 YES, SAVES A BIT OF WORK HERE
         MVC   DCBBLKSI,DOUBLE+6   NO, USE DEVICE MAXIMUM
         BR    R14                 RETURN TO SYSTEM
*  FIXED-LENGTH
CUTRFMF  ICM   R0,3,DCBLRECL       ANY RECORD LENGTH SET?
         BNZ   CUTFRLOK            YES
         MVC   DCBLRECL,RECSIZE+2  NO, USE CURRENT DATA WIDTH
CUTFRLOK TM    DCBRECFM,X'10'      BLOCKED?
         BO    CUTFIXCK            YES
         MVC   DCBBLKSI,DCBLRECL   NO, SET BLKSIZE = LRECL
CUTFIXCK LH    R7,DCBBLKSI         YES, GET BLOCKSIZE
         LH    R0,DCBLRECL         GET RECORD LENGTH
         SR    R6,R6               CLEAR FOR DIVIDE
         DR    R6,R0               GET BLOCKING FACTOR
         MR    R6,R0               GET BLOCK SIZE
         STH   R7,DCBBLKSI         SET INTO OUTPUT DCB
         TM    OSBITS,X'93'        SYSTEM DETERMINED BLOCKSIZE HERE?
         BOR   R14                 YES, SAVES A BIT OF WORK HERE
         LTR   R7,R7               VALID BLOCK SIZE?
         BPR   R14                 YES, USE IT
         L     R7,DOUBLE+4         NO, GET DEVICE MAXIMUM BLOCK SIZE
         SR    R6,R6               CLEAR FOR DIVIDE
         DR    R6,R0               GET BLOCKING FACTOR
         MR    R6,R0               GET BLOCK SIZE
         STH   R7,DCBBLKSI         SET INTO OUTPUT DCB
         BR    R14                 RETURN TO SYSTEM
*  NULL
CUTRFM0  MVI   DCBRECFM,X'C0'      SET RECFM = U
*  UNDEFINED
CUTRFMU  XC    DCBLRECL,DCBLRECL   ZERO THE LRECL
         ICM   R0,3,DCBBLKSI       NON-ZERO BLOCK SIZE?
         BNZR  R14                 YES, USE IT
         MVC   DCBBLKSI,RECSIZE+2  NO, USE CURRENT DATA WIDTH
         CLC   RECSIZE,DOUBLE+4    WILL THAT WORK ON THIS DEVICE?
         BNHR  R14                 YES, USE IT
         MVC   DCBBLKSI,DOUBLE+6   NO, USE DEVICE MAXIMUM
         BR    R14                 RETURN TO SYSTEM
         DROP  R1                  IHADCB
         SPACE
*
*         OUTPUT DCB ABEND EXIT
*
CUTABEND OI    STATUS,STABEND      INDICATE DCB ABEND OCCURRED
         MVC   ABENDWRD,0(R1)      COPY ABEND AND REASON CODES
         OI    ABENDWRD+1,X'0F'    GET ABEND CODE READY FOR UNPACK
         MVC   MSG(MSGCUT3L),MSGCUT3
         UNPK  CPABNUM,ABENDWRD(2)
         TR    CPABNUM,HEXTAB-240
         UNPK  CPABRET(3),ABENDWRD+2(2)
         TR    CPABRET,HEXTAB-240
         MVI   CPABRET+2,C' '      JUST IN CASE
         OI    STATUS7,$7BELL      REQUEST AUDIBLE ALARM AFTER ABEND
         TM    3(R1),4             ALLOWED TO IGNORE THE ABEND?
         MVI   3(R1),0             PREPARE FOR NO
         BZR   R14                 NO, PROBABLY EOV DURING CLOSE
         MVI   3(R1),4             YES, IGNORE THE ABEND
         BR    R14                 RETURN TO SYSTEM
         SPACE
*
*         OUTPUT DCB SYNAD EXIT
*
         USING @CUTWORK,R13
CUTSYNAD OI    CUTFLGS,$CUTIOER    FLAG I/O ERROR
         SYNADAF ACSMETH=QSAM
         MVC   CUTSHDW(78),50(R1)  COPY I/O ERROR MESSAGE
         SYNADRLS
         LA    R1,CUTSHDW          POINT TO ERROR MESSAGE
         LA    R0,78               GET ITS LENGTH
         TPUT  (1),(0),R           DISPLAY IT ON THE TSO TERMINAL
         BR    R14                 RETURN TO SYSTEM
         DROP  R13                 @CUTWORK
         SPACE
         DROP  R5                  CUTCOPY
         SPACE
         USING CUTOFFLD,R15
CUTOFFLD MVC   MSG(MSGCUT2L),MSGCUT2
         B     BELPRMPT
         DROP  R15                 CUTOFFLD
         SPACE
MSGCUT0  MESG  'END-OF-FILE - NO DATA TO COPY'
MSGCUT1  DC    C' RECORDS COPIED'
MSGCUT1A DC    C' / TRUNCATED'
MSGCUT2  MESG  'USE ''CUTOFF'' OR ''APPEND'''
MSGCUT3  MESG  'COPY ABENDED - S###-##'
CPABNUM  EQU   MSG+2+16,3
CPABRET  EQU   MSG+2+20,2
MSGRTF   MESG  'IGNORED - NOT A PRINT FILE'
         DC    0D'0'
RTFATRTB DC    A(L'RTFATTR1),A(RTFATTR1)      BLINK -> ITALIC
         DC    A(L'RTFATTR2),A(RTFATTR2)    REVERSE -> BOLD
         DC    A(L'RTFATTR3),A(RTFATTR3) UNDERSCORE -> UNDERLINE
RTFNRMTB DC    A(L'RTFNORM1),A(RTFNORM1)      RESET ITALIC
         DC    A(L'RTFNORM2),A(RTFNORM2)      RESET BOLD
         DC    A(L'RTFNORM3),A(RTFNORM3)      RESET UNDERLINE
         LTORG
         COPY  REVRTF              RTF HEADER AND TRAILER RECORDS
         DC    0F'0'
CUTEXLST DC    X'05',AL3(CUTOPENX) DCB OPEN EXIT
         DC    X'91',AL3(CUTABEND) DCB ABEND EXIT
         SPACE
         PRINT NOGEN
CUTDCBS  DCB   DSORG=PS,MACRF=W,DDNAME=OFFCUT,EXLST=CUTEXLST,          +
               SYNAD=CUTSYNAD
CUTDL    EQU   *-CUTDCBS
         SPACE
CUTDCBP  DCB   DSORG=PO,MACRF=W,DDNAME=OFFCUT,EXLST=CUTEXLST,          +
               SYNAD=CUTSYNAD
         PRINT GEN
         SPACE
RTFCTLTB DC    XL256'00'           RTF CONTROL CHARACTER
         ORG   RTFCTLTB+C'{'           DETECTION TABLE
         DC    C'{'
         ORG   RTFCTLTB+C'}'
         DC    C'}'
         ORG   RTFCTLTB+C'\'
         DC    C'\'
         ORG
         SPACE 2
**********************************************************************
*                                                          *         *
*         RESOLVE VIRTUAL STORAGE ADDRESS SPECIFICATION    *  R44.0  *
*                                                          * AUG2013 *
**********************************************************************
         SPACE
*
*    ON ENTRY:
*
*         R1 = ADDRESS OF OPERAND DESCRIPTOR FOR THE STORAGE ADDRESS
*        R13 = CALLER'S REGISTER SAVE AREA ADDRESS
*        R14 = RETURN ADDRESS
*        R15 = ADDRESS OF RESOLVE@
*
*    ON EXIT:
*
*    RESADDR = NEW DISPLAY ADDRESS
*              WHICH WILL BE THE SPECIFIED ADDRESS IF THE
*              SPECIFED ADDRESS WAS SUCCESSFULLY RESOLVED,
*              OR IT WILL BE UNCHANGED IF NOT
*
*     $7BELL = 1 IF THE ADDRESS COULD NOT BE RESOLVED
*
*    ALL REGISTERS ARE RESTORED UPON EXIT.
*
         SPACE
         USING RESOLVE@,R5
RESOLVE@ STM   R14,R12,12(R13)     SAVE REGISTERS
         LR    R5,R15              SET LOCAL BASE
         LA    R4,CALLSAVE         CHAIN SAVE AREAS
         ST    R13,4(,R4)
         ST    R4,8(,R13)
         LR    R13,R4              POINT TO NEW SAVE AREA
         L     R15,0(,R1)          POINT TO THE DATA
         LH    R4,4(,R1)           GET ITS LENGTH
         XC    RESWORK,RESWORK     CLEAR WORK AREA
RESTERM  LR    R14,R15             POINT TO START OF TERM
         SR    R2,R2               RESET LENGTH EXTRACTED SO FAR
RESLOOP  CLI   0(R15),C'+'         PLUS?
         BE    RESTERM2            YES, END OF TERM
         CLI   0(R15),C'-'         MINUS
         BE    RESTERM2            YES, END OF TERM
         CLI   0(R15),C'%'         PERCENT?
         BE    RESTERM2            YES, END OF TERM
         CLI   0(R15),C'?'         QUESTION MARK?
         BE    RESTERM2            YES, END OF TERM
         LA    R15,1(,R15)         POINT PAST TERM BYTE
         LA    R2,1(,R2)           INCREMENT TERM LENGTH
         BCT   R4,RESLOOP
RESTERM2 LR    R6,R15              POINT PAST TERM
         BCTR  R6,0                POINT TO LAST BYTE OF TERM
         TM    RESFLAG,RESNOT1     IS THIS THE FIRST TERM?
         BO    RESOFF              NO, IT MUST BE AN OFFSET
         CLI   0(R6),C'.'          ABSOLUTE ADDRESS?
         BE    RESABS              YES
         CLI   0(R14),C'0'         STARTS WITH NUMERIC?
         BNL   RESABS1             YES, MUST BE ABSOLUTE ADDRESS
         MVC   RESSYMNM,BLANKS     BLANK SYMBOL NAME AREA
         BCTR  R2,0                DECREMENT FOR EXECUTE
         EX    R2,RESADTRM         GET THE 8-BYTE SYMBOL NAME
         LTR   R2,R2               SINGLE BYTE NAME?
         BNZ   RESSYMBL            NO
         CLI   RESSYMNM,C'X'       YES, IS IT 'X'?
         BNE   RESSYMBL            NO
         MVC   RESADDR,@ADDR       YES, LOAD CURRENT ADDRESS
         B     RESTERMX            TERM NOW PROCESSED
*      EXTRACT AND INTERPRET SYMBOL NAME
RESSYMBL ST    R2,DOUBLE           SAVE THE TERM LENGTH CODE
         LA    R2,HSEACTIV         POINT TO CHAIN ANCHOR
RESPAGE  ICM   R2,15,0(R2)         POINT TO NEXT PAGE
         BZ    RESEOSYM            NO MORE PAGES TO SEARCH
         LR    R1,R2               POINT TO THE CURRENT PAGE
         LR    R6,R2               POINT TO THE CURRENT PAGE
         AH    R6,HW4096           POINT PAST THE CURRENT PAGE
RESSCAN  C     R1,LASTSYM@         SCAN ALL USED ENTRIES?
         BE    RESEOSYM            YES, NO MORE PAGES TO SEARCH
         LA    R1,16(,R1)          NO, POINT TO NEXT ENTRY
         CR    R1,R6               REACHED END OF THE PAGE?
         BNL   RESPAGE             YES, GO SCAN THE NEXT PAGE
         CLC   RESSYMNM,0(R1)      FOUND SYMBOL NAME?
         BNE   RESSCAN             NO, CONTINUE SCAN
         MVC   RESADDR,8(R1)       YES, SET ADDRESS FROM IT
         B     RESTERMX            TERM NOW PROCESSED
*      PERFORM PROGRAM ENTRY POINT NAME SEARCH FOR LOCATE
RESEOSYM L     R2,OPD0             POINT TO COMMAND
         CLI   0(R2),C'L'          IS IT LOCATE?
         BNE   RESNOSYM            NO, CAN'T FIND SYMBOL
*      SEARCH JPA
         L     R2,PSATOLD          POINT TO THE CURRENT TCB
         USING TCB,R2
         L     R2,TCBJSTCB         POINT TO THE JOB STEP TCB
         LA    R2,TCBJPQ           POINT TO THE JPA ORIGIN
         DROP  R2                  TCB
         USING CDENTRY,R2
RESJPQLP ICM   R2,15,CDCHAIN       POINT TO THE NEXT CDE
         BZ    RESEOJPA            END OF JPA CHAIN
         CLC   RESSYMNM,CDNAME     FOUND IT?
         BNE   RESJPQLP            NO
         B     RESSYMEP            YES
         DROP  R2                  CDENTRY
*      SEARCH LPAQ
RESEOJPA L     R1,CVTPTR(,0)       POINT TO THE CVT
         USING CVT,R1
         L     R2,CVTQLPAQ         POINT TO THE LPAQ ORIGIN
         AIF   (NOT &ENV390).LPAQLP
         CLI   CVTDCB,X'9B'        MVS/ESA OR LATER?
         BNE   RESLPQLP            NO
         TM    CVTOSLV2,CVTDYLPA   DYNAMIC LPA SUPPORTED?
         BNO   RESLPQLP            NO, DYNAMIC LPA NOT PRESENT
         L     R2,CVTECVT          YES, POINT TO THE ECVT
         USING ECVT,R2
         LA    R2,ECVTDLPF         POINT TO CDE CHAIN ORIGIN
         DROP  R2                  ECVT
.LPAQLP  ANOP
         DROP  R1                  CVT
         USING CDENTRY,R2
RESLPQLP ICM   R2,15,CDCHAIN       POINT TO THE NEXT CDE
         BZ    RESEOLPQ            END OF LPAQ CHAIN
         CLC   RESSYMNM,CDNAME     FOUND IT?
         BNE   RESLPQLP            NO
         B     RESSYMEP            YES
         DROP  R2                  CDENTRY
*      SEARCH PLPA
RESEOLPQ EQU   *                   SEARCH PLPA
*               REGS 0 AND 1 - CONTAIN NAME
*               REG 3        - CVT
*               REGS 6 8 9   - WORK REGS
*               REG 14       - RETURN - BAD RETURN 4(14)
*               REG 15       - ENTRY POINT
*               REG 0        - POINTS TO LPDE AFTER GOOD RETURN
         LM    R0,R1,RESSYMNM
         STM   R14,R12,12(R13)
         L     R3,CVTPTR(,0)
         L     R15,CVTLPDSR-CVT(,R3)
         BASR  R14,R15             CALL IEAVVMSR
         B     RESISLPA            FOUND IN PLPA
         B     RESNOLPA            NOT IN PLPA
         USING SAVER,R13
RESISLPA ST    R0,SAVGRS2          SAVE LPDE ADDRESS
         LM    R14,R12,12(R13)     RESTORE REGISTER AFTER IEAVVMSR
         DROP  R13                 SAVER
*      PROGRAM ENTRY POINT NAME FOUND
         USING CDENTRY,R2
RESSYMEP EQU   *
         L     R1,CDENTPT          GET ENTRY POINT ADDRESS
         LA    R1,0(,R1)           CLEAR NON-ADDRESS BITS
         ST    R1,RESADDR          SAVE THE ADDRESS
         B     RESTERMX            TERM NOW PROCESSED
         DROP  R2                  CDENTRY
*      LOADED MODULE NOT KNOWN
RESNOLPA LM    R14,R12,12(R13)     RESTORE REGISTER AFTER IEAVVMSR
         AIF   (NOT &ENV390).RSNOSYM
*      SEARCH NUCLEUS MAP
         L     R1,CVTPTR(,0)
         USING CVT,R1
         L     R2,CVTNUCMP         POINT TO THE NUCLEUS MAP
         DROP  R1                  CVT
         L     R0,12(,R2)          GET LENGTH OF NUCLEUS MAP
         SRL   R0,4                DIVIDE BY 16 FOR ENTRY POINT COUNT
         LA    R2,16(,R2)          POINT TO THE FIRST ENTRY
         BCTR  R0,0                DECREMENT FOR HEADER
RESNUCLP CLC   RESSYMNM,0(R2)      FOUND THE SYMBOL NAME?
         BE    RESNUCIT            YES, THE SEARCH IS OVER
         LA    R2,16(,R2)          ADJUST ENTRY POINTER
         BCT   R0,RESNUCLP         PROCESS NEXT NUCLEUS MAP ENTRY
         B     RESNOSYM            COULD NOT FIND THE SYMBOL NAME
RESNUCIT L     R1,8(,R2)           LOAD SYMBOL'S ADDRESS VALUE
         LA    R1,0(,R1)           CLEAR NON-ADDRESS BITS
         ST    R1,RESADDR          SAVE THE ADDRESS
         B     RESTERMX            TERM NOW PROCESSED
.RSNOSYM ANOP
*      REPORT SYMBOL NOT KNOWN
RESNOSYM L     R2,DOUBLE           RESTORE TERM LENGTH CODE
         EX    R2,FINDXTRT         IS STRING ALL VALID HEX CHARACTERS?
         BZ    RESABS3             YES, ABSOLUTE ADDRESS AFTER ALL
         MVI   MSG,189             SYMBOL NOT KNOWN
         L     R15,REVMSGEP
         BASR  R14,R15             FETCH MESSAGE TEXT TEMPLATE
         MVC   MSG+9(8),RESSYMNM   LOAD SYMBOL NAME
         LH    R0,MSG              GET THE MESSAGE LENGTH
         LA    R1,MSG+16           POINT TO LAST SYMBOL NAME BYTE
RESNOSLP CLI   0(R1),C' '          TRAILING BLANK?
         BNE   RESNOSOK            NO
         MVC   0(10,R1),1(R1)      YES, SUPPRESS IT
         BCTR  R1,0
         BCT   R0,RESNOSLP
RESNOSOK STH   R0,MSG              UPDATE MESSAGE LENGTH
         B     RESEXIT             TERMINATE ADDRESS RESOLUTION
*      EXTRACT ABSOLUTE ADDRESS
RESABS   BCTR  R2,0                DO NOT COUNT THE PERIOD
RESABS1  LTR   R2,R2               IS THE LENGTH POSITIVE?
         BNP   RESABS2             NO, SHOULD BE ZERO - TEST PERIOD
         BCTR  R2,0                YES, DECREMENT FOR EXECUTE
RESABS2  EX    R2,FINDXTRT         IS STRING ALL VALID HEX CHARACTERS?
         BNZ   RESNOHEX            NO, INVALID
RESABS3  EX    R2,FINDXTR          YES, CONVERT TO ZONED HEX
         LA    R2,1(,R2)           GET LENGTH COUNT AGAIN
         CH    R2,HW8              TOO LONG TO HANDLE?
         BH    RESLONG             YES, GO REPORT PROBLEM
         SR    R0,R0               ZERO ACCUMULATOR
         SR    R1,R1               ZERO WORK REGISTER
RESABS4  SLL   R0,4                PROMOTE PREVIOUS HEX DIGITS
         NI    0(R14),X'0F'        ZERO ZONE
         IC    R1,0(,R14)          LOAD DIGIT
         OR    R0,R1               GATE DIGIT THROUGH TO ACCUMULATOR
         LA    R14,1(,R14)         POINT TO NEXT POSSIBLE DIGIT
         BCT   R2,RESABS4          PROCESS NEXT DIGIT
         ST    R0,RESADDR          SET AS CURRENT ADDRESS
         B     RESTERMX            TERM NOW PROCESSED
*      NON-FIRST TERM NUMERIC EVALUATION
RESOFF   CLI   0(R6),C'N'          DECIMAL NUMBER SUPPLIED?
         BNE   RESOFF2             NO, MUST BE HEXADECIMAL
         CH    R2,HW1              CAN DIGITS PRECEDE THE 'N'?
         BNH   RESOFF2             NO, PARSE AN 'N' AS HEX
         BCTR  R2,0                GET NUMBER OF DECIMAL DIGITS
         CH    R2,HW10             TOO LONG TO HANDLE?
         BNL   RESLONG             YES, GO REPORT PROBLEM
         L     R6,TABNUMAD         POINT TO TRANSLATE TABLE
         BCTR  R2,0                DECREMENT FOR EXECUTE
         EX    R2,RESDECHK         IS TERM A DECIMAL NUMBER?
         BNZ   RESNODEC            NO, GO REPORT THE PROBLEM
         EX    R2,RESDECPK         GET THE NUMBER IN PACKED DECIMAL
         CVB   R0,DOUBLE           GET THE NUMBER
         B     RESOFF#             GO APPLY THE OFFSET
RESOFF2  BCTR  R2,0                DECREMENT FOR EXECUTE
         EX    R2,FINDXTRT         IS STRING ALL VALID HEX CHARACTERS?
         BNZ   RESNOHEX            NO, INVALID
         EX    R2,FINDXTR          YES, CONVERT TO ZONED HEX
         LA    R2,1(,R2)           GET LENGTH COUNT AGAIN
         CH    R2,HW8              TOO LONG TO HANDLE?
         BH    RESLONG             YES, GO REPORT PROBLEM
         SR    R0,R0               ZERO ACCUMULATOR
         SR    R1,R1               ZERO WORK REGISTER
RESOFF3  SLL   R0,4                PROMOTE PREVIOUS HEX DIGITS
         NI    0(R14),X'0F'        ZERO ZONE
         IC    R1,0(,R14)          LOAD DIGIT
         OR    R0,R1               GATE DIGIT THROUGH TO ACCUMULATOR
         LA    R14,1(,R14)         POINT TO NEXT POSSIBLE DIGIT
         BCT   R2,RESOFF3          PROCESS NEXT DIGIT
RESOFF#  CLI   RESSIGN,C'-'        IS THE OPERATING SIGN MINUS?
         BNE   RESOFF#2            NO
         LNR   R0,R0               YES, MAKE NUMBER NEGATIVE
RESOFF#2 A     R0,RESADDR          ADD OFFSET TO BASE ADDRESS
         ST    R0,RESADDR          SAVE UPDATED ADDRESS
         MVI   RESSIGN,0
RESTERMX CLI   0(R15),C'%'         INDIRECT ADDRESS?
         BE    RESIND              YES
         CLI   0(R15),C'?'         INDIRECT ADDRESS?
         BE    RESIND              YES
         CLI   0(15),C'+'          PLUS SIGN?
         BE    RESOFST             YES
         CLI   0(15),C'-'          MINUS SIGN?
         BE    RESOFST             YES
         LTR   R4,R4               MORE ADDRESS TERMS TO GO?
         BP    RESTERM             YES
*      ADDRESS RESOLUTION NOW COMPLETE
RESEXIT  TM    RESFLAG,RESSTAE     ESTAE ACTIVE?
         BNO   RESEXIT2            NO
         ESTAE 0                   YES, BUT NOT ANY LONGER
RESEXIT2 L     R13,4(,R13)         POINT TO CALLER'S SAVE AREA
         OI    11(R13),X'01'       INVALIDATE FORWARD POINTER
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER
*      PROCESS OFFSET PLUS OR MINUS SIGN
RESOFST  CLI   RESSIGN,0           ANY SIGN PENDING?
         BNE   RES2SIGN            YES, TWO CONSECUTIVE SIGNS
         MVC   RESSIGN,0(R15)      NO, REMEMBER THIS SIGN
         OI    RESFLAG,RESNOT1     FLAG NOT FIRST TERM
         LA    R15,1(,R15)         POINT PAST THIS SIGN
         BCT   R4,RESTERMX         GO PROCESS NEXT OPERATOR OR TERM
RESDANGL MVI   MSG,195             ERROR - DANGLING +/- SIGN
         OI    STATUS7,$7BELL      FLAG ERROR TO CALLER
         B     RESEXIT             TERMINATE ADDRESS RESOLUTION
RES2SIGN MVI   MSG,194             ERROR - 2 ADJACENT +/- SIGNS
         OI    STATUS7,$7BELL      FLAG ERROR TO CALLER
         B     RESEXIT             TERMINATE ADDRESS RESOLUTION
*      PROCESS ADDRESS INDIRECTION
RESIND   CLI   RESSIGN,0           ANY SIGN DANGLING?
         BNE   RESDANGL            YES, GO REPORT IT
         TM    RESFLAG,RESSTAE     ESTAE ALREADY ACTIVE?
         BO    RESIND1             YES, DO NOT ACTIVATE IT AGAIN
         XC    MYDSCB,MYDSCB       NO, CLEAR A WORK AREA
         LA    R2,RESRETRY         COPY RETRY ROUTINE ADDRESS
         LR    R6,R15              SAVE OPERAND PARSE CURSOR
         @STAE RESESTAE,CT,        RESESTAE IS NEW RECOVERY ROUTINE    +
               PARAM=(R2),         PASS RETRY ROUTINE ADDRESS          +
               XCTL=NO,            DEACTIVATE UPON XCTL IF ANY         +
               PURGE=NONE,         DO NOT INHIBIT ANY I/O              +
               ASYNCH=YES,         DO NOT INHIBIT ASYNCHRONOUS EXITS   +
               TERM=NO,            NOTHING TO DO IF TASK TERMINATING   +
               SDWALOC31=YES,      ALLOW SDWA TO BE ABOVE THE LINE     +
               MF=(E,MYDSCB)       USE DYNAMIC STORAGE FOR ESTAE PARMS
         OI    RESFLAG,RESSTAE     FLAG ESTAE ACTIVE
         LR    R15,R6              RESTORE OPERAND PARSE CURSOR
RESIND1  L     R1,RESADDR          LOAD CURRENT ADDRESS
         L     R1,0(,R1)           GET ITS CONTENTS
         LA    R1,0(,R1)           ENSURE ADDRESS FORMAT
         ST    R1,RESADDR          UPDATE CURRENT ADDRESS
         CLI   0(R15),C'%'         24-BIT POINTER SPECIFIED?
         BNE   *+8                 NO
         MVI   RESADDR,0           YES, CLEAR HIGH BYTE
         LA    R15,1(,R15)         POINT INDIRECTION OPERATOR
         BCT   R4,RESTERMX         GO PROCESS NEXT OPERATOR OR TERM
         B     RESEXIT             ADDRESS RESOLUTION NOW COMPLETE
*      ESTAE RETRY ROUTINE
RESRETRY MVI   MSG,196             ABEND WHILE RESOLVING ADDRESS
         XASAM31
         L     R15,REVMSGEP
         BASR  R14,R15             FETCH MESSAGE TEXT TEMPLATE
         OI    DOUBLE+1,X'0F'      PREPARE FOR UNPACK
         UNPK  MSG+9(3),DOUBLE(2)  UNPACK ABEND CODE
         UNPK  MSG+13(3),DOUBLE+3(2)  AND INTERRUPT CODE
         TR    MSG+9(6),HEXTAB-240 MAKE DISPLAYABLE
         MVI   MSG+12,C'-'
         MVI   MSG+15,C' '
         B     RESEXIT             TERMINATE ADDRESS RESOLUTION
*      REPORT INVALID DIGIT - PSW CC NOT 0 AFTER TRT
RESNOHEX MVI   MSG,193             NOT A VALID HEXADECIMAL DIGIT
         B     *+8
RESNODEC MVI   MSG,190             NOT A VALID DECIMAL DIGIT
         L     R15,REVMSGEP
         BASR  R14,R15             FETCH MESSAGE TEXT TEMPLATE
         MVC   MSG+2(1),0(R1)      SHOW ERRONEOUS DIGIT
         B     RESEXIT             TERMINATE ADDRESS RESOLUTION
*      REPORT TERM TOO LONG
RESLONG  MVI   MSG,191             ADDRESS TERM TOO LONG TO PROCESS
         OI    STATUS7,$7BELL      FLAG ERROR TO CALLER
         B     RESEXIT             TERMINATE ADDRESS RESOLUTION
*      LOCAL EXECUTED INSTRUCTIONS
RESADTRM MVC   RESSYMNM(0),0(R14)  <<< EXECUTED >>>
RESDECPK PACK  DOUBLE,0(0,R14)     <<< EXECUTED >>>
RESDECHK TRT   0(0,R14),0(R6)      <<< EXECUTED >>>
         DROP  R5                  RESOLVE@
         SPACE 2
**********************************************************************
*                                                          *         *
*         ADDRESS RESOLUTION STORAGE ACCESS ESTAE ROUTINE  *  R44.0  *
*                                                          * AUG2013 *
**********************************************************************
         SPACE
         USING RESESTAE,R15
RESESTAE CH    R0,RESHW12          ANY SDWA PROVIDED?
         BNE   RESNOT12            YES, GOOD
         LA    R1,RES12MSG         POINT TO MESSAGE
         LA    R0,L'RES12MSG       GET ITS LENGTH
         TPUT  (1),(0),R           SHOW A MESSAGE
         SLR   R15,R15             CONTINUE WITH ABEND (PERCOLATE)
         BR    R14                 EXIT FROM EXIT
         SPACE
         USING SDWA,R1
RESNOT12 STM   R14,R12,12(R13)     SAVE REGISTERS
         L     R9,SDWAGR09         RESTORE DYNAMIC STORAGE BASE
         MVC   DOUBLE(3),SDWACMPC  SAVE ABEND AND INTERRUPT CODES
         MVC   DOUBLE+3(1),SDWAINTP+1
         MVC   SDWASRSV,SDWAGRSV   COPY ERROR-TIME REGISTERS FOR RETRY
         L     R4,SDWAPARM         GET RETRY ROUTINE ADDRESS
         SETRP REGS=(14,12),       RESTORE SAVED REGISTERS             +
               DUMP=NO,            NO DUMP REQUIRED FOR RETRY          +
               RC=4,               RETRY                               +
               RETADDR=(R4),       SPECIFY THE RETRY ADDRESS           +
               RETREGS=YES,        LOAD RETRY REGISTERS FROM SDWA      +
               FRESDWA=YES         FREE THE SDWA
         DROP  R1,R15              SDWA, RESESTAE
RES12MSG DC    C'ESTAE ENTRY CODE 12'
RESHW12  DC    H'12'
         SPACE 2
         AIF   (&ENV390).HISTOK
**********************************************************************
*                                                          *         *
*         PROCESS PRE-390 "HISTORY" AND "MAP" REQUESTS     *  GP@P6  *
*                                                          * MAR2012 *
**********************************************************************
         SPACE
*   THIS ROUTINE IS USED FOR 'H' (HISTORY) AND 'M' (MAP) MEMBER
*   SELECTION CODES FOR PRE-390 SYSTEMS LACKING THE PROGRAM BINDER
*   API INSTEAD OF THE 'REVHIST' CSECT WHICH EMPLOYS THE BINDER API.
*
*   A CLIST INVOKING THE FAMOUS 'PDS' TSO COMMAND IS INVOKED.
         SPACE
         USING REVHIST,R5
REVHIST  LR    R5,R15              SET LOCAL BASE
         LR    R7,R14              SAVE RETURN ADDRESS
         MVI   CMDAREA,C' '        INITIALIZE COMMAND BUFFER
         MVC   CMDAREA+1(L'CMDAREA-1),CMDAREA
         MVC   CMDAREA(14),HISTCMD LOAD COMMAND NAME
         LA    R1,HISTHIS
         TM    STATUS9,$9_H        HISTORY REQUEST?
         BO    *+8                 YES, GUESSED RIGHT
         LA    R1,HISTMAP          NO, MAP REQUEST
         MVC   CMDAREA+14(4),0(R1) SPECIFY PDS SUBCOMMAND
         MVC   CMDAREA+18(8),$MEMBER   AND PROGRAM NAME
         MVC   CMDAREA+27(44),DSNAIM+2 AND DATA SET NAME
         LH    R1,DSNAIM
         LA    R1,27(,R1)          GET TSO COMMAND LENGTH
         ST    R1,CMDLEN           SET COMMAND LENGTH CODE
         OI    STATUS4,$4CMD       TELL REVCOMM TO SKIP TERMINAL I/O
         L     R15,=A(REVCOMM)     NO PARAMETER LIST PASSED
         BASR  R14,R15             PROCESS COMMAND STRING
         ICM   R0,15,DIVORG        IS DIV AREA PRESENT?
         BZR   R7                  NO, JUST BROWSE MEMBER
         ICM   R0,15,COUNT         ARE ANY RECORDS PRESENT?
         BZR   R7                  NO, JUST BROWSE MEMBER
         SR    R1,R1               REGISTER "FILE" DATA COMPLETE
         BCTR  R1,0                FLAG EOF WITH -1
         SR    R2,R2
         LA    R0,4                GET ENTRY CODE (RECORD STORE)
         L     R15,DIVADDR2        LOAD REVDIV ENTRY POINT
         BASR  R14,R15             CALL IT
         OI    STATUS13,$13_L      FLAG ALL DATA CACHED IN STORAGE
         ST    R2,COUNT            SHOW FROM FIRST LINE
         BR    R7                  RETURN TO CALLER
         DROP  R5                  REVHIST
         SPACE
HISTCMD  DC    CL14'TSO %REVUSPDS '
HISTHIS  DC    CL4'HIS '
HISTMAP  DC    CL4'MAP '
.HISTOK  ANOP
         SPACE 2
**********************************************************************
*                                                          *         *
*         PROCESS PCX (ZSOFT PAINTBRUSH) FILES             *  GP@P6  *
*                                                          *  11/99  *
**********************************************************************
         SPACE
*   THIS ROUTINE IS CALLED ONCE AFTER THE INITIAL SCREENFUL OF
*   RECORDS HAS BEEN READ.  IT DETERMINES IF THE DATA SET BEING
*   REVIEWED IS A ".PCX" OR "ZSOFT PAINTBRUSH" FILE.  IF THE TERMINAL
*   IS NOT SUITABLE TO DISPLAY GRAPHICS THEN NO ACTION IS TAKEN AND
*   "NORMAL" REVIEW PROCESSING CONTINUES.  IF THE DATA PROVES TO NOT
*   BE SUCH A FILE THEN CONTROL IS TRANSFERRED TO LOGIC WHICH CHECKS
*   FOR A ".BMP" OR "WINDOWS BITMAP" FILE.
*
*   IF IT IS, AND IS A TYPE THAT CAN BE HANDLED BY REVIEW (WHICH
*   PROBABLY MEANS IT WAS NOT WRITTEN BY A RECENT RELEASE OF
*   PAINTBRUSH) THEN THIS ROUTINE STORES THE PICTURE AS ONE BYTE PER
*   PICTURE ELEMENT (OR PIXEL OR PEL) IN AN ARRAY WHICH IS PROCESSED
*   LATER AT SCREEN-FORMAT TIME BY REVIMAGE OR REVNATV OR REVGDDM.
*
*   FOR BLACK-AND-WHITE THE BYTE VALUES ARE:
*          X'00' - BLACK
*          X'01' - WHITE
*
*   FOR COLOUR THE BYTE CONTAINS THE BINARY 3270 COLOUR NUMBER, WHICH
*   IS DERIVED FROM THE APPROPRIATE COLOUR PALETTE ENTRY.  THE HIGH
*   BITS OF THE RGB TRIPLETS ARE RETAINED AND CONVERTED TO 3270 GRB
*   FLAGS FOR THE PIXEL.  THUS, RGB VALUES OF 128 OR MORE TRIGGER THE
*   PRESENCE OF THAT COLOUR FOR THAT PIXEL ON THE TERMINAL.  IT IS
*   OBVIOUS THAT THIS PRODUCES A VERY COARSE COLOUR TRANSLATION.
         SPACE
*   PERFORM INITIAL VALIDATION
         SPACE
         USING PCXCHECK,R5
PCXCHECK DS    0H
         CLI   DATAKV+1,1          IS 'DATA' SPECIFIED?
         BE    FILLSCR             YES, SHOW RAW DATA, NOT PICTURE
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    FILLSCR             YES, SKIP PCX PROCESSING
         CLI   SCRNCOLS+3,80       IN 80-COLUMN DISPLAY MODE?
         BL    FILLSCR      (BNE)  NO, 3270 GRAPHICS IS NOT DEFINED
         TM    STATUS2,$2FAST      IS "FASTPATH" ACTIVE?
         BNO   PCXKOUNT            NO, KOUNT IS MAINTAINED
         L     R7,HOLDEND          POINT TO LAST RECORD DETAILS
         TM    DIRLEN(R7),X'80'    END-OF-FILE REACHED?
         L     R7,DIRNUM(,R7)      GET NUMBER OF RECORDS READ
         BNO   PCXRDCNT            NO END-OF-FILE YET
         BCTR  R7,0                DO NOT COUNT END-OF-FILE RECORD
PCXRDCNT MH    R7,RECSIZE+2        GET COUNT OF BYTES READ
         B     PCXSZTST            GO TEST SIZE OF FILE SO FAR
PCXKOUNT L     R7,KOUNT            GET COUNT OF BYTES READ
PCXSZTST LA    R1,130              HEADER LENGTH PLUS FUDGE FACTOR
         CLR   R1,R7               AT LEAST MINIMAL DATA PRESENT?
         BNL   FILLSCR             NO, NOT A PCX FILE
         L     R7,HOLDTOP          POINT TO FIRST RECORD DETAILS
         LM    R1,R2,DIRLEN(R7)    GET RECORD LENGTH AND ADDRESS
         LA    R0,4
         TM    TSTRECFM,X'40'      DOES THE RECORD START WITH AN RDW?
         BZ    *+8                 NO
         SR    R1,R0               YES
         AR    R2,R0               MAKE ADJUSTMENTS
         CH    R1,=H'80'           SENSIBLE RECORD LENGTH?
         BL    FILLSCR             NO, SKIP PCX PROCESSING
         SPACE
*   GENERAL REVIEW FILE PROCESSING STATUS IS SUITABLE FOR
*   ALLOWING THE ACTIVATION OF PICTURE IMAGE RENDERING
*   - NOW START LOOKING AT THE SUPPORTED PICTURE TYPES
         SPACE
         USING PCXHDR,R2
         CLI   PCXMFR,10           ZSOFT PCX FILE?
         BNE   BMPCHECK            NO, GO SEE IF IT IS A .BMP BITMAP
*                                  MAYBE, BUT NOT A BMP NOR GIF
         CLI   PCXMETHD,1          KNOWN ENCODING METHOD?
         BH    FILLSCR             NO, PROBABLY NOT A PCX FILE
         CLI   PCXRESV,0           EXPECTED ZERO BYTE?
         BNE   FILLSCR             NO, PROBABLY NOT A PCX FILE
         CLI   PCXNPLNS,1          SINGLE COLOUR PLANE?
         BE    PCXPLNOK            YES
         BL    FILLSCR             PROBABLY NOT A PCX FILE
         MVI   MSG,141             MULTIPLANE PICTURE DATA
         B     FILLSCR             SHOW FIRST PAGE OF FILE DATA
PCXPLNOK CLI   PCXBITPP,1          BLACK AND WHITE PICTURE?
         BE    PCXBPPOK            YES
         CLI   PCXBITPP,4          16-COLOUR PICTURE?
         BE    PCXBPPOK            YES
         CLI   PCXBITPP,8          256-COLOUR PICTURE?
         BE    PCXBPPOK            YES
         LA    R1,=CL40'"REVIEW" CANNOT INTERPRET PCX COLOR MODE'
         LA    R0,40
         TPUT  (1),(0),R
         SR    R0,R0
         IC    R0,PCXBITPP
         CVD   R0,DOUBLE
         MVC   DOUBLE(4),=X'40202120'
         ED    DOUBLE(4),DOUBLE+6
         MVC   DOUBLE+4(4),=CL4'-BIT'
         LA    R1,DOUBLE
         LA    R0,8
         TPUT  (1),(0),R
         B     FILLSCR             RETURN TO CALLER
PCXBPPOK TM    VECFLAGS,VCTR       VECTOR GRAPHICS AVAILABLE?
         BO    PCXGRFOK            YES, CAN RENDER PICTURE
         CLI   SYMSTGF,0           ANY LOADABLE SYMBOL CAPABILITY?
         BE    PCXPIXON            NO, CAN'T DO GRAPHICS
         CLI   PCXBITPP,1          BLACK AND WHITE PICTURE?
         BE    PCXGRFOK            YES, 3270 SINGLE-PLANE WILL DO
         CLI   SYMSTG3,0           3270 TRIPLE-PLANE AVAILABLE?
         BNE   PCXGRFOK            YES, CAN DO COLOUR PICTURES
PCXPIXON OI    STATUS17,$17PIX     FLAG 1 PIXEL PER CHARACTER CELL
         SPACE
*   PROCEED WITH PCX DATA PROCESSING
         SPACE
PCXGRFOK LA    R14,FILLSCR         PREPARE RETURN ADDRESS
         STM   R14,R12,12(R13)     SAVE REGISTERS
         SR    R7,R7
         IC    R7,PCXBITPP         GET BITS PER PIXEL
         ST    R7,PICOLRES         SAVE IT FOR DISPLAY ROUTINE
         ICM   R7,1,PCXBYTLN
         ICM   R7,2,PCXBYTLN+1     GET THE UNCOMPRESSED BYTES PER LINE
         LA    R1,7(,R7)
         SRL   R1,3
         SLL   R1,3                ROUND UP TO NEXT DOUBLEWORD
         LA    R0,@PCXWKLN(,R1)    GET THE WORKING STORAGE SIZE
         LR    R6,R0               COPY IT
         MVI   GETMNTRC,10         TRACK GETMAIN IN CASE OF FAILURE
         GETMAIN RC,LV=(0),LOC=(31,64)
         LTR   R15,R15             STORAGE ACQUIRED?
         BNZ   BITNOWRK            NO
         ST    R13,4(,R1)          YES, CHAIN SAVE AREAS
         ST    R1,8(,R13)
         LR    R13,R1
         USING @BITWORK,R13
         ST    R6,BITWKLEN         SAVE THE GETMAIN SIZE
         MVC   BITHDRWS,PCXHDR     COPY THE FILE HEADER
         DROP  R2                  PCXHDR
         USING PCXHDR,BITHDRWS
         ST    R7,BITBYTLN         DECODE BYTES PER LINE
         LA    R7,PCXSCNLN(R7)     POINT PAST DECODED SCANLINE AREA
         ST    R7,BITEOSCN         SAVE THE ADDRESS FOR COMPARISON
         LA    R0,4                DECODE 4 PICTURE BOUNDARY CO-ORDS
         LA    R15,PCXWINDW        POINT TO THE FIRST ONE
CO_ORDLP ICM   R7,1,0(R15)
         ICM   R7,2,1(R15)
         STH   R7,0(R15)
         LA    R15,2(,R15)         POINT TO NEXT CO-ORDINATE
         BCT   R0,CO_ORDLP
         LA    R6,1                GET UNCOMPRESSED PIXEL COUNT
         LR    R7,R6
         AH    R6,PCXXMAX
         AH    R7,PCXYMAX
         SH    R6,PCXXMIN
         SH    R7,PCXYMIN
         STM   R6,R7,X_Y_PELS      SAVE PICTURE DIMENSIONS
         ST    R7,BITLN2GO
         MR    R6,R6
         ST    R7,PICPELCT
         LA    R0,7(,R7)
         SRL   R0,3
         SLL   R0,3                ROUND TO DOUBLEWORD MULTIPLE
         ST    R0,PICSTGSZ
         MVI   GETMNTRC,11         TRACK GETMAIN IN CASE OF FAILURE
         GETMAIN RC,LV=(0),SP=17,LOC=(31,64)
         LTR   R15,R15             SUCCESS?
         BNZ   BITNOARY            NO
         ST    R1,HSEACTIV         SAVE ADDRESS FOR CLEAN-UP
         ST    R1,BITLDCSR         SAVE PIXEL LOAD CURSOR
         A     R1,PICPELCT         POINT PAST END OF PICTURE ARRAY
         ST    R1,PICENDAD         SAVE FOR DISPLAY ROUTINE
         MVI   PICCOLOR,X'F7'      START PICTURE DISPLAY IN NEUTRAL
         MVC   PCXPAL16,PCXCOLMP   COPY 16-COLOUR PALETTE
         SPACE
*   POSITION TO PICTURE DATA ENSURING HEADER IS READ
         SPACE
         MVI   BITRUNLN,0          PREPARE FOR USE
         L     R7,HOLDTOP          POINT TO FIRST RECORD DETAILS
         LM    R1,R2,DIRLEN(R7)    GET RECORD LENGTH AND ADDRESS
         LA    R0,4
         TM    TSTRECFM,X'40'      DOES THE RECORD START WITH AN RDW?
         BZ    *+8                 NO
         SR    R1,R0               YES
         AR    R2,R0               MAKE ADJUSTMENTS
         LA    R6,PCXSCNLN         POINT TO SCANLINE EXPANSION AREA
         LA    R8,PCXHDR(R1)       POINT PAST LOADED PART OF HEADER
         LA    R0,128              GET THE HEADER LENGTH
         AR    R2,R0               POINT PAST HEADER
         SR    R1,R0               ADJUST REMAINING LENGTH
         BP    LDPIXELS            FIRST RECORD HAS HEADER PLUS MORE
PCXHDRLP LPR   R15,R1              GET LENGTH OF REST OF HEADER
         BAS   R14,BMNXTREC        GET THE NEXT RECORD
         LR    R0,R15              COPY REMAINING HEADER LENGTH
         BCTR  R15,0               DECREMENT FOR EXECUTE
         LTR   R15,R15             WAS FIRST RECORD JUST COMPLETE HDR?
         BM    *+8                 YES, HAVE HDR BUT END OF 1ST RECORD
         EX    R15,BITHDRST        LOAD REST OF PCX 128-BYTE HEADER
         AR    R8,R1               PREPARE FOR (VERY) SHORT 2ND RECORD
         AR    R2,R0               POINT PAST HEADER
         SR    R1,R0               ADJUST REMAINING LENGTH
         BNP   PCXHDRLP            HANDLE EMBEDDED (VERY) SHORT RECORD
         SPACE
*   EXPAND THE DATA OF A PCX SCANLINE FROM THE FILE
         SPACE
LDPIXELS MVI   BITRUNLN+1,1        SET RUN-LENGTH COUNT TO ONE
         TM    0(R2),X'C0'         IS THIS A RUN-LENGTH COUNT?
         BNO   PELBYTOK            NO
         CLI   PCXMETHD,0          IS THIS FILE COMPRESSED?
         BE    PELBYTOK            NO
         MVC   BITRUNLN+1(1),0(R2) YES, COPY RUN-LENGTH COUNT
         NI    BITRUNLN+1,X'3F'    RESET FLAG BITS TO GET COUNT
         LA    R2,1(,R2)           POINT TO THE NEXT BYTE
         BCT   R1,PELBYTOK         ADJUST REMAINING BYTE COUNT
         BAS   R14,BMNXTREC        GET THE NEXT RECORD
PELBYTOK MVC   0(1,R6),0(R2)       LOAD DATA BYTE
         LH    R15,BITRUNLN        GET RUN-LENGTH
         LA    R0,2
         SR    R15,R0              GET REPETITION AND ALLOW FOR EXECUTE
         BM    *+8                 NO REPETITION FOR RUN-LENGTH OF 1
         EX    R15,PCXREPIT        PROPAGATE DATA BYTE
         AR    R15,R0              RESTORE RUN-LENGTH COUNT
         AR    R6,R15              POINT PAST LOADED DATA
         C     R6,BITEOSCN         SCANLINE FINISHED?
         BNL   SCANDALN            YES, HAVE NOW SCANNED A LINE
LDNEXTLN LA    R2,1(,R2)           POINT TO THE NEXT BYTE
         BCT   R1,LDPIXELS         ADJUST REMAINING BYTE COUNT
         BAS   R14,BMNXTREC        GET THE NEXT RECORD
         B     LDPIXELS            GOT THE NEXT RECORD
         SPACE
*   HANDLE FAILURE TO ACQUIRE WORKING STORAGE
         SPACE
BITNOWRK MVI   MSG,123             REQUEST ABORTED - STORAGE FULL
         XC    PICDTLS(PICDTLEN),PICDTLS   RESET PICTURE STATUS
         NI    STATUS17,255-$17PIX RESET PIXEL ZOOM-IN FLAG
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 RETURN TO LABEL 'FILLSCR'
         SPACE
*   HANDLE FAILURE TO ACQUIRE BITMAP ARRAY
         SPACE
BITNOARY MVI   MSG,123             REQUEST ABORTED - STORAGE FULL
         XC    PICDTLS(PICDTLEN),PICDTLS   RESET PICTURE STATUS
         NI    STATUS17,255-$17PIX RESET "ASCII ART" FLAG
         B     BIT_EXIT            GO FREE WORKING STORAGE
         SPACE
*   PROCURE NEXT FILE RECORD FOR PCX AND BMP PROCESSING
         SPACE
BMNXTREC EQU   *                   REVIEW2 ADDRESSING MODE ROUTINE
         C     R7,HOLDEND          END OF LAST CACHED RECORD?
         BE    BMGETREC            YES, HAVE TO READ FROM FILE
         L     R7,DIRNXT(,R7)      NO, POINT TO NEXT RECORD
BMGOTREC LM    R1,R2,DIRLEN(R7)    GET RECORD LENGTH AND ADDRESS
         LTR   R1,R1               WAS THERE ANOTHER RECORD?
         BM    BMENDREC            NO, END OF DATA
         BZ    BMNXTREC            DISCARD NULL RECORD
         TM    TSTRECFM,X'40'      DOES THE RECORD START WITH AN RDW?
         BZR   R14                 NO, RETURN WITH RECORD
         SH    R1,HW4              YES
         AH    R2,HW4              MAKE ADJUSTMENTS
         BR    R14                 RETURN WITH RECORD
BMENDREC CLI   BITHDRWS,10         PCX FILE?
         BE    ENDOFPCX            YES, PCX END-OF-FILE
         B     BITCOLRD            NO, BMP END-OF-FILE
*                                  FILE I/O NEEDED FOR MORE DATA
BMGETREC ST    R14,BITSAVER        SAVE THE RETURN ADDRESS
         MVC   DOWNAMT,FW1         NEED TO READ ANOTHER RECORD
         STM   R5,R8,BITSECSV      SAVE LOCAL STATUS
         BAS   R14,DOWNER          RETURNS WITH NEW HOLDEND IN R7
         LM    R5,R6,BITSECSV      RESTORE LOCAL STATUS
         L     R8,BITSECSV+12
         L     R14,BITSAVER
         B     BMGOTREC
         SPACE
*   LOAD UNCOMPRESSED PCX SCANLINE DATA INTO PICTURE ARRAY
         SPACE
SCANDALN STM   R1,R2,BITSECSV      SAVE RECORD PROCESSING STATUS
         L     R8,BITLDCSR         LOAD PICTURE ARRAY CURSOR
         LA    R6,PCXSCNLN         POINT TO SCANLINE EXPANSION AREA
         L     R0,X_PELS           GET PIXEL COUNT PER SCANLINE
         SR    R14,R14             CLEAR FOR DIVIDE
         LA    R15,32              GET BITS PER WORD
         L     R1,PICOLRES         GET BITS PER PEL
         DR    R14,R1              GET PELS PER WORD
         ST    R15,DOUBLE          SAVE PELS PER WORD
ARRAYLP1 L     R2,DOUBLE           LOAD PELS PER WORD
         L     R15,0(,R6)          LOAD SOME PIXEL DATA
         LA    R6,4(,R6)           POINT TO NEXT DATA TO LOAD
ARRAYLP2 SR    R14,R14             CLEAR FOR SHIFT
         SLDL  R14,0(R1)           GET PIXEL BITS FOR AN ARRAY ELEMENT
         STC   R14,0(,R8)          SAVE IT INTO THE ARRAY
         LA    R8,1(,R8)           POINT TO NEXT ARRAY ELEMENT
         BCT   R0,ARRAYNX2         DECREMENT REMAINING WIDTH
         B     SCANXTLN            PREPARE TO PROCESS NEXT SCANLINE
ARRAYNX2 BCT   R2,ARRAYLP2         PROCESS NEXT PIXEL BYTE
         B     ARRAYLP1            GET ANOTHER POET (WORD'S WORTH)
SCANXTLN ST    R8,BITLDCSR         SAVE PIXEL LOAD CURSOR
         LA    R6,PCXSCNLN         POINT TO SCANLINE EXPANSION AREA
         LM    R1,R2,BITSECSV      RESTORE RECORD PROCESSING STATUS
         L     R0,BITLN2GO         DECREMENT REMAINING SCANLINE COUNT
         BCTR  R0,0
         ST    R0,BITLN2GO
         LTR   R0,R0               NEED MORE SCANLINES?
         BP    LDNEXTLN            YES, EXPAND NEXT SCANLINE
         CLI   PCXBITPP,8          256-COLOUR PICTURE?
         BNE   ENDOFPCX            NO, SKIP 256-COLOUR PALETTE SEARCH
         SPACE
*   SEARCH FOR PCX 8-BIT COLOUR PALETTE
         SPACE
         LA    R8,PCXPALET         POINT TO PALETTE HOLD AREA
         LA    R6,768(,R8)         POINT PAST PALETTE HOLD AREA
PCXCLOOP LA    R2,1(,R2)           POINT TO THE NEXT BYTE
         BCT   R1,PCXCTEST         ADJUST REMAINING BYTE COUNT
         BAS   R14,BMNXTREC        GET THE NEXT RECORD
PCXCTEST CLI   0(R2),12            256-COLOUR PALETTE FLAG?
         BNE   PCXCLOOP            NO, BUT KEEP LOOKING FOR IT
         SPACE
*   LOAD THE PCX 8-BIT COLOUR PALETTE INTO WORKING STORAGE
         SPACE
PCXPALLP LA    R2,1(,R2)           POINT TO THE NEXT BYTE
         BCT   R1,PCXLDPAL         ADJUST REMAINING BYTE COUNT
         BAS   R14,BMNXTREC        GET THE NEXT RECORD
PCXLDPAL MVC   0(1,R8),0(R2)       COPY A PALETTE BYTE
         LA    R8,1(,R8)           INCREMENT HOLD AREA CURSOR
         CR    R8,R6               PALETTE LOAD NOW COMPLETE?
         BL    PCXPALLP            NO, KEEP LOADING COLOUR PALETTE
         SPACE
*   ALL PCX FILE DATA HAS NOW BEEN READ
         SPACE
ENDOFPCX CLI   PCXBITPP,1          BLACK-AND-WHITE PICTURE?
         BE    BITCOLRD            YES, ASSUME PALETTE NOT NEEDED
         SPACE
*   CONVERT PICTURE ARRAY CONTENTS TO ACTUAL COLOUR DATA
         SPACE
         SR    R0,R0               CLEAR BIT ACCUMULATOR
         LA    R1,3                GET BYTE COUNT PER PALETTE COLOUR
         LA    R6,PCXPALET         POINT TO COLOUR PALETTE
         L     R7,PICPELCT         GET THE NUMBER OF PIXELS
         L     R8,HSEACTIV         POINT TO PIXEL BYTE ARRAY STORAGE
PCXCLRLP SR    R15,R15             CLEAR FOR INSERT
         IC    R15,0(,R8)          LOAD PALETTE COLOUR INDEX
         MR    R14,R1              CONVERT TO PALETTE STORAGE INDEX
         LA    R15,0(R15,R6)       POINT TO PALETTE ENTRY
         IC    R0,1(,R15)          LOAD GREEN LEVEL
         SLL   R0,1                KEEP HIGH BIT
         IC    R0,0(,R15)          LOAD RED LEVEL
         SLL   R0,1                KEEP HIGH BIT
         IC    R0,2(,R15)          LOAD BLUE LEVEL
         SRL   R0,7                KEEP HIGH BITS
         STC   R0,0(,R8)           OVERLAY INDEX WITH 3270 GRB FLAGS
         TM    0(R8),X'07'         BLACK OR WHITE?
         BNM   *+8                 YES
         OI    PICFLAGS,PICNBW     NO
         LA    R8,1(,R8)           POINT TO NEXT PIXEL ARRAY ELEMENT
         BCT   R7,PCXCLRLP         CONTINUE CONVERSION TO 3270 COLOUR
         SPACE
BITCOLRD BAS   R14,BIT_POSI        SET PICTURE LOCATION ON SCREEN
         LTR   R15,R15             ANY TROUBLE?
         BNZ   BITNOARY            YES, GO CALL THE WHOLE THING OFF
         SPACE
*   FREE WORKING STORAGE AND EXIT
         SPACE
BIT_EXIT L     R0,BITWKLEN         GET WORK AREA LENGTH
         LR    R1,R13              GET WORK AREA ADDRESS
         DROP  R13                 @BITWORK
         L     R13,4(,R13)         POINT TO CALLER'S SAVE AREA
         OI    11(R13),X'01'       INVALIDATE FORWARD POINTER
         FREEMAIN RU,LV=(0),A=(1)  FREE LOCAL WORK AREA STORAGE
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER
         SPACE
BITHDRST MVC   0(0,R8),0(R2)       <<< EXECUTED >>>
PCXREPIT MVC   1(0,R6),0(R6)       <<< EXECUTED >>>
         SPACE
*   DETERMINE PICTURE LOCATION ON THE TSO TERMINAL SCREEN
         SPACE
BIT_POSI STM   R14,R12,12(R13)     SAVE REGISTERS
         TM    STATUS17,$17PIX     SHOWING 1 PIXEL PER COLUMN?
         BO    BIT_PIX1            YES
         SR    R0,R0               FIND PICTURE DISPLAY POSITION
         L     R1,X_PELS           LOAD PICTURE HORIZONTAL PEL COUNT
         LA    R15,9               GET PELS PER BYTE WIDTH
         CLI   MATRIXSZ,0          HAVE VALUE FROM QUERY?
         BE    *+8                 NO, ASSUME FORMAT-1 SYMBOLS
         IC    R15,MATRIXSZ        YES, USE IT
         AR    R1,R15
         BCTR  R1,0                ROUND UP TO NEXT INTEGRAL BYTE
         DR    R0,R15              GET PICTURE WIDTH IN BYTES
         STH   R1,X_BYTES          SAVE IT
         L     R0,SCRNCOLS         GET SCREEN COLUMN COUNT
         SR    R0,R1               GET COLUMN COUNT UNUSED BY PICTURE
         SRA   R0,1                HALVE IT
         BNP   *+8                 LEAVE OFFSET 0 IF PCX NOT NARROWER
         STH   R0,X_OFFSET         SAVE OFFSET FOR DISPLAY ROUTINE
         L     R1,Y_PELS           LOAD PICTURE VERTICAL PEL COUNT
         LA    R15,16              GET PELS PER BYTE HEIGHT
         CLI   MATRIXSZ+1,0        HAVE VALUE FROM QUERY?
         BE    *+8                 NO, ASSUME FORMAT-1 SYMBOLS
         IC    R15,MATRIXSZ+1      YES, USE IT
         SR    R0,R0
         AR    R1,R15
         BCTR  R1,0                ROUND UP TO NEXT INTEGRAL BYTE
         DR    R0,R15              GET PICTURE HEIGHT IN BYTES
         STH   R1,Y_BYTES          SAVE IT
         LA    R2,1
         AH    R2,PAGESIZE         GET MAXIMUM PICTURE ROW COUNT
         SR    R2,R1               GET ROW COUNT UNUSED BY PICTURE
         SRA   R2,1                HALVE IT
         BNM   BIT_Y_OK            PICTURE NOT TOO TALL
         SR    R2,R2               LEAVE OFFSET 0 IF PCX NOT SHORTER
BIT_Y_OK LA    R2,3(,R2)           SHOW HEADING, INPUT FIELDS, ETC
         STH   R2,Y_OFFSET         SAVE OFFSET FOR DISPLAY ROUTINE
         LH    R1,X_BYTES
         MH    R1,Y_BYTES          GET TOTAL PICTURE LOCATION COUNT
         ST    R1,X_Y_SYMS         SAVE NEEDED SYMBOL COUNT
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         SR    R15,R15             FLAG SUCCESS
         BR    R14                 RETURN TO CALLER
         SPACE
*   LOAD PICTURE INTO DIV
         SPACE
         USING @BITWORK,R13
BIT_PIX1 LA    R1,BITSAVE2         POINT TO NEW SAVE AREA
         ST    R13,4(,R1)          CHAIN SAVE AREAS
         ST    R1,8(,R13)
         DROP  R13                 @BITWORK
         LR    R13,R1              START USING THE NEW ONE
         L     R8,HSEACTIV         POINT TO PIXEL BYTE ARRAY STORAGE
         LA    R2,BIT_TAB8         POINT TO COLOUR TRANSLATE TABLE
         TM    PICFLAGS,PICNBW     BLACK-AND-WHITE PICTURE?
         BO    *+8                 NO, HAVE CORRECT TRANSLATE TABLE
         LA    R2,BIT_TAB2         YES, SWITCH TRANSLATE TABLE
         L     R1,PICPELCT         GET PICTURE PIXEL COUNT
         LA    R0,256
BIT_PIX2 CR    R1,R0               LESS THAN 256 BYTES TO GO?
         BL    BIT_PIX3            YES
         TR    0(256,R8),0(R2)     TRANSLATE 256 BYTES
         AR    R8,R0               POINT PAST TRANSLATED DATA
         SR    R1,R0               ADJUST REMAINING PIXEL COUNT
         BP    BIT_PIX2            GO PROCESS NEXT CHUNK
         B     BIT_PIX4            EXACT MULTIPLE OF 256 PIXELS
BIT_PIX3 BCTR  R1,0                DECREMENT FOR EXECUTE
         EX    R1,BIT_TRAN         TRANSLATE REMAINING PIXELS
BIT_PIX4 LA    R0,16               GET ENTRY CODE (FREEMAIN)
         L     R15,DIVADDR2        LOAD REVDIV ENTRY POINT
         BASR  R14,R15             ENSURE NO PRE-EXISTING DIV AREA
         SR    R0,R0               GET "DIV" ENTRY CODE (GETMAIN)
         ST    R0,DIVSZREQ         CLEAR REQUEST SIZE
         L     R15,DIVADDR2        LOAD "DIV" ENTRY POINT
         BASR  R14,R15             CALL REVDIV
         LTR   R15,R15             SUCCESS?
         BZ    BIT_PIX5            YES
         L     R1,HSEACTIV         POINT TO PIXEL BYTE ARRAY STORAGE
         L     R0,PICSTGSZ         GET ITS SIZE AND FREE IT
         FREEMAIN RU,LV=(0),A=(1),SP=17
         XC    HSEACTIV,HSEACTIV   RESET STORAGE POINTER
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         LA    R15,8               FLAG FAILURE
         BR    R14                 RETURN TO CALLER
         SPACE
BIT_PIX5 ST    R15,COUNT           RESET FOR FIRST RECORD
         ST    R15,KOUNTHI         RESET FOR FIRST RECORD
         ST    R15,KOUNT           RESET FOR FIRST RECORD
         ST    R15,TTR             DATA NOT RELATED TO DASD LOCATION
         L     R2,HSEACTIV         POINT TO PIXEL BYTE ARRAY STORAGE
         L     R8,Y_PELS           GET PICTURE HEIGHT
         L     R1,X_PELS           GET PICTURE WIDTH
BIT_PIX6 LA    R0,4                GET ENTRY CODE (RECORD STORE)
         L     R15,DIVADDR2        LOAD REVDIV ENTRY POINT
         BASR  R14,R15             CALL IT
         ALR   R2,R1               POINT PAST LOADED DATA
         LA    R0,1
         A     R0,COUNT            INCREMENT RECORD NUMBER
         ST    R0,COUNT
         LR    R0,R1
         A     R0,KOUNT            ADJUST DATA SIZE
         ST    R0,KOUNT
         BCT   R8,BIT_PIX6         LOAD ALL THE SCANLINES
         SR    R1,R1
         SR    R2,R2
         BCTR  R1,0                RECORD END-OF-DATA
         LA    R0,4                GET ENTRY CODE (RECORD STORE)
         L     R15,DIVADDR2        LOAD REVDIV ENTRY POINT
         BASR  R14,R15             CALL IT
         MVI   CLOSED,X'80'        CLOSE THE DATA SET
         CLOSE (DYNDCBW),MF=(E,CLOSED)
         NI    STATUS,255-STOPEN-STABEND
         OI    STATUS13,$13_L      FLAG NEW DATA SOURCE
         MVC   RECSIZE,X_PELS      RECORD LENGTH = PICTURE WIDTH
         MVC   KOUNT,PICPELCT      DATA BYTE COUNT = PIXEL COUNT
         MVI   TSTRECFM,X'80'      CLAIM TO HAVE FIXED-LENGTH RECORDS
         L     R1,HSEACTIV         POINT TO PIXEL BYTE ARRAY STORAGE
         L     R0,PICSTGSZ         GET ITS SIZE AND FREE IT
         FREEMAIN RU,LV=(0),A=(1),SP=17
         XC    HSEACTIV,HSEACTIV   RESET STORAGE POINTER
         XC    PICDTLS(PICDTLEN),PICDTLS   RESET PICTURE STATUS
         SR    R15,R15             GET ZERO
         ST    R15,FNDNUM          RESET LAST-FOUND RECORD NUMBER
         ST    R15,FNDOFF          RESET LAST-FOUND OFFSET
         ST    R15,COUNT           SHOW FROM TOP
         ST    R15,OFFSET          SHOW FROM LEFT EDGE
         BAS   R14,FILLHOLD        GET FIRST SCREENFUL OF PICTURE
         L     R13,4(,R13)         POINT TO CALLER'S SAVE AREA
         OI    11(R13),X'01'       INVALIDATE FORWARD POINTER
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         SR    R15,R15             FLAG SUCCESS
         BR    R14                 RETURN TO CALLER
         SPACE
BIT_TRAN TR    0(0,R8),0(R2)       <<< EXECUTED >>>
BIT_TAB2 DC    X'0027272727272727' MONOCHROME TRANSLATE TABLE
BIT_TAB8 DC    X'0021222324252627' COLOUR TRANSLATE TABLE
         SPACE 2
**********************************************************************
*                                                          *         *
*         PROCESS BMP (OS/2 OR WINDOWS BITMAP) FILES       *  GP@P6  *
*                                                          *  12/06  *
**********************************************************************
         SPACE
*   THIS ROUTINE IS CALLED ONCE AFTER THE INITIAL SCREENFUL OF
*   RECORDS HAS BEEN READ IF IT HAS BEEN DETERMINED THAT PICTURE
*   PROCESSING IS TO BE DONE IF POSSIBLE, AND THAT THE DATA DOES
*   NOT REPRESENT A ".PCX" OR "ZSOFT PAINTBRUSH" FILE.
*
*   IT DETERMINES IF THE DATA SET BEING REVIEWED IS A ".BMP" OR
*   "WINDOWS BITMAP" FILE.  IF NOT THEN NO ACTION IS TAKEN AND
*   "NORMAL" REVIEW PROCESSING CONTINUES.
         SPACE
*   PERFORM INITIAL VALIDATION
         SPACE
BMPCHECK DS    0H
         USING BMPHDR,R2
         CLC   ASCIIBM,BMPTYPE     BMP FILE?
         BNE   GIFCHECK            NO, GO SEE IF IT IS A GIF FILE
         ICM   R0,12,BOFFBITS+2    SENSIBLE DATA START OFFSET?
         BNZ   FILLSCR             NO, PROBABLY NOT A BMP
         ICM   R0,2,BOFFBITS+1
         ICM   R0,1,BOFFBITS       GET OFFSET TO BITMAP PIXEL DATA
         ICM   R1,8,BMPSIZE+3
         ICM   R1,4,BMPSIZE+2
         ICM   R1,2,BMPSIZE+1
         ICM   R1,1,BMPSIZE        GET FILE DATA SIZE
*               SIGNED COMPARE MEANS SKIP FILES LARGER THAN 2GB - GOOD
         CR    R1,R0               SIZE BIGGER THAN START OFFSET?
         BNH   FILLSCR             NO, PROBABLY NOT A BMP
         ICM   R0,15,BMPRSV1       RSV1 AND RSV2 ZERO?
         BNZ   FILLSCR             NO, PROBABLY NOT A BMP
         ICM   R0,7,BISIZE+1       SENSIBLE HEADER LENGTH?
         BNZ   FILLSCR             NO, PROBABLY NOT A BMP
         MVC   DOUBLE,B2WIDTH      COPY OS/2 V1 BMP INFO HEADER
         SR    R1,R1               INDICATE NO COMPRESSION
         LA    R15,2048            GET THE REVIEW HEIGHT LIMIT
         CLI   BISIZE,12           OS/2 V1 FORMAT?
         BE    BMPSIZOK            YES
         CLI   BISIZE,40           EXPECTED DATA PRESENT?
         BL    FILLSCR             NO, PROBABLY NOT A BMP
         ICM   R0,3,BIWIDTH+2      SENSIBLE PIXEL WIDTH?
         BNZ   FILLSCR             NO, REVIEW USES SIGNED HALFWORDS
*                                  TO COMBINE THE PROCESSING OF
*                                  BOTH INFO HEADER FORMATS
         ICM   R0,8,BIHEIGHT+3
         ICM   R0,4,BIHEIGHT+2
         ICM   R0,2,BIHEIGHT+1
         ICM   R0,1,BIHEIGHT
         LPR   R0,R0               GET MAGNITUDE OF HEIGHT
         CLR   R0,R15
         BH    FILLSCR             HEIGHT IS TOO BIG FOR REVIEW
BMPPOSHT MVC   DOUBLE+2(2),BIHEIGHT  COPY SIGNED 16-BIT HEIGHT
         MVC   DOUBLE+4(4),BIPLANES  COPY BIPLANES AND BIBITCNT
         ICM   R1,8,BICMPRSN+3
         ICM   R1,4,BICMPRSN+2
         ICM   R1,2,BICMPRSN+1
         ICM   R1,1,BICMPRSN       LOAD COMPRESSION METHOD INDICATOR
*
*               DOUBLE NOW CONTAINS 4 INTEL-FORMAT NUMBERS:
*                                  +0 - WIDTH
*                                  +2 - HEIGHT
*                                  +4 - PLANES
*                                  +6 - BITS/PIXEL
*
*    BEFORE LOOKING AT THE COMPRESSION METHOD, THE DIMENSION
*    VALIDITY TESTS WILL BE COMPLETED SO THAT VALUES OUTSIDE
*    THE RANGE ACCEPTABLE TO REVIEW WILL BE REJECTED WITHOUT
*    COMMENT.  IN THE PROCESS, THE WIDTH AND HEIGHT HALFWORDS
*    IN DOUBLE WILL BE CONVERTED FROM INTEL TO NATIVE FORMAT.
*
*
BMPSIZOK ICM   R0,3,DOUBLE+2       IS HEIGHT ZERO?
         BZ    FILLSCR             YES, PROBABLY NOT A BMP
         ICM   R0,3,DOUBLE         IS WIDTH ZERO?
         BZ    FILLSCR             YES, PROBABLY NOT A BMP
         TM    DOUBLE+1,X'80'      IS WIDTH SIGN BIT ON?
         BO    FILLSCR             YES, TOO WIDE FOR REVIEW
         CLI   DOUBLE+5,0          SENSIBLE NUMBER OF PLANES?
         BNE   FILLSCR             NO, PROBABLY NOT A BMP
         CLI   DOUBLE+7,0          SENSIBLE NUMBER OF BITS/PIXEL?
         BNE   FILLSCR             NO, PROBABLY NOT A BMP
         ICM   R0,8,DOUBLE+1       GET WIDTH HI BYTE
         ICM   R0,4,DOUBLE         GET WIDTH LO BYTE
         ICM   R0,2,DOUBLE+3       GET HEIGHT HI BYTE
         ICM   R0,1,DOUBLE+2       GET HEIGHT LO BYTE
         ST    R0,DOUBLE           SAVE IN NATIVE FORMAT
         LH    R0,DOUBLE+2         GET HEIGHT
         LPR   R0,R0               GET ITS ABSOLUTE VALUE
         CR    R0,R15              DOES HEIGHT EXCEED 2048 PIXELS?
         BH    FILLSCR             YES, TOO TALL AN ORDER FOR REVIEW
*
*    NOW LOOK AT THE COMPRESSION METHOD:
*
**       LTR   R1,R1               UNCOMPRESSED?  (BI_RGB?)
**       BZ    BMPCMPOK            YES, CONTINUE
         LA    R0,BI_BITFIELDS     GET HIGHEST COMPRESSION SUPPORTED
         CLR   R1,R0               ANYTHING BEYOND OUR KNOWLEDGE?
         BNH   BMPCMPOK            NO, PROCEED
         MVI   MSG,140             UNSUPPORTED COMPRESSSION TYPE
         B     FILLSCR             SHOW FIRST PAGE OF FILE DATA
BMPCMPOK CLI   DOUBLE+4,1          SINGLE COLOUR PLANE?
         BE    BMPPLNOK            YES
         BL    FILLSCR             PROBABLY NOT A BMP FILE
         MVI   MSG,141             MULTIPLANE PICTURE DATA
         B     FILLSCR             SHOW FIRST PAGE OF FILE DATA
BMPPLNOK CLI   DOUBLE+6,1          BLACK AND WHITE PICTURE?
         BE    BMPBPPOK            YES
         CLI   DOUBLE+6,4          16-COLOUR PICTURE?
         BE    BMPBPPOK            YES
         CLI   DOUBLE+6,8          256-COLOUR PICTURE?
         BE    BMPBPPOK            YES
         CLI   DOUBLE+6,16         2 BYTES PER PIXEL?
         BE    BMPBPPOK            YES
         CLI   DOUBLE+6,24         256 SHADES FOR EACH PRIMARY?
         BE    BMPBPPOK            YES
         CLI   DOUBLE+6,32         256 SHADES FOR EACH PRIMARY?
         BE    BMPBPPOK            YES
         LA    R1,=CL40'"REVIEW" CANNOT INTERPRET BMP COLOR MODE'
         LA    R0,40
         TPUT  (1),(0),R
         SR    R0,R0
         IC    R0,DOUBLE+6
         CVD   R0,DOUBLE
         MVC   DOUBLE(4),=X'40202120'
         ED    DOUBLE(4),DOUBLE+6
         MVC   DOUBLE+4(4),=CL4'-BIT'
         LA    R1,DOUBLE
         LA    R0,8
         TPUT  (1),(0),R
         B     FILLSCR             RETURN TO CALLER
BMPBPPOK TM    VECFLAGS,VCTR       VECTOR GRAPHICS AVAILABLE?
         BO    BMPGRFOK            YES, CAN RENDER PICTURE
         CLI   SYMSTGF,0           ANY LOADABLE SYMBOL CAPABILITY?
         BE    BMPPIXON            NO, CAN'T DO GRAPHICS
         CLI   DOUBLE+6,1          BLACK AND WHITE PICTURE?
         BE    BMPGRFOK            YES, 3270 SINGLE-PLANE WILL DO
         CLI   SYMSTG3,0           3270 TRIPLE-PLANE AVAILABLE?
         BNE   BMPGRFOK            YES, CAN DO COLOUR PICTURES
BMPPIXON OI    STATUS17,$17PIX     FLAG 1 PIXEL PER CHARACTER CELL
         SPACE
*   PROCEED WITH BMP DATA PROCESSING
         SPACE
BMPGRFOK LA    R14,FILLSCR         PREPARE RETURN ADDRESS
         STM   R14,R12,12(R13)     SAVE REGISTERS
         SR    R7,R7
         IC    R7,DOUBLE+6         GET BITS PER PIXEL
         ST    R7,PICOLRES         SAVE IT FOR DISPLAY ROUTINE
         LH    R6,DOUBLE           GET POSITIVE WIDTH IN PIXELS
         LH    R7,DOUBLE+2         GET SIGNED HEIGHT IN PIXELS
         LPR   R7,R7               GET ABSOLUTE VALUE OF HEIGHT
         STM   R6,R7,X_Y_PELS      SAVE PICTURE DIMENSIONS
         MR    R6,R6
         ST    R7,PICPELCT
         L     R6,PICOLRES         GET BITS PER PIXEL
         L     R7,X_PELS           GET WIDTH IN PIXELS
         MR    R6,R6               GET WIDTH IN BITS
         LA    R7,31(,R7)
         SRL   R7,5                GET WIDTH IN FULLWORDS (BMP RULE)
         SLL   R7,2                GET WIDTH IN BYTES
         LA    R1,7(,R7)
         SRL   R1,3
         SLL   R1,3                ROUND UP TO NEXT DOUBLEWORD
         LA    R0,$BMPWKLN(,R1)    GET THE WORKING STORAGE SIZE
         LR    R6,R0               COPY IT
         MVI   GETMNTRC,12         TRACK GETMAIN IN CASE OF FAILURE
         GETMAIN RC,LV=(0),LOC=(31,64)
         LTR   R15,R15             STORAGE ACQUIRED?
         BNZ   BITNOWRK            NO
         ST    R13,4(,R1)          YES, CHAIN SAVE AREAS
         ST    R1,8(,R13)
         LR    R13,R1
         USING @BITWORK,R13
         ST    R6,BITWKLEN         SAVE THE GETMAIN SIZE
         LR    R1,R6               COPY THE GETMAIN SIZE
         LA    R0,BITLDCSR-@BITWORK
         SR    R1,R0               GET LENGTH TO CLEAR
         LA    R0,BITLDCSR         POINT TO START OF AREA TO CLEAR
         SR    R15,R15             CLEAR PAD AND SOURCE LENGTH
         MVCL  R0,R14              CLEAR MOST OF WORKING STORAGE
         BCTR  R15,0               GET HIGH VALUES
         STCM  R15,15,BMPCLRTB+3   COMPLETE BLACK/WHITE DEFAULTS
         MVC   BMPHDRWS,BMPHDR     COPY THE FILE HEADER
         DROP  R2                  BMPHDR
         USING BMPHDR,BMPHDRWS
         CLI   BISIZE,12           SHORT FORMAT OF HEADER?
         BNE   BMPHDROK            NO, LEAVE HEADER CONTENTS
         XC    BISIZE+12(28),BISIZE+12 CLEAR ABSENT INDICATORS
         MVC   BIPLANES(4),DOUBLE+4
BMPHDROK LH    R0,DOUBLE           GET WIDTH - ALWAYS POSITIVE
         LH    R1,DOUBLE+2         GET HEIGHT - MAY BE NEGATIVE
         STCM  R1,15,BIHEIGHT      SAVE IT IN NATIVE FORMAT
         LTR   R1,R1               IS HEIGHT NEGATIVE?
         BNM   BMPDIMOK            NO, BOTTOM-UP
         LNR   R0,R0               YES, TOP-DOWN, MAKE WIDTH NEGATIVE
BMPDIMOK STCM  R0,15,BIWIDTH       SAVE LOAD CURSOR ADJUSTMENT VALUE
         SPACE
*
*   NOW LOCAL STORAGE HAS A COPY OF THE BMPHDR STRUCTURE WHICH HAS
*   BEEN "NORMALIZED" FOR FUTURE REFERENCE.  FOR THE LONGER VERSION
*   WHERE BISIZE IS 40 (AT LEAST, ALTHOUGH NO LARGER SIZES HAVE EVER
*   BEEN DETECTED) THE HEADER IS BASICALLY AS IS IN THE FILE.  FOR
*   THE SHORTER VERSION WHERE BISIZE IS 12, THE MISSING DATA HAS
*   BEEN ZEROED (AND SO CAN BE RELIABLY EXAMINED) AND B2PLANES HAS
*   BEEN COPIED TO BIPLANES, AND B2BITCNT HAS BEEN COPIED TO BIBITCNT,
*   THEREBY ALLOWING THOSE ITEMS TO BE RELIABLY REFERENCED ALSO.
*
*   IN BOTH CASES, BIWIDTH AND BIHEIGHT ARE SIGNED FULLWORDS IN
*   NATIVE FORMAT CONTAINING THE IMAGE DIMENSIONS IN PIXELS.
*
*   THE WIDTH IN BIWIDTH HAS A MAGNITUDE LESS THAN 32768.
*   THERE IS SOME FACILITY FOR LEFT/RIGHT SCROLLING - IF LRECL IS
*   LONG ENOUGH - SO PICTURE DATA WIDER THAN THE SCREEN CAN STILL
*   BE VIEWED IN MOST CASES, ESPECIALLY IF 'HEX ON' IS USED.
*
*   THE HEIGHT IN BIHEIGHT HAS A MAGNITUDE NOT EXCEEEDING 2048
*   BECAUSE THERE IS NO WAY TO VIEW DATA BELOW THE BOTTOM OF THE
*   SCREEN AS THERE IS NO FACILITY TO VERTICALLY SCROLL THE IMAGE
*   IN REVIEW.
*
*   BMP IMAGE DATA IS NORMALLY BOTTOM-UP.  IF BIHEIGHT IS NEGATIVE
*   THEN THIS BMP PIXEL DATA NEEDS TO BE LOADED TOP-BOWN, AS IS
*   NORMALLY THE CASE FOR MOST OTHER BITMAP IMAGE FORMATS.
*
*   IF BIHEIGHT IS NEGATIVE THEN BIWIDTH IS MADE NEGATIVE SO THAT
*   IT CAN ALWAYS BE USED TO ADJUST THE SCANLINE LOAD CURSOR.
*
*   X_PELS AND Y_PELS SHOULD BE USED TO REFERENCE THE (POSITIVE)
*   IMAGE DIMENSIONS INDEPENDENT OF THE BITMAP HEADER FORMAT.
*
         SPACE
         ST    R7,BITBYTLN         SAVE FILE BYTES PER LINE
         LA    R0,7
         A     R0,PICPELCT
         SRL   R0,3
         SLL   R0,3                ROUND TO DOUBLEWORD MULTIPLE
         ST    R0,PICSTGSZ
         MVI   GETMNTRC,13         TRACK GETMAIN IN CASE OF FAILURE
         GETMAIN RC,LV=(0),SP=17,LOC=(31,64)
         LTR   R15,R15             SUCCESS?
         BNZ   BITNOARY            NO
         ST    R1,HSEACTIV         SAVE ADDRESS FOR CLEAN-UP
         LR    R7,R1               COPY THE FIRST LINE ADDRESS
         S     R7,X_PELS           POINT TO FAKE LINE BEFORE IT
         ST    R7,BITLDCSR         SET TOP-DOWN LOAD CURSOR
         A     R1,PICPELCT         POINT PAST END OF PICTURE ARRAY
         ST    R1,PICENDAD         SAVE FOR DISPLAY ROUTINE
         TM    BIHEIGHT,X'80'      LOADING TOP-DOWN?
         BO    *+8                 YES, BECAUSE HEIGHT IS NEGATIVE
         ST    R1,BITLDCSR         SET BOTTOM-UP LOAD CURSOR
         MVI   PICCOLOR,X'F7'      START PICTURE DISPLAY IN NEUTRAL
         SPACE
*   ENSURE BMP FILE AND PICTURE INFORMATION HEADERS HAVE BEEN READ
         SPACE
         SR    R7,R7               (REALLY JUST FOR BISIZE >> 40)
         IC    R7,BISIZE           GET BMP FILE HEADER SIZE
         LA    R0,BISIZE-BMPHDR(,R7)   AND TOTAL HEADER SIZE
         L     R7,HOLDTOP          POINT TO FIRST RECORD DETAILS
         LM    R1,R2,DIRLEN(R7)    GET RECORD LENGTH AND ADDRESS
         LA    R14,4
         TM    TSTRECFM,X'40'      DOES THE RECORD START WITH AN RDW?
         BZ    *+8                 NO
         SR    R1,R14              YES
         AR    R2,R14              MAKE ADJUSTMENTS
         LA    R6,BMPSCNLN         POINT TO SCANLINE EXPANSION AREA
         LA    R8,BMPHDR(R1)       POINT PAST LOADED PART OF HEADER
         AR    R2,R0               POINT PAST HEADER
         SR    R1,R0               ADJUST REMAINING LENGTH
         BP    LDCLRTAB            FIRST RECORD HAS HEADER PLUS MORE
BMPHDRLP LPR   R15,R1              GET LENGTH OF REST OF HEADER
         BAS   R14,BMNXTREC        GET THE NEXT RECORD
         LR    R0,R15              COPY REMAINING HEADER LENGTH
         BCTR  R15,0               DECREMENT FOR EXECUTE
         LTR   R15,R15             WAS FIRST RECORD JUST COMPLETE HDR?
         BM    *+8                 YES, HAVE HDR BUT END OF 1ST RECORD
         EX    R15,BITHDRST        LOAD REST OF BMP FILE AND INFO HDR
         AR    R8,R1               PREPARE FOR (VERY) SHORT 2ND RECORD
         AR    R2,R0               POINT PAST HEADER
         SR    R1,R0               ADJUST REMAINING LENGTH
         BNP   BMPHDRLP            HANDLE EMBEDDED (VERY) SHORT RECORD
         SPACE
*   LOAD THE BMP COLOUR TABLE INTO WORKING STORAGE
         SPACE
LDCLRTAB LA    R6,3
         STH   R6,BMPENTLN         PREPARE FOR OS/2 V1 BMP FORMAT
         CLI   BISIZE,12           OS/2 V1 FORMAT?
         BE    *+8                 YES
         MVI   BMPENTLN+1,4        NO, ASSUME NORMAL ENTRY FORMAT
         ICM   R6,8,BICLRUSD+3
         ICM   R6,4,BICLRUSD+2
         ICM   R6,2,BICLRUSD+1
         ICM   R6,1,BICLRUSD
         ST    R6,PICOLORS         SAVE THE NUMBER OF COLOURS
         SR    R14,R14             GET TOTAL HEADER SIZE
         IC    R14,BISIZE
         LA    R14,BISIZE-BMPHDR(,R14)
         ICM   R6,8,BOFFBITS+3
         ICM   R6,4,BOFFBITS+2
         ICM   R6,2,BOFFBITS+1
         ICM   R6,1,BOFFBITS
         SR    R6,R14              GET COLOUR TABLE SIZE
         STH   R6,BITCTBSZ         SAVE IT
         BZ    BMPSET16            NO COLOUR TABLE
         LA    R8,BMPCLRTB         POINT TO STORAGE FOR COLOUR TABLE
         BP    LDCLRREC            GO LOAD COLOUR TABLE
         LA    R1,=CL40'"REVIEW" FOUND -VE SIZED BMP COLOR TABLE'
         LA    R0,40
         TPUT  (1),(0),R
         B     BMPSET16            SEE WHAT HAPPENS ANYWAY
LDCLRREC LR    R15,R1              GET DATA LEFT IN THIS RECORD
         CR    R15,R6              IS IT MORE THAN THE COLOUR TABLE?
         BNH   *+6                 NO
         LR    R15,R6              YES, REDUCE TO THAT LENGTH
         LA    R14,256
LDCLR256 CR    R15,R14             LONGER THAN 256 BYTES?
         BNH   LDCLRSML            NO, AS SMALL OR SMALLER
         MVC   0(256,R8),0(R2)     YES, LOAD 256 BYTES
         SR    R1,R14              REDUCE LENGTH LEFT IN RECORD
         SR    R6,R14              REDUCE LENGTH STILL TO COPY
         AR    R2,R14              ADVANCE RECORD DATA POINTER
         AR    R8,R14              ADVANCE TARGET ADDRESS POINTER
         B     LDCLR256            GO APPLY 256 TEST AGAIN
LDCLRSML SR    R1,R15              REDUCE LENGTH LEFT IN RECORD
         SR    R6,R15              REDUCE LENGTH STILL TO COPY
         BCTR  R15,0               DECREMENT FOR EXECUTE
         EX    R15,BITHDRST        LOAD MORE OF THE COLOUR TABLE
         LA    R2,1(R15,R2)        ADVANCE RECORD DATA POINTER
         LA    R8,1(R15,R8)        ADVANCE TARGET ADDRESS POINTER
         LTR   R1,R1               ANY DATA LEFT IN RECORD?
         BNZ   BMPSET16            YES, COLOUR TABLE MUST BE ALL COPIED
         BAS   R14,BMNXTREC        GET THE NEXT RECORD
         LTR   R6,R6               NEED TO COPY MORE COLOUR TABLE?
         BNZ   LDCLRREC            YES, GO DO IT
         SPACE
*
*   SET UP THE 16-BIT COLOUR MASKS
*
*   DECODE DEFAULT 16-BIT MASKS:   INTEL FORMAT: B'0RRRRRGGGGGBBBBB'
*                                    LOOKS LIKE: B'GGGBBBBB0RRRRRGG'
*                                  SO, FOR 3270: B'...B.....R....G.'
*
BMPSET16 STM   R1,R4,BITSECSV      SAVE RECORD PROCESSING STATUS
         MVI   BMPRMASK+1,X'40'    SET DEFAULT MSB FOR RED
         MVI   BMPBMASK+0,X'10'    SET DEFAULT MSB FOR BLUE
         MVI   BMPGMASK+1,X'02'    SET DEFAULT MSB FOR GREEN
         CLI   BICMPRSN,BI_BITFIELDS
         BNE   BMPIXELS            NO OVERRIDING MASKS SUPPLIED
         LA    R0,12
         CH    R0,BITCTBSZ         WERE 3 FULLWORDS READ IN?
         BH    BMPIXELS            NO, REQUIRED MASKS ARE ABSENT
*
*   SOME BOOKS SAY THE ORDER IS   RED, BLUE, GREEN - BUT MOST SEEM
*   TO ACTUALLY USE THE ORDER AS  RED, GREEN, BLUE - SO DO THAT HERE
*
*   THREE 4-BYTE MASKS ARE SUPPLIED - SINCE THE PIXEL DATA SHOULD
*   BE 16 BITS AND ITS ALL IN INTEL FORMAT, WE WILL PROCEED AS IF
*   THE LAST TWO BYTES OF EACH 4-BYTE MASK IS ZERO AND CAN BE
*   IGNORED.
*
*   THESE MASKS WILL NOT BE USED UNLESS PICOLRES EQUALS SIXTEEN.
*
         SR    R0,R0               CLEAR FOR INSERT
*   R E D
         ICM   R1,8,BMPCLRTB+1     LOAD RED HI BYTE
         ICM   R1,4,BMPCLRTB       LOAD RED LO BYTE
         BAS   R14,BMPHIBIT
         STCM  R1,8,BMPRMASK+1     SAVE RED HI BYTE
         STCM  R1,4,BMPRMASK       SAVE RED LO BYTE
*   G R E E N
         ICM   R1,8,BMPCLRTB+5     LOAD GREEN HI BYTE
         ICM   R1,4,BMPCLRTB+4     LOAD GREEN LO BYTE
         BAS   R14,BMPHIBIT
         STCM  R1,8,BMPGMASK+1     SAVE GREEN HI BYTE
         STCM  R1,4,BMPGMASK       SAVE GREEN LO BYTE
*   B L U E
         ICM   R1,8,BMPCLRTB+9     LOAD BLUE HI BYTE
         ICM   R1,4,BMPCLRTB+8     LOAD BLUE LO BYTE
         BAS   R14,BMPHIBIT
         STCM  R1,8,BMPBMASK+1     SAVE BLUE HI BYTE
         STCM  R1,4,BMPBMASK       SAVE BLUE LO BYTE
*
         LM    R1,R4,BITSECSV      RESTORE RECORD PROCESSING STATUS
         B     BMPIXELS            16-BIT COLOUR MASKS ALL SET
*
*   FIND THE MOST SIGNIFICANT BIT (MSB) OF A MASK AND ZERO THE REST
*
BMPHIBIT LTR   R1,R1               IS THE MASK ALL ZERO?
         BZR   R14                 YES, RETURN
         SR    R15,R15             CLEAR A COUNTER
BMPHIBLP LTR   R1,R1               IS SIGN BIT SET?
         BM    BMPHIBOK            YES, FOUND IT
         LA    R15,1(,R15)         NO, INCREMENT COUNT
         SLL   R1,1                PROMOTE NEXT BIT
         B     BMPHIBLP            GO TEST IT
BMPHIBOK SLDL  R0,1                SAVE SIGN BIT
         SR    R1,R1               ZERO ALL OTHER BITS
         SRDL  R0,1                RESTORE SIGN BIT
         SRL   R1,0(R15)           SHIFT TO CORRECT POSITION IN MASK
         BR    R14                 RETURN
         SPACE
*
*   READ PICTURE DATA UNTIL END OF PICTURE OR END OF FILE
*
         SPACE
*   ACCRUE A SCANLINE'S FILE DATA IN WORKING STORAGE
         SPACE
BMPIXELS L     R0,Y_PELS           TOTAL SCANLINE COUNT
         MVI   BMPRLE,0            CLEAR RLE FLAGS
         CLI   BICMPRSN,BI_RLE8+BI_RLE4  ANY CHANCE OF RLE?
         BH    BMPLINLP            NO, DO NOT FIDDLE WITH RLE FLAGS
         CLI   PICOLRES+3,16       MIGHT RLE BE EMPLOYED?
         BNL   BMPLINLP            NO, DO NOT FIDDLE WITH RLE FLAGS
         MVC   RLELDCSR,BITLDCSR   INITIALIZE RLE LOAD CURSOR
         MVC   BMPRLE,BICMPRSN     COPY RLE FLAGS
         CLI   PICOLRES+3,4        IS RLE4 POSSIBLE?
         BE    *+8                 YES, DO NOT RESET FLAG
         NI    BMPRLE,255-BI_RLE4  NO, NOT AT THIS RESOLUTION
         CLI   PICOLRES+3,8        IS RLE8 POSSIBLE?
         BE    *+8                 YES, DO NOT RESET FLAG
         NI    BMPRLE,255-BI_RLE8  NO, NOT AT THIS RESOLUTION
         TM    BMPRLE,BI_RLE4      RLE4 FILE?
         BNO   *+8                 NO, SO SHOULD BE PIXEL PERFECT
         MVI   MSG,140             UNSUPPORTED COMPRESSION TYPE
         TM    BMPRLE,BI_RLE8+BI_RLE4    USING RLE?
         BZ    BMPLINLP            NO, GO TO NEW SCANLINE LOGIC
         L     R8,BITLDCSR         POINT TO LINE "BEFORE" FIRST LINE
         ICM   R6,15,BIWIDTH       GET THE WIDTH
         SR    R8,R6               POINT TO FIRST SCANLINE TO LOAD
         ST    R8,BITLDCSR         SAVE FIRST SCANLINE ADDRESS
         ST    R8,RLELDCSR         SAVE FIRST PIXEL ADDRESS
*
*   BY THIS STAGE, IF 8 OR FEWER BITS PER PIXEL ARE BEING USED,
*   ONE OF THE RLE FLAGS MAY BE ON, BUT ONLY IF THE CORRESPONDING
*   COLOUR RESOLUTION IS BEING USED.  THIS MEANS THEY MAY BE TESTED
*   WITHOUT CONCERN FOR FALSE POSITIVES SUCH AS FROM BI_BITFIELDS.
*
*   NOTE THAT RLE4 IS NOT PROPERLY IMPLEMENTED, BUT THE SLOPPY
*   SUPPORT PROVIDED SHOULD GIVE SOME CLUE ABOUT THE IMAGE CONTENT.
*   (DEALING WITH WHOLE BYTES AS PER RLE8 IS JUST A LOT EASIER.)
*
BMPLINLP ST    R0,BITLN2GO         SAVE SCANLINES YET TO PROCESS
         L     R6,BITBYTLN         GET FILE BYTES NEEDED FOR LINE
         LA    R14,BMPSCNLN        POINT TO SCANLINE HOLD AREA
         CLI   BMPRLE,0            ANY COMPRESSION?
         BE    BMPXTRCT            NO
BMPRLELP LA    R6,2                YES, JUST GET TWO BYTES
         LA    R14,BMPRPAIR        POINT TO RLE PAIR HOLD AREA
         STCM  R6,12,BMPRPAIR+2    RESET JUMP DELTA VALUE
BMPXTRCT LR    R0,R2               POINT TO FILE DATA
         LR    R15,R6              COPY REQUIRED BYTE COUNT
         CR    R6,R1               SUFFICIENT BYTES IN RECORD?
         BNH   BMPRECOK            YES
         LTR   R15,R1              NO, REDUCE TO WHAT'S PRESENT
         BZ    BMPNXTRC            NO BYTES AVAILABLE
         SR    R6,R1               REDUCE REQUIRED BYTE COUNT
         SPACE
         MVCL  R14,R0              COPY REST OF THIS RECORD
         SPACE
BMPNXTRC ST    R14,BITSAVR2        SAVE LOADED SCANLINE DATA CURSOR
         BAS   R14,BMNXTREC        GET THE NEXT RECORD
         L     R14,BITSAVR2        RESTORE SCANLINE DATA CURSOR
         B     BMPXTRCT            CONTINUE WITH SCANLINE EXTRACTION
         SPACE
BMPRECOK MVCL  R14,R0              EXTRACT REST OF THIS SCANLINE
         LR    R2,R0               UPDATE RECORD DATA POINTER
         STM   R1,R4,BITSECSV      SAVE RECORD PROCESSING STATUS
         CLI   BMPRLE,0            ANY COMPRESSION?
         BE    BMPLNSCN            NO, NOW HAVE DATA FOR SCANLINE
         TM    BMPRLE,$RLEABS      IN ABSOLUTE MODE?
         BO    BMPABSOK            YES
         SPACE
*   AUTOMATICALLY EXTRACT THE DELTA CO-ORDINATES IF DELTA ORDER
         SPACE
         LA    R14,X'0002'         LOAD JUMP-TO-DELTA CONTROL CODE
         CLM   R14,3,BMPRPAIR      WAS A JUMP-TO-DELTA EXTRACTED?
         BNE   BMPDORLE            NO, GO PROCESS EXTRACTED BYTES
         TM    BMPRLE,$RLE02       HAS THE DELTA BEEN EXTRACTED?
         BO    BMPDORLE            YES, GO PROCESS IT
         OI    BMPRLE,$RLE02       NO, BUT NOW IT WILL BE
         LA    R6,2                YES, GET TWO MORE BYTES
         LA    R14,BMPRPAIR+2      POINT TO DELTA HOLD AREA
         B     BMPXTRCT            GO EXTRACT THE DELTA
         SPACE
*   ENSURE AN EVEN NUMBER OF ABSOLUTE DATA BYTES WAS EXTRACTED
         SPACE
BMPABSOK LA    R14,BMPRPAIR+2      POINT TO A SPARE BYTE
         LA    R6,1                PREPARE TO REALIGN EVENLY
         NI    BMPRPAIR+1,X'01'    ZERO LENGTH EXCEPT EVEN/ODD BIT
         XI    BMPRPAIR+1,X'01'    FLIP EVEN/ODD BIT
         BZ    BMPXTRCT            WAS ODD SO GO EVEN IT UP
         NI    BMPRLE,255-$RLEABS  RESET ABSOLUTE MODE FLAG
         SPACE
*   CONVERT THE ABSOLUTE PIXEL DATA TO 3270 COLOUR CODES
         SPACE
         L     R8,RLELDCSR         POINT PAST ABSOLUTE DATA
         LH    R0,BMPRPAIR         GET ABSOLUTE DATA LENGTH
         SR    R8,R0               POINT TO ABSOLUTE DATA
BMPABSLP SR    R14,R14             CLEAR FOR INSERT
         IC    R14,0(,R8)          GET ABSOLUTE COLOUR CODE
         TM    BMPRLE,BI_RLE4      USING RLE4?
         BZ    *+8                 NO
         SRL   R14,4               YES, PRETEND TO CATER FOR IT
         MH    R14,BMPENTLN        CONVERT TO COLOUR TABLE INDEX
         LA    R14,BMPCLRTB(R14)   POINT TO COLOUR TABLE ENTRY
         SR    R6,R6               CLEAR FOR INSERT
         IC    R6,1(,R14)          LOAD GREEN LEVEL
         SLL   R6,1                KEEP HIGH BIT
         IC    R6,2(,R14)          LOAD RED LEVEL
         SLL   R6,1                KEEP HIGH BIT
         IC    R6,0(,R14)          LOAD BLUE LEVEL
         SRL   R6,7                KEEP HIGH BITS
         STC   R6,0(,R8)           SET COLOUR FOR THIS PIXEL
         TM    0(R8),X'07'         BLACK OR WHITE?
         BNM   *+8                 YES
         OI    PICFLAGS,PICNBW     NO
         LA    R8,1(,R8)           POINT TO NEXT ABSOLUTE DATA BYTE
         BCT   R0,BMPABSLP         GO PROCESS NEXT ABSOLUTE BYTE
         B     BMPRLELP            GO GET NEXT RLE PAIR
         SPACE
*   LOAD RLE COMPRESSED BMP COLOR DATA INTO PICTURE ARRAY
         SPACE
BMPDORLE CLI   BMPRPAIR,0          CONTROL CODE?
         BE    BMPRLE0             YES, GO PROCESS IT
         SR    R14,R14             CLEAR FOR INSERT
         IC    R14,BMPRPAIR+1      GET VALUE
         TM    BMPRLE,BI_RLE4      USING RLE4?
         BZ    *+8                 NO
         SRL   R14,4               YES, PRETEND TO CATER FOR IT
         MH    R14,BMPENTLN        CONVERT TO COLOUR TABLE INDEX
         LA    R14,BMPCLRTB(R14)   POINT TO COLOUR TABLE ENTRY
         SR    R1,R1               CLEAR FOR INSERT
         IC    R1,1(,R14)          LOAD GREEN LEVEL
         SLL   R1,1                KEEP HIGH BIT
         IC    R1,2(,R14)          LOAD RED LEVEL
         SLL   R1,1                KEEP HIGH BIT
         IC    R1,0(,R14)          LOAD BLUE LEVEL
         SRL   R1,7                KEEP HIGH BITS
         L     R8,RLELDCSR         POINT TO LOAD POINT IN ARRAY
         STC   R1,0(,R8)           SET COLOUR FOR THIS PIXEL
         TM    0(R8),X'07'         BLACK OR WHITE?
         BNM   *+8                 YES
         OI    PICFLAGS,PICNBW     NO
         SR    R15,R15             CLEAR FOR INSERT
         IC    R15,BMPRPAIR        GET RLE COUNT
         AR    R15,R8              FORETELL NEW RLELDCSR VALUE
         C     R15,PICENDAD        BEYOND END OF PICTURE STORAGE?
         BNH   *+8                 NO
         L     R15,PICENDAD        YES, AVOID OVERLAY OR S0C4
         SR    R15,R8              RESTORE THE RUN LENGTH
         BCTR  R15,0               GET REPETITION COUNT
         BCTR  R15,0               GET LENGTH CODE
         LTR   R15,R15             WAS COUNT MORE THAN ONE?
         BM    BMPRUNOK            NO
         EX    R15,BMPRUN          YES, PROPAGATE FOR WHOLE RUN
BMPRUNOK LA    R8,2(,R8)
         AR    R8,R15              UPDATE LOAD CURSOR
         ST    R8,RLELDCSR         SAVE IT
         LM    R1,R4,BITSECSV      RESTORE RECORD PROCESSING STATUS
         B     BMPRLELP            GET NEXT CODE
BMPRUN   MVC   1(0,R8),0(R8)       <<< EXECUTED >>>
         SPACE
*   PROCESS RLE CONTROL CODES
         SPACE
BMPRLE0  CLI   BMPRPAIR+1,0        END OF LINE?
         BE    BMPRLE00            YES
         CLI   BMPRPAIR+1,1        END OF PICTURE?
         BE    BITCOLRD            YES, END OF DATA
         CLI   BMPRPAIR+1,2        JUMP TO NEW POSITION?
         BE    BMPRLE02            YES
         LH    R6,BMPRPAIR         GET ABSOLUTE DATA BYTE COUNT
         TM    BMPRLE,BI_RLE4      USING RLE4?
         BZ    BMPABS4             NO
         LA    R6,3(,R6)           ROUND UP
         SRL   R6,2                GET HALFWORD COUNT
         SLL   R6,1                GET ABSOLUTE DATA BYTE COUNT
BMPABS4  L     R14,RLELDCSR        GET DATA TARGET
         LA    R8,0(R6,R14)        UPDATE RLE PEL CURSOR
         ST    R8,RLELDCSR         SAVE IT
         OI    BMPRLE,$RLEABS      SWITCH TO ABSOLUTE MODE
         LM    R1,R4,BITSECSV      RESTORE RECORD PROCESSING STATUS
         B     BMPXTRCT            GO GET START OF ABSOLUTE DATA
BMPRLE00 L     R8,BITLDCSR         POINT TO LINE ALREADY LOADED
         ICM   R0,15,BIWIDTH       GET THE WIDTH
         SR    R8,R0               POINT BACK TO LINE TO LOAD NOW
         ST    R8,BITLDCSR         SAVE END-OF-NEXT-LINE ADDRESS
         ST    R8,RLELDCSR         SET RLE DATA TARGET
         B     BMPNXTLN            GO START NEXT LINE
BMPRLE02 SR    R15,R15             CLEAR FOR INSERT
         IC    R15,BMPRPAIR+3      GET ROWS TO SKIP
         L     R14,BITLN2GO        GET LINES TO GO
         CR    R15,R14             GOING PAST END OF PICTURE?
         BNL   BITCOLRD            YES, END OF DATA
         SR    R14,R15             NO, UPDATE LINES-TO-GO
         L     R8,RLELDCSR
         S     R8,BITLDCSR         GET LOADED COLUMNS
         SR    R0,R0
         IC    R0,BMPRPAIR+2       GET COLUMNS TO SKIP
         AR    R8,R0               GET NEW COLUMN NUMBER
         C     R8,X_PELS           MORE THAN A ROW?
         BL    BMPDLTA1            NO
         S     R8,X_PELS           YES, GET COLUMN OF NEXT ROW
         LA    R15,1(,R15)         COUNT THE EXTRA ROW
         BCT   R14,BMPDLTA1        ADJUST LIMES-TO-GO
         B     BITCOLRD            END OF DATA AFTER ALL
BMPDLTA1 ST    R14,BITLN2GO        SAVE NEW LINES TO GO
         ICM   R0,15,BIWIDTH       GET THE WIDTH
         L     R14,BITLDCSR        POINT TO CURRENT ROW
BMPDLTA2 SR    R14,R0              POINT TO THE NEXT ROW
         BCT   R15,BMPDLTA2        JUMP ALL OF THE DELTA ROWS
         AR    R8,R14              JUMP ALL OF THE DELTA COLUMNS
         ST    R14,BITLDCSR        SAVE LINE CURSOR
         ST    R8,RLELDCSR         SAVE PEL CURSOR
         LM    R1,R4,BITSECSV      RESTORE RECORD PROCESSING STATUS
         B     BMPRLELP            GO GET NEXT RLE PAIR
         SPACE
*   LOAD UNCOMPRESSED BMP SCANLINE COLOR DATA INTO PICTURE ARRAY
         SPACE
BMPLNSCN L     R8,BITLDCSR         POINT TO DATA ALREADY LOADED
         ICM   R0,15,BIWIDTH       GET THE WIDTH
         SR    R8,R0               POINT BACK TO LINE TO LOAD NOW
         ST    R8,BITLDCSR         SAVE END-OF-NEXT-LINE ADDRESS
         LA    R6,BMPSCNLN         POINT TO SCANLINE HOLD AREA
         L     R0,X_PELS           GET PIXEL COUNT PER SCANLINE
         SR    R4,R4               CLEAR FOR 16-BIT INSERT
         CLI   PICOLRES+3,16       COLOUR TABLE INDEX VALUE DATA?
         BE    BMPRAW16            NO, ACTUAL COLOUR DATA
         BH    BMPRAWLP            NO, ACTUAL COLOUR DATA
         SPACE
*   LOAD BMP SCANLINE - COLOUR TABLE INDEX DATA
         SPACE
         SR    R14,R14             CLEAR FOR DIVIDE
         LA    R15,32              GET BITS PER WORD
         L     R4,PICOLRES         GET BITS PER PEL
         DR    R14,R4              GET PELS PER WORD
         ST    R15,DOUBLE          SAVE PELS PER WORD
BMPLDLP1 L     R2,DOUBLE           LOAD PELS PER WORD
         L     R15,0(,R6)          LOAD SOME PIXEL DATA
         LA    R6,4(,R6)           POINT TO NEXT DATA TO LOAD
BMPLDLP2 SR    R14,R14             CLEAR FOR SHIFT
         SLDL  R14,0(R4)           GET PIXEL BITS FOR AN ARRAY ELEMENT
         MH    R14,BMPENTLN        CONVERT TO COLOUR TABLE INDEX
         LA    R14,BMPCLRTB(R14)   POINT TO COLOUR TABLE ENTRY
         SR    R1,R1               CLEAR FOR INSERT
         IC    R1,1(,R14)          LOAD GREEN LEVEL
         SLL   R1,1                KEEP HIGH BIT
         IC    R1,2(,R14)          LOAD RED LEVEL
         SLL   R1,1                KEEP HIGH BIT
         IC    R1,0(,R14)          LOAD BLUE LEVEL
         SRL   R1,7                KEEP HIGH BITS
         STC   R1,0(,R8)           SET PIXEL 3270 GRB FLAGS
         TM    0(R8),X'07'         BLACK OR WHITE?
         BNM   *+8                 YES
         OI    PICFLAGS,PICNBW     NO
         LA    R8,1(,R8)           POINT TO NEXT ARRAY ELEMENT
         BCT   R0,BMPLDNX2         DECREMENT REMAINING WIDTH
         B     BMPNXTLN            PREPARE TO PROCESS NEXT SCANLINE
BMPLDNX2 BCT   R2,BMPLDLP2         PROCESS NEXT PIXEL BYTE
         B     BMPLDLP1            GET ANOTHER POET (WORD'S WORTH)
         SPACE
*   LOAD BMP SCANLINE - RAW COLOUR PICTURE DATA
         SPACE
*                                  DECODE 16-BIT DATA
*                                  INTEL FORMAT: B'0RRRRRGGGGGBBBBB'
*                                    LOOKS LIKE: B'GGGBBBBB0RRRRRGG'
*                                  SO, FOR 3270: B'...B.....R....G.'
BMPRAW16 SR    R1,R1               RESET 3270 GRB COLOUR
         ICM   R4,12,0(R6)         LOAD FILE DATA
         N     R4,BMPGMASK         GREEN?
         BZ    *+8                 NO
         LA    R1,4                YES
         ICM   R4,12,0(R6)         RELOAD FILE DATA
         N     R4,BMPRMASK         RED?
         BZ    *+8                 NO
         LA    R1,2(,R1)           YES
         ICM   R4,12,0(R6)         RELOAD FILE DATA
         N     R4,BMPBMASK         BLUE?
         BZ    *+8                 NO
         LA    R1,1(,R1)           YES
         STC   R1,0(,R8)           SET PIXEL 3270 GRB FLAGS
         TM    0(R8),X'07'         BLACK OR WHITE?
         BNM   *+8                 YES
         OI    PICFLAGS,PICNBW     NO
         LA    R6,2(,R6)           POINT TO NEXT PIXEL'S DATA
         LA    R8,1(,R8)           POINT TO NEXT ARRAY ELEMENT
         BCT   R0,BMPRAW16         GO PROCESS NEXT PIXEL
         B     BMPNXTLN            PREPARE TO PROCESS NEXT SCANLINE
         SPACE
*                                  DECODE 24-BIT AND 32-BIT DATA
*                                  INTEL FORMAT: X'(00)RRGGBB'
*                                    LOOKS LIKE: X'BBGGRR(00)'
BMPRAWLP SR    R1,R1               CLEAR FOR INSERT
         IC    R1,1(,R6)           LOAD GREEN LEVEL
         SLL   R1,1                KEEP HIGH BIT
         IC    R1,2(,R6)           LOAD RED LEVEL
         SLL   R1,1                KEEP HIGH BIT
         IC    R1,0(,R6)           LOAD BLUE LEVEL
         SRL   R1,7                KEEP HIGH BITS
         STC   R1,0(,R8)           SET PIXEL 3270 GRB FLAGS
         TM    0(R8),X'07'         BLACK OR WHITE?
         BNM   *+8                 YES
         OI    PICFLAGS,PICNBW     NO
         L     R4,PICOLRES         GET BITS PER PEL
         SRL   R4,3                GET BYTES PER PIXEL
         AR    R6,R4               POINT TO NEXT PIXEL'S DATA
         LA    R8,1(,R8)           POINT TO NEXT ARRAY ELEMENT
         BCT   R0,BMPRAWLP         GO PROCESS NEXT PIXEL
         SPACE
*   BMP SCANLINE NOW LOADED INTO PICTURE ARRAY
         SPACE
BMPNXTLN LM    R1,R4,BITSECSV      RESTORE RECORD PROCESSING STATUS
         L     R0,BITLN2GO         DECREMENT REMAINING SCANLINE COUNT
         BCT   R0,BMPLINLP         PROCESS NEXT LINE
         ST    R0,BITLN2GO         FLAG ALL SCANLINES PROCESSED
         B     BITCOLRD            ATTEND TO DISPLAY HOUSEKEEPING
         SPACE
         DROP  R13                 @BITWORK, BMPHDR
         SPACE
         DC    0D'0'
         LTORG
ASCIIBM  DC    XL2'424D'           'BM' IN ASCII
ASCIIGIF DC    XL3'474946'         'GIF' IN ASCII
ASCII87A DC    XL3'383761'         '87A' IN ASCII
ASCII89A DC    XL3'383961'         '89A' IN ASCII
         DC    0F'0'
         SPACE 2
**********************************************************************
*                                                          *         *
*         PROCESS GIF (GRAPHICS INTERCHANGE FORMAT) FILES  *  GP@P6  *
*                                                          * JUN2012 *
**********************************************************************
         SPACE
*   THIS ROUTINE IS CALLED ONCE AFTER THE INITIAL SCREENFUL OF
*   RECORDS HAS BEEN READ IF IT HAS BEEN DETERMINED THAT PICTURE
*   PROCESSING IS TO BE DONE IF POSSIBLE, AND THAT THE DATA DOES
*   NOT REPRESENT A ".PCX" OR ".BMP" FILE.
*
*   IT DETERMINES IF THE DATA SET BEING REVIEWED IS A ".GIF" OR
*   "GRAPHICS INTERCHANGE FORMAT" FILE AS SPECIFIED BY COMPUSERVE.
*   IF NOT THEN NO ACTION IS TAKEN AND "NORMAL" REVIEW PROCESSING
*   CONTINUES.
         SPACE
*   PERFORM INITIAL VALIDATION
         SPACE
         USING GIFHDR,R2
GIFCHECK CLC   GIFSIG,ASCIIGIF     GIF FILE?
         BNE   FILLSCR             NO, GO SHOW FIRST PAGE OF FILE DATA
         CLC   GIFVER,ASCII87A     SUPPORTED VERSION?
         BE    GIFVALID            YES, INVESTIGATE FURTHER
         CLC   GIFVER,ASCII89A     SUPPORTED VERSION?
         BNE   FILLSCR             NO, GO SHOW FIRST PAGE OF FILE DATA
GIFVALID SR    R1,R1               CLEAR FOR INSERT
         ICM   R1,1,GIFDEPTH
         ICM   R1,2,GIFDEPTH+1
         LA    R15,2048            GET THE REVIEW HEIGHT LIMIT
         CLR   R1,R15              TOO TALL FOR REVIEW?
         BH    FILLSCR             YES, DO NOT ATTEMPT IMAGE DISPLAY
         SR    R0,R0               CLEAR FOR INSERT
         ICM   R0,1,GIFWIDTH
         ICM   R0,2,GIFWIDTH+1
         BM    FILLSCR             OVER 32767 SO TOO WIDE FOR REVIEW
         STM   R0,R1,DOUBLE        SAVE WIDTH AND HEIGHT/DEPTH
         MR    R0,R0               GET TOTAL PIXEL COUNT
         SLL   R15,11              GET 2048 TIMES 2048
         CLR   R1,R15              MORE THAN 4 MEGAPIXELS?
         BH    FILLSCR             YES, A BIT BIG TO HANDLE
         TM    VECFLAGS,VCTR       VECTOR GRAPHICS AVAILABLE?
         BO    GIFGRFOK            YES, CAN RENDER PICTURE
         CLI   SYMSTGF,0           ANY LOADABLE SYMBOL CAPABILITY?
         BE    GIFPIXON            NO, CAN'T DO GRAPHICS
         TM    GIFFLGS,$GIFBPP     BLACK AND WHITE PICTURE?
         BZ    GIFGRFOK            YES, 3270 SINGLE-PLANE WILL DO
         CLI   SYMSTG3,0           3270 TRIPLE-PLANE AVAILABLE?
         BNE   GIFGRFOK            YES, CAN DO COLOUR PICTURES
GIFPIXON OI    STATUS17,$17PIX     FLAG 1 PIXEL PER CHARACTER CELL
         SPACE
*   PROCEED WITH GIF DATA PROCESSING - ACQUIRE STORAGE
         SPACE
GIFGRFOK LA    R14,FILLSCR         PREPARE RETURN ADDRESS
         STM   R14,R12,12(R13)     SAVE REGISTERS
         MVC   X_Y_PELS,DOUBLE     SAVE PICTURE DIMENSIONS
         ST    R1,PICPELCT         SAVE PICTURE PIXEL COUNT
         XC    DOUBLE,DOUBLE
         MVC   DOUBLE+3(1),GIFFLGS
         NI    DOUBLE+3,$GIFBPP
         DROP  R2                  GIFHDR
         L     R7,DOUBLE
         SRA   R7,4                GET BITS PER PIXEL MINUS ONE
         LA    R7,1(,R7)           GET BITS PER PIXEL
         ST    R7,PICOLRES         SAVE IT FOR DISPLAY ROUTINE
         LA    R1,4000             GET STRING CONSTRUCTION AREA SIZE
         LA    R0,$GIFWKLN(,R1)    GET THE WORKING STORAGE SIZE
         LR    R7,R0               COPY IT
         MVI   GETMNTRC,14         TRACK GETMAIN IN CASE OF FAILURE
         GETMAIN RC,LV=(0),LOC=(31,64)
         LTR   R15,R15             STORAGE ACQUIRED?
         BNZ   BITNOWRK            NO
         LR    R0,R7               YES, COPY GETMAIN SIZE
         LR    R6,R1               POINT TO NEW AREA
         MVCL  R6,R14              ZERO NEW AREA (GPR15 IS ZERO)
         ST    R13,4(,R1)          CHAIN SAVE AREAS
         ST    R1,8(,R13)
         LR    R13,R1
         USING @GIFWORK,R13
         ST    R0,GIFWKLEN         SAVE GETMAINED AREA SIZE
         LA    R0,@GIFWORK+$GIFWKLN
         ST    R0,GIFSTRAD         SAVE STRING AREA ADDRESS
         L     R1,PICPELCT         GET PICTURE PIXEL COUNT
         LA    R0,7(,R1)
         SRL   R0,3
         SLL   R0,3                ROUND UP TO NEXT DOUBLEWORD
         ST    R0,PICSTGSZ         SAVE ARRAY STORAGE SIZE
         MVI   GETMNTRC,15         TRACK GETMAIN IN CASE OF FAILURE
         GETMAIN RC,LV=(0),SP=17,LOC=(31,64)
         LTR   R15,R15             SUCCESS?
         BNZ   BITNOARY            NO
         LA    R10,GIFGRFOK        YES, SET LOCAL BASE
         DROP  R5                  PCXCHECK
         DROP  R10,R11,R12,R3      REVIEW2
         SPACE
         USING GIFGRFOK,R10
         ST    R1,HSEACTIV         SAVE PICTURE BYTE ARRAY ADDRESS
         A     R1,PICPELCT         POINT PAST END OF PICTURE ARRAY
         ST    R1,PICENDAD         SAVE FOR DISPLAY ROUTINE
         MVI   PICCOLOR,X'F7'      START PICTURE DISPLAY IN NEUTRAL
         L     R7,HOLDTOP          POINT TO FIRST RECORD DETAILS
         LM    R1,R2,DIRLEN(R7)    GET RECORD LENGTH AND ADDRESS
         LA    R0,4
         TM    TSTRECFM,X'40'      DOES THE RECORD START WITH AN RDW?
         BZ    *+8                 NO
         SR    R1,R0               YES
         AR    R2,R0               MAKE ADJUSTMENTS
         MVC   WKGIFHDR,0(R2)      COPY FIXED-FORMAT GIF FILE START
         LA    R0,GIFFIXLN         GET HEADER LENGTH
         AR    R2,R0               UPDATE CURSOR
         SR    R1,R0               UPDATE LENGTH
         ST    R2,GIFRECAD         SAVE DATA POINTER
         ST    R1,GIFRECLN         SAVE DATA LENGTH
         ST    R7,GIFRECDE         SAVE DIRECTORY ENTRY ADDRESS
         SPACE
*   LOAD GIF GLOBAL COLOUR TABLE
         SPACE
         USING GIFHDR,WKGIFHDR
         TM    GIFFLGS,$GIFGCT     GLOBAL COLOUR TABLE PRESENT?
         BZ    GIFBLOCK            NO, SO DO NOT HAVE TO LOAD IT
         IC    R1,GIFFLGS
         LA    R0,$GIFGC#
         NR    R1,R0               GET N
         LA    R1,1(,R1)           GET N+1
         LA    R3,1                GET 1
         SLL   R3,0(R1)            GET 2**(N+1)
***      ST    R3,PICOLORS         THIS COUNT INCLUDES UNUSED ENTRIES
         LR    R1,R3               COPY IT
         AR    R3,R3               DOUBLE IT
         AR    R3,R1               TRIPLE IT
         LA    R2,GIFGCT           POINT TO GCT AREA
         ST    R2,GCOLRTB@         SET ACTIVE COLOUR TABLE POINTER
         LA    R1,GIFSAVE3         PASS SAVE AREA ADDRESS
         BAS   R14,GIFREAD         READ IN THE GLOBAL COLOUR TABLE
         TM    GIF_F1,$G1EOF       REACHED END OF FILE?
         BO    GIFSHORT            YES, FILE HAS BEEN TRUNCATED
         BAS   R3,GIFBKCLR         GO SET WINDOW TO BACKGROUND COLOUR
         SPACE
*   DETERMINE GIF BLOCK TYPE
         SPACE
GIFBLOCK EQU   *
         SR    R0,R0               GET ZERO
         STH   R0,GIFBITS          FLUSH RESIDUAL DATA BYTE BITS
         ST    R0,GIFDATA#         FLUSH RESIDUAL DATA BLOCK BYTES
         TM    GIFFLGS,$GIFGCT     GLOBAL COLOUR TABLE PRESENT?
         BZ    GIFGCTOK            NO, SO IT CANNOT BE ACTIVE
         LA    R2,GIFGCT           YES, POINT TO THE GCT
         ST    R2,GCOLRTB@         REINSTATE IT AS ACTIVE
GIFGCTOK EQU   *
         LA    R2,GIFBLKCD         POINT TO BLOCK CODE HOLD AREA
         LA    R3,1                GET LENGTH OF A BLOCK CODE
         LA    R1,GIFSAVE3         PASS SAVE AREA ADDRESS
         BAS   R14,GIFREAD         READ IN THE BLOCK CODE
         TM    GIF_F1,$G1EOF       REACHED END OF FILE?
         BO    GIFSHORT            YES, FILE HAS BEEN TRUNCATED
         CLI   GIFBLKCD,X'21'      GIF EXTENSION BLOCK?
         BE    GIFEXTEN            YES, GO READ EXTENSION HEADER
         CLI   GIFBLKCD,X'2C'      GIF IMAGE BLOCK?
         BE    GIFIMAGE            YES, GO READ IMAGE HEADER
         CLI   GIFBLKCD,X'3B'      GIF TERMINATOR?
         BE    GIFENDED            YES, GIF NOW DIGESTED
         MVC   MSG+2(24),=CL24'UNKNOWN GIF BLOCK ID: X'''
         UNPK  MSG+26(3),GIFBLKCD(2)
         TR    MSG+26(2),GIFHEX-240
         MVI   MSG+28,QUOTE
         LA    R0,27
         STH   R0,MSG              SET MESSAGE LENGTH
         B     GIFABORT            DO NOT OVERLAY MESSAGE
GIFBADCD CVD   R15,DOUBLE          REPORT PROBABLE GIF FILE CORRUPTION
         OI    DOUBLE+7,X'0F'
         MVC   MSG+2(13),=CL13'GIF LZW CODE '
         UNPK  MSG+15(4),DOUBLE
         LH    R0,GNXTCODE
         MVC   MSG+19(3),=CL3' > '
         CVD   R0,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  MSG+22(4),DOUBLE
         LA    R0,24
         STH   R0,MSG              SET MESSAGE TEXT LENGTH
         OI    STATUS7,$7BELL      SOUND BELL FOR ERROR MESSAGE
         B     GIFABORT            DO NOT OVERLAY MESSAGE
GIFSHORT MVI   MSG,198             UNEXPECTED END-OF-FILE
         B     GIFABORT            DO NOT OVERLAY MESSAGE
GIFERROR MVI   MSG,185             UNEXPECTED GIF FILE FORMAT
GIFABORT TM    GIF_F1,$G1PIX       ANY PIXELS PLOTTED?
         BO    GIFENDED            YES, GO SHOW WHAT WAS LOADED
         LM    R0,R1,GIFARYSZ      GET LZW ARRAY DETAILS
         LTR   R0,R0               WAS THE ARRAY CREATED?
         BZ    GIFARYGN            NO, DO NOT FREE IT
         FREEMAIN RU,LV=(0),A=(1),SP=3 DISCARD THE OLD LZW ARRAY
GIFARYGN L     R1,HSEACTIV         POINT TO PICTURE ARRAY
         L     R0,PICSTGSZ         GET PICTURE ARRAY STORAGE SIZE
         FREEMAIN RU,LV=(0),A=(1),SP=17
         XC    HSEACTIV,HSEACTIV   RESET PICTURE STATUS
         XC    PICDTLS(PICDTLEN),PICDTLS
         NI    STATUS17,255-$17PIX RESET PIXEL ZOOM-IN FLAG
         LR    R1,R13              POINT TO WORKING STORAGE
         L     R0,GIFWKLEN         GET THE WORKING STORAGE SIZE
         L     R13,4(,R13)         POINT TO MAINLINE SAVE AREA
         FREEMAIN RU,LV=(0),A=(1)  FREE THE STORAGE
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 RETURN TO NORMAL FILE DATA DISPLAY
         SPACE
*
*   PROCESS EXTENSION BLOCK
*
         SPACE
GIFEXTEN LA    R2,GIFBLKCD         POINT TO CODE HOLD AREA
         LA    R3,1                GET LENGTH OF AN EXTENSION TYPE
         LA    R1,GIFSAVE3         PASS SAVE AREA ADDRESS
         BAS   R14,GIFREAD         READ IN THE EXTENSION TYPE
         TM    GIF_F1,$G1EOF       REACHED END OF FILE?
         BO    GIFSHORT            YES, FILE HAS BEEN TRUNCATED
GIFEXBLK LA    R2,GIFDATAL         POINT TO DATA BLOCK LENGTH AREA
         LA    R3,1                GET DATA BLOCK LENGTH SIZE
         LA    R1,GIFSAVE3         PASS SAVE AREA ADDRESS
         BAS   R14,GIFREAD         READ IN THE DATA BLOCK SIZE
         TM    GIF_F1,$G1EOF       REACHED END OF FILE?
         BO    GIFSHORT            YES, FILE HAS BEEN TRUNCATED
         ICM   R3,1,GIFDATAL       GET DATA LENGTH - IS IT ZERO?
         BZ    GIFBLOCK            YES, END OF EXTENSION
         LA    R2,GIFDATA          POINT TO DATA BLOCK AREA
         LA    R1,GIFSAVE3         PASS SAVE AREA ADDRESS
         BAS   R14,GIFREAD         READ IN THE DATA BLOCK
         TM    GIF_F1,$G1EOF       REACHED END OF FILE?
         BO    GIFSHORT            YES, FILE HAS BEEN TRUNCATED
         CLI   GIFBLKCD,X'F9'      GRAPHIC CONTROL EXTENSION HEADER?
         BNE   GIFEXBLK            NO, GO GET NEXT DATA BLOCK
         TM    STATUS17,$17PIX     SHOWING 1 PIXEL PER COLUMN?
         BO    GIFEXBLK            YES, SKIP REVIMAGE CALL
         SPACE
         USING GCX,GIF_ANIM
         ICM   R0,3,GCXWTTM        ANY ANIMATION DELAY PENDING?
         BZ    GIFSVGCX            NO, GO SAVE NEW SPECIFICATION
         L     R1,4(,R13)          YES, POINT TO CALLER'S SAVE AREA
         USING SAVER,R1
         L     R5,SAVGRS5          RESTORE ORIGINAL LOCAL BASE
         DROP  R1                  SAVER
         DROP  R10                 GIFGRFOK
         USING PCXCHECK,R5
         BAS   R14,BIT_POSI        FINALIZE DETAILS FOR REVIMAGE
         DROP  R5                  PCXCHECK
         SPACE
         L     R0,SHADOWBF         POINT TO THE SHADOW BUFFER
         L     R1,SCRNCOLS         GET THE SCREEN WIDTH
         AR    R1,R1               DOUBLE IT
         LA    R15,X'07'           NEUTRAL (WHITE)
         SLL   R15,24              PROMOTE PAD AND ZERO LENGTH
         MVCL  R0,R14              SHOW FIRST TWO LINES IN WHITE
         USING GIFGRFOK,R10
         LA    R0,1
         A     R0,GIFIMGNO         INCREMENT IMAGE NUMBER
         ST    R0,GIFIMGNO
         CVD   R0,DOUBLE
         L     R1,SCREENBF         POINT TO THE FIRST SCREEN LINE
         L     R15,SCRNCOLS        GET SCREEN WIDTH
         MVI   0(R1),FLDOUTHI      HIGH INTENSITY PROTECTED FIELD
         AR    R1,R15              POINT TO THE SECOND SCREEN LINE
         MVI   0(R1),C' '
         EX    R15,GIFSHUFL        BLANK SECOND SCREEN LINE
         MVC   1(5,R1),=X'C699819485'          C'FRAME'
         MVC   6(4,R1),GIFEDMSK
         ED    6(4,R1),DOUBLE+6    SHOW "FRAME" NUMBER
         SR    R0,R0               CLEAR FOR INSERT
         ICM   R0,3,GCXWTTM        GET THE DELAY TIME
         ST    R0,GIFWAIT          SAVE IT FOR THE STIMER
         CVD   R0,DOUBLE
         MVC   20(7,R1),GIFEDMSK
         ED    20(7,R1),DOUBLE+5
         MVC   28(9,R1),=X'A285834084859381A8' C'SEC DELAY'
         OI    STATUS10,$10CDL     PREPARE FOR OUTPUT-ONLY TERMINAL I/O
         L     R15,=A(REVIMAGE)
         BASR  R14,R15             CONSTRUCT GRAPHICS DATA STREAM
         L     R15,=A(REVCOMM)
         BASR  R14,R15             SHOW IMAGE SO FAR
         NI    PICFLAGS,255-PICOK  REDRAW OF PICTURE WILL BE REQUIRED
         TM    STATUS4,$4ATTN      ATTENTION INTERRUPT DETECTED?
         BO    GIFABORT            YES, STOP RIGHT NOW
         STIMER WAIT,BINTVL=GIFWAIT WAIT SPECIFIED TIME
         MVC   DOUBLE(1),GCXFLGS   COPY FLAG BYTE
         SPACE
GIFSVGCX CLI   GIFDATAL,4          EXPECTED DATA BLOCK?
         BNE   GIFDSPSL            NO, A BIT ODD
         ICM   R0,15,GIFDATA       YES, LOAD THE BLOCK
         STCM  R0,8,GCXFLGS        SAVE THE FLAG BYTE
         STCM  R0,4,GCXWTTM+1      CONVERT DELAY TIME TO NATIVE FORMAT
         STCM  R0,2,GCXWTTM
         STCM  R0,1,GCXTCI         SAVE TRANSPARENT COLOUR INDEX
GIFDSPSL NI    DOUBLE,$GCXMTH      EXTRACT DISPOSAL METHOD
         CLI   DOUBLE,$GCXM2       NEED TO RESTORE BACKGROUND?
         BNE   GIFEXBLK            NO, GO GET NEXT EXTENSION DATA BLOCK
         NI    GIF_F1,255-$G1BAK   YES, RESET FLAG
         B     GIFEXBLK            GO GET NEXT EXTENSION DATA BLOCK
         SPACE
*
*   SET GIF LOGICAL SCREEN TO NOMINATED BACKGROUND COLOUR
*
         SPACE
GIFBKCLR TM    GIF_F1,$G1BAK       ALREADY LOADED BACKGROUND COLOUR?
         BOR   R3                  YES, RETURN WITHOUT ACTION
         OI    GIF_F1,$G1BAK       NO, SO SET FLAG FOR NEXT TIME
         SR    R1,R1               CLEAR FOR INSERT
         IC    R1,GIFBGND          GET BACKGROUND COLOUR INDEX
         TM    GCXFLGS,$GCXTRN     IS THERE A TRANSPARENT COLOUR INDEX?
         BNO   GIFBKSET            NO, GO SET THE BACKGROUND COLOUR
         CLM   R1,1,GCXTCI         IS THE BACKGOUND TRANSPARENT?
         BER   R3                  YES, RETURN WITHOUT ACTION
GIFBKSET LR    R0,R1               COPY BACKGROUND COLOUR INDEX
         AR    R1,R1               DOUBLE IT
         AR    R1,R0               TRIPLE IT
         L     R15,GCOLRTB@        POINT TO ACTIVE COLOUR TABLE
         LA    R1,0(R1,R15)        POINT TO BACKGROUND COLOUR ENTRY
         SR    R15,R15             CLEAR FOR INSERT
         IC    R15,1(,R1)          INSERT GREEN BYTE
         SLL   R15,1               PROMOTE TOP BIT TO NEXT BYTE
         IC    R15,0(,R1)          INSERT RED BYTE
         SLL   R15,1               PROMOTE TOP BIT TO NEXT BYTE
         IC    R15,2(,R1)          INSERT BLUE BYTE
         SRL   R15,7               GET 3270 COLOUR BITS
         SLL   R15,24              PROMOTE TO PAD BYTE AND ZERO LENGTH
         L     R0,HSEACTIV         POINT TO PICTURE BYTE ARRAY
         L     R1,PICPELCT         LOAD PICTURE PIXEL COUNT
         MVCL  R0,R14              SET BACKGROUND COLOUR
         ST    R15,DOUBLE          PUT BACKGROUND COLOUR INTO STORAGE
         TM    DOUBLE,X'07'        BLACK OR WHITE?
         BNMR  R3                  YES, RETURN TO CALLER
         OI    PICFLAGS,PICNBW     NO, FLAG COLOUR RENDERING REQUIRED
         BR    R3                  RETURN TO CALLER
         SPACE
*
*   PROCESS GIF IMAGE
*
         SPACE
*   GIF FILES CAN CONTAIN MULTIPLE IMAGES, EACH OF WHICH IS NOT
*   NECESSARILY ALIGNED WITH OR THE SAME SIZE AS THE GIF LOGICAL
*   SCREEN AREA.  PARTS OF THE IMAGE OUTSIDE THE LOGICAL SCREEN
*   WINDOW NEED TO BE CROPPED, SO GIF SCREEN AND IMAGE POSITION
*   BOUNDARY POINTS NEED TO BE CALCULATED.  THE 16-BIT IMAGE
*   OFFSET AND DIMENSION NUMBERS ARE TREATED AS SIGNED BY REVIEW,
*   WHICH MIGHT BE A PROBLEM IF THE IMAGE IS MORE THAN 32767 PIXELS
*   HIGH OR WIDE, BUT WINDOWS OF SUCH SIZE ARE REJECTED BY THE
*   LOGIC ABOVE.
         SPACE
*   LOAD GIF IMAGE HEADER
         SPACE
GIFIMAGE LA    R2,WKGIH            POINT TO IMAGE HEADER HOLD AREA
         LA    R3,L'WKGIH          GET ITS LENGTH
         LA    R1,GIFSAVE3         PASS SAVE AREA ADDRESS
         BAS   R14,GIFREAD         READ IN THE IMAGE HEADER
         TM    GIF_F1,$G1EOF       REACHED END OF FILE?
         BO    GIFSHORT            YES, FILE HAS BEEN TRUNCATED
         USING GIH,WKGIH
         ICM   R0,1,GIHLEFT        CONVERT FIELDS TO NATIVE FORMAT
         ICM   R0,2,GIHLEFT+1
         STH   R0,GIHLEFT
         STH   R0,GIF_X_@          SAVE STARTING X-COORDINATE
         ICM   R0,1,GIHTOP
         ICM   R0,2,GIHTOP+1
         STH   R0,GIHTOP
         STH   R0,GIF_Y_@          SAVE STARTING Y-COORDINATE
         ICM   R0,1,GIHWIDTH
         ICM   R0,2,GIHWIDTH+1
         BM    GIFERROR            IMAGE IS TOO WIDE FOR REVIEW
         STH   R0,GIHWIDTH
         STH   R0,GIF_X_#          SAVE PIXELS-TO-GO FOR THIS LINE
         ICM   R0,1,GIHDEPTH
         ICM   R0,2,GIHDEPTH+1
         BM    GIFERROR            IMAGE IS TOO TALL FOR REVIEW
         STH   R0,GIHDEPTH
         STH   R0,GIF_Y_#          SAVE SCANLINES-TO-GO FOR IMAGE
         AH    R0,GIHTOP
         STH   R0,GIF_Y_L          SAVE Y_COORD BELOW BOTTOM SCANLINE
         SPACE
*   LOAD INDIVIDUAL IMAGE'S LOCAL COLOUR TABLE
         SPACE
         LA    R2,GIFGCT           POINT TO GCT AREA
         ST    R2,GCOLRTB@         SET ACTIVE COLOUR TABLE POINTER
         TM    GIHFLGS,$GIHLCT     LOCAL COLOUR TABLE PRESENT?
         BZ    GIFLCTOK            NO, SO DO NOT HAVE TO LOAD IT
         IC    R1,GIHFLGS
         LA    R0,$GIHLC#
         NR    R1,R0               GET N
         LA    R1,1(,R1)           GET N+1
         LA    R3,1                GET 1
         SLL   R3,0(R1)            GET 2**(N+1)
         C     R3,PICOLRES         MORE COLOURS THAN IN THE GCT?
         BNH   *+8                 NO
         ST    R3,PICOLRES         YES, INCREASE THE COLOUR COUNT
         LR    R1,R3               COPY IT
         AR    R3,R3               DOUBLE IT
         AR    R3,R1               TRIPLE IT
         LA    R2,GIFLCT           POINT TO LCT AREA
         ST    R2,GCOLRTB@         SET ACTIVE COLOUR TABLE POINTER
         LA    R1,GIFSAVE3         PASS SAVE AREA ADDRESS
         BAS   R14,GIFREAD         READ IN THE LOCAL COLOUR TABLE
         TM    GIF_F1,$G1EOF       REACHED END OF FILE?
         BO    GIFSHORT            YES, FILE HAS BEEN TRUNCATED
GIFLCTOK EQU   *
         BAS   R3,GIFBKCLR         GO SET WINDOW TO BACKGROUND COLOUR
         SPACE
*   SET UP DECODE PARTICULARS
         SPACE
         LA    R2,GLITSIZE+1       POINT TO CODE SIZE HOLD AREA
         LA    R3,1                GET LENGTH OF THE CODE SIZE
         LA    R1,GIFSAVE3         PASS SAVE AREA ADDRESS
         BAS   R14,GIFREAD         READ IN THE LITERAL CODE SIZE
         TM    GIF_F1,$G1EOF       REACHED END OF FILE?
         BO    GIFSHORT            YES, FILE HAS BEEN TRUNCATED
         CLI   GLITSIZE+1,0        IS IT ZERO?
         BE    GIFERROR            YES, INVALID SO ABORT
         CLI   GLITSIZE+1,11       MORE THAN MAXIMUM ALLOWED BY GIF?
         BH    GIFERROR            YES, INVALID SO ABORT
         LH    R3,GLITSIZE         GET N - THE LITERAL CODE SIZE
         LA    R1,1                GET 1
         SLA   R1,0(R3)            GET 2**N
         STH   R1,GCLRCODE         SAVE CLEAR CODE
         LA    R1,1(,R1)           GET 2**N + 1
         STH   R1,GENDCODE         SAVE END CODE
         BAS   R14,GIFARRAY        INITIALIZE THE LZW ARRAY
         LA    R0,GIFNORML         PREPARE FOR NON-INTERLACED IMAGE
         TM    GIHFLGS,$GIHINT     INTERLACED IMAGE?
         BZ    *+8                 NO, STANDARD TOP DOWN ROW LOAD
         LA    R0,GIFILACE         YES, POINT TO INTERLACE PASS TABLE
         ST    R0,GIFPASS@         POINT TO INITIAL PASS TABLE ENTRY
         SPACE
*
*   EXTRACT AND PROCESS EACH LZW CODE
*
         SPACE
GIFGETLP BAS   R14,GIFGETCD        GET AN INPUT LZW CODE
         TM    GIF_F1,$G1EOF       REACHED END OF FILE?
         BO    GIFSHORT            YES, FILE HAS BEEN TRUNCATED
         LTR   R15,R15             END OF IMAGE DATA?
         BM    GIFBLOCK            YES, GO GET NEXT GIF BLOCK
         CH    R15,GENDCODE        END CODE?
         BE    GIFISEND            YES
         CH    R15,GCLRCODE        CLEAR CODE?
         BNE   GIFNTCLR            NO
         BAS   R14,GIFARRAY        REINITIALIZE THE LZW ARRAY
         B     GIFGETLP            GO GET NEXT CODE
         SPACE
GIFISEND MVI   GIFBITS,X'80'       FLUSH UNUSED BITS OF CURRENT BYTE
         MVI   GIFDATA#,X'80'      FLUSH UNUSED BYTES OF CURRENT BLOCK
         B     GIFGETLP            GO GET ZERO LENGTH DATA BLOCK
         SPACE
GIFNTCLR CH    R15,GNXTCODE        IS THE CODE TOO LARGE?
         BH    GIFBADCD            YES, LOOKS LIKE A CORRUPT FILE
         LR    R14,R15             COPY CODE JUST READ
         MH    R14,=Y(GIFEL)       GET INDEX INTO CODE ARRAY
         A     R14,GIFARYAD        POINT TO THE ARRAY ENTRY
         USING GIFENTRY,R14
         STH   R15,GIFNEW          SAVE CODE JUST READ
         STH   R15,GIFCRNT         SAVE CODE TO EXPAND
         CLI   GIF1STCD,0          FIRST CODE READ?
         BNE   GIFFIRST            YES, SPECIAL CASE
         CH    R15,GCLRCODE        LITERAL CODE?
         BL    GIFDECOD            YES
         ICM   R0,3,GIFGEN#        EXISTING CODE?
         BNZ   GIFDECOD            YES, PROCEED AS NORMAL
         SPACE
         LH    R14,GIFOLD          GET THE PREVIOUS CODE
         STH   R14,GIFCRNT         MAKE AN EXTANT ONE CURRENT
         MH    R14,=Y(GIFEL)       GET INDEX INTO CODE ARRAY
         A     R14,GIFARYAD        POINT TO THE ARRAY ENTRY
         B     GIFDECOD            JUMP OVER SPECIAL CASE CODE
         SPACE
GIFFIRST STH   R15,GIFOLD          PROCESS FIRST CODE READ
         MVC   GCURIDX,GIFCHAR     SAVE ITS DATA COLOUR INDEX
         SPACE
GIFDECOD LH    R1,GIFGEN#          GET THE STRING LENGTH CODE
         LA    R0,1(,R1)           GET THE STRING LENGTH
         ST    R0,GIFSTRLN         SAVE THE NEW STRING LENGTH
         AL    R1,GIFSTRAD         POINT TO LAST BYTE OF STRING
GIFDECLP MVC   0(1,R1),GIFCHAR     COPY DATA CODE POINT
         CL    R1,GIFSTRAD         BACKED UP TO START, YET?
         BE    GIFNEWCK            YES, GO PROCESS DECODED DATA
         LH    R14,GIFPARNT        NO, GET THE PARENT'S CODE
         MH    R14,=Y(GIFEL)       GET INDEX INTO CODE ARRAY
         A     R14,GIFARYAD        POINT TO THE PARENT'S ENTRY
         BCT   R1,GIFDECLP         GO INSERT PARENT'S CHARACTER
         DROP  R14                 GIFENTRY
         SPACE
GIFNEWCK CLC   GIFCRNT,GIFNEW      WAS THE LATEST CODE KNOWN?
         BE    GIFNEWOK            YES
         LR    R1,R0               NO, GET THE STRING LENGTH
         LA    R4,1(,R1)           GET THE NEW STRING LENGTH
         AL    R1,GIFSTRAD         POINT PAST EXISTING STRING
         MVC   0(1,R1),GCURIDX     ADD THE COLOUR INDEX
         ST    R4,GIFSTRLN         SAVE THE NEW STRING LENGTH
         SPACE
GIFNEWOK L     R4,GIFSTRAD         POINT TO NEW DECODED STRING
         SPACE
         MVC   GCURIDX,0(R4)       GET NEW "CURRENT" COLOUR INDEX
         SPACE
         CLI   GIF1STCD,0          FIRST CODE READ?
         MVI   GIF1STCD,0          RESET FIRST-TIME FLAG
         BNE   GIFPAINT            YES, FIRST CODE NOW PROCESSED
         SPACE
         LA    R15,GIFEL           GET ARRAY ENTRY LENGTH
         SLL   R15,12              MULTIPLY BY 4096
         AL    R15,GIFARYAD        GET LIMIT OF SEARCH
         L     R14,GNXTADDR        GET SEARCH START ADDRESS
         LH    R1,GNXTCODE         GET SEARCH START CODE
         USING GIFENTRY,R14
GIFSCHLP CR    R14,R15             REACHED THE END OF THE ARRAY?
         BNL   GIFPAINT            NO, NO MORE UPDATES TILL CLEARED
         ICM   R0,3,GIFGEN#        IS THIS ENTRY UNUSED?
         BZ    GIFACHLD            YES
         LA    R14,GIFENTND        NO, POINT TO THE NEXT ONE
         LA    R1,1(,R1)           INCREMENT THE ASSOCIATED CODE
         B     GIFSCHLP            NO MORE ARRAY UPDATES TILL CLEARED
         DROP  R14                 GIFENTRY
         SPACE
GIFACHLD LH    R15,GIFOLD          GET THE PARENT'S CODE
         MH    R15,=Y(GIFEL)       GET INDEX INTO CODE ARRAY
         A     R15,GIFARYAD        POINT TO THE PARENT'S ENTRY
         USING GIFENTRY,R15        "PARENT"
         LH    R5,GIFGEN#          GET THE PARENT'S DEPTH
         DROP  R15                 GIFENTRY
         USING GIFENTRY,R14        "NEW CHILD"
         STH   R1,GIFCODE          SET THE NEW CODE
         MVC   GIFPARNT,GIFOLD     SET THE PARENT'S CODE
         CH    R1,GIFPARNT
         BH    PAROKOK
         NOP   PAROKOK
PAROKOK  EQU   *
         LA    R5,1(,R5)           GET THE NEW DEPTH
         STH   R5,GIFGEN#          SET IT
         MVC   GIFCHAR,GCURIDX     SET THE APPEND COLOUR INDEX
         LA    R0,1(,R1)           GET NEXT UNUSED CODE
         LA    R5,GIFENTND         GET NEXT UNUSED ARRAY ENTRY
         STH   R0,GNXTCODE         ARRAY FULL UP TO THIS POINT
         ST    R5,GNXTADDR         UPDATE SEARCH START POINT
         SPACE
         CH    R0,GINCCODE         TIME TO INCREMENT THE CODE SIZE?
         BL    GIFINCOK            NO
         AR    R0,R0               YES, GET NEXT INCREMENT TRIGGER
         STH   R0,GINCCODE         SAVE IT
         CLI   GDCODESZ+1,12       ALREADY UP TO 12-BIT CODES?
         BNL   GIFINCOK            YES, LEAVE IT AT THE MAXIMUM
         LA    R5,1                GET SIZE OF INCREASE
         AH    R5,GDCODESZ         GET NEW CODE BIT COUNT
         STH   R5,GDCODESZ         SAVE IT
         DROP  R14                 GIFENTRY
         SPACE
GIFINCOK MVC   GIFOLD,GIFNEW       GET READY FOR ANOTHER CODE
         SPACE
         SPACE
*
*   LOAD PIXEL DATA INTO BYTE-PER-PIXEL ARRAY
*
         SPACE
GIFPAINT L     R14,GIFSTRAD        POINT TO STRING
         L     R15,GIFSTRLN        GET LENGTH TO OUTPUT
         SPACE
GIFPIXLP TM    GIF_X_@,X'80'       CURRENTLY LEFT OF WINDOW?
         BO    GIFPIXDN            YES, CROP THIS PIXEL
         TM    GIF_Y_@,X'80'       CURRENTLY ABOVE WINDOW?
         BO    GIFPIXDN            YES, CROP THIS PIXEL
         LH    R0,GIF_X_@          GET CURRENT X CO-ORD
         LH    R1,GIF_Y_@          GET CURRENT Y CO-ORD
         C     R0,X_PELS           CURRENTLY RIGHT OF WINDOW?
         BNL   GIFPIXDN            YES, CROP THIS PIXEL
         C     R1,Y_PELS           CURRENTLY BELOW WINDOW?
         BNL   GIFPIXDN            YES, CROP THIS PIXEL
         MH    R1,X_PELS+2         COUNT PIXELS IN ROWS ABOVE
         AR    R1,R0               GET OFFSET INTO ARRAY
         AL    R1,HSEACTIV         POINT TO ARRAY BYTE TO LOAD
         SR    R0,R0               CLEAR FOR INSERT
         IC    R0,0(,R14)          LOAD COLOUR TABLE INDEX
         TM    GCXFLGS,$GCXTRN     IS THERE A TRANSPARENT COLOUR INDEX?
         BNO   GIFPIXEL            NO, GO SET THE PIXEL VALUE
         CLM   R0,1,GCXTCI         IS THIS PIXEL TRANSPARENT?
         BE    GIFPIXDN            YES, DO NOT OVERLAY THE PIXEL VALUE
GIFPIXEL LA    R2,1                GET ONE
         AR    R2,R0               GET COLOUR INDEX PLUS ONE
         C     R2,PICOLORS         NEW HIGHEST COLOUR NUMBER?
         BNH   *+8                 NO
         ST    R2,PICOLORS         YES, UPDATE NUMBER OF COLOURS
         LR    R2,R0               COPY COLOUR INDEX
         AR    R2,R0               DOUBLE IT
         AR    R2,R0               TRIPLE IT
         AL    R2,GCOLRTB@         POINT TO COLOUR TABLE ENTRY
         IC    R0,1(,R2)           INSERT GREEN BYTE
         SLL   R0,1                PROMOTE TOP BIT TO NEXT BYTE
         IC    R0,0(,R2)           INSERT RED BYTE
         SLL   R0,1                PROMOTE TOP BIT TO NEXT BYTE
         IC    R0,2(,R2)           INSERT BLUE BYTE
         SRL   R0,7                GET 3270 COLOUR NUMBER
         STC   R0,0(,R1)           SET INTO PIXEL BYTE ARRAY
         OI    GIF_F1,$G1PIX       FLAG MORE THAN ZERO PIXELS LOADED
         TM    0(R1),X'07'         BLACK OR WHITE?
         BNM   GIFPIXDN            YES
         OI    PICFLAGS,PICNBW     NO
GIFPIXDN EQU   *
         LA    R0,1
         AH    R0,GIF_X_@          INCREMENT X CO-ORD
         STH   R0,GIF_X_@
         LH    R0,GIF_X_#
         BCT   R0,GIFROWDN         DECREMENT ROW PIXELS-TO-GO
*                                  START OF A NEW ROW OR SCANLINE
         MVC   GIF_X_@,GIHLEFT     RESET X CO-ORD
         L     R3,GIFPASS@         POINT TO SCAN CONTROL PARAMETERS
         LH    R0,2(,R3)           GET THE SCANLINE STEP SIZE
         AH    R0,GIF_Y_@          INCREMENT Y CO-ORD
GIFROWCK CH    R0,GIF_Y_L          GONE TOO DEEP?
         BL    GIFROWOK            NO
         LA    R3,GIFPASSZ(,R3)    YES, POINT TO NEXT PASS TABLE ENTRY
         ST    R3,GIFPASS@         SAVE NEW TABLE ENTRY ADDRESS
         LH    R0,GIHTOP           GET TOP ROW NUMBER
         AH    R0,0(,R3)           GET TOP SCANLINE FOR THIS PASS
         B     GIFROWCK            HANDLE GIFS WITH DEPTH LESS THAN 5
GIFROWOK STH   R0,GIF_Y_@          SAVE NEW ROW Y CO-ORD
         LH    R0,GIF_Y_#
         BCTR  R0,0                DECREMENT ROWS-TO-GO
         STH   R0,GIF_Y_#
         LH    R0,GIHWIDTH         GET IMAGE WIDTH
GIFROWDN STH   R0,GIF_X_#          SAVE SCANLINE PIXELS-TO-GO
         LA    R14,1(,R14)         POINT TO NEXT COLOUR TABLE INDEX
         BCT   R15,GIFPIXLP        GO LOAD NEXT PIXEL'S DATA
         SPACE
         ST    R15,GIFSTRLN        STRING PROCESSED - EMPTY IT
         B     GIFGETLP            GO GET NEXT CODE
         SPACE
*
*   GIF IMAGE EXTRACTION NOW COMPLETE
*
         SPACE
GIFENDED LM    R0,R1,GIFARYSZ      GET LZW ARRAY DETAILS
         FREEMAIN RU,LV=(0),A=(1),SP=3 DISCARD THE OLD LZW ARRAY
         SPACE
         L     R1,4(,R13)          POINT TO CALLER'S SAVE AREA
         USING SAVER,R1
         L     R5,SAVGRS5          RESTORE ORIGINAL LOCAL BASE
         DROP  R1                  SAVER
         DROP  R10                 GIFGRFOK
         LM    R10,R12,BASE2       RESTORE MAIN BASE REGISTERS
         L     R3,BASE2+12
         USING PCXCHECK,R5
         B     BITCOLRD            FINALIZE PICTURE HOUSEKEEPING
         DROP  R5                  PCXCHECK
         SPACE
         USING GIFGRFOK,R10
         SPACE
************************************************************
*                                                          *
*         CREATE AND INITIALIZE GIF LZW CODE ARRAY         *
*                                                          *
************************************************************
         SPACE
*
*    ON ENTRY:
*
*        R13 = ADDRESS OF GIFSAVE1
*        R14 = RETURN ADDRESS
*
*    THE 4096-ENTRY LZW CODE ARRAY IS CREATED IN SUBPOOL 3.
*
*    AS WELL AS THE ARRAY, THE FOLLOWING VARIABLES ARE INITIALIZED:
*
*        GNXTADDR - FIRST FREE ENTRY ADDRESS
*        GNXTCODE - FIRST FREE ENTRY CODE
*        GINCCODE - WHEN CREATED INCREMENT CODE SIZE
*        GDCODESZ - INITIAL DECODE SIZE OR BITS PER LZW CODE
*        GIF1STCD - SET TO INDICATE FIRST LZW CODE READ PENDING
*
*    ALL REGISTERS ARE RESTORED UPON EXIT.
*
         SPACE
GIFARRAY STM   R14,R12,12(R13)     SAVE REGISTERS
         SPACE
         LA    R0,GIFEL            GET ENTRY SIZE
         SLL   R0,12               GET GIF LZW ARRAY SIZE
         C     R0,GIFARYSZ         ALREADY HAVE AN LZW ARRAY?
         ST    R0,GIFARYSZ         IN CASE NOT, SAVE THE SIZE
         BNE   GIFARYGM            NO, GET ONE FOR THE FIRST TIME
         L     R1,GIFARYAD         YES, POINT TO IT
         FREEMAIN RU,LV=(0),A=(1),SP=3 DISCARD THE OLD LZW ARRAY
         SPACE
         L     R0,GIFARYSZ         ENSURE SIZE REQUEST IS CORRECT
GIFARYGM EQU   *                   NOW GET SYSTEM-ZEROED STORAGE
         MVI   GETMNTRC,16         TRACK GETMAIN IN CASE OF FAILURE
         GETMAIN RU,LV=(0),SP=3,BNDRY=PAGE,LOC=(31,64)
         ST    R1,GIFARYAD         SAVE THE ADDRESS (OF ENTRY 0)
         LH    R0,GCLRCODE         GET ENTRIES TO INITIALIZE
         SR    R14,R14
         USING GIFENTRY,R1
GIFARYLP STC   R14,GIFCHAR         INITIALIZE SBCS CODE SET
         STH   R14,GIFCODE
         LA    R14,1(,R14)         INCREMENT CODE POINT
         LA    R1,GIFENTND         POINT TO THE NEXT ENTRY
         BCT   R0,GIFARYLP
*                                  NOW POINTING AT CLEAR CODE'S ENTRY
*                                  - ENTRY 256 IS NEVER USED
         LA    R1,GIFEL+GIFEL(,R1) POINT PAST END CODE'S ENTRY
         ST    R1,GNXTADDR         SAVE ADDRESS OF NEXT FREE ENTRY
         LA    R0,1
         AH    R0,GENDCODE
         STH   R0,GNXTCODE         SAVE CODE OF NEXT FREE ENTRY
         LH    R0,GCLRCODE         GET 2**N
         AR    R0,R0               GET 2**(N+1)
         STH   R0,GINCCODE
         LA    R0,1
         AH    R0,GLITSIZE         GET LITERAL CODE SIZE PLUS ONE
         STH   R0,GDCODESZ         SET CURRENT LZW CODE BIT LENGTH
         MVI   GIF1STCD,255        DICTIONARY NOW RESET
         DROP  R1                  GIFENTRY
         SPACE
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER
         SPACE
         SPACE
************************************************************
*                                                          *
*         READ LZW STRING CODES FROM THE GIF FILE          *
*                                                          *
************************************************************
         SPACE
*
*    ON ENTRY:
*
*        R13 = ADDRESS OF GIFSAVE1
*        R14 = RETURN ADDRESS
*   GDCODESZ = BITS PER LZW CODE
*   GIFDATA@ = ADDRESS OF INPUT BYTE CURRENTLY BEING DIGESTED
*   GIFDATA# = NUMBER OF BYTES AFTER CURRENT BYTE ALREADY READ IN
*    GIFBITS = NUMBER OF UNPROCESSED BITS LEFT IN THE CURRENT BYTE
*
*    ON EXIT:
*
*        R15 = LZW CODE EXTRACTED FROM GIF IMAGE DATA -OR-
*            < 0 IF GIF FILE DATA EXHAUSTED.
*
*    ALL OTHER REGISTERS ARE RESTORED UPON EXIT.
*
         USING @GIFWORK,R13
GIFGETCD STM   R14,R12,12(R13)     SAVE REGISTERS
         LA    R1,GIFSAVE2         POINT TO NEW SAVE AREA
         DROP  R13                 @GIFWORK, GIFHDR, GIH
         ST    R13,4(,R1)          CHAIN SAVE AREAS
         ST    R1,8(,R13)
         LR    R13,R1              POINT TO NEW SAVE AREA
         USING GIFSAVE2,R13
         SPACE
         LH    R5,GDCODESZ         GET THE NUMBER OF BITS NEEDED
         SR    R7,R7               RESET ACTIVE BIT FLAG
         SR    R8,R8               RESET ACCUMULATOR
         LH    R4,GIFBITS          GET BITS AVAILABLE
         SPACE
GIFBITLP LTR   R4,R4               ANY BITS TO USE?
         BNP   GIFBYTE             NO, NEED ANOTHER BYTE
         LR    R6,R4               YES, COPY THIS COUNT
         CR    R6,R5               MORE THAN ARE NEEDED NOW?
         BNH   GIFBITOK            NO
         LR    R6,R5               YES, REDUCE TO CURRENT NEED
GIFBITOK IC    R7,GIF1MASK-1(R6)   LOAD THAT MANY ONE BITS
         LA    R15,8               GET BITS PER BYTE
         SR    R15,R4              GET BITS ALREADY USED IN BYTE
         L     R14,GIFDATA@        POINT TO CURRENT GIF DATA BYTE
         IC    R14,0(,R14)         GET CURRENT GIF DATA BYTE
         SRL   R14,0(R15)          SHIFT DATA TO ALIGN WITH MASK
         NR    R14,R7              GET THOSE DATA BITS
         LH    R15,GDCODESZ        GET BITS IN CODE
         SR    R15,R5              GET BITS ALREADY LOADED
         SLL   R14,0(R15)          SHIFT PAST LOADED BITS
         SR    R4,R6               REDUCE UNUSED BIT COUNT
         OR    R8,R14              ADD NEW BITS TO ACCUMULATOR
         STH   R4,GIFBITS          UPDATE COUNTER
         SR    R5,R6               REDUCE BITS NEEDED FOR CODE
         BNP   GIFGOTCD            RETURN IF ALL BITS EXTRACTED
         SPACE
         SPACE
*   ACQUIRE NEXT DATA BYTE
         SPACE
GIFBYTE  ICM   R0,15,GIFDATA#      GET BYTES LEFT IN DATA BLOCK
         BNP   GIFBLKIN            NONE, SO NEED ANOTHER BLOCK
         BCTR  R0,0                DECREMENT COUNT BY ONE
         ST    R0,GIFDATA#         SAVE UPDATED COUNT
         LA    R0,1
         A     R0,GIFDATA@         POINT TO NEXT DATA BYTE
         ST    R0,GIFDATA@         SAVE THIS ADDRESS
         LA    R4,8                GET CURRENT BITS REMAINING
         B     GIFBITLP            GO EXTRACT MORE BITS
         SPACE
*   READ IN A DATA BLOCK
         SPACE
GIFBLKIN LA    R2,GIFDATAL         POINT TO DATA BLOCK LENGTH AREA
         LA    R3,1                GET DATA BLOCK LENGTH SIZE
         LA    R1,GIFSAVE3         PASS SAVE AREA ADDRESS
         BAS   R14,GIFREAD         READ IN THE DATA BLOCK SIZE
         TM    GIF_F1,$G1EOF       REACHED END OF FILE?
         BO    GIF0CODE            YES, FILE HAS BEEN TRUNCATED
         ICM   R3,1,GIFDATAL       GET DATA LENGTH - IS IT ZERO?
         BZ    GIF0CODE            YES, END OF IMAGE
         LA    R2,GIFDATA          POINT TO DATA BLOCK AREA
         LA    R1,GIFSAVE3         PASS SAVE AREA ADDRESS
         BAS   R14,GIFREAD         READ IN THE DATA BLOCK
         TM    GIF_F1,$G1EOF       REACHED END OF FILE?
         BO    GIF0CODE            YES, FILE HAS BEEN TRUNCATED
         BCTR  R3,0                NO, GET BYTES AFTER CURRENT BYTE
         ST    R2,GIFDATA@         SET CURRENT DATA BYTE POINTER
         ST    R3,GIFDATA#         SAVE BLOCK COUNT OF BYTES LEFT
         LA    R4,8                GET CURRENT BITS REMAINING
         B     GIFBITLP            GO EXTRACT MORE BITS
         SPACE
GIF0CODE SR    R8,R8               END OF GIF IMAGE REACHED
         BCTR  R8,0                INDICATE WITH NEGATIVE LZW CODE
         SPACE
GIFGOTCD L     R13,4(,R13)         POINT TO CALLER'S SAVE AREA
         OI    11(R13),X'01'       INVALIDATE FORWARD POINTER
         ST    R8,16(,R13)         SAVE CODE IN R15 SLOT
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER
         SPACE
         DROP  R13                 GIFSAVE2
         SPACE
************************************************************
*                                                          *
*         READ BYTES FROM THE GIF FILE                     *
*                                                          *
************************************************************
         SPACE
*
*    ON ENTRY:
*
*        R1  = ADDRESS OF GIFSAVE3
*        R2  = ADDRESS TO PLACE READ BYTES - SKIP DATA IF ZERO
*        R3  = NUMBER OF BYTES TO READ
*        R13 = ADDRESS OF CALLER'S SAVE AREA
*        R14 = RETURN ADDRESS
*
*    ALL REGISTERS ARE RESTORED UPON EXIT.
*
GIFREAD  STM   R14,R12,12(R13)     SAVE REGISTERS
         ST    R13,4(,R1)          CHAIN SAVE AREAS
         ST    R1,8(,R13)
         LR    R13,R1              POINT TO NEW SAVE AREA
         SPACE
         USING GIFSAVE3,R13
         LM    R4,R5,GIFRECAD      GET UNUSED BUFFERED DATA DETAILS
         LTR   R5,R5               ANY UNUSED DATA AVAILABLE?
         BZ    GIFREADD            NO, GO READ SOME DATA
         SPACE
         LTR   R2,R2               READING DATA OR SKIPPING IT?
         BZ    GIFSKIPL            JUST SKIPPING IT
         SPACE
GIFREADL LR    R0,R5               COPY SIZE OF DATA AVAILABLE
         SR    R0,R3               GET SIZE TO BE LEFT AFTER THIS
         BM    GIFREADA            NOT ALL OF THE DATA IS HERE
*                                  ALL OF THE DATA IS HERE
         LR    R5,R3               SET SOURCE LENGTH FROM TARGET
         MVCL  R2,R4               COPY ALL REQUESTED DATA
         LR    R5,R0               COPY UNUSED BUFFER BYTE COUNT
         STM   R4,R5,GIFRECAD      UPDATE UNUSED BUFFER DETAILS
         B     GIFREADX            NOW READY TO LEAVE
         SPACE
GIFREADA LR    R0,R3               COPY THE REQUESTED LENGTH
         SR    R0,R5               GET LENGTH NOT READ YET
         LR    R3,R5               SET TARGET LENGTH FROM SOURCE
         MVCL  R2,R4               COPY THE AVAILABLE DATA
         LR    R3,R0               RESTORE THE OUTSTANDING LENGTH
         SPACE
GIFREADD L     R7,GIFRECDE         POINT TO DIRECTORY ENTRY
         STM   R2,R3,GIFRECAD      SAVE UNPROCESSED REQUEST DETAILS
GIFREADN C     R7,HOLDEND          END OF READ RECORDS?
         BE    GIFREADR            YES, GO GET ANOTHER
         L     R7,DIRNXT(,R7)      NO, POINT TO NEXT ENTRY
         LM    R1,R2,DIRLEN(R7)    GET RECORD LENGTH AND ADDRESS
         LTR   R1,R1               END-OF-FILE?
         BM    GIFREADE            YES, FILE HAS BEEN TRUNCATED
         BZ    GIFREADN            IGNORE NULL RECORD
         B     GIFREADV            MERGE WITH READ RECORD LOGIC
         SPACE
         SPACE
GIFREADR LA    R4,DYNDCBW          POINT TO THE INPUT DCB
         LA    R1,1
         ST    R1,DOWNAMT          NEED TO READ ANOTHER RECORD
         ST    R10,GIFBASE3        SAVE LOCAL BASE
         DROP  R10                 GIFGRFOK
         SPACE
         LM    R10,R12,BASE2       RESTORE MAIN BASE REGISTERS
         L     R3,BASE2+12
         USING REVIEW2,R10,R11,R12,R3
         BAS   R14,DOWNER          RETURNS WITH NEW HOLDEND IN R7
         DROP  R10,R11,R12,R3      REVIEW2
         SPACE
         L     R10,GIFBASE3        RESTORE LOCAL BASE
         USING GIFGRFOK,R10
         LM    R1,R2,DIRLEN(R7)    GET RECORD LENGTH AND ADDRESS
         LTR   R1,R1               END-OF-FILE?
         BM    GIFREADE            YES, FILE HAS BEEN TRUNCATED
         BZ    GIFREADR            IGNORE NULL RECORD
GIFREADV TM    TSTRECFM,X'40'      DOES THE RECORD START WITH AN RDW?
         BZ    GIFREADM            NO
         LA    R4,4                YES
         SR    R1,R4               DISCOUNT RDW FROM DATA LENGTH
         AR    R2,R4               POINT PAST RDW
         SPACE
GIFREADM ST    R7,GIFRECDE         NEW NEW DIRECTORY ENTRY ADDRESS
         LR    R4,R2               POINT TO THE RECORD'S DATA
         LR    R5,R1               COPY THE RECORD'S DATA BYTE COUNT
         LM    R2,R3,GIFRECAD      LOAD UNPROCESSED REQUEST DETAILS
         LTR   R2,R2               READING OR SKIPPING?
         BP    GIFREADL            READING
         SPACE
GIFSKIPL LR    R0,R5               COPY SIZE OF DATA AVAILABLE
         SR    R0,R3               GET SIZE TO BE LEFT AFTER THIS
         BM    GIFSKIPA            NOT ALL OF THE DATA IS HERE
*                                  ALL OF THE DATA IS HERE
         AR    R4,R3               JUMP PAST THE REQUESTED BYTES
         LR    R5,R0               COPY UNUSED BUFFER BYTE COUNT
         STM   R4,R5,GIFRECAD      UPDATE UNUSED BUFFER DETAILS
         B     GIFREADX            NOW READY TO LEAVE
         SPACE
GIFSKIPA SR    R3,R5               SKIP PAST THE BYTES PRESENT
         B     GIFREADD            GO GET SOME MORE
         SPACE
GIFREADE OI    GIF_F1,$G1EOF       THIS SHOULD NOT HAPPEN
         SPACE
GIFREADX L     R13,4(,R13)         POINT TO CALLER'S SAVE AREA
         OI    11(R13),X'01'       INVALIDATE FORWARD POINTER
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER
         SPACE
         DROP  R13                 GIFSAVE3
         SPACE
         DROP  R10                 GIFGRFOK
         SPACE
GIFSHUFL MVC   1(0,R1),0(R1)       <<< EXECUTED >>>
*    SCANLINE PASS CONTROL TABLE
*    - ONE ENTRY FOR NORMAL SCANS, FOUR ENTRIES FOR INTERLACED SCANS
*          1ST-ROW#,ROW#-INCREMENT-SIZE
GIFNORML DC    Y(0),Y(1)           TOP ROW, CONSECUTIVE LINES
GIFPASSZ EQU   *-GIFNORML          PASS CONTROL TABLE ENTRY SIZE
GIFILACE DC    Y(0),Y(8)           TOP ROW, JUMPING 8 SCANLINES
         DC    Y(4),Y(8)           5TH ROW, JUMPING 8 SCANLINES
         DC    Y(2),Y(4)           3RD ROW, JUMPING 4 SCANLINES
         DC    Y(1),Y(2)           2ND ROW, JUMPING 2 SCANLINES
         DC    0D'0'
         SPACE
*    VECTOR OF AN INCREASING NUMBER OF ONE BITS
GIF1MASK DC    X'01,03,07,0F,1F,3F,7F,FF'
GIFHEX   DC    C'0123456789ABCDEF' HEXADECIMAL DIGIT TRANSLATE TABLE
         SPACE
         LTORG
         SPACE
GIFEDMSK DC    X'402021204B2020'
         DC    0H'0'
         SPACE
         USING REVIEW2,R10,R11,R12,R3
         SPACE 2
**********************************************************************
*                                                          *         *
*         PROCESS UNZIP CURSOR SELECTION                   *  GP@P6  *
*                                                          *  10/99  *
**********************************************************************
         SPACE
         USING UNZIPFIL,R5
UNZIPFIL STM   R14,R12,12(R13)     SAVE REGISTERS
         SPACE
*         DETERMINE IF A ZIPPED FILE WAS SELECTED
         SPACE
         LH    R1,CSRLOCN          GET CURSOR SCREEN ADDRESS
         LTR   R1,R1               IN DATA PART OF SCREEN?
         BZ    UNZFLNOP            NO, NOTHING TO DO HERE
         SR    R0,R0               YES, PREPARE FOR DIVIDE
         D     R0,SCRNCOLS         GET CURSOR X AND Y COORDINATES
         L     R7,HOLDTOP          GET TOP-OF-SCREEN RECORD DETAILS
         SH    R1,HW4              GET RELATIVE SCREEN DATA LINE NUMBER
         BZ    UNZCSRLN            THE TOP DATA LINE WAS SELECTED
UNZCSRLP C     R7,HOLDEND          END OF DATA LINES?
         BE    UNZFLNOP            YES, CURSOR WAS BELOW DATA
         L     R7,DIRNXT(,R7)      NO, POINT TO NEXT HOLD ENTRY
         BCT   R1,UNZCSRLP
         USING RZDE,R2
UNZCSRLN L     R2,DIRREC(,R7)      GET RECORD ADDRESS
         L     R15,DIRNUM(,R7)     GET RECORD NUMBER
         L     R7,DIRLEN(,R7)      GET RECORD LENGTH
         TM    TSTRECFM,X'40'      DOES THE RECORD START WITH AN RDW?
         BZ    UNZNORDW            NO
         LA    R0,4                YES
         SR    R7,R0               DISCOUNT RDW FROM DATA LENGTH
         AR    R2,R0               POINT PAST RDW
UNZNORDW LA    R0,RZDEFIXL         GET DATA LENGTH BEFORE FILE NAME
         SR    R7,R0               IS THE FETCHED RECORD LONG ENOUGH?
         BP    UNZPFILE            YES, PROCESS UNZIP REQUEST
UNZFLNOP LM    R14,R12,12(R13)     RESTORE REGISTERS
         B     PROMPT              RETURN TO MAINLINE
UNZPFILE BCTR  R15,0               ATTEMPT TO UNZIP A SPECIFIC FILE
         ST    R15,CALLPARM        SAVE TOP LINE NUMBER TO SHOW ON EXIT
         SPACE
*         ACQUIRE WORKING STORAGE
         SPACE
         LH    R0,UZFLWKLN         GET AREA LENGTH
         MVI   GETMNTRC,17         TRACK GETMAIN IN CASE OF FAILURE
         MVI   MSG,123             REQUEST ABORTED - STORAGE FULL
         GETMAIN RC,LV=(0),LOC=(24,64) GET WORKING STORAGE
         LTR   R15,R15             SUCCESS?
         BNZ   UNZFLNOP            NO, NOTHING DONE HERE
         LR    R14,R7              COPY THE FILE NAME LENGTH
         LH    R7,UZFLWKLN         GET AREA LENGTH
         LR    R6,R1               POINT TO NEW AREA
         MVCL  R6,R14              CLEAR NEW AREA
         ST    R1,8(,R13)          CHAIN SAVE AREAS
         ST    R13,4(,R1)
         LR    R13,R1              POINT TO GETMAINED AREA
         USING @UNZWORK,R13
         USING ZLFH,LCLHDR
         LA    R0,RZDEFNM          POINT TO SELECTED FILE NAME
         ST    R0,ZPFLNMAD         SAVE ITS ADDRESS
         ST    R14,ZPFLNMLN        SAVE ITS LENGTH
         ST    R2,ZPFLRZDE         SAVE REVIEW ZIP DIR. ENTRY ADDRESS
         SPACE
*         ALLOCATE OUTPUT FILE
         SPACE
         LA    R14,BLANKS          USE UADS UNIT INITIALLY
UNZRETRY XC    MYDAPB,MYDAPB
         MVI   DA08CD+1,X'08'
         MVC   DA08DDN,BLANKS
         MVC   DA08UNIT,0(R14)
         MVC   DA08SER,BLANKS
         MVC   DA08MNM,BLANKS
         MVC   DA08PSWD,BLANKS
         MVI   DA08DSP1,DA08NEW
         MVI   DA08DPS2,DA08DEL
         MVI   DA08DPS3,DA08DELE
         MVI   DA08CTL,DA08ABKL
         MVC   DA08BLK,=F'4096'
         AIF   (NOT &ENV390).UNZALC
         TM    FLCARCH,PSAZARCH    RUNNING ON Z/ARCHITECTURE?
         BZ    UNZALC1             NO, THE 32-BIT SIZE WILL DO
         ZAP   SBASAVE(16),RZDESIZE    COPY THE FILE'S FULL SIZE
         CVBG  R1,SBASAVE          MAKE BINARY
         SRAG  R1,R1,12            DIVIDE BY 4096
         B     UNZALC2
UNZALC1  DC    0H
.UNZALC  ANOP
         ICM   R1,1,RZDEMETA+8     GET FILE SIZE IN BINARY
         ICM   R1,2,RZDEMETA+9     WITHOUT CVB S0C9 DUE TO
         ICM   R1,4,RZDEMETA+10    BEING 2GB OR LARGER
         ICM   R1,8,RZDEMETA+11
         SRL   R1,12               DIVIDE BY 4096
UNZALC2  AL    R1,FW1              ACCOUNT FOR ROUNDING
         ST    R1,DA08PQTY         SET THE PRIMARY QUANTITY
         MVI   DA08SQTY+3,120      SET SECONDARY QUANTITY BLOCKS
         XC    MYECB,MYECB
         XASAM24
         LA    R1,MYDAPL
         L     R15,CVTPTR(,0)      CVT
         L     R15,CVTDAIR-CVT(,R15)
         BASR  R14,R15             CALL IKJDAIR
         XASAM31
         LTR   R15,R15
         BZ    UNZOUTOK            FILE SUCCESSFULLY ALLOCATED
         CLI   DA08DARC,X'02'      VOLUME/UNIT DARC RANGE?
         BNE   UNZALCER            NO, THAT WASN'T THE PROBLEM
         LA    R14,=CL8'SYSALLDA'  YES, POINT TO BACKUP UNIT NAME
         CLI   DA08UNIT,C'S'       HAVE WE ALREADY RETRIED?
         BNE   UNZRETRY            NO, RETRY WITH ALTERNATE UNIT NAME
         SPACE
UNZALCER MVC   MSG+2(36),UNZALCMS  LOAD MESSAGE TEXT
         STC   R15,DOUBLE
         UNPK  MSG+2+28(3),DOUBLE(2)
         TR    MSG+2+28(2),HEXTAB-240
         MVI   MSG+2+30,C' '
         UNPK  MSG+2+36(5),DA08DARC(3)
         TR    MSG+2+36(4),HEXTAB-240
         LA    R0,40
         STH   R0,MSG              SET MESSAGE LENGTH
         OI    STATUS7,$7BELL      SOUND BELL FOR ERROR MESSAGE
         B     UNZNOSTR            NOTHING DONE HERE SO NOW RETURN
         SPACE
UNZOUTOK MVC   UNZOUTDD,DA08DDN    COPY GENERATED DD NAME
         SPACE
*         DETERMINE OUTPUT DATA SET DCB ATTRIBUTES
         SPACE
         MVC   UZFLDCB,UNZIPDCB
         MVC   UZFLDCB+DCBDDNAM-IHADCB(8),UNZOUTDD
         TM    ZFTYPE,ZFT_SET      FILE TYPE EXPLICITLY SET BY USER?
         BO    UNZFTYOK            YES, USE THAT SETTING
         MVI   ZFTYPE,ZCFHEBCD
         CLI   RZDETYPE,C'E'-C' '  UNENCRYPTED EBCDIC?
         BE    UNZFTYOK            YES, USE THAT SETTING
         MVI   ZFTYPE,ZCFHASCI
         CLI   RZDETYPE,C'A'-C' '  UNENCRYPTED ASCII?
         BE    UNZFTYOK            YES, USE THAT SETTING
         MVI   ZFTYPE,ZCFHBNRY
UNZFTYOK CLI   RZDERTYP,C'F'       FIXED-LENGTH RECORD FORMAT?
         BE    UNZFRFMF            YES
         CLI   RZDERTYP,C'V'       VARIABLE-LENGTH RECORD FORMAT?
         BE    UNZFRFMV            YES
         CLI   RZDERTYP,C'U'       UNDEFINED RECORD FORMAT?
         BNE   UNZCHK80            NO, CHECK FOR MULTIPLE OF 80
         MVI   UZFLDCB+DCBRECFM-IHADCB,DCBRECU
         B     UNZFRECL
UNZFRFMV MVI   UZFLDCB+DCBRECFM-IHADCB,DCBRECV+DCBRECBR
         B     UNZFRECL
UNZCHK80 SR    R0,R0
         ICM   R0,3,ZFLRECL        LRECL EXPLICITLY SET BY USER?
         BNZ   UNZFIXLN            YES, USE THAT RECORD LENGTH
         TM    ZFTYPE,ZCFHASCI+ZCFHEBCD     TEXT DATA?
         BNZ   UNZVARIT            YES, USE VARIABLE-LENGTH RECORDS
         LA    R15,4               NO
         A     R15,SCRNCOLS        USE SCREEN WIDTH
         TM    RZDESIZE+L'RZDESIZE-1,X'F0'
         BNZ   UNZVAREC            SIZE NOT A MULTIPLE OF 10
         TM    RZDEMETA+8,X'0F'    MULTIPLE OF 10, ALSO OF 16?
         BNZ   UNZVAREC            NO, SO NOT A MULTIPLE OF 80
         MVI   UZFLDCB+DCBRECFM-IHADCB,DCBRECF+DCBRECBR
         LA    R0,80               FILE SIZE IS A MULTIPLE OF 80
         B     UNZFIXLN            SO SHOW "CARD IMAGES"
UNZVARWD LA    R15,4               NO
         A     R15,SCRNCOLS        USE SCREEN WIDTH
         B     UNZVAREC            GO SHOW BINARY DATA
UNZVARIT LA    R15,4092
UNZVAREC STH   R15,UZFLDCB+DCBLRECL-IHADCB
         MVI   UZFLDCB+DCBRECFM-IHADCB,DCBRECV+DCBRECBR
         B     UNZPRIME            GO PRIME JFCB
UNZFRFMF MVI   UZFLDCB+DCBRECFM-IHADCB,DCBRECF+DCBRECBR
         TM    ZFTYPE,ZFT_SET      FILE TYPE EXPLICITLY SET BY USER?
         BO    UNZFRECL            YES, USE THAT SETTING
         CLI   ZFTYPE,ZCFHEBCD     EBCDIC FLAGGED IN DIRECTORY?
         BNE   UNZFRECL            NO, USE THAT SETTING
         MVI   ZFTYPE,ZCFHBNRY     YES, ASSUME REALLY NO X'15' NL CODES
UNZFRECL PACK  DOUBLE,RZDERTYP+1(5)
         OI    DOUBLE+7,X'0F'      MINIMAL ATTEMPT TO PREVENT S0C7
         CVB   R0,DOUBLE
         STH   R0,DOUBLE
         LH    R0,DOUBLE           DETECT 32K OR MORE
         LTR   R0,R0               HAVE A NUMBER?
         BNP   UNZCHK80            NO, IGNORE RZDERTYP
         STH   R0,UZFLDCB+DCBBLKSI-IHADCB
         CLI   RZDERTYP,C'U'       UNDEFINED RECORD FORMAT?
         BE    UNZPRIME            YES, DCB SET FOR ALL MVS LEVELS
UNZFIXLN STH   R0,UZFLDCB+DCBLRECL-IHADCB
         STCM  R0,12,UZFLDCB+DCBBLKSI-IHADCB
         CLI   OSBITS,X'9B'        USING SYSTEM-DETERMINED BLOCKSIZE?
         BE    UNZIPSDB            YES
         DEVTYPE UNZOUTDD,UNZDVTYP NO, GET DEVICE CHARACTERISTICS
         CLI   UZFLDCB+DCBRECFM-IHADCB,DCBRECF+DCBRECBR
         BE    UNZFIXED            NEED TO CALCULATE EXACT MULTIPLE
         MVC   UZFLDCB+DCBBLKSI-IHADCB(2),UNZDVTYP+6
         LA    R0,4
         AH    R0,UZFLDCB+DCBLRECL-IHADCB
         CH    R0,UZFLDCB+DCBBLKSI-IHADCB
         BNH   UNZPRIME            BLOCKSIZE IS BIG ENOUGH FOR RECORD
         STH   R0,UZFLDCB+DCBBLKSI-IHADCB
         B     UNZTOVFL            GO TURN ON TRACKOVERFLOW
UNZFIXED LH    R1,UNZDVTYP+6
         SR    R0,R0
         LH    R14,UZFLDCB+DCBLRECL-IHADCB
         DR    R0,R14
         MR    R0,R14
         STH   R1,UZFLDCB+DCBBLKSI-IHADCB
         CR    R1,R14              CHECK THAT BLOCK CAN HOLD A RECORD
         BNL   UNZPRIME            BLOCKSIZE IS BIG ENOUGH FOR RECORD
         STH   R14,UZFLDCB+DCBBLKSI-IHADCB
UNZTOVFL OI    UZFLDCB+DCBRECFM-IHADCB,DCBRECTO
         B     UNZPRIME            GO PRIME JFCB
UNZIPSDB LA    R0,UNZEXLS1         POINT TO EXIT LIST
         STCM  R0,7,UZFLDCB+DCBEXLSA-IHADCB
         SPACE
         DROP  R2                  RZDE
         SPACE
*         OPEN OUTPUT FILE TO HOLD UNZIPPED DATA
         SPACE
UNZPRIME MVI   OPEND,X'80'
         OPEN  (UZFLDCB,OUTPUT),MF=(E,OPEND)
         TM    STATUS,STABEND      OPEN ABEND OCCURRED?
         BO    *+8                 YES, MESSAGE SET
         MVI   MSG,159             OPEN FAILED
         NI    STATUS,255-STABEND  RESET DCB ABEND FLAG
         TM    UZFLDCB+DCBOFLGS-IHADCB,DCBOFOPN
         BNO   UNZFFREE            COULD NOT OPEN SO ABORT UNZIP
         SPACE
*         ACQUIRE WRITE BUFFER
         SPACE
         LA    R0,7                ROUND UP TO NEXT DOUBLEWORD
         LH    R2,UZFLDCB+DCBLRECL-IHADCB
         AR    R0,R2
         SRL   R0,3
         SLL   R0,3
         ST    R0,UNZWBFLN         SAVE BUFFER LENGTH
         MVI   MSG,123             REQUEST ABORTED - STORAGE FULL
         GETSTOR RC,LV=(0),LOC=(31,64)
         LTR   R15,R15             SUCCESS?
         BNZ   UNZFCLOS            NO
         ST    R1,UNZWBFAD         SAVE BUFFER ADDRESS
         TM    UZFLDCB+DCBRECFM-IHADCB,DCBRECF
         BO    UNZRDWOK            NO NEED FOR AN RDW
         LA    R0,4                GET RDW SIZE
         AR    R1,R0               GET DATA START ADDRESS
         SR    R2,R0               GET ACTUAL DATA CAPACITY
UNZRDWOK STM   R1,R2,UNZREC@#      OUTPUT RECORD DATA AREA DETAILS
*         ACQUIRE STRING AREA
         GETMAIN RC,LV=32768,LOC=(31,64)
         LTR   R15,R15             SUCCESS?
         BNZ   UNZFCLOS            NO
         ST    R1,STRINGAD         YES, SAVE STRING ADDRESS
         MVI   MSG,0               RESET PENDING MESSAGE
         B     REVUNZIP            GO DO THE UNZIPPING
         SPACE
************************************************************
*                                                          *
*         HANDLE UNZIP SET UP FAILURE                      *
*                                                          *
************************************************************
         SPACE
*         CLOSE THE OUTPUT FILE
         SPACE
UNZFCLOS MVI   CLOSED,X'80'
         CLOSE UZFLDCB,MF=(E,CLOSED)
         SPACE
*         DEALLOCATE THE OUTPUT FILE
         SPACE
UNZFFREE XC    MYDAPB,MYDAPB
         MVI   DA18CD+1,X'18'
         MVC   DA18DDN,UNZOUTDD    DDNAME
         MVC   DA18MNM,BLANKS      MEMBER NAME
         MVC   DA18SCLS,BLANKS     SYSOUT CLASS IS 2-BYTE FIELD
         XC    MYECB,MYECB
         XASAM24
         LA    R1,MYDAPL
         L     R15,CVTPTR(,0)      CVT
         L     R15,CVTDAIR-CVT(,R15)
         BASR  R14,R15             CALL IKJDAIR
         XASAM31
         XC    UNZOUTDD,UNZOUTDD   CLEAR UNZIP OUTPUT DD NAME
         MVC   COUNT,UZFCOUNT      RESTORE FILE STATUS
         MVC   KOUNT64,UZFKOUNT
         MVC   MAXPOINT,UZFMAXPT
         SPACE
*         FREE STORAGE AND EXIT BACK TO MAINLINE
         SPACE
         BAS   R6,UNZCLEAN         FREE UNZIP STORAGE AREAS
         B     UNZFLNOP            RETURN WITH MESSAGE SET
         SPACE
************************************************************
*                                                          *
*         HANDLE COMPLETION OF UNZIP PROCESSING            *
*                                                          *
************************************************************
         SPACE
*         RESUME DATA REVIEW - BUT NOW REVIEW UNZIPPED DATA
         SPACE
UNZIPPED MVI   CLOSED,X'80'        CLOSE NEW UNZIPPED DATA FILE
         CLOSE UZFLDCB,MF=(E,CLOSED)
         SPACE
         AIF   (NOT &ENV390).UNZMVS
         TM    $UCBAD,$HFSIO       IS THE ZIP ARCHIVE A UNIX FILE?
         BNO   UNZMVSDS            NO, IT IS AN MVS DATA SET
         XC    TTR,TTR
         XASAM24
         POINT DYNDCBW,TTR         POINT BACK TO THE START OF IT
         XASAM31
.UNZMVS  ANOP
UNZMVSDS MVI   CLOSED,X'80'        CLOSE THE ZIP ARCHIVE FILE
         CLOSE DYNDCBW,MF=(E,CLOSED)
         NI    STATUS,255-STOPEN   CLOSED
         TM    STATUS,STGMVU       ENSURE ZIP ARCHIVE BUFFERS FREED
         BZ    GMVUGONE
         L     R0,ANSWER+4         LENGTH
         L     R1,ANSWER           ADDRESS
         FREEMAIN RU,LV=(0),A=(1)
         NI    STATUS,255-STGMVU
         SPACE
GMVUGONE NI    STATUS8,255-$8ZIPD  NO LONGER LOOKING AT ZIP DIRECTORY
         NI    STATUS13,255-$13_L  RESET PRE-LOADED DATA FLAG
         OI    STATUS8,$8ZIPU      NOW LOOKING AT UNZIPPED DATA
         LA    R1,UNZOUTDD         POINT TO DDNAME
         L     R15,DDLOCADR        POINT TO SUBROUTINE
         BASR  R14,R15             FIND SUBJECT DD TIOT ENTRY
         ICM   R15,7,17(R15)       ASSUME ALLOCATED - GEY UCB ADDRESS
         ST    R15,$UCBAD          SAVE UCB ADDRESS AND CLEAR FLAGS
         ICM   R1,15,FMTAREA       GET FORMATTING DYNAMIC AREA ADDRESS
         BZ    UNZNOFMT            FORMATTING WAS NOT USED - BUT HOW??
         USING @FMTAREA,R1
         L     R0,FMTSIZE          GET FORMAT AREA SUBPOOL AND SIZE
         DROP  R1                  @FMTAREA
         FREEMAIN R,LV=(0),A=(1)   FREE THE FORMATTING DYNAMIC AREA
UNZNOFMT NI    MODE,MD_RECRS+MD_FS RESET ALL OTHER MODE FLAGS
         MVC   ZIPDIRF#,CALLPARM   SAVE DIRECTORY FILE NUMBER
         SR    R0,R0
         ST    R0,FMTAREA          CLEAR FORMAT AREA POINTER
         IC    R0,ZLFHNMLN         GET THE FILE NAME LENGTH
         CLI   ZLFHNMLN,44         NAME TOO BIG TO FIT?
         BNH   *+8                 NO
         LA    R0,44               YES, REDUCE TO MAXIMUM
         MVC   DSNAIM+2(44),ZLFHNAME
         STH   R0,DSNAIM           FINALIZE FILE NAME TO DISPLAY
         TR    DSNAIM+2(44),PERIODS HANDLE BAD FILE NAME CHARACTERS
         LA    R0,16               GET ENTRY CODE (FREEMAIN)
         L     R15,DIVADDR2        LOAD REVDIV ENTRY POINT
         BASR  R14,R15             CALL IT TO FREE CACHED ZIP DETAILS
         BAS   R6,UNZCLEAN         FREE UNZIP STORAGE AREAS
         MVI   DSORG,DS1DSGPS      NEW DATA SET IS SEQUENTIAL
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         L     R5,INIT2ADR         LOAD SUBROUTINE ADDRESS
         BR    R5                  PERFORM RE-INITIALIZATION
         SPACE
************************************************************
*                                                          *
*         FREE UNZIP DYNAMIC STORAGE AREAS                 *
*                                                          *
************************************************************
         SPACE
UNZCLEAN LM    R0,R1,ARAYDTLS      GET LZW CODE ARRAY DETAILS
         LTR   R1,R1               WAS IT ACQUIRED?
         BZ    UNZNOARY            NO
         FREEMAIN RU,LV=(0),A=(1),SP=3
UNZNOARY LM    R0,R1,UNZWBFLN      GET WRITE BUFFER DETAILS
         LTR   R1,R1               WAS WRITE BUFFER ACQUIRED?
         BZ    UNZWBGON            NO
         FREEMAIN RU,LV=(0),A=(1)  YES, FREE IT
UNZWBGON ICM   R1,15,STRINGAD      POINT TO THE STRING AREA
         BZ    UNZNOSTR            NO STRING AREA ACQUIRED
         FREEMAIN RU,LV=32768,A=(1)
UNZNOSTR LH    R0,UZFLWKLN         GET DYNAMIC AREA SIZE
         LR    R1,R13              POINT TO DYNAMIC AREA
         L     R13,4(,R13)         POINT TO PREVIOUS SAVE AREA
         OI    11(R13),X'01'       INVALIDATE FORWARD POINTER
         FREEMAIN R,LV=(0),A=(1)   FREE DYNAMIC AREA
         BR    R6                  RETURN TO CALLER
         SPACE
         DROP  R5                  UNZIPFIL
         DROP  R10,R11,R12,R3      REVIEW2
         SPACE
************************************************************
*                                                          *
*         UNZIP OUTPUT ABEND EXIT AND DCB DATA             *
*                                                          *
************************************************************
         SPACE
*    THIS EXIT COULD BE CALLED FOR OPEN AND CLOSE WHEN THE
*    "UNZIPFIL" ADDRESSABILITY IS IN EFFECT, OR FOR PUT
*    WHEN THE "REVUNZIP" ADDRESSABILITY IS IN EFFECT.
*    THEREFORE, RELY ON NEITHER AND USE GPR15 FOR THE LOCAL BASE.
         SPACE
         USING UNZABNDX,R15
UNZABNDX MVC   UZIOABND,0(R1)      COPY ABEND CODE AND OPTION MASK
         OI    UZIOABND+1,X'0F'    GET CODE READY FOR UNPACK
         OI    STATUS,STABEND      INDICATE I/O ABEND
         TM    3(R1),B'00001110'   ANY PROCESSING ALLOWED?
         BZR   R14                 NO
         MVI   3(R1),4             YES, IGNORE THE ABEND
         MVC   MSG(MSGUZABL),MSGUZAB
         UNPK  UZABCDE,UZIOABND(2)
         UNPK  UZABRSN(3),UZIOABND+2(2)
         TR    UZABCDE(6),UZABHEX-240
         MVI   UZABCDE+3,C'-'
         MVI   UZABRSN+2,C' '
         OI    STATUS7,$7BELL
         BR    R14
         DROP  R15                 UNZABNDX
         SPACE
MSGUZAB  MESG  'ABEND SXXX-XX OCCURRED'
UZABCDE  EQU   MSG+9,3
UZABRSN  EQU   MSG+13,2
         SPACE
         USING IHADCB,R1
UNZOPENX XC    DCBBLKSI,DCBBLKSI   FORCE SYSTEM-DETERMINED BLOCKSIZE
         BR    R14
         DROP  R1                  IHADCB
         SPACE
         PRINT NOGEN
UNZIPDCB DCB   DDNAME=UNZIPPED,DSORG=PS,MACRF=PM,EXLST=UNZEXLS2,       +
               RECFM=VB
$UNZDCBL EQU   *-UNZIPDCB
         PRINT GEN
UNZEXLS1 DC    AL1(X'05'),AL3(UNZOPENX)
UNZEXLS2 DC    AL1(X'91'),AL3(UNZABNDX)
UNZALCMS DC    CL36'OUTPUT ALLOCATION FAILED RC=XX DARC='
UZFLWKLN DC    Y($UNZWKLN)         SIZE OF LOCAL DYNAMIC AREA
         DC    0D'0'
         LTORG
         DC    0F'0'
UZABHEX  DC    CL16'0123456789ABCDEF'
         SPACE
************************************************************
*                                                          *
*         UNZIP THE SELECTED FILE                          *
*                                                          *
************************************************************
         SPACE
         USING UNZIPFIL,R5
REVUNZIP LA    R15,1
         LA    R10,REVUNZIP
         DROP  R5                  UNZIPFIL
         LA    R11,4095(R15,R10)
         LA    R12,4095(R15,R11)
         USING REVUNZIP,R10,R11,R12
         STM   R10,R12,BASE3       SAVE LOCAL BASE REGISTER VALUES
         SPACE
         XC    DEBLOCKS(12),DEBLOCKS
         SR    R0,R0
         MVC   UZFCOUNT,COUNT      SAVE VALUES IN CASE UNZIP FAILS
         MVC   UZFKOUNT,KOUNT64
         MVC   UZFMAXPT,MAXPOINT
         ST    R0,FNDNUM           RESET LAST-FOUND RECORD NUMBER
         ST    R0,FNDOFF           RESET LAST-FOUND OFFSET
         ST    R0,COUNT            RESET LOGICAL RECORD COUNT
         ST    R0,KOUNTHI          RESET BYTE COUNT
         ST    R0,KOUNT            RESET BYTE COUNT
         ST    R0,MAXPOINT         RESET FURTHEST RECORD READ
         MVI   SYNADSW,X'00'       RESET SYNAD ERROR FLAG
         TM    DSORG,DS1DSGPO      PARITIONED INPUT?
         BO    UZPT2TOP            YES, GO POINT TO MEMBER START
         CLI   $CONCAT,0           SINGLE VOLUME SEQUENTIAL FILE?
         BE    UZPT2TOP            YES, GO POINT TO MEMBER START
         MVI   CLOSED,X'80'        NO, NEED A CLOSE AND OPEN CYCLE
         CLOSE (DYNDCBW),MF=(E,CLOSED)
         MVI   $CONCAT,0           RESET RELATIVE VOLUME COUNT
         MVI   OPEND,X'80'
         OPEN  (DYNDCBW,INPUT),MF=(E,OPEND)
         TM    DYNDCBW+DCBOFLGS-IHADCB,DCBOFOPN
         BO    UZBK@TOP            NOW OPEN AT START OF FILE
         NI    STATUS,255-STOPEN   NO, UPDATE STATUS FLAG
         MVI   MSG,159             OPEN FAILED
         B     UZFLFAIL            GO RETURN ERROR STATUS
UZPT2TOP L     R1,CHKPTTOP         POINT TO FIRST CHECKPOINT ENTRY
         MVC   TTR,4(R1)           COPY FIRST RECORD NOTE ADDRESS
         XASAM24
         POINT DYNDCBW,TTR         POINT TO FIRST RECORD
         XASAM31
         SPACE
************************************************************
*                                                          *
*         POSITION TO SELECTED FILE WITHIN ARCHIVE         *
*                                                          *
************************************************************
         SPACE
UZBK@TOP L     R2,ZPFLRZDE         POINT TO THE RZDE
         USING RZDE,R2
         OC    RZDEOF64,RZDEOF64   NEED TO POSITION FURTHER IN?
         LM    R2,R3,RZDEOF64      GET THE FILE'S LOCAL HEADER RBA
         DROP  R2                  RZDE
         BZ    UZFLHERE            NO, ALREADY HERE
         AIF   (NOT &ENV390).UZTORBA
         TM    $UCBAD,$HFSIO       PROCESSING HFS FILE?
         BNO   UZGO2RBA            NO, GO CHECK DEVICE TYPE
         STM   R2,R3,DYNDCBW+12    YES, PUT TARGET RBA INTO PHONY DCB
         XASAM24
         POINT DYNDCBW,DYNDCBW+16  JUMP TO SELECTION START RBA
         XASAM31
         B     UZFLHERE            GO SEE IF IT IS THERE
UZGO2RBA DS    0H
.UZTORBA ANOP
         LA    R4,1                ONE EXTRA FOR LOW HALF BY ITSELF
         AR    R4,R2               COPY TARGET START RBA HIGH HALF
         LA    R6,1                SET UP FOR INITIAL LOW ORDER SKIP
         SR    R2,R2               INDICATE DATA IS TO BE DISCARDED
         LA    R1,UZFLRZSV         POINT TO NEW SAVE AREA
UZFLSKIP BAS   R14,READZIP         POSITION TO LOCAL FILE HEADER
         TM    UZFLAGS,$UZEOF      REACHED END OF FILE?
         BO    UZFLMISS            YES, COULD NOT FIND REQUESTED FILE
         LA    R3,1
         SLL   R3,22               GET 2**22
         BCT   R6,UZFLSKIP         ANOTHER 4MB SKIPPED
         LA    R6,1024             GET 2**10
         BCT   R4,UZFLSKIP         ANOTHER 4GB SKIPPED
UZFLHERE LA    R2,LCLHDR           POINT TO THE LOCAL HEADER AREA
         LA    R3,ZLFHFXLN         GET THE LENGTH OF FIXED PART
         LA    R1,UZFLRZSV         POINT TO NEW SAVE AREA
         BAS   R14,READZIP         READ IN THE LOCAL HEADER ID
         TM    UZFLAGS,$UZEOF      REACHED END OF FILE?
         BO    UZFLMISS            YES, COULD NOT FIND REQUESTED FILE
         CLC   =X'504B0304',ZLFHID LOCAL FILE HEADER?
         BNE   UZFLMISS            NO, COULD NOT FIND REQUESTED FILE
         SPACE
         SR    R3,R3
         IC    R3,ZLFHNMLN         GET THE FILE NAME LENGTH
         LA    R2,ZLFHNAME         POINT TO NAME AREA
         BAS   R14,READZIP         READ IN THE FILE NAME
         TM    UZFLAGS,$UZEOF      REACHED END OF FILE?
         BO    UZFLMISS            YES, COULD NOT FIND REQUESTED FILE
         SR    R0,R0
         SR    R2,R2               ZERO FOR SKIP AND CLEAR FOR INSERT
         ICM   R0,2,ZLFHNMLN+1     GET HIGH-ORDER NAME LENGTH
         ICM   R3,1,ZLFHXFLN
         ICM   R3,2,ZLFHXFLN+1     GET EXTRA FIELD LENGTH
         AR    R3,R0               GET LENGTH OF REST OF HEADER
         BZ    UZFLHDOK            LOCAL HEADER HAS ALL BEEN READ
         BAS   R14,READZIP         SKIP PAST THE REST OF THE HEADER
UZFLHDOK IC    R2,ZLFHNMLN         GET THE FILE NAME LENGTH
         C     R2,ZPFLNMLN         SAME LENGTH AS SELECTED FILE?
         BNE   UZFLMISS            NO, COULD NOT FIND REQUESTED FILE
         LA    R1,ZLFHNAME         YES, POINT TO THE NAME
         LR    R0,R2               GET ITS LENGTH
         XLATE (1),(0),TO=E        TRANSLATE IT TO EBCDIC
         LA    R14,ZLFHNAME        POINT TO FILE NAME FROM HEADER
         L     R0,ZPFLNMAD         POINT TO SELECTED FILE NAME
         LR    R15,R2              COPY FILE NAME LENGTH
         LR    R1,R2               COPY FILE NAME LENGTH
         CLCL  R14,R0              IS THIS THE SELECTED FILE?
         BE    UZFLDATA            YES, GO UNZIP IT
         SPACE
         DROP  R10,R11,R12         REVUNZIP
         SPACE
UZFLATTN MVI   MSG,183             EXPECTED ZIP HEADER NOT FOUND
UZFLMISS MVI   MSG,183             EXPECTED ZIP HEADER NOT FOUND
UZFLFAIL LM    R10,R12,BASE2       RESTORE MAIN BASE REGISTERS
         L     R3,BASE2+12
         USING REVIEW2,R10,R11,R12,R3
         L     R5,UNZIPFAD         RESTORE LOCAL BASE REGISTER
         USING UNZIPFIL,R5
         B     UNZFCLOS            RETURN TO TIDY UP
         SPACE
         DROP  R5                  UNZIPFIL
         DROP  R10,R11,R12,R3      REVIEW2
         USING REVUNZIP,R10,R11,R12
         SPACE
************************************************************
*                                                          *
*         PERFORM DATA EXTRACTION PRELIMINARIES            *
*                                                          *
************************************************************
         SPACE
UZFLDATA TM    ZLFHFLG1,ZDATADSC   DATA DESCRIPTOR PRESENT?
         BNO   UZFLLHOK            NO, LOCAL HEADER IS COMPLETE
         L     R2,ZPFLRZDE         YES, POINT TO REVIEW ZIP D.E.
         USING RZDE,R2
         MVC   ZLFHMETA,RZDEMETA   SUPPLY MISSING INFORMATION
         DROP  R2                  RZDE
UZFLLHOK MVI   MSG,97              EMPTY FILE
         ICM   R3,1,ZLFHSZCM       GET COMPRESSED FILE BYTE COUNT
         ICM   R3,2,ZLFHSZCM+1
         ICM   R3,4,ZLFHSZCM+2
         ICM   R3,8,ZLFHSZCM+3
         LTR   R3,R3               EMPTY FILE?
         BZ    UZFLFAIL            YES, NO UNZIPPING TO DO
         MVI   MSG,140             UNSUPPORTED COMPRESSION TYPE
         CLI   ZLFHMETH,8          IS THE METHOD DEFLATE?
         BE    UZFLSUPP            YES, THAT SHOULD WORK
         SR    R2,R2               CLEAR FOR INSERT
         IC    R2,ZLFHMETH         GET COMPRESSION METHOD
         LA    R2,8(,R2)           ADD 8
         ST    R2,LZWDCDSZ         SAVE EITHER 8 (STORE) OR 9 (LZW)
         CLI   ZLFHMETH,1          IS THE METHOD STORE OR SHRINK?
         BH    UZFLFAIL            NO, METHOD IS NOT SUPPORTED HERE
         BAS   R14,LZWARRAY        YES, GO SET UP THE CODE ARRAY
         SPACE
UZFLSUPP MVI   MSG,0               CLEAR PENDING MESSAGE
         ST    R3,PACKSIZE         SAVE COMPRESSED BYTE COUNT
         ICM   R3,1,ZLFHSZUN       GET UNCOMPRESSED FILE BYTE COUNT
         ICM   R3,2,ZLFHSZUN+1
         ICM   R3,4,ZLFHSZUN+2
         ICM   R3,8,ZLFHSZUN+3
         ST    R3,FULLSIZE         SAVE UNCOMPRESSED FILE BYTE COUNT
         SPACE
************************************************************
*                                                          *
*         UNZIP THE DATA OF THE LOCATED FILE               *
*                                                          *
************************************************************
         SPACE
         MVI   UZFL_1ST,255        NEXT ACCESS WILL BE THE FIRST
         SR    R0,R0               GET LOW VALUES
         BCTR  R0,0                GET HIGH VALUES
         ST    R0,UNFL_CRC         INITIALIZE CRC ACCUMULATOR
         SPACE
UZFLNREC EQU   *                   DECOMPRESSION LOOP FOR NEW RECORD
         MVC   UZRECCS(8),UNZREC@# PREPARE FOR NEW OUTPUT RECORD
UZFLOREC EQU   *                   DECOMPRESSION LOOP FOR SAME RECORD
         ICM   R0,15,STRINGLN      IS STRING EMPTY?
         BNZ   UZOUTPUT            NO, USE UP PENDING DATA
         ST    R0,OLDSTRLN         YES, RESET OLD DATA BYTE COUNT
         TM    UZFLAGS,$UZEOD      END OF ZIPPED DATA REACHED?
         BO    UNZFINAL            YES, ALL DONE
         SPACE
         CLI   ZLFHMETH,8          WAS THE FILE DEFLATED?
         BNE   LZWGETLP            NO, GO DO UNSHRINK OR RESTORE
         CLI   UZFL_1ST,255        FIRST TIME HERE?
         BE    INFLATE             YES, GO DO INFLATE
         B     RESUME_I            NO, GO RESUME INFLATE
         SPACE
************************************************************
*                                                          *
*         EXTRACT AND PROCESS EACH LZW CODE                *
*                                                          *
************************************************************
         SPACE
LZWGETLP BAS   R14,LZWGETCD        GET AN INPUT LZW CODE
         TM    UZFLAGS,$UZEOF      REACHED END OF FILE?
         BO    UZFL_EOF            YES, FILE HAS BEEN TRUNCATED
         LTR   R15,R15             REACHED END OF ZIPPED DATA?
         BM    UZFL_EOD            YES
         CLI   UZFL_256,0          LOOKING FOR A SUBCODE OF 256?
         BE    LZW256CK            NO
         MVI   UZFL_256,0          YES, RESET FLAG
         SPACE
         CH    R15,=H'1'           SUBCODE 1?
         BNE   LZWPRGCK            NO, GO CHECK FOR SUBCODE 2
         LA    R15,1               YES, GET INCREMENT VALUE
         A     R15,LZWDCDSZ        ADD CURRENT BITS PER CODE
         ST    R15,LZWDCDSZ        SAVE INCREMENTED COUNT
         B     LZWGETLP            GO GET THE NEXT CODE
         SPACE
LZWPRGCK CH    R15,=H'2'           SUBCODE 2?
         BNE   UZBAD256            NO, INVALID
         BAS   R14,LZWPRUNE        YES, PRUNE THE ARRAY
         B     LZWGETLP            GO GET THE NEXT CODE
         SPACE
LZW256CK CH    R15,=H'256'         SUBCODE 256?
         BNE   LZWNT256            NO, CODE REPRESENTS DATA
         MVI   UZFL_256,255        YES, SUBCODE OF 256 NOW EXPECTED
         B     LZWGETLP            GO GET THE NEXT CODE
         SPACE
UZBAD256 MVC   MSG(UZ256ML),UZ256M UNKNOWN SUBCODE OF CODE 256
         CVD   R15,DOUBLE          GET THE SUBCODE IN DECIMAL
         OI    DOUBLE+7,X'0F'      PREPARE FOR UNPACK
         UNPK  MSG+18(4),DOUBLE    SHOW THE SUBCODE ENCOUNNTERED
         B     UZFL_BEL            GO SHOW ERROR MESSAGE
         SPACE
LZW_FULL MVC   MSG(UZFULML),UZFULM DATA ERROR - LZW CODE ARRAY FULL
         B     UZFL_BEL            GO SHOW ERROR MESSAGE
         SPACE
UZFL_EOF MVC   MSG(UZEOFML),UZEOFM UNEXPECTED END-OF-FILE
         SPACE
UZFL_BEL OI    STATUS7,$7BELL      SOUND BELL FOR ERROR MESSAGE
         SPACE
UZFL_EOD OI    UZFLAGS,$UZEOD      FLAG NO MORE ZIPPED DATA
         ICM   R0,15,STRINGLN      ANY DATA QUEUED FOR OUTPUT?
         BNZ   UZOUTPUT            YES, GO RETURN THE LAST DATA
         B     UNZFINAL            NO, ALL DATA NOW UNZIPPED
         SPACE
LZWNT256 LR    R14,R15             COPY CODE JUST READ
         MH    R14,=Y(LZWEL)       GET INDEX INTO CODE ARRAY
         A     R14,ARAYADDR        POINT TO THE ARRAY ENTRY
         USING LZWENTRY,R14
         STH   R15,LZWNEW          SAVE CODE JUST READ
         STH   R15,LZWCRNT         SAVE CODE TO EXPAND
         CLI   UZFL_1ST,0          FIRST CODE READ?
         BNE   LZWFIRST            YES, SPECIAL CASE
         CH    R15,=H'256'         EXISTING CODE?
         BL    LZWDECOD            YES
         ICM   R0,3,LZWDEPTH       EXISTING CODE?
         BZ    LZW_UNKN            NO, UNUSED ARRAY ENTRY
*    THIS IS RARE, BUT NOT AS RARE AS THE ORPHAN CASE BELOW.
         LH    R1,LZWPARNT         START ORPHAN CHECK
         CH    R1,=H'256'          DOES THE PARENT EXIST?
         BL    LZWDECOD            YES, NOT AN ORPHAN
         MH    R1,=Y(LZWEL)        GET INDEX INTO CODE ARRAY
         A     R1,ARAYADDR         POINT TO THE PARENT ENTRY
         DROP  R14                 LZWENTRY
         USING LZWENTRY,R1
         ICM   R0,3,LZWDEPTH       DOES THE PARENT EXIST?
         BNZ   LZWDECOD            YES, PEDIGREE FULLY VERIFIED
         DROP  R1                  LZWENTRY
*    THIS BRANCH IS NEARLY ALWAYS TAKEN.  IF NOT, THE CODE'S
*    ENTRY'S PARENT IS INVALID, SO EVEN THOUGH THE CODE'S ENTRY
*    SEEMS VALID, IT IS REALLY AN ORPHAN.  IN THIS CASE, APPEND
*    THE ORPHAN'S CODE POINT TO THE DATA, AND THEN PROCESS AS
*    FOR AN INVALID ENTRY.
         USING LZWENTRY,R14
         IC    R7,LZWCHAR          SAVE ORPHAN'S CODE POINT
         OI    UZFLAGS,$UZORF      REMEMBER TO APPEND IT LATER
         SPACE
LZW_UNKN LH    R14,LZWOLD          GET THE PREVIOUS CODE
         STH   R14,LZWCRNT         MAKE AN EXTANT ONE CURRENT
         MH    R14,=Y(LZWEL)       GET INDEX INTO CODE ARRAY
         A     R14,ARAYADDR        POINT TO THE ARRAY ENTRY
         B     LZWDECOD            JUMP OVER SPECIAL CASE CODE
         SPACE
LZWFIRST STH   R15,LZWOLD          PROCESS FIRST CODE READ
         MVC   CRNTCHAR,LZWCHAR    SAVE ITS DATA CODE POINT
         SPACE
LZWDECOD LH    R1,LZWDEPTH         GET THE STRING LENGTH CODE
         L     R15,STRINGLN        GET EXISTING DECODED DATA LENGTH
         ST    R15,OLDSTRLN        SAVE IT
         LA    R0,1(,R1)           GET THE STRING LENGTH INCREASE
         AR    R0,R15              GET THE STRING LENGTH
         AR    R1,R15              GET LAST STRING BYTE OFFSET
         ST    R0,STRINGLN         SAVE THE NEW STRING LENGTH
         AL    R1,STRINGAD         POINT TO LAST BYTE OF STRING
         AL    R15,STRINGAD        POINT TO FIRST NEW STRING BYTE
LZWDECLP MVC   0(1,R1),LZWCHAR     COPY DATA CODE POINT
         CLR   R1,R15              BACKED UP TO START, YET?
         BE    LZWNEWCK            YES, GO PROCESS DECODED DATA
         LH    R14,LZWPARNT        NO, GET THE PARENT'S CODE
         MH    R14,=Y(LZWEL)       GET INDEX INTO CODE ARRAY
         A     R14,ARAYADDR        POINT TO THE PARENT'S ENTRY
         BCT   R1,LZWDECLP         GO INSERT PARENT'S CHARACTER
         DROP  R14                 LZWENTRY
         SPACE
LZWNEWCK CLC   LZWCRNT,LZWNEW      WAS THE LATEST CODE KNOWN?
         BE    LZWCRC32            YES
         LR    R1,R0               NO, GET THE STRING LENGTH
         LA    R4,1(,R1)           GET THE NEW STRING LENGTH
         AL    R1,STRINGAD         POINT PAST EXISTING STRING
         MVC   0(1,R1),CRNTCHAR    ADD THE NEW CHARACTER
         ST    R4,STRINGLN         SAVE THE NEW STRING LENGTH
         TM    UZFLAGS,$UZORF      DID THE CODE SPECIFY AN ORPHAN?
         BNO   LZWCRC32            NO, THAT IS VERY RARE
         STC   R7,1(,R1)           YES, APPEND ITS CODE POINT
         LA    R4,1(,R4)           INCREMENT THE LENGTH OF STRING
         ST    R4,STRINGLN         SAVE THE NEW STRING LENGTH
         NI    UZFLAGS,255-$UZORF  RESET THE FLAG
         SPACE
LZWCRC32 LR    R4,R15              POINT TO NEW DECODED STRING
         L     R5,STRINGLN
         S     R5,OLDSTRLN         GET ITS LENGTH
         L     R14,FULLSIZE
         SR    R14,R5              REDUCE UNCOMPRESSED BYTES LEFT
         ST    R14,FULLSIZE
         BAS   R14,UPDTCRC         FEED THIS DATA INTO CRC CALCS
         SPACE
         CLI   ZLFHMETH,0          UNCOMPRESSED DATA?
         BE    UZOUTPUT            YES, DATA READY FOR OUTPUT
         SPACE
         MVC   CRNTCHAR,0(R4)      GET NEW "CURRENT CHARACTER"
         SPACE
         CLI   UZFL_1ST,0          FIRST CODE READ?
         MVI   UZFL_1ST,0          RESET FIRST-TIME FLAG
         BNE   UZOUTPUT            YES, FIRST CODE NOW PROCESSED
         SPACE
         LA    R15,LZWEL           GET ARRAY ENTRY LENGTH
         SLL   R15,13              MULTIPLY BY 8192
         AL    R15,ARAYADDR        GET LIMIT OF SEARCH
         L     R14,FULLUP2@        GET SEARCH START ADDRESS
         L     R1,FULLUP2#         GET SEARCH START CODE
         USING LZWENTRY,R14
LZWSCHLP ICM   R0,3,LZWDEPTH       IS THIS ENTRY UNUSED?
         BZ    LZWACHLD            YES
         LA    R14,LZWENTND        NO, POINT TO THE NEXT ONE
         LA    R1,1(,R1)           INCREMENT THE ASSOCIATED CODE
         CR    R14,R15             REACHED THE END YET?
         BL    LZWSCHLP            NO, JUST AS WELL
         B     LZW_FULL            YES, THE ARRAY IS FULL
         DROP  R14                 LZWENTRY
         SPACE
LZWACHLD ST    R14,FULLUP2@        UPDATE SEARCH START POINT
         ST    R1,FULLUP2#         ARRAY FULL UP TO THIS POINT
         SPACE
         LH    R15,LZWOLD          GET THE PARENT'S CODE
         MH    R15,=Y(LZWEL)       GET INDEX INTO CODE ARRAY
         A     R15,ARAYADDR        POINT TO THE PARENT'S ENTRY
         USING LZWENTRY,R15        "PARENT"
         LH    R1,LZWDEPTH         GET THE PARENT'S DEPTH
         L     R2,LZWCHILD         POINT TO THE PREVIOUS SIBLING
         ST    R14,LZWCHILD        SET THE LATEST CHILD'S ADDRESS
         DROP  R15                 LZWENTRY
         USING LZWENTRY,R14        "NEW CHILD"
         MVC   LZWCODE,FULLUP2#+2  SET THE NEW CODE
         MVC   LZWPARNT,LZWOLD     SET THE PARENT'S CODE
         LA    R1,1(,R1)           GET THE NEW DEPTH
         STH   R1,LZWDEPTH         SET IT
         ST    R2,LZWNEXT          CHAIN TO OLDER SIBLING
         MVC   LZWCHAR,CRNTCHAR    SET THE APPEND CODE POINT
         SPACE
*    ORPHANS ARE CREATED WHEN A NEW ENTRY HAS A FRESHLY PURGED PARENT.
*    (THE PURGING TOOK PLACE TO MAKE ROOM FOR THE NEW CHILD ENTRY.)
*    THE PARENT HAD NO OTHER CHILD OR IT WOULD NOT HAVE BEEN PURGED.
*    THEREFORE, ORPHANS HAVE NO SIBLINGS.  ALSO, SINCE AN ORPHAN IS
*    DISCONNECTED UNTIL ADOPTED, AN ORPHAN CAN HAVE NO CHILDREN.
*
*    ORPHANS ARE ADOPTED WHEN A NEW ENTRY ALREADY HAS A CHILD POINTER;
*    THAT IS, WHEN THE PURGED PARENT'S ENTRY IS REUSED.
         SPACE
         ICM   R15,15,LZWCHILD     ADOPTING AN ORPHAN?
         BZ    LZWORFOK            NO
         DROP  R14                 LZWENTRY
         USING LZWENTRY,R15        "ADOPTED ORPHAN"
         LA    R1,1(,R1)           GET THE ORPHAN'S DEPTH
         STH   R1,LZWDEPTH         SET THE CODE'S STRING LENGTH
         DROP  R15                 LZWENTRY
         SPACE
LZWORFOK LTR   R2,R2               ANY PREVIOUS CHILD?
         BZ    LZWCHLD1            NO
         USING LZWENTRY,R2         "OLDER CHILD"
         ST    R14,LZWPREV         CHAIN BACK TO NEW SIBLING
         DROP  R2                  LZWENTRY
         SPACE
LZWCHLD1 MVC   LZWOLD,LZWNEW       GET READY FOR ANOTHER CODE
         SPACE
************************************************************
*                                                          *
*         ACCUMULATE OUTPUT DATA                           *
*                                                          *
************************************************************
         SPACE
UZOUTPUT L     R14,STRINGAD        POINT TO STRING
         A     R14,OLDSTRLN        POINT TO STRING TO OUTPUT
         L     R15,STRINGLN        GET LENGTH TO OUTPUT
         SPACE
         SPACE
*
*    SEARCH FOR END-OF-RECORD CONTROL CODES
*
         TM    ZFTYPE,ZF_EOR       NEED TO LOOK FOR CONTROL CODES?
         BZ    EOR_OKAY            NO
         LTR   R15,R15             ANY DATA?
         BNP   EOR_OKAY            NO, SO NO CONTROL CODES
CC_LOOP  TM    ZFTYPE,ZCFHASCI     PROCESSING ASCII DATA?
         BO    CC_ASCII            YES
         CLI   0(R14),X'15'        FOUND EBCDIC NEW LINE?
         BE    CC_EOREC            YES, END OF EBCDIC RECORD
         B     CC_NEXT             NO, CONTINUE LOOKING
CC_ASCII EQU   *                   CHECK FOR ASCII CONTROL CODES
         CLI   0(R14),X'0A'        FOUND ASCII LINE FEED?
         BE    CC_EOREC            YES, END OF ASCII RECORD
CC_NEXT  LA    R14,1(,R14)         POINT TO NEXT DATA BYTE
         BCT   R15,CC_LOOP         KEEP LOOKING
         B     EOR_OKAY            NO CONTROL CODE SO PASS IT ALL
         SPACE
CC_EOREC OI    UZFLAGS,$UZCC       REMEMBER CONTROL CODE REACHED
         SR    R15,R15             THIS IS ALL TO WRITE NOW
         SPACE
*
*    COPY UNZIPPED DATA TO CALLER'S AREA
*
EOR_OKAY LM    R4,R5,UZRECCS       GET TARGET AREA ADDRESS AND SIZE
         SPACE
         AR    R15,R14             POINT PAST DATA TO PASS BACK
         L     R14,STRINGAD        POINT TO STRING
         A     R14,OLDSTRLN        POINT TO THE DATA TO PASS BACK
         SR    R15,R14             GET LENGTH OF DATA TO PASS BACK
         BNP   UZTROKAY            RECORD'S DATA NOW PROCESSED
         CR    R5,R15              IS IT BIGGER THAN THE DATA?
         BNH   UZFLENOK            NO
         LR    R5,R15              YES, REDUCE TARGET TO DATA SIZE
UZFLENOK STM   R4,R5,DOUBLE        SAVE TARGET DETAILS SOMEWHERE
         MVCL  R4,R14              COPY DATA TO CALLER'S AREA
         LR    R0,R15              SAVE TRUCNATED DATA LENGTH
*                                  R14 -> UNPROCESSED STRING DATA
         SPACE
*
*    TRANSLATE THE DATA IN THE CALLER'S AREA IF APPROPRIATE
*
         TM    ZFTYPE,ZCFHASCI     PROCESSING ASCII DATA?
         BZ    UZTROKAY            NO, NO TRANSLATION REQUIRED
         LM    R4,R5,DOUBLE        RESTORE TARGET DETAILS
UZTRMORE CH    R5,=H'256'          LESS THAN 256 BYTES LEFT?
         BL    UZTRTAIL            YES, GO TRANSLATE THE REST
         TR    0(256,R4),ASC2EBCT  TRANSLATE DATA FROM ASCII
         LA    R4,256(,R4)         POINT PAST TRANSLATED DATA
         SH    R5,=H'256'          REDUCE LENGTH TO GO
         B     UZTRMORE            GO TRANSLATE THE NEXT CHUNK
UZTRTAIL LTR   R5,R5               ANY DATA REMAINING?
         BNP   UZTROKAY            NO, LENGTH WAS A MULTIPLE OF 256
         BCTR  R5,0                YES, DECREMENT FOR EXECUTE
         EX    R5,UZTRREST         TRANSLATE THE REST
         LA    R4,1(R5,R4)         POINT PAST TRANSLATED DATA
UZTROKAY EQU   *                   DATA EDITING COMPLETE
         SPACE
*
*    UPDATE STATUS OF CALLER'S DATA AREA AFTER DATA WAS LOADED
*
         L     R5,UZRECSZ          GET OLD REMAINING AREA SIZE
         A     R5,UZRECCS          POINT PAST CALLER'S DATA AREA
         SR    R5,R4               GET NEW REMAINING AREA SIZE
         STM   R4,R5,UZRECCS       UPDATE UNUSED BUFFER DETAILS
         SPACE
*
*    DETERMINE THE DATA IN STRING THAT IS STILL TO BE PROCESSED
*
         TM    UZFLAGS,$UZCC       WAS A CONTROL CODE ENCOUNTERED?
         BNO   CCADJUST            NO, NO ADJUSTMENT REQUIRED
         TM    ZFTYPE,ZCFHASCI     PROCESSING ASCII DATA?
         BNO   CRLFCHKD            NO, NOT EXPECTING TRAILING CR
         BCT   R0,CRLFCHKD         1 BYTE TRIMMED TO FIT?
         CLI   0(R14),X'0D'        YES, WAS IT CR?
         BNE   CRLFCHKD            NO
         LA    R14,1(,R14)         YES, POINT PAST CARRIAGE RETURN
CRLFCHKD LA    R14,1(,R14)         POINT PAST CONTROL CODE
         SPACE
*
*    REMOVE CR REMNANT OF CRLF RECORD TERMINATOR
*
         TM    ZFTYPE,ZCFHASCI     PROCESSING ASCII DATA?
         BNO   CCADJUST            NO, NOT EXPECTING TRAILING CR
         C     R4,UNZWBFAD         ANY DATA IN RECORD?
         BE    CCADJUST            NO, NOTHING TO CHECK
         LR    R15,R4              YES, POINT PAST DATA
         BCTR  R15,0               POINT TO LAST ASCII BYTE
         CLI   0(R15),X'0D'        TRAILING CARRIAGE RETURN?
         BNE   CCADJUST            NO  (X'0D' FOR ASCII AND EBCDIC)
         BCTR  R4,0                YES, DISCARD IT
         LA    R5,1(,R5)           INCREMENT UNUSED AREA SIZE
         STM   R4,R5,UZRECCS       UPDATE UNUSED BUFFER DETAILS
CCADJUST EQU   *                   CONTROL CODE REMNANTS DISCARDED
         SPACE
*
*    UPDATE DETAILS OF PENDING DATA TO BE WITHHELD FOR NOW
*
         L     R15,STRINGLN        GET PENDING STRING DATA LENGTH
         A     R15,OLDSTRLN        GET TOTAL STRING DATA LENGTH
         A     R15,STRINGAD        POINT PAST STRING'S DATA
         XC    STRINGLN,STRINGLN   EMPTY CURRENT STRING
         SR    R15,R14             ANY DATA LEFT IN STRING?
         BNP   UZSTRRDY            NO, NOTHING TO SHUFFLE
         ST    R15,STRINGLN        YES, SET CURRENT STRING LENGTH
         S     R14,STRINGAD        GET STRING LENGTH ALREADY DONE
         ST    R14,OLDSTRLN        SAVE IT
UZSTRRDY EQU   *                   STRING NOW READY TO CONTINUE
         SPACE
*
*    DETERMINE IF THE DATA SO FAR IS TO BE RETURNED NOW
*
         LTR   R5,R5               DOES UZRECSZ SAY MORE ROOM LEFT?
         BNP   UNZPADOK            NO, NOTHING LEFT TO FILL
         TM    UZFLAGS,$UZCC       END OF RECORD ENCOUNTERED?
         BO    UNZPADCK            YES, GO SEE IF PADDING NEEDED
         TM    ZFTYPE,ZF_EOR       PROCESSING LOGICAL RECORDS?
         BNZ   UZFLOREC            YES, NEED MORE DATA FOR RECORD
         TM    UZFLAGS,$UZEOD      END OF ZIPPED DATA REACHED?
         BNO   UZFLOREC            NO, GO GET MORE BINARY DATA
         SPACE
*
*    PAD REMAINDER OF FIXED-LENGTH RECORD
*
UNZPADCK TM    UZFLDCB+DCBRECFM-IHADCB,DCBRECV
         BO    UNZPADOK            NO NEED TO PAD RECORD
         LA    R1,C' '             YES, GET DEFAULT FILL CHARACTER
         SLL   R1,24               PROMOTE FILL BYTE AND 0 LENGTH
         MVCL  R4,R0               PERFORM PADDING
UNZPADOK NI    UZFLAGS,255-$UZCC   RESET FLAG FOR NEXT RECORD
         SPACE
*
*    CONSTRUCT THE RECORD DESCRIPTOR WORD
*
         L     R5,UNZWBFAD         POINT TO RECORD BUFFER START
         SR    R4,R5               GET OUTPUT RECORD LENGTH
         TM    UZFLDCB+DCBRECFM-IHADCB,DCBRECF
         BNO   UZSETRDW            GO SET RDW
         TM    UZFLDCB+DCBRECFM-IHADCB,DCBRECV
         BNO   UNZWRITE            FIXED-LENGTH RECORD READY
         STH   R4,UZFLDCB+DCBLRECL-IHADCB
         B     UNZWRITE            RECFM=U RECORD READY
UZSETRDW CH    R4,=H'4'            NULL DATA RECORD?
         BH    UZRDWSET            NO
         MVI   4(R5),C' '          YES, SUPPLY A BLANK
         LA    R4,5                GET NEW RECORD LENGTH
UZRDWSET SLL   R4,16               PROMOTE TO HIGH-ORDER HALFWORD
         ST    R4,0(,R5)           SET RECORD DESCRIPTOR WORD
         SPACE
*
*    WRITE THE UNZIPPED DATA RECORD
*
UNZWRITE EQU   *                   WRITE A RECORD
         XASAM24
         PUT   UZFLDCB,(R5)        OUTPUT A LOGICAL RECORD
         XASAM31
         TM    STATUS4,$4ATTN      ATTENTION INTERRUPT DETECTED?
         BNO   UZFLNREC            NO, GO UNZIP NEXT RECORD
         MVI   MSG,122             PROCESSING INTERRUPTED
         B     UZFLDONE            ABORT REST OF UNZIP
         SPACE
UZTRREST TR    0(0,R4),ASC2EBCT        <<< EXECUTED >>>
         SPACE
*
*    DETERMINE IF ANY DATA REMAINS TO RETURN AFTER END OF ZIPPED DATA
*
UNZFINAL LM    R4,R5,UZRECCS       GET TARGET AREA ADDRESS AND SIZE
         C     R4,UNZREC@#         ANY DATA TO OUTPUT?
         BH    UNZPADCK            YES, GO OUTPUT THE LAST DATA
         SPACE
*
*    DETECT DATA LENGTH AND/OR CRC-32 MISMATCH
*
         SR    R0,R0
         BCTR  R0,0
         X     R0,UNFL_CRC         GET THE FILE'S CRC-32
         LR    R2,R0               COPY IT
         ICM   R1,1,ZLFHCRC        GET THE LOCAL HEADER'S CRC-32
         ICM   R1,2,ZLFHCRC+1
         ICM   R1,4,ZLFHCRC+2
         ICM   R1,8,ZLFHCRC+3
         XR    R2,R1
         O     R2,FULLSIZE         SIZE AND CRC-32 MATCH?
         BZ    UZFLDONE            YES, UNZIP COMPLETE
*
*    CONSTRUCT ERROR MESSAGE FOR BAD DATA LENGTH AND/OR CRC-32 VALUE
*
         STM   R0,R1,DOUBLE        SAVE BOTH CRC-32 VALUES
         MVC   MSG+2(11),=C'BYTES-LEFT='
         UNPK  MSG+2+11(9),FULLSIZE(5)
         TR    MSG+2+11(8),UZHEX-240
         MVC   MSG+2+19(5),=C' CRC='
         UNPK  MSG+2+24(9),DOUBLE(5)
         TR    MSG+2+24(8),UZHEX-240
         MVC   MSG+2+32(8),=C' HDRCRC='
         UNPK  MSG+2+40(9),DOUBLE+4(5)
         TR    MSG+2+40(8),UZHEX-240
         LA    R0,48               GET MESSAGE LENGTH
         STH   R0,MSG              SET MESSAGE LENGTH
         OI    STATUS7,$7BELL      SOUND BELL FOR ERROR MESSAGE
*
*    UNZIP NOW COMPLETE
*
         SPACE
         DROP  R10,R11,R12         REVUNZIP
UZFLDONE LM    R10,R12,BASE2       RESTORE MAIN BASE REGISTERS
         L     R3,BASE2+12
         USING REVIEW2,R10,R11,R12,R3
         L     R5,UNZIPFAD         RESTORE LOCAL BASE REGISTER
         USING UNZIPFIL,R5
         B     UNZIPPED            UNZIP COMPLETE
         SPACE
         DROP  R5                  UNZIPFIL
         DROP  R10,R11,R12,R3      REVIEW2
         USING REVUNZIP,R10,R11,R12
         SPACE
************************************************************
*                                                          *
*         CREATE AND INITIALIZE LZW CODE ARRAY             *
*                                                          *
************************************************************
         SPACE
*
*    ON ENTRY:
*
*        R14 = RETURN ADDRESS
*
*    THE 8192-ENTRY LZW CODE ARRAY IS CREATED IN SUBPOOL 3.
*
*    AS WELL AS THE ARRAY, THE FOLLOWING VARIABLES ARE INITIALIZED:
*
*        FULLUP2@ - FIRST FREE ENTRY ADDRESS
*        FULLUP2# - FIRST FREE ENTRY CODE
*
*    ALL REGISTERS ARE RESTORED UPON EXIT.
*
         USING @UNZWORK,R13
LZWARRAY STM   R14,R12,12(R13)     SAVE REGISTERS
         SPACE
         LA    R0,LZWEL            GET ENTRY SIZE
         SLL   R0,13               GET SHRINK ARRAY SIZE
         C     R0,ARAYSIZE         ALREADY HAVE AN ARRAY?
         ST    R0,ARAYSIZE         IN CASE NOT, SAVE THE SIZE
         BNE   LZWARYGM            NO, GET ONE FOR THE FIRST TIME
         L     R1,ARAYADDR         YES, POINT TO IT
         FREEMAIN RU,LV=(0),A=(1),SP=3 DISCARD THE OLD LZW ARRAY
         SPACE
         L     R0,ARAYSIZE         ENSURE SIZE REQUEST IS CORRECT
LZWARYGM EQU   *                   NOW GET SYSTEM-ZEROED STORAGE
         GETMAIN RU,LV=(0),SP=3,BNDRY=PAGE,LOC=(31,64)
         ST    R1,ARAYADDR         SAVE THE ADDRESS (OF ENTRY 0)
         LA    R0,256              GET ENTRIES TO INITIALIZE
         SR    R14,R14
         USING LZWENTRY,R1
LZWARYLP STC   R14,LZWCHAR         INITIALIZE SBCS CODE SET
         STH   R14,LZWCODE
         LA    R14,1(,R14)         INCREMENT CODE POINT
         LA    R1,LZWENTND         POINT TO THE NEXT ENTRY
         BCT   R0,LZWARYLP
*                                  NOW POINTING AT ENTRY 256
*                                  - ENTRY 256 IS NEVER USED
         LA    R1,LZWENTND         POINT TO ENTRY 257
         LA    R0,257              GET ITS CODE
         ST    R1,FULLUP2@         SAVE ADDRESS OF NEXT FREE ENTRY
         ST    R0,FULLUP2#         SAVE CODE OF NEXT FREE ENTRY
         DROP  R1                  LZWENTRY
         SPACE
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER
         SPACE
         DROP  R13                 @UNZWORK
         SPACE
************************************************************
*                                                          *
*         UPDATE CRC ACCUMULATOR                           *
*                                                          *
************************************************************
         SPACE
*
*    ON ENTRY:
*
*         R4 = ADDRESS OF UNCOMPRESSED DATA TO BE PROCESSED
*         R5 = NUMBER OF UNCOMPRESSED DATA BYTES TO BE PROCESSED
*        R13 = CALLER'S REGISTER SAVE AREA ADDRESS
*        R14 = RETURN ADDRESS
*   UNFL_CRC = CRC-32 VALUE FROM DATA SO FAR
*              AND UPDATED HERE WITH LATEST RESULT
*
*    ALL REGISTERS ARE RESTORED UPON EXIT.
*
         USING @UNZWORK,R13
UPDTCRC  STM   R14,R12,12(R13)     SAVE REGISTERS
         SPACE
         L     R2,UNFL_CRC         GET THE CRC ACCUMULATOR VALUE
         LA    R0,X'FF'            PREPARE MASK
         SPACE
CRCLOOP  IC    R3,0(,R4)           LOAD A DATA BYTE
         LA    R4,1(,R4)           POINT TO NEXT DATA BYTE
         XR    R3,R2               GET DATA XOR'D BY CRCISH THING
         NR    R3,R0               CLEAR OTHER BYTES
         SLA   R3,2                MULTIPLY BY FOUR FOR TABLE INDEX
         L     R3,CRCTABLE(R3)     GET CRC TABLE ELEMENT
         SRL   R2,8                SHIFT OLD CRCISH THING 8 BITS
         XR    R2,R3               GET NEW CRCISH THING
         BCT   R5,CRCLOOP          GO PROCESS NEXT DATA BYTE
         SPACE
         ST    R2,UNFL_CRC         UPDATE CRC ACCUMULATOR
         SPACE
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER
         SPACE
         DROP  R13                 @UNZWORK
         SPACE
************************************************************
*                                                          *
*         READ SHRINK LZW CODES FROM THE ZIP FILE          *
*                                                          *
************************************************************
         SPACE
*
*    ON ENTRY:
*
*        R13 = CALLER'S REGISTER SAVE AREA ADDRESS
*        R14 = RETURN ADDRESS
*        BPC = BITS PER LZW CODE
*   CRNTBYTE = INPUT BYTE CURRENTLY BEING DIGESTED
*    LZWBITS = NUMBER OF UNPROCESSED BITS REMAINING IN CRNTBYTE
*              AND IS UPDATED BY THIS ROUTINE
*
*    ON EXIT:
*
*        R15 = LZW CODE EXTRACTED FROM ZIPPED DATA -OR-
*            < 0 IF ZIPPED FILE DATA EXHAUSTED.
*
*    ALL OTHER REGISTERS ARE RESTORED UPON EXIT.
*
         USING @UNZWORK,R13
LZWGETCD STM   R14,R12,12(R13)     SAVE REGISTERS
         LA    R1,UZFLDMSV         POINT TO NEW SAVE AREA
         DROP  R13                 @UNZWORK
         ST    R13,4(,R1)          CHAIN SAVE AREAS
         ST    R1,8(,R13)
         LR    R13,R1              POINT TO NEW SAVE AREA
         USING UZFLDMSV,R13
         SPACE
         L     R5,LZWDCDSZ         GET THE NUMBER OF BITS NEEDED
         SR    R7,R7               RESET ACTIVE BIT FLAG
         SR    R8,R8               RESET ACCUMULATOR
         L     R4,LZWBITS          GET BITS AVAILABLE
         SPACE
LZWBITLP LTR   R4,R4               ANY BITS TO USE?
         BNP   LZWBYTE             NO, NEED ANOTHER BYTE
         LR    R6,R4               YES, COPY THIS COUNT
         CR    R6,R5               MORE THAN ARE NEEDED NOW?
         BNH   LZWBITOK            NO
         LR    R6,R5               YES, REDUCE TO CURRENT NEED
LZWBITOK IC    R7,LZW1MASK-1(R6)   LOAD THAT MANY ONE BITS
         LA    R15,8               GET BITS PER BYTE
         SR    R15,R4              GET BITS ALREADY USED IN BYTE
         IC    R14,CRNTBYTE        GET CURRENT ZIP DATA BYTE
         SRL   R14,0(R15)          SHIFT DATA TO ALIGN WITH MASK
         NR    R14,R7              GET THOSE DATA BITS
         L     R15,LZWDCDSZ        GET BITS IN CODE
         SR    R15,R5              GET BITS ALREADY LOADED
         SLL   R14,0(R15)          SHIFT PAST LOADED BITS
         SR    R4,R6               REDUCE UNUSED BIT COUNT
         OR    R8,R14              ADD NEW BITS TO ACCUMULATOR
         ST    R4,LZWBITS          UPDATE COUNTER
         SR    R5,R6               REDUCE BITS NEEDED FOR CODE
         BNP   LZWGOTCD            RETURN IF ALL BITS EXTRACTED
         SPACE
LZWBYTE  ICM   R0,15,PACKSIZE      ANY ZIPPED BYTES LEFT?
         BNP   LZW0CODE            NO, END OF ZIP DATA
         LA    R2,CRNTBYTE         POINT TO EXTRACTION HOLD AREA
         LA    R3,1                GET THE REQUIRED BYTE COUNT
         LA    R1,UZFLRZSV         POINT TO NEW SAVE AREA
         BAS   R14,READZIP         READ IN A ZIPPED BYTE
         TM    UZFLAGS,$UZEOF      REACHED END OF FILE?
         BO    LZW0CODE            YES, FILE HAS BEEN TRUNCATED
         LA    R4,8                NO, GET CURRENT BITS REMAINING
         BCTR  R0,0                DECREMENT ZIPPED DATA BYTES LEFT
         ST    R0,PACKSIZE         SAVE THE UPDATED COUNT
         B     LZWBITLP            GO EXTRACT MORE BITS
         SPACE
LZW0CODE SR    R8,R8               FINISHED SO GET NEGATIVE NUMBER
         BCTR  R8,0                FINISHED SO GET NEGATIVE NUMBER
         SPACE
LZWGOTCD L     R13,4(,R13)         POINT TO CALLER'S SAVE AREA
         OI    11(R13),X'01'       INVALIDATE FORWARD POINTER
         ST    R8,16(,R13)         SAVE CODE IN R15 SLOT
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER
         SPACE
         DROP  R13                 UZFLDMSV
         SPACE
************************************************************
*                                                          *
*         READ BYTES FROM THE ZIP FILE                     *
*                                                          *
************************************************************
         SPACE
*
*    ON ENTRY:
*
*        R1  = ADDRESS OF UZFLRZSV
*        R2  = ADDRESS TO PLACE READ BYTES - SKIP DATA IF ZERO
*        R3  = NUMBER OF BYTES TO READ
*        R13 = CALLER'S REGISTER SAVE AREA ADDRESS
*        R14 = RETURN ADDRESS
*
*    ALL REGISTERS ARE RESTORED UPON EXIT.
*
         USING UZFLRZSV,R13
READZIP  STM   R14,R12,12(R13)     SAVE REGISTERS
         ST    R13,4(,R1)          CHAIN SAVE AREAS
         ST    R1,8(,R13)
         LR    R13,R1              POINT TO NEW SAVE AREA
         SPACE
         L     R0,ZIPOFSET         GET READ BYTE COUNT
         AR    R0,R3               ADD THE NEW REQUEST SIZE
         ST    R0,ZIPOFSET         SAVE THE NEW BYTE COUNT
         SPACE
         LM    R4,R5,ZIPREC@#      GET UNUSED BUFFER DETAILS
         LTR   R5,R5               ANY UNUSED DATA AVAILABLE?
         BZ    RDZIPGET            NO, GO READ SOME DATA
         SPACE
         LTR   R2,R2               READING DATA OR SKIPPING IT?
         BZ    SKIPZPLP            JUST SKIPPING IT
         SPACE
READZPLP LR    R0,R5               COPY SIZE OF DATA AVAILABLE
         SR    R0,R3               GET SIZE TO BE LEFT AFTER THIS
         BM    NTALLRED            NOT ALL OF THE DATA IS HERE
*                                  ALL OF THE DATA IS HERE
         LR    R5,R3               SET SOURCE LENGTH FROM TARGET
         MVCL  R2,R4               COPY ALL REQUESTED DATA
         LR    R5,R0               COPY UNUSED BUFFER BYTE COUNT
         STM   R4,R5,ZIPREC@#      UPDATE UNUSED BUFFER DETAILS
         L     R13,4(,R13)         POINT TO CALLER'S SAVE AREA
         OI    11(R13),X'01'       INVALIDATE FORWARD POINTER
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER
         SPACE
NTALLRED LR    R0,R3               COPY THE REQUESTED LENGTH
         SR    R0,R5               GET LENGTH NOT READ YET
         LR    R3,R5               SET TARGET LENGTH FROM SOURCE
         MVCL  R2,R4               COPY THE AVAILABLE DATA
         LR    R3,R0               RESTORE THE OUTSTANDING LENGTH
         SPACE
RDZIPGET STM   R2,R3,ZIPREC@#      SAVE UNPROCESSED REQUEST DETAILS
         SPACE
         DROP  R10,R11,R12         REVUNZIP
         LM    R10,R12,BASE2       SWITCH BASE REGISTERS
         L     R3,BASE2+12
         USING REVIEW2,R10,R11,R12,R3
         SPACE
         LA    R4,DYNDCBW          SUPPLY DCB TO GET ROUTINE
         OI    MODE,MD_OFFLD       SUPPRESS DIV PROCESSING
         BAS   R14,GET             READ A RECORD FROM THE ZIP ARCHIVE
         NI    MODE,255-MD_OFFLD   RESET DIV SUPPRESSION FLAG
         SPACE
         DROP  R10,R11,R12,R3      REVIEW2
         LM    R10,R12,BASE3       RESTORE BASE REGISTERS
         USING REVUNZIP,R10,R11,R12
         SPACE
         LTR   R1,R1               END-OF-FILE?
         BM    RDZIPEOF            YES, RATHER UNFORTUNATE
         SPACE
         TM    TSTRECFM,X'40'      VARIABLE-LENGTH RECORDS?
         BZ    RDZIPRDW            NO
         LA    R0,4                YES, GET SIZE OF RDW
         AR    R2,R0               POINT PAST RDW
         SR    R1,R0               DISCOUNT LENGTH OF RDW
         SPACE
RDZIPRDW LR    R4,R2               POINT TO THE RECORD'S DATA
         LR    R5,R1               COPY THE RECORD'S DATA BYTE COUNT
         LM    R2,R3,ZIPREC@#      LOAD UNPROCESSED REQUEST DETAILS
         LTR   R2,R2               READING OR SKIPPING?
         BP    READZPLP            READING
         SPACE
SKIPZPLP LR    R0,R5               COPY SIZE OF DATA AVAILABLE
         SR    R0,R3               GET SIZE TO BE LEFT AFTER THIS
         BM    NTALLSKP            NOT ALL OF THE DATA IS HERE
*                                  ALL OF THE DATA IS HERE
         AR    R4,R3               JUMP PAST THE REQUESTED BYTES
         LR    R5,R0               COPY UNUSED BUFFER BYTE COUNT
         STM   R4,R5,ZIPREC@#      UPDATE UNUSED BUFFER DETAILS
         L     R13,4(,R13)         POINT TO CALLER'S SAVE AREA
         OI    11(R13),X'01'       INVALIDATE FORWARD POINTER
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER
         SPACE
NTALLSKP SR    R3,R5               SKIP PAST THE BYTES PRESENT
         B     RDZIPGET            GO GET SOME MORE
         SPACE
RDZIPEOF OI    UZFLAGS,$UZEOF      THIS SHOULD NOT HAPPEN
         L     R13,4(,R13)         POINT TO CALLER'S SAVE AREA
         OI    11(R13),X'01'       INVALIDATE FORWARD POINTER
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER
         DROP  R13                 UZFLRZSV
         SPACE
************************************************************
*                                                          *
*         PURGE CODE ARRAY LEAF ENTRIES                    *
*                                                          *
************************************************************
         SPACE
*
*    ON ENTRY:
*
*        R13 = @UNZWORK WORKING STORAGE AREA ADDRESS
*        R14 = RETURN ADDRESS
*
*    ALL REGISTERS ARE RESTORED UPON EXIT.
*
         USING @UNZWORK,R13
LZWPRUNE STM   R14,R12,12(R13)     SAVE REGISTERS
         SPACE
         LH    R14,=Y(257*LZWEL)   GET OFFSET OF FIRST CANDIDATE
         A     R14,ARAYADDR        POINT TO ENTRY 257
         LH    R0,=Y(8192-257)     GET NUMBER OF ENTRIES TO CHECK
         LA    R15,257
         ST    R14,FULLUP2@        RESET FREE ENTRY SEARCH START
         ST    R15,FULLUP2#
         USING LZWENTRY,R14
         SPACE
*    PURGE PASS 1:                 FLAG ENTRIES TO BE PURGED
PRUNELP1 ICM   R2,15,LZWCHILD      ANY KIDDIES?
         BNZ   PRUNEXT1            YES, DON'T MAKE ORPHANS
         OI    LZWCHILD,LZWPURGE   NO, MARK FOR PURGING
PRUNEXT1 LA    R14,LZWENTND        POINT TO NEXT ENTRY
         BCT   R0,PRUNELP1
         SPACE
         L     R14,FULLUP2@        POINT TO ENTRY 257
         LH    R0,=Y(8192-257)     GET ENTRY COUNT TO TABLE END
         SPACE
*    PURGE PASS 2:                 PURGE FLAGGED ENTRIES
PRUNELP2 TM    LZWCHILD,LZWPURGE   IS THIS ENTRY TO BE PURGED?
         BNO   PRUNEXT2            NO, GO LOOK AT NEXT ENTRY
         L     R2,LZWNEXT          POINT TO OLDER SIBLING
         L     R3,LZWPREV          POINT TO YOUNGER SIBLING
         LH    R15,LZWPARNT        GET THE PARENT'S CODE
         XC    0(LZWEL,R14),0(R14) CLEAR THE WHOLE ENTRY
         DROP  R14                 LZWENTRY
         SPACE
         LTR   R2,R2               ANY OLDER SIBLING?
         BZ    OLDEROK             NO
         USING LZWENTRY,R2         "OLDER SIBLING"
         ST    R3,LZWPREV          YES, UPDATE ITS BACK POINTER
         DROP  R2                  LZWENTRY
         SPACE
OLDEROK  LTR   R3,R3               ANY YOUNGER SIBLING?
         BNZ   PARENTOK            YES, GO UPDATE IT
         MH    R15,=Y(LZWEL)       NO, SIBLING UPDATE COMPLETE
         A     R15,ARAYADDR        POINT TO PARENT ENTRY
         USING LZWENTRY,R15        "PARENT"
         ST    R2,LZWCHILD         UPDATE YOUNGEST CHILD POINTER
         DROP  R15                 LZWENTRY
         B     PRUNEXT2
         SPACE
         USING LZWENTRY,R3         "YOUNGER SIBLING"
PARENTOK ST    R2,LZWNEXT          UPDATE FORWARD POINTER
         DROP  R3                  LZWENTRY
         SPACE
PRUNEXT2 LA    R14,LZWEL(,R14)     POINT TO NEXT ENTRY
         BCT   R0,PRUNELP2
         SPACE
         LM    R14,R12,12(R13)     RESTORE ALL REGISTERS
         BR    R14                 RETURN TO CALLER
         DROP  R13                 @UNZWORK
         SPACE
         COPY  REVINFLT            INFLATE ROUTINE
         TITLE '  R E V I E W   -   P H A S E   2  '
************************************************************
*                                                          *
*         UNZIP FILE  -  CONSTANTS AND LITERALS            *
*                                                          *
************************************************************
         SPACE
*    VECTOR OF AN INCREASING NUMBER OF ONE BITS
LZW1MASK DC    X'01,03,07,0F,1F,3F,7F,FF'
         SPACE 2
***  TRANSLATE TABLES COPIED FROM TCPIP.SEZATCPX(EZAESENU)  ***
         SPACE
         AGO   .NOE2A        DELETE THIS LINE IF EBC2ASCT NEEDED
*    EBCDIC TO ASCII DEFAULT TRANSLATE TABLE
*                 0 1 2 3 4 5 6 7 8 9 A B C D E F
EBC2ASCT DC    X'00010203DC09C37FCAB2D50B0C0D0E0F'  X'00' -> X'0F'
         DC    X'10111213DBDA08C11819C8F21C1D1E1F'  X'10' -> X'1F'
         DC    X'C4B3C0D9BF0A171BB4C2C5B0B1050607'  X'20' -> X'2F'
         DC    X'CDBA16BCBBC9CC04B9CBCEDF1415FE1A'  X'30' -> X'3F'
         DC    X'20FF838485A0C68687A4BD2E3C282B7C'  X'40' -> X'4F'
         DC    X'268288898AA18C8B8DE121242A293BAA'  X'50' -> X'5F'
         DC    X'2D2FB68EB7B5C78F80A5DD2C255F3E3F'  X'60' -> X'6F'
         DC    X'9B90D2D3D4D6D7D8DE603A2340273D22'  X'70' -> X'7F'
         DC    X'9D616263646566676869AEAFD0ECE7F1'  X'80' -> X'8F'
         DC    X'F86A6B6C6D6E6F707172A6A791F792CF'  X'90' -> X'9F'
         DC    X'E67E737475767778797AADA8D1EDE8A9'  X'A0' -> X'AF'
         DC    X'5E9CBEFAB8F5F4ACABF35B5DEEF9EF9E'  X'B0' -> X'BF'
         DC    X'7B414243444546474849F0939495A2E4'  X'C0' -> X'CF'
         DC    X'7D4A4B4C4D4E4F505152FB968197A398'  X'D0' -> X'DF'
         DC    X'5CF6535455565758595AFDE299E3E0E5'  X'E0' -> X'EF'
         DC    X'30313233343536373839FCEA9AEBE99F'  X'F0' -> X'FF'
*                 0 1 2 3 4 5 6 7 8 9 A B C D E F
.NOE2A   ANOP  ,             DELETE THIS LINE IF EBC2ASCT NEEDED
         SPACE
*    ASCII TO EBCDIC DEFAULT TRANSLATE TABLE
*                 0 1 2 3 4 5 6 7 8 9 A B C D E F
ASC2EBCT DC    X'00010203372D2E2F1605250B0C0D0E0F'  X'00' -> X'0F'
         DC    X'101112133C3D322618193F271C1D1E1F'  X'10' -> X'1F'
         DC    X'405A7F7B5B6C507D4D5D5C4E6B604B61'  X'20' -> X'2F'
         DC    X'F0F1F2F3F4F5F6F7F8F97A5E4C7E6E6F'  X'30' -> X'3F'
         DC    X'7CC1C2C3C4C5C6C7C8C9D1D2D3D4D5D6'  X'40' -> X'4F'
         DC    X'D7D8D9E2E3E4E5E6E7E8E9BAE0BBB06D'  X'50' -> X'5F'
         DC    X'79818283848586878889919293949596'  X'60' -> X'6F'
         DC    X'979899A2A3A4A5A6A7A8A9C04FD0A107'  X'70' -> X'7F'
         DC    X'68DC5142434447485253545756586367'  X'80' -> X'8F'
         DC    X'719C9ECBCCCDDBDDDFECFC70B180BFFF'  X'90' -> X'9F'
         DC    X'4555CEDE49699A9BABAF5FB8B7AA8A8B'  X'A0' -> X'AF'
         DC    X'2B2C092128656264B4383134334AB224'  X'B0' -> X'BF'
         DC    X'22172906202A46661A35083936303A9F'  X'C0' -> X'CF'
         DC    X'8CAC7273740A757677231514046A783B'  X'D0' -> X'DF'
         DC    X'EE59EBEDCFEFA08EAEFEFBFD8DADBCBE'  X'E0' -> X'EF'
         DC    X'CA8F1BB9B6B5E19D90BDB3DAFAEA3E41'  X'F0' -> X'FF'
*                 0 1 2 3 4 5 6 7 8 9 A B C D E F
         SPACE 2
UZHEX    DC    CL16'0123456789ABCDEF'  HEXADECIMAL DIGITS
         SPACE
         LTORG
         SPACE
UZEODM   MESG  'UNEXPECTED END-OF-DATA'
UZEOFM   MESG  'UNEXPECTED END-OF-FILE'
UZ256M   MESG  'UNKNOWN SUBCODE #### OF CODE 256'
UZFULM   MESG  'DATA ERROR - LZW CODE ARRAY FULL'
         SPACE
CRCTABLE DC    0D'0'                   256 ELEMENT CRC ARRAY
         DC    X'00000000',X'77073096',X'EE0E612C',X'990951BA'
         DC    X'076DC419',X'706AF48F',X'E963A535',X'9E6495A3'
         DC    X'0EDB8832',X'79DCB8A4',X'E0D5E91E',X'97D2D988'
         DC    X'09B64C2B',X'7EB17CBD',X'E7B82D07',X'90BF1D91'
         DC    X'1DB71064',X'6AB020F2',X'F3B97148',X'84BE41DE'
         DC    X'1ADAD47D',X'6DDDE4EB',X'F4D4B551',X'83D385C7'
         DC    X'136C9856',X'646BA8C0',X'FD62F97A',X'8A65C9EC'
         DC    X'14015C4F',X'63066CD9',X'FA0F3D63',X'8D080DF5'
         DC    X'3B6E20C8',X'4C69105E',X'D56041E4',X'A2677172'
         DC    X'3C03E4D1',X'4B04D447',X'D20D85FD',X'A50AB56B'
         DC    X'35B5A8FA',X'42B2986C',X'DBBBC9D6',X'ACBCF940'
         DC    X'32D86CE3',X'45DF5C75',X'DCD60DCF',X'ABD13D59'
         DC    X'26D930AC',X'51DE003A',X'C8D75180',X'BFD06116'
         DC    X'21B4F4B5',X'56B3C423',X'CFBA9599',X'B8BDA50F'
         DC    X'2802B89E',X'5F058808',X'C60CD9B2',X'B10BE924'
         DC    X'2F6F7C87',X'58684C11',X'C1611DAB',X'B6662D3D'
         DC    X'76DC4190',X'01DB7106',X'98D220BC',X'EFD5102A'
         DC    X'71B18589',X'06B6B51F',X'9FBFE4A5',X'E8B8D433'
         DC    X'7807C9A2',X'0F00F934',X'9609A88E',X'E10E9818'
         DC    X'7F6A0DBB',X'086D3D2D',X'91646C97',X'E6635C01'
         DC    X'6B6B51F4',X'1C6C6162',X'856530D8',X'F262004E'
         DC    X'6C0695ED',X'1B01A57B',X'8208F4C1',X'F50FC457'
         DC    X'65B0D9C6',X'12B7E950',X'8BBEB8EA',X'FCB9887C'
         DC    X'62DD1DDF',X'15DA2D49',X'8CD37CF3',X'FBD44C65'
         DC    X'4DB26158',X'3AB551CE',X'A3BC0074',X'D4BB30E2'
         DC    X'4ADFA541',X'3DD895D7',X'A4D1C46D',X'D3D6F4FB'
         DC    X'4369E96A',X'346ED9FC',X'AD678846',X'DA60B8D0'
         DC    X'44042D73',X'33031DE5',X'AA0A4C5F',X'DD0D7CC9'
         DC    X'5005713C',X'270241AA',X'BE0B1010',X'C90C2086'
         DC    X'5768B525',X'206F85B3',X'B966D409',X'CE61E49F'
         DC    X'5EDEF90E',X'29D9C998',X'B0D09822',X'C7D7A8B4'
         DC    X'59B33D17',X'2EB40D81',X'B7BD5C3B',X'C0BA6CAD'
         DC    X'EDB88320',X'9ABFB3B6',X'03B6E20C',X'74B1D29A'
         DC    X'EAD54739',X'9DD277AF',X'04DB2615',X'73DC1683'
         DC    X'E3630B12',X'94643B84',X'0D6D6A3E',X'7A6A5AA8'
         DC    X'E40ECF0B',X'9309FF9D',X'0A00AE27',X'7D079EB1'
         DC    X'F00F9344',X'8708A3D2',X'1E01F268',X'6906C2FE'
         DC    X'F762575D',X'806567CB',X'196C3671',X'6E6B06E7'
         DC    X'FED41B76',X'89D32BE0',X'10DA7A5A',X'67DD4ACC'
         DC    X'F9B9DF6F',X'8EBEEFF9',X'17B7BE43',X'60B08ED5'
         DC    X'D6D6A3E8',X'A1D1937E',X'38D8C2C4',X'4FDFF252'
         DC    X'D1BB67F1',X'A6BC5767',X'3FB506DD',X'48B2364B'
         DC    X'D80D2BDA',X'AF0A1B4C',X'36034AF6',X'41047A60'
         DC    X'DF60EFC3',X'A867DF55',X'316E8EEF',X'4669BE79'
         DC    X'CB61B38C',X'BC66831A',X'256FD2A0',X'5268E236'
         DC    X'CC0C7795',X'BB0B4703',X'220216B9',X'5505262F'
         DC    X'C5BA3BBE',X'B2BD0B28',X'2BB45A92',X'5CB36A04'
         DC    X'C2D7FFA7',X'B5D0CF31',X'2CD99E8B',X'5BDEAE1D'
         DC    X'9B64C2B0',X'EC63F226',X'756AA39C',X'026D930A'
         DC    X'9C0906A9',X'EB0E363F',X'72076785',X'05005713'
         DC    X'95BF4A82',X'E2B87A14',X'7BB12BAE',X'0CB61B38'
         DC    X'92D28E9B',X'E5D5BE0D',X'7CDCEFB7',X'0BDBDF21'
         DC    X'86D3D2D4',X'F1D4E242',X'68DDB3F8',X'1FDA836E'
         DC    X'81BE16CD',X'F6B9265B',X'6FB077E1',X'18B74777'
         DC    X'88085AE6',X'FF0F6A70',X'66063BCA',X'11010B5C'
         DC    X'8F659EFF',X'F862AE69',X'616BFFD3',X'166CCF45'
         DC    X'A00AE278',X'D70DD2EE',X'4E048354',X'3903B3C2'
         DC    X'A7672661',X'D06016F7',X'4969474D',X'3E6E77DB'
         DC    X'AED16A4A',X'D9D65ADC',X'40DF0B66',X'37D83BF0'
         DC    X'A9BCAE53',X'DEBB9EC5',X'47B2CF7F',X'30B5FFE9'
         DC    X'BDBDF21C',X'CABAC28A',X'53B39330',X'24B4A3A6'
         DC    X'BAD03605',X'CDD70693',X'54DE5729',X'23D967BF'
         DC    X'B3667A2E',X'C4614AB8',X'5D681B02',X'2A6F2B94'
         DC    X'B40BBE37',X'C30C8EA1',X'5A05DF1B',X'2D02EF8D'
         SPACE
         DROP  R10,R11,R12         REVUNZIP
         SPACE 2
**********************************************************************
*                                                          *         *
*         ZIP FILE DIRECTORY HANDLER                       *  GP@P6  *
*                                                          *  09/99  *
**********************************************************************
         SPACE
*
*   UNLIKE THE CHECK FOR PICTURE CONTENT WHICH TAKES PLACE AFTER
*   THE FIRST SCREENFUL OF RECORDS HAS BEEN READ, THE CHECK FOR
*   A ZIP ARCHIVE TAKES PLACE AFTER THE FIRST RECORD HAS BEEN
*   READ.  THIS IS BECAUSE:
*
*     1. CONVENTIONAL REVIEW DATA DISPLAY MAY BE REQUIRED FOR
*        PICTURES, SUCH AS WHEN 'FMT OFF' IS ISSUED.
*        SO, THE NORMAL REVIEW FILE DATA HANDLING IS REQUIRED.
*        THIS MEANS THERE ARE TWO SOURCES OF DATA RECORDS
*        TO BE CONSIDERED BY THOSE ROUTINES:
*        - THE RECORDS ALREADY READ IN THE HOLD DIRECTORY, AND
*        - RECORDS NOT YET READ FROM THE FILE.
*
*     2. THE ZIP DIRECTORY HANDLER IS GOING TO LOAD DATA INTO
*        "DIV" WHICH WILL THEN BE CONSIDERED TO BE THE FILE TO
*        BE REVIEWED, SO STANDARD REVIEW FILE NAVIGATION WILL
*        NOT BE REQUIRED FURTHER.  THE UNZIPDIR ROUTINE CAN
*        MANAGE ALL THE NECESSARY I/O TO THE FILE WITHOUT
*        ANY NEED TO REFER TO THE HOLD DIRECTORY.
*
*   THIS ROUTINE IS NOT CALLED WHEN THE FILE IS EMPTY.
*
*   ON ENTRY, GPR1 AND GPR2 ARE AS SET BY THE 'GET' ROUTINE
*   AND ARE THE RECORD LENGTH AND RECORD ADDRESS RESPTIVELY,
*   AND GPR4 POINTS TO THE DCB.
*
         SPACE
         USING REVIEW2,R10,R11,R12,R3
         USING IHADCB,R4
         USING UNZIPDIR,R5
UNZIPDIR TM    MODE,MD_OFFLD       HERE TO OFFLOAD OR SEARCH?
         BO    HILLFILE            YES, SKIP ZIP CHECKING
         TM    $UCBAD,255-$HFSIO   ANYTHING TOO WACKY GOING ON?
         BNZ   HILLFILE            YES, SKIP ZIP CHECKING
         STM   R14,R12,12(R13)     NO, SAVE REGISTERS
         SR    R15,R15             GET ZERO
         LR    R7,R2               COPY RECORD ADDRESS
         LR    R6,R1               COPY RECORD LENGTH
         TM    TSTRECFM,X'40'      VARIABLE-LENGTH RECORDS?
         BZ    *+8                 NO
         LA    R15,4               GET RDW SIZE
         SR    R6,R15              DISCOUNT RDW FROM LENGTH
         ALR   R7,R15              POINT TO START OF DATA
         CH    R6,=Y(ZLFHFXLN)     USEFUL AMOUNT OF DATA?
         BL    PRINTCHK            NO, GO CHECK IF "PRINTOUT"
         USING ZLFH,R7
         CLC   =X'504B0304',ZLFHID PKZIP FILE?
         BNE   PRINTCHK            NO, GO CHECK IF "PRINTOUT"
         DROP  R7                  ZLFH
         ICM   R15,15,$UCBAD       TALKING TO PHYSICAL DEVICE?
         BZ    UNZIPXIT            NO, BETTER PLAY IT SAFE
         AIF   (NOT &ENV390).UNZMVS1
         TM    $UCBAD,$HFSIO       PROCESSING HFS FILE?
         BNO   UNZIPDEV            NO, GO CHECK DEVICE TYPE
         SR    R0,R0               RESET POINT SPEC
         B     UNZIPTOK            SKIP OS DATA SET CHECKS
.UNZMVS1 ANOP
UNZIPDEV SR    R0,R0               RESET TTR FOR POINT
         CLI   18(R15),X'20'       DASD?
         BNE   UNZIPDSK            NO
         TM    STATUS8,$8ZIPU      LOOKING AT UNZIPPED DATA NOW?
         BO    UNZIPDSK            YES, NO VTOC ENTRY OBTAINED
         TM    DS1DSORG,DS1DSGPS   DSORG = PS?
         BZ    UNZIPDSK            NO
         ICM   R0,7,DS1LSTAR       EMPTY ACCORDING TO VTOC?
         AIF   (NOT &ENVBIG).UNZLRG1
         TM    DS1FLAG1,DS1LARGE   DSNTYPE=LARGE?
         BNO   *+8                 NO
         ICM   R0,8,DS1TTTHI       YES, GET TRACKS USED HIGH-ORDER
         LTR   R0,R0               EMPTY ACCORDING TO VTOC?
.UNZLRG1 ANOP
         BZ    HILLFILE            YES, DS1LSTAR IS ZERO
         SPACE
UNZIPDSK XC    TTR,TTR             RESET POINT TARGET
         SRL   R0,8                GET LAST RELATIVE TRACK
         CH    R0,HW3              DOES FILE FIT INTO 4 TRACKS?
         BNH   UNZIPTOK            YES, NO NEED TO POINT LATER
         SH    R0,HW3              NO, POINT TO FOURTH LAST TRACK
         SLL   R0,8                MAKE ROOM FOR RECORD NUMBER
         O     R0,FW1              SET FIRST BLOCK ON THIS TRACK
         AIF   (NOT &ENVBIG).UNZLRG2
         TM    STATUS14,$14BIG     32-BIT NOTE/POINT VALUES?
         BO    *+8                 YES, USE TTTR FORMAT
.UNZLRG2 ANOP
         SLL   R0,8                GET TTR0
         ST    R0,TTR              SET POINT TARGET
UNZIPTOK LA    R0,$ZIPWKLN         GET DYNAMIC AREA SIZE
         MVI   GETMNTRC,18         TRACK GETMAIN IN CASE OF FAILURE
         GETMAIN RC,LV=(0),LOC=(31,64)
         LTR   R15,R15             GOT LOCAL WORKING STORAGE?
         BNZ   UNZNOSTG            NO, ABORT ZIP DIRECTORY FORMAT
         SPACE
         LR    R6,R1               POINT TO NEW STORAGE
         LA    R7,$ZIPWKLN         GET ITS LENGTH
         MVCL  R6,R14              ZERO IT
         ST    R1,8(,R13)          CHAIN SAVE AREAS
         ST    R13,4(,R1)
         LR    R2,R13              SAVE OLD ADDRESS
         LR    R13,R1              POINT TO GETMAINED AREA
         USING @ZIPWORK,R13
         MVC   @ZIPWKID,=CL8'@ZIPWORK'
         L     R0,ZIPBFSIZ         ALLOW UP TO 64K PER TRACK
         ST    R0,ZIPBFLEN         SAVE ACQUIRED BUFFER SIZE
         MVI   GETMNTRC,19         TRACK GETMAIN IN CASE OF FAILURE
         GETSTOR RC,LV=(0),LOC=(31,64)
         LTR   R15,R15             GOT THE DIRECTORY BUFFER?
         BZ    UNZIPBUF            YES, CONTINUE
UNZDIVBD LA    R0,$ZIPWKLN         NO, GET DYNAMIC AREA SIZE
         LR    R1,R13              POINT TO DYNAMIC AREA
         L     R13,4(,R13)         POINT TO PREVIOUS SAVE AREA
         OI    11(R13),X'01'       INVALIDATE FORWARD POINTER
         FREEMAIN RU,LV=(0),A=(1)  FREE DYNAMIC AREA
UNZNOSTG MVI   MSG,123             REQUEST ABORTED - STORAGE FULL
UNZIPXIT LM    R14,R12,12(R13)     RESTORE REGISTERS
         B     HILLFILE            GO SHOW RAW FILE DATA
         SPACE
UNZIPBUF ST    R1,ZIPBFADR
         ST    R1,ZIPBFHWM
         A     R1,ZIPBFLEN         POINT PAST THE BUFFER
         ST    R1,ZIPBFEND         SAVE FOR LATER
         LM    R1,R2,24(R2)        RESTORE FIRST RECORD DETAILS
         AIF   (NOT &ENV390).UNZSEQ
         TM    $UCBAD,$HFSIO       PROCESSING HFS FILE?
         BNO   UNZIPSEQ            NO, PROCESS OS SEQUENTIAL DATA SET
         L     R15,UFILESIZ        GET (NON-ZERO) FILE BYTE COUNT
         L     R0,ZIPBFLEN         GET ASSEMBLEY BUFFER SIZE
         CLR   R15,R0              WILL WHOLE FILE FIT IN BUFFER?
         BNH   UNZIPGOT            YES, USE DATA ALREADY READ
         SLR   R15,R0              NO, DETERMINE LEADING BYTES TO SKIP
         ST    R15,TTR             SET REQUIRED FILE OFFSET
         B     UNZIPPNT            GO SET FILE OFFSET (OK FOR 4GB ZIP)
.UNZSEQ  ANOP
UNZIPSEQ ICM   R0,3,TTR            GOING TO USE FIRST BLOCK?
         BZ    UNZIPGOT            YES, PROCESS FIRST RECORD
UNZIPPNT DS    0H
         XASAM24
         POINT (R4),TTR            NO, POINT TO FIRST DESIRED BLOCK
         XASAM31
         XC    DEBLOCKS(12),DEBLOCKS   ENSURE NEW BLOCK IS READ
         SPACE
UNZIPGET TM    STATUS4,$4ATTN      ATTENTION INTERRUPT DETECTED?
         BO    UNZIPABT            YES, ABORT ZIP DIRECTORY FETCH
         LR    R7,R5               SAVE LOCAL BASE REGISTER
         LA    R0,1
         A     R0,COUNT            INCREMENT LOGICAL RECORD COUNTER
         ST    R0,COUNT            IN CASE ZIP IN RECFM=U PDS MEMBER
         BAS   R14,GET             GET A RECORD FROM THE ZIP FILE
         LR    R5,R7               RESTORE LOCAL BASE REGISTER
         CLI   SYNADSW,X'FF'       I/O ERROR?
         BE    UNZIOERX            YES, ISSUE MESSAGE AND EXIT
         LTR   R1,R1               END-OF-FILE?
         BM    UNZIPEOF            YES, STOP READING RECORDS
         BZ    UNZIPGET            IGNORE NULL RECORD
         CLC   ZIP$SAVE,$CONCAT    DID THE VOLUME CHANGE?
         BE    UNZIPGOT            NO
         LM    R14,R15,KOUNT64     YES, GET THE CURRENT BYTE COUNT
         SLR   R15,R1              GET KOUNT VALUE BEFORE THIS VOLUME
         BC    3,*+6               NO BORROW
         BCTR  R14,0
         STM   R14,R15,ZIPKSAVE    SAVE IT
         MVC   ZIP$SAVE,$CONCAT    UPDATE RELATIVE VOLUME NUMBER
UNZIPGOT LR    R0,R2               COPY RECORD ADDRESS
         TM    TSTRECFM,X'40'      VARIABLE-LENGTH RECORDS?
         BZ    UNZIPVOK            NO
         LA    R15,4               YES, GET RDW LENGTH
         AR    R0,R15              POINT PAST RDW
         SR    R1,R15              REDUCE LENGTH
UNZIPVOK L     R6,ZIPBFHWM         POINT TO TARGET ADDRESS
         LA    R7,0(R1,R6)         GET WHAT WILL BE NEW HWM
         C     R7,ZIPBFEND         WILL THIS RECORD FIT?
         BNH   UNZIPAPP            YES, GO APPEND THE DATA
         STM   R14,R1,12(R13)      NO, SAVE REGISTERS
         LR    R1,R6               GET CURRENT HWM
         L     R0,ZIPBFLEN         GET THE BUFFER SIZE
         L     R6,ZIPBFADR         POINT TO THE BUFFER START
         SRA   R0,1                HALVE THE SIZE
         AR    R0,R6               POINT TO THE BUFFER MIDDLE
         SR    R1,R0               GET SIZE USED IN SECOND HALF
         LR    R7,R1               SET LENGTH
         MVCL  R6,R0               MOVE USED SECOND HALF TO FIRST HALF
         LM    R14,R1,12(R13)      RESTORE REGISTERS
UNZIPAPP LR    R7,R1               TARGET LENGTH EQUALS SOURCE LENGTH
         MVCL  R6,R0               APPEND THIS RECORD'S DATA
         ST    R6,ZIPBFHWM         UPDATE ZIP DIRECTORY BUFFER H-W-M
         B     UNZIPGET            GO GET NEXT RECORD
         SPACE
UNZIOERX LA    R1,SYNADMSG         GET I/O ERROR MESSAGE ADDRESS
         LA    R0,L'SYNADMSG       GET I/O ERROR MESSAGE LENGTH
         TPUT  (1),(0),R           SHOW ERROR MESSAGE
         MVI   MSG,112             I/O ERROR
UNZIPERX LM    R0,R1,ZIPBFLEN      LOAD ZIP DIRECTORY BUFFER DETAILS
         FREEMAIN RU,LV=(0),A=(1)  FREE IT
UNZIPERY LA    R0,$ZIPWKLN         GET DYNAMIC AREA SIZE
         LR    R1,R13              POINT TO DYNAMIC AREA
         L     R13,4(,R13)         POINT TO PREVIOUS SAVE AREA
         OI    11(R13),X'01'       INVALIDATE FORWARD POINTER
         FREEMAIN RU,LV=(0),A=(1)  FREE DYNAMIC AREA
         MVI   SYNADSW,0           CLEAR I/O ERROR FLAG
         MVI   DATAKV+1,1          PRETEND 'DATA' WAS SPECIFIED
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         L     R15,=A(NEWTOP)      RESTART SHOWING RAW DATA
         MVI   OPD2+6,0            ENSURE NOT TOO MANY OPERANDS
         MVI   OPD1+6,0            ENSURE NO OPERANDS AT ALL
         BR    R15
UNZIPABT MVI   MSG,58              INTERRUPT - DIRECTORY READ ENDED
         B     UNZIPERX
         SPACE
UNZIPEOF L     R8,ZIPBFHWM         POINT PAST END OF ZIP FILE DATA
         LA    R0,ZEOCMNLN         GET MINIMUM TRAILER RECORD LENGTH
         SR    R8,R0               BACK UP TO LATEST TRAILER START
         LR    R0,R8               COPY THIS ADDRESS
         S     R0,ZIPBFADR         GET PRE-TRAILER CACHE SIZE
         USING ZEOC,R8
UNZEOCLP CLC   =X'504B0506',ZEOCID END OF CENTRAL DIRECTORY SIGNATURE?
         BE    UNZEOCOK            YES, FOUND DIRECTORY TRAILER
         BCTR  R8,0                NO, BACK UP A BYTE (COMMENT PRESENT)
         BCT   R0,UNZEOCLP         CONTINUE SEARCH
         LA    R0,=CL43'CANNOT FIND END-OF-CENTRAL-DIRECTORY RECORD'
         LA    R1,43
         B     UNZLDMSG            GO LOAD MESSAGE
UNZEOCOK MVI   MSG,232             ZIP FILE SIZE LIMITS EXCEEDED
*        CLC   =F'-1',ZEOCCDSZ     CFD SIZE 4GB OR MORE?
*        BE    UNZIPERX            YES, THAT'S MONSTROUS
         CLI   ZEOCCDSZ+3,0        CFD SIZE 16MB OR MORE?
         BNE   UNZIPERX            YES, THAT'S MONSTROUS
         CLI   ZEOCENTT+1,X'FF'    65280 OR MORE ENTRIES IN CFD?
         BE    UNZIPERX            YES, THAT'S MONSTROUS
         ICM   R7,1,ZEOCCDSZ       GET CENTRAL DIRECTORY SIZE
         ICM   R7,2,ZEOCCDSZ+1
         ICM   R7,4,ZEOCCDSZ+2
         ICM   R7,8,ZEOCCDSZ+3
         SR    R6,R6               CLEAR FOR INSERT
         ICM   R6,1,ZEOCCMLN
         ICM   R6,2,ZEOCCMLN+1     GET THE ARCHIVE COMMENT LENGTH
         LA    R6,ZEOCMNLN(,R6)    GET WHOLE EOC RECORD LENGTH
         ST    R8,ZIPEOCAD         SAVE EOC RECORD ADDRESS
         ST    R7,ZIPCFDSZ         SAVE CFD SIZE
         ICM   R7,1,ZEOCOFST       GET CENTRAL DIRECTORY OFFSET
         ICM   R7,2,ZEOCOFST+1
         ICM   R7,4,ZEOCOFST+2
         ICM   R7,8,ZEOCOFST+3
         ST    R7,ZIPCFDOF         SAVE CFD RBA
         LR    R7,R8               POINT TO EOC RECORD
         LA    R0,ZL64FXLN         GET ZIP64 ZE64EOC LOCATOR LENGTH
         SR    R7,R0               BACK UP ZL64LOC LENGTH
         C     R7,ZIPBFADR         STILL IN CACHE?
         BL    UNZIPERX            NO, THAT'S UNEXPECTED
         USING ZL64LOC,R7
         CLC   =X'504B0607',ZL64ID ZIP64 ZE64EOC LOCATOR PRESENT?
         BNE   Z64CHKOK            NO, ZIP64 HEADERS ARE NOT PRESENT
         DROP  R7                  ZL64LOC
         LA    R0,ZE64FXLN         GET ZIP64 EOC MINIMUM LENGTH
         SR    R7,R0               BACK UP ZE64EOC LENGTH
         C     R7,ZIPBFADR         STILL IN CACHE?
         BL    UNZIPERX            NO, THAT'S UNEXPECTED
         USING ZE64EOC,R7
UNZE64LP CLC   =X'504B0606',ZE64ID ZIP64 END-OF-CFD RECORD PRESENT?
         BE    UNZZIP64            YES, ZIP64 EXTENSIONS IN USE
         BCTR  R7,0                NO, BACK UP A BYTE
         C     R7,ZIPBFADR         STILL IN CACHE?
         BNL   UNZE64LP            YES, GO CHECK IT
         B     UNZIPERX            NO, THAT'S UNEXPECTED
UNZZIP64 ICM   R1,1,ZE64OFST       GET CENTRAL DIRECTORY OFFSET
         ICM   R1,2,ZE64OFST+1
         ICM   R1,4,ZE64OFST+2
         ICM   R1,8,ZE64OFST+3
         ICM   R0,1,ZE64OFST+4
         ICM   R0,2,ZE64OFST+5
         ICM   R0,4,ZE64OFST+6
         ICM   R0,8,ZE64OFST+7
         STM   R0,R1,ZIPCFD64      SAVE CFD RBA
         DROP  R8,R7               ZEOC, ZE64EOC
         SR    R8,R7               GET TOTAL ZIP64 TRAILERS' LENGTH
         AR    R6,R8               ADD IT TO EOC LENGTH
         CR    R7,R0               IS IT ALL CACHED?
         BL    UNZIPERX            NO, THAT'S UNEXPECTED
         LR    R8,R7               YES, POINT PAST END OF CFD
Z64CHKOK ST    R6,ZIPLSTSZ         SAVE POST-CFD DATA SIZE
         S     R8,ZIPCFDSZ         POINT TO CFD
         MVI   MSG,0               RESET PRIMED MESSAGE
         C     R8,ZIPBFADR         STILL IN CACHE?
         BNL   ZCFDSZOK            YES, GOOD
         LM    R0,R1,ZIPBFLEN      LOAD ZIP DIRECTORY BUFFER DETAILS
         C     R0,ZIPBFSIZ         IS THIS THE FIRST GO?
         BNE   UNZNODIR            NO, GIVE UP, BUT SHOULD NOT HAPPEN
         FREEMAIN RU,LV=(0),A=(1)  FREE IT
         LA    R0,7                PREPARE FOR ROUNDING
         A     R0,ZIPCFDSZ         ADD CFD SIZE
         A     R0,ZIPLSTSZ         ADD POST-CFD SIZE
         SRL   R0,3                ROUND TO DOUBLEWORD
         SLL   R0,4                AND THEN DOUBLE IT
         ST    R0,ZIPBFLEN         SAVE THE NEW SIZE
         MVI   MSG,123             REQUEST ABORTED - STORAGE FULL
         GETSTOR RC,LV=(0),LOC=(31,64)
         LTR   R15,R15             GOT THE DIRECTORY BUFFER?
         BNZ   UNZIPERY            NO, TERMINATE ZIP-SPECIFIC HANDLING
         ST    R1,ZIPBFADR         YES, SAVE ITS ADDRESS
         ST    R1,ZIPBFHWM
         A     R1,ZIPBFLEN         POINT PAST THE BUFFER
         ST    R1,ZIPBFEND         SAVE FOR LATER
         AIF   (NOT &ENV390).UNZIPPT
         TM    $UCBAD,$HFSIO       PROCESSING HFS FILE?
         BNO   UNZIPSQ2            NO, PROCESS OS SEQUENTIAL DATA SET
         MVC   12(8,R4),ZIPCFD64   YES, LOAD CFD RBA INTO PHONY DCB
         XASAM24
         POINT (R4),16(,R4)        POINT TO START OF CFD
         XASAM31
         B     UNZIPGET            GO READ THE CENTRAL FILE DIRECTORY
UNZIPSQ2 DS    0H                  READ THROUGH DATA SET
.UNZIPPT ANOP
         SR    R0,R0               GET 0
         BCTR  R0,0                GET -1
         ST    R0,COUNT            HANDLE INCREMENT BEFORE GET CALL
         L     R7,CHKPTTOP         POINT TO FIRST CHECKPOINT ENTRY
         XASAM24
         POINT (R4),4(,R7)         POINT TO FIRST BLOCK
         XASAM31
         TM    DSORG,DS1DSGPO      PARITIONED INPUT?
         BO    UNZIPGET            YES, LET'S TRY THAT AGAIN
         CLI   $CONCAT,0           STILL ON FIRST VOLUME?
         BE    UNZIPGET            YES, LET'S TRY THAT AGAIN
         LM    R0,R1,KOUNT64       GET THE DATA BYTES READ
         SL    R0,ZIPKSAVE         GET THE DATA BYTES ON LAST VOLUME
         SL    R1,ZIPKSAVE+4
         BC    3,*+6
         BCTR  R0,0
         LTR   R0,R0               OVER 4GB ON THIS VOLUME?
         BNZ   UNZIPGET            YES, LET'S TRY THAT AGAIN
         LA    R0,4095             ALLOW FOR SOME FIXED-LENGTH SLACK
         A     R0,ZIPBFLEN         ADD THE BUFFER SIZE
         SRA   R0,1                HALVE IT
         CLR   R1,R0               ENOUGH DATA ON THIS VOLUME?
         BNL   UNZIPGET            YES, LET'S TRY THAT AGAIN
         MVI   CLOSED,X'80'        NO, NEED A CLOSE AND OPEN CYCLE
         CLOSE ((R4)),MF=(E,CLOSED)
         NI    STATUS,255-STOPEN-STABEND
         MVI   $CONCAT,0           RESET RELATIVE VOLUME COUNT
         MVI   OPEND,X'80'
         OPEN  ((R4)),MF=(E,OPEND) GO BACK TO THE START OF THE DATA SET
         TM    DCBOFLGS,DCBOFOPN   IS THE DCB OPEN AGAIN?
         BNO   UNZNODIR            NO, SO CANNOT CONTINUE HERE
         OI    STATUS,STOPEN       YES, UPDATE STATUS
         B     UNZIPGET            LET'S TRY THAT AGAIN
         SPACE
UNZEMPTY LA    R0,=CL17'ZIP FILE IS EMPTY'
         LA    R1,17
         B     UNZLDMSG            GO LOAD MESSAGE
         SPACE
UNZNODIR LA    R0,=CL41'CANNOT FIND FIRST CENTRAL DIRECTORY ENTRY'
         LA    R1,41
UNZLDMSG STH   R1,MSG              SET MESSAGE LENGTH
         LA    R14,MSG+2
         LR    R15,R1
         MVCL  R14,R0              LOAD MESSAGE TEXT
         OI    STATUS7,$7BELL      SOUND BELL FOR ERROR MESSAGE
         B     UNZIPERX            ABORT ZIP FILE INTERPRETATION
         SPACE
         USING ZEOC,R7
ZCFDSZOK L     R7,ZIPEOCAD         NON-ZERO CENTRAL DIRECTORY SIZE?
         SR    R6,R6
         ICM   R6,1,ZEOCENTT       GET CENTRAL DIRECTORY ENTRY COUNT
         ICM   R6,2,ZEOCENTT+1
         LTR   R6,R6               ANY ENTRIES?
         BZ    UNZEMPTY            NO, ZIP FILE MUST BE EMPTY
         DROP  R7                  ZEOC
         USING ZCFH,R8
         CLC   =X'504B0102',ZCFHID CENTRAL DIRECTORY ENTRY SIGNATURE?
         BNE   UNZNODIR            NO, CANNOT FIND FIRST ENTRY
         ICM   R0,15,DIVORG        WAS "DIV" USED?
         BNP   UNZNODIV            NO, NO NEED TO CLEAR IT
         LA    R0,16               YES, GET ENTRY CODE (FREEMAIN)
         L     R15,DIVADDR2        LOAD REVDIV ENTRY POINT
         BASR  R14,R15             CALL IT
UNZNODIV LA    R0,64
         TM    OSBITS,X'92'        MVS/XA-LIKE WITH OVER 16MB VIRTUAL?
         BO    *+8                 YES, LOTS OF STORAGE AVAILABLE
         LA    R0,16               NO, REDUCE CHUNK SIZE
         SLL   R0,12               MULTIPLY BY 4096 TO GET REQUEST SIZE
         ST    R0,DIVSZREQ         SAVE IT
         SR    R0,R0               GET "DIV" ENTRY CODE (GETMAIN)
         ST    R0,TTR              CLEAR LOCATION DATA
         L     R15,DIVADDR2        LOAD "DIV" ENTRY POINT
         BASR  R14,R15             CALL IT
         LTR   R15,R15             SUCCESS?
         BZ    UNZDIVOK            YES
         LM    R0,R1,ZIPBFLEN      LOAD ZIP DIRECTORY BUFFER DETAILS
         FREEMAIN RU,LV=(0),A=(1)  FREE IT
         B     UNZDIVBD            TERMINATE ZIP PROCESSING
UNZDIVOK OI    STATUS8,$8ZIPD      FLAG PROCESSING ZIP DIRECTORY
         OI    STATUS13,$13_L      FLAG STORE METHOD TO REVDIV
         ST    R15,COUNT           RESET RECORD NUMBER
         ST    R15,LINKAREA        RESET MAXIMUM FILE NAME LENGTH
         USING RZDE,R2
ZSTORELP L     R2,BLOCKPTR         POINT TO RECORD WORK AREA
         TM    TSTRECFM,X'40'      VARIABLE-LENGTH RECORDS EXPECTED?
         BZ    *+8                 NO
         LA    R2,4(,R2)           YES, LEAVE ROOM FOR DESCRIPTOR WORD
         CLC   =X'504B0102',ZCFHID CENTRAL DIRECTORY ENTRY SIGNATURE?
         BNE   UNZBADID            NO, END ZIP ENTRY FORMATTING
         SR    R0,R0               GET ZERO
         STCM  R0,15,RZDEOFHI      CLEAR RBA HIGH WORD
         ICM   R15,1,ZCFHOFST      GET LOCAL FILE HEADER RBA
         ICM   R15,2,ZCFHOFST+1
         ICM   R15,4,ZCFHOFST+2
         ICM   R15,8,ZCFHOFST+3
         STCM  R15,15,RZDEOFST     SAVE IT
         MVC   RZDEMETA,ZCFHMETA   SAVE CRC AND FILE SIZES
         MVC   RZDERTYP,BLANKS     YES, CLEAR RECORD FORMAT AND LENGTH
         SR    R1,R1
         IC    R1,ZCFHOSFS         LOAD OPERATING SYSTEM FILE SYSTEM
         LA    R0,ZFSMAX
         CR    R1,R0               VALUE TOO LARGE?
         BNH   UNZFSOK             NO
         LR    R1,R0               YES, REDUCE TO MAXIMUM
UNZFSOK  SLL   R1,2                MULTIPLY BY FOUR FOR INDEX
         LA    R1,ZFS(R1)
         MVC   RZDEOSFS,0(R1)
         SR    R1,R1
         ICM   R1,1,ZCFHMETH       FORMAT COMPRESSION METHOD
         ICM   R1,2,ZCFHMETH+1
         LA    R0,ZMETHMAX
         CR    R1,R0               KNOWN METHOD?
         BL    ZMETHKNO            YES
         CVD   R1,DOUBLE           NO
         OI    DOUBLE+7,X'0F'
         UNPK  RZDEMETH,DOUBLE     LOAD METHOD NUMBER
         MVI   RZDEMETH,C'U'       INDICATE UNKNOWN
         B     ZMETHOK
ZMETHKNO SLL   R1,2                MULTIPLY BY FOUR FOR INDEX
         LA    R1,ZMETH(R1)
         MVC   RZDEMETH,0(R1)
         CLI   ZCFHMETH,6          IMPLODED?
         BE    ZMETH6              YES
         CLI   ZCFHMETH,8          DEFLATED?
         BE    ZMETH8              YES
         B     ZMETHOK
ZMETH6   TM    ZCFHFLG1,ZIDICT8K   8K SLIDING DICTIONARY USED?
         BZ    Z6DICTOK            NO, 4K SLIDING DICTIONARY
         MVI   RZDEMETH+1,C'8'     YES
Z6DICTOK TM    ZCFHFLG1,ZI3SFTRE   3 SHANNON-FANO TREES USED?
         BZ    ZMETHOK             NO, 2 SHANNON-FANO TREES
         MVI   RZDEMETH+3,C'3'     YES
         B     ZMETHOK
ZMETH8   IC    R1,ZCFHFLG1
         SLL   R1,29
         SRL   R1,30
         LA    R1,Z8TYPE(R1)
         MVC   RZDEMETH+3(1),0(R1)
ZMETHOK  ICM   R15,1,ZCFHSZUN      GET UNCOMPRESSED FILE SIZE
         ICM   R15,2,ZCFHSZUN+1
         ICM   R15,4,ZCFHSZUN+2
         ICM   R15,8,ZCFHSZUN+3
         SLL   R15,1               RESET SIGN BIT
         SRL   R15,1
         CVD   R15,DOUBLE          CONVERT SIZE TO DECIMAL FOR DISPLAY
         TM    ZCFHSZUN+3,X'80'    SIGN BIT ON?
         BZ    ZNUMSIZE            NO
         AP    DOUBLE,=P'2147483648'
         ICM   R15,8,ZCFHSZUN+3    RESTORE SIGN BIT
ZNUMSIZE OI    DOUBLE+7,X'0F'
         MVC   RZDESIZE,DOUBLE+L'DOUBLE-L'RZDESIZE
         ICM   R0,1,ZCFHSZCM       GET COMPRESSED FILE SIZE
         ICM   R0,2,ZCFHSZCM+1
         ICM   R0,4,ZCFHSZCM+2
         ICM   R0,8,ZCFHSZCM+3
         SLL   R0,1                RESET SIGN BIT
         SRL   R0,1
         CVD   R0,DOUBLE           CONVERT SIZE TO DECIMAL FOR DISPLAY
         TM    ZCFHSZCM+3,X'80'    SIGN BIT ON?
         BZ    ZNUMPACK            NO
         AP    DOUBLE,=P'2147483648'
         ICM   R0,8,ZCFHSZCM+3     RESTORE SIGN BIT
ZNUMPACK OI    DOUBLE+7,X'0F'
         MVC   RZDEPACK,DOUBLE+2
         MVC   RZDERDUC,=C' N/A'
         LTR   R1,R15              ZERO BYTES?
         BZ    ZREDUCOK            YES, AVOID S0C9
         BP    ZREDPCNT            NO, LOOKS GOOD
         SRL   R15,1               RESCALE TO AVOID SIGN BIT HASSLES
         SRL   R0,1
         LR    R1,R15
ZREDPCNT MVC   RZDERDUC,=C' < 0'
         SR    R1,R0               GET BYTE COUNT REDUCTION
         BM    ZREDUCOK            FILE GOT BIGGER
         M     R0,=F'100'          PREPARE FOR PERCENTAGE
         DR    R0,R15
         CVD   R1,DOUBLE
         MVC   RZDERDUC,=X'40202120'
         ED    RZDERDUC,DOUBLE+6
         MVC   RZDERDUC(3),RZDERDUC+1
         MVI   RZDERDUC+3,C'%'
ZREDUCOK SR    R1,R1
         ICM   R1,1,ZCFHDATE       LOAD MODIFICATION DATE
         ICM   R1,2,ZCFHDATE+1
         LR    R0,R1               COPY MODIFICATION DATE
         SLL   R0,27
         SRL   R0,27               GET DAY (5 BITS)
         LA    R15,RZDEDATE+6      POINT TO DISPLAY AREA
         BAS   R14,UNZFMT2         SHOW 2 DECIMAL DIGITS
         MVI   RZDEDATE+5,C'-'
         LR    R0,R1               COPY MODIFICATION DATE
         SLL   R0,23
         SRL   R0,28               GET MONTH (4 BITS)
         LA    R15,RZDEDATE+3      POINT TO DISPLAY AREA
         BAS   R14,UNZFMT2         SHOW 2 DECIMAL DIGITS
         MVI   RZDEDATE+2,C'-'
         SRL   R1,9                GET YEAR (7 BITS)
         LA    R0,80(,R1)          ADJUST FOR BASE OF 1980
         LA    R15,RZDEDATE        POINT TO DISPLAY AREA
         BAS   R14,UNZFMT2         SHOW 2 DECIMAL DIGITS
         MVI   RZDETPAD,C' '
         ICM   R0,1,ZCFHTIME       LOAD MODIFICATION TIME
         ICM   R0,2,ZCFHTIME+1
         SRDL  R0,11               GET HOUR (5 BITS)
         LA    R15,RZDEHOUR        POINT TO DISPLAY AREA
         BAS   R14,UNZFMT2         SHOW 2 DECIMAL DIGITS
         MVI   RZDETSEP,C':'
         SR    R0,R0
         SLDL  R0,6                GET MINUTE (6 BITS)
         LA    R15,RZDEMINS        POINT TO DISPLAY AREA
         BAS   R14,UNZFMT2         SHOW 2 DECIMAL DIGITS
         MVI   RZDETYPE,C'E'       PREPARE FOR EBCDIC TEXT FILE
         TM    ZCFHINAT,ZCFHEBCD   EBCDIC FILE?
         BO    UNZTYPOK            YES
         MVI   RZDETYPE,C'A'       PREPARE FOR ASCII TEXT FILE
         TM    ZCFHINAT,ZCFHASCI   ASCII FILE?
         BO    UNZTYPOK            YES
         MVI   RZDETYPE,C'B'       DENOTE BINARY FILE
UNZTYPOK TM    ZCFHFLG1,ZENCRYPT   IS THE FILE ENCRYPTED?
         BO    *+8                 YES, LEAVE TYPE IN UPPER CASE
         XI    RZDETYPE,X'40'      NO, CHANGE TYPE TO LOWER CASE
         ICM   R0,3,ZCFHXFLN       IS THERE AN EXTRA FIELD PRESENT?
         BZ    UNZXLCHK            NO
         MVI   RZDEXTRA,X'A7'      YES, DENOTE THIS
         TM    ZCFHFLG1,ZDATADSC   EXTENDED LOCAL HEADER PRESENT?
         BZ    UNZEXTOK            NO
         MVI   RZDEXTRA,C'X'       YES, DENOTE THIS
         B     UNZEXTOK
UNZXLCHK MVI   RZDEXTRA,C'-'       PREPARE FOR NO EXTRA FIELDS
         TM    ZCFHFLG1,ZDATADSC   EXTENDED LOCAL HEADER PRESENT?
         BZ    UNZEXTOK            NO
         MVI   RZDEXTRA,X'93'      YES, DENOTE THIS
UNZEXTOK SR    R7,R7
         ICM   R7,1,ZCFHNMLN       LOAD FILE NAME LENGTH
         ICM   R7,2,ZCFHNMLN+1
         LTR   R1,R7               COPY IT
         BZ    UNZNAMOK            SKIP FORMATTING IF ZERO LENGTH
         LA    R0,256              GET THE MAXIMUM LENGTH
         CR    R1,R0               NAME TOO LONG TO FIT?
         BNH   UNZSTLEN            NO  (HOPE 256 NOT BIGGER THAN BLKSI)
         LR    R1,R0               YES, REDUCE TO MAXIMUM
UNZSTLEN STH   R1,MSG+4            SAVE STORED FILE NAME LENGTH
         C     R1,LINKAREA         NEW LONGEST FILE NAME?
         BNH   *+8                 NO
         ST    R1,LINKAREA         YES, SAVE IT
         BCTR  R1,0                DECREMENT FOR EXECUTE
         EX    R1,ZFNMLOAD         LOAD THE FILE NAME
         LA    R1,RZDEFNM          POINT TO FILE NAME
         LR    R0,R7               GET LENGTH OF FILE NAME
         XLATE (1),(0),TO=E        TRANSLATE FILE NAME INTO EBCDIC
UNZNAMOK SR    R1,R1
         ICM   R1,1,ZCFHXFLN       LOAD EXTRA FIELD LENGTH
         ICM   R1,2,ZCFHXFLN+1
         LA    R15,ZCFHNAME(R7)    POINT TO THE EXTRA FIELD
         AR    R7,R1               GET LENGTH OF NAME PLUS EXTRA FIELD
         LA    R1,ZCFHNAME(R7)     POINT TO THE COMMENT
UNZXFLP1 CR    R15,R1              PROCESSED EXTRA FIELD?
         BNL   UNZXDONE            YES
         USING ZX64XF,R15
         SR    R14,R14             CLEAR FOR INSERT
         ICM   R14,2,ZX64LEN+1
         ICM   R14,1,ZX64LEN       GET SUB-FIELD PAYLOAD SIZE
         CLI   ZX64ID+1,0          SUB-FIELD TAG < 256?
         BNE   UNZXFNX1            NO, NOT INTERESTED?
         CLI   ZX64ID,X'01'        ZIP64 SUB-FIELD?
         BE    UNZXFZ64            YES
         CLI   0(R15),X'65'        UNCOMPRESSED Z390/I400 SUB-FIELD?
         BNE   UNZXFNX1            NO
         CLC   =C'Z390',4(R15)     SPECIFICALLY Z390 SUB-FIELD?
         BE    UNZXFIBM            YES
UNZXFNX1 LA    R15,4(R14,R15)      POINT TO NEXT SUB-FIELD
         B     UNZXFLP1            SUB-FIELD PROCESSING COMPLETE
         SPACE
UNZXFZ64 SR    R0,R0               PROCESS ZIP64 EXTENDED FIELD
         BCTR  R0,0                PREPARE HIGH VALUES
         LA    R15,ZX64DATA        POINT TO XF01 PAYLOAD
         DROP  R15                 ZX64XF
         CLM   R0,15,ZCFHSZUN      UNCOMPRESSED SIZE OVERFLOW?
         BNE   UNZSZ1OK            NO
         LA    R15,8(,R15)         YES, POINT PAST THIS VALUE
         SH    R14,HW8             ADJUST REMAINING BYTE COUNT
         BNP   UNZXFLP1            END OF ZIP64 EXTRA FIELD
UNZSZ1OK CLM   R0,15,ZCFHSZCM      COMPRESSED SIZE OVERFLOW?
         BNE   UNZSZ2OK            NO
         LA    R15,8(,R15)         YES, POINT PAST THIS VALUE
         SH    R14,HW8             ADJUST REMAINING BYTE COUNT
         BNP   UNZXFLP1            END OF ZIP64 EXTRA FIELD
UNZSZ2OK CLM   R0,15,ZCFHOFST      LFH OFFSET OVERFLOW?
         BNE   UNZSZ3OK            NO
         ICM   R0,1,0(R15)         YES, GET 64-BIT OFFSET VALUE
         ICM   R0,2,1(R15)
         ICM   R0,4,2(R15)
         ICM   R0,8,3(R15)
         STCM  R0,15,RZDEOFST      SET RBA LOW 32 BITS
         ICM   R0,1,4(R15)
         ICM   R0,2,5(R15)
         ICM   R0,4,6(R15)
         ICM   R0,8,7(R15)
         STCM  R0,15,RZDEOFHI      SET RBA HIGH 32 BITS
UNZSZ3OK ALR   R15,R14             POINT PAST ZIP64 PAYLOAD
         B     UNZXFLP1            SUB-FIELD PROCESSING COMPLETE
         SPACE
UNZXFIBM LA    R14,4(R14,R15)      POINT PAST XF65 SUB-FIELD
         LA    R15,8(,R15)         POINT TO XF65 PAYLOAD
         SR    R0,R0               CLEAR FOR INSERT
UNZXFLP2 CR    R15,R14             PROCESSED EXTRA FIELD?
         BNL   UNZXFLP1            YES
         CLI   3(R15),0            FIELD CODE LESS THAN 256?
         BNE   UNZXFNX2            NO, NOT INTERESTED
         CLI   2(R15),X'02'        RECORD FORMAT?
         BNE   UNZXFBSZ            NO, GO TRY BLOCK SIZE
         TM    4(R15),X'C0'
         BZ    UNZXFNX2            RECFM PROCESSED
         MVI   RZDERTYP,C'U'
         BO    UNZXFNX2            RECFM PROCESSED
         MVI   RZDERTYP,C'F'
         TM    4(R15),X'80'
         BO    UNZXFNX2            RECFM PROCESSED
         MVI   RZDERTYP,C'V'
         B     UNZXFNX2            RECFM PROCESSED
UNZXFBSZ CLI   2(R15),X'04'        BLOCK SIZE?
         BNE   UNZXFRSZ            NO, GO TRY RECORD SIZE
         CLI   RZDERTYP+L'RZDERTYP-1,C' '
         BH    UNZXFNX2            DO NOT OVERLAY RECORD SIZE
         B     UNZXFSIZ            GO SHOW THE SIZE
UNZXFRSZ CLI   2(R15),X'5C'        RECORD SIZE?
         BNE   UNZXFNX2            NO
UNZXFSIZ ICM   R0,3,4(R15)         YES
         CVD   R0,DOUBLE
         IC    R0,RZDERTYP         SAVE ANY RECFM FLAG
         MVC   RZDERTYP,=X'402020202120'
         ED    RZDERTYP,DOUBLE+5
         STC   R0,RZDERTYP         RESTORE PREVIOUS FIRST CHARACTER
UNZXFNX2 ICM   R0,2,1(R15)
         ICM   R0,1,0(R15)         GET FIELD LENGTH
         ALR   R15,R0              POINT TO NEXT FIELD
         B     UNZXFLP2
         SPACE
UNZXDONE SR    R0,R0
         ICM   R0,1,ZCFHCMLN       LOAD COMMENT LENGTH
         ICM   R0,2,ZCFHCMLN+1
         AR    R7,R0               GET LENGTH OF ALL VARIABLE FIELDS
         CLM   R0,3,HW10           COMMENT LENGTH OVER 9?
         BNL   UNZCMTOK            YES, TOO LONG FOR MINIZIP DCB DATA
         CLI   ZCFHCMLN,4          COMMENT LENGTH AT LEAST 4?
         BL    UNZCMTOK            NO, TOO SHORT FOR MINIZIP DCB DATA
         MVC   MSG+8(9),0(R1)      COPY UP TO 9 BYTES OF COMMENT
         XLATE MSG+8,9,TO=E        TRANSLATE COMMENT INTO EBCDIC
         CLI   MSG+9,C','          SECOND CHARACTER A COMMA?
         BNE   UNZCMTOK            NO, NOT MINIZIP DCB DATA
         SR    R1,R1
         IC    R1,ZCFHINAT
         IC    R1,UNZFLTYP(R1)     GET FILE TYPE FLAG
         CLM   R1,1,MSG+8          FILE TYPE SETTING MATCH?
         BNE   UNZCMTOK            NO, NOT MINIZIP DCB DATA
         CLI   MSG+10,C'F'         FIXED-LENGTH RECORDS?
         BE    UNZOSDCB            YES
         CLI   MSG+10,C'U'         POSSIBLY VARIABLE OR UNDEFINED?
         BL    UNZCMTOK            NO, NOT MINIZIP DCB DATA
         CLI   MSG+10,C'V'         POSSIBLY VARIABLE OR UNDEFINED?
         BH    UNZCMTOK            NO, NOT MINIZIP DCB DATA
UNZOSDCB MVC   RZDERTYP(1),MSG+10  LOAD RECORD FORMAT
         SR    R0,R0
         IC    R0,ZCFHCMLN         LOAD COMMENT LENGTH
         LA    R1,3                PROCESSED THREE BYTES
         SR    R0,R1               GET NUMBER OF COMMENT BYTES LEFT
         LA    R1,MSG+11           POINT TO FOURTH COMMENT BYTE
UNZNUMLP CLI   0(R1),C'0'          NUMERIC?
         BL    UNZNUMNX            NO
         MVC   RZDERTYP+1(4),RZDERTYP+2
         MVC   RZDERTYP+5(1),0(R1) YES, SHUFFLE UP AND APPEND IT
UNZNUMNX LA    R1,1(,R1)           POINT TO NEXT COMMENT BYTE
         BCT   R0,UNZNUMLP         PROCESS REST OF COMMENT
UNZCMTOK LA    R8,ZCFHNAME(R7)     POINT TO NEXT CENTRAL FILE HEADER
         LH    R1,MSG+4            GET STORED FILE NAME LENGTH
         LA    R1,RZDEFIXL(,R1)    GET RECORD LENGTH
         C     R1,RECSIZE          DATA LONGER THAN LRECL?
         BNH   *+8                 NO
         L     R1,RECSIZE          YES, REDUCE TO MAXIMUM DISPLAYABLE
         TM    TSTRECFM,X'40'      VARIABLE-LENGTH RECORDS EXPECTED?
         BZ    UNZPDDIV            NO
         L     R2,BLOCKPTR         YES, POINT TO "RDW"
         LA    R1,4(,R1)           ADD RDW LENGTH TO RECORD LENGTH
         STH   R1,0(,R2)           SUPPLY RECORD LENGTH
UNZPDDIV LA    R0,4                GET ENTRY CODE (RECORD STORE)
         L     R15,DIVADDR2        LOAD REVDIV ENTRY POINT
         BASR  R14,R15             CALL IT
         LTR   R15,R15             WAS THERE ROOM TO STORE IT?
         BNZ   UNZIPFUL            NO
         LA    R0,1
         A     R0,COUNT            INCREMENT RECORD COUNT
         ST    R0,COUNT
         BCT   R6,ZSTORELP         PROCESS NEXT ZIP DIRECTORY ENTRY
         DROP  R8                  ZCFH
         SPACE
UNZIPEND SR    R1,R1
         BCTR  R1,0                FLAG E-O-F
         LA    R0,4                GET ENTRY CODE (RECORD STORE)
         L     R15,DIVADDR2        LOAD REVDIV ENTRY POINT
         BASR  R14,R15             CALL IT
         L     R15,CHKPTTOP        FLAG NON-EMPTY FULLY READ DATA SET
         LA    R15,CHKPTLN(,R15)   LEAVE POINT VALUE FOR FIRST BLOCK
         XC    0(CHKPTLN,R15),0(R15)
         ST    R1,0(,R15)          INDICATE HAVE READ E-O-F
         ST    R15,CHKPTBOT
         SPACE
         USING ZE64EOC,R8
         CLC   =X'504B0606',ZE64ID ZIP64 EOCD SIGNATURE?
         BNE   UNZIPEOC            NO, PROBABLY NOT A ZIP64 ARCHIVE
         ICM   R1,1,ZE64SIZE       YES
         ICM   R1,2,ZE64SIZE+1
         ICM   R1,4,ZE64SIZE+2
         ICM   R1,8,ZE64SIZE+3
         LA    R8,ZE64VER(R1)      POINT PAST ZE64EOC STRUCTURE
         DROP  R8                  ZE64EOC
         USING ZL64LOC,R8
         CLC   =X'504B0607',ZL64ID ZIP64 ZE64EOC LOCATOR SIGNATURE?
         BNE   UNZFRECD            NO, NOW LOST SO GO FREE ZIP BUFFER
         LA    R8,ZL64FXLN(,R8)    YES, POINT PAST THIS STRUCTURE
         DROP  R8                  ZL64LOC
         SPACE
         USING ZEOC,R8
UNZIPEOC CLC   =X'504B0506',ZEOCID END OF CENTRAL DIRECTORY SIGNATURE?
         BNE   UNZFRECD            NO, NOW LOST SO GO FREE ZIP BUFFER
         SR    R1,R1
         ICM   R1,1,ZEOCCMLN
         ICM   R1,2,ZEOCCMLN+1     GET ZIP ARCHIVE COMMENT LENGTH
         LTR   R1,R1               ANY ZIP ARCHIVE COMMENT PRESENT?
         BNP   UNZFRECD            NO, GO FREE CENTRAL DIRECTORY BUFFER
         LA    R0,L'SYNADMSG       GET MAXIMUM DISPLAY LENGTH
         CR    R1,R0               IS COMMENT TOO LONG TO FIT?
         BNH   *+8                 NO
         LA    R1,L'SYNADMSG       YES, REDUCE LENGTH TO MAXIMUM
         STH   R1,DOUBLE           SAVE THE LENGTH
         MVI   SYNADMSG,X'2A'      CLEAR BUFFER WITH ASCII ASTERISKS
         MVC   SYNADMSG+1(L'SYNADMSG-1),SYNADMSG
         LA    R14,SYNADMSG        POINT TO THE COMMENT HOLD AREA
         LA    R15,L'SYNADMSG      GET ITS LENGTH
         LA    R0,L'SYNADMSG-2
         CR    R1,R0               SHORT ENOUGH TO NEED CENTERING?
         BH    UNZIPCMT            NO, TOO LONG
         SR    R15,R1              GET THE SPARE BUFFER SPACE SIZE
         SRA   R15,1               HALVE IT
         AR    R14,R15             CENTRE THE COMMENT TEXT
         LR    R15,R14
         BCTR  R15,0
         MVI   0(R15),X'20'        INSERT PRECEEDING ASCII BLANK
         LR    R15,R1              TARGET LENGTH EQUALS SOURCE LENGTH
UNZIPCMT LA    R0,ZEOCCMNT         POINT TO THE ZIP ARCHIVE COMMENT
         ICM   R1,8,SYNADMSG       SET PAD TO ASCII BLANK
         MVCL  R14,R0              COPY THE ZIP ARCHIVE COMMENT
         CLI   DOUBLE+1,L'SYNADMSG-1   ROOM TO APPEND A BLANK?
         BNL   *+8                 NO
         MVI   0(R14),X'20'        APPEND AN ASCII BLANK
         LA    R1,SYNADMSG         POINT TO THE COMMENT HOLD AREA
         LA    R0,L'SYNADMSG       GET ITS LENGTH
         XLATE (1),(0),TO=E        TRANSLATE COMMENT INTO EBCDIC
         TR    SYNADMSG,PERIODS    REMOVE ANY CONTROL CODES FROM TEXT
         MVI   SYNADSW,X'F0'       SET FLAG TO DISPLAY THIS TEXT
         DROP  R8                  ZEOC
         SPACE
UNZFRECD LM    R0,R1,ZIPBFLEN      LOAD ZIP DIRECTORY BUFFER DETAILS
         FREEMAIN RU,LV=(0),A=(1)  FREE IT
         ICM   R1,15,FMTAREA       FORMAT AREA ALREADY CREATED?
         BNZ   UNZFMTOK            YES, USE IT
         L     R0,UNZFMTSZ         GET FORMAT AREA SUBPOOL AND SIZE
         LR    R2,R0               COPY THIS SUBPOOL AND SIZE
         MVI   GETMNTRC,20         TRACK GETMAIN IN CASE OF FAILURE
         GETMAIN R,LV=(0)
         ST    R1,FMTAREA          POINT TO THIS AREA FROM @DATA
         USING @FMTAREA,R1
         ST    R2,FMTSIZE          SAVE SUBPOOL AND SIZE OF THIS AREA
UNZFMTOK MVC   FMTFELS(ZIPFELEN),ZIPFELS
         LA    R15,FMTFELS
         LA    R15,ZIPFELEN(,R15)
         TM    TSTRECFM,X'40'      VARIABLE-LENGTH RECORDS EXPECTED?
         BZ    UNZFMTLN            NO
         MVC   FMTFELS(ZIPFELNV),ZIPFELSV
         LA    R15,FMTFELS
         LA    R15,ZIPFELNV(,R15)
UNZFMTLN ST    R15,FMTFELAD        INDICATE USED FELS
         MVC   FMTNAME,=C'*ZIPFILE'
         LA    R0,FELSIZE
         SR    R15,R0              POINT TO FEL FOR FILENAME (LAST FEL)
         L     R14,RECSIZE         GET MAXIMUM RECORD DATA LENGTH
         C     R14,SCRNCOLS        IS THAT LESS THAN THE SCREEN WIDTH?
         BNL   *+8                 NO
         L     R14,SCRNCOLS        YES, USE THE SCREEN WIDTH
         LA    R0,62               GET WIDTH OF PREVIOUS FIELDS
         SR    R14,R0              GET AVAILABLE SPACE FOR NAME
         C     R14,LINKAREA        IS IT LARGER THAN NEEDED?
         BNH   *+8                 NO
         L     R14,LINKAREA        YES, REDUCE TO LARGEST ENCOUNTERED
         STH   R14,FELSYMLN(,R15)  UPDATE FILENAME FIELD LENGTH
         STH   R14,FELDSPLN(,R15)  UPDATE FILENAME DISPLAY LENGTH
         DROP  R1                  @FMTAREA
         OI    MODE,MD_FMT         ENABLE FORMATTING
         NI    MODE,255-MD_ASCII-MD_HEX
         NI    STATUS16,255-$16HEX
         OI    STATUS8,$8ZIPF      ALLOW CURSOR SELECTION
         LA    R0,$ZIPWKLN         GET DYNAMIC AREA SIZE
         LR    R1,R13              POINT TO DYNAMIC AREA
         L     R13,4(,R13)         POINT TO PREVIOUS SAVE AREA
         OI    11(R13),X'01'       INVALIDATE FORWARD POINTER
         FREEMAIN RU,LV=(0),A=(1)  FREE DYNAMIC AREA
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         SR    R14,R14
         ST    R14,FNDNUM          RESET LAST-FOUND RECORD NUMBER
         ST    R14,FNDOFF          RESET LAST-FOUND OFFSET
         MVC   COUNT,ZIPDIRF#      SHOW FROM APPROPRIATE ENTRY
         ST    R14,ZIPDIRF#        SHOW FROM FIRST ENTRY
         L     R0,COUNT
         C     R0,DIVHICNT         DOES THE TOP LINE EXIST?
         BL    *+8                 YES
         ST    R14,COUNT           NO, PROBABLY NESTED ZIP ARCHIVE
         LA    R14,RZDERTYP-RZDE
         ST    R14,OFFSET          HIDE METADATA AND RBA
         LA    R14,HILLOOP         RESUME DATA LOAD AND SHOW
         BR    R14
         SPACE
         USING ZCFH,R8
ZFNMLOAD MVC   RZDEFNM(0),ZCFHNAME <<< EXECUTED >>>
         DROP  R8,R2               ZCFH, RZDE
         SPACE
UNZIPFUL MVI   SYNADSW,X'FF'       SIMULATE I/O ERROR
         MVC   SYNADMSG,SSEOFMSG   LOAD INFORMATIVE MESSAGE
         B     UNZIPEND
         SPACE
UNZBADID MVI   SYNADSW,X'FF'       SIMULATE I/O ERROR
         MVC   SYNADMSG,ZIPIDMSG   LOAD INFORMATIVE MESSAGE
         B     UNZIPEND
         SPACE
UNZFMT2  CVD   R0,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  0(2,R15),DOUBLE
         BR    R14
         SPACE
         DROP  R13                 @ZIPWORK
         SPACE 2
**********************************************************************
*                                                          *         *
*         DETERMINE "PRINTOUT" STATUS                      *  GP@P6  *
*                                                          * JAN2012 *
**********************************************************************
*
*   AN EXAMINATION OF THE FIRST DATA BYTES HAS SHOWN THAT THE
*   FILE IS NOT A ZIP ARCHIVE.  THIS IS AS GOOD A PLACE AS ANY
*   TO DETERMINE IF THE FILE IS A "PRINTOUT", SO THAT A FLAG
*   CAN BE SET ONCE FOR THE FILE, AND CAN BE CHECKED AS REQUIRED
*   WITHOUT REPEATING THE TESTS.
*
*   THE "PRINTOUT" FLAG IS $12PRT.
*
*   $12PRT WILL BE SET AUTOMATICALLY UNDER ANY OF THE FOLLOWING
*   CIRCUMSTANCES:
*
*   - THE REVIEW SESSION WAS INITIATED FROM REVOUT.
*   - THE RECORD FORMAT INDICATES THE PRESENCE OF CARRIAGE CONTROL.
*   - THE RECORD FORMAT DOES NOT INDICATE THE PRESENCE OF CARRIAGE
*     CONTROL BUT THE MAXIMUM DISPLAY RECORD LENGTH IS EITHER 121
*     OR 133 BYTES AND THE FIRST DATA BYTE IS EITHER '1' OR X'8B'.
*
*   RTF PROCESSING (WHICH IS ENABLED BY SETTING $12PRT) ASSUMES
*   THAT LRECL IS LESS THAN 256.
*
*     R4 -> DYNDCBW
*    R15 -> FIRST DATA BYTE OF THE FILE BEING REVIEWED
*           (IT IS KNOWN THAT THE FILE IS NOT EMPTY)
*
         SPACE
PRINTCHK LM    R14,R12,12(R13)     RESTORE REGISTER EX UNZIPDIR
         TM    STATUS11,$11OT      RECEIVED CONTROL FROM REVOUTPT?
         BO    PRINTOUT            YES, IS PRINT OUTPUT
         CLI   $UCBAD,0            ANY DATA SET WACKINESS?
         BNE   HILLFILE            YES, NOT PRINT OUTPUT
         TM    TSTRECFM,DCBRECCC   EITHER SORT OF CARRIAGE CONTROL?
         BNZ   PRINTOUT            YES, IS PRINT OUTPUT
         ICM   R0,14,RECSIZE       RECORD LENGTH LESS THAN 256?
         BNZ   HILLFILE            NO, NOT PRINT OUTPUT
         CLI   RECSIZE+3,121       RECORDS UP TO 121 BYTES?
         BE    PRINTCCC            YES, GO CHECK CARRIAGE CONTROL CODE
         CLI   RECSIZE+3,133       RECORDS UP TO 133 BYTES?
         BNE   HILLFILE            NO, ASSUME NOT PRINT OUTPUT
PRINTCCC CLI   0(R15),C'1'         ANSI SKIP TO CHANNEL 1?
         BE    PRINTOUT            YES, ASSUME IS PRINT OUTPUT
         CLI   0(R15),X'8B'        SKIP TO CHANNEL 1 IMMEDIATE?
         BNE   HILLFILE            NO, ASSUME NOT PRINT OUTPUT
PRINTOUT OI    STATUS12,$12PRT     FLAG AS PRINT OUTPUT
         B     HILLFILE
         SPACE
         DROP  R5,R4               UNZIPDIR, IHADCB
         SPACE
ZIPIDMSG DC    CL78'******* INVALID ZIP FILE CENTRAL DIRECTORY ENTRY SI+
               GNATURE ENCOUNTERED *******'
ZIPBFSIZ DC    A(256*1024)         ZIPBFLEN PRIMER FOR FOUR 64K TRACKS
UNZFMTSZ DC    AL1(1),AL3($FMTLEN)
UNZFLTYP DC    C'BAE?'             BINARY, ASCII, EBCDIC, UNKNOWN
         SPACE
ZFS      DC    0F'0'               OPERATING SYSTEM FILE SYSTEM TYPES
         DC    C'FAT '         0 - FAT + PKZIPW 2.50 VFAT,NTFS
         DC    X'C1948781'     1 - AMIGA
         DC    C'VMS '         2 - VMS (VAX OR ALPHA AXP)
         DC    C'UNIX'         3 - UNIX
         DC    C'CMS '         4 - VM/CMS
         DC    X'C1A39989'     5 - ATARI
         DC    C'HPFS'         6 - HPFS (OS/2,NT 3.X)
         DC    X'D4818340'     7 - MACINTOSH
         DC    C'ZSYS'         8 - Z-SYSTEM
         DC    C'CP/M'         9 - CP/M
         DC    C'TOPS'        10 - TOPS-20 (DOC'D AS PKZIPW 2.50 NTFS)
         DC    C'NTFS'        11 - NTFS (NT)  (USED BY INFO-ZIP, ONLY)
         DC    C'QDOS'        12 - SMS/QDOS
         DC    X'C1839995'    13 - ACORN RISC OS
         DC    C'VFAT'        14 - VFAT        (INFO-ZIP RSVD, UNUSED)
         DC    C'MVS '        15 - MVS
         DC    X'C285D6E2'    16 - BEOS (BEBOX OR POWERMAC)
         DC    X'E3958494'    17 - TANDEM
         DC    C'I400'        18 - OS/400
         DC    C'OS X'        19 - OS X (DARWIN)
ZFSMAX   EQU   (*-ZFS)/4           MAXIMUM FILE SYSTEM NUMBER
         DC    C'????'             UNUSED AND/OR UNKNOWN
         SPACE
ZMETH    DC    0F'0'               COMPRESSION METHODS
         DC    C'STOR'         0 - STORED (NO COMPRESSION)
         DC    X'E2889992'     1 - SHRUNK
         DC    C'RE:1'         2 - REDUCED WITH COMPRESSION FACTOR 1
         DC    C'RE:2'         3 - REDUCED WITH COMPRESSION FACTOR 2
         DC    C'RE:3'         4 - REDUCED WITH COMPRESSION FACTOR 3
         DC    C'RE:4'         5 - REDUCED WITH COMPRESSION FACTOR 4
         DC    C'I4:2'         6 - IMPLODED
         DC    C'TOKN'         7 - RSVD FOR TOKENIZING COMP'N ALGORITHM
         DC    X'C485867B'     8 - DEFLATED
         DC    C'EDEF'         9 - RESERVED FOR ENHANCED DEFLATING
         DC    C'DCLI'        10 - PKWARE DATA COMP'N LIBRARY IMPLODING
ZMETHMAX EQU   (*-ZMETH)/4         MAXIMUM COMPRESSION METHOD NUMBER
*        DC    C'U###'             UNUSED AND/OR UNKNOWN
Z8TYPE   EQU   *                   DEFLATE COMPRESSION TYPE
         DC    C'N'                NORMAL
         DC    C'X'                MAXIMUM
         DC    C'F'                FAST
         DC    C'S'                SUPER FAST
         SPACE
         DC    0D'0'               READY-TO-USE FEL TABLE FOR ZIP
*               SYMBOL-NAME  FLAGS TYPE LENGTH  COLUMNS OFFSET
ZIPFELSV DC    CL8' RDW    ',X'00',C'C',AL2(04),AL2(04),AL2(0)
ZIPFELS  DC    CL8'METADATA',X'80',C'X',AL2(12),AL2(24),AL2(0)
         DC    CL8'FILE-RBA',X'80',C'X',AL2(08),AL2(16),AL2(0)
         DC    CL8'RECTYP  ',X'00',C'C',AL2(06),AL2(06),AL2(0)
         DC    CL8'OSFS    ',X'00',C'C',AL2(04),AL2(04),AL2(0)
         DC    CL8'FULLSIZE',X'A0',C'P',AL2(06),AL2(12),AL2(0)
         DC    CL8'PACKSIZE',X'A0',C'P',AL2(06),AL2(12),AL2(0)
         DC    CL8'COMP    ',X'00',C'C',AL2(04),AL2(04),AL2(0)
         DC    CL8'METH    ',X'00',C'C',AL2(04),AL2(04),AL2(0)
         DC    CL8'TX      ',X'00',C'C',AL2(02),AL2(02),AL2(0)
         DC    CL8'MODIFIED',X'00',C'C',AL2(14),AL2(14),AL2(0)
         DC    CL8'FILENAME',X'00',C'C',AL2(18),AL2(18),AL2(0)
ZIPFELEN EQU   *-ZIPFELS
ZIPFELNV EQU   *-ZIPFELSV
         LTORG
         SPACE
         DC    0H'0'
         SPACE
************************************************************
*                                                          *
*         SETUNZ  -  SET UNZIP FILE ATTRIBUTES             *
*                                                          *
************************************************************
         SPACE
         USING SETUNZ,R5
SETUNZ   TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    CMDINVLD            YES, COMMAND NOT ALLOWED
         TM    STATUS14,$14AS      BROWSING ADDRESS SPACE?
         BO    CMDINVLD            YES, COMMAND NOT ALLOWED
         LA    R15,OPD3            SET FOR ERRMANY
         TM    OPD3+6,PRESENT      ARE THERE TOO MANY OPERANDS?
         BO    ERRMANY             YES, INVALID
         LR    R5,R15              LOCAL BASE REGISTER
         XC    DOUBLE,DOUBLE       CLEAR A FLAG AND DATA AREA
         LA    R14,OPD1            POINT TO FIRST OPERAND
         BAS   R2,SETUNZOP         PROCESS IT
         LA    R14,OPD2            POINT TO SECOND OPERAND
         BAS   R2,SETUNZOP         PROCESS IT
         L     R15,DOUBLE          GET NEW VALUES, IF ANY
         TM    DOUBLE,1            NEW NUMBER SPECIFIED?
         BNO   *+8                 NO
         STH   R15,ZFLRECL         YES, SET IT
         TM    DOUBLE,2            NEW FORMAT SPECIFIED?
         BNO   *+8                 NO
         STCM  R15,4,ZFTYPE        YES, SET IT
         MVI   MSG,144             SETTING NOW OFF
         ICM   R0,7,ZFLRECL        ANY TYPE AND/OR LRECL SET?
         BZ    FILLSCR             NO, MESSAGE NOW READY
         MVC   MSG(MSGUNZL),MSGUNZ SETUNZIP O LRECL=12345
         TM    ZFTYPE,ZFT_SET      ANY TYPE EXPLICITLY SET?
         BNO   SETUNZTY            NO, TYPE NOT SET
         LA    R1,3                YES, GET SIGNIFICANT BIT MASK
         NR    R1,R0               EXTRACT THE ACTIVE FLAGS
         LA    R1,MSGUNZTY(R1)     POINT TO DISPLAYABLE TYPE
         MVC   MSG+11(1),0(R1)     SHOW TYPE
SETUNZTY LA    R14,10
         LH    R0,ZFLRECL          GET SPECIFIED LRECL
         LTR   R0,R0               ANY SPECIFIED LRECL?
         BZ    SETUZMSL            NO, SO SET MESSAGE LENGTH
         CVD   R0,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  MSG+19(5),DOUBLE
         LH    R14,MSG
SETUZ0LP CLI   MSG+19,C'0'         LEADING ZERO?
         BNE   SETUZMSL            NONE, SO SET MESSAGE LENGTH
         MVC   MSG+19(4),MSG+20    YES, SUPPRESS IT
         BCT   R14,SETUZ0LP
SETUZMSL STH   R14,MSG             SET FINAL MESSAGE LENGTH
         B     FILLSCR             COMMAND NOW PROCESSED
         SPACE
SETUNZOP TM    6(R14),PRESENT      IS OPERAND PRESENT?
         BZR   R2                  NO, RETURN WITHOUT ACTION
         ST    R14,16(,R13)        SAVE OPERAND DETAILS FOR ERRINV
         LA    R0,5
         CLM   R0,3,4(R14)         IS THE OPERAND TOO LONG?
         BL    ERRINV              YES, INVALID
         CLI   5(R14),0            IS THE OPERAND TOO SHORT?
         BE    ERRINV              YES, INVALID
         TM    6(R14),NUMERIC      IS IT NUMERIC?
         BNO   SETUNZNN            NO, IT IS NON-NUMERIC
         SPACE
         TM    DOUBLE,1            ALREADY HAD A NUMERIC OPERAND?
         BO    ERRINV              YES, INVALID
         OI    DOUBLE,1            NO, BUT HAVE NOW
         LH    R15,4(,R14)         GET THE OPERAND LENGTH
         L     R14,0(,R14)         POINT TO OPERAND VALUE
         BCTR  R15,0               DECREMENT FOR EXECUTE
         LM    R0,R1,DOUBLE        SAVE THE WORK AREA
         EX    R15,NUMRCPAK        GET THE NUMBER IN DECIMAL
         CVB   R15,DOUBLE          GET THE NUMBER IN BINARY
         STM   R0,R1,DOUBLE        RESTORE THE WORK AREA
         STH   R15,DOUBLE+2        SAVE THE OPERAND VALUE
         SRA   R15,15              SHIFT OUT 15 BITS
         LTR   R15,R15             VALUE LARGER THAN 32767?
         BNZ   ERRINV              YES, INVALID
         BR    R2                  OPERAND NOW PROCESSED
         SPACE
SETUNZNN L     R15,0(,R14)         POINT TO OPERAND VALUE
         CLI   0(R15),C'?'         QUESTION MARK?
         BER   R2                  YES, THAT'S FINE, SWALLOW IT
         TM    DOUBLE,2            ALREADY HAD NON-NUMERIC OPERAND?
         BO    ERRINV              YES, INVALID
         OI    DOUBLE,2            NO, BUT HAVE NOW
         CLI   0(R15),C'O'         OFF?
         BE    SETUNZO             YES
         CLI   0(R15),C'E'         EBCDIC?
         BE    SETUNZE             YES
         CLI   0(R15),C'B'         BINARY?
         BE    SETUNZB             YES
         CLI   0(R15),C'A'         ASCII?
         BE    SETUNZA             YES
         B     ERRINV              INVALID OPERAND
         SPACE
SETUNZO  MVI   DOUBLE+1,0          RESET FILE TYPE OVERRIDE
         BR    R2                  OPERAND NOW PROCESSED
SETUNZB  MVI   DOUBLE+1,ZFT_SET+ZCFHBNRY
         BR    R2                  OPERAND NOW PROCESSED
SETUNZA  MVI   DOUBLE+1,ZFT_SET+ZCFHASCI
         BR    R2                  OPERAND NOW PROCESSED
SETUNZE  MVI   DOUBLE+1,ZFT_SET+ZCFHEBCD
         BR    R2                  OPERAND NOW PROCESSED
         DROP  R5                  SETUNZ
         SPACE
MSGUNZTY DC    C'BAE?'
MSGUNZ   MESG  'SETUNZIP O LRECL=12345'
         SPACE
**********************************************************************
*                                                          *         *
*         FORMAT  -  PROCESS RECORD DEFINE STATEMENTS      *  GP@FT  *
*                                                          *  01/96  *
**********************************************************************
         SPACE
         USING FMTMODE,R5
FMTMODE  TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    CMDINVLD            YES, COMMAND NOT ALLOWED
         TM    STATUS14,$14AS      BROWSING ADDRESS SPACE?
         BO    CMDINVLD            YES, COMMAND NOT ALLOWED
         STM   R14,R12,12(R13)     SAVE REGISTERS
         LR    R5,R15              LOCAL BASE REGISTER
         LA    R15,OPD2            SET FOR ERRMANY
         TM    OPD2+6,PRESENT      ARE THERE TOO MANY OPERANDS?
         BO    ERRMANY             YES, INVALID
         TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BZ    FMTFLIP             NO, FLIP FLOP
         CLI   OPD1+5,8            IS IT TOO LONG FOR A MEMBER NAME?
         BH    ERRINV              YES, INVALID
         CLI   OPD1+5,0            IS IT A NULL STRING?
         BE    ERRINV              YES, INVALID
         TM    OPD1+6,QUOTED       IS THE OPERAND QUOTED?
         BO    FMTNAMED            YES, CAN'T BE THE ON OR OFF KEYWORDS
         L     R15,KEYPRSAD        POINT TO KEYWORD PARSER
         SR    R1,R1               REQUEST DEFAULT TABLE
         BASR  R14,R15             LOOK FOR KEYWORDS
         CLI   OPD1+7,1            IS IT 'ON'?
         BNE   FMTOFF              NO, TRY OFF
FMTOI    ICM   R1,15,FMTAREA       HAS A FORMAT BEEN LOADED?
         BZ    FMTDSCB             NO, NEED FORMAT NAME UNLESS VTOC
         USING @FMTAREA,R1
         LA    R0,FMTFELS          POINT TO FORMAT ELEMENT SLOTS
         C     R0,FMTFELAD         ANY DATA YET?
         BE    FMTNMLES            NO, SHOULD HAVE SPECIFIED NAME
         DROP  R1                  @FMTAREA
FMTOIX   OI    MODE,MD_FMT         YES, ENABLE FORMATTING
         NI    STATUS16,255-$16HEX
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         B     FILLSCR             GO REFORMAT THE SCREEN CONTENTS
FMTDSCB  CLI   DSORGTYP,X'DD'      LOOKING AT A VTOC?
         BNE   FMTNMLES            NO, SHOULD HAVE SPECIFIED FMT NAME
         L     R0,@FMTSIZE         GET DYNAMIC AREA SUBPOOL AND SIZE
         LR    R2,R0               COPY THIS SUBPOOL AND SIZE
         MVI   GETMNTRC,21         TRACK GETMAIN IN CASE OF FAILURE
         GETMAIN R,LV=(0)
         ST    R1,FMTAREA          POINT TO THIS AREA FROM @DATA
         USING @FMTAREA,R1
         ST    R2,FMTSIZE          SAVE SUBPOOL AND SIZE OF THIS AREA
         MVC   FMTFELS(256),DS1FELS
         MVC   FMTFELS+256(DS1FELEN-256),DS1FELS+256
         MVC   FMTNAME,=C'**VTOC**'
         LA    R15,FMTFELS
         LA    R15,DS1FELEN(,R15)
         ST    R15,FMTFELAD        INDICATE USED FELS
         B     FMTOIX              INITIATE DSCB FORMATTING
         DROP  R1                  @FMTAREA
FMTOFF   CLI   OPD1+7,2            IS IT 'OFF'?
         BNE   FMTNAMED            NO, GET THE FORMAT NAME
         BAS   R14,FREEHSE         FREE PICTURE DATA TO STOP DISPLAY
FMTNI    NI    MODE,255-MD_FMT     YES, TURN OFF FORMATTING
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         B     FILLSCR             GO UNFORMAT THE SCREEN CONTENTS
FMTFLIP  TM    MODE,MD_FMT         IS FORMATTING OFF?
         BNO   FMTOI               YES, GO TURN IT ON
         B     FMTNI               NO, SO TURN IT OFF
FMTNMLES MVC   MSG(MSGFMT0L),MSGFMT0
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         B     BELPRMPT            GO RING THE BELL FOR ERROR MESSAGE
         SPACE
FMTNAMED LA    R1,FMTDDN           POINT TO DDNAME
         L     R15,DDLOCADR        POINT TO SUBROUTINE
         BASR  R14,R15             FIND REVFMTS DD TIOT ENTRY
         LTR   R15,R15             IS IT ALLOCATED?
         BNZ   FMTSOPEN            YES, SO GO AND OPEN IT
FMTBADDS MVC   MSG(MSGFMT1L),MSGFMT1
FMTBELLX LM    R14,R12,12(R13)     RESTORE REGISTERS
         B     BELPRMPT            GO RING THE BELL FOR ERROR MESSAGE
FMTNOMEM MVC   MSG(MSGFMT2L),MSGFMT2
         MVC   MSG+2(8),BLDLNAME   SHOW MEMBER NAME IN MSG
         L     R13,4(,R13)         POINT TO PREVIOUS SAVE AREA
         LA    R1,MSG+9            POINT TO LAST FORMAT NAME CHAR
         LH    R0,MSG              GET THE LENGTH OF THE MESSAGE
FMTMS2LP CLI   0(R1),C' '          TRAILING BLANK?
         BNE   FMTBELLX            NO, GO SHOW MSG AND RING BELL
         MVC   0(MSGFMT2L-10,R1),1(R1) OVERLAY TRAILING BLANK
         BCTR  R1,0                POINT TO BEFORE OVERLAID BYTE
         BCTR  R0,0                DECREMENT LENGTH
         STH   R0,MSG              SAVE SHORTER LENGTH
         B     FMTMS2LP            CONTINUE CHOPPING TRAILING BLANKS
         SPACE
FMTSOPEN ICM   R6,7,17(R15)        LOAD UCB POINTER
         BZ    FMTBADDS            ZERO SO CAN'T BE DASD
         CLI   18(R6),X'20'        DASD DEVICE CLASS?
         BNE   FMTBADDS            NO, SO CAN'T BE PDS
         BAS   R14,FREEHSE         FREE PICTURE DATA
         L     R0,@FMTSIZE         GET DYNAMIC AREA SUBPOOL AND SIZE
         LR    R2,R0               COPY THIS SUBPOOL AND SIZE
         ICM   R1,15,FMTAREA       POINT TO FORMATTING WORK AREA
         BNZ   FMTWKOK             ALREADY EXISTS SO SKIP GETMAIN
         MVI   GETMNTRC,22         TRACK GETMAIN IN CASE OF FAILURE
         GETMAIN R,LV=(0)
FMTWKOK  ST    R13,4(,R1)
         ST    R1,8(R13)
         LR    R13,R1
         ST    R13,FMTAREA         POINT TO THIS AREA FROM @DATA
         USING @FMTAREA,R13
         ST    R2,FMTSIZE          SAVE SUBPOOL AND SIZE OF THIS AREA
         LA    R2,0(,R2)           CLEAR SUBPOOL FROM TOP BYTE
         LA    R0,FMTFELS          POINT TO FORMAT ELEMENT SLOTS
         ST    R0,FMTFELAD         SAVE ADDRESS OF FIRST FOR NEXT
         AR    R1,R2               POINT PAST END OF WORK AREA
         LA    R0,FELSIZE          GET FORMAT ELEMENT SIZE
         SLR   R1,R0               POINT TO LAST ALLOWABLE ELEMENT
         ST    R1,FMTELAST         SAVE THIS ADDRESS
         MVI   FMTFLAGS,0          RESET FLAGS
         XC    FMTORGCT,FMTORGCT   ZERO "ORG" BYTES NOW REQUIRED
         TM    TSTRECFM,X'40'      VARIABLE LENGTH RECORDS?
         BZ    *+8                 NO
         MVI   FMTORGCT+3,4        YES, IGNORE RDW IN DSECT
         XC    FMTBLKFM,FMTBLKFM   FLAG NO READ BUFFER CREATED YET
         MVC   FMTDCB(PDSDCBL),PDSDCB
         LA    R4,FMTDCB
         USING IHADCB,R4           NOW REFERENCING REVFMTS DCB
         MVC   DCBDDNAM,FMTDDN     LOAD REVFMTS DDNAME
         LA    R0,FMTCLOSE
         STCM  R0,7,DCBEODA        SET END-OF-DATA ADDRESS
         LA    R0,FMTSYNAD
         STCM  R0,7,DCBSYNA        SET SYNAD EXIT ADDRESS
         MVI   OPEND,X'80'
         OPEN  ((R4),(INPUT)),MF=(E,OPEND)
         MVC   BLDLNAME,BLANKS
         LH    R1,OPD1+4           GET FIRST OPERAND LENGTH
         L     R14,OPD1            GET ADDRESS OF DATA
         BCTR  R1,0
         EX    R1,MEMMVC
         MVI   FMTNAME,X'FF'       FLAG FIND FAILURE FOR LATER
         NI    MODE,255-MD_FMT     RESET PREVIOUS FORMATTING
         BLDL  (R4),BLDL
         LTR   R15,R15             IS THE MEMBER PRESENT?
         BNZ   FMTCLOSE            NO, NO USEFUL DATA SO CLOSE FILE
         MVC   TTR,BLDLTTRP        TTR OF FIRST BLOCK
         XASAM24
         FIND  (R4),TTR,C          POINT TO THE NEW MEMBER'S DATA
         XASAM31
         LA    R0,7
         AH    R0,DCBBLKSI
         SRA   R0,3                GET BLKSIZE ROUNDED UP TO DOUBLEWORD
         BNP   FMTCLOSE            ZERO BLKSIZE IS UNACCEPTABLE
         SLA   R0,3
         ICM   R0,8,FMTSIZE        LOAD SUBPOOL
         ST    R0,FMTBLKSZ         SAVE READ BUFFER SUBPOOL AND SIZE
         MVI   GETMNTRC,23         TRACK GETMAIN IN CASE OF FAILURE
         GETMAIN R,LV=(0)          ACQUIRE A READ BUFFER
         ST    R1,FMTBUFR          SAVE READ BUFFER ADDRESS
         MVC   FMTDECB(DYNDECBL),DYNDECB
         MVC   FMTNAME,BLDLNAME    FLAG THAT DATA SET LOOKS GOOD
FMTRDLP  L     R2,FMTBUFR          POINT TO THE READ BUFFER
         XASAM24
         READ  FMTDECB,SF,(R4),(R2),'S',MF=E
         CHECK FMTDECB
         XASAM31
         TM    FMTFLAGS,FSYNADSW   I/O ERROR ENCOUNTERED?
         BO    FMTIOERR            YES, TERMINATE FORMAT PROCESSING
         LH    R1,DCBBLKSI
         L     R14,FMTDECB+16
         SH    R1,14(,R14)         SUBTRACT RESIDUAL COUNT
         LA    R0,0(R1,R2)         END OF BLOCK
         ST    R0,FMTBFEND         SAVE END OF BUFFER ADDRESS
         ST    R2,FMTRECAD         SAVE ADDRESS OF NEXT LOGICAL RECORD
FMTGETLP L     R2,FMTRECAD         POINT TO THE NEXT LOGICAL RECORD
         C     R2,FMTBFEND         REACHED END OF BLOCK?
         BNL   FMTRDLP             YES, GO READ ANOTHER BLOCK
         LH    R1,DCBLRECL         NO, GET LOGICAL RECORD LENGTH
         ALR   R1,R2               POINT TO NEXT RECORD
         ST    R1,FMTRECAD         SAVE ADDRESS OF NEXT LOGICAL RECORD
         CLI   0(R2),C'*'          COMMENT?
         BE    FMTGETLP            YES
         CLI   1(R2),C'*'          MACRO COMMENT?
         BE    FMTGETLP            YES
         LR    R6,R2               POINT START OF THIS RECORD
         L     R7,FMTFELAD         POINT TO NEXT FORMAT ELEMENT SLOT
         MVC   FELSYMNM(FELSYMNL,R7),BLANKS      CLEAR SYMBOL NAME
         LA    R1,FELSYMNM(,R7)    POINT TO SYMBOL ENTRY NAME AREA
         LA    R0,FELSYMNL         GET MAXIMUM SYMBOL NAME LENGTH
         CLI   0(R6),C'&&'         SYMBOLIC VARIABLE?
         BNE   FMTSYMLP            NO
         LA    R6,1(,R6)           YES, DON'T USE AMPERSAND
FMTSYMLP CLI   0(R6),C' '          END OF SYMBOL NAME?
         BE    FMTVERB             YES
         MVC   0(1,R1),0(R6)       NO, COPY A NAME CHARACTER
         LA    R1,1(,R1)
         LA    R6,1(,R6)
         BCT   R0,FMTSYMLP
FMTVERB  LA    R0,72(,R2)          POINT TO END OF ALLOWABLE DATA
FMTSYMFL CLI   0(R6),C' '          FOUND A BLANK?
         BE    FMTVERBL            YES
         LA    R6,1(,R6)           NO, POINT PAST NON-BLANK
         CR    R6,R0               UP TO END OF LINE?
         BL    FMTSYMFL            NO, FLUSH REST OF SYMBOL NAME
         B     FMTGETLP            BAD SYNTAX, DISCARD
FMTVERBL LA    R6,1(,R6)           POINT PAST BLANK
         CLI   0(R6),C' '          FOUND ANOTHER BLANK?
         BNE   FMTGTVRB            NO, CHECK STATEMENT VERB
         CR    R6,R0               UP TO END OF LINE?
         BL    FMTVERBL            NO, CONTINUE SEARCH FOR VERB
         B     FMTGETLP            BAD SYNTAX, DISCARD
FMTGTVRB CLC   =C'DC ',0(R6)       DEFINE CONSTANT?
         BE    FMTDCDS             YES
         CLC   =C'DS ',0(R6)       DEFINE STORAGE?
         BE    FMTDCDS             YES
         CLC   =C'ORG ',0(R6)      ORGANIZATION OVERRIDE?
         BE    FMTORG              YES
         CLC   =C'EQU ',0(R6)      EQUATE?
         BE    FMTEQU              YES
         CLC   =C'MEND ',0(R6)     END OF MACRO?
         BE    FMTCLOSE            YES
         CLC   =C'END ',0(R6)      END OF SOURCE?
         BE    FMTCLOSE            YES
         CLC   =C'DSECT ',0(R6)    NEW DATA SECTION?
         BE    FMTSECT             YES
         CLC   =C'CSECT ',0(R6)    NEW CONTROL SECTION?
         BE    FMTSECT             YES
         CLC   =C'RSECT ',0(R6)    NEW READ-ONLY CONTROL SECTION?
         BE    FMTSECT             YES
         B     FMTGETLP            UNKNOWN VERB, DISCARD
FMTEQU   CLI   FELSYMNM(R7),C' '   SYMBOL NAME SUPPLIED?
         BE    FMTGETLP            NO, CAN'T BE REFERENCED SO DISCARD
         LA    R6,4(,R6)           POINT TO EARLIEST POSSIBLE OPERAND
*                                  RESET FEL EXCEPT FOR SYMBOL NAME
         XC    FELSYMNL(FELSIZE-FELSYMNL,R7),FELSYMNL(R7)
FMTEQULP CLI   0(R6),C' '          FOUND AN OPERAND?
         BNE   FMTEQUOP            YES
         LA    R6,1(,R6)           NO, POINT TO NEXT BYTE
         CR    R6,R0               END OF SOURCE RECORD?
         BL    FMTEQULP            NO, CONTINUE SCAN FOR OPERAND
         B     FMTGETLP            LOOKS LIKE BAD SYNTAX SO DISCARD
FMTEQUOP CLC   =C'* ',0(R6)        EQUATE TO CURRENT LOCATION?
         BE    FMFELNOK            YES, ALLOW ORG REFERENCE
         B     FMTGETLP            NO, CAN'T BE PROCESSED SO DISCARD
FMTORG   LA    R6,4(,R6)           POINT TO EARLIEST POSSIBLE OPERAND
FMTORGLP CLI   0(R6),C','          NO OPERANDS?
         BE    FMTNOORG            YES, TURN OFF "ORG MODE"
         CLI   0(R6),C' '          FOUND AN OPERAND?
         BNE   FMTORGON            YES, SET "ORG MODE"
         LA    R6,1(,R6)           NO, POINT TO NEXT BYTE
         CR    R6,R0               END OF SOURCE RECORD?
         BL    FMTORGLP            NO, CONTINUE SCAN FOR OPERAND
FMTNOORG NI    FMTFLAGS,255-FORG   NOW OUT OF "ORG MODE"
         XC    FMTORGCT,FMTORGCT   ZERO "ORG" BYTES NOW REQUIRED
         B     FMTGETLP
FMTORGON OI    FMTFLAGS,FORG       FLAG NOW IN "ORG MODE"
         XC    DOUBLE,DOUBLE       CLEAR WORK AREA
         L     R7,FMTFELAD         POINT TO NEXT FORMAT ELEMENT SLOT
         MVC   FELSYMNM(FELSYMNL,R7),BLANKS      CLEAR SYMBOL NAME
         MVI   FMTORGCT,X'7F'      USE LARGE NUMBER FOR UNKNOWN
         CLI   0(R6),C'+'          LEADING PLUS?
         BE    FMTORGSN            YES, HANDLE IT
         CLI   0(R6),C'-'          LEADING MINUS?
         BE    FMTORGSN            YES, HANDLE IT
FMTORGOP CLI   0(R6),C'0'          NUMBER?
         BL    FMTORGLB            NO, PROCESS LABEL
         BAS   R14,FMTGTNUM        YES, GET ITS NUMERIC VALUE
         CLI   DOUBLE+4,C'-'       IS NUMBER NEGATIVE?
         BNE   FMTOSIGN            NO
         LNR   R1,R1               YES
FMTOSIGN A     R1,DOUBLE           ACCUMULATE NUMBER
         ST    R1,DOUBLE
         B     FMTORGSN            NUMBER NOW PROCESSED
FMTORGLB LA    R1,FELSYMNM(,R7)    POINT TO SYMBOL ENTRY NAME AREA
         CLI   0(R1),C' '          HAS THIS BEEN USED?
         BNE   FMTGETLP            YES, CAN'T CALCULATE RIGHT OFFSET
         LA    R0,FELSYMNL         GET MAXIMUM SYMBOL NAME LENGTH
         CLI   0(R6),C'&&'         SYMBOLIC VARIABLE?
         BNE   FMTOSYML            NO
         LA    R6,1(,R6)           YES, DON'T USE AMPERSAND
FMTOSYML CLI   0(R6),C' '          END OF SYMBOL NAME?
         BE    FMTORGSN            YES, SYMBOL NOW PROCESSED
         MVC   0(1,R1),0(R6)       NO, COPY A NAME CHARACTER
         LA    R1,1(,R1)
         LA    R6,1(,R6)
         BCT   R0,FMTOSYML
FMTORGSN MVC   DOUBLE+4(1),0(R6)   COPY POSSIBLE SIGN
         LA    R6,1(,R6)           POINT PAST POSSIBLE SIGN
         CLI   DOUBLE+4,C'+'       PLUS?
         BE    FMTORGOP            YES, PROCESS NEXT ITEM
         CLI   DOUBLE+4,C'-'       MINUS?
         BE    FMTORGOP            YES, PROCESS NEXT ITEM
         SR    R15,R15             RESET ACCUMULATOR
         LA    R1,FMTFELS          POINT TO FORMAT ELEMENT SLOTS
FMTOSLP1 CR    R1,R7               END OF FORMAT ELEMENTS?
         BNL   FMTGETLP            YES, SPECIFIED SYMBOL NOT FOUND
         CLC   FELSYMNM(FELSYMNL,R1),FELSYMNM(R7) FOUND SYMBOL'S FEL?
         BE    FMTOSLP2            YES
         LA    R1,FELSIZE(,R1)     NO, POINT TO NEXT FEL
         B     FMTOSLP1
FMTOSLP2 AH    R15,FELSYMLN(,R1)   ACCUMULATE SYMBOL LENGTH(S)
         LA    R1,FELSIZE(,R1)     POINT TO NEXT FEL
         CR    R1,R7               END OF FORMAT ELEMENTS?
         BL    FMTOSLP2            NO, KEEP ACCUMULATING
         A     R15,DOUBLE          ADD ANY TYPED NUMBERS TO OFFSET
         ST    R15,FMTORGCT        SET "BYTES TO GO FOR ORG"
         B     FMTGETLP
FMTSECT  LA    R0,FMTFELS          POINT TO FORMAT ELEMENT SLOTS
         C     R0,FMTFELAD         ANY DATA YET?
         BNE   FMTCLOSE            YES, BUT WON'T GET ANY MORE
         B     FMTGETLP            NO, CONTINUE
FMTDCDS  LA    R6,2(,R6)           POINT TO PAST VERB
FMTDCDSL LA    R6,1(,R6)           POINT PAST BLANK
         CLI   0(R6),C' '          FOUND ANOTHER BLANK?
         BNE   FMTGTOP             NO, CHECK STATEMENT OPERAND(S)
         CR    R6,R0               UP TO END OF LINE?
         BL    FMTDCDSL            NO, CONTINUE SEARCH FOR OPERAND
         B     FMTGETLP            BAD SYNTAX, DISCARD
FMTGTOP  LA    R1,1                ASSUME MULTIPLIER OF 1
         CLI   0(R6),C'0'          LEADING MULTIPLIER?
         BL    FMTOP#OK            NO
         BAS   R14,FMTGTNUM        YES, GET ITS NUMERIC VALUE
FMTOP#OK ST    R1,FMTMLHLD         REMEMBER IT
         TR    0(1,R6),FMTYPIDX    DIGEST DATA TYPE
         CLI   0(R6),0             KNOWN DATA TYPE?
         BE    FMTGETLP            NO, DISCARD
         SR    R1,R1               YES
         IC    R1,0(,R6)           GET INDEX CODE
         SLL   R1,2                MULTIPLY BY 4 FOR INDEX
         LA    R1,FMTYPTAB-4(R1)   POINT TO DATA TYPE ENTRY
         MVC   FELSYMFG(4,R7),0(R1) COPY DATA TYPE RELEVANCIES
         LH    R1,FELSYMLN(,R7)    LOAD THE DEFAULT LENGTH
         LA    R6,1(,R6)           POINT PAST TYPE BYTE
         CLI   0(R6),C'D'          DOUBLEWORD LENGTH VERSION?
         BNE   FMTDBLOK            NO
         LA    R1,8                YES, DEFAULT LENGTH IS 8
         LA    R6,1(,R6)           POINT PAST PROCESSED SPEC
FMTDBLOK CLI   0(R6),C' '          BLANK FOUND?
         BE    FMTFELOK            YES, END OF STATEMENT
         CLI   0(R6),C'L'          LENGTH SPECIFIED?
         BNE   FMTMULCK            NO, CHECK FOR MULTIPLE VALUES
         CLI   1(R6),C'0'          NUMERIC LENGTH SPECIFIED?
         BL    FMTFELOK            NO, STATEMENT PROCESSED
         LA    R6,1(,R6)           YES, POINT TO NUMERICS
         BAS   R14,FMTGTNUM        GET ITS NUMERIC VALUE
FMTMULCK CLI   0(R6),C'('          OPEN PARENTHESIS?
         BNE   FMTFELOK            NO, STATEMENT PROCESSED
         LR    R14,R1              YES, COPY THE LENGTH
FMTPARLP LA    R6,1(,R6)           POINT TO NEXT BYTE
         CLI   0(R6),C')'          END OF VALUES?
         BE    FMTFELOK            YES, STATEMENT PROCESSED
         CLI   0(R6),C' '          END OF STATEMENT?
         BNH   FMTFELOK            YES, STATEMENT PROCESSED
         CLI   0(R6),C','          ANOTHER VALUE STARTING?
         BNE   FMTPARLP            NO, KEEP LOOKING
         AR    R1,R14              YES, ADD ANOTHER LENGTH
         B     FMTPARLP            KEEP LOOKING
FMTFELOK M     R0,FMTMLHLD         GET TOTAL SIZE OF THIS FIELD
         STH   R1,FELSYMLN(,R7)    SAVE THE LENGTH OF THIS SYMBOL
         STH   R1,FELDSPLN(,R7)    SET DISPLAY LENGTH
         TM    FMTFLAGS,FORG       IN "ORG MODE"?
         BNO   FMTOCTOK            NO, NO NEED TO ADJUST "ORG" COUNT
         L     R14,FMTORGCT        GET "ORG" REMAINING BYTE COUNT
         SR    R14,R1              SUBTRACT LENGTH OF THIS SYMBOL
         ST    R14,FMTORGCT        UPDATE "ORG" BYTE COUNT
         BP    FMTGETLP            STILL IN "ORG" MODE SO DISCARD ITEM
         B     FMTNOORG            CLEARED "ORG" MODE SO RESET STATUS
FMTOCTOK LTR   R1,R1               ZERO LENGTH SYMBOL?
         BZ    FMFELNOK            YES, PLACEHOLDER FOR ORG REFERENCES
         TM    FELSYMFG(R7),FELHEX+FELBIN+FELBIT
         BZ    FMTYPEOK            CHARACTER SO DISPLAY LENGTH IS SAME
         TM    FELSYMFG(R7),FELBIT BIT DATA?
         BZ    FMTNOTBT            NO
         LA    R14,9
         MR    R0,R14              GET DATA LENGTH TIMES 9
         BCTR  R1,0                MINUS 1
         STH   R1,FELDSPLN(,R7)    SET DISPLAY LENGTH
         B     FMTYPEOK
FMTNOTBT SLL   R1,1                DOUBLE IT
         STH   R1,FELDSPLN(,R7)    SET DISPLAY LENGTH
         TM    FELSYMFG(R7),FELHEX ALWAYS SHOW HEX DIGITS?
         BO    FMTYPEOK            YES, SO DISPLAY LENGTH IS DOUBLE
         CH    R1,HW8              ITEM LENGTH GREATER THAN FOUR?
         BNH   FMTBINOK            NO, DO BINARY CONVERSION
         NI    FELSYMFG(R7),255-FELBIN
         OI    FELSYMFG(R7),FELHEX YES, ALWAYS SHOW AS HEX
         B     FMTYPEOK
FMTBINOK SLL   R1,1                DISPLAY LENGTH IS 4 TIMES DATA SIZE
         STH   R1,FELDSPLN(,R7)    SET DISPLAY LENGTH
         TM    FELSYMLN+1(R7),X'01'    IS ITEM 1 OR 3 BYTES?
         BZ    FMTYPEOK            NO, TREAT 2 OR 4 BYTES AS SIGNED
         OI    FELSYMFG(R7),FELUNS YES, TREAT ITEM AS UNSIGNED BINARY
FMTYPEOK CLI   FELSYMNM(R7),C' '   BLANK SYMBOL NAME?
         BE    FMFELNOK            YES, DISPLAY LENGTH ALREADY DONE
         LA    R1,FELSYMNM+FELSYMNL(,R7)  POINT PAST SYMBOL NAME
         LA    R15,FELSYMNM(,R7)   POINT TO SYMBOL NAME
         TRT   0(8,R15),FTABLANK   FIND A BLANK
         SR    R1,R15              GET SYMBOL NAME LENGTH
         CH    R1,FELDSPLN(,R7)    IS DISPLAY WIDE ENOUGH FOR NAME?
         BNH   FMFELNOK            YES
         STH   R1,FELDSPLN(,R7)    NO, INCREASE WIDTH FOR NAME
FMFELNOK LA    R7,FELSIZE(,R7)     POINT TO NEXT FIELD ELEMENT SLOT
         ST    R7,FMTFELAD         SAVE THE ADDRESS
         C     R7,FMTELAST         GONE PAST LAST ALLOWABLE ADDRESS?
         BNH   FMTGETLP            NO, PROCESS NEXT CARD IMAGE
         B     FMTCLOSE            YES, SIMULATE E-O-F
         SPACE
FMTIOERR LA    R0,L'FSYNADMS       GET I/O ERROR MESSAGE LENGTH
         LA    R1,FSYNADMS         GET I/O ERROR MESSAGE ADDRESS
         TPUT  (1),(0),R           GIVE USER SOME HINT OF I/O ERROR
FMTCLOSE MVI   CLOSED,X'80'
         CLOSE ((R4)),MF=(E,CLOSED)
         LM    R0,R1,FMTBLKFM      LOAD BUFFER FREEMAIN VALUES
         LTR   R0,R0               ANY BUFFER TO FREE?
         BZ    FMTNOBUF            NO
         FREEMAIN R,LV=0,A=(1)     FREE THE READ BUFFER
FMTNOBUF CLI   FMTNAME,X'FF'       DID THE BLDL FIND THE MEMBER?
         BE    FMTNOMEM            NO, SHOW THIS AS THE MESSAGE
         LA    R0,FMTFELS          POINT TO FORMAT ELEMENT SLOTS
         C     R0,FMTFELAD         ANY DATA YET?
         BE    FMTALLDN            NO, DON'T TURN ON FORMATTING
         OI    MODE,MD_FMT         YES, TURN ON FORMATTING
FMTALLDN L     R13,4(,R13)         POINT TO PREVIOUS SAVE AREA
         OI    11(R13),X'01'       INVALIDATE FORWARD POINTER
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         B     FILLSCR             GO UNFORMAT THE SCREEN CONTENTS
         DROP  R4                  IHADCB
         SPACE
FMTGTNUM SR    R0,R0               CLEAR FOR INSERT
         SR    R1,R1               RESET ACCUMULATOR
FMTNUMLP IC    R0,0(,R6)           GET NUMERIC CHARACTER
         SLL   R0,28               SHIFT OUT ZONE
         SRL   R0,28
         MH    R1,HW10             PROMOTE PREVIOUS DIGITS
         AR    R1,R0
         LA    R6,1(,R6)           POINT PAST PROCESSED DIGIT
         CLI   0(R6),C'0'          ANOTHER NUMERIC DIGIT?
         BNL   FMTNUMLP            YES, PROCESS IT
         BR    R14                 NO, RETURN TO CALLER
         SPACE
         DROP  R13                 @FMTAREA
         SPACE
         USING @FMTAREA,R2
FMTSYNAD DS    0H
         LR    R2,R13
         SYNADAF ACSMETH=BSAM
         MVC   FSYNADMS(78),50(R1)
         OI    FMTFLAGS,FSYNADSW   FLAG I/O ERROR ENCOUNTERED
         SYNADRLS
         BR    R14
         DROP  R2                  @FMTAREA
         SPACE
         DROP  R5                  FMTMODE
         SPACE
         SPACE
FMTYPIDX DC    0F'0'               SYMBOL TYPE INDEX TABLE
         DC    12XL16'00'                            X'00' - X'BF'
         DC    X'00010203040506000700000000000000'   X'C0' - X'CF'
         DC    X'00000008000000090A00000000000000'   X'D0' - X'DF'
         DC    X'00000B00000C000D0E0F000000000000'   X'E0' - X'EF'
         DC    XL16'00'                              X'F0' - X'FF'
FMTYPTAB DC    0F'0'               SYMBOL TYPE TABLE
*              FLAGS TYPE LENGTH
         DC    X'80',C'A',H'4'     ADDRESS VALUE
         DC    X'10',C'B',H'1'     BINARY DIGITS
         DC    X'00',C'C',H'1'     CHARACTERS
         DC    X'80',C'D',H'8'     LONG FLOATING-POINT
         DC    X'80',C'E',H'4'     SHORT FLOATING-POINT
         DC    X'40',C'F',H'4'     FIXED-POINT BINARY
         DC    X'40',C'H',H'2'     FIXED-POINT BINARY
         DC    X'80',C'L',H'16'    EXTENDED FLOATING-POINT
         DC    X'A0',C'P',H'1'     PACKED DECIMAL
         DC    X'80',C'Q',H'4'     SYMBOL ADDRESS
         DC    X'80',C'S',H'2'     BASE-DISPLACEMENT ADDRESS
         DC    X'80',C'V',H'4'     EXTERNAL ADDRESS
         DC    X'80',C'X',H'1'     HEXADECIMAL DIGITS
         DC    X'80',C'Y',H'2'     ADDRESS VALUE
         DC    X'20',C'Z',H'1'     ZONED DECIMAL
*              +0 DISPLAY FLAGS
*                 X'80' - ALWAYS SHOW IN HEX
*                 X'40' - INTERPRET BINARY
*                 X'20' - INTERPRET DECIMAL
*                 X'10' - INTERPRET BITS
*                 X'08' - INTERPRET UNSIGNED BINARY
*              +1 ORIGINAL DATA TYPE
*              +2 DEFAULT LENGTH
         SPACE
@FMTSIZE DC    AL1(1),AL3($FMTLEN)
FMTDDN   DC    CL8'REVFMTS '
MSGFMT0  MESG  'NO FORMAT NAME WAS SPECIFIED'
MSGFMT1  MESG  'REVFMTS FILE IS UNUSABLE'
MSGFMT2  MESG  '???????? NOT FOUND IN REVFMTS FILE'
         DC    0D'0'
         LTORG
         SPACE
DS1FELS  DC    0D'0'               READY-TO-USE FEL TABLE FOR VTOC
*               SYMBOL-NAME  FLAGS TYPE LENGTH  COLUMNS OFFSET
         DC    CL8'DS1DSNAM',X'01',C'C',AL2(44),AL2(44),AL2(0)
         DC    CL8'DS1FMTID',X'80',C'C',AL2(01),AL2(08),AL2(0)
         DC    CL8'DS1DSSN ',X'01',C'C',AL2(06),AL2(07),AL2(0)
         DC    CL8'DS1VOLSQ',X'48',C'X',AL2(02),AL2(08),AL2(0)
         DC    CL8'DS1CREDT',X'81',C'X',AL2(03),AL2(08),AL2(0)
         DC    CL8'DS1EXPDT',X'81',C'X',AL2(03),AL2(08),AL2(0)
         DC    CL8'DS1NOEPV',X'48',C'X',AL2(01),AL2(08),AL2(0)
         DC    CL8'DS1NOBDB',X'48',C'X',AL2(01),AL2(08),AL2(0)
         DC    CL8'DS1FLAG1',X'81',C'X',AL2(01),AL2(08),AL2(0)
         DC    CL8'DS1SYSCD',X'01',C'C',AL2(13),AL2(13),AL2(0)
         DC    CL8'DS1REFD ',X'81',C'X',AL2(03),AL2(08),AL2(0)
         DC    CL8'DS1SMSFG',X'81',C'X',AL2(01),AL2(08),AL2(0)
         DC    CL8'DS1SCXTF',X'80',C'X',AL2(01),AL2(08),AL2(0)
         DC    CL8'DS1SCXTV',X'48',C'X',AL2(02),AL2(08),AL2(0)
         DC    CL8'DS1DSORG',X'81',C'X',AL2(02),AL2(08),AL2(0)
         DC    CL8'DS1RECFM',X'81',C'X',AL2(01),AL2(08),AL2(0)
         DC    CL8'DS1OPTCD',X'80',C'X',AL2(01),AL2(08),AL2(0)
         DC    CL8'DS1BLKL ',X'48',C'X',AL2(02),AL2(08),AL2(0)
         DC    CL8'DS1LRECL',X'48',C'X',AL2(02),AL2(08),AL2(0)
         DC    CL8'DS1KEYL ',X'48',C'X',AL2(01),AL2(07),AL2(0)
         DC    CL8'DS1RKP  ',X'48',C'X',AL2(02),AL2(06),AL2(0)
         DC    CL8'DS1DSIND',X'81',C'X',AL2(01),AL2(08),AL2(0)
         DC    CL8'DS1SCAL1',X'81',C'X',AL2(01),AL2(08),AL2(0)
         DC    CL8'DS1SCAL3',X'80',C'X',AL2(03),AL2(08),AL2(0)
         DC    CL8'DS1LSTAR',X'80',C'X',AL2(03),AL2(08),AL2(0)
         DC    CL8'DS1TRBAL',X'48',C'X',AL2(02),AL2(08),AL2(0)
*  NEXT LINE ORIGINALLY:
*        DC    CL8'        ',X'80',C'X',AL2(02),AL2(04),AL2(0)
*  AND NOW SHOULD HAVE TWO LINES:
*        DC    CL8'        ',X'80',C'X',AL2(01),AL2(02),AL2(0)
*        DC    CL8'DS1TTTHI',X'80',C'X',AL2(01),AL2(08),AL2(0)
*  BUT TO ECONOMIZE SLIGHTLY ON SCREEN COLUMNS, USE:
         DC    CL8'DS1TTTHI',X'80',C'X',AL2(02),AL2(08),AL2(0)
         DC    CL8'DS1EXT1 ',X'80',C'X',AL2(10),AL2(20),AL2(0)
         DC    CL8'DS1EXT2 ',X'80',C'X',AL2(10),AL2(20),AL2(0)
         DC    CL8'DS1EXT3 ',X'80',C'X',AL2(10),AL2(20),AL2(0)
         DC    CL8'DS1PTRDS',X'80',C'X',AL2(05),AL2(10),AL2(0)
DS1FELEN EQU   *-DS1FELS
         SPACE
FTABLANK DC    64X'00'
         DC    X'40'               BLANK
         DC    42X'00'
         DC    X'00'               COMMA
         DC    148X'00'
         SPACE
         DC    0D'0'               END OF CSECT
         SPACE
         DROP  R10,R11,R12,R3      REVIEW2
         TITLE '  R E V I E W   -   C P   O P E R A N D S  '
*        PRINT NOGEN
REVPCL   IKJPARM
DSN      IKJPOSIT DSNAME,PROMPT='DATA SET NAME'
UNITKW   IKJKEYWD
         IKJNAME 'UNIT',SUBFLD=UNITSF
VOLKW    IKJKEYWD
         IKJNAME 'VOLUME',SUBFLD=VOLSF
         IKJNAME 'SUBSYS',SUBFLD=SUBSYSSF
TOPKW    IKJKEYWD
         IKJNAME 'TOP',SUBFLD=TOPSF,ALIAS=('TTR')
FILEKW   IKJKEYWD
         IKJNAME 'FILE'
         IKJNAME 'QUICK'
         AIF   (NOT &ENV390).FKDONE
         IKJNAME 'GEN'
.FKDONE  ANOP
DATAKW   IKJKEYWD
         IKJNAME 'DATA'
XISPKW   IKJKEYWD
         IKJNAME 'XISPMODE'
TOPSF    IKJSUBF
TOPTTR   IKJIDENT 'TOP TTR',                                           +
               FIRST=ALPHANUM,OTHER=ALPHANUM,MAXLNTH=6,                +
               PROMPT='TOP RELATIVE ADDRESS (TTR)',                    +
               HELP=('HEXADECIMAL TTR OR TAPE BLOCK ID TO BE CONSIDERED+
                AS TOP-OF-DATA'),                                      +
               VALIDCK=VALIDTOP
UNITSF   IKJSUBF
UNIT     IKJIDENT 'UNIT NAME',                                         +
               FIRST=ALPHANUM,OTHER=ALPHANUM,MAXLNTH=8,                +
               PROMPT='UNIT NAME'
VOLSF    IKJSUBF
VOL      IKJIDENT 'VOLUME SERIAL',                                     +
               FIRST=ALPHANUM,OTHER=ALPHANUM,MAXLNTH=6,                +
               PROMPT='VOLUME SERIAL NUMBER'
SUBSYSSF IKJSUBF
SUBSYS   IKJIDENT 'SUBSYSTEM',                                         +
               FIRST=ALPHA,OTHER=ALPHANUM,MAXLNTH=4,                   +
               PROMPT='SUBSYSTEM NAME'
         IKJENDP
REVPCL   CSECT
REVPCL   AMODE 31
         SPACE
**********************************************************************
*                                                          *         *
*         VALIDATE 'TOP' OPERAND                           *  GP@FT  *
*                                                          *  03/93  *
**********************************************************************
         SPACE
         USING VALIDTOP,R12
VALIDTOP STM   R14,R12,12(R13)     SAVE REGISTERS
         LR    R12,R15             LOAD BASE REGISTER
         L     R6,0(,R1)           POINT TO PDE (FIRST PARAMETER)
         LH    R3,4(,R6)           GET HEX DIGIT COUNT
         BCTR  R3,0                MINUS 1 FOR EX
         L     R14,0(,R6)          GET ADDRESS OF USER-SUPPLIED OPERAND
         L     R5,=A(HEXTEST)      POINT TO TRANSLATE AND TEST TABLE
         SR    R15,R15             PREPARE FOR VALID HEXADECIMAL
         EX    R3,VALIDTRT         VALID HEXADECIMAL OPERAND?
         BZ    VALIDXIT            YES, SO RETURN WITH RC=0
         LA    R15,4               NO, SO RETURN WITH RC=4
VALIDXIT L     R14,12(,R13)        RESTORE RETURN ADDRESS
         LM    R0,R12,20(R13)      RESTORE OTHER REGISTERS
         BR    R14                 RETURN TO CALLER
         DROP  R12                 VALIDTOP
VALIDTRT TRT   0(0,R14),0(R5)      <<< EXECUTED >>>
         DC    0D'0'
         LTORG
         DC    0D'0'               END OF CSECT
         SPACE
         SPACE
HELPCL   IKJPARM
MEMBERPO IKJIDENT 'MEMBER OR SUBCOMMAND NAME',                         +
               FIRST=ALPHANUM,OTHER=ALPHANUM,MAXLNTH=8
FKW      IKJKEYWD
         IKJNAME 'FUNCTION'
SKW      IKJKEYWD
         IKJNAME 'SYNTAX'
OKW      IKJKEYWD
         IKJNAME 'OPERANDS',SUBFLD=OPLISTS
AKW      IKJKEYWD
         IKJNAME 'ALL'
MKW      IKJKEYWD
         IKJNAME 'MSGID',SUBFLD=MSGLISTS
PKW      IKJKEYWD
         IKJNAME 'POSITIONAL',SUBFLD=POSITF
POSITF   IKJSUBF
POSITFF  IKJIDENT 'POSITIONAL NUMBER',                                 +
               FIRST=NUMERIC,OTHER=NUMERIC,MAXLNTH=8,INTEG,DEFAULT='1'
OPLISTS  IKJSUBF
OPLIST   IKJIDENT 'HELP OPERAND NAME',LIST,                            +
               FIRST=ANY,OTHER=ANY,MAXLNTH=20
MSGLISTS IKJSUBF
MSGLIST  IKJIDENT 'HELP MSG IDENTIFIER',LIST,                          +
               FIRST=ALPHANUM,OTHER=ALPHANUM,MAXLNTH=20
         IKJENDP
HELPCL   CSECT ,                   RESUME PCL CSECT
HELPCL   AMODE 31
         DC    0D'0'               END OF CSECT
         SPACE
         SPACE
OUTPCL   IKJPARM DSECT=OUTPARMD
JOB      IKJPOSIT JOBNAME,PROMPT='JOB NAME'
         IKJENDP
OUTPCL   CSECT ,                   RESUME PCL CSECT
OUTPCL   AMODE 31
         DC    0D'0'               END OF CSECT
         PRINT GEN
         TITLE '  R E V D D L O C  '
**********************************************************************
*                                                          *         *
*         LOCATE A SPECIFIC TIOT ENTRY                     *  GP@P6  *
*                                                          * OCT2009 *
**********************************************************************
         SPACE
**********************************************************************
*                                                                    *
*        THIS ROUTINE FINDS THE DATA DEFINITION TIOT ENTRY FOR       *
*        A SUPPLIED DDNAME.  THE ADDRESS OF THE TIOT ENTRY IS        *
*        RETURNED, OR ZERO IS RETURNED IF THE SUPPLIED DDNAME        *
*        IS NOT ALLOCATED.                                           *
*                                                                    *
**********************************************************************
*                                                                    *
* REGISTERS ON ENTRY: R1 -> 8-BYTE DDNAME                            *
*                     R13-> REGISTER SAVE AREA                       *
*                     R14-> RETURN POINT                             *
*                     R15-> REVDDLOC                                 *
*                                                                    *
* UPON EXIT:          ALL REGISTER VALUES EXCEPT R15 ARE RESTORED    *
*                                                                    *
* RETURN CODES:       R15 = 0  IF DD NOT ALLOCATED                   *
*                     R15 = TIOT ENTRY ADDRESS OTHERWISE             *
*                                                                    *
**********************************************************************
         SPACE
REVDDLOC RSECT
REVDDLOC AMODE 31
         USING REVDDLOC,R15
         B     @DDLOC
         DC    AL1(8),CL9'REVDDLOC'
@DDLOC   STM   R14,R12,12(R13)     SAVE REGISTERS
         L     R4,PSATOLD          GET POINTER TO CURRENT TCB
         L     R4,TCBTIO-TCB(,R4)  POINT TO TIOT
         LA    R4,24(,R4)          POINT TO TIOELNGH
         SR    R0,R0               CLEAR FOR INSERT
@DDLOCLP CLC   4(8,R4),0(R1)       FOUND THE MATCHING TIOT ENTRY?
         BE    @DDFOUND            YES, END OF SEARCH
         IC    R0,0(,R4)           NO, GET TIOT ENTRY LENGTH
         AR    R4,R0               POINT TO NEXT TIOT ENTRY
         CLI   0(R4),0             ZERO LENGTH ENTRY?
         BNE   @DDLOCLP            NO, CHECK OUT THIS ENTRY
         SR    R4,R4               YES, END OF TIOT REACHED
         DROP  R15                 REVDDLOC
@DDFOUND LR    R15,R4              SET RESULT
*        L     R14,12(,R13)        RETURN ADDRESS NOT ALTERED
         LM    R0,R12,20(R13)      RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER
         DC    0D'0'               END OF CSECT
         TITLE '  R E V N A M E  '
**********************************************************************
*                                                          *         *
*         AUTOMATIC SCREEN NAME GENERATION                 *  R42.3  *
*                                                          * MAR2009 *
**********************************************************************
         SPACE
**********************************************************************
*                                                                    *
*        THIS ROUTINE ATTEMPTS TO NAME THE LOGICAL SESSION           *
*        SUCH THAT USERS CAN USE THE NAME AS THE OPERAND OF          *
*        A 'SWAP' COMMAND TO SWAP TO THAT LOGICAL SESSION.           *
*                                                                    *
*        THE SESSION NAMES ARE DISPLAYED BY THE 'SWAP LIST'          *
*        COMMAND.                                                    *
*                                                                    *
**********************************************************************
         SPACE
**********************************************************************
*                                                                    *
* REGISTERS ON ENTRY: R9 -> @DATA                                    *
*                     R13-> REGISTER SAVE AREA                       *
*                     R14-> RETURN POINT                             *
*                     R15-> REVNAME                                  *
*                                                                    *
* UPON EXIT:          ALL GENERAL PURPOSE REGISTERS ARE RESTORED     *
*                                                                    *
* RETURN CODES:       N/A                                            *
*                                                                    *
**********************************************************************
         SPACE
REVNAME  RSECT
REVNAME  AMODE 31
         USING REVNAME,R15
         B     @NAMESCR
         DROP  R15                 REVNAME
         DC    AL1(7),CL7'REVNAME'
@NAMESCR STM   R14,R12,12(R13)     SAVE REGISTERS
         LR    R4,R15              SET LOCAL BASE REGISTER
         USING REVNAME,R4
         SPACE
         USING @PDSAREA,R13
         CLC   =C'REVPDS',@PDSMRKR SHOWING PDS DIRECTORY?
         BE    NAMEXDSN            YES, TRY DSNAME QUAL
         DROP  R13                 @PDSAREA
         SPACE
         MVC   DOUBLE,=CL8'ACTIVE' PREPARE FOR VIRTUAL STORAGE BROWSE
         TM    STATUS9,$9BRVS      BROWSING VIRTUAL STORAGE?
         BO    NAMETEST            YES
         MVC   DOUBLE,=CL8'OUT'    PREPARE FOR REVOUT
         TM    STATUS11,$11OT      IS IT REALLY?
         BO    NAMETEST            YES
         MVC   DOUBLE(3),=C'CMD'   PREPARE FOR REVTSO
         TM    STATUS13,$13TSO     IS IT REALLY?
         BO    NAMETEST            YES
         MVC   DOUBLE(4),=C'HELP'  PREPARE FOR FSHELP
         TM    STATUS6,HELSW       IS IT REALLY?
         BO    NAMETEST            YES
         TM    STATUS11,$11ED+$11FS2
         BNZ   NAMEXDSN            TRY DSNAME QUAL FOR BROWSE/VIEW/EDIT
         MVC   DOUBLE(6),=C'DSLIST' PREPARE FOR REVLEV
         TM    STATUS11,$11LV      INVOKED AS DSLIST?
         BO    NAMETEST            YES
         MVC   DOUBLE,=CL8'SCRN'   PREPARE FOR RFE
         SPACE
         USING @MENUWK,R13
         CLC   =C'REVMEN',@MENUMK  IN RFE MENU DISPLAY?
         BNE   NAMETEST            NO
         MVC   DOUBLE(4),=C'MENU'  PREPARE FOR MAIN MENU
         CLI   MENOPTN,C' '        IS IT REALLY?
         BE    NAMETEST            YES
         L     R1,MENTIT@
         MVC   DOUBLE(4),3(R1)     PREPARE FOR OPTION 1 OR 2
         CLI   MENOPTN,C'1'        IS IT REALLY?
         BE    NAMETEST            YES
         CLI   MENOPTN,C'2'        IS IT REALLY?
         BE    NAMETEST            YES
         MVC   DOUBLE(4),=C'UTIL'  PREPARE FOR OPTION 3
         MVC   DOUBLE+4(1),MENOPTN+2
         CLI   MENOPTN,C'3'        IS IT REALLY?
         BE    NAMETEST            YES
         MVC   DOUBLE(5),=C'OPTX ' PREPARE FOR OTHER OPTION
         MVC   DOUBLE+3(1),MENOPTN
         B     NAMETEST            YES
         DROP  R13                 @MENUWK
         SPACE
NAMEXDSN CLI   DSORGTYP,X'DD'      PROCESSING VTOC? ("DISK DIRECTORY"?)
         BE    NAMEVTOC            YES, VOLSER BETTER THAN 'DSCB'
         LA    R14,CALLPARM        POINT TO QUALIFIER BUCKETS
         LR    R15,R14
         MVI   0(R14),C' '
         MVC   1(95,R14),0(R14)    BLANK OUT 12 DOUBLEWORDS
         LA    R0,96(,R14)         POINT PAST BUCKETS
         LA    R1,$DSNAME+2        POINT TO DSNAME START
         LA    R2,44(,R1)          POINT PAST DSNAME
NAMESLP1 CLI   0(R1),C' '          END OF DSNAME?
         BE    NAMEDON1            YES
         CLI   0(R1),C'.'          END OF DSNAME QUALIFIER?
         BE    NAMEQUAL            YES
         MVC   0(1,R15),0(R1)      COPY DSNAME CHARACTER
         LA    R15,1(,R15)         INCREMENT TARGET
         LA    R1,1(,R1)           INCREMENT POINTER
         CR    R1,R2               REACHED DSNAME LIMIT?
         BL    NAMESLP1            NO
         B     NAMEDON1            YES
NAMEQUAL LA    R1,1(,R1)           POINT PAST PERIOD
         LA    R15,8(,R14)         POINT TO NEXT QUALIFIER BUCKET
         CR    R15,R0              FILLED LAST BUCKET?
         BNL   NAMEDON1            YES, STOP SCANNING DSNAME
         LR    R14,R15             NO, POINT TO CURRENT BUCKET
         B     NAMESLP1            CONTINUE EXTRACTING QUALIFIERS
         SPACE
NAMEDON1 LA    R0,CALLPARM+8       POINT TO SECOND BUCKET
         CR    R14,R0              FILLED MORE THAN TWO BUCKETS?
         BNH   NAMEDSN             NO, USE LAST FILLED BUCKET
         LA    R0,8                YES
         SR    R14,R0              USE SECOND LAST BUCKET
NAMEDSN  MVC   DOUBLE,0(R14)       COPY DATA SET NAME QUALIFIER
         XC    CALLPARM(96),CALLPARM
         B     NAMETEST
         SPACE
NAMEVTOC MVC   DOUBLE(6),$VOLSER   COPY VOLUME SERIAL
         SPACE
NAMETEST LA    R3,DOUBLE+8
         CLI   DOUBLE+7,C' '       ANY TRAILING BLANKS?
         BH    NAMECHK2            NO, SKIP SCAN
         LA    R3,DOUBLE
NAMESLP2 CLI   0(R3),C' '          FOUND END OF TEXT?
         BNH   NAMECHK2            YES
         LA    R3,1(,R3)           NO, INCREMENT POINTER
         B     NAMESLP2
         SPACE
NAMECHK2 L     R1,RECURS@          POINT TO RECURSION VECTOR
         LA    R0,RCRSLIM          GET VECTOR ELEMENT COUNT
         SR    R2,R2               RESET A COUNTER
NAMESLP3 LA    R2,1(,R2)           INCREMENT SCREEN NUMBER
         CLC   DOUBLE,8(R1)        HAS THIS NAME BEEN USED?
         BE    NAMERTRY            YES
         LA    R1,RCRSIZE(,R1)     NOT HERE, POINT TO NEXT ELEMENT
         BCT   R0,NAMESLP3         KEEP CHECKING ELEMENTS
         L     R1,RECURS#          GET CURRENT SCREEN NUMBER
         BCTR  R1,0                MAKE RELATIVE TO ZERO
         LA    R15,RCRSIZE         GET ELEMENT SIZE
         MR    R0,R15              GET ELEMENT INDEX
         AL    R1,RECURS@          POINT TO CURRENT SCREEN'S ELEMENT
         MVC   8(8,R1),DOUBLE      LOAD AUTOMATIC SCREEN NAME - SUCCESS
         SPACE
NAMENONE LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER
         SPACE
NAMERTRY C     R2,RECURS#          SAME NAME AS BEFORE?
         BE    NAMENONE            YES, DO NOT CHANGE IT
         LA    R0,DOUBLE+8
         CR    R3,R0               RETRY POSSIBLE?
         BNL   NAMENONE            NO
         CLI   0(R3),C'8'          REACHED RETRY LIMIT?
         BH    NAMENONE            YES, GIVE UP
         IC    R1,0(,R3)           SAVE RETRY SUFFIX
         CLI   0(R3),C' '          FIRST RETRY?
         MVI   0(R3),C'2'          PREPARE FOR FIRST RETRY
         BNH   NAMECHK2            YES, GO RETRY FOR FIRST TIME
         LA    R1,1(,R1)           NO, INCREMENT RETRY COUNT
         STC   R1,0(,R3)           SET AS NAME SUFFIX
         B     NAMECHK2            GO RETRY AGAIN
         SPACE
         DROP  R4                  REVNAME
         SPACE
         DC    0D'0'
         LTORG
         DC    0D'0'               END OF CSECT
         TITLE '  R E V K Y P R S  '
**********************************************************************
*                                                          *         *
*         PARSE SUBCOMMAND FOR KEYWORD OPERANDS            *  R46.6  *
*                                                          * JUN2016 *
**********************************************************************
         SPACE
**********************************************************************
*                                                                    *
*        THIS ROUTINE PROVIDES A TABLE-DRIVEN MECHANISM FOR          *
*        DETECTING SPECIFIED SUBCOMMAND KEYWORD OPERANDS.            *
*        THERE IS NO REQUIREMENT THAT SUBCOMMAND ROUTINES            *
*        CALL THIS ROUTINE.  THERE IS NO REQUIREMENT THAT            *
*        KEYWORD OPERANDS DETECTED HERE ARE PROCESSED AS             *
*        KEYWORD SPECIFICATIONS (FOR EXAMPLE:  FIND ALL).            *
*                                                                    *
*        OPERANDS STARTING FROM OPERAND 1 ARE SCANNED.               *
*        ONLY OPERAND 1 IS SCANNED FOR RFIND AND RCHANGE.            *
*        NUMERIC AND QUOTED OPERANDS ARE IGNORED.                    *
*                                                                    *
*        THE CALLING ROUTINE SUPPLIES THE KEYWORD TABLE              *
*        RELEVANT FOR THAT PARTICULAR SUBCOMMAND.  IF NO             *
*        TABLE IS SUPPLIED THEN THE DEFAULT 'ON'/'OFF'/'?'           *
*        TABLE WILL BE USED.                                         *
*                                                                    *
*        IF MORE THAN ONE THIRD OF SUBCOMMANDS COME TO USE           *
*        THIS ROUTINE THEN IT WOULD SAVE SPACE TO EXPAND             *
*        THE SUBCOMMAND LOOK-UP TABLE AND HAVE REVCOMM               *
*        COMMAND PARSING AUTOMATICALLY CALL THIS ROUTINE.            *
*                                                                    *
*        THE SUBCOMMAND KEYWORD TABLE ENTRY STRUCTURE IS:            *
*           1-BYTE INTERNAL CODE REPRESENTING KEYWORD,               *
*           1-BYTE KEYWORD LENGTH CODE RESTRICTIONS,                 *
*           8-BYTE AREA CONTAINING LEFT-JUSTIFIED KEYWORD.           *
*                                                                    *
*        IF THE LENGTH CODE VALUE IS > 7, THEN THE MAXIMUM           *
*        LENGTH CODE IS THE VALUE ANDED (SIC) WITH 7 AND THE         *
*        MINIMUM LENGTH CODE IS THE VALUE DIVIDED BY 16.             *
*        THAT IS: B'0.......' - SHOULD ALWAYS BE ZERO                *
*                 B'.111....' - MINIMUM LENGTH CODE (RANGE IF NOT 0) *
*                 B'....1...' - FLAG RANGE IF MIN LEN CODE = 0       *
*                 B'.....111' - EXACT OR MAXIMUM LENGTH CODE         *
*                 B'00000...' - NEED EXACT LEN CODE (NOT A RANGE)    *
*                                                                    *
*        THE TABLE IS TERMINATED BY A BYTE OF HIGH VALUES.           *
*                                                                    *
*        IDENTIFIED KEYWORDS HAVE THEIR INTERNAL CODE LOADED         *
*        INTO THE LAST BYTE OF THE 8-BYTE OPERAND DESCRIPTOR.        *
*                                                                    *
*        INTERNAL CODE CLASHES WITH VALID STRING TYPES (SUCH         *
*        AS 'C', 'P', 'T' AND 'X') SHOULD BE AVOIDED BECAUSE         *
*        THE SAME BYTE IS USED BY REVCOMM COMMAND PARSING TO         *
*        STORE THE STRING TYPE.                                      *
*                                                                    *
**********************************************************************
*                                                                    *
* REGISTERS ON ENTRY: R1 -> KEYWORD TABLE OR = 0 FOR DEFAULT TABLE   *
*                     R9 -> @DATA                                    *
*                     R13-> REGISTER SAVE AREA                       *
*                     R14-> RETURN POINT                             *
*                     R15-> REVKYPRS                                 *
*                                                                    *
* UPON EXIT:          ALL GENERAL PURPOSE REGISTERS ARE RESTORED     *
*                                                                    *
* RETURN CODES:       N/A                                            *
*                                                                    *
**********************************************************************
         SPACE
REVKYPRS RSECT
REVKYPRS AMODE 31
         USING REVKYPRS,R15
         B     @KEYPARS
         DC    AL1(8),CL9'REVKYPRS'
@KEYPARS STM   R14,R12,12(R13)     SAVE REGISTERS
         LA    R7,7                SET UP AND MASK
         SR    R8,R8               CLEAR FOR INSERT
         LTR   R1,R1               TABLE SUPPLIED?
         BNZ   KEYPARSE            YES, USE IT
         LA    R1,KEYTABOO         NO, USE DEFAULT FOR 'ON'/'OFF'
         TM    STATUS16,$16RFC     ANY FIND/CHANGE ACTION HAPPENING?
         BZ    KEYPARSE            NO, 'ON'/'OFF' IT IS
         LA    R1,KEYTABFC         YES, USE RELEVANT KEYWORD TABLE
         MVI   OPD1+7,0            RESET OPERAND 1 KEYWORD TAG
KEYPARSE LR    R0,R1               SAVE KEYWORD TABLE ADDRESS
         LA    R2,OPD1             POINT TO FIRST OPERAND DESCRIPTOR
         LA    R6,(OPDLL/8)-1      GET MAXIMUM OPERAND COUNT
KEYOPRLP TM    6(R2),PRESENT       OPERAND PRESENT?
         BZ    KEYPARSX            NO, ALL OPERANDS DONE SO RETURN
         TM    6(R2),QUOTED+NUMERIC
         BNZ   KEYOPRNX            CAN'T BE KEYWORD SO SKIP OPERAND
         CLI   7(R2),0             DATA TYPE BYTE AVAILABLE FOR USE?
         BNE   KEYOPRNX            NO, SKIP TO NEXT OPERAND
         LH    R3,4(,R2)           GET THE OPERAND'S LENGTH
         LTR   R3,R3               SENSIBLE LENGTH?
         BNP   KEYOPRNX            NO, SKIP TO NEXT OPERAND
         CH    R3,KEYTAB8          LONGER THAN KEYWORD LENGTH LIMIT?
         BH    KEYOPRNX            YES, SKIP TO NEXT OPERAND
         BCTR  R3,0                DECREMENT FOR EXECUTE
         L     R5,0(,R2)           POINT TO THE OPERAND'S VALUE
         LR    R1,R0               POINT TO SUPPLIED KEYWORD TABLE
KEYTABLP CLM   R3,1,1(R1)          DOES THE LENGTH CODE MATCH?
         BE    KEYTABCK            YES, GO CHECK THE VALUE
         CLI   1(R1),8             IS THE VALUE OVER 8?
         BL    KEYTABNX            NO, SKIP TO NEXT TABLE ENTRY
         IC    R8,1(,R1)           GET THE VALUE
         SRL   R8,4                GET THE MINIMUM LENGTH CODE
         CR    R3,R8               IS OPERAND LONG ENOUGH TO CHECK?
         BL    KEYTABNX            NO
         IC    R8,1(,R1)           YES, GET THE VALUE AGAIN
         NR    R8,R7               GET THE MAXIMUM LENGTH CODE
         CR    R3,R8               IS OPERAND TOO LONG TO CHECK?
         BH    KEYTABNX            YES, SKIP TO NEXT TABLE ENTRY
KEYTABCK EX    R3,KEYTBCLC         DOES THE OPERAND VALUE MATCH?
         BE    KEYTABEQ            YES, GO PROCESS THE MATCH
KEYTABNX LA    R1,10(,R1)          NO, POINT TO NEXT KEYWORD ENTRY
         CLI   0(R1),X'FF'         END OF TABLE?
         BNE   KEYTABLP            NO, GO CHECK NEXT KEYWORD ENTRY
         B     KEYOPRNX            YES, OPERAND NOT A KNOWN KEYWORD
KEYTABEQ MVC   7(1,R2),0(R1)       SET CODE FOR SUBCOMMAND'S KEYWORD
KEYOPRNX TM    STATUS16,$16RFC     ANY FIND/CHANGE ACTION HAPPENING?
         BNZ   KEYPARSX            YES, ONLY PROCESS FIRST OPERAND
         LA    R2,8(,R2)           POINT TO NEXT OPERAND DESCRIPTOR
         BCT   R6,KEYOPRLP         PROCESS NEXT OPERAMD
KEYPARSX LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 ALL OPERANDS DONE SO RETURN
         SPACE
KEYTBCLC CLC   2(0,R1),0(R5)       <<< EXECUTED >>>
         SPACE
KEYTAB8  DC    H'8'
         SPACE
KEYTABOO EQU   *                   KEYTAB FOR ON/OFF
         DC    AL1(1,1),CL8'ON      '
         DC    AL1(2,2),CL8'OFF     '
         DC    AL1(3,0),CL8'?       '
         DC    AL1(255,0)
         SPACE
KEYTABFC EQU   *                   KEYTAB FOR FIND/CHANGE
         DC    AL1(1,0),CL8'F       '
         DC    AL1(1,3),CL8'FIND    '
         DC    AL1(2,0),CL8'C       '
         DC    AL1(2,2),CL8'CHA     '
         DC    AL1(2,2),CL8'CHG     '
         DC    AL1(2,5),CL8'CHANGE  '
         DC    AL1(255,0)
         SPACE
         DC    0D'0'               END OF CSECT
         TITLE '  R E V D A S D  '
**********************************************************************
*                                                          *         *
*         PERFORM DASD DATA SET INITIALIZATION             *  GP@P6  *
*                                                          * APR2014 *
**********************************************************************
         SPACE
*
*        REVDASD PERFORMS THE INITIALIZATION PROCESSING FOR
*        DASD DATA SETS - MOVED FROM REVIEW PHASE 1 TO BECOME
*        GLOBALLY CALLABLE FROM ANY REVIEW OR RFE ROUTINE.
*
*        THIS ROUTINE IS TO BE CALLED AFTER THE DASD DATA SET HAS
*        BEEN ALLOCATED AND THE USUAL "$" VARIABLES PERTAINING
*        TO THE SUBJECT DATA SET HAVE BEEN LOADED.
*
*        REVDASD PROCESSING CONSISTS OF:
*
*        - FOR ALL DASD DATA SETS:
*          1. OBTAIN THE VTOC ENTRY.
*          2. IF THE OBTAIN FAILS PERFORM A LOCATE TO GET THE
*             REAL DATA SET NAME OF THE DATA SET ALIAS AND
*             RETRY THE OBTAIN.
*          3. IF THE OBTAIN AFTER THE LOCATE FAILS, AND THE FILE
*             IS A MULTI-UNIT FILE, ALLOCATE A NEW FILE TO THE
*             SECOND UNIT AND RETRY THE OBTAIN (IN CASE IT IS A
*             VSAM ALTERNATE INDEX ON A DIFFERENT VOLUME).
*
*        - FOR VSAM DATA SETS:
*          1. DETERMINE WHETHER BSAM OR VSAM IS TO BE USED
*             TO READ THE FILE.
*          2. FOR ICF VSAM, ACCESS THE VVDS TO ACQUIRE RECORD
*             AND KEY DETAILS.
*          3. FOR ICF VSAM, SET UP FOR SHOWING DB2 TABLE ROWS AS
*             RECORDS, BASED ON DATA SET NAME PATTERN MATCHING.
*             DB2 ROW STRUCTURE CONTENT IS VERIFIED LATER BY PHASE 2.
*
*        - FOR NON-VSAM DASD DATA SETS:
*          1. ACQUIRE HARDWARE KEY DETAILS FROM THE VTOC ENTRY.
*          2. CONDITIONALLY PERFORM SAF CHECK TO TEST SECURITY
*             ACCESS BEFORE AN OPEN IS ATTEMPTED.
*               ACCESS LEVEL TESTED IS:
*                 - "ALTER" IF FLAG '$14ALT' IS SET.
*                 - "UPDATE" IF FLAG '$13COMP' IS SET.
*                 - "READ" OTHERWISE.
*          3. DETERMINE IF THE DATA SET IS REALLY A CVOL (SYSCTLG).
*          4. DETERMINE IF THE PDS DIRECTORY ITSELF IS TO BE BROWSED.
*          5. DETERMINE IF "DIV" IS TO BE USED TO STAGE MEMBER
*             CONTENTS.
*          6. DETERMINE IF "FASTPATH" IS TO BE USED TO "SPEED UP" I/O.
*
*
*        ON ENTRY:
*           R9 -> @DATA
*          R13 -> CALLER'S REGISTER SAVE AREA
*                 WHICH CAN BE USED BY ROUTINES CALLED BY REVDASD
*          R14 -> RETURN POINT
*          R15 -> REVDASD
*
*
*        DURING PROCESSING:
*           R4 -> REVDASD
*           R7 -> RETURN POINT
*           R9 -> @DATA
*          R13 -> CALLER'S REGISTER SAVE AREA
*
*
*        ON EXIT:
*           R7 -> RETURN POINT
*           R9 -> @DATA
*          R13 -> CALLER'S REGISTER SAVE AREA
*          R15 =  RETURN CODE:
*                 = 0 => PROCEED
*                 > 0 => ABORT
*                 < 0 => REALLOCATE WITH UPDATED "$" VARIABLES
*
*          'MYDSCB' CONTAINS THE FORMAT-1 (OR FORMAT-8) DSCB
*          EITHER FROM THE VTOC OR GENERATED BY THE SYSTEM FOR VSAM
*          ENTITIES THAT DO NOT HAVE A PHYSICAL VTOC ENTRY.
*
*          'STLOCAT' WILL BE SET IF A LOCATE WAS ISSUED.
*
*          'MD_VSAM' WILL BE SET FOR CI RECORD EXTRACTION.
*
*          'MSG' CONTAINS ERROR MESSAGE IF R15 > 0
*          IN THE FOLLOWING FORMAT:
*
*          - THE FIRST 2 BYTES CONTAIN THE TEXT BYTE COUNT
*            THAT FOLLOW THE FIRST 2 BYTES.
*
*          - WHEN RUNNING IN FULLSCREEN MODE THEN NORMAL REVCOMM
*            MESSAGE PROCESSING IS DEEMED TO BE AVAILABLE AND SO THE
*            FIRST BYTE MAY CONTAIN AN INTERNAL MESSAGE CODE INSTEAD.
*
*        ONLY REGISTERS R9 -> R13 ARE RELIABLY PRESERVED.
*
         SPACE
REVDASD  RSECT
REVDASD  AMODE 31
         USING REVDASD,R15
         B     @DASD
         DC    AL1(7),CL7'REVDASD'
         DROP  R15                 REVDASD
         USING REVDASD,R4
@DASD    LR    R7,R14              SAVE RETURN ADDRESS
         LR    R4,R15              SET LOCAL BASE
         NI    STATUS,255-STLOCAT  RESET LOCATE SWITCH
         NI    MODE,255-MD_VSAM    RESET VSAM SWITCH
         NI    STATUS2,255-$2FAST  RESET "FASTPATH"
         SPACE
************************************************************
*                                                          *
*         OBTAIN THE DSCB FROM THE VTOC                    *
*                                                          *
************************************************************
         SPACE
OBTDSCB  MVC   OBTAINW,OBTAIN
         LA    R0,$DSNAME+2        DSN FOR OBTAIN
         CLI   DSORGTYP,X'DD'      PROCESSING VTOC? ("DISK DIRECTORY"?)
         BNE   OBTDSN              NO, HAVE CORRECT DSNAME
         MVI   JFCBDSNM,X'04'      YES, USE FORMAT-4 DSCB KEY
         MVC   JFCBDSNM+1(43),JFCBDSNM
         LA    R0,JFCBDSNM         KEY FOR OBTAIN
OBTDSN   ST    R0,OBTAINW+4
         LA    R0,$VOLSER          VOLUME FOR OBTAIN
         ST    R0,OBTAINW+8
         LA    R0,MYDSCB           ANSWER AREA FOR OBTAIN
         ST    R0,OBTAINW+12
         OBTAIN OBTAINW
         LTR   R15,R15             WAS OBTAIN SUCCESSFUL?
         BZ    OBTAINOK            YES, BRANCH
         SPACE
         STC   R15,PUTLINS         NO, SAVE RETURN CODE
         OI    STATUS7,$7BELL      SOUND BELL FOR ERROR MESSAGE
         CLI   PUTLINS,8           SEVERE ERROR?
         BNH   OBTRETRY            NO, LOOK AT RETRY OPTIONS
         MVC   MSG+2(10),=C'OBTAIN RC='
         UNPK  MSG+12(3),PUTLINS(2)
         TR    MSG+12(2),DASDHEX-240
         LA    R0,12               GET MESSAGE LENGTH
         STH   R0,MSG              SET MESSAGE LENGTH
         BR    R7                  NESSAGE NOW READY
         SPACE
*               OBTAIN HAS FAILED.  HOW CAN THAT HAPPEN WHEN
*               DYNAMIC ALLOCATION WAS SUCCESSFUL?  ONE WAY IT
*               CAN HAPPEN IS IF THE DSNAME IS AN ALIAS ENTRY
*               IN A VSAM CATALOG.  IF IT IS, A 'LOCATE' WILL
*               PUT THE TRUE NAME IN THE DSNAME FIELD, SO NOW
*               WE ISSUE A LOCATE, AND TRY THE OBTAIN AGAIN.
         SPACE
OBTRETRY TM    STATUS,STLOCAT      HAS LOCATE BEEN TRIED ALREADY?
         BZ    OBTALIAS            NO, GO TRY IT
         SPACE
*               OBTAIN HAS FAILED.  HOW CAN THAT HAPPEN WHEN
*               DYNAMIC ALLOCATION WAS SUCCESSFUL?  ANOTHER WAY
*               IT CAN HAPPEN IS IF A VSAM DATA COMPONENT IS
*               NOMINATED WHICH HAS AN ALTERNATE INDEX.  IF THIS
*               IS THE CASE THEN THE FIRST VOLUME ALLOCATED IS
*               THAT OF THE ALTERNATE INDEX, AND IF THE BASE DATA
*               COMPONENT IS ON A DIFFERENT VOLUME THEN A MULTI-UNIT
*               FILE MUST HAVE BEEN ALLOCATED.  THE SOLUTION IS TO
*               ALLOCATE A NEW SINGLE-UNIT FILE TO THE SECOND VOLUME
*               AND PROCESS THAT DDNAME.
         SPACE
         LA    R1,$DDNAME
         L     R15,=A(REVDDLOC)
         BASR  R14,R15             FIND SUBJECT FILE DD TIOT ENTRY
         CLI   0(R15),24           SINGLE-UNIT TIOT ENTRY?
         BL    OBTERR              YES, END OF STORY
         L     R15,20(,R15)        NO, LOAD SECOND UNIT'S ENTRY
         LA    R15,0(,R15)         MAKE ADDRESS OKAY FOR ANY AMODE
         LTR   R15,R15             ANY UCB?
         BZ    OBTERR              NO, END OF STORY
         CLI   18(R15),X'20'       DIRECT ACCESS DEVICE?
         BNE   OBTERR              NO, END OF STORY
         MVC   $VOLSER,28(R15)     YES, COPY UCBVOLI
         MVC   $UNIT,=CL8'SYSALLDA'
         TM    STATUS,STALLOC      WAS FILE ALLOCATED HERE?
         BZ    OBTAIX              NO, GO GET A NEW SINGLE-UNIT FILE
         XC    MYDAPB,MYDAPB       YES, FREE THE CURRENT FILE FIRST
         MVI   DA18CD+1,X'18'
         MVC   DA18DDN,$DDNAME
         MVC   DA18MNM(8),=CL8' '
         MVC   DA18SCLS(2),=CL8' '
         XASAM24
         LA    R1,MYDAPL
         L     R15,CVTPTR(,0)      POINT TO THE CVT
         USING CVT,R15
         L     R15,CVTDAIR         GET ENTRY POINT TO CALL IKJDAIR
         DROP  R15                 CVT
         BASR  R14,R15             UNALLOCATE
         NI    STATUS,255-STALLOC  UNALLOCATED
         XASAM31
OBTAIX   SR    R15,R15             GET ZERO
         BCTR  R15,0               GET NEGATIVE ONE
         BR    R7                  RETURN TO CALLER
         SPACE
OBTERR   LA    R15,12              SIGNAL FAILURE
         MVI   MSG,166             DATA SET NOT ON VOLUME
         TM    MODE,MD_FS          IN FULLSCREEN MODE?
         BOR   R7                  YES, USE SHORT MESSAGE
         TM    STATUS9,$9ISPF      ISPF PERFORMING SCREEN I/O?
         BOR   R7                  YES, USE SHORT MESSAGE
         OI    STATUS7,$7BELL      SOUND BELL FOR ERROR MESSAGE
         MVC   MSG(MSG09L),MSG09   UNABLE TO OBTAIN DSCB
         BR    R7                  USE LONG MESSAGE FOR PUTLINE
         SPACE
OBTALIAS OI    STATUS,STLOCAT      TRIP THE SWITCH
         MVC   LOCATEW,LOCATE
         LA    R0,$DSNAME+2        DSNAME FOR LOCATE
         ST    R0,LOCATEW+4
         LA    R0,LOCBUF           ANSWER AREA FOR LOCATE
         ST    R0,LOCATEW+12
         LOCATE LOCATEW
         LTR   R15,R15             WAS LOCATE SUCCESSFUL?
         BNZ   OBTERR              NO, ISSUE MESSAGE
         CLC   $VOLSER,LOCBUF+6    SAME VOLUME AS IN CATALOG?
         BNE   OBTERR              NO, WANTED UNCATALOGED COPY
         LA    R0,44               YES, GET MAX DATA SET NAME LENGTH
         LA    R1,$DSNAME+45       POINT TO LAST DSN CHARACTER
OBTDSNLP CLI   0(R1),C' '          TRAILING BLANK?
         BNE   OBTDSNLN            NO, NOW HAVE NEW $DSNAME LENGTH
         BCTR  R1,0                YES, POINT TO PREVIOUS CHARACTER
         BCT   R0,OBTDSNLP         DECREMENT LENGTH AND TEST PREVIOUS
OBTDSNLN STH   R0,$DSNAME          SAVE REAL DATA SET NAME LENGTH
         B     OBTDSCB             GO OBTAIN AGAIN
         SPACE
OBTAINOK MVC   AMKLN+1(1),DS1KEYL
         MVC   AMRKP,DS1RKP        COPY KEY DETAILS FOR RULER MARKERS
         CLI   DSORGTYP,X'DD'      PROCESSING VTOC? ("DISK DIRECTORY"?)
         BNE   VSAMINIT            NO
         LA    R0,44
         ST    R0,AMKEY            SET AMRKP AND AMKLN FOR VTOC
         NI    STATUS2,255-$2PDS   NOT MEMBER GROUP NOR FULLSCREEN HELP
         LA    R0,1
         ST    R0,BLKFACTR         VTOCS ARE NOT BLOCKED
         ICM   R0,1,DS4DEVDT       GET DSCBS PER TRACK
         BNP   NODIV0              HANDLE OBVIOUSLY WRONG DATA
         MVC   DOUBLE,DS4VTOCE+2   ALIGN VTOC EXTENT DATA
         LH    R15,DOUBLE+4        GET VTOC END CC
         SH    R15,DOUBLE          SUBTRACT VTOC START CC
         MH    R15,DS4DEVSZ+2      MULTIPLY BY TRACKS PER CYLINDER
         AH    R15,DOUBLE+6        ADD VTOC END HH
         SH    R15,DOUBLE+2        SUBTRACT VTOC START HH
         MR    R14,R0              GET VTOC DSCB COUNT
         ST    R0,BLKSATRK         SAVE THE NUMBER OF BLOCKS PER TRACK
         S     R15,SCRNLNES        GET LARGEST RECORD # FOR "FASTPATH"
         BNP   NODIV0              TOO SMALL TO WARRANT "FASTPATH"
         ST    R15,MAXPOINT        SAVE IT
         OI    STATUS2,$2FAST      ACTIVATE "FASTPATH" FOR VTOC ACCESS
         B     NODIV0
         SPACE
**********************************************************************
*                                                          *         *
*         PERFORM ADDITIONAL INITIALIZATION FOR VSAM       *  GP@P6  *
*                                                          *  03/87  *
**********************************************************************
         SPACE
VSAMINIT TM    DS1DSORG+1,DS1ACBM  DSORG = VS?
         BZ    NONVSAM             NO
         NI    STATUS2,255-$2PDS   YES, FORGET ABOUT MEMBERS AND HELP
         OC    DS1END(5),DS1END    CCHHR OF DSCB1
         BNZ   DSCBOK              NOT A PHONY VSAM DSCB, SO NO S213-04
COMPACB  DS    0H                  CLUSTER, ALSO ACB I/O TO COMPONENT
         LA    R5,PUTLINS          POINT TO SHOWCAT PARAMETER AREA
         XC    0(16,R5),0(R5)      RESET SHOWCAT PARAMETER LIST
         L     R3,SCREENWK         POINT TO SHOWCAT WORK AREA
         XC    0(32,R3),0(R3)      CLEAR SOME RESIDUAL DATA
         LA    R0,1024
         STH   R0,0(,R3)           ALLOW SHOWCAT UP TO 1K BYTES
         LA    R2,$DSNAME+2        POINT TO THE VSAM DATA SET NAME
         SHOWCAT AREA=(R3),NAME=(R2),MF=(E,(R5))
         LTR   R15,R15             WAS SHOWCAT SUCCESSFUL?
         BZ    SHOCATOK            YES, PROCEED
SHOCATER STC   R15,DOUBLE          NO, GET THE RETURN CODE
         OI    STATUS7,$7BELL      SOUND BELL FOR ERROR MESSAGE
         MVC   MSG+2(L'MSG18),MSG18
         UNPK  MSG+2+L'MSG18(3),DOUBLE(2)
         TR    MSG+2+L'MSG18(2),DASDHEX-240
         LA    R0,L'MSG18+2        SHOW MSG WITH SHOWCAT RETURN CODE
         STH   R0,MSG
         BR    R7
SHOCATOK CLI   8(R3),C'D'          REVIEWING A DATA COMPONENT?
         BE    COMPOKAY            YES, NO FURTHER SHOWCAT REQUIRED
         CLI   8(R3),C'I'          REVIEWING AN INDEX COMPONENT?
         BE    COMPOKAY            YES, NO FURTHER SHOWCAT REQUIRED
         XC    DOUBLE,DOUBLE       CLEAR SOME BYTES
         LH    R0,10(,R3)          GET THE ASSOCIATED POINTER COUNT
         LA    R1,12(,R3)          POINT TO THE FIRST POINTER
ASSOCLP  CLI   0(R1),C'D'          GOT A DATA POINTER?
         BE    DATAPNTR            YES
         CLI   0(R1),C'I'          GOT AN INDEX POINTER?
         BE    INDEXPTR            YES
NXTASSOC LA    R1,4(,R1)           POINT TO THE NEXT POINTER
         BCT   R0,ASSOCLP          PROCESS IT
         OC    DOUBLE(4),DOUBLE    FOUND THE DATA ASSOCIATION?
         BNZ   ASSOCOK             YES
         LA    R15,12              NO, CANNOT PROCEED
         MVC   MSG(MSG17L),MSG17   SHOWCAT DID NOT FIND DATA COMPONENT
         OI    STATUS7,$7BELL      SOUND BELL FOR ERROR MESSAGE
         BR    R7
DATAPNTR MVC   DOUBLE(4),0(R1)     COPY THE DATA POINTER ENTRY
         B     NXTASSOC
INDEXPTR CLI   DATAKV+1,1          IS 'DATA' SPECIFIED?
         BE    NXTASSOC            YES, SHOW DATA IN RBA ORDER
         OI    $UCBAD,$KSDS        NO, FLAG FOR ACCESS IN KEY ORDER
         B     NXTASSOC
ASSOCOK  L     R6,4(,R3)           LOAD CATALOG ACB ADDRESS
         XC    0(16,R5),0(R5)      RESET SHOWCAT PARAMETER LIST
*        L     R3,SCREENWK         POINT TO SHOWCAT WORK AREA
         XC    0(32,R3),0(R3)      CLEAR SOME RESIDUAL DATA
         LA    R0,1024
         STH   R0,0(,R3)           ALLOW SHOWCAT UP TO 1K BYTES
         LA    R2,DOUBLE+1         POINT TO THE CI NUMBER
         SHOWCAT AREA=(R3),ACB=(R6),CI=(R2),MF=(E,(R5))
         LTR   R15,R15             WAS SHOWCAT SUCCESSFUL?
         BNZ   SHOCATER            NO, PRODUCE AN ERROR MESSAGE
COMPOKAY MVC   AMKEY,10(R3)        COPY RECORD KEY OFFSET AND LENGTH
         MVC   AMCIV,14(R3)        COPY CONTROLINTERVAL SIZE
         MVC   AMLCL,18(R3)        COPY MAXIMUM RECORD LENGTH
         OI    $UCBAD,$ACB         FLAG I/O VIA ACB REQUIRED
         CLI   DATAKV+1,1          IS 'DATA' SPECIFIED?
         BE    ICFVSAMX            YES, SUPPRESS DB2 ROW PROCESSING
         B     LINEARVS            NO, GO CHECK IF DB2 TABLESPACE
         SPACE
DSCBOK   TM    STATUS2,$2AUTH      APF AUTHORIZED?
         BZ    COMPACB             NO, USE VSAM (ACB) NOT BSAM (DCB)
         TM    MODE,MD_FS          IN FULLSCREEN MODE?
         BO    COMPACB             YES, USE VSAM FOR RFE/REVLEV
         TM    STATUS9,$9ISPF      IS ISPF PERFORMING SCREEN I/O?
         BO    COMPACB             YES, USE VSAM
         CLI   DS1NOEPV,17         MORE THAN 16 EXTENTS ON VOL?
         BL    XTNTSOK             NO, PROCEED
         LH    R1,$DSNAME          MORE THAN 16 EXTENTS - AVOID S213-20
         MVC   MSG+2(44),$DSNAME+2
         LA    R15,MSG+2(R1)
         MVC   0(L'MSG15,R15),MSG15
         MVC   L'MSG15(6,R15),$VOLSER
         MVC   L'MSG15+6(L'MSG15X,R15),MSG15X
         LA    R0,L'MSG15+6+L'MSG15X(,R1)
         STH   R0,MSG
         OI    STATUS7,$7BELL      SOUND BELL FOR ERROR MESSAGE
         LA    R15,12
         BR    R7
         SPACE
XTNTSOK  CLI   DATAKV+1,1          IS 'DATA' SPECIFIED?
         BE    ICFVSAMX            YES, SHOW ALL CI CONTENTS
         OI    MODE,MD_VSAM        NO, SHOW LOGICAL RECORDS
         TM    DS1OPTCD,X'80'      IS THIS AN ICF COMPONENT? (DS1OPTIC)
         BZ    ICFVSAMX            NO, FORGET ABOUT THE VVDS
         MVI   CMDAREA+2,C' '      YES, BLANK THE VVDS DSNAME AREA
         MVC   CMDAREA+3(43),CMDAREA+2
         MVC   CMDAREA+2(11),=C'SYS1.VVDS.V'
         MVC   CMDAREA+13(6),$VOLSER
         LA    R0,17               GET MAX DATA SET NAME LENGTH
         LA    R1,CMDAREA+18       POINT TO LAST DSN CHARACTER
VVDSLNLP CLI   0(R1),C' '          TRAILING BLANK?
         BNE   NEWVVDSL            NO, NOW HAVE NEW $DSNAME LENGTH
         BCTR  R1,0                YES, POINT TO PREVIOUS CHARACTER
         BCT   R0,VVDSLNLP         DECREMENT LENGTH AND TEST PREVIOUS
NEWVVDSL STH   R0,CMDAREA          SAVE VVDS DATA SET NAME LENGTH
         XC    MYDAPB,MYDAPB
         MVI   DA08CD+1,X'08'
         LA    R0,CMDAREA
         ST    R0,DA08PDSN
         MVC   DA08DDN,=CL8' '
         MVC   DA08UNIT,=CL8'SYSALLDA'
         MVC   DA08SER,=CL8' '
         MVC   DA08SER(6),$VOLSER
         MVC   DA08MNM,=CL8' '
         MVC   DA08PSWD,$PASSWRD
         MVI   DA08DSP1,DA08SHR
         MVI   DA08DPS2,DA08KEEP
         MVI   DA08DPS3,DA08KEP
         SPACE
         XASAM24
         LA    R1,MYDAPL           POINT TO PARAMETER LIST
         XC    MYECB,MYECB
         L     R15,CVTPTR(,0)      POINT TO THE CVT
         USING CVT,R15
         L     R15,CVTDAIR         GET ENTRY POINT TO CALL IKJDAIR
         DROP  R15                 CVT
         BASR  R14,R15
         XASAM31
         LTR   R15,R15             COULD IT BE ALLOCATED?
         BNZ   ICFVSAMX            NO, PROCEED AS IF NON-ICF VSAM
         MVI   DSORGTYP,X'CF'      YES, ENTER VVDS SCAN MODE
         MVC   PCMD,$DDNAME        REMEMBER THE "REAL" $DDNAME
         MVC   $DDNAME,DA08DDN     COPY DDNAME TO ACCESS VVDS
         MVC   CMDAREA+2(44),$DSNAME+2
         LH    R15,$DSNAME         GET LENGTH OF DATA SET NAME
         LA    R15,1(,R15)         ADD ONE
         STH   R15,CMDAREA         MAKE COMPARE DATA FOR VVDS Z RECORD
         L     R15,=A(REVIEW2)     GET ADDRESS OF PHASE 2
         BASR  R14,R15             GO EXTRACT VVDS DETAILS
         SR    R0,R0
         ST    R0,MAXPOINT         ZERO AFTER VVDS LOOK-UP
         XC    MYDAPB,MYDAPB
         MVI   DA18CD+1,X'18'
         MVC   DA18DDN,$DDNAME
         MVC   DA18MNM(8),=CL8' '
         MVC   DA18SCLS(2),=CL8' '
         XASAM24
         LA    R1,MYDAPL
         XC    MYECB,MYECB
         L     R15,CVTPTR(,0)      POINT TO THE CVT
         USING CVT,R15
         L     R15,CVTDAIR         GET ENTRY POINT TO CALL IKJDAIR
         DROP  R15                 CVT
         BASR  R14,R15
         XASAM31
         MVC   $DDNAME,PCMD        RESTORE THE "REAL" $DDNAME
         MVC   PCMD,=CL8' '        JUST TO BE TIDY
         NI    DSORGTYP,VVRCOMTP   JUST KEEP COMPONENT TYPE (D/I)
         ICM   R0,15,AMCIV         ZERO CONTROLINTERVAL SIZE?
         BZ    LINEARDS            YES, VVDS ERROR
         ICM   R0,15,AMLCL         ZERO MAXIMUM RECORD SIZE?
         BZ    LINEARDS            YES, LINEAR DATA SET
         OI    DSORGTYP,X'C0'      NO, LOOKING AT ICF DATA
         B     ICFVSAMX            DISPLAY LOGICAL RECORDS
LINEARDS NI    MODE,255-MD_VSAM    DISPLAY PHYSICAL BLOCKS ONLY
LINEARVS CLI   $DSNAME+1,20        "SMALL" DATA SET NAME?
         BL    ICFVSAMX            YES, CAN'T BE DB2
         LA    R1,$DSNAME+2        POINT TO THE DATA SET NAME
         LA    R0,8                GET QUALIFIER MAXIMUM LENGTH
DBDTEST  CLC   =C'.DSNDBD.',1(R1)  IS THIS A DB2 TABLESPACE?
         BE    DB2DBDOK            YES
         CLC   =C'.DSNDBC.',1(R1)  IS THIS A DB2 TABLESPACE?
         BE    DB2DBCOK            YES
         LA    R1,1(,R1)           POINT TO NEXT DATA SET NAME BYTE
         BCT   R0,DBDTEST          CONTINUE TESTING
         B     ICFVSAMX            NOT DB2 SO PROCEED AS USUAL
DB2DBDOK OI    MODE,MD_VSAM        SELECT LOGICAL RECORD BREAKOUT WHERE
DB2DBCOK OI    STATUS6,$6DB2            A LOGICAL RECORD IS A DB2 ROW!
         L     R0,FMTSIZE1         GET FORMAT AREA SUBPOOL AND SIZE
         LR    R2,R0               COPY THIS SUBPOOL AND SIZE
         MVI   GETMNTRC,4          TRACK GETMAIN IN CASE OF FAILURE
         GETMAIN R,LV=(0)
         ST    R1,FMTAREA          POINT TO THIS AREA FROM @DATA
         MVI   0(R1),4             IDENTIFY THE AREA
         USING @FMTAREA,R1
         ST    R2,FMTSIZE          SAVE SUBPOOL AND SIZE OF THIS AREA
         MVC   FMTFELS(DB2FELEN),DB2FELS
         LA    R15,FMTFELS
         LA    R15,DB2FELEN(,R15)
         ST    R15,FMTFELAD        INDICATE USED FELS
         MVC   FMTNAME,=C'*DB2TBL*'
         DROP  R1                  @FMTAREA
         OI    MODE,MD_FMT         ENABLE FORMATTING
         B     ICFVSAMX            NOT DB2 SO PROCEED AS USUAL
         SPACE
**********************************************************************
*                                                          *         *
*         PERFORM SAF NON-VSAM SECURITY CHECK              *  GP@GE  *
*                                                          *  07/97  *
**********************************************************************
         SPACE
NONVSAM  DS    0H
         TM    OSBITS,X'13'        SOME FLAVOUR OF MVS?
         BNO   ICFVSAMX            NO, FORGET RACROUTE
         L     R14,CVTPTR(,0)      POINT TO THE CVT
         USING CVT,R14
         ICM   R14,15,CVTRAC       POINT TO THE ACCESS CONTROL CVT
         BZ    ICFVSAMX            NO SECURITY SO FORGET RACROUTE
         DROP  R14                 CVT
         L     R1,SCREENWK
         MVC   0(RRL,R1),RR        COPY MACRO LIST FORM
         AIF   (NOT &ENV390).RRT0
         CLI   0(R14),C'A'         RCVT SUPPLIED BY ACF2?
         BNE   RRSTAT              NO, STATUS=ACCESS IS GOOD FOR RACF
         TM    STATUS2,$2AUTH      APF AUTHORIZED?
         BO    RRSTAT              YES, ACF2 WILL ALLOW STATUS=ACCESS
.RRT0    ANOP
*        X'02'=READ   X'04'=UPDATE   X'08'=CONTROL   X'80'=ALTER
         LA    R2,X'02'            TEST FOR ATTR=READ
         TM    STATUS13,$13COMP    PERFORMING COMPRESS?
         BNO   *+8                 NO
         LA    R2,X'04'            YES, TEST FOR ATTR=UPDATE
         TM    STATUS14,$14ALT     ALTERING DATA SET?
         BNO   *+8                 NO
         LA    R2,X'80'            YES, TEST FOR ATTR=ALTER
         AIF   (&ENV390).RRT1
         RACHECK ENTITY=($DSNAME+2), SPECIFY DATA SET NAME             +
               VOLSER=$VOLSER,     SPECIFY VOLUME                      +
               ATTR=(R2),          SPECIFY REQUESTED ACCESS LEVEL      +
               DSTYPE=N,           CHECK IS FOR A NON-VSAM DATA SET    +
               MF=(E,(1))
         AGO   .RRT2               OLD ESM MAY NOT HANDLE RACROUTE
.RRT1    ANOP
         RACROUTE REQUEST=AUTH,    PERFORM A SAF RACHECK               +
               ENTITY=($DSNAME+2), SPECIFY DATA SET NAME               +
               VOLSER=$VOLSER,     SPECIFY VOLUME                      +
               ATTR=(R2),          SPECIFY REQUESTED ACCESS LEVEL      +
               DSTYPE=N,           CHECK IS FOR A NON-VSAM DATA SET    +
               WORKA=256(R1),      SPECIFY 512-BYTE WORK AREA          +
               MF=(E,(1))
.RRT2    ANOP
         LA    R0,4                GET MAXIMUM "GOOD" RETURN CODE
         CLR   R15,R0              ACCESS ALLOWED?
         BNH   ICFVSAMX            YES, PROCEED
         AIF   (NOT &ENV390).RRT3
         B     DABADSAF            NO, GO REPORT ACCESS DENIED
RRSTAT   DC    0H
         RACROUTE REQUEST=AUTH,    PERFORM A SAF RACHECK               +
               ENTITY=($DSNAME+2), SPECIFY DATA SET NAME               +
               VOLSER=$VOLSER,     SPECIFY VOLUME                      +
               DSTYPE=N,           CHECK IS FOR A NON-VSAM DATA SET    +
               STATUS=ACCESS,      REQUEST ACCESS LEVEL FEEDBACK       +
               WORKA=256(R1),      SPECIFY 512-BYTE WORK AREA          +
               RELEASE=1.9,        SPECIFY RELEASE FOR ACCESS=STATUS   +
               MF=(E,(1))
         CHI   R15,4               UNPROTECTED RESOURCE?
         BE    ICFVSAMX            YES, PROCEED
         LTR   R15,R15             SAF CALL OF RACF SUCCEEDED?
         BNZ   DABADSAF            NO, GO HANDLE IT
         L     R1,SCREENWK         YES, POINT TO FEEDBACK
         LM    R15,R0,0(R1)        LOAD RACF RETURN AND REASON CODES
         CHI   R15,20              HAVE RACF ACCESS LEVEL?
         BNE   DABADSAF            NO, GO HANDLE IT
*        X'04'=READ   X'08'=UPDATE   X'0C'=CONTROL   X'10'=ALTER
         LA    R2,X'04'            NEED AT LEAST READ ACCESS
         TM    STATUS13,$13COMP    PERFORMING COMPRESS?
         BNO   *+8                 NO
         LA    R2,X'08'            YES, NEED UPDATE ACCESS
         TM    STATUS14,$14ALT     ALTERING DATA SET?
         BNO   *+8                 NO
         LA    R2,X'10'            YES, NEED ALTER ACCESS
         CR    R0,R2               HAVE REQUIRED ACCESS?
         BNL   ICFVSAMX            YES, PROCEED
DABADSAF DC    0H
.RRT3    ANOP
         MVI   MSG,19              NO, ISSUE MESSAGE TO THIS EFFECT
         TM    MODE,MD_FS          IN FULLSCREEN MODE?
         BOR   R7                  YES, USE SHORT MSG FOR RFE/REVLEV
         TM    STATUS9,$9ISPF      IS ISPF PERFORMING SCREEN I/O?
         BOR   R7                  YES, USE SHORT MSG
         MVC   MSG(46),$DSNAME     NO, LOAD MESSAGE FOR PUTLINE
         LH    R1,$DSNAME
         LA    R0,L'MSG19(,R1)     GET MESSAGE LENGTH
         LA    R1,MSG+2(R1)
         STH   R0,MSG              SET MESSAGE LENGTH
         MVC   0(L'MSG19,R1),MSG19 COMPLETE MESSAGE TEXT FOR PUTLINE
         OI    STATUS7,$7BELL      SOUND BELL FOR ERROR MESSAGE
         BR    R7                  RETURN
         SPACE
*
*         COMMON TIDY UP:  CVOL, PDS DIRECTORY, DIV
*
         SPACE
ICFVSAMX DS    0H
         AIF   (NOT &ENV390).CHKCVOL
         TM    DS1SMSFG,DS1SMSDS   SMS-MANAGED?
         BO    NOTCVOL             YES, CANNOT BE OS/CATALOG
         TM    DS1SMSFG,DS1PDSE    PDSE?
         BO    NOTCVOL             YES, CANNOT BE OS/CATALOG
.CHKCVOL ANOP
         LA    R0,X'0000FF'
         CLM   R0,7,DS1LSTAR       CHECK DS1LSTAR
         BE    CVOLPDSD            BRANCH IF OS/CATALOG
NOTCVOL  TM    DS1DSORG,DS1DSGPO   DSORG = PO?
         BNO   PODIRX              NO
         TM    STATUS11,$11ED+$11VIEW
         BNZ   AMISBPAM            REVEDIT TO USE BPAM
         CLI   $MEMBER,C' '        MEMBER NAME SUPPLIED?
         BH    AMISBPAM            YES, LOOK AT MEMBER AS IS
         CLI   DATAKV+1,1          IS 'DATA' SPECIFIED?
         BE    CVOLPDSD            YES, REVIEW PDS DIRECTORY
         TM    STATUS15,$15COPY    PERFORMING RFE OPTION 3.3 COPY?
         BO    NODIV0              YES, DO NOT USE DIV
AMISBPAM EQU   *                   CLEAR 'DATA' SPECIFICATION
         AIF   (NOT &ENV390).NOHELP
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    NOTPDSE             YES, USE "DIV" TO FIX )I MGMT
.NOHELP  ANOP
         TM    DS1RECFM,DCBRECU    RECFM=U?
         BNO   NODIV0              NO, CAN'T HAVE IDRS TO CACHE
         AIF   (NOT &ENV390).NOPDSE
         TM    DS1SMSFG,DS1PDSE    PDSE?
         BO    NODIV0              YES, CAN'T HAVE IDRS TO CACHE
.NOPDSE  ANOP
NOTPDSE  SR    R0,R0               GET ENTRY CODE (GETMAIN)
         L     R15,=A(REVDIV)      LOAD "DIV" ENTRY POINT
         BASR  R14,R15             CALL REVDIV
NODIV0   DS    0H                  IT EITHER WORKED OR IT DIDN'T
         SR    R15,R15             INDICATE SUCCESS
         BR    R7                  RETURN TO CALLER
         SPACE
*
*         PROCESS NON-VSAM NON-PARTITIONED DATA SETS
*
         SPACE
CVOLPDSD MVI   DSORGTYP,X'FF'      FLAG CVOL OR PDS DIRECTORY
PODIRX   MVC   $MEMBER,=CL8' '     NO MEMBER ACCESS POSSIBLE
         NI    STATUS2,255-$2PDS   NOT MEMBER GROUP NOR FULLSCREEN HELP
         SPACE
**********************************************************************
*                                                          *         *
*         DIRECT ACCESS FAST PATH                          *  GP@P6  *
*                                                          *  02/87  *
**********************************************************************
         SPACE
*
*         THIS CODE TAKES ADVANTAGE OF FIXED LENGTH RECORDS TO
*         ALLOW THE CALCULATION OF THE TTR FOR THE POINT MACRO
*         FROM THE RELATIVE RECORD NUMBER.  THIS COULD ALSO BE
*         DONE FOR ALL TAPE FILES EXCEPT VB OR VBS FILES, BUT
*         THIS WOULD BE OF DUBIOUS BENEFIT GIVEN THE SEQUENTIAL
*         NATURE OF TAPES, ALTHOUGH IF THE CODE CATERED FOR THE
*         DIFFERENCES IN FULL-FUNCTION 3480 NOTE/POINT PARAMETERS
*         THEN HIGH-SPEED SEARCHING COULD BE USED WITH 3480 UNITS.
*
*         STRICTLY SPEAKING, FOR DISK FILES THIS METHOD SHOULD
*         ONLY BE USED FOR FS OR FBS FILES.  HOWEVER, FOR MOST
*         UNBLOCKED FILES (EVEN MOD FILES) EACH TRACK (EXCEPT
*         THE LAST) SHOULD BE FULLY LOADED THUS ALLOWING AN
*         ACCURATE CALCULATION.  THIS CANNOT ALWAYS BE RELIED
*         UPON FOR BLOCKED FILES, ESPECIALLY MOD FILES.  NOTE
*         THAT FIND COMMANDS ARE NOT SPEEDED UP BECAUSE ALL THE
*         RELEVANT DATA RECORDS MUST STILL BE PHYSICALLY READ.
*         (RECFM=FS AND RECFM=FBS IMPLY NON-PDS.)
*
*         BY DEFAULT, "FAST PATH" WILL BE USED FOR NON-PDS DISK
*         FILES IF RECFM=F, RECFM=FS OR RECFM=FBS.  IT WILL ALSO
*         USED WHEN RECFM=FB *AND* AT LEAST ONE OF THE FOLLOWING
*         IS TRUE:  1) LRECL=BLKSIZE
*            *OR*   2) DS1LSTAR INDICATES MORE THAN 256 TRACKS USED.
*
*         SPECIFYING THE 'DATA' OPERAND AT INVOCATION TIME, OR
*         ISSUING THE 'NEWTOP' SUBCOMMAND FROM WITHIN 'REVIEW' WILL
*         CAUSE "FAST PATH" TO BE DISABLED FOR THE REVIEW SESSION.
*         IT WILL ALSO BE DISABLED IF THE VTOC INDICATES THAT THERE
*         IS NOT MUCH MORE THAN A SCREENFUL OF RECORDS.
*
*                                  VARIABLE/UNDEFINED OR TRACKOVERFLOW?
         TM    DS1RECFM,DCBRECV+DCBRECTO
         BNZ   FASTX               YES
         TM    DS1RECFM,DCBRECF    FIXED LENGTH RECORDS?
         BZ    FASTX               NO
         CLI   DATAKV+1,1          IS 'DATA' SPECIFIED?
         BE    FASTX               YES, SUPPRESS "FAST PATH"
         CLI   DS1LSTAR+2,0        IS VALID LAST RECORD NUMBER?
         BE    FASTX               NO, SUPPRESS "FAST PATH"
         AIF   (NOT &ENV390).SKPSTRP
         TM    DS1SMSFG,DS1STRP    DATA STRIPED DATA SET?
         BO    FASTX               YES, BETTER PLAY IT SAFE
.SKPSTRP ANOP
         ICM   R0,3,ARLRTRVD       ANY CONCATENATED JFCBS RETRIEVED?
         BNZ   FASTX               YES, NOT A SINGLE DATA SET
         TM    DS1DSIND,DS1IND80   ONLY A SINGLE DATA VOLUME?
         BNO   FASTX               NO, MULTIVOLUME DATA SET
         LA    R1,1                LOAD UNBLOCKED "BLOCKING FACTOR"
         TM    DS1RECFM,DCBRECBR   BLOCKED?
         BZ    GOFAST              NO, FS IS GOOD, F IS PROBABLY GOOD
         CLC   DS1BLKL,DS1LRECL    BLKSIZE = LRECL?
         BE    GOFAST              YES, TREAT THE TURKEY AS RECFM=F
         LH    R1,DS1BLKL          NO, LOAD THE BLOCK SIZE
         LTR   R1,R1               VALID BLOCK SIZE?
         BNP   FASTX               NO, SOMETHING'S A BIT WACKY
         LH    R15,DS1LRECL        LOAD THE LOGICAL RECORD LENGTH
         SR    R0,R0               CLEAR FOR DIVIDE
         DR    R0,R15              BLKSIZE/LRECL = BLOCKING FACTOR
         LTR   R0,R0               ANY REMAINDER?
         BNZ   FASTX               YES, SOMETHING'S A BIT WACKY
         TM    DS1RECFM,DCBRECSB   FIXED BLOCKED STANDARD?
         BO    GOFAST              YES, EMPLOY "FAST PATH"
         IC    R0,DS1LSTAR         GET TRACKS USED DIVIDED BY 256
         AIF   (NOT &ENVBIG).GOFAST
         TM    DS1FLAG1,DS1LARGE   DSNTYPE=LARGE?
         BNO   *+8                 NO, HAVE TRACKS USED / 256
         ICM   R0,2,DS1TTTHI       YES, GET TRACKS USED HIGH-ORDER
.GOFAST  ANOP
         LTR   R0,R0           **  IS DS1LSTAR TRACKS OVER 255?
         BZ    FASTX           **  NO, SUPPRESS "FAST PATH"
GOFAST   ST    R1,BLKFACTR         SAVE THE BLOCKING FACTOR
*
*         THE FOLLOWING CODE WAS REPLACED BY USING TRKCALC.
*         IT SHOWS THE USE OF DISKTABL, AND ALSO CONTAINS
*         THE MODULO LOGIC NEEDED FOR 3380 AND 3390 GEOMETRY.
*
*        L     R15,$UCBAD          POINT TO THE UCB
*        CLI   19(R15),X'0F'       3390?
*        BE    FAST3390            YES
*        CLI   19(R15),X'0E'       3380/F6425?
*        BE    FAST3380            YES
*        LA    R1,DISKTABL         POINT TO SUPPORTED DISK CONSTANTS
*        CLI   19(R15),X'09'       3330/F478?
*        BE    FASTDISK            YES
*        CLI   19(R15),X'0D'       3330-1/F479?
*        BE    FASTDISK            YES
*        LA    R1,6(,R1)           POINT TO NEXT ENTRY
*        CLI   19(R15),X'0B'       3350/F493?
*        BE    FASTDISK            YES
*        LA    R1,6(,R1)           POINT TO NEXT ENTRY
*        CLI   19(R15),X'85'       F6421?
*        BE    FASTDISK            YES
*        LA    R1,6(,R1)           POINT TO NEXT ENTRY
*        CLI   19(R15),X'0A'       3340?
*        BE    FASTDISK            YES
*        LA    R1,6(,R1)           POINT TO NEXT ENTRY
*        CLI   19(R15),X'07'       2305-2?
*        BE    FASTDISK            YES
*        LA    R1,6(,R1)           POINT TO NEXT ENTRY
*        CLI   19(R15),X'06'       2305-1?
*        BNE   FASTX               NO
*ASTDISK LH    R15,DS1BLKL         GET THE PHYSICAL RECORD SIZE
*        AH    R15,2(,R1)          ADD THE BLOCK OVERHEAD
*        CLI   DS1KEYL,0           KEYED FILE?
*        BE    NOTKEYED            NO
*        SR    R0,R0
*        IC    R0,DS1KEYL          GET THE KEYLENGTH
*        AR    R15,R0              ADD THE KEYLENGTH
*        AH    R15,4(,R1)          ADD THE KEY OVERHEAD
*OTKEYED SR    R0,R0
*        LH    R1,0(,R1)           GET THE TRACK CAPACITY
*        DR    R0,R15              GET NUMBER OF BLOCKS PER TRACK
*        B     GETLSTAR
*AST3380 LH    R15,DS1BLKL         GET THE PHYSICAL RECORD SIZE
*        LA    R15,12+31(,R15)     ADD DEVICE CONSTANTS
*        SRL   R15,5               DIVIDE BY 32 AND ROUND UP
*        CLI   DS1KEYL,0           KEYED FILE?
*        BNE   KEYD3380            YES
*        LA    R15,15(,R15)        ADD COUNT AND GAP OVERHEAD
*        B     CALC3380            PERFORM DEVICE DEPENDANT CALCS
*EYD3380 SR    R1,R1               KEYED FILE PROCESSING
*        IC    R1,DS1KEYL          GET KEY LENGTH
*        LA    R1,12+31(,R1)       ADD DEVICE CONSTANTS
*        SRL   R1,5                DIVIDE BY 32 AND ROUND UP
*        LA    R15,22(R1,R15)      ADD COUNT, KEY, DATA AND GAPS
*ALC3380 SR    R0,R0               CLEAR FOR DIVIDE
*        LA    R1,1499             GET 3380 TRACK SIZE
*        DR    R0,R15              GET NUMBER OF BLOCKS PER TRACK
*        B     GETLSTAR
*AST3390 LH    R15,DS1BLKL         GET THE PHYSICAL RECORD SIZE
*        LR    R1,R15              COPY IT
*        LA    R15,6+231(,R15)     ADD SIX
*        SR    R14,R14
*        D     R14,=F'232'         DIVIDE BY 232 AND ROUND UP
*        M     R14,=F'6'           MULTIPLY ("DN") BY 6
*        AR    R15,R1              ADD DATA LENGTH ("DL")
*        LA    R15,6+33(,R15)      ADD SIX
*        D     R14,=F'34'          DIVIDE BY 34 AND ROUND UP
*        LA    R15,10+9(,R15)      ADD COUNT AND DATA OVERHEAD
*        CLI   DS1KEYL,0           KEYED FILE?
*        BE    CALC3390            NO, PERFORM DEVICE DEPENDANT CALCS
*        SR    R1,R1               KEYED FILE PROCESSING
*        IC    R1,DS1KEYL          GET KEY LENGTH
*        LR    R14,R1              COPY IT
*        LA    R1,6+231(,R1)       ADD SIX
*        SR    R0,R0
*        D     R0,=F'232'          DIVIDE BY 232 AND ROUND UP
*        M     R0,=F'6'            MULTIPLY ("KN") BY 6
*        AR    R1,R14              ADD KEY LENGTH ("KL")
*        LA    R1,6+33(,R1)        ADD SIX
*        D     R0,=F'34'           DIVIDE BY 34 AND ROUND UP
*        LA    R15,9(R1,R15)       ADD KEY OVERHEAD AND GET TOTAL
*ALC3390 SR    R0,R0               CLEAR FOR DIVIDE
*        LA    R1,1729             GET 3390 TRACK SIZE
*        DR    R0,R15              GET NUMBER OF BLOCKS PER TRACK
*ETLSTAR ST    R1,BLKSATRK         SAVE THE NUMBER OF BLOCKS PER TRACK
*        SR    R15,R15
*        ICM   R15,3,DS1LSTAR      GET TT OF DS1LSTAR TTR
*        MR    R14,R1
*        IC    R14,DS1LSTAR+2      GET R OF DS1LSTAR TTR
*        BCTR  R14,0               DON'T COUNT LAST BLOCK
*        AR    R15,R14             GET NUMBER OF BLOCKS IN FILE
*        M     R14,BLKFACTR        GET NUMBER OF RECORDS IN FILE
*        S     R15,SCRNLNES        GET LARGEST RECORD # FOR "FASTPATH"
*        BNP   FASTX               TOO SMALL TO WARRANT "FASTPATH"
*        ST    R15,MAXPOINT        SAVE IT
*        OI    STATUS2,$2FAST      INDICATE "FASTPATH" AVAILABILITY
*ASTX    DS    0H
         XASAM24
         L     R2,$UCBAD           POINT TO THE UCB
         LA    R3,1                SPECIFY RECORD ONE FOR WHOLE TRACK
         SLL   R3,24               PROMOTE TO HIGH BYTE
         ICM   R3,4,DS1KEYL        GET THE KEYLENGTH
         ICM   R3,3,DS1BLKL        GET THE PHYSICAL RECORD SIZE
         TRKCALC FUNCTN=TRKCAP,UCB=(R2),RKDD=(R3),REGSAVE=YES,         +
               MF=(E,CALLSAVE+16)  DETERMINE THE RECORDS PER TRACK
         XASAM31
         LTR   R15,R15             WAS TRKCALC SUCCESSFULL?
         BNZ   FASTX               NO, SUPPRESS "FAST PATH"
         ICM   R15,3,DS1LSTAR      GET TT OF DS1LSTAR TTR
         AIF   (NOT &ENVBIG).LSTAROK
         TM    DS1FLAG1,DS1LARGE   DSNTYPE=LARGE?
         BNO   LLSTAROK            NO, HAVE USED TRACK COUNT
         ICM   R15,4,DS1TTTHI      YES, GET TRACKS USED HIGH-ORDER
.LSTAROK ANOP
LLSTAROK MR    R14,R0
         IC    R14,DS1LSTAR+2      GET R OF DS1LSTAR TTR
         BCTR  R14,0               DON'T COUNT LAST BLOCK
         AR    R15,R14             GET NUMBER OF BLOCKS IN FILE
         M     R14,BLKFACTR        GET NUMBER OF RECORDS IN FILE
         ST    R0,BLKSATRK         SAVE THE NUMBER OF BLOCKS PER TRACK
         S     R15,SCRNLNES        GET LARGEST RECORD # FOR "FASTPATH"
         BNP   FASTX               TOO SMALL TO WARRANT "FASTPATH"
         ST    R15,MAXPOINT        SAVE IT
         OI    STATUS2,$2FAST      INDICATE "FASTPATH" AVAILABILITY
FASTX    DS    0H
         SR    R15,R15             INDICATE SUCCESS
         BR    R7                  RETURN TO CALLER
         DROP  R4                  REVDASD
         SPACE
*
*         CONSTANTS FOR ACCESS METHOD DEPENDENT INITIALIZATION
*
         SPACE
         AIF   (&ENV390).RRT4
         DC    0F'0'
RR       RACHECK CLASS='DATASET',MF=L
         AGO   .RRT5               OLD ESM MAY NOT HANDLE RACROUTE
.RRT4    ANOP
RR       RACROUTE REQUEST=AUTH,CLASS='DATASET',RELEASE=1.9,MF=L
.RRT5    ANOP
RRL      EQU   *-RR
         SPACE
*              DISKTABL NO LONGER USED - REPLACED BY TRKCALC.
*      THE COMMENTS ARE LEFT HERE IN CASE SOMEONE WANTS TO SEE THE
*      OLD FIXED-OVERHEAD DISK CONSTANTS.  THE MODULO-OVERHEAD DISK
*      "CONSTANTS" ARE DUBIOUS AND WERE NEVER USED BY 'REVIEW' LOGIC.
*      SEE COMMENTED CODE ABOVE FOR CORRECT 3380 AND 3390 ALGORITHMS.
*
*              TRKSIZE  D-O/H  K-O/H      DISKS
*        DC    H'13165',H'135',H'56'      3330/3330-1/F478/F479
*        DC    H'19254',H'185',H'82'      3350/F493
*        DC    H'27051',H'258',H'118'     F6421
*        DC    H'08535',H'167',H'75'      3340
*        DC    H'14858',H'198',H'91'      2305-2
*        DC    H'14576',H'432',H'202'     2305-1
**       DC    H'7403',H'101+',H'45+'     2314/2319
**       DC    H'36000',H'484',H'256'  ?  3375
**       DC    H'47968',H'492',H'256'  ?  3380/F6425/F6427
**       DC    H'58786',H'2104',H'256' ?  3390
**       DC    H'48280',H'1824',H'256' ?  9345
         SPACE
*              TRACK SIZE TABLE - MOVED FROM REVDIV.
*      ORIGINALLY REVDIV DID STORAGE TRIMMING BASED ON THE DASD DATA
*      SET SIZE, BUT THIS IS NO LONGER PERFORMED BY THE NEW STORAGE
*      SCHEME WHICH DOES NOT RELY ON ONE BIG CHUNK OF STORAGE.
*      THE NUMBERS HAVE BEEN MOVED HERE FOR HISTORICAL REFERENCE.
*
***TRKTB DC    0F'0'               TRACK SIZE TABLE
*        DC    F'26793'            X'2085' F6421
*        DC    F'65535'   ????     X'2001'  2311
*        DC    F'65535'   ????     X'2002'  2301
*        DC    F'65535'   ????     X'2003'  2303
*        DC    F'46456'            X'2004'  9345   (WAS 2302)
*        DC    F'65535'   ????     X'2005'  2321
*        DC    F'14136'            X'2006'  2305-1
*        DC    F'14660'            X'2007'  2305-2
*        DC    F'7294'             X'2008'  2314   (2319)
*        DC    F'13030'            X'2009'  3330   (F478)
*        DC    F'8368'             X'200A'  3340
*        DC    F'19069'            X'200B'  3350   (F493)
*        DC    F'35616'            X'200C'  3375
*        DC    F'13030'            X'200D'  3330-1 (F479)
*        DC    F'47476'            X'200E'  3380   (F6425,F6427)
*        DC    F'56664'            X'200F'  3390
         SPACE
MSG09    MESG  '"REVIEW" IS UNABLE TO OBTAIN DSCB FOR DATA SET'
*SG10    MESG  '"REVIEW" OF VSAM COMPONENT SPECIFIED BUT ENVIRONMENT NO
*              T APF AUTHORIZED'
MSG15    DC    C' HAS MORE THAN 16 EXTENTS ON '
MSG15X   DC    C' - TRY "REVIEW"'
*SG16    DC    C'ENTRY (?) '
*SG16A   DC    C' IS NOT A CLUSTER AND CANNOT BE REVIEWED'
MSG17    MESG  'SHOWCAT DID NOT FIND DATA COMPONENT'
MSG18    DC    C'SHOWCAT FAILURE - HEX RC = '
MSG19    DC    C' ACCESS DENIED'
         SPACE
         DC    0F'0'
FMTSIZE1 DC    AL1(1),AL3($FMTLEN)
         SPACE
OBTAIN   CAMLST SEARCH,2,3,4
         ORG   OBTAIN+2
         DC    AL1(8)              EADSCB=OK AS FROM Z/OS 1.10
         ORG
OBTAINL  EQU   *-OBTAIN
         SPACE
LOCATE   CAMLST NAME,2,,4
LOCATEL  EQU   *-LOCATE
         DC    0D'0'
DASDHEX  DC    C'0123456789ABCDEF' HEXADECIMAL DIGIT TRANSLATE TABLE
         SPACE
*               SYMBOL-NAME  FLAGS TYPE LENGTH  COLUMNS OFFSET
DB2FELS  DC    CL8'REC-TYPE',X'82',C'X',AL2(01),AL2(08),AL2(0)
         DC    CL8'LENG    ',X'80',C'X',AL2(02),AL2(04),AL2(0)
         DC    CL8'OBID    ',X'80',C'X',AL2(02),AL2(04),AL2(0)
         DC    CL8'ROW-ID  ',X'82',C'X',AL2(01),AL2(06),AL2(0)
         DC    CL8'ROW-DATA',X'00',C'C',AL2(32740),AL2(32740),AL2(0)
DB2FELEN EQU   *-DB2FELS
         LTORG
         SPACE
         DC    0D'0'               END OF CSECT
         TITLE '  R E V I E W   -   D S E C T S  '
************************************************************
*                                                          *
*         DSECTS                                           *
*                                                          *
************************************************************
         SPACE
@DATA    DSECT
         DS    18F                 REGISTER SAVEAREA
SAVE2    DS    18F                 REGISTER SAVEAREA FOR PHASE 2
SIZE     DS    F                   SIZE OF THIS AREA
CPPLPTR  DS    F
LINKAREA DS    2F
BASE1    DS    4F
BASE2    DS    4F
DOUBLE   DS    D
GETMNTRC DS    XL1                 GETMAIN TRACE CODE - ERROR FOOTPRINT
AMATR    DS    XL1                 ICF COMPONENT ATTRIBUTE BYTE
VVRAMDST EQU   X'80'               ON FOR KSDS, OFF FOR ESDS
VVRAMWCK EQU   X'40'               WRITE CHECK
VVRAMSDT EQU   X'20'               SEQUENCE SET WITH DATA (IMBED)
VVRAMREP EQU   X'10'               REPLICATION
VVRAMORD EQU   X'08'               USE VOLUMES IN LIST ORDER
VVRAMRGE EQU   X'04'               KEY RANGE DATA SET
VVRAMRDS EQU   X'02'               ON FOR RRDS
VVRAMSPN EQU   X'01'               SPANNED RECORDS ALLOWED
DSORG    DS    XL2
DSORGTYP DS    XL1                 SPECIAL DATA SET TYPE FLAG
OVLY     EQU   X'20'               CURRENT MEMBER IS OVERLAY PROGRAM
VVRCOMTP EQU   X'08'               COMPONENT TYPE 'D' (0) OR 'I' (1)
TSTRECFM DS    XL1
RC       DS    H
CALLPARM DS    4F
         ORG   CALLPARM
RESWORK  DS    0XL16               RESOLVE@ WORKING STORAGE OVERLAY
RESSYMNM DS    CL8                 ADDRESS EQUATED SYMBOL NAME AREA
RESADDR  DS    A                   CURRENT ADDRESS HOLD AREA
RESFLAG  DS    X                   FLAG BYTE
RESNOT1  EQU   1                   CURRENT TERM IS NOT THE FIRST
RESSTAE  EQU   2                   ESTAE EXIT IS ACTIVE
RESSIGN  DS    C                   SIGN TERMINATING CURRENT TERM
         ORG
CALLSAVE DS    10D                 18 WORD SAVE AREA PLUS 1 DOUBLE WORD
FLDPTR   DS    F
FLDLEN   DS    F
CMDPTR   DS    F
CMDLEN   DS    F
CMDTSOEX DS    CL8                 SPACE TO CONVERT TSO TO TSOEXEC
CMDAREA  DS    CL144               OVERFLOWS INTO MYDSCB FOR REVTSO
LOCBUF   DS    0D                  USES NEXT 265 BYTES
MYDSCB   DS    CL140               96 BYTES OF DSCB, 5 BYTES CCHHR
MSG      DS    CL128
MYPPL    DS    7F
MYANS    DS    F
MYECB    DS    F                   USED BY PUTLINE ROUTINE
MYIOPL   DS    4F                  USED BY PUTLINE, GETLINE AND STACK
MYGTPB   DS    0F                  USED BY GETLINE ROUTINE (2 WORDS)
MYPTPB   DS    3F                  USED BY PUTLINE ROUTINE
MYOLD    DS    2F                  USED BY PUTLINE ROUTINE
MYSEG1   DS    2H,CL256            USED BY PUTLINE ROUTINE
MYTRTBL  EQU   *-256,256           TEMPORARY TRANSLATE TABLE AREA
         ORG   *-16
GETTERML GTTERM MF=L               PARAMETER LIST FOR GTTERM
         ORG
PUTLINS  DS    5F                  USED BY PUTLINE ROUTINE
MYPUTLEP DS    F                   ADDRESS OF IKJPUTL
MYDAPL   DS    5F                  IKJDAIR PARAMETER LIST
MYSTPB   STACK MF=L                STACK PARAMETER BLOCK
STPBL    EQU   *-MYSTPB            5 (PRE-XA) OR 6 (XA & LATER) WORDS
         ORG   MYSTPB              REUSE THE STORAGE
MYDAPB   DS    XL84                DAPB AND DEBLOCKS SAVE AREA
MYDFPB   DS    5F                  USED BY DEFAULT SERVICE
REVCBUF  DS    F                   *** CPPL FOR CALLED ROUTINE      ABL
REVUPT   DS    F                   *** CPPL FOR CALLED ROUTINE      ABL
REVPSCB  DS    F                   *** CPPL FOR CALLED ROUTINE      ABL
REVECT   DS    F                   *** CPPL FOR CALLED ROUTINE      ABL
PCMD     DS    CL8                 PRIMARY COMMAND NAME             ABL
SCMD     DS    CL8                 SUBCOMMAND NAME                  ABL
UDSNAME  DS    2H,CL44
$PASSWRD DS    CL8
$VOLSER  DS    CL6
$DSNAME  DS    H,CL44
$UCBAD   DS    F
$ACB     EQU   X'80'               DATA SET I/O VIA AN ACB, NOT A DCB
$KSDS    EQU   X'40'               ACCESS VSAM KSDS IN KEY ORDER
$RRDS    EQU   X'20'               ACCESS VSAM RRDS IN RRN ORDER
$HFSIO   EQU   X'10'               LOOKING AT HFS DATA
$NONDCB  EQU   $ACB+$KSDS+$RRDS+$HFSIO
$UCBAD3  EQU   $UCBAD+1,3          REAL OR CAPTURED UCB ADDRESS
$UNIT    DS    CL8
$MEMBER  DS    CL8          _____/ THESE TWO
$CONCAT  DS    X                 \  TOGETHER
$ZERO    DS    X
$DDNAML  DS    H            _____/ THESE TWO
$DDNAME  DS    CL8               \  TOGETHER
$DSVARSZ EQU   *-$PASSWRD          SIZE OF SUBJECT'S "$" VARIABLES
$TERMID  DS    CL8          _____/ THESE TWO
$NETWRK  DS    CL8               \  TOGETHER
DSNAIM   DS    H,CL44
DSPLUS   DS    H,CL62              (44 DSN + 10 (MEMBER) + 8 SPF STATS)
CSRLOCN  DS    H                   CURSOR SCREEN LOCATION
COL1LBL  DS    CL8                 SPECIAL TEXT FOR COLUMN 1
CATALOGW EQU   *
LOCATEW  DS    0XL(LOCATEL)
OBTAINW  DS    XL(OBTAINL)
STATUS   DS    XL1                 STATUS FLAGS
STALLOC  EQU   X'80'               UNALLOCATION REQUIRED
STOPEN   EQU   X'40'               CLOSE REQUIRED
STABEND  EQU   X'20'               OPEN ABEND OCCURRED
STLOCAT  EQU   X'10'               LOCATE DONE FOR ALIAS
STGMVU   EQU   X'08'               FREEMAIN OF VARIABLE AREA REQUIRED
STPODIR  EQU   X'04'               PDS MEMBER LIST DONE
STPROF   EQU   X'02'               PROFILE CHANGED SO DO REWRITE
STNOMEM  EQU   X'01'               NO VALID MEMBER BEING REVIEWED
STATUS2  DS    XL1                 MORE STATUS FLAGS
$2PDS    EQU   X'80'               DISABLE STAX DURING TGET FOR PDS CMD
$2AUTH   EQU   X'40'               APF AUTHORIZED
$2SOFT   EQU   X'20'               EOF WAS ZERO VSAM CIDF
$2FAST   EQU   X'10'               PERFORM DIRECT ACCESS FOR SPEED
$2TSR    EQU   X'08'               TSOEXEC TSO COMMAND AVAILABLE
$2TAPE   EQU   X'04'               REVIEWED FILE ON MAGNETIC TAPE
$2EOT    EQU   X'02'               TAPE REWIND REQUIRED AFTER EOF
$2CART   EQU   X'01'               REVIEWED FILE ON UNIT=3480
STATUS3  DS    XL1                 EVEN MORE STATUS FLAGS
$3UPDTE  EQU   X'80'               MAKE IEBUPDTE-LIKE CONTROL CARDS
$3SORT   EQU   X'7F'               PDS DIRECTORY SORT STATUS FLAGS
$3TTR    EQU   X'40'               SORTED INTO ASCENDING TTRS (LOC'N)
$3SIZE   EQU   X'20'               SORTED INTO DESCENDING SIZE
$3DATE   EQU   X'10'               SORTED INTO DESCENDING CHANGE DATE
$3USER   EQU   X'08'               SORTED INTO USERID ORDER
$3SSI    EQU   X'04'               SORTED INTO ASCENDING SSI ORDER
$3PDSE   EQU   X'02'               SORTED BY A PDSE EXTENDED FIELD
$3BUBL   EQU   X'01'               SORTING CHANGED ORDER IN THIS PASS
*        EQU   X'00'               SORTED INTO COLLATING SEQUENCE
MODE     DS    XL1                 DISPLAY FORMAT FLAGS
MD_SMF   EQU   X'80'               SHOW IN SMF RECORD FORMATTING MODE
MD_HEX   EQU   X'40'               SHOW IN HEXADECIMAL FORMATTING MODE
MD_ASCII EQU   X'20'               TRANSLATE CHARACTERS TO EBCDIC
MD_VSAM  EQU   X'10'               EXTRACT VSAM LOGICAL RECORDS
MD_OFFLD EQU   X'08'               WRITE MEMBER CONTENTS TO SEQUENTIAL
MD_RECRS EQU   X'04'               RECURSIVE 'REVIEW' SESSION
MD_EREP  EQU   X'02'               FORMAT LOGREC RECORDS
MD_FS    EQU   X'01'               FULLSCREEN MODE IS ACTIVE
MD_FMT   EQU   MD_SMF+MD_EREP      FORMAT RECORDS FROM SOURCE
MYDFPARM DS    6F                  USED BY DAIRFAIL
MYDFREGS DS    F                   USED BY DAIRFAIL
MYDFRC   DS    F                   USED BY DAIRFAIL
MYJEFF02 DS    F                   USED BY DAIRFAIL
MYDFID   DS    H                   USED BY DAIRFAIL
COLNUM   DS    CL6
GRAFDTLS EQU   *,12                RASTER AND VECTOR GRAPHICS DETAILS
MATRIXSZ DS    XL2                 CHARACTER MATRIX WIDTH AND HEIGHT
SYMSTGF  DS    X                   FIRST LOADABLE TERMINAL STORAGE ID
SYMSTGL  DS    X                   LAST LOADABLE TERMINAL STORAGE ID
SYMSTG3  DS    7X                  TRIPLE PLANE TERMINAL STORAGE IDS
VECFLAGS DS    X                   VECTOR DETAILS
VCTR     EQU   X'80'               VECTOR GRAPHICS SUPPORTED
VCTRNATV EQU   X'40'               NATIVE 3270 VECTOR GRAPHICS
FILEKV   DS    H
DATAKV   DS    H
HELKVS   EQU   *,12                HELP SECTION OPERAND FLAGS
FKV      DS    H
SKV      DS    H
OKV      DS    H
AKV      DS    H
MKV      DS    H
PKV      DS    H
HELPOS#  DS    F
COMMND   DS    H
$SUBLEN  DS    H
$SUBCOM  DS    CL8
$SUBLINE DS    F
$OPERAND DS    21CL20              TWENTY OPERANDS (EACH MAX. 20 BYTES)
         ORG   $OPERAND
CALLSMFA DS    F                   REVSMF ENTRY POINT ADDRESS
CUTWORK@ DS    0A                  ADDRESS OF @CUTWORK (RFE OPTION 3.3)
RIDSHIFT DS    F                   BIT SHIFT COUNT FOR RBA-->DB2 PAGE #
LASTSYM@ DS    0A                  LAST USED SYMBOLIC EQUATE ENTRY ADDR
ASPLTADR DS    A                   ENTRY POINT OF ADMASPLT
CONDNSDD DS    0CL8                DDNAME OF CONDENSE DATA
REALNAME DS    0CL8                REAL NAME OF ALIAS BEING COPIED
UNZOUTDD DS    CL8                 DDNAME OF UNZIPPED DATA
$PATHPTR DS    A                   POINTER TO PATH NAME VARYING STRING
UFILESIZ DS    F                   UNIX FILE SIZE (LOW-ORDER WORD)
UREADCNT DS    F                   UNIX READ COUNT (BYTES PER READ)
URETVAL  DS    F                   UNIX RETURN VALUE
URETCODE DS    F                   UNIX RETURN CODE
URSNCODE DS    F                   UNIX REASON CODE
PHONYIOB DS    4F                  PHONY "IOB" FOR HFS "RESIDUAL COUNT"
@OUTFRST DS    A                   POINTER TO FIRST OUTELEM
@OUTLAST DS    A                   POINTER TO LAST OUTELEM
@OUTNMBR DS    F                   NUMBER IN OUTELEM CHAIN
PICDTLS  EQU   *
X_Y_PELS EQU   *,8                 SIZE OF PICTURE IN PIXELS
X_PELS   DS    F                   WIDTH OF PICTURE IN PIXELS
Y_PELS   DS    F                   HEIGHT OF PICTURE IN PIXELS
PICPELCT DS    F                   TOTAL NUMBER OF PIXELS
PICSTGSZ DS    F                   SIZE OF ARRAY POINTED TO BY HSEACTIV
PICENDAD DS    F                   FIRST BYTE PAST PICTURE DATA
PICOLRES DS    F                   COLOUR RESOLUTION (BITS PER PIXEL)
PICOLORS DS    F                   NUMBER OF DIFFERENT COLOURS OR ZERO
X_BYTES  DS    H                   WIDTH OF PICTURE IN SCREEN COLUMNS
Y_BYTES  DS    H                   HEIGHT OF PICTURE IN SCREEN ROWS
X_OFFSET DS    H                   FIRST PICTURE COLUMN OFFSET
Y_OFFSET DS    H                   FIRST PICTURE ROW OFFSET
X_Y_SYMS DS    F                   SYMBOL COUNT FOR RENDERING PICTURE
PICPUTAD DS    A                   READY-TO-GO TPUT DATA ADDRESS
PICPUTLN DS    H                   READY-TO-GO TPUT DATA LENGTH
PICCOLOR DS    X                   COLOR CODE TO USE FOR PICTURE
PICFLAGS DS    X                   FLAGS FOR PICTURE PROCESSING
PICOK    EQU   X'80'               PICTURE HAS BEEN RENDERED
PICOVR   EQU   X'40'               LPS OVERFLOW
PICPUT   EQU   X'20'               TPUT DATA STREAM READY-TO-GO
PICSRC   EQU   X'10'               WRITE PICTURE SOURCE
PICSYM   EQU   X'08'               PICTURE DONE WITH LOADED SYMBOLS
PICNAT   EQU   X'04'               PICTURE DONE WITH NATIVE VECTOR
PICBIG   EQU   X'02'               PICTURE IS WIDER THAN THE SCREEN
PICNBW   EQU   X'01'               NON-BLACK/WHITE COLOUR USED
*                                  - WHEN 0 ALLOWS USE OF SINGLE PLANE
*                                  GRAPHICS FOR "COLOUR" PICTURES
PICDTLEN EQU   *-PICDTLS           LENGTH OF PICTURE INFORMATION
ZPFLNMAD DS    A                   SELECTED ZIP FILE NAME ADDRESS
ZPFLNMLN DS    F                   SELECTED ZIP FILE NAME LENGTH
ZPFLRZDE DS    A                   REVIEW ZIP DIRECTORY ENTRY ADDRESS
@ISPLINK DS    A                   ADDRESS OF LOADED ISPLINK
ZCMDADR  DS    A                   ADDRESS OF COMMAND VARIABLE
ZVERBADR DS    A                   ADDRESS OF VERB VARIABLE
ZSCRLAAD DS    A                   ADDRESS OF SCROLL AMOUNT VARIABLE
ZPFKADR  DS    A                   ADDRESS OF PF KEY VARIABLE
ZCMDLEN  DS    F                   LENGTH OF COMMAND VARIABLE
ZVERBLEN DS    F                   LENGTH OF VERB VARIABLE
ZSCRLALN DS    F                   LENGTH OF SCROLL AMOUNT VARIABLE
ZPFKLEN  DS    F                   LENGTH OF PF KEY VARIABLE
ZKLUSELN DS    F                   LENGTH OF ZKLUSE VARIABLE
ZKLUSEAD DS    A                   ADDRESS OF ZKLUSE VARIABLE
ZIPDIRF# DS    F                   ZIP DIRECTORY RECORD NUMBER
ISPFPAGE DS    F                   PAGE SIZE UNDER ISPF
REVPOS   DS    F                   CURSOR POSITION
REVCSR   DS    CL8                 CURSOR FIELD
REVALRM  DS    CL8                 ALARM SETTING
REVLVL   DS    CL4                 LAST VISIBLE LINE NUMBER OF REVBUF
REVSPROF DS    CL4                 PROFILE SCROLL AMOUNT
REVS     DS    CL4                 DEFAULT SCROLL AMOUNT
STRING2L DS    H                   LENGTH OF REPLACEMENT STRING
STRING2  DS    CL64                REPLACEMENT STRING
ZPFKEY   DS    CL4                 PROGRAM FUNCTION KEY NUMBER
ZKLUSE   DS    CL1                 KEYLIST USE
CRERECFM DS    CL5                 RECORD FORMAT
CREALCSZ DS    F                   ALLOCATED TRACK COUNT
CRE2NDRY DS    F                   SECONDARY ALLOCATION SPEC
CREDIR   DS    F                   NUMBER OF DIRECTORY BLOCKS
CRELRECL DS    H                   LOGICAL RECORD LENGTH
CREBLKSI DS    H                   PHYSICAL BLOCK SIZE
CRETPC   DS    H                   TRACKS PER CYLINDER
CREVOL   DS    CL6                 VOLUME SERIAL NUMBER
ALCDSSAV DS    CL56                ALLOCATION DSNAME TARGET SAVE AREA
         AIF   (NOT &ENVBIG).DCBEOKD
         DS    0F
DYNDCBEW DS    XL(SEQDCBEL)        DCBE AREA
.DCBEOKD ANOP
         ORG
GOTTERM  DS    2F                  RESULTS FROM GTTERM MACRO
         AIF   (NOT &ENV390).SCKCNV2
STCKCNVL STCKCONV MF=L             PARAMETER LIST FOR STCKCONV
.SCKCNV2 ANOP
ABENDWRD DS    0F                  WORD TO HOLD DCB ABEND DETAILS
DAIRREGS DS    F
OPEND    DS    0F
CLOSED   DS    F
DYNEXLST DS    2F           _____/ THESE TWO
KOUNT64  DS    0FL8              \ TOGETHER (FOR DYNEXLST OVERFLOW)
KOUNTHI  DS    F
KOUNT    DS    F
DYNDCBW  DS    XL(SEQDCBL)
DYNDECBW DS    XL(DYNDECBL)
RANGE    DS    2F
ANSWER   DS    2F
GMVUW    DS    0F,XL(GMVUL)
SAVKEYLE DS    F
SAVSPANL DS    F
SAVLRECL DS    F
SAVBLKSI DS    F
SAVHOLDL DS    F
BLOCKPTR DS    F
SPANPTR  DS    F
HOLDPTR  DS    F
CHKPTLN  EQU   12                  LENGTH OF CHECKPOINT ENTRY
CHKPTTOP DS    F                   ADDRESS OF TOP CHECKPOINT ENTRY
CHKPTBOT DS    F                   ADDRESS OF BOTTOM CHECKPOINT ENTRY
CHKPTDUM DS    XL(CHKPTLN)         DUMMY CHECKPOINT ENTRY
ENDPTR   DS    F                   ADDRESS PAST VARIABLE DYNAMIC AREA
HOLDTOP  DS    F                   ADDRESS OF FIRST DIRECTORY ENTRY
HOLDEND  DS    F                   ADDRESS OF LAST DIRECTORY ENTRY
DIVORG   DS    F                   ADDRESS OF FIRST DIVAREA
DIVLASTA DS    F                   ADDRESS OF LAST DIVAREA
DIVHITTR DS    F                   HIGHEST TTR OF RECORD STORED BY DIV
DIVHICNT DS    F                   HIGHEST RECORD NUMBER STORED BY DIV
DIVSZREQ DS    F                   DIV SIZE SPECIFICALLY REQUESTED
DIVCHKPT EQU   *,12
DIVCPCNT DS    F                   LATEST RECORD PROCESSED BY DIV
DIVCPADR DS    F                   LATEST RECORD DIV ENTRY ADDRESS
DIVCPAAD DS    F                   LATEST RECORD DIVAREA ADDRESS
WORKCODE DS    X                   USED BY REVCOMM
ERASECMD DS    XL3                 ESCAPE + ERASE/WRITE COMMAND + WCC
AMDTLS   EQU   *,20                KEY AND VSAM DETAILS
AMKEY    DS    0F                  RECORD KEY DETAILS
AMRKP    DS    H                   RELATIVE KEY POSITION
AMKLN    DS    H                   KEY LENGTH
AMCIV    DS    F                   CONTROLINTERVAL SIZE
AMLCL    DS    F                   MAXIMUM RECORD LENGTH
AMNLR    DS    F                   NUMBER OF LOGICAL RECORDS
AMASP    DS    F                   BYTES OF FREE SPACE
OFFSET   DS    F                   SCROLLED-RIGHT-FROM-LEFT-MAX AMOUNT
RECSIZE  DS    F                   MAXIMUM DISPLAYABLE RECORD LENGTH
COUNT    DS    F
TTR      DS    F
EOFRELAD DS    F                   END-OF-FILE RELATIVE ADDRESS
ATTNADDR DS    F                   ATTENTION EXIT ADDRESS
SCROLL   DS    F                   CURRENT SCROLL AMOUNT
DOWNAMT  DS    F
LISTNUM  DS    F
MSGDSN   DS    CL54
SMFSBTYP DS    H                   SMF SUB-TYPE TO BE HIGHLIGHTED
SACHAR   DS    X                   ORDER CODE FOR SET ATTRIBUTE
DYN_CSR  DS    H                   CURSOR POSITION IN DYNAMIC AREA
SBASAVE  DS    4F
PAGESIZE DS    H                   DATA LINES PER SCREEN
BUFFSIZE DS    F                   LENGTH OF TPUT BUFFER
SCRNLNES DS    F     \_KEEP IN     NUMBER OF SCREEN LINES
SCRNCOLS DS    F     / THIS ORDER  NUMBER OF SCREEN COLUMNS
CBPRM1   DS    F                   POINTER TO BUFFSIZE
CBPRM2   DS    F                   POINTER TO SCRNLNES
CBPRM3   DS    F                   POINTER TO BUFFER (UPDATED IN PLACE)
CBPRM4   DS    F                   POINTER TO SACHAR
FNDNUM   DS    F     \_ALSO USED   SEARCH MATCH RECORD NUMBER
FNDOFF   DS    F     / BY REVEDIT  SEARCH MATCH OFFSET INTO RECORD DATA
FINDSW   DS    XL1
FACT     EQU   X'80'               FIND COMMAND IS ACTIVE
FTOP     EQU   X'40'               SEARCH FROM TOP OF DATA
FEND     EQU   X'20'               SEARCH FROM BOTTOM OF DATA
FBAK     EQU   X'10'               SEARCH DIRECTION IS BACKWARD
FSCP     EQU   X'08'               SCOPING OPERAND SPECIFIED
FNUM     EQU   X'04'               TWO NUMERIC OPERANDS SPECIFIED
FSMF     EQU   X'02'               FINDSMF COMMAND REQUESTED
FVRT     EQU   X'01'               VERTICAL SCROLLING OCCURRED
FINDSW2  DS    XL1
FNOT     EQU   X'80'               FINDNOT COMMAND REQUESTED
FALL     EQU   X'40'               FIND/FINDNOT ALL COMMAND REQUESTED
FANY     EQU   X'20'               FIND/FINDNOT ALL RECENTLY RESET
FUOL     EQU   X'10'               FIND UPPER OR LOWER CASE
FPIC     EQU   X'08'               FIND PICTURE STRING SPECIFIED
FKAP     EQU   X'04'               RECORD UPPERCASED BY FALLREC
FSUF     EQU   X'02'               SUFFIX SPECIFIED
FPRE     EQU   X'01'               PREFIX SPECIFIED
FWRD     EQU   FPRE+FSUF           WORD SPECIFIED
STRINGL  DS    H
STRING   DS    CL64
FINDCOL1 DS    F                   FIND COLUMN RANGE START OFFSET
FINDCOL2 DS    F                   FIND COLUMN RANGE END COLUMN
OPDL     DS    0F                  OPERAND DESCRIPTOR LIST
OPD0     DS    2F                  COMMAND DESCRIPTOR
OPD1     DS    2F                  OPERAND DESCRIPTOR 1
OPD2     DS    2F                  OPERAND DESCRIPTOR 2
OPD3     DS    2F                  OPERAND DESCRIPTOR 3
OPD4     DS    2F                  OPERAND DESCRIPTOR 4
OPD5     DS    2F                  OPERAND DESCRIPTOR 5
OPD6     DS    2F                  OPERAND DESCRIPTOR 6
OPD7     DS    2F                  OPERAND DESCRIPTOR 7
OPD8     DS    2F                  OPERAND DESCRIPTOR 8
OPD9     DS    2F                  OPERAND DESCRIPTOR 9
OPDLL    EQU   *-OPDL              LENGTH OF LIST
PRESENT  EQU   X'80'
QUOTED   EQU   X'40'
NUMERIC  EQU   X'20'
ATTNLST  STAX  ATTN,MF=L
ATTNLEN  EQU   *-ATTNLST
STATUS4  DS    XL1                 STILL MORE STATUS FLAGS
$4ATTN   EQU   X'80'               INTERRUPT OCCURRED
$4CMD    EQU   X'40'               REVCOMM TO PROCESS "CMDAREA" COMMAND
$4REFR   EQU   X'20'               SCREEN FORMAT REFRESH REQUIRED
$4PAGE   EQU   X'10'               FULL PAGE SCROLLING ACTIVE
$4HALF   EQU   X'08'               HALF PAGE SCROLLING ACTIVE
$4CSR    EQU   $4PAGE+$4HALF       CURSOR SCROLLING ACTIVE
HELOKAY  EQU   X'04'               HEL IS AVAILABLE
HELYES   EQU   X'02'               HEL IS REQUESTED
$4MSG31  EQU   X'01'               MSG31 LOADED SO HIGHLIGHT FOUND TEXT
SMFTYPE  DS    XL1                 SMF RECORD TYPE TO BE HIGHLIGHTED
STATUS5  DS    XL1                 AND SOME MORE STATUS FLAGS
$5QRY    EQU   X'80'               TURNED ON IF QUERY WAS DONE
$5COLR   EQU   X'40'               7-COLOUR DEFINITELY SUPPORTED
$5HILT   EQU   X'20'               EXTENDED HIGHLIGHTING SURE IS OK
$5SYM    EQU   X'10'               SYMBOL SETS SUB-FIELD RETURNED
$5GE     EQU   X'08'               GRAPHIC ESCAPE DEFINITELY OK
$5EDS    EQU   X'04'               CURRENTLY USING 3270 EXTENSIONS
$5CLR16  EQU   X'02'               SIXTEEN COLOUR TERMINAL
$5STSZ   EQU   X'01'               RESTORE SCREEN SIZE ON EXIT
OSBITS   DS    XL1                 LOADED FROM CVTDCB
ACTCOLOR DS    XL1                 COLOUR ACTIVE FOR NON-SMF DATA
BLKFACTR DS    F                   FIXED BLOCKING FACTOR
BLKSATRK DS    F                   NUMBER OF BLOCKS PER TRACK
MAXPOINT DS    F                   MAXIMUM BLOCK NUMBER FOR POINT
HOLDR    DS    F
READR    DS    F
DOWNR    DS    F
DEBLOCKS DS    3F
CRNT3270 DS    0F                  USED BY REVCOMM
CRNTCODE DS    X                   USED BY REVCOMM
CRNTHILT DS    X                   USED BY REVCOMM
CRNTCOLR DS    X                   USED BY REVCOMM
CRNTPSYM DS    X                   USED BY REVCOMM
TGETREG2 DS    3F                  FOR DEBUG                       ABL
TGETREGS DS    3F
TAGCOUNT DS    F                   NUMBER OF TAGGED MEMBERS
ZFLRECL  DS    H                   ZIP FILE DATA LOGICAL RECORD LENGTH
ZFTYPE   DS    X                   ZIP FILE DATA TYPE
ZFT_SET  EQU   X'80'               ZIP FILE DATA TYPE IS SET BY USER
*         LAST TWO BITS OF THIS BYTE ARE SET AS PER FIRST INAT BYTE:
*   BNRY EQU   0                   FILE CONTAINS BINARY DATA
*   ASCI EQU   1                   FILE CONTAINS ASCII TEXT
*   EBCD EQU   2                   FILE CONTAINS EBCDIC DATA
ZF_EOR   EQU   ZCFHASCI+ZCFHEBCD   FILE CONTAINS END-OF-RECORD CODES
SYNADSW  DS    X
SYNADMSG DS    CL78
STATUS6  DS    X                   AND EVEN MORE STATUS FLAGS
HELSW    EQU   X'80'               INVOKED AS FULLSCREEN HELP
HELFF    EQU   X'40'               PERFORMING HEL INITIAL POSITIONING
HELNEWM  EQU   X'20'               NEW MEMBER REQUESTED FOR HEL
HELNEWS  EQU   X'10'               NEW SUBCMD REQUESTED FOR HEL
HELX     EQU   X'08'               PERFORM XCTL TO TSO HELP COMMAND
HELPARS  EQU   X'04'               PROCESS PRIMARY INPUT AFTER SEARCH
HELALT   EQU   X'02'               MUST USE ALTERNATE HEL EP NAME
$6DB2    EQU   X'01'               REVIEWING A DB2 TABLESPACE
STATUS7  DS    X                   FURTHER DIFFERENT STATUS FLAGS
$7RESHO  EQU   X'80'               SCREEN REPAINT IS REQUIRED
$7SAVE   EQU   X'40'               SPF EDIT SAVED A MEMBER
$7TACK   EQU   X'20'               CUT APPEND (TACKON) REQUESTED
KLUCHG   EQU   X'10'               ZKLUSE NEEDS TO BE MAINTAINED
KEYLOK   EQU   X'08'               MEMBER REVPROF PRESENT IN ISPPROF
EDCOLS   EQU   X'04'               COLUMNS ON IN REVEDIT
$7BELL   EQU   X'02'               SOUND BELL REQUEST FLAG
$7SM     EQU   X'01'               SESSION MANAGER SETTING
DEVDATA  DS    2F
JFCB     DS    0F,CL176
FMTAREA  DS    F                   RECORD FORMATTING DYNAMIC AREA ADDR
SNAPDW   DS    XL(SNAPDL)          DCB ON WORD BOUNDARY
SNAPLW   DS    XL(SNAPLL)          SNAP PARAMETERS ON WORD BOUNDARY
SNAPR    DS    4F                  SNAPSHOT LIST
*        IHAARL PREFIX=ARL,DSECT=NO,DESCR=NO
ARL      DS    0F
ARLLEN   DS    H                   LENGTH OF THIS AREA - AT LEAST 36
ARLIDENT DS    CL2                 AREA ID - MUST BE 'AR'
ARLOPT1  DS    X                   OPTION BYTE - X'80'=AREA ABOVE LINE
ARLRSVD1 DS    XL7                 RESERVED - SHOULD BE ZERO
ARLRETRV DS    H                   DS # TO GET DATA FOR - 0 FOR ALL
ARLFIRST DS    H                   1ST DS # TO GET DATA FOR - 0/1=1ST
ARLAREA  DS    A                   ADDRESS OF ALLOC'N RETRIEVAL AREA
ARLPOOL  DS    HL1                 SUBPOOL - 0=>KEY 8-F, 230=>KEY 0-7
ARLRLEN  DS    FL3                 LENGTH OF ALLOC'N RETRIEVAL AREA
ARLRTRVD DS    H                   DS # FOR WHICH INFO WAS FETCHED
ARLCONC  DS    H                   DS # CONCATENATED IN DD
ARLRCODE DS    HL1                 REASON CODE
ARLRSVD2 DS    XL7                 RESERVED - SET BY RDJFCB
*        IHAARL MACRO CALL SUPPRESSED - EXPANDED ABOVE
RECALPTR DS    F     \____ONE____/ RECALLED BUFFER POINTER
RECALUSE DS    F     /    MVC    \ RECALL BUFFER FOR NEXT SAVE
HDCOLOR  DS    X                   REVHEAD SCREEN FILL COLOUR
HDNORGE  EQU   X'80'               DO NOT CREATE A SCROLL INPUT FIELD
AMCASZ   DS    X                   TRACKS PER CONTROLAREA
AMBLKSZ  DS    H                   VSAM BLOCK SIZE
HSEACTIV DS    F                   ACTIVE HEL STATUS ELEMENT ADDRESS
REPLY    DS    CL256               TERMINAL INPUT BUFFER
PERIODS  DS    CL256               TERMINAL OUTPUT DATA TRANSLATE TABLE
COMPON   DS    CL8                 COMMAND NAME TO GET TSO HELP FOR
REVHELP  DS    CL8                 FIRST ISPF HELP PANEL TO DISPLAY
BLDL     DS    CL80
$OTHUP   EQU   BLDL+79,1           REVEDIT->REVPDS FLAG BYTE
*                                  - SET BY REVEDIT
*                                  - INSPECTED BY REVPDS IF BLDL
*                                    CONTAINS DIRECTORY ENTRY OF
*                                    EDITED MEMBER
*                                  - IF NOT ZERO WHEN INSPECTED THEN
*                                    A PROCESS OTHER THAN THE EDIT
*                                    HAS UPDATED THE DATA SET
         ORG   BLDL+4
BLDLNAME DS    CL8                 MEMBER NAME
BLDLTTRP DS    XL3                 MEMBER START TTR
BLDLCNCT DS    XL1                 CONCATENATION NUMBER
BLDLLIBF DS    XL1                 LOCATION CODE
BLDLINDC DS    XL1                 INDICATOR BYTE (ALIAS, ETC.)
BLDLUSER EQU   *                   START OF USER DATA
BLDLTTRT DS    XL3                 TTR OF FIRST BLOCK OF PROGRAM TEXT
BLDLZERO DS    XL1                 ZERO BYTE
BLDLTTRN DS    XL3                 TTR OF NOTE LIST OR SCATTER TABLE
BLDLNL   DS    XL1                 NUMBER OF ENTRIES IN NOTE LIST
*  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
BLDLATR1 DS    XL1                 FIRST BYTE OF PROGRAM ATTRIBUTES
BLDLRENT EQU   X'80'               REENTERABLE
BLDLREUS EQU   X'40'               REUSABLE
BLDLOVLY EQU   X'20'               IN OVERLAY STRUCTURE
BLDLTEST EQU   X'10'               MODULE TO BE TESTED - TESTRAN
BLDLLOAD EQU   X'08'               ONLY LOADABLE
BLDLSCTR EQU   X'04'               SCATTER FORMAT
BLDLEXEC EQU   X'02'               EXECUTABLE
BLDL1BLK EQU   X'01'               ONE TEXT BLOCK WITH NO RLD ITEMS
*  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
BLDLATR2 DS    XL1                 SECOND BYTE OF PROGRAM ATTRIBUTES
BLDLFLVL EQU   X'80'               F LEVEL OF LINKAGE EDITOR REQUIRED
BLDLORG0 EQU   X'40'               FIRST TEXT BLOCK ORIGIN IS ZERO
BLDLEP0  EQU   X'20'               ENTRY POINT OFFSET IS ZERO
BLDLNRLD EQU   X'10'               MODULE CONTAINS NO RLD ITEMS
BLDLNREP EQU   X'08'               MODULE NOT REEDITABLE
BLDLTSTN EQU   X'04'               MODULE CONTAINS TESTRAN SYMBOL CARDS
BLDLLEF  EQU   X'02'               MODULE CREATED BY LINKAGE EDITOR F
BLDLREFR EQU   X'01'               REFRESHABLE MODULE
*  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
BLDLSTOR DS    FL3                 TOTAL CONTIGUOUS STORAGE SIZE
BLDLFTBL DS    FL2                 LENGTH OF FIRST BLOCK OF TEXT
BLDLEPA  DS    AL3                 ENTRY POINT ADDRESS
*  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
BLDLFTB1 DS    B                   BYTE 1 OF PDS2FTBO
BLDLPAGA EQU   X'40'               PAGE ALIGNMENT REQUIRED
BLDLSSI  EQU   X'20'               SSI INFORMATION PRESENT
BLDLPFLG EQU   X'10'               INFORMATION IN PDSAPF IS VALID
*  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
BLDLFTB2 DS    B                   BYTE 2 OF PDS2FTBO
*  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
BLDLFTB3 DS    B                   BYTE 3 OF PDS2FTBO
*  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
BLDLCEND EQU   *                   END OF BASIC SECTION
         ORG   BLDLUSER
BLDLVVMM DS    XL2                 VERSION, LEVEL
*  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
BLDLFLGS DS    X                   FLAGS
BLDLSCLM EQU   X'80'               SCLM-MANAGED
BLDLXSTA EQU   X'20'               EXTENDED STATISTICS
*  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
BLDLSECS DS    X                   TIME LAST UPDATED (SS)
BLDLCRED DS    PL4                 DATE CREATED
BLDLCHGD DS    PL4                 DATE LAST UPDATED
BLDLHHMM DS    XL2                 TIME LAST UPDATED (HHMM)
BLDLCCNT DS    H                   CURRENT SIZE
BLDLICNT DS    H                   INITIAL SIZE
BLDLMOD  DS    H                   MODS
BLDLUSID DS    CL7                 USERID
BLDLBLNK DS    CL3                 ONE OR THREE BLANKS
         ORG   BLDLBLNK+1
BLDLXCCT DS    FL4                 CURRENT SIZE
BLDLXICT DS    FL4                 INITIAL SIZE
BLDLXMOD DS    FL4                 MODS
         ORG
OFFEND   DS    F                   OFFSET OF DATA START TO RIGHT OF PG
HOLDSIZE DS    F      \__ONE_LM__/ SCREEN SIZE DEPENDENT GETMAIN SIZE
HOLDDIR  DS    A      /          \ ADDRESS OF DATA LINE HOLD DIRECTORY
DIRNUM   EQU   0                -- HOLD DIRECTORY ENTRY FIELD OFFSETS
DIRLEN   EQU   4               /
DIRREC   EQU   8              /
DIRNXT   EQU   12            /
DIRTTR   EQU   16           /
DIRSIZ   EQU   20          /
SCREENSZ DS    F                   TERMINAL SCREEN LOCATION COUNT
SCREENBF DS    A                   PRIMARY (TEXT) SCREEN BUFFER
SHADOWBF DS    A                   SHADOW (CHAR ATTR) SCREEN BUFFER
SCREENWK DS    A                   3270 DATA STREAM CONSTRUCTION AREA
STATUS8  DS    X                   STATUS FLAGS WHICH SEEM LIKE DATA
*                                  BUT ARE REALLY ONLY STATUS FLAGS
DIVFULL  EQU   X'80'               DIV HAS FAILED TO STORE A RECORD
$8_34    EQU   X'40'               VOLUME SUPPLIED FROM ZDLVOL
$8_S     EQU   X'20'               MEMBER SELECTED BY 'S'
$8ISPF   EQU   X'10'               ISPF SERVICES CAN BE USED
$8_A     EQU   X'08'               FILE SELECTED BY 'A'
$8ZIPU   EQU   X'04'               NOW SHOWING UNZIPPED DATA
$8ZIPD   EQU   X'02'               NOW SHOWING ZIP FILE CENTRAL DIR
$8ZIPF   EQU   X'01'               ZIP FILE CONTENTS CAN BE UNZIPPED
$8ZIP    EQU   $8ZIPD+$8ZIPF       SOMETHING ZIPPY IS GOING ON
$8ZIPA   EQU   $8ZIP+$8ZIPU        ALL ZIP STATUS FLAGS
STATUS9  DS    X                   GUESS WHAT
$9F80    EQU   X'80'               FIXING LRECL TO 80
$9_H     EQU   X'40'               MEMBER SELECTED BY 'H'
$9HIST   EQU   X'20'               CURRENTLY SHOWING PROGRAM HISTORY
$9PGMOBJ EQU   X'10'               UNCONCATENATED PDSE PROGRAM LIBRARY
$9ISPF   EQU   X'08'               ISPF IS DOING TERMINAL I/O
$9_M     EQU   X'04'               MEMBER SELECTED BY 'M'
$9BRVS   EQU   X'02'               BROWSE VIRTUAL STORAGE
$9XRBA   EQU   X'01'               USING VSAM EXTENDED ADDRESSABILITY
STATUS10 DS    X                   MORE OF THE SAME
$102LN   EQU   X'80'               ONLY WRITING FIRST TWO SCREEN LINES
$10LIKE  EQU   X'40'               NEW DATA SET LIKE CURRENT DATA SET
$10NEW   EQU   X'20'               NEW DATA SET WAS CREATED
$10CDR   EQU   X'10'               NEED CONTROL DISPLAY REFRESH
$10CDL   EQU   X'08'               NEED CONTROL DISPLAY LOCK => NO TGET
$10PSP   EQU   X'04'               PRIMARY-SIZED PROMPTING PANEL TPUT
$10ASP   EQU   X'02'               ALTERNATE-SIZED PROMPTING PANEL TPUT
$10CAP   EQU   X'01'               CAPS ON
STATUS11 DS    X                   I'VE GOT A LOVELY BUNCH OF STATUS FL
$11ED    EQU   X'80'               INITIAL COMMAND WAS REVED
*                                  (MAY NOT BE UNDER REVEDIT CONTROL)
$11OT    EQU   X'40'               INITIAL COMMAND WAS REVOUT
*                                  (MAY NOT BE UNDER REVOUT CONTROL)
$11ST    EQU   X'20'               GATHERING JOB STATUS INFORMATION
$11FS2   EQU   X'10'               UNDER PHASE 2 (REVIEW2) CONTROL
$11EDT   EQU   X'08'               UNDER EDIT (REVEDIT) CONTROL
$11OUT   EQU   X'04'               UNDER REVOUT CONTROL
$11LV    EQU   X'02'               UNDER REVLEV CONTROL
$11VIEW  EQU   X'01'               REVEDIT TO PERFORM VIEW PROCESSING
STATUS12 DS    X                   CAN'T GET ENOUGH
$12REP   EQU   X'80'               EDIT 'REPLACE' COMMAND ACTIVE (3.3)
$12CRE   EQU   X'40'               EDIT 'CREATE' COMMAND ACTIVE
$12ASM   EQU   X'20'               ASSEMBLER LISTING ENCOUNTERED
$12CMT   EQU   X'10'               ANY CONTINUATION MUST BE A COMMENT
$12PRT   EQU   X'08'               CONSIDER THIS FILE AS "PRINTOUT"
$12CNT   EQU   X'04'               ASSEMBLER CONTINUATION PENDING
$12QOT   EQU   X'02'               ASSEMBLER DATA INSIDE QUOTES
$12ENQ   EQU   X'01'               DO NOT PERFORM ALLOCATION FUNCTIONS
STATUS13 DS    X                   TOO MUCH IS BARELY ENOUGH
$13NSPR  EQU   X'80'               CANNOT BE A SUPERUSER
$13COMP  EQU   X'40'               COMPRESS IN PROGRESS
$13DESC  EQU   X'20'               MERGE SORT INTO DESCENDING ORDER
$13NTRM  EQU   X'10'               NEW TERMINAL WITH DIFFERENT SIZE
$13_L    EQU   X'08'               TSO COMMAND OUTPUT DISPLAY EG. LISTC
$13RFE   EQU   X'04'               REVIEW FRONT END ENVIRONMENT
$13TSO   EQU   X'02'               UNDER REVTSO CONTROL
$13MSEL  EQU   X'01'               MEMBER SELECTION MODE
STATUS14 DS    X                   HAVE A GUESS
$14STAE  EQU   X'80'               ESTAE ACTIVE
$14UP    EQU   X'40'               SCROLL UP FLAG FOR DIVESTAE (BRVS)
$14AS    EQU   X'20'               BROWSING ADDRESS SPACE STORAGE
$14SCH   EQU   X'10'               TELL ESTAE ABEND IS IN SEARCHIT
$14RCL   EQU   X'08'               ALSO RECALL LATEST PRIMARY INPUT
$14ALT   EQU   X'04'               ALTER ACCESS IS REQUIRED
$14BIG   EQU   X'02'               USING TTTR RATHER THAN TTR0
$14NUL   EQU   X'01'               NULLS ON
STATUS15 DS    X                   NO CLUE HERE
$15COPY  EQU   X'80'               OPTION 3.3 COPY (OR MOVE) ACTIVE
$15STOW  EQU   X'40'               OPTION 3.3 COPY USERDATA AS WELL
$15PDS   EQU   X'20'               OPTION 3.3 COPY SELECTED MEMBERS
$15STAR  EQU   X'10'               OPTION 3.3 COPY ALL MEMBERS
$15MOVE  EQU   X'08'               OPTION 3.3 MOVE ACTIVE
$153PT3  EQU   X'F8'               OPTION 3.3 RELATED FLAGS
$153PT5  EQU   X'04'               OPTION 3.5 IS ACTIVE
$15GEN   EQU   X'02'               SHOW MEMBER GENERATIONS
$15PN2   EQU   X'01'               PANEL 'REVPANL2' IS AVAILABLE
STATUS16 DS    X                   I GOT NOTHIN'
$16NAS   EQU   X'80'               AUTOSAVE OFF
$16RF    EQU   X'40'               'RFIND' PENDING
$16RC    EQU   X'20'               'RCHANGE' PENDING
$16RFC   EQU   $16RF+$16RC         'RFIND' AND 'RCHANGE' PENDING FLAGS
$16XX    EQU   X'10'               EXTENDED HEXADECIMAL DISPLAY MODE
$16XR    EQU   X'08'               HEX-ON-THE-RIGHT DISPLAY MODE
$16XL    EQU   X'04'               HEX-ON-THE-LEFT DISPLAY MODE
$16HEX   EQU   $16XX+$16XR+$16XL   ANY 3/4 HEX & 1/4 CHARACTER DISPLAY
$16XC    EQU   X'02'               REPLACE HEX WITH INVARIANT CHARACTER
$16RDW   EQU   X'01'               RDWS INCLUDED IN DISPLAY COLUMNS
STATUS17 DS    X                   IN THE GROOVE
$17PAT   EQU   X'80'               MEMBER NAME PATTERN AT PUTLINS+4
$17P34   EQU   X'40'               OPTION 3.4 MEMBER NAME SEARCH
$17SCH   EQU   X'20'               OPTION 3.4 SEARCH SET UP REQUEST
$17S34   EQU   X'10'               OPTION 3.4 DATA SEARCH
$17SCN   EQU   $17PAT+$17P34+$17SCH+$17S34    REVLEV SCAN FLAGS
$17NWT   EQU   X'08'               ISSUE TGET NOWAIT
$17PSW   EQU   X'04'               PARTIAL SCREEN WRITE
$17RTF   EQU   X'02'               OUTPUT RICH TEXT FORMAT
$17PIX   EQU   X'01'               MAPPING 1 PIXEL TO A CHARACTER CELL
DISPTYPE DS    X                   MODAL DISPLAY TYPE
*                                  1 - PROGRAM FUNCTION KEYS
*                                  2 - SESSION LIST
*                                  3 - JOB PACK AREA CDE CHAIN
*                                  4 - TASK CONTROL BLOCKS
ZSCREEN  DS    C                   ISPF LOGICAL SESSION NUMBER
DISPLNCT DS    H                   MODAL DISPLAY LINES ALREADY SHOWN
@ADDR    DS    F                   VIRTUAL STORAGE POINTER
REVIOWK@ DS    A                   ADDRESS OF START TIME I/O WORK AREA
RECURS@  DS    A                   ADDRESS OF RECURSION VECTOR
*                                  (ADD RCRSL+GDL TO THIS TO GET THE
*                                  ADDRESS OF THE RECALL STACK)
RECURS#  DS    F                   SESSION NUMBER OF THIS SESSION
* ---------------------------------------------------------------------
*
*         THE RECURSION VECTOR AND RECALL STACK ARE ACQUIRED
*         BY NON-RECURSIVE REVIEW SESSIONS AND SHARED WITH
*         SUBSEQUENT RECURSIVE ("PARALLEL") SESSIONS.
*
*         THESE AREAS ARE A SINGLE STORAGE ALLOCATION
*         POINTED TO BY RECURS@.
*
RCRSLIM  EQU   16                  PARALLEL SESSION COUNT LIMIT
RCRSIZE  EQU   16                  PARALLEL ENTRY LENGTH
*                                  16-BYTE ENTRIES HAVE THE FORMAT:
*                                   2-BYTE SCREEN NUMBER WHEN EXTANT
*                                   2-BYTE CURSOR LOCATION
*                                   4-BYTE @DATA ADDRESS
*                                   8-BYTE LOGICAL SCREEN NAME
RCRSL    EQU   RCRSLIM*RCRSIZE     RECURSION VECTOR STORAGE SIZE
*
*         THE RECURSION VECTOR IS FOLLOWED BY A DOUBLEWORD-ALIGNED
*         AREA USED FOR GLOBAL COMMUNICATION.  IT CONTAINS THE
*         CURRENT SESSION AND STAX OWNER SESSION @DATA AREA
*         ADDRESSES, AND THE CLIPBOARD SUBPOOL 38 CHAIN ORIGIN.
*                    __________
*        DS    0D   | <OFFSET> |   GLOBAL COMMUNICATION AREA
*        DS    F    | RCRSL    |   CURRENT REVIEW @DATA AREA ADDRESS
*        DS    F    | RCRSL+4  |   STAX OWNER @DATA AREA ADDRESS
*        DS    F    | RCRSL+8  |   CLIPBOARD SUBPOOL 38 FIRST @
*        DS    F    | RCRSL+12 |   CLIPBOARD SUBPOOL 38 LAST @
*        DS    F    | RCRSL+16 |   ACTIVE PARALLEL SESSION COUNT
*        DS    F    | RCRSL+20 |   CURRENTLY UNUSED
*        DS    0D   | RCRSL+24 |   GLOBAL COMMUNICATION AREA END
GDL      EQU   24   |__________|   GLOBAL DOUBLEWORD LENGTH
*
*         AFTER THE GLOBAL COMMUNICATION AREA IS THE RECALL STACK.
*         THE SIZE OF THE RECALL STACK IS THE STACK DEPTH TIMES
*         THE STACK ENTRY SIZE.  THE STACK ENTRY SIZE IS TEN
*         BYTES LONGER THAN THE STORED STRING SIZE LIMIT.
*
RECLDPTH EQU   20                  STACK DEPTH (CHAIN LENGTH)
RECALDLN EQU   90                  MAXIMUM LENGTH OF RECALL DATA
RECALSTK EQU   (RECLDPTH*(10+RECALDLN))
*        DS    F                   FORWARD POINTER
*        DS    F                   BACKWARD POINTER
*        DS    H                   LENGTH OF RECALL DATA
*        DS    CL90                DATA TO BE RECALLED
*
$GLBSIZE EQU   RCRSL+GDL+RECALSTK  GLOBAL COMMUNICATION AREA SIZE
*
* ---------------------------------------------------------------------
*
*  PFKSET LOGIC CURRENTLY RELIES ON PROFDATA LENGTH MATCHING PFKTABL
PROFDATA DS    CL64                NON-PFK PROFILE DATA
         ORG   PROFDATA
PROFSCRL DS    CL2                 SCROLL AMOUNT
NONDISP  DS    CL1                 NON-DISPLAY CHARACTER
PROFDISP DS    CL1                 DISPLAY APL OR TEXT
FMTCOLOR DS    XL1                 COLOUR FOR FORMATTED DATA
CHRCOLOR DS    XL1                 COLOUR FOR CHARACTER DATA
HEXCOLOR DS    XL1                 COLOUR FOR HEXADECIMAL DATA
         ORG
PFKTAB   DS    24CL64              PFK PROFILE DATA (24 PFKS)
         DS    CL1                 NULL BYTE FOR END OF PFKTAB
PFKTABL  EQU   64                  LENGTH OF EACH ENTRY
*  END OF PROFILE DATA             START OF RECALL STACK DATA
         PRINT NOGEN
         ORG   MYDSCB-44
         IECSDSL1 (1)              FORMAT-1 DSCB DATA STRUCTURE
         AIF   (&ENV390).DSCB1OK
         ORG   DS1NOBDB+1
DS1FLAG1 DS    XL1                 FLAG 1
DS1COMPR EQU   X'80'  1... ....    COMPRESSABLE EXTENDED FORMAT
*                                  (DS1STRP MUST ALSO BE SET)
DS1CPOIT EQU   X'40'  .1.. ....    CHECKPOINTED DATASET
DS1EXPBY EQU   X'20'  ..1. ....    VSE EXP DATE SPEC BY RET PERIOD
DS1RECAL EQU   X'10'  ...1 ....    DATA SET HAS BEEN RECALLED
DS1LARGE EQU   X'08'  .... 1...    >64K TRACK DATA SET COEXISTENCE
DS1ENCRP EQU   X'04'  .... .1..    ACCESS METHOD ENCRYPTED DATA SET
DS1EATTR EQU   X'03'  .... ..11    EXTENDED ATTRIBUTE SETTING
*        EQU   B'00'               '0' - EATTR HAS NOT BEEN SPECIFIED
*        EQU   B'01'               '1' - EATTR=NO HAS BEEN SPECIFIED
*        EQU   B'02'               '2' - EATTR=OPT HAS BEEN SPECIFIED
         ORG   DS1REFD+3
DS1SMSFG DS    XL1                 SYSTEM MANAGED STORAGE INDICATORS
DS1SMSDS EQU   X'80'  1... ....    SYSTEM MANAGED DATA SET
DS1SMSUC EQU   X'40'  .1.. ....    NO BCS ENTRY EXISTS FOR DATA SET
DS1REBLK EQU   X'20'  ..1. ....    SDB AND D.S. MAY BE REBLOCKED
DS1CRSDB EQU   X'10'  ...1 ....    DADSM CREATE ORIGINATED BLKSIZE
DS1PDSE  EQU   X'08'  .... 1...    PDSE DATA SET
DS1STRP  EQU   X'04'  .... .1..    EXTENDED FORMAT DATA SET
DS1PDSEX EQU   X'02'  .... ..1.    HFS DATA SET
DS1DSAE  EQU   X'01'  .... ...1    EXTENDED ATTRIBUTES EXIST
         ORG   DS1EXT1-1
DS1TTTHI DS    XL1                 HIGH ORDER BYTE OF DS1LSTAR
.DSCB1OK ANOP
         ORG   MYDSCB
         IECSDSL1 (4)              FORMAT-4 DSCB DATA STRUCTURE
         ORG   JFCB
         IEFJFCBN LIST=NO          JOB FILE CONTROL BLOCK
         ORG
         PRINT GEN
         DS    0D
REPLY2   DS    CL256               FOR DEBUG
@DATAEND DS    0D                  END OF DSECT
$DATAL   EQU   *-@DATA             SIZE OF DSECT
         SPACE
         SPACE
@HSESECT DSECT ,                   HEL STATUS ELEMENT
HSELINK  DS    A                   POINTER TO OLDER HEL STATUS ELEMENT
HSESIZE  DS    F                   SIZE OF THIS HSE
HSETTRZ  DS    F                   TTRZ OF INTERRUPTED BLOCK
HSEDBLK  DS    XL12                DEBLOCKS AFTER )I RECORD
HSEMEMN  DS    CL8                 MEMBER NAME TO BE INCLUDED
         DS    0D                  END OF DSECT
$HSESIZE EQU   *-@HSESECT          HEL STATUS ELEMENT LENGTH
         SPACE
         SPACE
@CUTWORK DSECT ,                   CUT AND RTF WORK DYNAMIC AREA
CUTSAVE  DS    18F                 REGISTER SAVE AREA
CUTWKID  DS    CL4                 AREA IDENTIFIER
CUTFLGS  DS    X                   LOCAL FLAGS
RTF1ST   EQU   X'80'               WRITING FIRST RTF DATA LINE
RTFIMMED EQU   X'40'               CARRIAGE CONTROL ONLY - NO TEXT
$CUTIOER EQU   X'20'               OUTPUT FILE I/O ERROR
$CUTCUT  EQU   X'10'               SOME DATA TRUNCATED
CUTRDTLS DS    D                   READ RECORD DATA LENGTH AND ADDRESS
RTFDTLS1 DS    D                   READ RECORD DATA LENGTH AND ADDRESS
RTFDTLS2 DS    D                   READ RECORD DATA LENGTH AND ADDRESS
CUTNOTE1 DS    F                   NOTE LIST TTR 1
CUTNOTE2 DS    F                   NOTE LIST TTR 2
CUTRETSV DS    A                   RETURN ADDRESS SAVE AREA
RTFRETSV DS    A                   RETURN ADDRESS SAVE AREA
RTFR4SAV DS    A                   DCB ADDRESS REGISTER SAVE AREA
RTFR5SAV DS    A                   LOCAL BASE REGISTER SAVE AREA
CUTBUFSZ DS    F      \__ONE_LM__/ WRITE BUFFER SIZE
CUTBUFAD DS    A      /          \ WRITE BUFFER ADDRESS
CUTDW    DS    XL(CUTDL)           DCB ON WORD BOUNDARY
CUTDECB  DS    XL(DYNDECBL)
RTFLPCTR DS    F                   RTF LOOP COUNTER
CUTBFLIM DS    A                   ADDRESS PAST USABLE BUFFER LIMIT
CUTRECAD DS    A      \__ONE_LM__/ RECORD ADDRESS RETURNED BY PUT
CUTLRECL DS    F      /          \ LENGTH OF RECORD TO WRITE
CUTACCUM DS    F                   RECORD COUNT ACCUMULATOR
CUTBLKSI DS    F                   MAXIMUM BLOCK SIZE
RTFWRK   DS    F                   WORK AREA
RTFPRVAT DS    X                   PREVIOUS ATTRIBUTES
RTFATRSV DS    X                   ATTRIBUTES SAVE AREA
RTFCCSAV DS    X                   CARRIAGE CONTROL SAVE AREA
         DS    0D
CUTSHDW  DS    CL256               OUTPUT RECORD SHADOW AREA
         DS    0D                  END OF DSECT
$CUTSIZE EQU   *-@CUTWORK          HEL STATUS ELEMENT LENGTH
         SPACE
         SPACE
@FMTAREA DSECT ,                   RECORD FORMATTING DYNAMIC AREA
         DS    18F                 FORMATTING REGISTER SAVE AREA
FMTNAME  DS    CL8                 NAME OF CURRENT FORMAT
FMTBLKFM EQU   *,8                 FREEMAIN VALUES FOR READ BUFFER
FMTBLKSZ DS    F                   SIZE OF READ BUFFER
FMTBUFR  DS    F                   ADDRESS OF READ BUFFER
FMTSIZE  DS    F                   SUBPOOL AND SIZE OF THIS AREA
FMTRECAD DS    F                   ADDRESS OF NEXT LOGICAL RECORD
FMTBFEND DS    F                   ADDRESS OF END OF READ BUFFER
FMTFELAD DS    F                   ADDRESS OF NEXT SYMBOL SLOT
FMTELAST DS    F                   ADDRESS OF LAST ALLOWABLE FEL
FMTMLHLD DS    F                   MULTIPLIER HOLDING AREA
FMTORGCT DS    F                   BYTES TO GO BEFORE ORG IS CANCELLED
FMTDCB   DS    0F,XL(PDSDCBL)
FMTDECB  DS    0F,XL(DYNDECBL)
LEFTFEL  DS    F                   ADDRESS OF LEFT-MOST VISIBLE FEL
LEFTFELO DS    F                   OFFSET OF LEFT-MOST VISIBLE FEL
RITEFEL  DS    F                   ADDRESS OF RIGHT-MOST VISIBLE FEL
RITEFELO DS    F                   OFFSET OF RIGHT-MOST VISIBLE FEL
FREVPOS  DS    F                   REVPOS SAVE AREA
FSYNADMS DS    CL78                I/O ERROR MESSAGE
FMTFLAGS DS    X
FORG     EQU   X'80'               CURRENTLY IN ORG MODE - IGNORE DC/DS
FSYNADSW EQU   X'40'               REVFMTS I/O ERROR FLAG
FFSW     EQU   X'20'               FORMAT FIND START OR END FLAG
*        EQU   X'10'               SPARE
*        EQU   X'08'               SPARE
*        EQU   X'04'               SPARE
*        EQU   X'02'               SPARE
TTWRAP   EQU   X'01'               TRACE TABLE HAS WRAPPED AROUND
         DS    X                   SPARE
         DS    0D                  FORCE ALIGNMENT FOR FORMAT ELEMENTS
FELSYMNM EQU   0                   ENTRY OFFSET FOR SYMBOL NAME
FELSYMNL EQU   8                   MAXIMUM SYMBOL NAME LENGTH
FELSYMFG EQU   8                   ENTRY OFFSET FOR SYMBOL TYPE FLAGS
FELHEX   EQU   X'80'               ALWAYS SHOW IN HEX
FELBIN   EQU   X'40'               INTERPRET BINARY
FELDEC   EQU   X'20'               INTERPRET PACKED SIGN
FELBIT   EQU   X'10'               INTERPRET BITS
FELUNS   EQU   X'08'               BINARY IS UNSIGNED
FELDB2   EQU   X'02'               EXTRA FORMATTING FOR DB2 FIELD
FELDS1   EQU   X'01'               EXTRA FORMATTING FOR DSCB-1 FIELD
FELSYMTY EQU   9                   ENTRY OFFSET FOR SYMBOL TYPE
FELSYMLN EQU   10                  ENTRY OFFSET FOR SYMBOL LENGTH
FELDSPLN EQU   12                  ENTRY OFFSET FOR DISPLAY LENGTH
FELDSPOF EQU   14                  ENTRY OFFSET FOR SCREEN OFFSET
FELSIZE  EQU   16                  LENGTH OF FORMATTING ELEMENT
FMTFELS  DS    0F                  REVIEW FORMAT SYMBOL SLOTS
         ORG   FMTFELS+BVSFELEN    ROOM FOR BRVS FELS
TRCURSOR DS    A                   CURRENT TRACE TABLE ENTRY ADDRESS
TRCLIMIT DS    A                   LIMIT FOR "NEXT" (REALLY "RIGHT")
TRCBNDRY DS    A                   ADDRESS PAST END OF TRACE TABLE
TRCTABLE DS    256A                TRACE TABLE
TRCTBEND EQU   *                   TRACE TABLE END
$FMTLEN  EQU   8192                LENGTH OF FORMATTING DYNAMIC AREA
@FMTEND  EQU   @FMTAREA+$FMTLEN    END OF FORMATTING DYNAMIC AREA
         SPACE
         SPACE
@BITWORK DSECT ,                   PCX/BMP DECODE WORKING STORAGE
BITSAVE1 DS    18F                 REGISTER SAVE AREA
BITWKLEN DS    F                   AREA SIZE
BITLDCSR DS    F                   PIXEL LOAD CURSOR
BITSAVE2 DS    (18-4)F             REGISTER SAVE AREA ~ GIFSAVE2
BITSECSV DS    4F                  SECONDARY SAVE AREA
BITEOSCN DS    F                   END OF DECODED PCX LINE ADDRESS
BITLN2GO DS    F                   SCANLINES LEFT TO READ FROM FILE
BITSAVER DS    F                   RETURN ADDRESS SAVE AREA
BITSAVR2 DS    F                   RETURN ADDRESS SAVE AREA
BITBYTLN DS    F                   BYTES TO READ PER SCANLINE
BITRUNLN DS    H                   DATA BYTE RUN-LENGTH
BITCTBSZ DS    H                   BMP COLOUR TABLE SIZE
         DS    0D
BITHDRWS DS    CL128               PCX/BMP HEADER HOLD AREA
         ORG   BITHDRWS
         DS    H                   FULLWORD ALIGN THE 4-BYTE FIELDS
BMPHDRWS DS    XL54                STANDARD BMP AND INFO HEADERS
BMPRMASK DS    XL4                 16-BIT COLOUR MASK FOR RED
BMPGMASK DS    XL4                 16-BIT COLOUR MASK FOR GREEN
BMPBMASK DS    XL4                 16-BIT COLOUR MASK FOR BLUE
RLELDCSR DS    A                   RLE LOAD CURSOR
BMPRPAIR DS    XL4                 RLE COUNT AND VALUE BYTES AND DELTA
BMPRLE   DS    X                   RLE FLAGS FROM BICMPRSN
*BI_RLE8 EQU   1                   RUN-LENGTH ENCODING FOR 8 BITS/PIXEL
*BI_RLE4 EQU   2                   RUN-LENGTH ENCODING FOR 4 BITS/PIXEL
$RLEABS  EQU   X'10'               IN RLE ABSOLUTE MODE
$RLE02   EQU   X'20'               JUMP-TO-DELTA ACTIVE
         ORG
PCXPAL16 DS    0XL48               16-COLOUR RGB PALETTE HOLD AREA
PCXPALET DS    XL768               256-COLOUR RGB PALETTE HOLD AREA
PCXSCNLN DS    0D                  SCANLINE EXPANSION AREA
@PCXWKLN EQU   *-@BITWORK          SIZE OF FIXED DYNAMIC AREA FOR PCX
         SPACE
         ORG   PCXPALET-2
BMPENTLN DS    H                   COLOUR TABLE ENTRY LENGTH
BMPCLRTB DS    XL1024              ROOM FOR 256 4-BYTE BGR ENTRIES
BMPSCNLN DS    0D                  SCANLINE EXPANSION AREA
$BMPWKLN EQU   *-@BITWORK          SIZE OF FIXED DYNAMIC AREA FOR BMP
         SPACE
         SPACE
@GIFWORK DSECT ,                   GIF DECODE WORKING STORAGE
GIFSAVE1 DS    18F                 REGISTER SAVE AREA
GIFWKLEN DS    F                   AREA SIZE - OFFSET MATCHES BITWKLEN
GCOLRTB@ DS    A                   ACTIVE GIF COLOUR TABLE ADDRESS
GIFSAVE2 DS    18F                 REGISTER SAVE AREA
GIFSAVE3 DS    18F                 REGISTER SAVE AREA
GIFARYSZ DS    F      \__ONE_LM__/ SIZE OF GIF LZW ARRAY
GIFARYAD DS    A      /          \ ADDRESS OF GIF LZW ARRAY
GIFSTRLN DS    F      \__ONE_LM__/ CURRENT LENGTH OF STRING
GIFSTRAD DS    A      /          \ ADDRESS OF STRING BUFFER
GIFRECAD DS    A      \__ONE_LM__/ GIF RECORD DATA CURSOR
GIFRECLN DS    A      /          \ GIF RECORD DATA LENGTH
GIFRECDE DS    A                   GIF RECORD DIRECTORY ENTRY ADDRESS
GIFBASE3 DS    F                   SECONDARY SAVE AREA
GIFPASS@ DS    A                   INTERLACE PASS TABLE ENTRY ADDRESS
GIF_ANIM DS    XL4                 GRAPHIC CONTROL EXTENSION HEADER
GIFIMGNO DS    F                   IMAGE NUMBER WITHIN A GIF
GIFWAIT  DS    F                   IMAGE DELAY TIME
WKGIFHDR DS    XL(GIFFIXLN)        SAVED COPY OF GIF HEADER INCL. LSD
GIFBLKCD DS    X                   BLOCK CODE HOLD AREA
WKGIH    DS    XL(GIHLEN)          SAVED COPY OF GIF IMAGE HEADER
GIF_X_@  DS    H                   CURRENT OFFSET FROM LEFT EDGE
GIF_Y_@  DS    H                   CURRENT OFFSET FROM TOP EDGE
GIF_X_#  DS    H                   PIXELS-TO-GO FOR THIS SCANLINE
GIF_Y_#  DS    H                   SCANLINES-TO-GO FOR THIS IMAGE
GIF_Y_L  DS    H                   BELOW BOTTOM EDGE Y-COORDINATE
GLITSIZE DS    H                   LITERAL CODE SIZE IN BITS
GDCODESZ DS    H                   CURRENT DECODE SIZE IN BITS (12 MAX)
GCLRCODE DS    H                   CLEAR (THE DICTIONARY) CODE
GENDCODE DS    H                   END (OF COMPRESSED DATA) CODE
GINCCODE DS    H                   INCREMENT (DECODE BIT SIZE) CODE
GNXTCODE DS    H                   NEXT VACANT CODE
GNXTADDR DS    A                   NEXT VACANT CODE ENTRY ADDRESS
GIFCRNT  DS    H                   CURRENT GIF LZW CODE
GIFOLD   DS    H                   PREVIOUS GIF LZW CODE
GIFNEW   DS    H                   NEWEST GIF LZW CODE
GIFBITS  DS    H                   NUMBER OF BITS LEFT IN CURRENT BYTE
GCURIDX  DS    X                   CURRENT COLOUR INDEX
GIF1STCD DS    X                   FIRST CODE FLAG
GIF_F1   DS    X                   FLAG BYTE
$G1EOF   EQU   X'80'               END OF GIF FILE REACHED
$G1PIX   EQU   X'40'               AT LEAST ONE PIXEL HAS BEEN SET
$G1BAK   EQU   X'20'               WINDOW SET TO BACKGROUND COLOUR
         DS    0D
GIFGCT   DS    256XL3              GLOBAL COLOUR TABLE
GIFLCT   DS    256XL3              LOCAL COLOUR TABLE
GIFDATAL DS    X                   GIF DATA BLOCK LENGTH
GIFDATA  DS    XL255               GIF DATA BLOCK
GIFDATA@ DS    A                   GIF DATA BLOCK CURSOR
GIFDATA# DS    F                   GIF DATA BLOCK BYTES REMAINING
         DS    0D
$GIFWKLN EQU   *-@GIFWORK          SIZE OF FIXED DYNAMIC AREA FOR GIF
         SPACE
         SPACE
@ZIPWORK DSECT ,                   ZIP DIRECTORY PROCESSOR WORK AREA
         DS    18F                 REGISTER SAVE AREA
@ZIPWKID DS    CL8                 '@ZIPWORK'
ZIPBFLEN DS    F      \__ONE_LM__/ ZIP TRAILER ASSEMBLEY BUFFER LENGTH
ZIPBFADR DS    A      /          \ ZIP TRAILER ASSEMBLEY BUFFER ADDRESS
ZIPBFHWM DS    A                   ZIP TRAILER END POINTER
ZIPBFEND DS    A                   ZIP TRAILER ASSEMBLEY BUFFER END
ZIPCFD64 DS    0FL8                RBA OF CFD (64-BIT)
ZIPCFDOH DS    F                   RBA OF CFD (HIGH WORD)
ZIPCFDOF DS    F                   RBA OF CFD (LOW WORD)
ZIPCFDSZ DS    F                   SIZE OF CFD
ZIPLSTSZ DS    F                   SIZE OF LAST PARTS AFTER CFD
ZIPEOCAD DS    A                   ADDRESS OF EOC RECORD
ZIPKSAVE DS    XL8                 KOUNT VALUE ON VOLUME SWITCH
ZIP$SAVE DS    X                   $CONCAT VALUE FROM PREVIOUS GET
         DS    0D                  END OF DSECT
$ZIPWKLN EQU   *-@ZIPWORK
         SPACE
         SPACE
@UNZWORK DSECT ,                   UNZIP FRONT-END WORK AREA
         DS    18F                 REGISTER SAVE AREA
UNZDVTYP DS    2F                  DEVTYPE RESULTS
UZFLDMSV DS    18F                 SAVE AREA - DATA MANIPULATION
UZFLRZSV DS    18F                 SAVE AREA - READ ZIP ARCHIVE
COMPACUM DS    D                   TOTAL COMPRESSED BYTE COUNT
ARAYDTLS DS    0D                  SHRINK ARRAY DETAILS
ARAYSIZE DS    F      \__ONE_LM__/ SIZE OF SHRINK ARRAY
ARAYADDR DS    A      /          \ ADDRESS OF SHRINK ARRAY
UNZWBFLN DS    F      \__ONE_LM__/ LENGTH OF UNZIP OUTPUT BUFFER
UNZWBFAD DS    A      /          \ ADDRESS OF UNZIP OUTPUT BUFFER
UNZREC@# DS    D                   UNZIP DATA BUFFER ADDRESS AND SIZE
ZIPREC@# DS    D                   UNUSED BUFFER ADDRESS AND SIZE
UZRECCS  DS    A      \LM_STM_MVC/ UNZIP RECORD DATA AREA CURSOR
UZRECSZ  DS    A      /          \ UNZIP RECORD DATA AREA REMAINING
OLDSTRLN DS    F                   UNPROCESSED STRING DATA LENGTH
STRINGLN DS    F      \__ONE_LM__/ CURRENT LENGTH OF STRING
STRINGAD DS    A      /          \ ADDRESS OF STRING BUFFER
         SPACE
LZWDCDSZ DS    F                   CURRENT DECODE SIZE IN BITS (13 MAX)
LZWBITS  DS    F                   NUMBER OF BITS LEFT IN CURRENT BYTE
ZIPOFSET DS    F                   CURRENT ZIP ARCHIVE RBA
FULLSIZE DS    F                   UNCOMPRESSED DATA SIZE
PACKSIZE DS    F                   COMPRESSED DATA SIZE
FULLUP2# DS    F                   ARRAY SEARCH START CODE
FULLUP2@ DS    A                   ARRAY SEARCH START ADDRESS
UNFL_CRC DS    F                   CRC-32 ACCUMULATOR
BASE3    DS    3F                  REVUNZIP BASE REGISTER SAVE AREA
UZFCOUNT DS    F                   PRE-UNZIP VALUE OF COUNT
UZFKOUNT DS    FL8                 PRE-UNZIP VALUE OF KOUNT64
UZFMAXPT DS    F                   PRE-UNZIP VALUE OF MAXPOINT
         SPACE
UZIOABND DS    F                   DCB ABEND DETAILS
UZFLDCB  DS    XL($UNZDCBL)        UNZIP OUTPUT DCB AREA
         SPACE
UZFLFLGS DS    X                   FLAGS
D_FLATE  EQU   X'80'               COMPRESSED USING DEFLATE
         SPACE
UZFLAGS  DS    X                   FLAGS
$UZEOF   EQU   X'80'               END-OF-FILE ENCOUNTERED
$UZCC    EQU   X'40'               CONTROL CODE FOUND IN DATA
$UZEOD   EQU   X'20'               END OF ZIPPED DATA REACHED
$UZORF   EQU   X'10'               UNZIP CODE SPECIFIED AN ORPHAN
         SPACE
UZFL_1ST DS    X                   FIRST TIME THROUGH
UZFL_256 DS    X                   CODE 256 JUST READ
CRNTBYTE DS    X                   CURRENT UNZIP INPUT BYTE
CRNTCHAR DS    X                   CURRENT DATA CODE POINT
LZWCRNT  DS    H
LZWOLD   DS    H
LZWNEW   DS    H
         SPACE
LCLHDR   DS    XL(ZLFHFXLN)        ZIP LOCAL FILE HEADER
         DS    XL256               ROOM FOR FILE NAME
         SPACE
*
*    START OF VARIABLES FOR INFLATE
*
SLIDEWIN EQU   STRINGAD            ADDRESS OF 32KB SLIDE WINDOW
WP       EQU   STRINGLN            SLIDE WINDOW POSITION
BB       DS    F                   BIT BUFFER
BK       DS    F                   BITS IN BIT BUFFER
HUFTS    DS    F                   MEMORY USAGE
         SPACE
C_STACK@ DS    A                   C_STACK SAVE AREA SAVE AREA
C_STACK  DS    0D                  INFLATE WORKING STORAGE
         SPACE
         ORG   @UNZWORK+8192
         SPACE
         DC    0D'0'               END OF DSECT
         SPACE
$UNZWKLN EQU   *-@UNZWORK          SIZE OF DSECT
         SPACE
************************************************************
*                                                          *
*         ADDITIONAL DSECTS USED BY INFLATE                *
*                                                          *
************************************************************
         SPACE
*
*    DYNAMIC STORAGE STRUCTURES USED BY INFLATE ROUTINES
*
         SPACE
@@AUTO@1 DSECT
         DS    XL96                    INFLATE
         ORG   @@AUTO@1
#GPR_SA_1 DS   18F
#NAB_1   DS    F
         ORG   @@AUTO@1+80
@144E@43 DS    F
         ORG   @@AUTO@1+84
@145R@44 DS    F
         ORG   @@AUTO@1+88
@143H@45 DS    XL4
         ORG
         SPACE
@@AUTO@2 DSECT
         DS    XL96                    INFLT@BL
         ORG   @@AUTO@2
#GPR_SA_2 DS   18F
#NAB_2   DS    F
         ORG   @@AUTO@2+80
@140T@39 DS    XL4
         ORG   @@AUTO@2+84
@138B@40 DS    XL4
         ORG   @@AUTO@2+88
@139K@41 DS    XL4
         ORG   @@AUTO@2+92
#SR_PARM_2 DS  XL4
         ORG
         SPACE
@@AUTO@3 DSECT
         DS    XL1424                  INFLT@DY
         ORG   @@AUTO@3
#GPR_SA_3 DS   18F
#NAB_3   DS    F
         ORG   @@AUTO@3+104
@124I@26 DS    F
         ORG   @@AUTO@3+108
@119J@27 DS    XL4
         ORG   @@AUTO@3+112
@127L@28 DS    XL4
         ORG   @@AUTO@3+116
@126M@29 DS    XL4
         ORG   @@AUTO@3+120
@125N@30 DS    XL4
         ORG   @@AUTO@3+124
@123TL@31 DS   A
         ORG   @@AUTO@3+128
@128TD@32 DS   A
         ORG   @@AUTO@3+132
@122BL@33 DS   F
         ORG   @@AUTO@3+136
@134BD@34 DS   F
         ORG   @@AUTO@3+140
@118NB   DS    XL4
         ORG   @@AUTO@3+144
@116NL   DS    XL4
         ORG   @@AUTO@3+148
@117ND   DS    XL4
         ORG   @@AUTO@3+152
@120LL   DS    XL1264
         ORG   @@AUTO@3+1416
@114B@35 DS    XL4
         ORG   @@AUTO@3+1420
@115K@36 DS    XL4
         ORG
         SPACE
@@AUTO@4 DSECT
         DS    XL1280                  INFLT@FI
         ORG   @@AUTO@4
#GPR_SA_4 DS   18F
#NAB_4   DS    F
         ORG   @@AUTO@4+104
@105I@19 DS    F
         ORG   @@AUTO@4+108
@109TL@20 DS   A
         ORG   @@AUTO@4+112
@111TD@21 DS   A
         ORG   @@AUTO@4+116
@108BL@22 DS   F
         ORG   @@AUTO@4+120
@110BD@23 DS   F
         ORG   @@AUTO@4+128
@106L@24 DS    XL1152
         ORG
         SPACE
@@AUTO@5 DSECT
         DS    XL96                    INFLT@ST
         ORG   @@AUTO@5
#GPR_SA_5 DS   18F
#NAB_5   DS    F
         ORG   @@AUTO@5+80
@102N@14 DS    XL4
         ORG   @@AUTO@5+84
@101W@15 DS    XL4
         ORG   @@AUTO@5+88
@99B@16  DS    XL4
         ORG   @@AUTO@5+92
@100K@17 DS    XL4
         ORG
         SPACE
@@AUTO@6 DSECT
         DS    XL144                   INFLT@CO
         ORG   @@AUTO@6
#GPR_SA_6 DS   18F
#NAB_6   DS    F
         ORG   @@AUTO@6+88
@86E@6   DS    XL4
         ORG   @@AUTO@6+92
@92N@7   DS    XL4
         ORG   @@AUTO@6+96
@93D@8   DS    XL4
         ORG   @@AUTO@6+100
@80W@9   DS    XL4
         ORG   @@AUTO@6+104
@84T@10  DS    A
         ORG   @@AUTO@6+108
@81ML    DS    XL4
         ORG   @@AUTO@6+112
@82MD    DS    XL4
         ORG   @@AUTO@6+116
@77B@11  DS    XL4
         ORG   @@AUTO@6+120
@78K@12  DS    XL4
         ORG   @@AUTO@6+132
#SR_PARM_6 DS  XL4
         ORG
         SPACE
@@AUTO@7 DSECT
         DS    XL96                    HUFT@FRE
         ORG   @@AUTO@7
#GPR_SA_7 DS   18F
#NAB_7   DS    F
         ORG   @@AUTO@7+80
@67P@3   DS    A
         ORG   @@AUTO@7+84
@69Q@4   DS    A
         ORG   @@AUTO@7+88
#SR_PARM_7 DS  XL4
         ORG
         SPACE
@@AUTO@8 DSECT
         DS    XL1568                  HUFT@BUI
         ORG   @@AUTO@8
#GPR_SA_8 DS   18F
#NAB_8   DS    F
         ORG   @@AUTO@8+88
@51A     DS    XL4
         ORG   @@AUTO@8+96
@27C     DS    XL68
         ORG   @@AUTO@8+164
@53F     DS    XL4
         ORG   @@AUTO@8+168
@38G     DS    F
         ORG   @@AUTO@8+172
@45H     DS    F
         ORG   @@AUTO@8+176
@31I     DS    XL4
         ORG   @@AUTO@8+180
@36J     DS    XL4
         ORG   @@AUTO@8+184
@37K     DS    F
         ORG   @@AUTO@8+188
@35L     DS    F
         ORG   @@AUTO@8+192
@30P     DS    A
         ORG   @@AUTO@8+196
@49Q     DS    A
         ORG   @@AUTO@8+200
@57R     DS    XL8
         ORG   @@AUTO@8+208
@47U     DS    XL64
         ORG   @@AUTO@8+272
@43V     DS    XL1152
         ORG   @@AUTO@8+1424
@46W     DS    F
         ORG   @@AUTO@8+1432
@40X     DS    XL68
         ORG   @@AUTO@8+1500
@42XP    DS    A
         ORG   @@AUTO@8+1504
@39Y     DS    F
         ORG   @@AUTO@8+1508
@50Z     DS    XL4
         ORG   @@AUTO@8+1552
#SR_PARM_8 DS  XL4
         ORG
         SPACE
@@AUTO@9 DSECT
         DS    XL216                   OUTLINECONC
         ORG   @@AUTO@9
#GPR_SA_9 DS   18F
         DS    F
         ORG
         SPACE
*
*    PARAMETER STRUCTURES PASSED TO INFLATE ROUTINES
*
         SPACE
@@PARMD@2 DSECT ,                      INFLT@BL
@136E    DS    F
         SPACE
@@PARMD@6 DSECT ,                      INFLT@CO
@72TL    DS    F
@73TD    DS    F
@74BL    DS    F
@75BD    DS    F
         SPACE
@@PARMD@7 DSECT ,                      HUFT@FRE
@65T     DS    F
         SPACE
@@PARMD@8 DSECT ,                      HUFT@BUI
@19B     DS    F
@20N     DS    F
@21S     DS    F
@22D     DS    F
@23E     DS    F
@24T     DS    F
@25M     DS    F
         SPACE
*    END OF INTERNAL INFLATE DSECTS
         SPACE
*
*    GIF CODE ARRAY ENTRY STRUCTURE - ARRAY HAS 4096 ENTRIES
*
GIFENTRY DSECT
GIFCHAR  DS    X                   CHARACTER APPENDED TO PARENT
GIFSPARE DS    X                   SPARE BYTE
GIFCODE  DS    H                   CODE OF THIS ENTRY
GIFPARNT DS    H                   PARENT CODE
GIFGEN#  DS    H                   CODE'S STRING LENGTH CODE
GIFENTND DS    0F                  END OF ENTRY
GIFEL    EQU   *-GIFENTRY          ENTRY LENGTH
         SPACE
*
*    LZW CODE ARRAY ENTRY STRUCTURE - ARRAY HAS 8192 ENTRIES
*
LZWENTRY DSECT
LZWNEXT  DS    A                   ADDRESS OF NEXT SIBLING
LZWPREV  DS    A                   ADDRESS OF PREVIOUS SIBLING
LZWCODE  DS    H                   CODE OF THIS ENTRY
LZWPARNT DS    H                   PARENT CODE
LZWCHAR  DS    X                   CHARACTER APPENDED TO PARENT
LZWSPARE DS    X                   SPARE BYTE
LZWDEPTH DS    H                   CODE'S STRING LENGTH CODE
LZWCHILD DS    A                   ADDRESS OF CHILD
LZWPURGE EQU   X'80'               ENTRY IS TO BE PURGED
LZWENTND DS    0F                  END OF ENTRY
LZWEL    EQU   *-LZWENTRY          ENTRY LENGTH
         SPACE
         TITLE '  Z I P   F I L E   D I R E C T O R Y   E N T R I E S '
*RECTYP OSFS FULLSIZE   PACKSIZE   CMP METH TX MODIFIED       FILE-NAME
*F   80 HPFS 200000000  100000000  50% RDUC A- YY-MM-DD HH:MM FILE.DIZ
RZDE     DSECT ,                   REVIEW INTERNAL ZIP DIRECTORY ENTRY
RZDEMETA DS    XL12                METADATA NEEDED FOR UNZIP
RZDEOF64 DS    0XL8                RELATIVE OFFSET OF LOCAL HEADER
RZDEOFHI DS    XL4                 RELATIVE OFFSET OF LOCAL HEADER - HI
RZDEOFST DS    XL4                 RELATIVE OFFSET OF LOCAL HEADER - LO
RZDERTYP DS    CL6                 RECORD FORMAT AND LENGTH
RZDEOSFS DS    CL4                 OPERATING SYSTEM FILE SYSTEM
RZDESIZE DS    PL6                 UNCOMPRESSED FILE BYTE COUNT
RZDEPACK DS    PL6                 COMPRESSED FILE BYTE COUNT
RZDERDUC DS    CL4                 COMPRESSION REDUCTION PERCENTAGE
RZDEMETH DS    CL4    _________    COMPRESSION METHOD
RZDETYPE DS    C     /  UPPER  \   FILE TYPE
*        EQU   C'E' /  CASE IF  \  EBCDIC TEXT
*        EQU   C'A' \ ENCRYPTED /  ASCII TEXT
*        EQU   C'B'  \_________/   BINARY DATA
RZDEXTRA DS    C                   EXTRA FIELD STATUS
*        EQU   C'-'                NO EXTRA FIELDS
*        EQU   C'X' (LOWER CASE)   CENTRAL FILE HEADER HAS EXTRA FIELD
*        EQU   C'L' (LOWER CASE)   LOCAL FILE HDR HAS DATA DESCRIPTOR
*        EQU   C'X' (UPPER CASE)   BOTH OF THE ABOVE
RZDEDATE DS    CL8                 DATE FILE LAST MODIFIED
RZDETPAD DS    CL1                 C' '
RZDEHOUR DS    CL2                 HOUR FILE LAST MODIFIED
RZDETSEP DS    CL1                 C':'
RZDEMINS DS    CL2                 MINUTE FILE LAST MODIFIED
RZDEFIXL EQU   *-RZDE              LENGTH OF FIXED PART OF ENTRY
RZDEFNM  EQU   *                   FILE NAME
         SPACE
         TITLE '  Z I P   A R C H I V E   H E A D E R S  '
*  THE "META" FIELDS BELOW ARE JUST CONVENIENT LABELS TO COLLECTIVELY
*  ADDRESS THE THREE CONTIGUOUS DATA ITEMS WHICH MAY NOT BE ACCURATE
*  IN THE LOCAL FILE HEADERS.  THIS OCCURS WHEN THE FILE SYSTEM ON
*  WHICH THE ZIP ARCHIVE IS CREATED DOES NOT SUPPORT SEEK.  WHEN THIS
*  HAPPENS FLAG 'ZDATADSC' IS SET IN 'ZCFHFLG1' AND 'ZLFHFLG1', AND
*  THE DATA DESCRIPTOR STRUCTURE IS WRITTEN AFTER THE COMPRESSED DATA.
         SPACE
ZLFH     DSECT ,                   ZIP LOCAL FILE HEADER RECORD
ZLFHID   DC    XL4'504B0304'       LOCAL FILE HEADER SIGNATURE
ZLFHVERX DS    XL2                 VERSION NEEDED FOR EXTRACTION
ZLFHFLG1 DS    XL1                 GENERAL PURPOSE BIT FLAGS
ZLFHFLG2 DS    XL1                 GENERAL PURPOSE BIT FLAGS
ZLFHMETH DS    XL2                 COMPRESSION METHOD
ZLFHTIME DS    XL2                 TIME FILE LAST MODIFIED
ZLFHDATE DS    XL2                 DATE FILE LAST MODIFIED
ZLFHMETA EQU   *,12                METADATA NEEDED FOR UNZIP
ZLFHCRC  DS    XL4                 CRC-32 OF UNCOMPRESSED DATA
ZLFHSZCM DS    XL4                 COMPRESSED SIZE
ZLFHSZUN DS    XL4                 UNCOMPRESSED SIZE
ZLFHNMLN DS    XL2                 FILE NAME LENGTH
ZLFHXFLN DS    XL2                 EXTRA FIELD LENGTH
ZLFHFXLN EQU   *-ZLFH              LENGTH OF FIXED PART OF HEADER
ZLFHNAME DS    0C                  VARIABLE-LENGTH FILE NAME
*        DS    0X                  VARIABLE-LENGTH EXTRA FIELD
         SPACE
*    WHEN EITHER ZLFHSZCM OR ZLFHSZUN (OR BOTH) IS TOO LARGE FOR
*    AN UNSIGNED 32-BIT COUNTER, BOTH MUST BE SET TO HIGH VALUES
*    AND THE ACTUAL VALUE OF BOTH SIZES MUST BE PRESENT IN THE
*    ZIP64 EXTRA FIELD IN THE LOCAL HEADER.
*
*    FOR THE CENTRAL FILE HEADER EXTRA FIELD, THE STRUCTURE ONLY
*    NEEDS TO BE LONG ENOUGH TO HOLD THE "DOUBLE-SIZED" VALUES
*    OF THE DATA ITEMS SET TO HIGH VALUES, BUT THE ORDER OF THE
*    VARIOUS DATA ITEMS IS FIXED.
*
ZX64XF   DSECT ,                   ZIP64 EXTRA FIELD
ZX64ID   DC    XL2'0100'           ZIP64 TYPE TAG
ZX64LEN  DS    XL2                 SIZE OF REST OF EXTRA FIELD
ZX64DATA EQU   *                   START OF X64 DATA PAYLOAD
ZX64SZUN DS    XL8                 UNCOMPRESSED SIZE
ZX64SZCM DS    XL8                 COMPRESSED SIZE
ZX64LCLN EQU   *-ZX64DATA          EXPECTED LOCAL HEADER ZX64LEN VALUE
ZX64OFST DS    XL8                 RELATIVE OFFSET OF LOCAL HEADER
ZX64DISK DS    XL4                 DISK START NUMBER
         SPACE
ZFDD     DSECT ,                   ZIP FILE DATA DESCRIPTOR
ZFDDID   DC    XL4'504B0708'       DATA DESCRIPTOR SIGNATURE (OPTIONAL)
ZFDDMETA EQU   *,12                METADATA NEEDED FOR UNZIP
ZFDDCRC  DS    XL4                 CRC-32 OF UNCOMPRESSED DATA
ZFDDSZCM DS    XL4                 COMPRESSED SIZE
ZFDDSZUN DS    XL4                 UNCOMPRESSED SIZE
         SPACE
ZCFH     DSECT ,                   ZIP CENTRAL FILE HEADER RECORD
ZCFHID   DC    XL4'504B0102'       CENTRAL FILE HEADER SIGNATURE
ZCFHVER  DS    XL1                 VERSION USED FOR COMPRESSION
ZCFHOSFS DS    XL1                 OPERATING SYSTEM FILE SYSTEM
ZCFHVERX DS    XL2                 VERSION NEEDED FOR EXTRACTION
ZCFHFLG1 DS    XL1                 GENERAL PURPOSE BIT FLAGS
ZENCRYPT EQU   X'01'               FILE IS ENCRYPTED
ZIDICT8K EQU   X'02'               IMPLODE USED 8K SLIDING DICTIONARY
ZI3SFTRE EQU   X'04'               IMPLODE USED 3 SHANNON-FANO TREES
ZDATADSC EQU   X'08'               DATA DESCRIPTOR PRESENT AFTER DATA
ZCFHFLG2 DS    XL1                 GENERAL PURPOSE BIT FLAGS
ZCFHMETH DS    XL2                 COMPRESSION METHOD
ZCFHTIME DS    XL2                 TIME FILE LAST MODIFIED
ZCFHDATE DS    XL2                 DATE FILE LAST MODIFIED
ZCFHMETA EQU   *,12                METADATA NEEDED FOR UNZIP
ZCFHCRC  DS    XL4                 CRC-32
ZCFHSZCM DS    XL4                 COMPRESSED SIZE
ZCFHSZUN DS    XL4                 UNCOMPRESSED SIZE
ZCFHNMLN DS    XL2                 FILE NAME LENGTH
ZCFHXFLN DS    XL2                 EXTRA FIELD LENGTH
ZCFHCMLN DS    XL2                 FILE COMMENT LENGTH
ZCFHDISK DS    XL2                 DISK NUMBER OF FILE START
ZCFHINAT DS    XL2                 INTERNAL FILE ATTRIBUTES
ZCFHBNRY EQU   0                   FILE CONTAINS BINARY DATA
ZCFHASCI EQU   1                   FILE CONTAINS ASCII TEXT
ZCFHEBCD EQU   2                   FILE CONTAINS EBCDIC DATA
*                                  IE. UNTRANSLATED RECORDS FROM THE
*                                      MAINFRAME WITH EACH PRECEDED BY
*                                      A 4-BYTE RECORD LENGTH INDICATOR
*                                      IN INTEL INTEGER FORMAT
ZCFHEXAT DS    XL4                 EXTERNAL FILE ATTRIBUTES
ZCFHOFST DS    XL4                 RELATIVE OFFSET OF LOCAL HEADER
ZCFHNAME DS    0C                  VARIABLE-LENGTH FILE NAME
*        DS    0X                  VARIABLE-LENGTH EXTRA FIELD
*        DS    0C                  VARIABLE-LENGTH FILE COMMENT
         SPACE
ZE64EOC  DSECT ,                   ZIP64 END OF CENTRAL FILE DIRECTORY
ZE64ID   DC    XL4'504B0606'       END OF DIRECTORY SIGNATURE
ZE64SIZE DS    XL8                 SIZE OF REST OF E64EOC FIELDS
ZE64VER  DS    XL2                 VERSION USED FOR COMPRESSION
ZE64VERX DS    XL2                 VERSION NEEDED FOR EXTRACTION
ZE64DISK DS    XL4                 NUMBER OF THIS DISK
ZE64CDSK DS    XL4                 CENTRAL DIRECTORY STARTING DISK
ZE64ENTD DS    XL8                 CENTRAL DIR ENTRY # ON THIS DISK
ZE64ENTT DS    XL8                 TOTAL CENTRAL DIRECTORY ENTRY #
ZE64CDSZ DS    XL8                 SIZE OF THE CENTRAL DIRECTORY
ZE64OFST DS    XL8                 CENTRAL DIRECTORY START OFFSET
ZE64FXLN EQU   *-ZE64EOC           LENGTH OF FIXED PART OF HEADER
ZE64X    DS    0X                  EXTENSIBLE DATA SECTOR
         SPACE
ZL64LOC  DSECT ,                   ZIP64 ZE64EOC LOCATOR
ZL64ID   DC    XL4'504B0607'       ZIP64 ZE64EOC LOCATOR SIGNATURE
ZL64DSKC DS    XL4                 DISK NUMBER OF E64EOC START
ZL64OFST DS    XL8                 RELATIVE OFFSET OF E64EOC
ZL64DSKT DS    XL4                 TOTAL NUMBER OF DISKS
ZL64FXLN EQU   *-ZL64LOC           LENGTH OF FIXED PART OF HEADER
         SPACE
ZEOC     DSECT ,                   ZIP END OF CENTRAL DIRECTORY RECORD
ZEOCID   DC    XL4'504B0506'       END OF CENTRAL DIRECTORY SIGNATURE
ZEOCDSKL DS    XL2                 NUMBER OF THIS (LAST) DISK
ZEOCDSKC DS    XL2                 DISK NUMBER OF CENTRAL DIR START
ZEOCENTD DS    XL2                 CENTRAL DIR ENTRY COUNT ON THIS DISK
ZEOCENTT DS    XL2                 TOTAL CENTRAL DIRECTORY ENTRY COUNT
ZEOCCDSZ DS    XL4                 SIZE OF THE CENTRAL DIRECTORY
ZEOCOFST DS    XL4                 CENTRAL DIRECTORY START OFFSET
ZEOCCMLN DS    XL2                 ZIP FILE COMMENT LENGTH
ZEOCMNLN EQU   *-ZEOC              MINIMUM LENGTH OF RECORD
ZEOCCMNT DS    0C                  VARIABLE-LENGTH ZIP FILE COMMENT
         SPACE
         TITLE '  P C X   F I L E   H E A D E R  '
PCXHDR   DSECT ,                   PCX PICTURE FILE HEADER
PCXMFR   DS    X                   "MANUFACTURER"
*        EQU   10                  ZSOFT (IE. PCX FORMAT FILE)
PCXVER   DS    X                   VERSION
*                              0 = VERSION 2.5 OF PC PAINTBRUSH
*                              2 = VERSION 2.8 WITH PALETTE INFORMATION
*                              3 = VERSION 2.8 W/O PALETTE INFORMATION
*                              4 = PC PAINTBRUSH FOR WINDOWS(PLUS FOR
*                                  WINDOWS USES VER 5)
*                              5 = VERSION 3.0 AND > OF PC PAINTBRUSH
*                                  AND PC PAINTBRUSH +, INCLUDES
*                                  PUBLISHER'S PAINTBRUSH . INCLUDES
*                                  24-BIT .PCX FILES
PCXMETHD DS    X                   ENCODING METHOD
*        EQU   0                   NO COMPRESSION (NEVER SEEN IT)
*        EQU   1                   LIMITED RLE (RUN-LENGTH ENCODING)
PCXBITPP DS    X                   NUMBER OF BITS PER PIXEL PER PLANE
PCXWINDW DS    0XL8                IMAGE WINDOW DIMENSIONS
PCXXMIN  DS    XL2
PCXYMIN  DS    XL2
PCXXMAX  DS    XL2
PCXYMAX  DS    XL2
PCXHDPI  DS    XL2                 HORIZONTAL RESOLUTION DOTS PER INCH
PCXVDPI  DS    XL2                 VERTICAL RESOLUTION DOTS PER INCH
PCXCOLMP DS    16XL3               16-COLOUR RGB PALETTE
PCXRESV  DS    X                   SHOULD BE ZERO
PCXNPLNS DS    X                   NUMBER OF COLOUR PLANES
PCXBYTLN DS    XL2                 NUMBER OF BYTES PER SCANLINE
*                                  MUST BE EVEN - DON'T USE XMAX-XMIN+1
PCXPALIN DS    XL2                 PALETTE INTERPRETATION INFORMATION
*        EQU   1                   COLOUR OR BLACK-AND-WHITE
*        EQU   2                   GREYSCALE
PCXHSSIZ DS    XL2                 HORIZONTAL SIZE IN PIXELS      (NEW)
PCXVSSIZ DS    XL2                 VERTICAL SIZE IN PIXELS        (NEW)
PCXFILL  DS    XL54                REST OF HEADER - SHOULD BE ZERO
PCXDATA  DS    0X                  PICTURE DATA BEGINS HERE
         SPACE
*   IF PCXVER IS 5 OR MORE THEN A 256-COLOUR PALETTE MAY BE PRESENT.
*   IF THE 256-COLOUR PALETTE IS PRESENT THEN THE LAST 769 BYTES OF
*   THE FILE IS AL1(12) FOLLOWED BY 256 3-BYTE RGB VALUES.
*
*   WHEN A PCX FILE IS TRANSFERRED TO A FIXED-LENGTH RECORD OS DATA
*   SET, THE LAST RECORD MAY HAVE EXTRANEOUS FILL DATA AFTER PICTURE
*   AND/OR PALETTE DATA.  "REVIEW" WILL TOLERATE AND IGNORE THIS.
         SPACE
         TITLE '  B M P   F I L E   H E A D E R  '
BMPHDR   DSECT ,                   BMP PICTURE FILE HEADER
BMPTYPE  DS    XL2                 FILE TYPE
*        EQU   X'424D'             BMP (ASCII C'BM')
BMPSIZE  DS    XL4                 SIZE OF THE FILE IN BYTES
BMPRSV1  DS    XL2                 MUST BE ZERO
BMPRSV2  DS    XL2                 MUST BE ZERO
BOFFBITS DS    XL4                 STARTING OFFSET OF BITMAP DATA
         SPACE
*                                  BITMAP INFORMATION HEADER
BISIZE   DS    XL4                 SIZE OF THIS DATA STRUCTURE
*                                  MINIMUM SIZE = 12, USUAL SIZE = 40
BIWIDTH  DS    XL4                 IMAGE WIDTH IN PIXELS
BIHEIGHT DS    XL4                 IMAGE HEIGHT IN PIXELS
BIPLANES DS    XL2                 NUMBER OF PLANES OF TARGET DEVICE
BIBITCNT DS    XL2                 NUMBER OF BITS PER PIXEL
BICMPRSN DS    XL4                 COMPRESSION TYPE (0 = NONE)
BI_RGB   EQU   0                   UNCOMPRESSED RGB (INTEL) FORMAT
BI_RLE8  EQU   1                   RUN-LENGTH ENCODING FOR 8 BITS/PIXEL
BI_RLE4  EQU   2                   RUN-LENGTH ENCODING FOR 4 BITS/PIXEL
BI_BITFIELDS EQU 3                 UNCOMPRESSED RGB (INTEL) FORMAT
*                                  - WITH 4-BYTE R,G,B COLOUR MASKS
BI_JPEG  EQU   4                   PICTURE DATA HAS JPEG COMPRESSION
BI_PNG   EQU   5                   PICTURE DATA HAS PNG COMPRESSION
BISIZIMG DS    XL4                 SIZE OF THE IMAGE DATA IN BYTES
*                                  - ZERO IS VALID FOR UNCOMPRESSED
BIXPPM   DS    XL4                 HORIZONTAL PIXELS PER METRE
BIYPPM   DS    XL4                 VERTICAL PIXELS PER METRE
BICLRUSD DS    XL4                 NUMBER OF COLOURS USED IN BITMAP
*                                  - IF ZERO CALCULATE FROM BIBITCNT
BICLRIMP DS    XL4                 NUMBER OF "IMPORTANT" COLOURS
*                                  - IF ZERO THEN ALL ARE "IMPORTANT"
         SPACE
*                                  FORMAT FOR OS/2 VERSION 1
         ORG   BIWIDTH
B2WIDTH  DS    XL2                 IMAGE WIDTH IN PIXELS
B2HEIGHT DS    XL2                 IMAGE HEIGHT IN PIXELS
B2PLANES DS    XL2                 NUMBER OF PLANES OF TARGET DEVICE
B2BITCNT DS    XL2                 NUMBER OF BITS PER PIXEL
         ORG
         SPACE
*   WHEN A BMP FILE IS TRANSFERRED TO A FIXED-LENGTH RECORD OS DATA
*   SET, THE LAST RECORD MAY HAVE EXTRANEOUS FILL DATA AFTER PICTURE
*   DATA.  "REVIEW" WILL TOLERATE AND IGNORE THIS.
         SPACE
         TITLE '  G I F   H E A D E R S  '
GIFHDR   DSECT ,                   GIF FILE HEADER
GIFSIG   DS    CL3                 GIF INDICATOR - 'GIF' IN ASCII
GIFVER   DS    CL3                 VERSION - YY# IN ASCII
*                                  LOGICAL SCREEN DESCRIPTOR (7 BYTES)
GIFWIDTH DS    XL2                 LOGICAL SCREEN WIDTH
GIFDEPTH DS    XL2                 LOGICAL SCREEN HEIGHT
GIFFLGS  DS    XL1                 FLAGS
$GIFGC#  EQU   X'07'               N => 2**(N+1) GLOBAL COLOUR ENTRIES
$GIFIMP  EQU   X'08'               COLOURS SORTED BY IMPORTANCE
$GIFBPP  EQU   X'70'               BITS PER PIXEL MINUS ONE
$GIFGCT  EQU   X'80'               GLOBAL COLOUR TABLE PRESENT
GIFBGND  DS    XL1                 BACKGROUND COLOUR INDEX
GIFASPCT DS    XL1                 ASPECT RATIO - 0 IF 1:1
*            OTHERWISE (N+15)/64 = (PIXEL WIDTH) / (PIXEL HEIGHT)
GIFFIXLN EQU   *-GIFHDR            LENGTH OF FIXED PART OF GIF FILE
         SPACE
         SPACE
GIH      DSECT ,                   GIF IMAGE HEADER
GIHLEFT  DS    XL2                 IMAGE LOGICAL SCREEN LEFT OFFSET
GIHTOP   DS    XL2                 IMAGE LOGICAL SCREEN TOP OFFSET
GIHWIDTH DS    XL2                 IMAGE WIDTH
GIHDEPTH DS    XL2                 IMAGE HEIGHT
GIHFLGS  DS    XL1                 FLAGS
$GIHLC#  EQU   X'07'               N => 2**(N+1) LOCAL COLOUR ENTRIES
$GIHRSV  EQU   X'18'               RESERVED
$GIHIMP  EQU   X'20'               COLOURS SORTED BY IMPORTANCE
$GIHINT  EQU   X'40'               INTERLACED IMAGE DATA
$GIHLCT  EQU   X'80'               LOCAL COLOUR TABLE PRESENT
GIHLEN   EQU   *-GIH               LENGTH OF GIF IMAGE HEADER
         SPACE
         SPACE
GCX      DSECT ,                   GRAPHIC CONTROL EXTENSION HEADER
GCXFLGS  DS    XL1                 FLAGS
$GCXTRN  EQU   X'01'               GXCTCI IS VALID
$GCXUSR  EQU   X'02'               WAIT FOR USER INPUT BEFORE DISPLAY
$GCXMTH  EQU   X'1C'               DISPOSAL METHOD
$GCXM0   EQU   X'00'                 NO ACTION
$GCXM1   EQU   X'04'                 LEAVE IMAGE IN PLACE
$GCXM2   EQU   X'08'                 RESTORE THE BACKGROUND COLOUR
$GCXM3   EQU   X'0C'                 RESTORE PRE-DRAW STATE
$GCXRSV  EQU   X'70'               RESERVED
GCXWTTM  DS    XL2                 POST-DISPLAY DELAY CENTISECONDS
GCXTCI   DS    XL1                 TRANSPARENT COLOUR INDEX:
*                                    DO NOT DISPLAY THIS COLOUR
*                                    WHEN FLAG $GCXTRN IS SET
GCXLEN   EQU   *-GCX               LENGTH OF GCX BLOCK - MUST BE 4
*                                  (END-OF-DATA NULL FOLLOWS GCX)
         TITLE '  D B 2   P A G E   F O R M A T  '
         COPY  REVDB2PG
         SPACE
         TITLE '  R E V I E W   -   A C B   W O R K   A R E A  '
@ACBDATA DSECT
         DS    18F                 WORKING SAVE AREA
ACBADDR  DS    F                   ADDRESS OF ACB
*XLSTADDR DS   F                   ADDRESS OF EXLST
RPLADDR  DS    F                   ADDRESS OF FIRST RPL
RPL2ADDR DS    F                   ADDRESS OF SECOND RPL
ACBXRBA  DS    FL8                 WORK AREA FOR VSAM RECORD EA RBA
ACBRBA   DS    0FL8
ACBRBAHI DS    F                   SAVE AREA FOR VSAM RECORD EA RBA
ACBRBALO DS    F                   SAVE AREA FOR VSAM RECORD RBA
ACBRECLN DS    F                   SAVE AREA FOR VSAM RECORD LENGTH
ACBCOUNT DS    F                   SAVE AREA FOR PREVIOUS COUNT VALUE
ACBIOMSG DS    CL128               ACB O/C AND RPL SYNAD MESSAGE AREA
VSAMKEY  DS    CL256               KEY HOLD AREA FOR KEYED ACCESS
@ACBWEND DS    0D
$ACBWLEN EQU   *-@ACBDATA
VSAMREC  EQU   *                   VSAM CLUSTER RECORD HOLD AREA
*ACB                               VSAM ACCESS CONTROL BLOCK
*EXLST                             VSAM EXIT LIST
*RPL                               VSAM REQUEST PARAMETER LIST
*HOLD                              SCREEN RECORDS HOLD AREA
*CHKPT                             RECORD CHECKPOINT TABLE
         SPACE
         SPACE
         COPY  REVSUBS             INCLUDE SUBROUTINE CSECTS
         SPACE
         AIF   (NOT &ENV390).SUBS2OK
         SPACE
         COPY  REVSUBS2            INCLUDE SUBROUTINE CSECTS
         SPACE
.SUBS2OK ANOP
         SPACE
         COPY  REVLEVL             INCLUDE REVLEV CSECT
         SPACE
         COPY  REVMSGS             INCLUDE MESSAGE CSECT
         SPACE
         COPY  REVEDIT             INCLUDE EDITOR CSECT
         SPACE
         COPY  REVMENU             INCLUDE MENU PROCESSOR CSECT
         SPACE
         END   REVIEW
