         TITLE '  R E V E D I T  '
***********************************************************************
*                                                                     *
*         REVEDIT - REVIEW EDITOR                                     *
*                                                                     *
***********************************************************************
*
*        WRITTEN BY: GREG PRICE, PRYCROFT SIX PTY. LTD.
*        DATE WRITTEN: FEBRUARY 7 2002.
*        ATTRIBUTES: RE-ENTRANT, AMODE=31, RMODE=24 (FOR DCB EXITS).
*        LOCAL MACROS USED: MESG (DEFINE MESSAGE STRING.)
*        DESCRIPTION:
*         FULL SCREEN EDITOR COMPONENT OF THE REVIEW COMMAND PROCESSOR.
*
*         LOG OF CHANGES:
*       07FEB2002 - INITIAL WRITE.
*       11MAR2002 - INITIAL PROTOTYPE VERSION.
*       17MAR2002 - STORE FILE DATA IN DATA SPACE.
*       22NOV2003 - ADAPT FOR REVIEW.
* R38.0 09MAR2004 - INTEGRATE INTO REVIEW.
* R38.1 30JUN2004 - FIX SAVE WITH MISSING SEQUENCE NUMBER (TRT->R1).
*       03JUL2004 - MOVE EDCOLS AND EDPROFL TO STATUS7, ADD EDLINE.
*                 - REFINE POST-REPLACE SHUFFLE LOGIC.
*                 - PREVENT LEFT SCROLL PAST START AFTER CHANGE ERROR.
*                 - SHOW MESSAGE AFTER CHANGE DATA LENGTH ERROR.
*       11JUL2004 - ADD 'COPY' SUBCOMMAND.
* R38.5 06NOV2004 - FIX S0C4 - NEVER CALL BLOCKTO1 FOR 'N' CMD ELEMENT.
*                 - ENSURE FIND PREFIX/SUFFIX/WORD ALWAYS WORK.
* R38.6 08NOV2004 - FIX S0C4 - RESET FIND LOCATION STATUS AT START.
*                 - BLANK COMMAND QUOTES WHEN INSERT LINE INCORPORATED.
*                 - ADD 'UPD'/'UPDATE' OPERAND TO LOCATE.
* R39.0 30DEC2004 - ADD 'HI'/'HILITE' COMMAND.
*                 - ADD JCL AND ASSEMBLER SYNTAX COLOURING.
*                 - DO NOT FLAG LOWER CASE CAPS ON OVERTYPE AS CHANGE.
* R39.1 13JAN2005 - FIX S0C4 WHEN HEX ON WITH SHORT RECORDS - REPORTED
*                   BY JOHN H. KEITH, MIAMI DADE COLLEGE.
* R39.2 29JAN2005 - MAKE EDITKAPS AVAILABLE TO OTHER CSECTS.
* R39.3 21AUG2005 - DO NOT AUTOINSERT IF CURSOR IS LEFT OF DATA.
*                 - DO NOT LET 'X ALL' EXCLUDE LINES WITH COMMANDS.
*                 - AVOID LOOP/ABEND UPON DISPLAY OF PENDING INSERT.
* R40.0 08OCT2005 - CHANGE 'BNE' AFTER 'CLC' AT EDRPTST2 TO 'BE',
*                   THUS FIXING PICTURE CHANGE OF NON-PIC TARGET CHARS.
*                 - FIX SCROLL UP BY DEFAULT AMOUNT WHEN NOT CURSOR.
*                 - DO NOT PROCESS RESIDUAL DATA PAST BOTTOM-OF-DATA IN
*                   EDITMERG - THANKS TO STEVEN BECQUER OF MIAMI-DADE
*                   COUNTY PUBLIC SCHOOLS I.T.S. FOR THE "GOOD OIL".
*       13OCT2005 - PROTECT SEQUENCE NUMBERS WITH ATTRIBUTE BYTE TO
*                   EASE DATA ENTRY ON WIDE SCREEN.
* R40.2 30JUN2006 - SUPPORT SCREENS WITH MORE THAN 62 LINES.
*                 - ENSURE FOUND DATA SHOWN ON VISIBLE LINE.
*                 - SHOW ./ RECORDS IN WHITE.
*                 - DETECT CURSOR ON PARTIAL "HEX ON" LINE WHICH
*                   CAN ONLY OCCUR AT THE BOTTOM OF THE SCREEN.
* R40.3 16AUG2006 - NO LONGER RELY ON CALLER INITIALIZING STATUS FLAGS.
*       03SEP2006 - ADD 'TS' - "TEXT SPLIT" - LINE COMMAND.
*       15NOV2006 - ADD 'TF' - "TEXT FLOW" - LINE COMMAND.
*                 - ADD 'LC'/'UC' ALIASES FOR 'W'/'U' (INCL. BLOCK).
*                 - SHOW 'DATA SAVED' MESSAGE AFTER SUCCESSFUL 'SAVE'.
*                 - IF COPYING INTO EMPTY BASE CAPS SETTING ON DATA.
*                 - TRY TO PUT CURSOR IN LINE COMMAND AREA OF FIRST
*                   LINE CREATED BY 'R'/'C'/'M' LINE COMMAND.
*                 - LIMIT RECORD LEVEL STAT TO CURRENT LEVEL ON SAVE.
*       03DEC2006 - ADD 'SORT' PRIMARY COMMAND.
*                 - ENSURE LAST TWO SEQUENCE DIGITS ARE NUMERIC.
*                 - COLON COMMAND PREFIX APPLIES TO CURRENT LINE.
*                 - DO NOT IGNORE BOTTOM-OF-DATA LINE COMMANDS.
*       03FEB2007 - HONOUR 'A'/'B' REPLICATION NUMBER FOR 'COPY'.
*                 - ADD 'REPLACE' AND 'CREATE' PRIMARY COMMANDS.
* R40.5 04MAY2007 - DO NOT OVERLAY MSGIOAB WITH 'DATA SAVED'.
*       10JUN2007 - FIX S0C7 UPON SAVE WITH NUM ON.
* R41.0 21NOV2007 - USE X'FF' IN TRT SO FORWARD SEARCH CAN FIND A NULL.
*                 - ENABLE HIGHLIGHT OF SOURCE CODE FOUND IN JOBSTREAM.
* R41.1 03DEC2007 - CARRY PARENTHESES NESTING ACROSS ALL CONTINUATIONS.
*                 - FIX S0C4 IN ESA 'TF' - REPORTED BY SAM KNUTSON.
*                 - ENHANCE JCL LABEL VALIDITY CHECKING.
*                 - REQUIRE JCL VERBS TO BE UPPER CASE ALPHABETICS.
* R41.2 22DEC2007 - FIX SYNTAX HIGHLIGHT TEST FOR SETA/SETB/SETC.
*                 - FIX MACRO LOGICAL EXPRESSION SYNTAX CONTINUATION.
*       03JAN2008 - NEVER USE UPDATE-IN-PLACE FOR EMPTY MEMBER.
*                 - FIX S0C4 WHEN MOVING TOP SCREEN LINES.
*       06JAN2008 - RESET CHANGED LINE FLAGS AFTER SAVE EVEN IF NONUM.
*       24FEB2008 - FIX FIND FIRST/ALL INTERMITTENT COLUMNS FAILURE.
*                 - LEAVE CURSOR HOME FOR INITIAL EMPTY FILE DISPLAY.
*       26FEB2008 - FREE SUBMIT TEMPDS BY DSNAME, NOT DDNAME, TO AVOID
*                   3.8 SUBMIT'S DANGLING ALLOC TO DELETED DATA SET.
*                 - CHANGE V-CONS TO AD-CONS.
*       05MAR2008 - ADD 'UNDO' AND 'REDO' COMMANDS.
*                 - FLAG EDIT DATA CHANGED WHEN 'UC'/'LC' CHANGES CASE.
*       08MAR2008 - ADD VIEW MODE SUPPORT.
*       09MAR2008 - MAKE UNDO DATA SET PERMANENT - REVIEW FOR RECOVERY.
* R41.3 13MAR2008 - FIX S0C4 IN UNDOSAVE (LINENMBR IS 4 BYTES, NOT 8).
* R41.4 15MAR2008 - FIX S0C4 AFTER UNDO WHEN RESTORED TOP IS NOT TOP-
*                   OF-DATA.  UNDOREST NOW PUTS R3 IN LINEADDR, NOT R4.
* R41.5 22MAR2008 - SAVE CHANGE/RCHANGE INTO UNDO FILE.
*                 - COLOUR /*-*/ COMMENTS AND GENERAL QUOTED STRINGS.
*                 - DO NOT REPORT 'HI ASM' AS 'HI AUTO' IN 'PROF'.
*       24MAR2008 - FIX UNDOXSLP INFINITE LOOP.
*       25MAR2008 - PL/I AND CLIST SYNTAX COLOURING.
*                 - CALL EDITSNTX FROM EDITREAD AS DATA IS READ IN SO
*                   DISPLAY AFTER FIND/DOWN IS MORE ACCURATE.
*       26MAR2008 - FIX BUG WHEN EXCLUDE BLOCK INCORPORATES TOP LINE.
*                 - FIX LOCATE LINE NUMBER WITH EXCLUDED LINES.
*                 - ADD 'PLI', 'CLIST', AND 'DATA' OPERANDS TO 'HI'.
*       29MAR2008 - ADD VOL=SER= AND DSN= JCL VALIDATION.
* R41.6 31MAR2008 - USE USERID HLQ WHEN PROF NOPREF - THANKS TO SAM K.
* R41.8 28APR2008 - RESET REPLSTOW TO FIX 'CRE'/'REPL' SPF STATS.
*                 - COPY FIRST 'CRE'/'REPL' VARIABLE-LENGTH RECORD.
* R41.9 16AUG2008 - REPAIR TRT TABLE FOR 'FIND ALL' AFTER A CHANGE.
* R42.2 24JAN2009 - FIX HIGHLIGHTING OF TSO CLIST 'PROC'.
*                 - SHOW LINE LOCATED WITH NON-NUMERIC OPERAND.
*                 - ADD EDPLITAB TO COLOUR PL/I SOURCE CODE.
*                 - TRACK PARENTHESIS DEPTH FOR CODE GENERALLY.
*                 - FLAG PARENTHESIS DEPTH ERROR FOR PL/I.
* R42.3 28MAR2009 - HIGHLIGHT FOUND STRING AS SUGGESTED BY TOM A.
*                 - PARSE PL/I MARGINS ON PROCESS STATEMENT.
* R43.0 17OCT2009 - USE USERID AS 2LQ WHEN PREFIX IS NOT USERID.
*       07NOV2009 - HANDLE SCREEN SIZE CHANGE.
*       15DEC2009 - ADD CMDEBLOK FLAG TO AVOID S0C4.
*       14MAR2010 - FIX S0C4 WHEN 'C * *' AND NO STRING2 IS SET.
* R43.1 27MAR2010 - FIX QSAM SYNAD ABEND SUPPRESSION WITH EROPT=ACC.
*                 - REPORT MEMBER NOT FOUND IF ABEND IS S013-18.
*       02APR2010 - ADD 'NOT REUSED' MESSAGE FOR PRE-EXISTING UNDO D/S.
* R43.5 10JUL2010 - FIX S0C4 FROM CHANGE WITHOUT REPLACE STRING.
*       24JUL2010 - FIX 'CHANGE ALL' AND THE RESULTANT X'FF' DATA
*                   CORRUPTIONS WHEN USING A DATA SPACE.
* R43.7 30OCT2010 - FIX S0C4 WHEN HIGHLIGHTING CHANGE TO NULL STRING.
*       06NOV2010 - ADD 'CUT' AND 'PASTE' SUBCOMMANDS.
*       04DEC2010 - ADD TEXT FLOW COMMENT BLOCK SUPPORT.
*       16DEC2010 - FIX FIND/CHANGE WORD MULTIPLES PER RECORD.
*       08APR2012 - REPLACE TEXT FLOW COMMENT BLOCK SUPPORT WITH
*                   RESTRICTION OF FLOW TARGET TO CURRENT BOUNDS.
*       07OCT2012 - ADD 'TE' - "TEXT ENTRY" - LINE COMMAND.
* R44.0 22SEP2013 - FIX S0C1 WHEN 'PROF ON' AND NOT 'HI AUTO'.
*       28JAN2014 - HONOUR PROFILE NON-AUTO HILITE SETTING.
* R44.2 05FEB2014 - ALLOW ATTENTION INTERRUPT TO HALT RECORD SORT.
* R45.0 19AUG2014 - BASE UNDO FILE LRECL ON MAXRECSZ, NOT RECSTGSZ.
*       22AUG2014 - PRIME COPY AND CREATE/REPLACE DATA SET NAME PROMPT.
*                 - ADD 'SB' - FULLSCREEN ALIAS OF 'SUBMIT'.
*                 - FIX $$REVEDT HOUSEKEEPING AND SAVE COLS SETTING.
*                 - SCROLL DOWN 1 FOR LAST LINE 'I'/'R' IF NO COMMAND.
*       30AUG2014 - ADD $REVEDID "IDENTITY MEMBER" TO UNDO FILE.
* R45.1 04OCT2014 - FIX EXTENDED STATS FOR LARGE MEMBERS.
*       19OCT2014 - FIX S0C4-04 IF BLOCK START ON USED INSERT LINE.
*       03NOV2014 - DO NOT ALLOCATE A SPECIFIC MEMBER TO EDIT OR VIEW.
* R45.3 25DEC2014 - FIX BROWSE "MEMBER MISSING" AFTER BAD REVEDIT OPEN.
* R46.5 16APR2016 - MOVE STRING2 TO @DATA.
*       01MAY2016 - ADD 'TABS' AND 'AUTOSAVE'.
*                 - REPORT TRAILING BLANKS FOR VARIABLE-LENGTH RECORDS.
*       09MAY2016 - POSITION CURSOR TO COMMAND'S BAD OPERAND.
*                 - ADD 'ASCII' - SUPPORT EDITING ASCII DATA.
*       14MAY2016 - SUPPORT QUEUED 'RFIND' AND 'RCHANGE' VIA PFK.
* R46.6 25JUN2016 - CALL REVKYPRS TO PARSE SUBCOMMAND KEYWORD OPERANDS.
*                 - SUPPORT LINE LABELS.
*                 - ENHANCE 'LOCATE' AND 'RESET' TO SUPPORT LABELS.
*       20AUG2016 - SKIP AUTOMATIC UNDO SET UP FOR VIEW MODE TO
*                   REDUCE EDIT RECOVERY FROM VIEW SESSION RELICS.
*       25AUG2016 - RESET I/O ABEND FLAG AFTER SAVE & CREATE/REPLACE.
* R46.8 03FEB2017 - FIX RESET OF LAST OCCUPIED SCREEN LINE.
* R47.0 14FEB2017 - NAME THE LOGICAL SESSION DURING INITIALIZATION.
*       18FEB2017 - SUPPORT &SYSUID IN JCL DD DATA SET NAME.
* R47.1 04MAR2017 - DO NOT FLAG AMPERSAND IN OPCODE AS AN ERROR.
*                 - ADD 'UPDATED'/'NOUPDATE' OPERANDS TO 'EXCLUDE'.
*                 - FIX 'RESET' INFINITE LOOP EG.'RES CHG', 'RES EXC'.
*       13MAR2017 - FIDDLE WITH CURSOR TABBING ON INSERTED LINES.
* R47.2 10JUL2017 - FIX &SYSUID JCL SUPPORT FOR Z/OS.
* R47.3 05AUG2017 - FIX 'DSNC ON' - WAS SETTING ZAP ON INSTEAD.
* R47.4 20AUG2017 - FIX EDCAPCHK S0C4 FOR LENGTH OF 256-BYTE MULTIPLE.
* R47.5 12OCT2017 - SPECIFY LOC ON ALL SVC 120 GETMAINS.
* R47.6 25OCT2017 - FIX BAD DSN CHAR HILITE (MISSING/S0C4) EX PETER G.
* R47.7 12NOV2017 - FIX ASM 2-QUOTES-FOR-1 ACROSS LINE CONTINUATION.
* R47.9 06DEC2017 - SUPPORT 8-BYTE TSO ID AND PREFIX - FOR STATS ALSO.
*       09DEC2017 - PREVENT ANY LINE MODE TIME FOR THE 'SB' COMMAND.
* R48.0 02JAN2018 - AVOID CHANGE BLANK(S) TO NULL STRING INFINITE LOOP.
*       06JAN2018 - GENERALIZE 'UPD'/'NOU' KEYWORDS TO FIND AND CHANGE.
*       20JAN2018 - ALLOW HILITE ON TO WORK AFTER IT WAS OFF AT START.
*       17FEB2018 - ENABLE 'FIND' COMMAND FAMILY LABEL RANGE SUPPORT.
* R48.1 12MAR2018 - TRY UADS UNIT FOR UNDO FILE, RETRY WITH SYSALLDA.
*                 - SET MD_ASCII AS APPROPRIATE FOR SEARCHIT.
*                 - SHOW NON-DISPLAY ASCII FOUND MESSAGE DATA IN HEX.
* R48.2 25MAR2018 - CHANGE CSECT STATEMENTS TO RSECT STATEMENTS.
* R48.3 17MAY2018 - ADD NEW Z/OS V2 JCL STATEMENT TYPES TO TABLE.
*       05AUG2018 - QUEUED 'RFIND'/'RCHANGE' NOW BASED ON COMMAND TEXT.
*       11AUG2018 - FIX RCHANGE OF FOUND DATA IN BACKWARD DIRECTION.
*       14AUG2018 - FIX ALLOCATION DATA SET NAME OF CONCATENATED PDS.
* R48.6 28FEB2019 - FIX EDKEYDEL AND EDKEYSRT TABLE ENTRIES.
* R49.0 30MAR2019 - ADD AMODE SWITCHING FOR MVS/XA-LIKE SYSTEMS.
* R49.1 03AUG2019 - USE BLOCKTOKENSIZE=LARGE FOR FILE BEING EDITED
*                   TO FIX S002-A8 ABEND.  REPORTED BY TOM CONLEY.
*                 - SHOW UP TO 9 DIGITS IN EXCLUDED LINE COUNT.
*                 - SHOW UP TO 11 DIGITS IN FIND ALL RESULT COUNT.
*                 - CHECK FOR DCB ABEND BETWEEN WRITE AND CHECK DUE
*                   TO PDSE SPACE ABEND CLOSING DCB BEFORE CHECK.
* R49.4 03JAN2020 - FIX BAD SCREEN DATA WITH CAPS OFF EXCLUDED LINES.
* R49.7 11JUL2020 - RESHOW BAD COMMAND FOR MORE REASONS.
*       09AUG2020 - ALLOW DATA SET NAME AS OPERAND OF 'COPY'.
* R50.0 04JAN2021 - ADD 'COMPARE' COMMAND.
*                 - ADD 'K'/'MD' MAKE DATA LINE COMMAND.
*                 - PUT NULL UNDER INSERT LINE CURSOR WHEN NULLS OFF.
*                 - SUPPRESS LEADING ZEROS ON TOP LINE COLUMN RANGE.
*       30JAN2021 - ADD 'HIDE' COMMAND, AND 'HIDE' OPERAND OF 'RESET'.
*       14FEB2021 - USE MULTIPLE PROFILE DISPLAY LINES.
*                 - REMOVE EDLINE FROM STATUS7.
*                 - REVAMP 'NUM' FOR 'ON'/'OFF' AND 'STD'/'COBOL'.
*       19FEB2021 - ALLOW 'NUM' FOR VARIABLE-LENGTH RECORDS.
*                 - ADD 'PRESERVE' COMMAND.
*       02APR2021 - USE ISPF SCREEN NUMBER IF PRESENT FOR RECOVERY.
*       30APR2021 - PUT 'CHANGE' INTO ITS CORRECT EDTCMDTB LOCATION.
* R50.1 11JUN2021 - FIX 'COMPARE X' & 'PROFILE' S0C4 DATA SPACE ABENDS.
*       07AUG2021 - FIX DELETE LINE DATA CORRUPTION (AR12 NOT ZEROED).
*
***********************************************************************
         TITLE '  R E V E D I T   -   I N I T I A L I Z A T I O N  '
**********************************************************************
*                                                                    *
* REGISTERS ON ENTRY: R15-> REVEDIT                                  *
*                     R14-> RETURN ADDRESS                           *
*                     R13-> REGISTER SAVE AREA                       *
*                     R9 -> @DATA                                    *
*                                                                    *
* DATA ON ENTRY:   DSNAIM = DATA SET BEING EDITED                    *
*                 $MEMBER = MEMBER TO BE EDITED                      *
*                 $CONCAT = CONCATENATION NUMBER OF PDS OF $MEMBER   *
*                 $DDNAME = FILE BEING REVIEWED                      *
*                 $DSNAME = FIRST OR ONLY DSNAME IN REVIEWED FILE    *
*                 $VOLSER = VOLUME SERIAL OF $DSNAME                 *
*                  $UCBAD = ADDRESS OF UCB OF $VOLSER                *
*                                                                    *
* INITIAL VALUES:  $10CAP = '1'B FOR "CAPS ON" UNTIL LOWER CASE READ *
*                    FALL = '0'B TO NOT FORCE 'ALL' ON FIRST 'FIND'  *
*                    FVRT = '0'B TO NOT FORCE "FIND" REPOSITIONING   *
*                                                                    *
* DURING PROCESSING:  R9 -> @DATA                                    *
*                     R10-> SUBROUTINE BASE                          *
*                     R11-> REVEDIT                                  *
*                     R12-> @EDDATA                                  *
*                     R13-> SUBROUTINE WORKING STORAGE               *
*                 $DDNAME = FILE BEING EDITED                        *
*                 $DSNAME = DATA SET BEING EDITED                    *
*                 $VOLSER = VOLUME SERIAL OF $DSNAME                 *
*                  $UCBAD = ADDRESS OF UCB OF $VOLSER                *
*                                                                    *
* RETURN CODES:       R15 = 0    DATA SAVED                          *
*                     R15 = 8    DATA NOT SAVED                      *
*                     R15 = 14   DATA SET OR MEMBER IN USE           *
*                     R15 = 20   SEVERE ERROR - UNABLE TO CONTINUE   *
*                                                                    *
**********************************************************************
         SPACE
REVEDIT  RSECT
REVEDIT  AMODE 31
REVEDIT  RMODE 24
         ENTRY EDASMTAB
         ENTRY EDITKAPS
         AIF   (&ENV390).USE1
         USING REVEDIT,R11
         AGO   .USE2
.USE1    ANOP
         USING (REVEDIT,EDITINIT),R11
.USE2    ANOP
         B     @EDIT-*(,R15)
@EDITLBL EQU   *+1,8
         DC    AL1(7),CL11'REVEDIT'
@EDSIZE  DC    A($EDDATAL)
@EDIT    STM   R14,R12,12(R13)
         LR    R11,R15             BASE
         L     R0,@EDSIZE
         MVI   GETMNTRC,40         TRACK GETMAIN IN CASE OF FAILURE
         GETMAIN RC,LV=(0),SP=12,LOC=(24,64)
         LTR   R15,R15             HAS WORKING STORAGE BEEN ACQUIRED?
         BZ    @EDITOK             YES
         LA    R4,20               NO, SET ERROR RETURN CODE
         MVI   MSG,123             REQUEST ABORTED - STORAGE FULL
         B     EDIT_END            LEAVE
@EDITOK  LR    R14,R1              COPY TARGET AREA ADDRESS
         L     R15,@EDSIZE         GET TARGET AREA SIZE
         SR    R3,R3               ZERO SOURCE LENGTH AND PAD
         MVCL  R14,R2              CLEAR ACQUIRED AREA
         LR    R12,R1
         USING @EDDATA,R12
         ST    R13,4(,R1)          CHAIN SAVEAREA
         ST    R1,8(,R13)          CHAIN SAVEAREA
         LR    R13,R1              NEW SAVEAREA
         OI    STATUS11,$11EDT     FLAG EDITOR IS RUNNING
         MVC   @EDTMRKR,@EDITLBL   MARK USE OF THIS STORAGE AREA
         L     R0,RECURS#
         CVD   R0,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  @EDTMRKR+5(3),DOUBLE
         MVC   ED_MODE,MODE        SAVE MODE FLAG BYTE
         MVC   $EDSAVE,$PASSWRD    SAVE CURRENT FILE PARTICULARS
         MVC   $EDDSCB,MYDSCB      SAVE OBTAINED DSCB DATA
         SPACE
         L     R5,REVUPT           POINT TO THE UPT
         USING UPT,R5
         OI    EDFLG4,E4UPTOK      FLAG NO NEED TO FIDDLE WITH WTPMSG
         TM    UPTSWS,UPTWTP       IS WTPMSG SET?
         BZ    EDWTPOK             NO, NO ADJUSTMENT NECESSARY
         L     R15,CVTPTR(,0)      POINT TO THE CVT
         CLI   CVTDCB-CVT(R15),X'9B'
         BNE   EDWTPNOK            NOT Z/OS SO NEED WTPMSG FLAG EDIT
         TM    1269(R15),X'02'     Z/OS 1.12 OR LATER?
         BO    EDWTPOK             YES, NEW ABEND EXIT FLAG HONOURED
EDWTPNOK NI    EDFLG4,255-E4UPTOK  NEED TO SUPPRESS WTPMSG SOMETIMES
EDWTPOK  EQU   *
         DROP  R5                  UPT
         SPACE
         L     R15,EDITINI@
         BASR  R14,R15             PERFORM INITIALIZATION
         LTR   R4,R15              SUCCESS?
         BNZ   EDITEXIT            NO, TERMINATE
         SPACE
         L     R15,EDITREA@
         BASR  R14,R15             READ IN FILE DATA
         LA    R4,20               SEVERE ERROR
         CLI   SYNADSW,0           I/O ERROR ENCOUNTERED?
         BNE   EDITEXIT            YES, TERMINATE
         MVC   COMPON,@EDITLBL     FLAG COMPONENT FOR HELP
         MVC   REVHELP,REVHE00     FLAG HELP PANEL TO ISPF
         L     R15,=A(REVNAME)
         BASR  R14,R15             ATTEMPT TO NAME THE SESSION
         SPACE
         TM    STATUS11,$11VIEW    JUST HERE FOR THE VIEW?
         BO    UNDOVIEW            YES, SKIP UNDO SET UP
         L     R15,UNDOINI@
         BASR  R14,R15             ALLOCATE AND OPEN UNDO FILE
UNDOVIEW EQU   *
         SPACE
         ICM   R0,3,MSG            ANY MESSAGE SET?
         BNZ   EDTRLOK             YES, DO NOT LOSE IT
         ICM   R0,15,TRLBLNK#      GET TRAILING BLANK RECORD COUNT
         BZ    EDTRLOK             NO SUCH RECORDS ENCOUNTERED
         CVD   R0,DOUBLE           ENCOUNTERED TRAILING BLANK RECORDS
         OI    DOUBLE+7,X'0F'      PREPARE FOR UNPACK
         UNPK  MSG+2(7),DOUBLE
         LA    R14,6               GET MAXIMUM ZEROS TO SUPPRESS
EDTRL#LP CLI   MSG+2,C'0'          LEADING ZERO?
         BNE   EDTRL#OK            NO
         MVC   MSG+2(6),MSG+3      YES, SUPPRESS IT
         BCT   R14,EDTRL#LP
EDTRL#OK LA    R14,MSG+2+1(R14)    POINT PAST ZONED NUMBER
         MVC   0(23,R14),=CL23' RECORDS END IN A BLANK'
         LA    R1,MSG+2-23
         C     R0,EDFW1            JUST ONE RECORD?
         BNE   EDTRL#DN            NO
         MVC   7(15,R14),8(R14)    YES, GET RID OF 'S'
         LA    R1,MSG+2-22
EDTRL#DN SR    R14,R1              GET MESSAGE LENGTH
         STH   R14,MSG             SET MESSAGE LENGTH
         TM    EPPRES,1            IS PRESERVE ON?
         BO    EDTRLOK             YES, TRAILING BLANKS NOT A PROBLEM
         OI    STATUS7,$7BELL      SOUND AUDIBLE ALARM
         SPACE
EDTRLOK  TM    EDFLG4,E4RECOV      EDIT RECOVERY IN PROGRESS?
         BNO   EDITCYCL            NO, GO HARDEN INITIAL DATA
         LA    R14,EDITRECO        YES
         ST    R14,EDRETSV1        SET RETURN ADDRESS
         L     R15,UNDORES@        POINT TO ROUTINE
         BR    R15                 GO RECOVER THE DATA
EDITRECO MVI   MSG,214             EDIT DATA RECOVERY PERFORMED
         NI    EDFLG4,255-E4RECOV  RECOVERY PHASE NOW COMPLETE
         TITLE '  R E V E D I T   -   M A I N   C O N T R O L  '
EDITCYCL L     R15,UNDOSAV@
         BASR  R14,R15             PERFORM UNDO SAVE
         SPACE
EDITLOOP NI    STATUS16,255-$16RFC CLEAR ANY PENDING COMMANDS
         NI    EDFLG5,255-E5COMP-E5SEQS-E5XCLD-E5NEXT-E5CUT
         L     R15,EDITSCR@
         BASR  R14,R15             FORMAT DYNAMIC AREA
         SPACE
EDITCTAB L     R15,EDCOMMAD
         BASR  R14,R15             DISPLAY SCREEN AND GET INPUT
         SPACE
         TM    STATUS13,$13NTRM    NEW TERMINAL SCREEN SIZE?
         BO    EDITNTRM            YES, RECYCLE SCREEN DATA AREAS
         SPACE
         L     R15,EDITMER@
         BASR  R14,R15             MERGE MODIFIED DATA
         TM    EDFLG4,E4CTAB       REHOWING WITH TABBED CURSOR?
         BO    EDITCTAB            YES
         SPACE
         NI    EDFLG1,255-E1FREEZE RESET "FREEZE" FLAG
         L     R15,EDITPAR@
         BASR  R14,R15             PARSE PRIMARY COMMAND
         TM    EDFLG1,E1FREEZE     PRIMARY LINE COMMAND TROUBLE?
         BO    LINELOOK            YES, NEED TO LOOK AT LINE COMMANDS
         TM    STATUS7,$7BELL      INVALID PRIMARY COMMAND?
         BO    EDITLOOP            YES, NEED TO REDISPLAY
         SR    R4,R4               CLEAR ERROR STATUS
         TM    EDFLG1,E1CNCL       TERMINATION REQUESTED?
         BO    EDITEXIT            YES, GO TERMINATE
         SPACE
LINELOOK L     R15,EDITLIN@
         BASR  R14,R15             PARSE AND PROCESS LINE COMMANDS
         TM    EDFLG1,E1FREEZE     POSTPONE PRIMARY COMMANDS?
         BO    EDITLOOP            YES
         SPACE
         ICM   R5,15,PENDADDR      ANY PENDING PRIMARY COMMAND?
         BZ    EDITRFC             NO, CONTINUE PROCESSING
         NI    FINDSW3,255-CHNGE   YES, RESET CHANGE OPERATION FLAG
         L     R15,EDTCMDL-4(,R5)  GET SUBCOMMAND ROUTINE ADDRESS
         BASR  R14,R15             PERFORM PENDING PRIMARY COMMAND
         SPACE
         SR    R4,R4               CLEAR ERROR STATUS
         TM    EDFLG1,SAVEX        TERMINATION REQUESTED?
         BO    EDITEXIT            YES, GO COMPLY
EDITRFC  TM    STATUS16,$16RFC     'RFIND' OR 'RCHANGE' PENDING?
         BZ    EDITCYCL            NO, CONTINUE PROCESSING
         LA    R14,EDITCYCL        YES, SET RETURN ADDRESS
         MVI   OPD1+6,0            ENSURE NO RESIDUAL OPERANDS
         L     R15,EDRFIND@        POINT TO 'RFIND' ROUTINE
         TM    STATUS16,$16RF      'RFIND' REQUESTED?
         BOR   R15                 YES
         L     R15,EDRCHG@         NO, IT MUST HAVE BEEN 'RCHANGE'
         BR    R15
         TITLE '  R E V E D I T   -   T E R M I N A T I O N  '
         USING DAPB04,MYDAPB
         USING DAPB08,MYDAPB
         USING DAPB18,MYDAPB
         USING IHADCB,EDITDCB
EDITEXIT LTR   R4,R4               SEVERE PROBLEM?
         BNZ   EDEXRCOK            YES, DO NOT FIDDLE WITH RETURN CODE
         TM    STATUS7,$7SAVE      WAS DATA CHANGED THIS SESSION?
         BO    EDEXRCOK            YES, USE RC=0
         LA    R4,8                NO, SET RC=8
EDEXRCOK XC    EDBL,EDBL
         MVI   EDBLFF+1,1          PREPARE BLDL PARAMETER LIST FOR USE
         MVI   EDBLLL+1,76         (COPIED TO BLDL LATER SO MUST HAVE)
         TM    DCBOFLGS,DCBOFOPN   IS DCB STILL OPEN?
         BZ    EDCLOSED            NO
         TM    STATUS7,$7SAVE      WAS DATA CHANGED THIS SESSION?
         BNO   EDCLOSIT            NO, GO CLOSE IT
         TM    DS1DSORG,DS1DSGPO   PARTITIONED ORGANISATION?
         BNO   EDCLOSIT            NO, GO CLOSE IT
         MVC   EDBLNAME,$MEMBER    SET MEMBER NAME
         BLDL  EDITDCB,EDBL        GET LATEST MEMBER DETAILS
EDCLOSIT MVI   CLOSED,X'80'        YES, CLOSE IT
         CLOSE (EDITDCB),MF=(E,CLOSED)
EDCLOSED NI    EDFLG2,255-E2OPNU   FLAG DCB CLOSED
         L     R0,EDBUFSIZ         GET I/O BUFFER SIZE
         L     R1,EDBUFADR         POINT TO I/O BUFFER
         LTR   R1,R1               BUFFER STILL THERE?
         BZ    EDIOGONE            NO
         FREEMAIN RU,LV=(0),A=(1)  FREE IT
         XC    EDBUFADR,EDBUFADR   RESET I/O BUFFER POINTER
EDIOGONE L     R0,EDYNSIZE         GET SCREEN COPY BUFFER SIZE
         L     R1,EDYNCOPY         POINT TO DYNAMIC BUFFER
         LTR   R1,R1               BUFFER STILL THERE?
         BZ    COPYGONE            NO
         FREEMAIN RU,LV=(0),A=(1),SP=12 FREE IT
         XC    EDYNCOPY,EDYNCOPY   RESET COPY BUFFER POINTER
COPYGONE BAS   R3,FREELBLS         FREE LABEL ELEMENT STORAGE
         TM    EDFLG2,E2ALOC       DATA SET ALLOCATED?
         BNO   EALCGONE            NO
         XC    MYDAPB,MYDAPB
         MVI   DA18CD+1,X'18'
         MVC   DA18DDN,$DDNAME     DDNAME
         MVC   DA18MNM,EDBLNKS     MEMBER NAME
         MVC   DA18SCLS,EDBLNKS    SYSOUT CLASS IS 2-BYTE FIELD
         XC    MYECB,MYECB
         XASAM24
         LA    R1,MYDAPL
         L     R15,CVTPTR(,0)      CVT
         L     R15,CVTDAIR-CVT(,R15)
         BASR  R14,R15             CALL IKJDAIR TO FREE FILE
         XASAM31
         NI    EDFLG2,255-E2ALOC   FLAG DEALLOCATION
EALCGONE MVC   MYDSCB,$EDDSCB      RESTORE FILE PARTICULARS
         MVC   $PASSWRD($DSVARSZ),$EDSAVE
         TM    EDFLG2,E2ENQ        DATA SET ENQUEUED?
         BNO   EENQGONE            NO
         XC    EDENQPRM,EDENQPRM   CLEAR DEQ PARAMETER LIST
         MVI   EDENQPRM,X'C0'      USE ORIGINAL PARAMETER LIST FORMAT
         DEQ   (EDSPFQN,EDDSNMEM,52,SYSTEMS),RET=NONE,MF=(E,EDENQPRM)
         NI    EDFLG2,255-E2ENQ    FLAG DEQUEUE
EENQGONE DS    0H                  ALL RESOURCES FREED EXCEPT STORAGE
         AIF   (&ENVESA).DSPCDEL
EDATLOOP ICM   R1,15,EDATORIG      ANY DATA STORAGE TO FREE?
         BZ    EDATGONE            NO
         L     R0,4(,R1)           YES, GET THE SIZE OF THIS CHUNK
         MVC   EDATORIG,0(R1)      SAVE THE CHAINING POINTER
***      L     R14,RECURS#         GET THE SCREEN NUMBER
***      AR    R14,R14             DOUBLE IT
***      LA    R14,15(,R14)        GET THE SUBPOOL NUMBER
***      FREEMAIN RU,LV=(0),A=(1),SP=(14)
         FREEMAIN RU,LV=(0),A=(1)
         B     EDATLOOP            GO FREE THE NEXT CHUNK
*                                  EDIT DATA STORAGE ALL FREED
EDATGONE DS    0H
         AGO   .DSPCGON
.DSPCDEL ANOP
         ICM   R0,15,DSPCALET      IS THE DATA SPACE ALET ACTIVE?
         BZ    ALETGONE            NO
         ALESERV DELETE,ALET=DSPCALET,MF=(E,ALESERVL)
         XC    DSPCALET,DSPCALET   RESET ALET
ALETGONE CLI   DSPCTOKN,0          WAS DATA SPACE CREATED?
         BE    DSPCGONE            NO
         DSPSERV DELETE,STOKEN=DSPCTOKN,MF=(E,DSPCWORK,COMPLETE)
         MVI   DSPCTOKN,0          FLAG DATA SPACE DESTRUCTION
DSPCGONE DS    0H                  DATA SPACE RESOURCE ALL FREED
.DSPCGON ANOP
         LM    R0,R1,EDDIRLEN      FREE SCREEN DIRECTORY
         LTR   R1,R1               WAS IT ACQUIRED?
         BZ    EDDIRGON            NO
         FREEMAIN RU,LV=(0),A=(1),SP=12
EDDIRGON L     R15,UNDOSTO@
         BASR  R14,R15             CLOSE AND FREE UNDO FILE
         L     R15,EDPROFS@
         BASR  R14,R15             UPDATE EDIT PROFILE IF APPROPRIATE
         MVC   BLDL,EDBL           PASS BACK MEMBER DIRECTORY ENTRY
         MVC   $OTHUP,EDFLG4       PASS BACK FLAG WHICH MAY RECOMMEND
         NI    $OTHUP,E4OTHUP         A DIRECTORY REFRESH
         MVC   MODE,ED_MODE        RESTORE MODE FLAG BYTE
         LR    R1,R13              POINT TO WORKING STORAGE
         L     R13,4(,R13)         POINT TO CALLER'S SAVE AREA
         L     R0,@EDSIZE
         FREEMAIN RU,LV=(0),A=(1),SP=12
EDIT_END NI    STATUS,255-STABEND  RESET DCB ABEND FLAG
         MVI   SYNADSW,0           RESET I/O ERROR FLAG
         NI    STATUS11,255-$11EDT-$11VIEW   END OF EDIT/VIEW
         L     R14,12(,R13)        RESTORE RETURN ADDRESS
         LR    R15,R4              SET RETURN CODE
         LM    R0,R12,20(R13)      RESTORE OTHER REGISTERS
         BR    R14                 RETURN TO CALLER
         TITLE '  R E V E D I T   -   C O M M O N   R O U T I N E S  '
EDCMDTST CLC   0(0,R1),1(R5)       <<< EXECUTED >>>
EDNUMTRT TRT   0(0,R14),0(R2)      <<< EXECUTED >>>
EDNUMPAK PACK  DOUBLE(8),0(0,R14)  <<< EXECUTED >>>
EDMEMMVC MVC   BLDLNAME(0),0(R14)  <<< EXECUTED >>>
EDSAVLAB MVC   0(0,R2),0(R1)       <<< EXECUTED >>>
         SPACE
         SPACE
*         REPORT INVALIDLY SPECIFIED PRIMARY COMMAND
*
EDCOLOP  MVI   MSG,114             INVALID COLUMN RANGE
         B     EDSHOOP
EDINVOP  MVI   MSG,34              INVALID OPERAND
EDSHOOP  CLI   REPLY,ENTERAID      ENTER AID PRESENT?
         BNE   EDITCYCL            NO, WHOLE COMMAND NOT RECALLABLE
         TM    STATUS9,$9ISPF      ISPF PERFORMING SCREEN I/O?
         BO    EDITCYCL            YES, CAN'T RECALL FROM HERE
         LA    R15,OPD1            ASSUME PROBLEM WAS FIRST OPERAND
         TM    OPD2+6,PRESENT      MORE THAN ONE OPERAND?
         BNO   *+8                 NO, SO ASSUMPTION IS CORRECT
         L     R15,16(,R13)        YES, POINT TO OPERAND DESCRIPTOR
         TM    6(R15),QUOTED       IS THE OPERAND QUOTED?
         L     R15,0(,R15)         POINT TO THE OPERAND
         BNO   EDGOTOP             NO, IT WAS NOT QUOTED
         BCTR  R15,0               BACK UP TO THE QUOTE
         BCTR  R15,0               BACK UP TO THE STRING TYPE
         CLI   0(R15),C'C'         IS IT REALLY A STRING TYPE?
         BNL   EDGOTOP             YES, NOW HAVE REAL OPERAND START
         LA    R15,1(,R15)         NO, GO FORWARD TO THE QUOTE AGAIN
EDGOTOP  S     R15,OPD0            GET OPERAND OFFSET IN COMMAND STRING
         BNP   EDITCYCL            JUST IN CASE
         LA    R15,1(,R15)         CONVERT OFFSET TO POSITION
         ST    R15,REVPOS          SET CURSOR POSITION
         MVC   REVCSR,EDZCMDNM     SET CURSOR FIELD
         MVC   EDCSROUT,EDZEROS    REMOVE CURSOR FROM DYNAMIC AREA
         MVC   CSRRECAD,EDZEROS    REMOVE CURSOR FROM DYNAMIC AREA
         OI    STATUS14,$14RCL     REDISPLAY THE COMMAND
         B     EDITCYCL
EDMISOP  MVI   MSG,35              MISSING OPERAND
EDSHOCMD CLI   REPLY,ENTERAID      ENTER AID PRESENT?
         BNE   EDITCYCL            NO, WHOLE COMMAND NOT RECALLABLE
         TM    STATUS9,$9ISPF      ISPF PERFORMING SCREEN I/O?
         BO    EDITCYCL            YES, CAN'T RECALL FROM HERE
         OI    STATUS14,$14RCL     REDISPLAY THE COMMAND
         B     EDITCYCL
ED2MANY  MVI   MSG,51              TOO MANY OPERANDS
         CR    R15,R10             DOES R15 POINT TO AN OPERAND?
         BNE   *+8                 YES, PRESERVE IT
         LA    R15,OPD2            NO, POINT TO THE SECOND OPERAND
         ST    R15,16(,R13)        SAVE FOR EDSHOOP
         B     EDSHOOP
EDINCON  MVI   MSG,113             INCONSISTENT OPERANDS
         B     EDITCYCL
EDBDCOL  MVI   MSG,114             INVALID COLUMN RANGE
         B     EDITCYCL
EDNOWON  MVI   MSG,143             SETTING NOW ON
         B     EDITRFC
EDNOWOFF MVI   MSG,144             SETTING NOW OFF
         B     EDITRFC
EDUNCHGD MVI   MSG,145             SETTING UNCHANGED
         B     EDITRFC
         SPACE
         SPACE
*         VALIDATE AND INTERPRET SUBCOMMAND OPERAND SPECIFYING A LABEL
*
*              ON ENTRY: R15 = OPERAND DESCRIPTOR ADDRESS
*                        R14 = RETURN ADDRESS
*
*              ON EXIT:  LAST BYTE OF OPD SET TO 'L' IF A VALID LABEL
*                        R0 -> LABELLED LINE ELEMENT IF A VALID LABEL
*                         OR = 0 OTHERWISE
*
*              ALL OTHER GPRS ARE PRESERVED
*
EDVLABEL TM    6(R15),PRESENT      IS AN OPERAND PRESENT?
         BNOR  R14                 NO
         CLI   7(R15),0            STRING TYPE OR KEYWORD OPERAND?
         BNER  R14                 YES, SO NOT A LABEL
         SR    R0,R0               RESET LINE ELEMENT ADDRESS
         STM   R14,R12,12(R13)     SAVE REGISTERS
         LAM   A0,A15,EDZEROS      ZERO ACCESS REGISTERS
         LAM   A2,A2,DSPCALET      LOAD DATA SPACE ALET
         L     R1,0(,R15)          POINT TO THE OPERAND
         CLI   0(R1),C'.'          IS IT A LABEL?
         BNE   EDVFYLBX            NO, IT IS NOT
         CLI   5(R15),2            IS THE OPERAND SIMPLY A PERIOD?
         BL    EDVFYLBX            YES, SO THAT'S NOT A LABEL
         CLI   5(R15),7            IS IT TOO LONG?
         BH    EDVFYLBX            YES, SO NOT A LABEL
         BL    EDZEDCHK            NO
         CLC   EDZFIRST,1(R1)      IS IT '.ZFIRST'?
         BNE   EDVFYLBX            NO, TOO LONG FOR USER LABEL
EDZVFYZF L     R2,TOPADDR          POINT TO TOP OF DATA
         SAC   512                 SET AR MODE
         L     R0,FWD(,R2)         POINT TO FIRST RECORD
         SAC   0                   SET PRIMARY MODE
         B     EDVFYLBY            VALID "Z" LABEL
EDZEDCHK CLI   1(R1),C'Z'          NON-USER LABEL?
         BNE   EDNOTZED            NO, IT MUST BE A USER LABEL
         CLI   5(R15),3            IS LENGTH 3?
         BE    EDZEDLN3            YES
         CLI   5(R15),5            IS LENGTH 5?
         BE    EDZEDLN5            YES
         CLI   5(R15),6            IS LENGTH 6?
         BNE   EDVFYLBX            NO, NOT A KNOWN NON-USER LABEL
         CLC   EDZLAST,1(R1)       IS IT '.ZLAST'?
         BNE   EDVFYLBX            NO, NOT A KNOWN NON-USER LABEL
EDZVFYZL L     R2,BTMADDR          POINT TO END OF DATA
         SAC   512                 SET AR MODE
         L     R0,BAK(,R2)         POINT TO LAST RECORD
         SAC   0                   SET PRIMARY MODE
         B     EDVFYLBY            VALID "Z" LABEL
EDZEDLN3 CLC   1(2,R1),EDZFIRST    IS IT '.ZF'?
         BE    EDZVFYZF            YES, VALID "Z" LABEL
         CLC   1(2,R1),EDZLAST     IS IT '.ZL'?
         BE    EDZVFYZL            YES, VALID "Z" LABEL
         B     EDVFYLBX            NO, NOT A KNOWN NON-USER LABEL
EDZEDLN5 CLC   EDZCSR,1(R1)        IS IT '.ZCSR'?
         BNE   EDVFYLBX            NO, NOT A KNOWN NON-USER LABEL
         ICM   R0,15,CSRRECAD      YES, POINT TO RECORD WITH CURSOR
         BNZ   EDVFYLBY            GOT IT
         L     R0,LINEADDR         OTHERWISE USE FIRST LINE ON SCREEN
         B     EDVFYLBY            VALID "Z" LABEL
         SPACE
EDNOTZED LA    R6,LABANKOR         POINT TO THE LABEL ANCHOR
         USING @EDLABEL,R6
EDNOTZLP LR    R4,R6               SAVE PREVIOUS POINTER
         ICM   R6,15,EDL_NEXT      POINT TO NEXT LABEL ELEMENT
         BZ    EDVFYLBX            END OF CHAIN AND NOT MATCHED
         L     R2,EDL_ADDR         POINT TO LABELLED LINE
         SAC   512                 SET AR MODE
         TM    FLG2(R2),255-LLBL   DELETED LINE?
         SAC   0                   SET PRIMARY MODE
         BNO   EDVFYLOK            NO, GOOD
         SAC   512                 SET AR MODE
         MVI   FLG2(R2),255-LLBL   YES, RESET LABELLED FLAG
         SAC   0                   SET PRIMARY MODE
         LR    R1,R6               POINT TO LABEL ELEMENT
         LR    R6,R4               POINT TO PREVIOUS LABEL ELEMENT
         MVC   EDL_NEXT,0(R1)      DECHAIN ELEMENT FOR DELETED LINE
         L     R15,LBBANKOR        POINT TO NEWEST LABEL BLOCK
         USING @EDLBLHD,R15
         MVC   EDL_NEXT-@EDLABEL(4,R1),ELH_FREE
         ST    R1,ELH_FREE         PUT ELEMENT ON FREE-TO-REUSE CHAIN
         B     EDNOTZLP            RESUME CHAIN SEARCH
         DROP  R15                 @EDLBLHD
EDVFYLOK LA    R4,EDL_NAME         POINT TO ITS NAME
         LA    R5,L'EDL_NAME       GET ITS LENGTH
         L     R0,0(,R15)          POINT TO THE OPERAND
         LA    R1,C' '             GET PAD CHARACTER
         SLL   R1,24               PROMOTE IT TO HIGH BYTE
         AH    R1,4(,R15)          GET THE OPERAND LENGTH
         CLCL  R4,R0               FOUND MATCHING ELEMENT?
         BNE   EDNOTZLP            WELL, NOT YET
         L     R0,EDL_ADDR         POINT TO LINE ELEMENT
         DROP  R6                  @EDLABEL
EDVFYLBY ST    R0,20(,R13)         SAVE LINE ELEMENT ADDRESS
         MVI   7(R15),C'L'         FLAG OPERAND AS VALID LABEL
EDVFYLBX LM    R14,R12,12(R13)     RESTORE REGISTERS
         LAM   A2,A2,EDZEROS       CLEAR DATA SPACE ALET
         BR    R14                 RETURN TO CALLER
         SPACE
         SPACE
*         ACQUIRE STORAGE FOR A NEW LABEL ELEMENT
*
*              ON ENTRY:  R14 = RETURN ADDRESS
         SPACE
GETALABL LA    R1,LBBANKOR         POINT TO LABEL BLOCK CHAIN ANCHOR
         USING @EDLBLHD,R1
LABBLKLP ICM   R1,15,ELH_NEXT      POINT TO NEXT LABEL BLOCK
         BZ    NEWLABLK            END OF CHAIN SO MAKE A NEW BLOCK
         ICM   R15,15,ELH_FREE     ANY FREE ELEMENTS?
         BNZ   REUSELBL            YES, GO REUSE ONE
         L     R15,ELH_HWM         POINT TO USUSED STORAGE
         C     R15,ELH_LIM         IS THERE ANY?
         BH    LABBLKLP            NO, GO TRY NEXT BLOCK ON CHAIN
LABBLKEX LA    R0,$EDL_LEN(,R15)   YES, POINT TO NEW UNUSED STORAGE
         ST    R0,ELH_HWM          UPDATE BLOCK HEADER
LABLELEX XC    0($EDL_LEN,R15),0(R15)     CLEAR NEW ELEMENT
         LR    R1,R15              POINT TO NEW ELEMENT
         SR    R15,R15             INDICATE SUCCESS
         BR    R14                 RETURN TO CALLER
         USING @EDLABEL,R15
REUSELBL MVC   ELH_FREE,EDL_NEXT   DECHAIN FREE ELEMENT
         B     LABLELEX            GO RETURN THIS ELEMENT FOR REUSE
NEWLABLK L     R0,EDFW4K           GET STORAGE FOR NEW BLOCK
         GETMAIN RC,LV=(0),BNDRY=PAGE,SP=12,LOC=(31,64)
         LTR   R15,R15             SUCCESS?
         BNZR  R3                  NO, RETURN WITH GETMAIN RESULT
         ST    R15,ELH_FREE        NO PREVIOUSLY USED ELEMENTS YET
         L     R15,EDFW4K          GET STORAGE SIZE
         AR    R15,R1              POINT PAST NEW STORAGE
         LA    R0,$EDL_LEN         GET LENGTH OF AN ELEMENT
         SR    R15,R0              GET ENTRY ADDRESS LIMIT
         ST    R15,ELH_LIM         SAVE IT
         LA    R15,$ELH_LEN(,R1)   POINT PAST HEADER
         ST    R15,ELH_HWM         SAVE UNUSED STORAGE ADDRESS
         MVC   ELH_NEXT,LBBANKOR   ENCHAIN THE NEW BLOCK
         ST    R1,LBBANKOR         MAKE THE NEW BLOCK CURRENT
         B     LABBLKEX            GO USE THE NEW STORAGE
         DROP  R1                  @EDLBLHD
*         FREE STORAGE USED FOR LABEL ELEMENTS
*
*              ON ENTRY:  R3 = RETURN ADDRESS
         SPACE
FREELBLS ICM   R1,15,LBBANKOR      POINT TO FIRST LABEL BLOCK
         ST    R1,LABANKOR         ALSO ZERO THE ELEMENT CHAIN
         BZR   R3                  THERE ARE NONE SO RETURN
         USING @EDLBLHD,R1
         MVC   LBBANKOR,ELH_NEXT   SAVE ADDRESS OF NEXT BLOCK
         LA    R0,$EDL_LEN
         A     R0,ELH_LIM          POINT PAST THE STORAGE TO FREE
         SR    R0,R1               FREE THE LABEL ELEMENT
         DROP  R1                  @EDLBLHD
         FREEMAIN RU,LV=(0),A=(1),SP=12
         B     FREELBLS            CONTINUE FREEING ALL LABEL BLOCKS
         SPACE
         SPACE
*         DELETE CAUTION MESSAGE
*
*              ON ENTRY:  R14 = RETURN ADDRESS
*                          R0 = MESSAGE CONTENT TO DELETE:
*                               ONE BYTE IS CURRENTLY UNAMBIGUOUS
*
*              ON EXIT :  GPRS 3,4,5,15 NOT PRESERVED
*                         ALL ACCESS REGISTERS ARE ZERO
*                         ASC MODE SET TO PRIMARY
         SPACE
CAUT2WND DC    0H'0'               THROW CAUTION TO THE WIND
         LAM   A0,A15,EDZEROS      ZERO ACCESS REGISTERS
         LAM   A3,A3,DSPCALET      LOAD DATA SPACE ALET
         LAM   A4,A4,DSPCALET      LOAD DATA SPACE ALET
         LAM   A5,A5,DSPCALET      LOAD DATA SPACE ALET
         L     R3,TOPADDR          POINT TO TOP OF DATA
         L     R15,EDITREA@        POINT TO EDITREAD ROUTINE
         SAC   512                 SET AR MODE
EDCAUTLP L     R3,FWD(,R3)         POINT TO THE NEXT RECORD
         TM    FLG1(R3),LMSG       MESSAGE LINE?
         BNO   EDCAUTEX            NO, END OF CHECK
         TM    FLG3(R3),LFIX       CAUTION LINE?
         BNO   EDCAUTEX            NO, END OF CHECK
         CLC   CTLLEN(12,R3),EDPRFWRN-EDITREAD(R15)
         BNE   EDCAUTLP
         CLM   R0,1,CTLLEN+L'EDPRFWRN+1(R3)
         BNE   EDCAUTLP            THIS ONE NOT ON TOPIC
         LM    R4,R5,FWD(R3)       GET FORWARD AND BACKWARD POINTERS
         ST    R4,FWD(,R5)         PREVIOUS NOW POINTS FORWARD TO NEXT
         ST    R5,BAK(,R4)         NEXT NOW POINTS BACK TO PREVIOUS
         MVC   FWD(4,R3),MPTANKOR  COPY EMPTY CHAIN ANCHOR
         ST    R3,MPTANKOR         ADD THIS TO THE EMPTY CHAIN
         L     R15,MSGLINES        GET MESSAGE LINE COUNT
         BCTR  R15,0               DECREMENT IT
         ST    R15,MSGLINES        SAVE UPDATED COUNTER
EDCAUTEX SAC   0                   SET PRIMARY MODE
         LAM   A3,A5,EDZEROS       ZERO ACCESS REGISTERS
         BR    R14                 RETURN TO CALLER
         SPACE
         SPACE
*         DELETE PROFILE MESSAGES AT TOP
*
*              ON ENTRY:  R14 = RETURN ADDRESS
*                          R0 = MESSAGE CONTENT TO DELETE:
*                               ONE BYTE IS CURRENTLY UNAMBIGUOUS
*
*              ON EXIT :  GPRS 3,4,5 NOT PRESERVED
*                         ARS 3,4,5 CONTAIN REVEDSPC ALET
*                         AR ASC MODE SET
         SPACE
WIPEPROF L     R3,TOPADDR          POINT TO TOP OF DATA
         LAM   A0,A15,EDZEROS      ZERO ACCESS REGISTERS
         LAM   A3,A3,DSPCALET      LOAD DATA SPACE ALET
         LAM   A4,A4,DSPCALET      LOAD DATA SPACE ALET
         LAM   A5,A5,DSPCALET      LOAD DATA SPACE ALET
         L     R3,TOPADDR          POINT TO TOP OF DATA
         SAC   512                 SET AR MODE
EDWIPELP ICM   R3,15,FWD(R3)       POINT TO THE NEXT RECORD
         BZR   R14                 BOTTOM OF DATA REACHED
         TM    FLG1(R3),LMSG       MESSAGE LINE?
         BNO   EDWIPELP            NO, CONTINUE SCAN
         TM    FLG3(R3),LFIX       AN ALWAYS LEFT-MAX MESSAGE?
         BNO   EDWIPELP            NO, CONTINUE SCAN
         CLI   CTLLEN(R3),C' '     DYNAMICALLY GENERATED LINE?
         BNL   EDWIPELP            NO, CONTINUE SCAN
         LM    R4,R5,FWD(R3)       GET FORWARD AND BACKWARD POINTERS
         ST    R4,FWD(,R5)         PREVIOUS NOW POINTS FORWARD TO NEXT
         ST    R5,BAK(,R4)         NEXT NOW POINTS BACK TO PREVIOUS
         MVC   FWD(4,R3),MPTANKOR  COPY EMPTY CHAIN ANCHOR
         ST    R3,MPTANKOR         ADD THIS TO THE EMPTY CHAIN
         L     R3,MSGLINES         GET MESSAGE LINE COUNT
         BCTR  R3,0                DECREMENT IT
         ST    R3,MSGLINES         SAVE UPDATED COUNTER
         LR    R3,R5               POINT TO DELETED LINE'S PREVIOUS
         B     EDWIPELP            CONTINUE SCAN
         SPACE
         SPACE
*         DCB SYNAD EXIT
         SPACE
EDSYNAD  DS    0H
         SYNADAF ACSMETH=BSAM
         MVC   SYNADMSG,50(R1)
         MVI   SYNADSW,X'FF'
         SYNADRLS
         BR    R14
         SPACE
         SPACE
*         DCB ABEND EXIT
         SPACE
EDABENDX DS    0H
         MVC   EDIOABND,0(R1)      COPY ABEND CODE AND OPTION MASK
         OI    EDIOABND+1,X'0F'    GET CODE READY FOR UNPACK
         OI    STATUS,STABEND      INDICATE I/O ABEND
         TM    3(R1),B'00001110'   ANY PROCESSING ALLOWED?
         BZR   R14                 NO
         MVI   3(R1),16+4          YES, NO WTP AND IGNORE THE ABEND
         MVI   MSG,36              MEMBER NOT FOUND
         CLC   =X'013018',0(R1)    S013-18?
         BER   R14                 YES, MESSAGE IS CORRECT
         MVC   MSG(MSGIOABL),MSGIOAB
         UNPK  IOABCDE,EDIOABND(2)
         UNPK  IOABRSN(3),EDIOABND+2(2)
         TR    IOABCDE(6),EDHEX-C'0'
         MVI   IOABCDE+3,C'-'
         MVI   IOABRSN+2,C' '
         OI    STATUS7,$7BELL
         NI    EDFLG1,255-SAVEX    ERROR - CANCEL TERMINATION REQUEST
         TM    STATUS10,$10CAP     CAPS ON?
         BOR   R14                 YES
         XC    MSG+3(4),EDBLNKS
         XC    IOABRSN+3(8),EDBLNKS
         BR    R14
         TITLE '  H A N D L E   N E W   T E R M I N A L  '
*  FIRST FREE ALL STORAGE THAT WILL BE FREED, THEN REACQUIRE
*  THE AREAS IN DESCENDING SIZE ORDER TO MAXIMIZE THE CHANCES
*  THAT THE STORAGE CAN BE FOUND.
         SPACE
         SPACE
*         FREE SCREEN SIZE-DEPENDENT AREAS
         SPACE
EDITNTRM LM    R0,R1,EDDIRLEN      FREE SCREEN DIRECTORY
         FREEMAIN RU,LV=(0),A=(1),SP=12
         L     R0,EDYNSIZE         GET SCREEN COPY BUFFER SIZE
         L     R1,EDYNCOPY         POINT TO DYNAMIC BUFFER
         FREEMAIN RU,LV=(0),A=(1),SP=12 FREE IT
         SPACE
         SPACE
*         ACQUIRE STORAGE FOR SCREEN BUFFER COPY
         SPACE
         L     R14,SCRNCOLS        GET SCREEN WIDTH
         AR    R14,R14             DOUBLE IT
         L     R0,SCREENSZ         GET SCREEN BUFFER SIZE
         SR    R0,R14              GET DYNAMIC AREA SIZE
         ST    R0,EDYNSIZE         SAVE ITS SIZE
         MVI   GETMNTRC,41         TRACK GETMAIN IN CASE OF FAILURE
         GETMAIN RU,LV=(0),SP=12,LOC=(31,64)
         ST    R1,EDYNCOPY         SAVE ITS ADDRESS
         SPACE
         SPACE
*         ACQUIRE SCREEN DATA LINE DIRECTORY
         SPACE
         L     R0,SCRNLNES         GET NUMBER OF SCREEN LINES
         BCTR  R0,0
         BCTR  R0,0                GET MAXIMUM NUMBER OF DATA LINES
         MH    R0,=Y(EDIRSIZ)      GET REQUIRED DIRECTORY SIZE
         ST    R0,EDDIRLEN         SAVE THE DIRECTORY SIZE
         MVI   GETMNTRC,42         TRACK GETMAIN IN CASE OF FAILURE
         GETMAIN RU,LV=(0),SP=12,LOC=(31,64)
         ST    R1,EDITDIR@         SAVE THE DIRECTORY ADDRESS
         SPACE
         SPACE
*         RECALCULATE MAXIMUM WIDTHS AND LEFT/RIGHT SCROLL SITUATION
         SPACE
         NI    EDFLG1,255-E1SHORT  RESET FLAG
         SR    R0,R0               GET ZERO
         L     R15,SCRNCOLS        GET SCREEN WIDTH
         S     R15,EDFW8           GET VIEWABLE DATA WIDTH
         ST    R15,VIEWIDTH        SAVE IT
         ST    R15,EDATWDTH        SAVE IT
         C     R15,MAXRECSZ        DATA TOO SHORT TO FILL LINE?
         BNH   EDNEWDTH            NO
         OI    EDFLG1,E1SHORT      YES, REMEMBER THIS
         MVC   EDATWDTH,MAXRECSZ   SAVE ACTUAL DATA WIDTH
         ST    R0,EDOFFSET         ENSURE SCROLLED LEFT MAX
EDNEWDTH ICM   R15,15,EDOFFSET     GET CURRENT SCROLL RIGHT OFFSET
         BZ    EDITLOOP            AT LEFT MAX SO ALL DONE HERE
         A     R15,VIEWIDTH        GET HIGHEST COLUMN ON SHOW
         C     R15,MAXRECSZ        SCROLLED TOO FAR RIGHT?
         BNH   EDITLOOP            NO, SO ALL DONE HERE
         L     R15,MAXRECSZ        GET MAXIMUM RECORD SIZE
         S     R15,VIEWIDTH        GET MAXIMUM SCROLL RIGHT OFFSET
         ST    R15,EDOFFSET        AT RIGHT MAX
         BNM   EDITLOOP            ALL DONE
         ST    R0,EDOFFSET         OFFSET NEGATIVE SO GO LEFT MAX
         B     EDITLOOP            ALL DONE
         TITLE '  M A I N L I N E   S T A T I C   A R E A  '
EDITINI@ DC    A(EDITINIT)         ADDRESS OF INITIALIZATION ROUTINE
EDITREA@ DC    A(EDITREAD)         ADDRESS OF EDIT FILE INPUT ROUTINE
EDITSCR@ DC    A(EDITSCRN)         ADDRESS OF SCREEN PAINT ROUTINE
EDITMER@ DC    A(EDITMERG)         ADDRESS OF DATA MERGE ROUTINE
EDITPAR@ DC    A(EDITPARS)         ADDRESS OF COMMAND PARSE ROUTINE
EDITLIN@ DC    A(EDITLINE)         ADDRESS OF LINE COMMAND ROUTINE
EDTCMDT@ DC    A(EDTCMDTB)         ADDRESS OF SUBCOMMAND TABLE
GETALIN@ DC    A(GETALINE)         ADDRESS OF DATA STORAGE ROUTINE
EDITSNT@ DC    A(EDITSNTX)         ADDRESS OF SYNTAX COLOURING ROUTINE
UNDOINI@ DC    A(UNDOINIT)         ADDRESS OF UNDO START UP ROUTINE
UNDOSTO@ DC    A(UNDOSTOP)         ADDRESS OF UNDO SHUT DOWN ROUTINE
UNDOSAV@ DC    A(UNDOSAVE)         ADDRESS OF UNDO WRITE OUT ROUTINE
UNDORES@ DC    A(UNDOREST)         ADDRESS OF UNDO RESTORE ROUTINE
EDPROFS@ DC    A(EDPROFSV)         ADDRESS OF PROFILE SAVE ROUTINE
EDRFIND@ DC    A(EDRFIND)          ADDRESS OF 'IFIND' COMMAND ROUTINE
EDRCHG@  DC    A(EDRCHG)           ADDRESS OF 'ICHANGE' COMMAND ROUTINE
EDALCOAD DC    A(REVALCO)          OUTPUT ENQ/ALLOCATION ROUTINE
EDDALOAD DC    A(REVDALO)          OUTPUT DEQ/DEALLOCATION ROUTINE
EDCOMMAD DC    A(REVCOMM)          TERMINAL COMMUNICATION ROUTINE
EDMSGSAD DC    A(REVMSGS)          PRE-DEFINED MESSAGES ROUTINE
EDPROFAD DC    A(REVPROF)          PROFILE MEMBER I/O ROUTINE
EDKEYPRS DC    A(REVKYPRS)         PARSE SUBCOMMAND KEYWORDS
EDKAPSAD DC    A(KAPS)             UPPER CASING TRANSLATE TABLE
EDTABNUM DC    A(TABNUMER)         NUMERIC DETECTION TRANSLATE TABLE
EDTABALF DC    A(TABALPHA)         ALPHABETIC DETECTION TRANSLATE TABLE
EDXDATAD DC    A(HEXDATA)          HEXADECIMAL DATA TRANSLATE TABLE
EDXTSTAD DC    A(HEXTEST)          HEX DATA VERIFY TRANSLATE TABLE
EDNONBLA DC    A(TABNONBL)         NON-BLANK DETECT TRANSLATE TABLE
EDIOXLST DC    X'91',AL3(EDABENDX) DCB EXIT LIST
EDZEROS  DC    16F'0'
EDFW1    DC    F'1'
EDFW2    DC    F'2'
EDFW3    DC    F'3'
EDFW4    DC    F'4'
EDFW5    DC    F'5'
EDFW6    DC    F'6'
EDFW7    DC    F'7'
EDFW8    DC    F'8'
EDFW10   DC    F'10'
EDFW12   DC    F'12'
EDFW50   DC    F'50'
EDFW72   DC    F'72'
EDFW80   DC    F'80'
EDFW127  DC    F'127'
EDFW4K   DC    F'4096'
         AIF   (&ENVESA).DSPCSIZ
EDCHUNK  DC    A(16*4096)          ALLOCATE 16 PAGES PER CHUNK
         AGO   .ESIZEOK
.DSPCSIZ ANOP
DSPCMXSZ DC    F'524288'           MAXIMUM DATA SPACE 4K BLOCK COUNT
DSPCINIT DC    F'256'              INITIAL DATA SPACE 4K BLOCK COUNT
DSPCEXSZ DC    F'256'              ENLARGE DATA SPACE 4K BLOCK COUNT
DSPCNAME DC    CL8'REVEDSPC'       NAME OF DATA SPACE
DSPCTEXT DC    CL16'REVEDIT D-SPACE '
.ESIZEOK ANOP
EDSPFQN  DC    CL8'SPFEDIT '       ENQUEUE MAJOR RESOURCE NAME
REVHE00  DC    CL8'REVHE00 '       NAME OF FIRST REVEDIT HELP PANEL
$$REVEDT DC    CL8'$$REVEDT'       NAME OF EDIT PROFILE MEMBER
EDALLDA  DC    CL8'SYSALLDA'
EDVIO    DC    CL8'VIO     '
EDHEX    DC    C'0123456789ABCDEF'
         DC    C'GHIJKLMNOPQRSTUV' ENOUGH FOR RCRSLIM UP TO 31
EDX21C   DC    X'021C'
EDNUMMIN DC    H'40'               MINIMUM LRECL FOR SEQUENCE NUMBERS
EDDEC0   DC    PL1'0'
EDDEC1   DC    PL1'1'
EDDEC100 DC    PL2'100'
EDED5Z   DS    0XL6
EDED9Z   DS    0XL10
EDED11Z  DC    XL12'402020202020202020202020'
EDSTARS  DC    CL6'******'
EDDASHES DC    CL6'- - - '
EDBLNKS  DC    CL8'        '
EDZCMDNM DC    CL8'ZCMD    '
EDREVBUF DC    CL8'REVBUF  '
EDZLAST  DC    CL5'ZLAST'
EDZFIRST DC    CL6'ZFIRST'
EDZCSR   DC    CL4'ZCSR'
EDEX     DC    CL2'EX'
EDNX     DC    CL2'NX'
EDUC     DC    CL2'UC'
EDLC     DC    CL2'LC'
EDMD     DC    CL2'MD'
EDHITAB@ EQU   *                   HILITE TYPE TABLE (8-BYTE ENTRIES)
EDOFF    DC    CL3'OFF',CL5' '     0
EDCJCL   DC    CL3'JCL',CL5' '     1 - EDJCL
EDCAUTO  DC    CL4'AUTO',CL4' '    2 - EDAUTO
EDCASM   DC    CL3'ASM',CL5' '     3 - EDASM
EDCCLIST DC    CL5'CLIST',CL3' '   4 - EDCLIST
EDCPLI   DC    CL3'PLI',CL5' '     5 - EDPLI
EDCCOBOL DC    CL5'COBOL',CL3' '   6 - EDCOBOL
EDHITAB# EQU   (*-EDHITAB@)/8
EDCDATA  DC    CL4'DATA'           6 - EDDATA
ED_D_S   DC    CL2'./'             DOT-SLASH
ED_D_A   EQU   *,2                 DOT-ASTERISK
         DC    CL1'.'
ED_A_S   EQU   *,2                 ASTERISK-SLASH
         DC    CL1'*'
ED_S_S   EQU   *,2                 SLASH-SLASH
ED_S_S_A DC    CL3'//*'            SLASH-SLASH-ASTERISK
ED_S_A   EQU   *-2,2               SLASH-ASTERISK
EDPROFHD DC    C'DSNAME,DATE,LVL,CAPS,NUM,HEX,NUL,ZAP,DSNC,HI,COLS,AUTO+
               SAVE'
EDPROFH2 DC    C',TAB1,TAB2,TAB3,TAB4,TAB5,TAB6,TAB7,TAB8,ASCII,C#NX,HI+
               DE,PRESERVE'
MSGIOAB  MESG  'ABEND SXXX-XX OCCURRED'
IOABCDE  EQU   MSG+9,3
IOABRSN  EQU   MSG+13,2
MSGEALC  MESG  'ALLOCATION FAILED RC=XX CTRC=XXXX DARC=XXXX'
EALCRC   EQU   MSG+23,2
EALCCTRC EQU   MSG+31,4
EALCDARC EQU   MSG+41,4
         DC    0D'0'
         LTORG
         SPACE
         DC    0F'0'
         SPACE
EDTRENDR DC    64AL1(FLDINLO),191AL1(*-EDTRENDR),AL1(FLDINLO)
         SPACE
EDTLOWER DC    129X'00'
         DC    9X'FF'              LOWER A-I
         DC    7X'00'
         DC    9X'FF'              LOWER J-R
         DC    8X'00'
         DC    8X'FF'              LOWER S-Z
         DC    86X'00'
         SPACE
EDTUPPER DC    193X'00'
         DC    9X'FF'              UPPER A-I
         DC    7X'00'
         DC    9X'FF'              UPPER J-R
         DC    8X'00'
         DC    8X'FF'              UPPER S-Z
         DC    22X'00'
         SPACE
EDTUNKAP DC    193AL1(*-EDTUNKAP)  00-C0
         DC    9AL1(*-EDTUNKAP-64) C1-C9 BECOME 81-89
         DC    7AL1(*-EDTUNKAP)    CA-C0
         DC    9AL1(*-EDTUNKAP-64) D1-D9 BECOME 91-99
         DC    8AL1(*-EDTUNKAP)    DA-E1
         DC    8AL1(*-EDTUNKAP-64) E2-E9 BECOME A2-A9
         DC    22AL1(*-EDTUNKAP)   EA-FF
         SPACE
EDITKAPS DC    129AL1(*-EDITKAPS)  00-80
         DC    9AL1(*-EDITKAPS+64) 81-89 BECOME C1-C9
         DC    7AL1(*-EDITKAPS)    8A-90
         DC    9AL1(*-EDITKAPS+64) 91-99 BECOME D1-D9
         DC    8AL1(*-EDITKAPS)    9A-A1
         DC    8AL1(*-EDITKAPS+64) A2-A9 BECOME E2-E9
         DC    86AL1(*-EDITKAPS)   AA-FF
         TITLE '  S U B C O M M A N D   L O O K - U P   T A B L E  '
*   FLAG BYTE: B'.......1' - EXECUTE COMMAND BEFORE LINE COMMANDS
*              B'1111111.' - KEYWORD VECTOR SLOT NUMBER
*
EDTCMDTB DC    0F'0'
         DC    AL1(00),CL11'<          ',A(EDLEFT)
         DC    AL1(00),CL11'+          ',A(EDDOWN)
         DC    AL1(00),CL11'-          ',A(EDUP)
         DC    AL1(00),CL11'>          ',A(EDRIGHT)
EDRT@$   EQU   *-EDTCMDTB-4
         DC    AL1(00),CL11'=X         ',A(EDEQALSX)
         DC    AL1(02),CL11'ASCII      ',A(EDASCII)
         DC    AL1(02),CL11'AUTOSAVE   ',A(EDAUTOSV)
         DC    AL1(00),CL11'BND        ',A(EDBOUNDS)
         DC    AL1(00),CL11'BNDS       ',A(EDBOUNDS)
         DC    AL1(00),CL11'BOT        ',A(EDBOTTOM)
         DC    AL1(00),CL11'BOTTOM     ',A(EDBOTTOM)
         DC    AL1(00),CL11'BOU        ',A(EDBOUNDS)
         DC    AL1(00),CL11'BOUND      ',A(EDBOUNDS)
         DC    AL1(00),CL11'BOUNDS     ',A(EDBOUNDS)
         DC    AL1(08),CL11'C          ',A(EDCHANGE)
         DC    AL1(01),CL11'CAN        ',A(EDCANCEL)
         DC    AL1(01),CL11'CANCEL     ',A(EDCANCEL)
         DC    AL1(02),CL11'CAPS       ',A(EDCAPS)
         DC    AL1(08),CL11'CHA        ',A(EDCHANGE)
         DC    AL1(08),CL11'CHANGE     ',A(EDCHANGE)
         DC    AL1(08),CL11'CHG        ',A(EDCHANGE)
         DC    AL1(02),CL11'COL        ',A(EDCOLUMN)
         DC    AL1(02),CL11'COLS       ',A(EDCOLUMN)
         DC    AL1(02),CL11'COLUMNS    ',A(EDCOLUMN)
         DC    AL1(14),CL11'COMPARE    ',A(EDCOMP)
         DC    AL1(00),CL11'COPY       ',A(EDCOPY)
         DC    AL1(00),CL11'CRE        ',A(EDCREATE)
         DC    AL1(00),CL11'CREATE     ',A(EDCREATE)
         DC    AL1(00),CL11'CUT        ',A(EDCUT)
         DC    AL1(10),CL11'DEL        ',A(EDDELETE)
         DC    AL1(10),CL11'DELETE     ',A(EDDELETE)
         DC    AL1(00),CL11'DOWN       ',A(EDDOWN)
         DC    AL1(02),CL11'DSNC       ',A(EDSNCHK)
         DC    AL1(02),CL11'DSNCHK     ',A(EDSNCHK)
         DC    AL1(02),CL11'DSNCHECK   ',A(EDSNCHK)
         DC    AL1(00),CL11'END        ',A(EDEND)
         DC    AL1(08),CL11'EX         ',A(EDEXCLD)
         DC    AL1(08),CL11'EXCLUDE    ',A(EDEXCLD)
         DC    AL1(00),CL11'EXN        ',A(EDEXNOT)
         DC    AL1(00),CL11'EXNOT      ',A(EDEXNOT)
         DC    AL1(00),CL11'EXIT       ',A(EDEQALSX)
         DC    AL1(08),CL11'F          ',A(EDFIND)
         DC    AL1(08),CL11'FIND       ',A(EDFIND)
         DC    AL1(08),CL11'FINDNOT    ',A(EDFNDNOT)
         DC    AL1(00),CL11'FLIP       ',A(EDFLIP)
         DC    AL1(08),CL11'FN         ',A(EDFNDNOT)
         DC    AL1(02),CL11'HEX        ',A(EDHEXMD)
         DC    AL1(00),CL11'HI         ',A(EDHILITE)
         DC    AL1(02),CL11'HIDE       ',A(EDHIDE)
         DC    AL1(00),CL11'HILITE     ',A(EDHILITE)
         DC    AL1(00),CL11'ICHANGE    ',A(EDRCHG)
         DC    AL1(00),CL11'IFIND      ',A(EDRFIND)
         DC    AL1(04),CL11'L          ',A(EDLOCATE)
         DC    AL1(00),CL11'LEFT       ',A(EDLEFT)
         DC    AL1(00),CL11'LEV        ',A(EDLEVEL)
         DC    AL1(00),CL11'LEVEL      ',A(EDLEVEL)
         DC    AL1(04),CL11'LIST       ',A(EDLOCATE)
         DC    AL1(04),CL11'LOC        ',A(EDLOCATE)
         DC    AL1(04),CL11'LOCATE     ',A(EDLOCATE)
         DC    AL1(02),CL11'NUL        ',A(EDNULLS)
         DC    AL1(02),CL11'NULL       ',A(EDNULLS)
         DC    AL1(02),CL11'NULLS      ',A(EDNULLS)
         DC    AL1(16),CL11'NUM        ',A(EDNUMBER)
         DC    AL1(16),CL11'NUMB       ',A(EDNUMBER)
         DC    AL1(16),CL11'NUMBER     ',A(EDNUMBER)
         DC    AL1(00),CL11'PASTE      ',A(EDPASTE)
         DC    AL1(02),CL11'PRESERVE   ',A(EDPRESRV)
         DC    AL1(00),CL11'PROF       ',A(EDPROFIL)
         DC    AL1(00),CL11'PROFILE    ',A(EDPROFIL)
         DC    AL1(08),CL11'RCHANGE    ',A(EDRCHG)
         DC    AL1(00),CL11'REDO       ',A(EDREDO)
         DC    AL1(00),CL11'REN        ',A(EDRENUM)
         DC    AL1(00),CL11'RENUM      ',A(EDRENUM)
         DC    AL1(00),CL11'RENUMBER   ',A(EDRENUM)
         DC    AL1(00),CL11'REP        ',A(EDREPL)
         DC    AL1(00),CL11'REPL       ',A(EDREPL)
         DC    AL1(00),CL11'REPLACE    ',A(EDREPL)
         DC    AL1(07),CL11'RES        ',A(EDRESET)
         DC    AL1(07),CL11'RESET      ',A(EDRESET)
         DC    AL1(00),CL11'RETURN     ',A(EDEQALSX)
         DC    AL1(08),CL11'RFIND      ',A(EDRFIND)
         DC    AL1(00),CL11'RIGHT      ',A(EDRIGHT)
         DC    AL1(00),CL11'SAVE       ',A(EDSAVE)
         DC    AL1(00),CL11'SB         ',A(EDSUBMIT)
         DC    AL1(12),CL11'SORT       ',A(EDSORT)
         DC    AL1(02),CL11'STATS      ',A(EDSTATS)
         DC    AL1(00),CL11'SUB        ',A(EDSUBMIT)
         DC    AL1(00),CL11'SUBMIT     ',A(EDSUBMIT)
         DC    AL1(00),CL11'TABS       ',A(EDTABS)
         DC    AL1(00),CL11'TOP        ',A(EDTOP)
         DC    AL1(02),CL11'UNDO       ',A(EDUNDO)
         DC    AL1(00),CL11'UNN        ',A(EDUNNUM)
         DC    AL1(00),CL11'UNNUM      ',A(EDUNNUM)
         DC    AL1(00),CL11'UNNUMBER   ',A(EDUNNUM)
         DC    AL1(00),CL11'UP         ',A(EDUP)
         DC    AL1(00),CL11'VER        ',A(EDVER)
         DC    AL1(00),CL11'VERS       ',A(EDVER)
         DC    AL1(00),CL11'VERSION    ',A(EDVER)
         DC    AL1(08),CL11'X          ',A(EDEXCLD)
         DC    AL1(08),CL11'XN         ',A(EDEXNOT)
         DC    AL1(02),CL11'ZAP        ',A(EDZAPMEM)
         DC    F'-1'               END OF SUBCOMMAND TABLE
EDTCMDL  EQU   16                  SUBCOMMAND ENTRY LENGTH
         TITLE '  E D I T I N I T   -   I N I T I A L I Z A T I O N  '
         USING EDITINIT,R10
EDITINIT LR    R10,R15             SET LOCAL BASE
         ST    R14,EDRETSV1        SAVE RETURN ADDRESS
         SPACE
         TM    STATUS,STPODIR      DIRECTORY INFORMATION LOADED?
         BNO   *+8                 YES, LET REVPDS CLEAR FLAG
         NI    STATUS7,255-$7SAVE  NO, NO CHANGES BY REVEDIT SO FAR
         NI    FINDSW,255-FVRT     NO REPOSITIONING FOR FOUND DATA
         NI    FINDSW2,255-FALL    'FIND' IS NOT TO ASSUME 'ALL'
         OI    STATUS10,$10CAP     USE 'CAPS ON' IF NO LOWER CASE
         SR    R0,R0
         ST    R0,FNDNUM           RESET FIND LOCATION STATUS
         ST    R0,FNDOFF
         MVC   EDLVLIND,=C'00'     ENSURE NUMERIC SEQUENCE NUMBERS
         MVI   EDPLI1+1,1          SET DEFAULT PL/I MARGINS
         MVI   EDPLI2+1,72
         SPACE
         SPACE
*         ACQUIRE SCREEN DATA LINE DIRECTORY
         SPACE
         L     R0,SCRNLNES         GET NUMBER OF SCREEN LINES
         BCTR  R0,0
         BCTR  R0,0                GET MAXIMUM NUMBER OF DATA LINES
         MH    R0,=Y(EDIRSIZ)      GET REQUIRED DIRECTORY SIZE
         ST    R0,EDDIRLEN         SAVE THE DIRECTORY SIZE
         MVI   GETMNTRC,43         TRACK GETMAIN IN CASE OF FAILURE
         GETMAIN RC,LV=(0),SP=12,LOC=(31,64)
         LTR   R15,R15             STORAGE ACQUIRED?
         BNZ   EDINITAB            NO, RETURN WITH THE BAD NEWS
         ST    R1,EDITDIR@         SAVE THE DIRECTORY ADDRESS
         SPACE
         SPACE
*         SERIALIZE THE DATA SET TO BE EDITED
         SPACE
         TM    STATUS11,$11VIEW    JUST HERE FOR THE VIEW?
         BO    EDENQOK             YES, DO NOT SERIALIZE DATA SET
         MVC   EDDSNMEM(44),DSNAIM+2    COPY THE DATA SET NAME
         MVC   EDDSNMEM+44(8),$MEMBER   COPY THE MEMBER NAME
         LA    R4,14               PREPARE FOR ENQ FAILURE
         XC    EDENQPRM,EDENQPRM   CLEAR ENQ PARAMETER LIST
         MVI   EDENQPRM,X'C0'      USE ORIGINAL PARAMETER LIST FORMAT
         ENQ   (EDSPFQN,EDDSNMEM,E,52,SYSTEMS),RET=USE,MF=(E,EDENQPRM)
         LTR   R15,R15             FILE AVAILABLE?
         BZ    EDENQDON            YES, ENQUEUE IS DONE
         MVI   MSG,120             DATA SET IN USE
         CLI   $MEMBER,C' '        COPYING TO A MEMBER?
         BE    EDINITEX            NO, RETURN WITH THE BAD NEWS
         MVI   MSG,54              MEMBER IN USE
         B     EDINITEX            RETURN WITH THE BAD NEWS
EDENQDON OI    EDFLG2,E2ENQ        FLAG ENQUEUE
         SPACE
         SPACE
*         ALLOCATE THE SPECIFIC DATA SET IF NECESSARY
         SPACE
EDENQOK  ICM   R0,3,ARLRTRVD       CONCATENATED FILE?
         BZ    EDALLOCD            NO, NO ALLOCATION NECESSARY
         TM    DS1DSORG,DS1DSGPO   PARTITIONED ORGANISATION?
         BNO   EDALLOCD            NO, NO ALLOCATION NECESSARY
         MVC   $DSNAME(46),DSNAIM  YES, EDIT DATA SET NAME
         XC    MYDAPB,MYDAPB
         MVI   DA08CD+1,X'08'
         LA    R0,$DSNAME
         ST    R0,DA08PDSN
         MVC   DA08DDN,EDBLNKS
         MVC   DA08UNIT,EDBLNKS
         MVC   DA08SER,EDBLNKS
         MVC   DA08MNM,EDBLNKS
         MVC   DA08PSWD,EDBLNKS
         MVI   DA08DSP1,DA08SHR
         MVI   DA08DPS2,DA08KEEP
         MVI   DA08DPS3,DA08KEP
         XC    MYECB,MYECB
         XASAM24
         LA    R1,MYDAPL
         L     R15,CVTPTR(,0)      CVT
         L     R15,CVTDAIR-CVT(,R15)
         BASR  R14,R15             CALL IKJDAIR
         XASAM31
         MVC   $DDNAME,DA08DDN     COPY GENERATED DD NAME
         LTR   R15,R15             SUCCESSFUL ALLOCATION?
         BNZ   EDINITEX            NO, RETURN WITH THE BAD NEWS
         OI    EDFLG2,E2ALOC       FLAG ALLOCATION
         LA    R1,$DDNAME          POINT TO NEW DDNAME
         L     R15,=A(REVDDLOC)    POINT TO SUBROUTINE
         BASR  R14,R15             FIND NEW DD TIOT ENTRY
         LTR   R15,R15             IS IT ALLOCATED?
         BZ    EDALLOCD            NO, BUT HOW?
         SR    R5,R5
         ICM   R5,7,17(R15)        GET THE UCB ADDRESS
         ST    R5,$UCBAD           SAVE IT
         MVC   $VOLSER,28(R5)      LOAD THE VOLUME SERIAL NUMBER
EDALLOCD EQU   *                   ALLOCATION COMPLETE
         SPACE
         SPACE
*         CHECK ACCESS AND UPDATE COPY OF VTOC ENTRY
         SPACE
         NI    STATUS14,255-$14ALT FLAG ALTER ACCESS NOT REQUIRED
         NI    STATUS13,255-$13COMP
         L     R5,$UCBAD           POINT TO THE DATA SET'S (FIRST) UCB
         XC    MYDSCB,MYDSCB       CLEAR RESIDUAL VTOC ENTRY DATA
         CLI   18(R5),X'80'        TAPE DATA SET?
         BE    EDDAORNO            YES, SKIP VTOC ENTRY OBTAIN
         TM    STATUS11,$11VIEW    JUST HERE FOR THE VIEW?
         BO    *+8                 YES, DO NOT REQUIRE UPDATE ACCESS
         OI    STATUS13,$13COMP    FLAG UPDATE ACCESS REQUIRED
         L     R15,=A(REVDASD)     POINT TO DASD INITIALIZATION ROUTINE
         BASR  R14,R15             CALL IT - IT ALSO REFRESHES OBTAINW
         NI    STATUS13,255-$13COMP
         LA    R4,20               SET ERROR RETURN CODE
         LTR   R15,R15             SUCCESS?
         BNZ   EDINITEX            NO, RETURN WITH THE BAD NEWS
         SPACE
         SPACE
*         ACQUIRE EDIT PROFILE DATA FOR THIS DATA SET
         SPACE
EDDAORNO MVC   EPDSN,DSNAIM+2      COPY DATA SET NAME TO BE EDITED
         MVI   EPCAPS,1            START WITH CAPS ON
*        MVI   EPNUM,0             START WITH NUM OFF
*        MVI   EPHEX,0             START WITH HEX OFF
*        MVI   EPNULLS,0           START WITH NULLS OFF
         MVI   EPZAP,1             START WITH ZAP ON
         MVI   EPDSNC,1            START WITH DSNCHK ON
         LA    R1,EDCAUTO          START WITH HI AUTO
         CLC   EDFW80,MAXRECSZ     80-BYTE RECORDS?
         BNE   *+8                 NO
         LA    R1,EDOFF            YES, START WITH HI OFF
         MVC   EPHI,0(R1)          SET DEFAULT HILITE
*        MVI   EPCOLS,0            START WITH COLS OFF
         MVI   EPAS,1              START WITH AUTOSAVE ON
*        MVI   EPASCII,0           START WITH ASCII OFF
         NI    MODE,255-MD_ASCII
*        MVI   EPHIDE,0            START WITH HIDE OFF
*        MVI   EPPRES,0            START WITH PRESERVE OFF
         MVC   DOUBLE,$$REVEDT     SET PROFILE MEMBER NAME TO READ
         LA    R0,EPSZ*80
         AR    R0,R0               SET PROFILE MEMBER SIZE
         SR    R1,R1               INDICATE NO STORAGE PREPARED
         L     R15,EDPROFAD        POINT TO PROFILE MANAGER
         BASR  R14,R15             FETCH PROFILE
         LM    R0,R1,DOUBLE        LOAD PROFILE DATA DETAILS
         LTR   R1,R1               IS THERE ANY DATA?
         BNP   EPINDONE            NO
         LR    R2,R0               YES, GET ITS SIZE
         S     R2,EDFW80
         S     R2,EDFW80           DISCOUNT HEADER
         BNP   EPINFREE            DATA IS TOO SHORT
         LA    R3,80+80(,R1)       POINT PAST ORIGINAL HEADER
EPINLOOP CLC   EPDSN,0(R3)         FOUND A MATCH?
         BE    EPINMTCH            YES
         LA    R3,80(,R3)          NO, POINT TO NEXT ENTRY
         S     R2,EDFW80           REDUCE LENGTH TO GO
         BP    EPINLOOP            GO CHECK NEXT ENTRY
         B     EPINFREE            NOT FOUND IN PROFILE
EPINMTCH MVC   EDITPROF,0(R3)      COPY DATA FROM PROFILE
         C     R2,EDFW80           WAS THAT THE LAST 80 BYTES?
         BNH   EPINFREE            YES, MUST HAVE BEEN OLD FORMAT
         LA    R2,EDTABL/4         GET TAB COLUMN NUMBER COUNT
         LA    R15,EDTAB#          POINT TO TAB COLUMN SAVE AREA
         MVI   EDTABMIN,99         SET MINIMUM INVALIDLY HIGH
EPINTBLP CLI   80(R3),C','         EXPECTED DELIMITER PRESENT?
         BNE   EPINFREE            NO, ASSUME TAB COLUMN NOT PRESENT
         OC    81(5,R3),=C'00000'  PREVENT ANY S0C7
         TR    81(5,R3),EDHEX-C'0'
         PACK  DOUBLE,81(5,R3)
         CVB   R14,DOUBLE
         ST    R14,0(,R15)         SAVE TAB COLUMN NUMBER
         LTR   R14,R14             ANY COLUMN NUMBER PRESENT?
         BZ    EDINMNOK            NO
         C     R14,EDTABMIN        YES, IS IT THE SMALLEST SO FAR?
         BNL   EDINMNOK            NO
         ST    R14,EDTABMIN        YES, SAVE IT
EDINMNOK LA    R3,6(,R3)           POINT TO NEXT PROFILE DATAUM
         LA    R15,4(,R15)         POINT TO NEXT SAVE AREA SLOT
         BCT   R2,EPINTBLP
EPINFREE MVI   EDTABMIN,0          CLEAR HIGH SETTING IF STILL PRESENT
         FREEMAIN RU,LV=(0),A=(1)  FREE THE PROFILE DATA STORAGE
EPINDONE MVI   EPSEP01,C','        SUPPLY SEPARATORS
         MVI   EPSEP02,C','
         MVI   EPSEP03,C','
         MVI   EPSEP04,C','
         MVI   EPSEP05,C','
         MVI   EPSEP06,C','
         MVI   EPSEP07,C','
         MVI   EPSEP08,C','
         MVI   EPSEP09,C','
         MVI   EPSEP10,C','
         MVI   EPSEP11,C','
         MVI   EPSEP20,C','
         MVI   EPSEP21,C','
         MVI   EPSEP22,C','
         MVI   EPSEP23,C','
         MVI   EPLVL,C'0'
         MVI   EPLVL+1,C'0'        PROFILE DATA STRUCTURE LEVEL
*        NI    EPCAPS,C'1'         (EPCAPS FLAG REBUILT BEFORE EXIT)
*        OI    EPCAPS,C'0'
         TM    DCBRECFM,DCBRECCA+DCBRECCM
         BZ    *+8                 NO CARRIAGE CONTROL
         NI    EPNUM,C'0'          SET 'NUM OFF STD'
         TM    DCBRECFM,DCBRECV    VARIABLE-LENGTH RECORDS?
         BNO   *+8                 NO
         NI    EPNUM,C'1'          YES, ENSURE 'STD' NOT 'COBOL'
         NI    EPNUM,C'3'          RESET UNWANTED BITS
         OI    EPNUM,C'0'          SET REQUIRED BITS
         NI    EPHEX,C'1'          RESET UNWANTED BITS
         OI    EPHEX,C'0'          SET REQUIRED BITS
*        NI    EPNULLS,C'1'        (EPNULLS FLAG REBUILT BEFORE EXIT)
*        OI    EPNULLS,C'0'
         NI    EPZAP,C'1'          RESET UNWANTED BITS
         OI    EPZAP,C'0'          SET REQUIRED BITS
         NI    EPDSNC,C'1'         RESET UNWANTED BITS
         OI    EPDSNC,C'0'         SET REQUIRED BITS
*        NI    EPCOLS,C'1'         (EPCOLS FLAG REBUILT BEFORE EXIT)
*        OI    EPCOLS,C'0'
*        NI    EPAS,C'1'           (EPAS FLAG REBUILT BEFORE EXIT)
*        OI    EPAS,C'0'
         NI    EPASCII,C'1'        RESET UNWANTED BITS
         OI    EPASCII,C'0'        SET REQUIRED BITS
         NI    MODE,255-MD_ASCII
         TM    EPASCII,X'01'
         BZ    *+8
         OI    MODE,MD_ASCII
         NI    EPHIDE,C'1'         RESET UNWANTED BITS
         OI    EPHIDE,C'0'         SET REQUIRED BITS
         NI    EPPRES,C'1'         RESET UNWANTED BITS
         OI    EPPRES,C'0'         SET REQUIRED BITS
         OI    STATUS14,$14NUL     SET NULLS ON
         TM    EPNULLS,1           WAS NULLS ON IN PROFILE?
         BO    *+8                 YES, LEAVE NULLS ON
         NI    STATUS14,255-$14NUL NO, SET NULLS OFF
         OI    STATUS7,EDCOLS      SET COLS ON
         TM    EPCOLS,1            WAS COLS ON IN PROFILE?
         BO    *+8                 YES, LEAVE COLS ON
         NI    STATUS7,255-EDCOLS  NO, SET COLS OFF
         CLC   EPC#NX,=C'127'      IS COMPARE X NX NUMBER TOO HIGH?
         BH    EDPRC#BD            YES
         L     R2,EDTABNUM         POINT TO TRANSLATE TABLE
         TRT   EPC#NX,0(R2)        THREE NUMERICS?
         BZ    EDPRC#GD            YES
EDPRC#BD MVC   EPC#NX,=C'005'      LOAD DEFAULT VALUE OF 5
EDPRC#GD CLI   EPAS,C'0'           ACTUAL AUTOSAVE SETTING PRESENT?
         BL    EDASOKAY            NO, DO NOT CHANGE THE SETTING
         OI    STATUS16,$16NAS     SET AUTOSAVE OFF
         TM    EPAS,1              WAS AUTOSAVE OFF IN PROFILE?
         BZ    EDASOKAY            YES, LEAVE AUTOSAVE OFF
         NI    STATUS16,255-$16NAS NO, SET AUTOSAVE ON
EDASOKAY LA    R1,EDHITAB@         POINT TO VALID HILITE TYPES
         LA    R0,EDHITAB#         GET THE NUMBER OF HILITE TYPES
EDPRFLP4 CLC   EPHI,0(R1)          VALID HILITE TYPE?
         BE    EDHIGOOD            YES, CONTINUE
         LA    R1,8(,R1)           NO MATCH SO POINT TO NEXT
         BCT   R0,EDPRFLP4         CONTINUE CHECKING TABLE
         LA    R0,EDHITAB#         GET VALUE FOR HI OFF
         CLC   EDFW80,MAXRECSZ     80-BYTE RECORDS?
         BNE   EDHIGOOD            NO
         BCTR  R0,0                YES, GET VALUE FOR HI AUTO
EDHIGOOD LA    R1,EDHITAB#         GET THE NUMBER OF HILITE TYPES
         SR    R1,R0               GET THE RELATIVE ENTRY NUMBER
         STC   R1,EDHITYP          SAVE IT
         TM    EPNUM,3             NUMBER ON COBOL?
         BNO   *+8                 NO
         MVI   EDFLG3,EDCOBOL      YES, FORMAT AS COBOL
         CLI   EDHITYP,EDASM       MANDATORY SOURCE TYPE SET?
         BL    *+8                 NO
         STC   R1,EDFLG3           YES, SO SET IT
         AIF   (&ENVESA).GETDSPC
         SPACE
         SPACE
*         ACQUIRE STORAGE TO HOLD FILE DATA
         SPACE
         L     R0,EDCHUNK          GET THE ALLOCATION CHUNK SIZE
         MVI   GETMNTRC,44         TRACK GETMAIN IN CASE OF FAILURE
***      L     R14,RECURS#         GET THE SCREEN NUMBER
***      AR    R14,R14             DOUBLE IT
***      LA    R14,15(,R14)        GET THE SUBPOOL NUMBER
***      GETMAIN RC,LV=(0),BNDRY=PAGE,SP=(14),LOC=(31,64)
         GETMAIN RC,LV=(0),BNDRY=PAGE,LOC=(31,64)
         LTR   R15,R15             SUCCESS?
         BNZ   EDINITAB            NO
         ST    R1,EDATORIG         UPDATE THE STORAGE CHAIN ORIGIN
         L     R0,EDCHUNK          GET THE INITIAL STORAGE SIZE
         ST    R0,4(,R1)           SAVE THE SIZE OF THIS CHUNK
         ST    R0,EDDATASZ         SAVE STORAGE SIZE BACKING DATA
         S     R0,EDFW8            DISCOUNT CONTROL AREA
         LA    R14,CTLLEN+CTLLEN   GET LENGTH OF INITIAL ENTRIES
         SR    R0,R14              DISCOUNT THEIR SIZE
         ST    R0,FREESIZE         SAVE STORAGE AVAILABLE FOR USE
         LA    R1,8(,R1)           POINT TO FIRST DATA SPOT
         ST    R1,TOPADDR          SAVE THE TOP ENTRY ADDRESS
         LA    R2,CTLLEN(,R1)      POINT PAST THE TOP ENTRY
         ST    R2,BTMADDR          SAVE THE END ENTRY ADDRESS
         ST    R2,FWD(,R1)         CHAIN INITIAL ENTRIES
         ST    R1,BAK(,R2)
         ST    R1,LINEADDR         SHOW FROM TOP OF DATA
         LA    R1,CTLLEN(,R2)      POINT PAST THE END ENTRY
         ST    R1,FREEAREA         SAVE FIRST ADDRESS TO USE
         AGO   .EALETOK
.GETDSPC ANOP
         SPACE
         SPACE
*         CREATE DATA SPACE TO HOLD FILE DATA
         SPACE
         DSPSERV CREATE,                                               +
               STOKEN=DSPCTOKN,                                        +
               NAME=DSPCNAME,                                          +
               GENNAME=COND,                                           +
               BLOCKS=(DSPCMXSZ,DSPCINIT),                             +
               ORIGIN=DSPCORIG,                                        +
               MF=(E,DSPCWORK,COMPLETE)
         LTR   R15,R15             DATA SPACE CREATED?
         BZ    DSPCOKAY            YES
         STM   R15,R0,DOUBLE       NO, SAVE RETURN AND REASON CODES
         MVC   MSG(MSGDSCL),MSGDSC COPY MESSAGE TEMPLATE
         UNPK  DSPCRERC(3),DOUBLE+3(2)
         TR    DSPCRERC,EDHEX-C'0' SHOW HEXADECIMAL RETURN CODE
         MVI   DSPCRERC+2,C' '
         UNPK  DSPCRERS(9),DOUBLE+4(5)
         TR    DSPCRERS,EDHEX-C'0' SHOW HEXADECIMAL REASON CODE
*        MVI   DSPCRERS+8,C' '
         OI    STATUS7,$7BELL      SOUND AUDIBLE ALARM
         LA    R4,20               SET FAILURE RETURN CODE
         B     EDINITEX            RETURN WITH THE BAD NEWS
         SPACE
DSPCOKAY L     R1,DSPCINIT         GET INITIAL PAGE COUNT
         SLL   R1,12               MULTIPLY BY 4096
         ST    R1,FREESIZE         SAVE AVAILABLE BYTE COUNT
         ST    R1,EDDATASZ         SAVE STORAGE SIZE BACKING DATA
         SPACE
         SPACE
*         ESTABLISH DATA SPACE ADDRESSABILITY
         SPACE
         ALESERV ADD,STOKEN=DSPCTOKN,ALET=DSPCALET,MF=(E,ALESERVL)
         LTR   R15,R15             DATA SPACE NOW ACCESSIBLE?
         BZ    EDALETOK            YES
         STC   R15,DOUBLE          NO, SAVE RETURN CODE
         MVC   MSG(MSGALAL),MSGALA COPY MESSAGE TEMPLATE
         UNPK  ALEADDRC(3),DOUBLE(2)
         TR    ALEADDRC,EDHEX-C'0' SHOW HEXADECIMAL RETURN CODE
*        MVI   ALEADDRC+2,C' '
         OI    STATUS7,$7BELL      SOUND AUDIBLE ALARM
         LA    R4,20               SET FAILURE RETURN CODE
         B     EDINITEX            RETURN WITH THE BAD NEWS
         SPACE
MSGDSC   MESG  'DSPSERV CREATE FAILED - RC=12 REASON=12345678'
DSPCRERC EQU   MSG+29,2
DSPCRERS EQU   MSG+39,8
         SPACE
MSGALA   MESG  'ALESERV ADD FAILED - HEX RC=12'
ALEADDRC EQU   MSG+30,2
         SPACE
EDALETOK DC    0H'0'               DATA SPACE NOW ACCESSIBLE
.EALETOK ANOP
         SPACE
         SPACE
*         ACQUIRE STORAGE FOR SCREEN BUFFER COPY
         SPACE
         L     R14,SCRNCOLS        GET SCREEN WIDTH
         AR    R14,R14             DOUBLE IT
         L     R0,SCREENSZ         GET SCREEN BUFFER SIZE
         SR    R0,R14              GET DYNAMIC AREA SIZE
         ST    R0,EDYNSIZE         SAVE ITS SIZE
         MVI   GETMNTRC,45         TRACK GETMAIN IN CASE OF FAILURE
         GETMAIN RC,LV=(0),SP=12,LOC=(31,64)
         ST    R1,EDYNCOPY         SAVE ITS ADDRESS
         LTR   R4,R15              SUCCESS?
         BZ    EDINITEX            YES
         XC    EDYNCOPY,EDYNCOPY   NO, RESET COPY BUFFER POINTER
EDINITAB LA    R4,20               SET ERROR RETURN CODE
         MVI   MSG,123             REQUEST ABORTED - STORAGE FULL
         SPACE
         SPACE
*         RETURN TO MAINLINE
         SPACE
EDINITEX LR    R15,R4              SET RETURN CODE
         L     R14,EDRETSV1        RESTORE RETURN ADDRESS
         BR    R14                 RETURN TO CALLER
         SPACE
         DROP  R10                 EDITINIT
         SPACE
         DC    0D'0'
         LTORG
         DC    0H'0'
         TITLE '  U N D O I N I T  '
         USING UNDOINIT,R10
UNDOINIT TM    UNDOFLGS,DCBOFOPN   IS UNDO FILE OPEN?
         BOR   R14                 YES, NOTHING TO DO HERE
         STM   R14,R12,12(R13)     NO, SAVE REGISTERS
         LR    R10,R15             SET LOCAL BASE
         LA    R2,EDSAVE2          POINT TO SAVE AREA
         ST    R13,4(,R2)          CHAIN SAVE AREAS
         ST    R2,8(,R13)
         LR    R13,R2              POINT TO NEW SAVE AREA
         MVC   UNDOCRNT,EDZEROS    RESET UNDO STATUS
         SPACE
*         DETERMINE IF THIS IS AN EDIT RECOVERY SITUATION
         SPACE
         CLI   $SUBCOM,C'$'        RECOVERY DDNAME SUPPLED?
         BL    UNDOTEST            NO, PERFORM NORMAL INITIALIZATION
         ICM   R0,15,TTR           TTR OF THE UNDOMEM0 MEMBER SUPPLIED?
         BZ    UNDOTEST            NO, PERFORM NORMAL INITIALIZATION
         L     R1,UNDOLATE         POINT TO LAST ENTRY
         ST    R1,UNDOCRNT         SET AS MOST RECENT CHECKPOINT
         MVC   0(4,R1),TTR         SAVE UNDOMEM0 TTR
         MVC   DA08DDN,$SUBCOM     SAVE UNDO FILE DDNAME
         MVC   TTR,EDZEROS         RESET RECOVERY INDICATION ITEMS
         MVC   $SUBCOM,EDBLNKS
         OI    EDFLG4,E4RECOV      FLAG EDIT RECOVERY IN PROGRESS
         B     UNDOTST2            IGNORE RECORD COUNT FOR RECOVERY
         SPACE
*         DETERMINE IF UNDO WILL BE ACTIVATED
         SPACE
UNDOTEST ICM   R0,3,RECLINES       FEWER THAN 64K RECORDS?
         BNZ   UNDONAVL            NO, DO NOT ACTIVATE UNDO
UNDOTST2 L     R1,EDFW4K
         SR    R0,R0
         ICM   R15,15,MAXRECSZ     GET MAXIMUM RECORD SIZE
         BNP   UNDONAVL            SOMETHING FUNNY THERE
         LA    R15,CTLLEN-8(,R15)  DO NOT SAVE CHAIN POINTERS
         DR    R0,R15              GET RECORDS PER UNDO BLOCK
         ST    R1,UNDOBLKF         SAVE UNDO BLOCKING FACTOR
         LTR   R1,R1               WILL AT LEAST ONE RECORD FIT?
         BNP   UNDONAVL            NO, DO NOT ACTIVATE UNDO
         TM    EDFLG4,E4RECOV      PERFORMING AN EDIT RECOVERY?
         BO    UNDOALCD            YES, ALREADY ALLOCATED - GO MAKE DCB
         SPACE
*         DETERMINE UNDO/RECOVERY DATA SET NAME
         SPACE
         MVI   EDSUBDSN+2,C' '     BLANK DATA SET NAME AREA
         MVC   EDSUBDSN+3(43),EDSUBDSN+2
         LA    R2,EDSUBDSN+2       POINT TO DATA SET NAME AREA
         SR    R3,R3               CLEAR DATA SET NAME LENGTH
         L     R1,REVPSCB          POINT TO THE PSCB
         USING PSCB,R1
         L     R15,REVUPT          POINT TO THE UPT
         USING UPT,R15
         MVC   0(7,R2),PSCBUSER    MAKE USERID HIGH LEVEL QUALIFIER
         IC    R3,PSCBUSRL         GET THE LENGTH OF THE USERID
         MVI   SUBREC,DA08UID      SET A FLAG MASK (DA04UID=DA08UID)
         CLI   PSCBUSER,C'>'       8-CHARACTER USERID?
         BNE   UNDOUID7            NO
         MVC   0(8,R2),PSCB+84     YES, LOAD PSCBUID8
         LA    R3,8                GET THE LENGTH OF THE USERID
         CLC   PSCB+84(8),UPT+33   PREFIX EQUALS USERID?
         B     UNDOUID8
UNDOUID7 CLC   PSCBUSER,UPTPREFX   PREFIX EQUALS USERID?
UNDOUID8 BNE   UNDOUID9            NO, SO SYSTEM SHOULD USE PREFIX
         MVI   SUBREC,0            YES, DO NOT ASK SYSTEM TO USE IT
         DROP  R1,R15              PSCB, UPT
UNDOUID9 AR    R2,R3               POINT PAST IT
         MVI   0(R2),C'.'          INSERT A PERIOD
         LA    R2,1(,R2)           POINT PAST IT
         LA    R3,1(,R3)           COUNT IT IN THE LENGTH
         MVC   0(15,R2),UNDODSN    SUPPLY THE FIXED DSNAME PARTS
         MVC   7(1,R2),RECURS#+3   SUPPLY REVIEW SESSION NUMBER
         TR    7(1,R2),EDHEX
         CLI   ZSCREEN,C'A'        VALID ISPF LOGICAL SESSION NUMBER?
         BL    UNDODSNM            NO, USE RFE SESSION NUMBER
         MVC   7(1,R2),ZSCREEN     YES, USE ISPF SESSION NUMBER
UNDODSNM MVC   MSG+2(15),0(R2)     PREPARE NAME FOR ERROR MESSAGE
         LA    R3,15(,R3)          GET TOTAL DATA SET NAME LENGTH
         STH   R3,EDSUBDSN         SET DSNAME LENGTH
         SPACE
*         VERIFY UNDO/RECOVERY DATA SET DOES NOT YET EXIST
         SPACE
         XC    MYDAPB,MYDAPB
         MVI   DA04CD+1,X'04'
         LA    R0,EDSUBDSN
         ST    R0,DA04PDSN
         OC    DA04CTL,SUBREC      SET DA04UID IF APPROPRIATE
         XC    MYECB,MYECB
         XASAM24
         LA    R1,MYDAPL
         L     R15,CVTPTR(,0)      CVT
         L     R15,CVTDAIR-CVT(,R15)
         BASR  R14,R15             CALL IKJDAIR
         XASAM31
         LTR   R15,R15             DOES FILE EXIST?
         BNZ   UNDOMAKE            NO, GO MAKE A NEW UNDO FILE
         MVC   MSG+17(11),UNDONTRE
         LA    R0,26
         STH   R0,MSG              SET MESSAGE LENGTH
         OI    STATUS7,$7BELL      SOUND BELL FOR ERROR MESSAGE
         NI    STATUS16,255-$16RFC CLEAR ANY PENDING COMMAND
         TM    STATUS10,$10CAP     CAPS ON?
         BO    UNDOINEX            YES, RETURN WITH MESSAGE SET
         XC    MSG+18(3),EDBLNKS
         XC    MSG+22(6),EDBLNKS
         B     UNDOINEX            RETURN WITH MESSAGE SET
         SPACE
*         ALLOCATE UNDO/RECOVERY DATA SET
         SPACE
UNDOMAKE LA    R14,EDBLNKS         USE UADS UNIT INITIALLY
UNDORALC XC    MYDAPB,MYDAPB
         MVI   DA08CD+1,X'08'
         LA    R0,EDSUBDSN
         ST    R0,DA08PDSN
         MVC   DA08DDN,EDBLNKS
         MVC   DA08UNIT,0(R14)
         MVC   DA08SER,EDBLNKS
         MVC   DA08MNM,EDBLNKS
         MVC   DA08PSWD,EDBLNKS
         MVI   DA08DSP1,DA08NEW
         MVI   DA08DPS2,DA08CAT    CATALOG IT AT CREATION TIME
         MVI   DA08DPS3,DA08CATL
         MVI   DA08CTL,DA08CYLS+DA08PERM
         OC    DA08CTL,SUBREC      SET DA08UID IF APPROPRIATE
         MVI   DA08PQTY+3,100      SET PRIMARY CYLINDER COUNT
         MVI   DA08DQTY+3,2        SET DIRECTORY BLOCK COUNT
         XC    MYECB,MYECB
         XASAM24
         LA    R1,MYDAPL
         L     R15,CVTPTR(,0)      CVT
         L     R15,CVTDAIR-CVT(,R15)
         BASR  R14,R15             CALL IKJDAIR
         XASAM31
         LTR   R15,R15
         BZ    UNDOALCD            FILE SUCCESSFULLY ALLOCATED
         CLI   DA08DARC,X'02'      VOLUME/UNIT DARC RANGE?
         BNE   UNDOALER            NO, THAT WASN'T THE PROBLEM
         LA    R14,EDALLDA         YES, POINT TO BACKUP UNIT NAME
         CLI   DA08UNIT,C'S'       HAVE WE ALREADY RETRIED?
         BNE   UNDORALC            NO, RETRY WITH ALTERNATE UNIT NAME
         SPACE
*         REPORT ALLOCATION FAILURE
         SPACE
UNDOALER MVC   MSG(MSGEALCL),MSGEALC
         MVC   MSG+2(10),UNDOALOC  SHOW THAT THE DYNALLOC WAS FOR UNDO
         STC   R15,DOUBLE
         UNPK  EALCRC(3),DOUBLE(2)
         TR    EALCRC(2),EDHEX-C'0'
         MVI   EALCRC+2,C' '
         UNPK  EALCCTRC(5),DA08CTRC(3)
         TR    EALCCTRC(4),EDHEX-C'0'
         MVI   EALCCTRC+4,C' '
         UNPK  EALCDARC(5),DA08DARC(3)
         TR    EALCDARC(4),EDHEX-C'0'
         OI    STATUS7,$7BELL      SOUND BELL FOR ERROR MESSAGE
         NI    STATUS16,255-$16RFC CLEAR ANY PENDING COMMAND
         B     UNDOINEX            RETURN WITH MESSAGE SET
         SPACE
*         SET UP REDO DCB          (EDITREAD LOADED DCB TEMPLATE)
         SPACE
UNDOALCD MVC   UNDDDNAM,DA08DDN    SET DDNAME INTO DCB
         MVI   UNDRECFM,DCBRECF+DCBRECBR
         L     R1,MAXRECSZ         GET STORAGE REQUIRED FOR RECORD
         LA    R1,CTLLEN-8(,R1)    DO NOT SAVE CHAINING POINTERS
         STH   R1,UNDLRECL         SET UNDO FILE RECORD LENGTH
         MH    R1,UNDOBLKF+2       GET UNDO FILE BLOCK SIZE
         STH   R1,UNDBLKSI         SET UNDO FILE BLOCK SIZE
         MVI   OPEND,X'80'         OPEN THE UNDO DCB
         LA    R0,EDIOXLST         POINT TO RELEVANT EXIT LIST
         STCM  R0,7,UNDEXLSA       SET IT INTO THE DCB
         TM    EDFLG4,E4RECOV      EDIT RECOVERY IN PROGRESS?
         BO    UNDOINEX            YES, SKIP UNNECESSARY STUFF
         OPEN  (UNDODCB,OUTPUT),MF=(E,OPEND)
         TM    UNDOFLGS,DCBOFOPN   IS DCB NOW OPEN?
         BNO   UNDONAVL            NO, CANNOT USE UNDO
         SPACE
*         CREATE IDENTIFICATION MEMBER
         SPACE
         LA    R0,2+44+8+6+8       GET MINIMUM RECORD LENGTH
         SR    R1,R1
UNDOM1LP CR    R1,R0               RECORD LONG ENOUGH?
         BNL   UNDOM1OK            YES
         AH    R1,UNDLRECL         NO, ADD ANOTHER RECORD LENGTH
         B     UNDOM1LP            GO RECHECK THE LENGTH
UNDOM1OK STH   R1,UNDBLKSI         SAVE ID MEMBER SIZE
         L     R4,EDBUFADR         POINT TO THE WRITE BUFFER
         LR    R0,R4               POINT TO THE WRITE BUFFER
         LA    R15,2+44            GET DATA SET NAME VARIABLE LENGTH
         ICM   R15,8,EDBLNKS       SET PAD CHARACTER
         LA    R14,$DSNAME         POINT TO DATA SET NAME VARIABLE
         MVCL  R0,R14              LOAD $DSNAME
         MVC   46(8,R4),$MEMBER    LOAD $MEMBER
         MVC   46+8(6,R4),$VOLSER  LOAD $VOLSER
         MVC   46+14(8,R4),UNDOREL LOAD RELEASE INDICATOR
         XASAM24
         WRITE DYNDECBW,SF,UNDODCB,(R4),'S',MF=E
         CHECK DYNDECBW            WAIT FOR WRITE TO FINISH
         XASAM31
         TM    STATUS,STABEND      I/O ABEND?
         BO    UNDOUTAB            YES
         CLI   SYNADSW,0           I/O ERROR?
         BNE   UNDOIOER            YES
         XC    EDLOCBUF,EDLOCBUF   ZERO SOME STORAGE
         MVC   EDLOCBUF(8),$REVEDID AND LOAD MEMBER NAME
         STOW  UNDODCB,EDLOCBUF,A  ADD THE IDENTITY MEMBER
         OI    EDFLG1,SAVEZ        YES, FLAG UNHARDENED DATA IN MEMORY
         B     UNDOINEX
         SPACE
*         HANDLE UNDO FILE ERROR CONDITIONS
         SPACE
UNDOIOER LA    R1,SYNADMSG         POINT TO ERROR MESSAGE
         LA    R0,L'SYNADMSG       GET THE MESSAGE LENGTH
         TPUT  (1),(0),R           ISSUE LINE MODE MESSAGE
         MVI   SYNADSW,0           RESET I/O ERROR FLAG
UNDONAVL MVI   MSG,146             UNDO NOT AVAILABLE
         NI    STATUS,255-STABEND  RESET DCB ABEND FLAG
         NI    STATUS16,255-$16RFC CLEAR ANY PENDING COMMAND
         SPACE
*         RETURN TO CALLER
         SPACE
UNDOINEX L     R13,4(,R13)         POINT TO CALLER'S SAVE AREA
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         MVC   8(4,R13),EDZEROS    RESET FORWARD CHAIN POINTER
         BR    R14                 RETURN TO CALLER
         SPACE
         DROP  R10                 UNDOINIT
UNDODSN  DC    CL16'REVEDIT0.BACKUP'
UNDOALOC DC    CL10'UNDO ALLOC'
UNDOREL  DC    CL8'&REL'
$REVEDID DC    CL8'$REVEDID'
UNDONTRE DC    CL11' NOT REUSED'
         DC    0H'0'
         TITLE '  U N D O S T O P  '
         USING UNDOSTOP,R10
UNDOSTOP STM   R14,R12,12(R13)     SAVE REGISTERS
         LR    R10,R15             SET LOCAL BASE
         LA    R2,EDSAVE2          POINT TO SAVE AREA
         ST    R13,4(,R2)          CHAIN SAVE AREAS
         ST    R2,8(,R13)
         LR    R13,R2              POINT TO NEW SAVE AREA
         SPACE
*         CLOSE THE UNDO FILE
         SPACE
         TM    UNDOFLGS,DCBOFOPN   IS THE UNDO DCB OPEN?
         BNO   UNDOCLSD            NO, NO NEED TO CLOSE IT
         MVI   CLOSED,X'80'        YES, CLOSE IT
         CLOSE (UNDODCB),MF=(E,CLOSED)
         SPACE
*         DEALLOCATE THE UNDO/RECOVERY DATA SET
         SPACE
UNDOCLSD CLI   UNDDDNAM,C'-'       WAS A FILE ALLOCATED?
         BNH   UNDOSTPD            NO, NO NEED TO FREE IT
         XC    MYDAPB,MYDAPB
         MVI   DA18CD+1,X'18'
         MVC   DA18DDN,UNDDDNAM    DDNAME WILL NOW BE IGNORED
         MVC   DA18MNM,EDBLNKS     MEMBER NAME
         MVC   DA18SCLS,EDBLNKS    SYSOUT CLASS IS 2-BYTE FIELD
         MVI   DA18DPS2,DA18DEL    CHANGE DISPOSITION TO DELETE
         MVI   DA18CTL,DA18PERM    FREE A PERMANENT ALLOCATION
         XC    MYECB,MYECB
         XASAM24
         LA    R1,MYDAPL
         L     R15,CVTPTR(,0)      CVT
         L     R15,CVTDAIR-CVT(,R15)
         BASR  R14,R15             CALL IKJDAIR
         XASAM31
         MVI   UNDDDNAM,C'-'       FLAG FILE UNALLOCATED
         SPACE
*         RETURN TO CALLER
         SPACE
UNDOSTPD MVC   UNDOCRNT,EDZEROS    ERASE UNDO INFORMATION
         XC    UNDOMEMS(UNDOSIZE+L'UNDOLAST),UNDOMEMS
         L     R13,4(,R13)         POINT TO CALLER'S SAVE AREA
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         MVC   8(4,R13),EDZEROS    RESET FORWARD CHAIN POINTER
         BR    R14                 RETURN TO CALLER
         SPACE
         DROP  R10                 UNDOSTOP
         DROP  R9                  @DATA, DAPB MAPPINGS
         USING @DATA,R9
         TITLE '  U N D O S A V E  '
         USING UNDOSAVE,R10
UNDOSAVE TM    EDFLG1,SAVEZ        ANYTHING TO DO HERE?
         BNOR  R14                 NO, RETURN WITHOUT ANY ACTION
         TM    UNDOFLGS,DCBOFOPN   CAN ANYTHING BE DONE HERE?
         BNOR  R14                 NO, RETURN WITHOUT MUCH ACTION
         ST    R14,EDRETSV1        SAVE RETURN ADDRESS
         LR    R10,R15             SET LOCAL BASE
         SPACE
         LAM   A0,A15,EDZEROS      ZERO ACCESS REGISTERS
         LAM   A3,A3,DSPCALET      LOAD DATA SPACE ALET
         CPYA  A6,A3               COPY DATA SPACE ALET
UNDORTRY L     R3,TOPADDR          POINT TO TOP OF DATA
         SPACE
UNDOBLKO L     R0,UNDOBLKF         GET UNDO FILE BLOCKING FACTOR
         L     R4,EDBUFADR         POINT TO I/O BUFFER
         SAC   512                 SET AR MODE
UNDORECO L     R3,FWD(,R3)         POINT TO THE NEXT RECORD
         C     R3,BTMADDR          PROCESSED ALL DATA?
         BE    UNDOUTPT            YES, GO WRITE LAST BLOCK
         L     R5,MAXRECSZ         GET STORAGE SIZE OF RECORD
         LA    R5,CTLLEN-8(,R5)    DO NOT SAVE CHAINING POINTERS
         LA    R6,8(,R3)           POINT TO RECORD STORAGE
         LR    R7,R5               COPY STORAGE SIZE
         MVCL  R4,R6               COPY RECORD DATA
         BCT   R0,UNDORECO         GO BUFFER ANOTHER RECORD
         SPACE
UNDOUTPT SAC   0                   SET PRIMARY MODE
         S     R4,EDBUFADR         GET THE USED BUFFER SIZE
         BNP   UNDOSTOW            DATA ENDED ON BLOCK BOUNDARY
         STH   R4,UNDBLKSI         SAVE SIZE OF BLOCK TO WRITE
         L     R4,EDBUFADR         POINT TO THE WRITE BUFFER
         L     R5,REVUPT           POINT TO THE UPT
         USING UPT,R5
         IC    R7,UPTSWS           SAVE THE TSO USER PROFILE
         TM    EDFLG4,E4UPTOK      NEED TO FIDDLE WITH WTPMSG?
         BO    *+8                 NO
         NI    UPTSWS,255-UPTWTP   SUPPRESS TPUT OF ABEND MESSAGE
         XASAM24
         WRITE DYNDECBW,SF,UNDODCB,(R4),'S',MF=E
         CHECK DYNDECBW            WAIT FOR WRITE TO FINISH
         XASAM31
         TM    EDFLG4,E4UPTOK      NEED TO FIDDLE WITH WTPMSG?
         BO    *+8                 NO
         STC   R7,UPTSWS           RESTORE TSO PROFILE
         DROP  R5                  UPT
         TM    STATUS,STABEND      I/O ABEND?
         BO    UNDOUTAB            YES
         CLI   SYNADSW,0           I/O ERROR?
         BNE   UNDOUTER            YES
         C     R3,BTMADDR          PROCESSED ALL DATA?
         BNE   UNDOBLKO            NO, GO WRITE ANOTHER BLOCK
         SPACE
UNDOSTOW MVC   UNDOTTRC,EDZEROS    RESET THE TTR AND USERDATA COUNT
         STOW  UNDODCB,UNDODIRE,R  FINALIZE THE NEW OUTPUT MEMBER
         CL    R15,EDFW12          SUCCESS?
         BNL   UNDODERR            NO, DIRECTORY ERROR
         SPACE
         ICM   R1,15,UNDOCRNT      POINT TO PREVIOUS CURRENT ENTRY
         BZ    UNDOOUT1            SKIP STUFF FOR FIRST
         C     R1,UNDOLATE         IS IT THE LAST ENTRY?
         BNL   UNDOSHFL            YES, GO SHUFFLE UP
         LA    R1,8(,R1)           POINT TO THE NEXT LATER ENTRY
         C     R1,UNDOLATE         IS THE NEW ONE IN THE LAST SLOT?
         BNL   UNDOOUT1            YES, BACK TO USUAL OCCUPANCY
         MVI   8+2(R1),0           NO, ZERO R IN WHAT WAS LATER ENTRY
         B     UNDOUPDT            GO UPDATE THE NEW CURRENT ENTRY
         SPACE
UNDOSHFL MVC   UNDOMEMS(UNDOSIZE),UNDOMEMS+L'UNDOLAST
UNDOOUT1 L     R1,UNDOLATE         POINT TO LAST ENTRY
UNDOUPDT MVC   0(4,R1),UNDOTTRC    LOAD MEMBER'S CURRENT TTRC
         MVC   4(4,R1),LINENMBR    SAVE CORRESPONDING TOP LINE NUMBER
         ST    R1,UNDOCRNT
         NI    EDFLG1,255-SAVEZ    RESET UNHARDENED NEW INPUT FLAG
         SPACE
UNDOSAVX NI    FINDSW3,255-CHGERR  RESET UNDO ABEND RECURSION FLAG
         L     R14,EDRETSV1        RESTORE RETURN ADDRESS
         BR    R14                 RETURN TO MAINLINE
         SPACE
*         HANDLE I/O ABEND - RETRY ASSUMING A SPACE ABEND
         SPACE
UNDOUTAB NI    STATUS,255-STABEND  RESET DCB ABEND FLAG
         L     R15,UNDOSTO@
         BASR  R14,R15             CLOSE AND FREE UNDO FILE
         TM    FINDSW3,CHGERR      I/O ABEND RECURSION?
         BO    UNDOSAVX            YES, DO NOT RETRY - SHOW ABEND CODE
         L     R15,UNDOINI@
         BASR  R14,R15             ALLOCATE AND OPEN UNDO FILE
         TM    UNDOFLGS,DCBOFOPN   IS UNDO FILE OPEN?
         BNO   UNDOSAVX            NO, CANNOT RETRY - SHOW ABEND CODE
         OI    FINDSW3,CHGERR      YES, SET RECURSION FLAG
         MVC   MSG(MSGRCYCL),MSGRCYC
         NI    STATUS7,255-$7BELL  NO AUDIBLE ALARM FOR STATUS MESSAGE
         TM    STATUS10,$10CAP     CAPS ON?
         BO    UNDORTRY            YES
         XC    MSG+7(8),EDBLNKS
         B     UNDORTRY
         SPACE
*         HANDLE I/O ERROR - TERMINATE UNDO
         SPACE
UNDOUTER LA    R1,SYNADMSG         POINT TO ERROR MESSAGE
         LA    R0,L'SYNADMSG       GET THE MESSAGE LENGTH
         TPUT  (1),(0),R           ISSUE LINE MODE MESSAGE
         MVI   SYNADSW,0           RESET I/O ERROR FLAG
         L     R15,UNDOSTO@
         BASR  R14,R15             CLOSE AND FREE UNDO FILE
         MVC   MSG(MSGUENDL),MSGUEND
         OI    STATUS7,$7BELL      SOUND AUDIBLE ALARM FOR ERROR
         TM    STATUS10,$10CAP     CAPS ON?
         BO    UNDOSAVX            YES
         XC    MSG+7(5),EDBLNKS
         B     UNDOSAVX            UNDO NOW TERMINATED
         SPACE
*         HANDLE STOW ERROR - TERMINATE UNDO
         SPACE
UNDODERR MVC   MSG(MSGUSTOL),MSGUSTO
         OI    STATUS7,$7BELL      SOUND AUDIBLE ALARM FOR ERROR
         STC   R15,DOUBLE
         UNPK  MSG+15(3),DOUBLE(2)
         TR    MSG+15(2),EDHEX-C'0'
         L     R15,UNDOSTO@
         BASR  R14,R15             CLOSE AND FREE UNDO FILE
         B     UNDOSAVX            UNDO NOW TERMINATED
         SPACE
         DROP  R10                 UNDOSAVE
         SPACE
MSGRCYC  MESG  'UNDO RECYCLED'
MSGUEND  MESG  'UNDO ENDED'
MSGUSTO  MESG  'UNDO STOW RC=XX'
         TITLE '  U N D O R E S T  '
*
*    THIS ROUTINE CAN ONLY BE CALLED WHEN UNDODCB IS OPEN FOR OUTPUT
*    EXCEPT FOR EDIT RECOVERY WHERE THE OPEN FOR OUTPUT IS SKIPPED.
*    NOTE THAT CLOSE PERFORMS NO ACTION WHEN THE DCB IS NOT OPEN.
*    EDRETSV1 CONTAINS THE RETURN ADDRESS.
*
         USING UNDOREST,R10
UNDOREST LR    R10,R15             SET LOCAL BASE
         SPACE
         MVI   CLOSED,X'80'        CLOSE OUTPUT FILE
         CLOSE (UNDODCB),MF=(E,CLOSED)
         MVC   UNDBLKSI,EDZEROS    CLEAR BLKSIZE - GET IT FROM VTOC
         LA    R0,UNDOIEOF         POINT TO END-OF-FILE HANDLER
         STCM  R0,7,UNDEODA        SET ADDRESS INTO DCB
         MVI   OPEND,X'80'         OPEN THE UNDO DCB FOR INPUT
         OPEN  (UNDODCB,INPUT),MF=(E,OPEND)
         TM    STATUS,STABEND      OPEN ABEND?
         BO    UNDOINAB            YES, NOT TOO LATE TO KEEP SESSION
         NI    FINDSW4,255-FRGE    RESET RECORD RANGE
         BAS   R3,FREELBLS         FREE LABEL ELEMENT STORAGE
         L     R2,UNDOCRNT         POINT TO THE NEW CURRENT ENTRY
         XASAM24
         POINT UNDODCB,0(R2)       POSITION TO INPUT MEMBER START
         XASAM31
         LAM   A0,A15,EDZEROS      ZERO ACCESS REGISTERS
         LAM   A3,A3,DSPCALET      LOAD DATA SPACE ALET
         CPYA  A6,A3               COPY DATA SPACE ALET
         L     R3,TOPADDR          POINT TO TOP OF DATA
         MVC   LINENMBR,4(R2)      SET POST-UNDO TOP LINE NUMBER
         MVC   CSRRECAD,EDZEROS    PUT POST-UNDO CURSOR AT HOME
         SPACE
UNDOBLKI L     R2,EDBUFADR         POINT TO I/O BUFFER
         XASAM24
         READ  DYNDECBW,SF,UNDODCB,(R2),'S',MF=E
         CHECK DYNDECBW            WAIT FOR READ TO FINISH
         XASAM31
         CLI   SYNADSW,0           ANY I/O PROBLEMS?
         BNE   UNDOINER            YES
         LH    R1,UNDBLKSI
         L     R14,DYNDECBW+16
         LR    R4,R2               POINT TO I/O BUFFER
         SH    R1,14(,R14)         SUBTRACT RESIDUAL COUNT
         AR    R2,R1               POINT PAST READ DATA
         SAC   512                 SET AR MODE
         SPACE
UNDORECI L     R3,FWD(,R3)         POINT TO THE NEXT RECORD
         C     R3,BTMADDR          BOTTOM OF DATA PLACEHOLDER?
         BNE   UNDOINPT            NO, GO OVERLAY DATA
         L     R15,GETALIN@
         BASR  R14,R15             GET STORAGE FOR A RECORD
         BZ    UNDOFULL            INSUFFICIENT STORAGE
         MVC   BAK(4,R15),BAK(R3)  SET NEW BACK POINTER
         ST    R15,BAK(,R3)        POINT BACK TO NEW LINE
         ST    R3,FWD(,R15)        POINT FORWARD TO BOTTOM OF DATA
         L     R3,BAK(,R15)        POINT TO PREVIOUS RECORD
         ST    R15,FWD(,R3)        POINT FORWARD TO NEW RECORD
         LR    R3,R15              POINT TO NEW RECORD
         SPACE
UNDORCOV TM    EDFLG4,E4RECOV      EDIT RECOVERY IN PROGRESS?
         BNO   UNDOINPT            NO
         NI    FLG3-8(R4),255-LNEW RESET UNMATCHED DATA FLAG
         TM    FLG1-8(R4),LMSG     MESSAGE RECORD?
         BNO   UNDOINPT            NO
         LA    R4,CTLLEN-8(,R4)    YES, SKIP PAST CONTROL HEADER
         CR    R4,R2               REACHED END OF BLOCK?
         BL    UNDORECI            NO, GO LOAD NEXT RECORD
         SAC   0                   YES, SET PRIMARY MODE
         B     UNDOBLKI            GO READ NEXT BLOCK
UNDOINPT TM    FLG2-8(R4),LLBL     IS THIS RECORD LABELLED?
         BNO   UNDOLOAD            NO
         NI    FLG2-8(R4),255-LLBL YES, UNLABEL IT
         CLI   ECHO-8(R4),C'.'     WAS THE LABEL NAME SAVED?
         BNE   UNDOLOAD            NO, CANNOT RELABEL IT
         SAC   0                   YES, SET PRIMARY MODE FOR SVC
         BAS   R14,GETALABL        GET A MEW (ZEROED) LABEL ELEMENT
         SAC   512                 RESTORE AR MODE
         LTR   R15,R15             SUCCESS?
         BNZ   UNDOLOAD            NO, FORGET ABOUT THE LABEL RESTORE
         USING @EDLABEL,R1
         ST    R3,EDL_ADDR         SET THE RECORD ADDRESS
         MVC   EDL_NAME,ECHO-8(R4) SET THE LABEL NAME
         MVC   EDL_NEXT,LABANKOR   SET THE CHAIN POINTER
         ST    R1,LABANKOR         ADD THIS ELEMENT TO THE CHAIN
         OI    FLG2-8(R4),LLBL     RELABEL THE LINE
         DROP  R1                  @EDLABEL
UNDOLOAD LA    R6,8(,R3)           POINT PAST TARGET CHAIN POINTERS
         L     R5,MAXRECSZ         GET STORAGE SIZE OF RECORD
         LA    R5,CTLLEN-8(,R5)    SUBTRACT LENGTH OF CHAIN POINTERS
         LR    R7,R5               COPY DATA SIZE
         MVCL  R6,R4               COPY RECORD DATA
         CR    R4,R2               REACHED END OF BLOCK?
         BL    UNDORECI            NO, GO LOAD NEXT RECORD
         SAC   0                   YES, SET PRIMARY MODE
         B     UNDOBLKI            GO READ NEXT BLOCK
         SPACE
UNDOFULL MVI   MSG,123             REQUEST ABORTED - STORAGE FULL
         L     R3,BAK(,R3)         POINT TO LAST DATA RECORD
UNDOIEOF SAC   512                 SET AR MODE
         CPYA  A7,A3               COPY DATA SPACE ALET
         XASAM31
UNDOXSLP L     R6,FWD(,R3)         POINT TO RECORD AFTER LAST LOADED
         C     R6,BTMADDR          BOTTOM OF DATA PLACEHOLDER?
         BE    UNDONE              YES, DATA RESTORE COMPLETE
         L     R7,FWD(,R6)         POINT TO FOLLOWING RECORD
         ST    R3,BAK(,R7)         UPDATE FOLLOWING BACK POINTER
         ST    R7,FWD(,R3)         UPDATE PREVIOUS FORWARD POINTER
         MVC   FWD(4,R6),MPTANKOR  ADD THIS LINE TO EMPTY CHAIN
         OI    FLG2(R6),255-LLBL   FLAG LINE AS AWAITING REUSE
         ST    R6,MPTANKOR         UPDATE EMPTY CHAIN ORIGIN
         B     UNDOXSLP            TEST FOR MORE EXCESS RECORDS
         SPACE
UNDONE   L     R3,TOPADDR          POINT TO TOP OF DATA
         NI    EDFLG1,255-SAVEY    RESET "SESSION CHANGED DATA" FLAG
         ST    R3,LINEADDR         HANDLE ZERO LINENMBR
         SR    R1,R1               RESET COUNTER
         SR    R2,R2               RESET COUNTER
UNDOLNCT L     R3,FWD(,R3)         POINT TO NEXT RECORD
         C     R3,BTMADDR          BOTTOM OF DATA?
         BE    UNDID               YES
         TM    FLG1(R3),LMSG       MESSAGE LINE?
         BNO   UNDODATA            NO
         LA    R2,1(,R2)           INCREMENT MESSAGE COUNT
         B     UNDOLNCT
UNDODATA TM    FLG1(R3),CHGL       HAS RECORD CHANGED THIS SESSION?
         BZ    *+8                 NO
         OI    EDFLG1,SAVEY        YES, SO DATA HAS CHANGED
         LA    R1,1(,R1)           INCREMENT RECORD COUNT
         C     R1,LINENMBR         IS THIS THE TOP SCREEN LINE?
         BNE   UNDOLNCT            NO
         ST    R3,LINEADDR         YES, SAVE THE ADDRESS
         B     UNDOLNCT
         SPACE
UNDID    ST    R1,RECLINES         SAVE CURRENT RECORD COUNT
         ST    R2,MSGLINES         SAVE CURRENT MESSAGE COUNT
         SAC   0                   SET PRIMARY MODE
         C     R1,REDLINES         SAME RECORD COUNT AS READ IN?
         BE    *+8                 YES
         OI    EDFLG1,SAVEY        NO, SOMETHING MUST HAVE CHANGED
         NI    EDFLG1,255-SAVEZ    RESET UNHARDENED NEW INPUT FLAG
         SPACE
         MVI   CLOSED,X'80'        CLOSE INPUT FILE
         CLOSE (UNDODCB),MF=(E,CLOSED)
         XC    UNDEODA,UNDEODA     CLEAR UNDO EODAD
         MVI   OPEND,X'80'         OPEN THE UNDO DCB FOR OUTPUT
         OPEN  (UNDODCB,OUTPUT),MF=(E,OPEND)
         SPACE
UNDORESX L     R14,EDRETSV1        RESTORE RETURN ADDRESS
         BR    R14                 RETURN TO CALLER OF UNDO OR REDO
         SPACE
*         HANDLE OPEN ABEND - DISABLE UNDO
         SPACE
UNDOINAB NI    STATUS,255-STABEND  RESET DCB ABEND FLAG
         L     R15,UNDOSTO@
         BASR  R14,R15             CLOSE AND FREE UNDO FILE
         B     UNDORESX            RETURN WITHOUT PERFORMING UNDO
         SPACE
*         HANDLE I/O ERROR - TERMINATE SESSION DUE TO CORRUPTED DATA
         SPACE
UNDOINER LA    R1,SYNADMSG         POINT TO ERROR MESSAGE
         LA    R0,L'SYNADMSG       GET THE MESSAGE LENGTH
         TPUT  (1),(0),R           ISSUE LINE MODE MESSAGE
         LA    R4,20               SEVERE ERROR
         B     EDITEXIT            TERMINATE EDIT SESSION
         SPACE
         DROP  R10                 UNDOREST
         TITLE '  E D P R O F S V  '
*
*    THIS ROUTINE IS CALLED (JUST BEFORE REVEDIT FREES THE '@EDDATA'
*    AREA AND EXITS) TO SAVE THE EDIT PROFILE DATA IF APPROPRIATE.
*
*    BEFORE R46.5 THE NUMBERS WERE:
*      HEADER SIZE = 80 FOR RFE + 80 FOR REVEDIT = 160 BYTES
*      EPSZ = 32
*      SAVED DATA SET PROFILE COUNT = EPSZ - 2 = 32 - 2 = 30
*      AREA USED FOR EACH SAVED DATA SET PROFILE = 80 BYTES
*      $$REVEDT MEMBER SIZE = EPSZ X 80 = 32 X 80 = 2560 BYTES
*
*    SINCE R46.5 THE NUMBERS ARE:
*      HEADER SIZE = 80 FOR RFE + 240 FOR REVEDIT = 320 BYTES
*      EPSZ = 32
*      SAVED DATA SET PROFILE COUNT = EPSZ - 2 = 32 - 2 = 30
*      AREA USED FOR EACH SAVED DATA SET PROFILE = 160 BYTES
*      $$REVEDT MEMBER SIZE = EPSZ X 160 = 32 X 160 = 5120 BYTES
*
*    THE NEW PROFILE DATA IS STORED BY DATA SET NAME AND OCCUPIES
*    A 160-BYTE LOGICAL RECORD IN THE EDIT PROFILE MEMBER.  THE
*    PROFILE DATA ENTRIES ARE STORED FROM MOST RECENTLY UPDATED
*    TO LEAST RECENTLY UPDATED, WITH THE CAPACITY CURRENTLY SET
*    AT 30 - THIS BEING TWO (FOR HEADER DATA) LESS THAN 'EPSZ'.
*
*    CONSEQUENTLY, THE MEMBER SIZE IS 'EPSZ' TIMES 160 BYTES LONG.
*
*    THE 'EDITPROF' AREA IS USED AS A HOLDING AREA FOR THE
*    160-BYTE PROFILE ENTRIES AS THE LATEST UPDATE CAUSES THE
*    OLD ENTRIES TO BE PERCOLATED DOWNWARDS.
*
*    ON ENTRY, GPR4 CONTAINS THE REVEDIT RETURN CODE.
*
         USING EDPROFSV,R10
EDPROFSV TM    EDFLG1,E1CNCL       DISCARDING ALL DATA?
         BOR   R14                 YES, DO NOT SAVE PROFILE
         TM    STATUS,STABEND      DCB ABEND OCCURRED?
         BOR   R14                 YES, DO NOT SAVE PROFILE
         CLI   SYNADSW,0           I/O ERROR OCCURRED?
         BNER  R14                 YES, DO NOT SAVE PROFILE
         STM   R14,R12,12(R13)     SAVE REGISTERS
         LR    R10,R15             SET LOCAL BASE
         LA    R2,EDSAVE2          POINT TO SAVE AREA
         ST    R13,4(,R2)          CHAIN SAVE AREAS
         ST    R2,8(,R13)
         LR    R13,R2              POINT TO NEW SAVE AREA
         CL    R4,EDFW8            INITIALIZATION FAILURE?
         BH    EDPROFSX            YES, PROFILE WAS NOT USED
         SPACE
*         FINALIZE PROFILE DATA
         SPACE
         MVI   EPCAPS,C'1'         SET CAPS ON IN PROFILE
         TM    STATUS10,$10CAP     CAPS ON?
         BO    *+8                 YES, PROFILE SETTING IS CORRECT
         MVI   EPCAPS,C'0'         SET CAPS OFF IN PROFILE
         SPACE
         OI    EPNUM,C'0'          MAKE IT A NUMBER
         NI    EPNUM,C'3'          RESET UNUSED BITS
         CLI   EPNUM,C'3'          NUMBER ON COBOL?
         BNE   *+8                 NO
         MVI   EPNUM,C'C'          YES, F3->C3 FOR PROFILE BROWSING
         SPACE
         MVI   EPCOLS,C'1'         SET COLS ON IN PROFILE
         TM    STATUS7,EDCOLS      COLS ON?
         BO    *+8                 YES, PROFILE SETTING IS CORRECT
         MVI   EPCOLS,C'0'         SET COLS OFF IN PROFILE
         SPACE
         MVI   EPAS,C'1'           SET AUTOSAVE ON IN PROFILE
         TM    STATUS16,$16NAS     AUTOSAVE ON?
         BZ    *+8                 YES, PROFILE SETTING IS CORRECT
         MVI   EPAS,C'0'           SET AUTOSAVE OFF IN PROFILE
         SPACE
         LA    R0,EDTABL/4         GET TAB COLUMN COUNT
         LA    R14,EPSEP12         POINT TO PROFILE AREA TO FILL IN
         LA    R15,EDTAB#          POINT TO TAB COLUMN SAVE AREA
EPTABLP  MVI   0(R14),C','         SUPPLY SEPARATOR
         L     R1,0(,R15)          GET TAB COLUMN NUMBER
         CVD   R1,DOUBLE           CONVERT IT TO PACKED DECIMAL
         OI    DOUBLE+7,X'0F'      PREPARE FOR UNPACK
         UNPK  1(5,R14),DOUBLE     CONVERT IT TO ZONED DECIMAL
         LA    R14,6(,R14)         POINT TO NEXT PROFILE SLOT
         LA    R15,4(,R15)         POINT TO NEXT TAB COLUMN NUMBER
         BCT   R0,EPTABLP          GO PROCESS NEXT TAB COLUMN
         SPACE
         MVI   EPPAD,C' '          BLANK THE EDIT PROFILE PADDING
         MVC   EPPAD+1(L'EPPAD-1),EPPAD
         SPACE
         SR    R1,R1               CLEAR FOR INSERT
         IC    R1,EDHITYP          GET HILITE TYPE CODE
         SLA   R1,3                MULTIPLY BY 8 FOR INDEX
         LA    R1,EDHITAB@(R1)     POINT TO HILITE SETTING NAME
         MVC   EPHI,0(R1)          COPY IT INTO THE PROFILE DATA
         L     R1,CVTPTR(,0)       POINT TO THE CVT
         ZAP   DOUBLE,P1900000
         USING CVT,R1
         AP    DOUBLE,CVTDATE      GET THE CURRENT 7-DIGIT DATE
         DROP  R1                  CVT
         OI    DOUBLE+7,X'0F'      PREPARE FOR UNPACK
         UNPK  EPDATE,DOUBLE       DATE-STAMP PROFILE RECORD
**        ALWAYS SAVE SO USED ENTRIES DO NOT AGE OUT OF PROFILE
         SPACE
*         READ THE EXISTING PROFILE MEMBER
         SPACE
         MVC   DOUBLE,$$REVEDT     SET PROFILE MEMBER NAME TO READ
         LA    R0,EPSZ*80
         AR    R0,R0               SET PROFILE MEMBER SIZE
         SR    R1,R1               INDICATE NO STORAGE PREPARED
         L     R15,EDPROFAD        POINT TO PROFILE MANAGER
         BASR  R14,R15             FETCH PROFILE
         L     R1,DOUBLE+4         POINT TO READ PROFILE DATA
         LA    R0,EPSZ*80          GET OLD SIZE
         C     R0,DOUBLE           WAS OLD FORMAT PROFILE READ?
         BE    EDPRFOLD            YES, GO CONVERT IT
         BL    EDPROFRD            IT'S BIGGER SO ASSUME NEW FORMAT
         SPACE
*         NO OR SMALLER-THAN-OLD MEMBER - GET STORAGE FOR NEW PROFILE
         SPACE
         LM    R0,R1,DOUBLE        LOAD PROFILE DATA DETAILS
         LTR   R1,R1               IS THERE ANY DATA?
         BP    EDPROFRD            YES
         LA    R0,EPSZ*80          NO
         AR    R0,R0               GET THE PROFILE SIZE
         GETSTOR RC,LV=(0),LOC=(31,64)
         LTR   R15,R15             ACQUIRED STORAGE FOR PROFILE?
         BNZ   EDPROFSX            NO, ABANDON PROFILE DATA
         LR    R14,R1              YES, POINT TO IT
         LA    R15,EPSZ*80
         AR    R15,R15             GET ITS LENGTH
         LA    R3,C' '             GET PAD CHARACTER
         SLL   R3,24               PROMOTE IT AND ZERO LENGTH
         MVCL  R14,R2              BLANK NEW STORAGE
         B     EDPROFRD            AREA READY TO LOAD PROFILE DATA
         SPACE
*         CONVERT $$REVEDT DATA FROM OLD FORMAT TO NEW
         SPACE
EDPRFOLD LR    R15,R0              COPY OLD FORMAT MEMBER SIZE
         LA    R1,0(R15,R1)        POINT PAST OLD DATA
         LA    R15,0(R15,R1)       POINT PAST NEW AREA
         LA    R0,30               GET DATA SET PROFILE ENTRY COUNT
EDPRFCVT S     R1,EDFW80           POINT TO PREVIOUS OLD ENTRY
         S     R15,EDFW80
         S     R15,EDFW80          POINT TO PREVIOUS NEW ENTRY
         MVC   0(80,R15),0(R1)     COPY OLD ENTRY TO NEW 1ST HALF
         MVI   80(R15),C' '        BLANK NEW ENTRY 2ND HALF
         MVC   81(79,R15),80(R15)
         BCT   R0,EDPRFCVT
         L     R1,DOUBLE+4         POINT TO PROFILE AREA START
         SPACE
*         UPDATE DATA IMAGE OF EDIT PROFILE MEMBER
         SPACE
EDPROFRD MVI   0(R1),C' '          BLANK FIRST TWO LINES
         MVC   1(159,R1),0(R1)
         MVC   160(160,R1),159(R1) BLANK NEXT TWO LINES
         MVC   160(L'EDPROFHD,R1),EDPROFHD    "COLUMN HEADING" COMMENTS
         MVC   240(L'EDPROFH2,R1),EDPROFH2
         LA    R0,EPSZ-2           GET MAXIMUM DEMOTE COUNT
         LA    R2,320(,R1)         POINT TO FIRST PROFILE ENTRY
EDPRFLP2 XC    EDITPROF(160),0(R2) MOVE IN NEWER ENTRY AND
         XC    0(160,R2),EDITPROF       SAVE REPLACED ENTRY
         XC    EDITPROF(160),0(R2)
         CLI   EDITPROF,C'$'       PENDING ENTRY HAS DATA SET NAME?
         BL    EDPROFRW            NO, END OF LIST, GO REWRITE MEMBER
         CLC   DSNAIM+2(44),EDITPROF PENDING ENTRY FOR THIS DATA SET?
         BE    EDPROFRW            YES, ALL DONE, GO REWRITE MEMBER
         LA    R2,160(,R2)         NO, POINT TO NEXT SLOT
         BCT   R0,EDPRFLP2         PROCESS NEXT EDIT PROFILE ENTRY
         SPACE
*         WRITE UPDATED EDIT PROFILE MEMBER
         SPACE
EDPROFRW MVC   DOUBLE,$$REVEDT     SET PROFILE MEMBER NAME TO WRITE
         LA    R0,EPSZ*80
         AR    R0,R0               SET PROFILE MEMBER SIZE
         STM   R0,R1,EDALLSAV      SAVE FREEMAIN DETAILS SOMEWHERE
         LNR   R0,R0               INDICATE WRITE REQUEST
         L     R15,EDPROFAD        POINT TO PROFILE MANAGER
         BASR  R14,R15             WRITE PROFILE
         LM    R0,R1,EDALLSAV      LOAD FREEMAIN DETAILS
         FREEMAIN RU,LV=(0),A=(1)  FREE EDIT PROFILE AREA
         SPACE
*         RETURN TO CALLER
         SPACE
EDPROFSX L     R13,4(,R13)         POINT TO CALLER'S SAVE AREA
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         MVC   8(4,R13),EDZEROS    RESET FORWARD CHAIN POINTER
         BR    R14                 RETURN TO CALLER
         SPACE
         DROP  R10                 EDPROFSV
         SPACE
P1900000 DC    P'1900000'
         TITLE '  E D I T R E A D   -   L O A D   F I L E   D A T A  '
*
*         READ FILE AND LOAD DATA INTO VIRTUAL STORAGE
*
         USING EDITREAD,R10
EDITREAD LR    R10,R15             SET LOCAL BASE
         ST    R14,EDRETSV1        SAVE RETURN ADDRESS
         MVC   CALLPARM(6),EDZEROS PREPARE FOR COBOL NUMBER CHECK
         SPACE
         AIF   (NOT &ENVESA).EDRDDAT
         LAM   A0,A15,EDZEROS      CLEAR ALL ACCESS REGISTERS
         LAM   A1,A1,DSPCALET      LOAD DATA SPACE ALET
         L     R1,DSPCORIG         POINT TO START OF DATA SPACE
         SAC   512                 SET AR MODE
         MVC   0(16,R1),DSPCTEXT   LOAD AN EYECATCHER
         LA    R1,16(,R1)          POINT PAST IT
         ST    R1,TOPADDR          SAVE THE TOP ENTRY ADDRESS
         LAE   R2,CTLLEN(,R1)      POINT PAST THE TOP ENTRY
         ST    R2,BTMADDR          SAVE THE END ENTRY ADDRESS
         ST    R2,FWD(,R1)         CHAIN INITIAL ENTRIES
         ST    R1,BAK(,R2)
         ST    R1,LINEADDR         SHOW FROM TOP OF DATA
         LA    R2,CTLLEN(,R2)      POINT PAST THE END ENTRY
         ST    R2,FREEAREA         SAVE ADDRESS TO USE NEXT
         SAC   0                   SET PRIMARY MODE
         L     R0,FREESIZE         GET SIZE OF DATA SPACE
         S     R2,DSPCORIG         GET USED BYTE COUNT
         SR    R0,R2               GET AVAILABLE BYTE COUNT
         ST    R0,FREESIZE         SAVE IT
.EDRDDAT ANOP
         MVI   EDDEVTYP,X'FF'      SUPPRESS EXTENDED CHECKING
         LA    R1,EDPDSDCB         POINT TO PARTITIONED DCB
         TM    DS1DSORG,DS1DSGPO   PARTITIONED ORGANISATION?
         BO    EDRDDCBL            YES, HAVE RIGHT DCB
         LA    R1,EDSEQDCB         NO, POINT TO SEQUENTIAL DCB
         NI    EPZAP,X'F0'         SET ZAP OFF FOR DISPLAY PURPOSES
EDRDDCBL MVC   EDITDCB,0(R1)       INITIALISE EDIT FILE DCB
         AIF   (NOT &ENVBIG).EDDCBE1
         MVC   EDITDCBE,EDDCBE     LOAD DCBE FOR EDIT DATA
         LA    R0,EDITDCBE         GET DCBE ADDRESS
         ST    R0,EDITDCB          SET DCBE ADDRESS
.EDDCBE1 ANOP
*                        AND WHILE WE ARE DOING DCB PREPARATION...
         MVC   UNDODCB,EDUNDDCB    INITIALISE UNDO FILE DCB
*                        AND MAY AS WELL DO OTHER ONCE ONLY STUFF...
         MVC   UNDOMEMN,=C'UNDOMEM0'
         LA    R2,UNDOLAST         POINT TO UNDO MEMBER ENTRIES
         ST    R2,UNDOLATE         SAVE ITS ADDRESS
         MVC   DCBDDNAM,$DDNAME    SET DDNAME
         MVI   SYNADSW,0           RESET I/O ERROR FLAG
         MVC   DOUBLE,=C'EDOPRDIN' SET FLAG FOR DUMP
         MVI   OPEND,X'80'
         OPEN  (EDITDCB,(INPUT)),MF=(E,OPEND)
         OI    EDFLG2,E2OPNI       FLAG DCB OPEN FOR INPUT
         XC    DOUBLE,DOUBLE       RESET DUMP FLAG
         MVI   SYNADSW,0           RESET I/O ERROR FLAG
         TM    DCBRECFM,DCBRECU    FIXED- OR VARIABLE-LENGTH?
         BNM   EDNTFORV            NO, ABORT EDIT SESSION
         TM    DCBRECFM,DCBRECV+DCBRECSB
         BO    EDRDSPAN            SPANNED RECORDS NOT SUPPORTED
         SR    R1,R1
         ICM   R1,3,DCBLRECL       GET MAXIMUM RECORD LENGTH
         TM    DCBRECFM,DCBRECV    VARIABLE-LENGTH RECORDS?
         BO    USEVARLN            YES
         NI    EPPRES,C'0'         NO, TURN PRESERVE OFF
         TM    DCBRECFM,DCBRECBR   FIXED BLOCKED?
         BO    GOTRECLN            YES
         ICM   R1,3,DCBBLKSI       NO, USE BLOCK SIZE
         B     GOTRECLN
USEVARLN S     R1,EDFW4            DO NOT COUNT RDW
         NI    EPZAP,C'0'          TURN ZAP OFF
GOTRECLN ST    R1,MAXRECSZ         SAVE MAXIMUM DATA LENGTH
         CH    R1,EDNUMMIN         TOO SMALL FOR SEQUENCE NUMBERS?
         BL    EDRECLEN            YES
         OI    EDFLG2,E2NUM        NO, TURN ON SEQUENCE NUMBERS
         C     R1,EDFW80           LRECL=80?
         BNE   EDRECLEN            NO
         TM    DCBRECFM,DCBRECF    FIXED-LENGTH RECORDS?
         BNO   EDRECLEN            NO
         OI    EDFLG5,E5COB        YES, ALSO CHECK FOR COBOL NUMBERING
EDRECLEN LA    R0,CTLLEN+7(,R1)
         SRL   R0,3
         SLL   R0,3
         ST    R0,RECSTGSZ         SAVE INTERNAL RECORD ENTRY SIZE
         SPACE
*         ENSURE PROFILE TAB COLUMNS IN DESCENDING ORDER
         LA    R14,(EDTABL/4)-1    GET INITIAL COMPARE COUNT
EDRDTB01 LR    R0,R14              GET SLOTS TO SORT THIS TIME
         LA    R2,EDTAB#           POINT TO HOLD AREA
EDRDTB02 L     R1,0(,R2)           GET THIS VALUE
         CL    R1,4(,R2)           IS IT LESS THAN THE NEXT VALUE?
         BNL   EDRDTB03            NO
         MVC   0(4,R2),4(R2)       YES, PROMOTE NEXT VALUE
         ST    R1,4(,R2)           DEMOTE THIS VALUE
EDRDTB03 LA    R2,4(,R2)           POINT TO NEXT SLOT
         BCT   R0,EDRDTB02         CONTINUE THIS BUBBLE PASS
         BCT   R14,EDRDTB01        PERFORM NEXT BUBBLE PASS
         SPACE
*         ENSURE PROFILE TAB COLUMNS ARE NOT TOO LARGE
         LA    R14,(EDTABL/4)      GET COUNT OF NUMBERS TO CHECK
         SR    R0,R0               GET ZERO
EDRDTB04 CLC   EDTAB#(4),MAXRECSZ  TAB COLUMN NUMBER TOO LARGE?
         BNH   EDRDTB05            NO, CHECK FINISHED DUE TO SORT
         MVC   EDTAB#(EDTABL-4),EDTAB#+4
         ST    R0,EDTAB#+EDTABL-4  YES, DISCARD THAT TAB COLUMN
         BCT   R14,EDRDTB04
EDRDTB05 CLC   EDTABMIN,MAXRECSZ   IS MINIMUM TOO LARGE?
         BNH   EDRDTB06            NO
         ST    R0,EDTAB#+EDTABL-4  YES, ZERO IT
EDRDTB06 DS    0H
         SPACE
         MVC   TSTRECFM,DCBRECFM   SAVE RECORD FORMAT FOR AFTER CLOSE
         MVC   DYNDECBW(DYNDECBL),EDREAD
         LA    R0,7
         AH    R0,DCBBLKSI
         SRL   R0,3
         SLL   R0,3
         C     R0,EDFW4K           IS BUFFER SIZE AT LEAST 4K?
         BNL   *+8                 YES
         L     R0,EDFW4K           NO, INCREASE TO 4K FOR UNDO
         ST    R0,EDBUFSIZ         SAVE BUFFER SIZE
         MVI   GETMNTRC,46         TRACK GETMAIN IN CASE OF FAILURE
         GETSTOR RC,LV=(0),LOC=(31,64)
         LTR   R15,R15             ACQUIRED I/O BUFFER?
         BNZ   EDRDFULL            NO, ABORT
         ST    R1,EDBUFADR         SAVE ITS ADDRESS
         L     R15,SCRNCOLS        GET SCREEN WIDTH
         S     R15,EDFW8           GET VIEWABLE DATA WIDTH
         ST    R15,VIEWIDTH        SAVE IT
         ST    R15,EDATWDTH        SAVE IT
         LAM   A0,A15,EDZEROS      CLEAR ALL ACCESS REGISTERS
         C     R15,MAXRECSZ        DATA TOO SHORT TO FILL LINE?
         BNH   EDWDTHOK            NO
         OI    EDFLG1,E1SHORT      YES, REMEMBER THIS
         MVC   EDATWDTH,MAXRECSZ   SAVE ACTUAL DATA WIDTH
EDWDTHOK TM    DS1DSORG,DS1DSGPO   PARTITIONED ORGANISATION?
         BNO   EDREADLP            NO, GO ISSUE FIRST READ
         MVI   EDBLFF+1,1          YES, PREPARE FOR BLDL
         MVI   EDBLLL+1,76
         MVC   EDBLNAME,$MEMBER
         MVC   EDBLBLNK,EDBLNKS    TOLERATE FUJITSU PFD STATISTICS
         MVI   EDBLVER,1           START WITH VERSION 1 IF STATS SET ON
         MVI   EDNEWVER+1,1        START WITH VERSION 1 IF STATS SET ON
         OI    EDFLG2,E2STAT       SET STATS ON FOR NEW MEMBER
         BLDL  EDITDCB,EDBL        GET MEMBER DETAILS
         LTR   R15,R15             MEMBER FOUND?
         BNZ   EDNOMEM             NO
         XASAM24
         FIND  EDITDCB,EDBLTTRP,C  YES, POINT TO ITS START
         XASAM31
         MVC   DOUBLE(1),EDBLINDC  COPY USERDATA HALFWORD COUNT
         NI    DOUBLE,X'7F'        CLEAR ALIAS FLAG
         CLI   DOUBLE,20           EXTENDED ISPF STATS?
         BNE   EDNXSTAT            NO
         TM    EDBLFLG,EDBLXSTA    EXTENDED ISPF STATS?
         BNO   EDNOSTAT            NO, NOT ISPF STATS
**       CLI   EDBLBLNK,C' '       BLANK WHERE REQUIRED?
**       BNE   EDNOSTAT            NO
**       BNE   EDNOSTAT            NO, NOT SINCE 8-BYTE USERIDS ALLOWED
         B     EDISSTAT            EXTENDED ISPF STATS PRESENT
EDNXSTAT CLI   DOUBLE,14           PFD STATS?
         BL    EDNOSTAT            NO
         CLI   DOUBLE,15           SPF STATS?
         BH    EDNOSTAT            NO
         CLC   EDBLNKS(2),EDBLBLNK+1   BLANKS WHERE REQUIRED?
         BNE   EDNOSTAT            NO
**       CLI   EDBLBLNK,C' '       BLANK WHERE REQUIRED?
**       BNE   EDNOSTAT            NO
**       BNE   EDNOSTAT            NO, NOT SINCE 8-BYTE USERIDS ALLOWED
EDISSTAT CLI   EDBLVER,99          VALID VERSION?
         BH    EDNOSTAT            NO
         CLI   EDBLLVL,99          VALID MODIFICATION LEVEL?
         BH    EDNOSTAT            NO
         TM    EDBLCRE+3,X'0F'     EXPECTED DATE SIGN?
         BNO   EDNOSTAT            NO
         SR    R0,R0
         ICM   R1,15,EDBLCRE
         LA    R15,7               VALIDATE THAT 7 NIBBLES ARE DECIMAL
         LA    R14,9               GET BIGGEST VALID DECIMAL DIGIT
EDCREDEC SLDL  R0,4                GET A DIGIT
         CLR   R0,R14              VALID DECIMAL?
         BH    EDNOSTAT            NO
         SR    R0,R0               YES, DISCARD IT
         BCT   R15,EDCREDEC        GO TEST NEXT DIGIT
         IC    R15,EDBLLVL         GET THE CURRENT LEVEL
         CLI   EDBLLVL,99          AT MAXIMUM LEVEL NOW?
         BNL   *+8                 YES
         LA    R15,1(,R15)         NO, INCREMENT FOR IF CHANGED
         STH   R15,EDNEWLVL        SAVE NEW LEVEL
         MVC   EDNEWVER+1(1),EDBLVER
         CVD   R15,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  EDLVLIND,DOUBLE
         B     EDREADLP
         SPACE
EDNOSTAT NI    EDFLG2,255-E2STAT   SET STATS OFF FOR EXISTING MEMBER
         MVI   EDBLCRE+3,0         FORCE VALID VALUE ON SAVE
         SPACE
EDREADLP L     R2,EDBUFADR
         XASAM24
         READ  DYNDECBW,SF,EDITDCB,(R2),'S',MF=E
         CHECK DYNDECBW            WAIT FOR READ TO FINISH
         XASAM31
         CLI   SYNADSW,0           ANY I/O PROBLEMS?
         BNE   EDRDIOER            YES
         TM    STATUS4,$4ATTN      ATTENTION INTERRUPT?
         BO    EDRDATTN            YES
         LH    R1,DCBBLKSI
         A     R1,SAVKEYLE
         L     R14,DYNDECBW+16
         SH    R1,14(,R14)         SUBTRACT RESIDUAL COUNT
         LA    R0,0(R1,R2)         POINT PAST END OF BLOCK
         LH    R1,DCBBLKSI         GET BLOCK SIZE
         TM    DCBRECFM,DCBRECBR   BLOCKED?
         BNO   *+8                 NO
         LH    R1,DCBLRECL         YES, GET LOGICAL RECORD LENGTH
         TM    DCBRECFM,DCBRECF    FIXED-LENGTH RECORDS?
         BO    *+8                 YES, HAVE FIRST RECORD ADDRESS
         LA    R2,4(,R2)           NO, POINT PAST BDW
         STM   R0,R2,DEBLOCKS      SAVE STATUS INFO
EDGTLOOP EQU   *
         LM    R0,R2,DEBLOCKS      RESTORE STATUS INFO
         CR    R0,R2               BLOCK EXHAUSTED?
         BNH   EDREADLP            YES, PERFORM ANOTHER READ
         TM    DCBRECFM,DCBRECF    FIXED-LENGTH RECORDS?
         BO    EDREDREC            YES, HAVE RECORD LENGTH
         ICM   R1,3,0(R2)          NO, GET LENGTH FROM RDW
         A     R2,EDFW4            POINT PAST RDW
         S     R1,EDFW4            ADJUST LENGTH FOR RDW
EDREDREC LA    R0,0(R1,R2)         POINT PAST THIS RECORD
         ST    R0,DEBLOCKS+8       SAVE ADDRESS OF NEXT RECORD
         LR    R3,R1               COPY RECORD LENGTH
         SAC   512                 SET AR MODE
         L     R15,GETALIN@
         BASR  R14,R15             GET STORAGE FOR A RECORD
         BZ    EDRDFULL            INSUFFICIENT STORAGE
         CPYA  A14,A15             COPY DATA SPACE ALET
         L     R14,BTMADDR         POINT TO LAST ENTRY
         L     R14,BAK(,R14)       POINT TO LAST DATA ENTRY
         MVC   FWD(4,R15),FWD(R14) SET NEW FORWARD POINTER TO BTMENTRY
         ST    R15,FWD(,R14)       SET FORWARD POINTER TO NEW ENTRY
         ST    R14,BAK(,R15)       SET NEW BACKWARD POINTER
         L     R14,BTMADDR         POINT TO LAST ENTRY
         ST    R15,BAK(,R14)       SET NEW LAST DATA ADDRESS
         STH   R3,OLEN(,R15)       SAVE THE ORIGINAL RECORD LENGTH
         LA    R14,CTLLEN(,R15)    POINT TO RECORD DATA AREA
         LR    R0,R15              SAVE RECORD HEADER ADDRESS
         L     R15,MAXRECSZ        GET NEW RECORD DATA AREA LENGTH
         STM   R2,R3,DOUBLE        SAVE RECORD DETAILS
         ICM   R3,8,EDBLNKS        SET PAD CHARACTER
         LR    R1,R2               SAVE BUFFER RECORD ADDRESS
         MVCL  R14,R2              LOAD RECORD'S DATA INTO STORAGE
         TM    DCBRECFM,DCBRECF    FIXED-LENGTH RECORDS?
         BO    EDSEQCHK            YES, TRAILING BLANKS NOT AN ISSUE
         CLC   EDFW1,DOUBLE+4      IS RECORD LONGER THAN 1 BYTE?
         BNL   EDSEQCHK            NO, RECORD IS TOO SHORT TO CHECK
         BCTR  R2,0                POINT TO LAST SOURCE DATA BYTE
         CLI   0(R2),C' '          IS IT A BLANK?
         BNE   EDSEQCHK            NO, GOOD
         LR    R15,R0              YES, POINT TO RECORD HEADER
         OI    FLG1(R15),CHGE      FLAG THIS LINE
         LA    R0,1
         A     R0,TRLBLNK#         ADJUST TRAILING BLANK RECORD COUNT
         ST    R0,TRLBLNK#
EDSEQCHK DS    0H
         SAC   0                   SET PRIMARY MODE
         TM    EDFLG2,E2NUM        SEQUENCE NUMBERS ACTIVE?
         BNO   COBOLCHK            NO
         S     R2,EDFW8            POINT TO SEQUENCE NUMBER
         TM    DCBRECFM,DCBRECV    VARIABLE-LENGTH RECORDS?
         BNO   *+8                 NO
         L     R2,DOUBLE           YES, POINT TO SEQUENCE NUMBER
         CLC   COUNTER1(8),0(R2)   IN ASCENDING ORDER?
         BNL   NUMRDOFF            NO
         MVC   COUNTER1(8),0(R2)   YES, SAVE NEW NUMBER
         L     R2,EDTABNUM         POINT TO TRANSLATE TABLE
         TRT   COUNTER1(8),0(R2)   EIGHT NUMERICS?
         BZ    COBOLCHK            YES
NUMRDOFF NI    EDFLG2,255-E2NUM    NUM OFF
COBOLCHK TM    EDFLG5,E5COB        COBOL SEQUENCE NUMBERS ACTIVE?
         BNO   EDRECSET            NO
         CLC   CALLPARM(6),0(R1)   IN ASCENDING ORDER?
         BNL   COBOLOFF            NO
         MVC   CALLPARM(6),0(R1)   YES, SAVE NEW NUMBER
         L     R2,EDTABNUM         POINT TO TRANSLATE TABLE
         TRT   CALLPARM(6),0(R2)   SIX NUMERICS?
         BZ    EDRECSET            YES
COBOLOFF NI    EDFLG5,255-E5COB    NUM STD
EDRECSET LA    R0,1
         A     R0,REDLINES         ADJUST INPUT RECORD COUNT
         ST    R0,REDLINES
         C     R0,EDFW1            WAS THE FIRST RECORD JUST LOADED?
         BNH   EDRDCAPS            YES, SO LESS THAN TWO RECORDS SO FAR
         LAM   A1,A1,DSPCALET      LOAD DATA SPACE ALET
         L     R1,BTMADDR          POINT TO BOTTOM OF DATA
         SAC   512                 SET AR MODE
         L     R1,BAK(,R1)         POINT TO RECORD JUST LOADED
         L     R1,BAK(,R1)         POINT TO SECOND LAST RECORD SO FAR
         L     R15,EDITSNT@        POINT TO SYNTAX COLOURING ROUTINE
         BASR  R14,R15             UPDATE LINE SYNTAX STATUS
         SAC   0                   SET PRIMARY MODE
EDRDCAPS LM    R2,R3,DOUBLE        RESTORE RECORD DETAILS
         LA    R15,EDCAPCHK
         BASR  R14,R15             CHECK CAPS SETTING
         B     EDGTLOOP            GET ANOTHER RECORD
         SPACE
EDNOMEM  CL    R15,EDFW8           I/O ERROR IN DIRECTORY?
         BL    EDRDEND             NO
         MVI   SYNADSW,X'FF'       YES
         MVI   SYNADMSG,C' '
         MVC   SYNADMSG+1(L'SYNADMSG-1),SYNADMSG
         MVC   SYNADMSG(8),=CL8'BLDL RC='
         STM   R15,R0,DOUBLE
         UNPK  SYNADMSG+8(3),DOUBLE+3(2)
         TR    SYNADMSG+8(2),EDHEX-C'0'
         MVC   SYNADMSG+10(6),=CL8' REAS='
         UNPK  SYNADMSG+16(3),DOUBLE+7(2)
         TR    SYNADMSG+16(2),EDHEX-C'0'
         MVI   SYNADMSG+18,C' '
         MVI   MSG,37              BLDL FAILED
         MVC   BLDLNAME,$MEMBER    SAVE MEMBER NAME FOR REVMSGS
         B     *+8
EDRDIOER MVI   MSG,112             I/O ERROR
         LA    R1,SYNADMSG         POINT TO ERROR MESSAGE
         LA    R0,L'SYNADMSG       GET THE MESSAGE LENGTH
         TPUT  (1),(0),R           ISSUE LINE MODE MESSAGE
EDRDEROR LA    R4,20               SET ERROR RETURN CODE
*                                  LEAVE DCB OPEN TO PREVENT DEALLOC'N
         SPACE
*         ADJUST BOUNDS ACCORDING TO SEQUENCE NUMBERS
EDRDEND  XASAM31
         L     R0,MAXRECSZ         GET LENGTH OF RECORD
         TM    EDFLG2,E2NUM        SEQUENCE NUMBERS ACTIVE?
         BNO   EDSEQ#OK            NO
         TM    DCBRECFM,DCBRECV    VARIABLE-LENGTH RECORDS?
         BZ    EDSEQFIX            NO, FIXED-LENGTH RECORDS
         MVI   EDLBND+3,8          SET LEFT EDIT COMMAND BOUND
         LA    R5,8
         A     R5,EDATWDTH         GET SCREEN DATA WIDTH PLUS EIGHT
         C     R5,MAXRECSZ         WOULD 'RIGHT 8' WORK?
         BH    EDSEQ#OK            NO, GO SET THE RIGHT BOUND
         MVI   EDOFFSET+3,8        YES, DO IT
         B     EDSEQ#OK            GO SET THE RIGHT BOUND
EDSEQFIX S     R0,EDFW8            YES, IGNORE SEQUENCE NUMBER COLUMNS
         TM    EDFLG5,E5COB        COBOL SEQUENCE NUMBERS ACTIVE?
         BNO   EDSEQ#OK            NO
         MVI   EDLBND+3,6          SET LEFT EDIT COMMAND BOUND
EDSEQ#OK ST    R0,EDRBND           SET RIGHT EDIT COMMAND BOUND
         ICM   R0,15,REDLINES      GET INPUT RECORD COUNT
         ST    R0,RECLINES         SET CURRENT RECORD COUNT
         BZ    EDRDEMTY            HANDLE EMPTY FILE
         SPACE
*         REPORT CHANGES TO THE EDIT PROFILE AND UPDATE BOUNDS
         SAC   512                 SET AR MODE
         MVI   DOUBLE,C'0'
         TM    EDFLG2,E2NUM        NUMBERED RECORDS FOUND?
         BNO   *+8                 NO
         OI    DOUBLE,1            YES
         TM    EDFLG5,E5COB        COBOL NUMBERS FOUND?
         BNO   *+8                 NO
         OI    DOUBLE,2            YES
         CLC   EPNUM,DOUBLE        DOES PROFILE MATCH DATA CONTENT?
         BE    EDRDNUMX            YES
         MVC   EPNUM,DOUBLE        NO, UPDATE PROFILE
         CLC   MAXRECSZ,EDFW50     IS DATA WIDE ENOUGH FOR A MESSAGE?
         BL    EDRDNUMX            NO, SO SKIP MESSAGE
         LA    R0,C'N'             YES, LOAD CAUTION CONTENT KEY
         BAS   R5,EDRDWARN         GET A MESSAGE
         MVC   CTLLEN+L'EDPRFWRN+1(L'EDRDNUM,R15),EDRDNUM
         TM    EPNUM,1             NUM ON?
         BO    EDRDNUM1            YES
         MVC   CTLLEN+L'EDPRFWRN+1+L'EDRDCAP-2(3,R15),EDOFF
EDRDNUM1 TM    EPNUM,2             COBOL?
         BNO   EDRDNUMX            NO, STD
         MVC   CTLLEN+L'EDPRFWRN+1+L'EDRDNUM-3(5,R15),EDRDCOBL
EDRDNUMX DS    0H                  E2NUM & E5COB NEVER REFERENCED AGAIN
         LA    R0,C'0'
         TM    STATUS10,$10CAP     LOWER CASE DATA FOUND?
         BNO   *+8                 NO
         LA    R0,C'1'             YES
         CLM   R0,1,EPCAPS         DOES PROFILE MATCH DATA CONTENT?
         BE    EDRDCAPX            YES
         STC   R0,EPCAPS           NO, UPDATE PROFILE
         CLC   MAXRECSZ,EDFW50     IS DATA WIDE ENOUGH FOR A MESSAGE?
         BL    EDRDCAPX            NO, SO SKIP MESSAGE
         LA    R0,C'C'             YES, LOAD CAUTION CONTENT KEY
         BAS   R5,EDRDWARN         GET A MESSAGE
         MVC   CTLLEN+L'EDPRFWRN+1(L'EDRDCAP,R15),EDRDCAP
         TM    STATUS10,$10CAP     CAPS ON?
         BO    EDRDCAPX            YES
         MVC   CTLLEN+L'EDPRFWRN+1+L'EDRDCAP-2(3,R15),EDOFF
EDRDCAPX DS    0H
         SAC   0                   SET PRIMARY MODE
         B     EDRDEXIT            BRANCH AROUND EMPTY FILE LOGIC
         SPACE
*         ADOPT PROFILE SETTINGS FOR EMPTY INPUT
EDRDEMTY OI    EDFLG1,E1MT         FLAG EMPTY INPUT FILE
         TM    EPCAPS,1            WAS CAPS OFF IN PROFILE?
         BO    *+8                 NO, LEAVE CAPS ON FOR NEW DATA
         NI    STATUS10,255-$10CAP YES, SET CAPS OFF FOR NEW DATA
         TM    EPNUM,2             NUM COBOL IN PROFILE?
         BO    *+8                 YES
         MVI   EDLBND+3,0          NO, RESET LEFT EDIT COMMAND BOUND
         TM    EPNUM,1             WAS NUM ON IN PROFILE?
         BO    EDRDEXIT            YES, RETURN TO CALLER WITH NO DATA
*        NI    EDFLG2,255-E2NUM    NO, SET NUM OFF FOR NEW DATA
         MVC   EDRBND,MAXRECSZ     SET RIGHT BOUND
         SPACE
*         TERMINATE
EDRDEXIT L     R14,EDRETSV1        RESTORE RETURN ADDRESS
         BR    R14                 RETURN TO CALLER WITH NO DATA
         SPACE
EDRDSPAN MVI   MSG,126             REQUEST ABORTED - SPANNED RECORDS
         B     EDRDABRT
EDNTFORV MVI   MSG,77              REQUEST ABORTED - RECFM NOT F OR V
         B     EDRDABRT
EDRDFULL MVI   MSG,123             REQUEST ABORTED - STORAGE FULL
         B     EDRDABRT
EDRDATTN MVI   MSG,29              REQUEST CANCELLED
EDRDABRT MVI   SYNADSW,X'FF'       TERMINATE REVEDIT
         B     EDRDEROR            EXIT
         SPACE
EDRDWARN L     R15,TOPADDR         POINT TO TOP OF DATA
         LAM   A15,A15,DSPCALET    LOAD DATA SPACE ALET
EDWARNLP L     R15,FWD(,R15)       POINT TO THE NEXT RECORD
         TM    FLG1(R15),LMSG      MESSAGE LINE?
         BNO   EDNOWARN            NO, END OF CHECK
         TM    FLG3(R15),LFIX      CAUTION LINE?
         BNO   EDNOWARN            NO, END OF CHECK
         CLC   CTLLEN(12,R15),EDPRFWRN
         BNE   EDWARNLP
         CLM   R0,1,CTLLEN+L'EDPRFWRN+1(R15)
         BNE   EDWARNLP            THIS ONE NOT ABOUT RIGHT SETTING
         B     EDWARNOK
EDNOWARN L     R15,GETALIN@
         BASR  R14,R15             GET STORAGE FOR A RECORD
         BZ    EDRDFULL            INSUFFICIENT STORAGE
         CPYA  A14,A15             COPY DATA SPACE ALET
         L     R14,TOPADDR         POINT TO FIRST ENTRY
         L     R14,FWD(,R14)       POINT TO FIRST DATA ENTRY
         MVC   BAK(4,R15),BAK(R14) SET NEW BACKWARD POINTER TO TOPENTRY
         ST    R15,BAK(,R14)       SET BACKWARD POINTER TO NEW ENTRY
         ST    R14,FWD(,R15)       SET NEW FORWARD POINTER
         L     R14,TOPADDR         POINT TO FIRST ENTRY
         ST    R15,FWD(,R14)       SET NEW FIRST DATA ADDRESS
         OI    FLG1(R15),LMSG      FLAG AS MESSAGE LINE
         OI    FLG3(R15),LFIX      NEVER SCROLL THIS LINE RIGHT
         LA    R0,1
         A     R0,MSGLINES         ADJUST MESSAGE LINE COUNT
         ST    R0,MSGLINES
EDWARNOK LA    R14,CTLLEN(,R15)    POINT TO RECORD DATA AREA
         LR    R0,R15              SAVE RECORD HEADER ADDRESS
         L     R15,MAXRECSZ        GET NEW RECORD DATA AREA LENGTH
         LA    R3,C' '             GET A BLANK
         SLL   R3,24               PROMOTE TO PAD AND ZERO LENGTH
         MVCL  R14,R2              BLANK ENTIRE PAYLOAD AREA
         LR    R15,R0              POINT TO RECORD HEADER
         MVC   CTLLEN(L'EDPRFWRN,R15),EDPRFWRN
         TM    STATUS10,$10CAP     CAPS ON?
         BOR   R5                  YES
         TR    CTLLEN+13(L'EDPRFWRN-13,R15),EDTUNKAP
         BR    R5                  RETURN TO CALLER
         SPACE
         DROP  R10                 EDITREAD
         SPACE
         DC    0F'0'
         PRINT NOGEN
         AIF   (&ENVBIG).EDDCBE2
EDSEQDCB DCB   DDNAME=-EDSEQIO,DSORG=PS,MACRF=(RP,WP),                 +
               EODAD=EDRDEND,SYNAD=EDSYNAD
EDPDSDCB DCB   DDNAME=-EDPDSIO,DSORG=PO,MACRF=(R,W),                   +
               EODAD=EDRDEND,SYNAD=EDSYNAD
         AGO   .EDDCBE3
.EDDCBE2 ANOP
EDSEQDCB DCB   DDNAME=-EDSEQIO,DSORG=PS,MACRF=(RP,WP),                 +
               EODAD=EDRDEND,SYNAD=EDSYNAD,DCBE=2
EDPDSDCB DCB   DDNAME=-EDPDSIO,DSORG=PO,MACRF=(R,W),                   +
               EODAD=EDRDEND,SYNAD=EDSYNAD,DCBE=2
EDDCBE   DCBE  BLOCKTOKENSIZE=LARGE
EDDCBEL  EQU   *-EDDCBE
.EDDCBE3 ANOP
EDUNDDCB DCB   DDNAME=-EDUNDO-,DSORG=PO,MACRF=(R,W),SYNAD=EDSYNAD
         PRINT GEN
         READ  EDREAD,SF,0,0,'S',MF=L
         SPACE
         DC    0D'0'
         LTORG
*  -CAUTION- PART MUST STAY IN UPPER CASE FOR CAUT2WND CHECKING
EDPRFWRN DC    CL30' -CAUTION-  PROFILE NOW SET TO'
EDRDCAP  DC    C'CAPS ON'
EDRDNUM  DC    C'NUM  ON  STD'
EDRDCOBL DC    C'COBOL'
         DC    0H'0'
         TITLE '  C H E C K   F O R   L O W E R   C A S E  '
*
*         THIS ROUTINE WILL RESET $10CAP IF LOWER
*         CASE ALPHABETICS ARE FOUND IN THE DATA.
*
*         THIS ROUTINE CAN BE CALLED IN AR MODE.
*         R15 POINTS TO EDCAPCHK.
*         R14 POINTS TO RETURN ADDRESS.
*         R2 CONTAINS THE RECORD ADDRESS.
*         R3 CONTAINS THE RECORD LENGTH.
*         R0, R2 AND R3 ARE ALTERED BY THIS ROUTINE.
*
         USING EDCAPCHK,R15
EDCAPCHK TM    STATUS10,$10CAP     CAPS OFF ALREADY?
         BNOR  R14                 YES, DO NOT SCAN FOR LOWER CASE
         TM    EDFLG5,E5COMP       PERFORMING A COMPARE?
         BOR   R14                 YES, DO NOT SCAN FOR LOWER CASE
         LA    R0,256
LOWERSCN CR    R3,R0               MORE THAN 256 BYTES TO GO?
         BNH   EDRECEND            NO
         TRT   0(256,R2),EDTLOWER  ANY LOWER CASE IN THIS CHUNK?
         BNZ   CAPITOFF            YES, END OF INPUT CASE SCAN
         AR    R2,R0               NO, POINT PAST THIS CHUNK
         SR    R3,R0               ADJUST LENGTH REMAINING
         BP    LOWERSCN            CONTINUE SCAN
         BR    R14                 GET ANOTHER RECORD
EDRECEND BCTR  R3,0                DECREMENT FOR EXECUTE
         EX    R3,LOWERTRT         CHECK FOR LOWER CASE
         BZR   R14                 NONE FOUND, RETURN TO CALLER
CAPITOFF NI    STATUS10,255-$10CAP LOWER CASE FOUND SO CAPS OFF
         BR    R14                 GET ANOTHER RECORD
         SPACE
LOWERTRT TRT   0(0,R2),EDTLOWER    <<< EXECUTED >>>
         SPACE
         DROP  R15                 EDCAPCHK
         TITLE '  C R E A T E   N E W   L I N E  '
*
*         THIS ROUTINE IS CALLED IN AR MODE.
*         R0 TO R14, AND A0 TO A14 ARE RESTORED ON EXIT.
*         R15 AND A15 POINT TO THE RETURNED RECORD ENTRY.
*         R15 AND THE PSW CC ARE ZEROED IF STORAGE IS EXHAUSTED.
*
         USING GETALINE,R10
GETALINE STM   R14,R12,12(R13)     SAVE REGISTERS
         LR    R10,R15             SET LOCAL BASE
         STAM  A0,A15,EDARSAVE     SAVE ACCESS REGISTERS
         LAM   A0,A14,EDZEROS      ZERO ACCESS REGISTERS
         LAM   A15,A15,DSPCALET    SET RETURN POINTER ALET
         ICM   R15,15,MPTANKOR     ANY ENTRIES RETURNED?
         BZ    USEFREEA            NO, USE FREE AREA
         MVC   MPTANKOR,FWD(R15)   YES, UPDATE EMPTY ANCHOR
         B     GOTALINE            RETURN WITH RECYCLED ENTRY
USEFREEA L     R3,FREESIZE         GET ACQUIRED FREE STORAGE SIZE
         S     R3,RECSTGSZ         UPDATE FREE STORAGE SIZE
         BM    XTNDAREA            NEED TO EXTEND THE DATA SPACE
         ST    R3,FREESIZE         SAVE FOR NEXT TIME
         L     R15,FREEAREA        POINT TO FREE STORAGE
         LR    R3,R15              COPY ADDRESS
         A     R3,RECSTGSZ         UPDATE FREE STORAGE ADDRESS
         ST    R3,FREEAREA         SAVE FOR NEXT TIME
GOTALINE XC    0(CTLLEN,R15),0(R15)  CLEAR RECORD CONTROL HEADER
         MVC   ECHO(6,R15),EDBLNKS CLEAR NEW LINE'S LINE COMMAND
NOTALINE L     R14,12(,R13)        RESTORE RETURN ADDRESS
         LM    R0,R12,20(R13)      RESTORE OTHER REGISTERS
         LAM   A0,A14,EDARSAVE     RESTORE OTHER ACCESS REGISTERS
         LTR   R15,R15             SET PSW CONDITION CODE
         BR    R14                 RETURN TO CALLER
         SPACE
XTNDAREA DS    0H                  PROCURE MORE VIRTUAL STORAGE
         AIF   (&ENVESA).DSPCXTD
         L     R0,EDCHUNK          GET THE ALLOCATION CHUNK SIZE
         MVI   GETMNTRC,47         TRACK GETMAIN IN CASE OF FAILURE
***      L     R14,RECURS#         GET THE SCREEN NUMBER
***      AR    R14,R14             DOUBLE IT
***      LA    R14,15(,R14)        GET THE SUBPOOL NUMBER
***      GETMAIN RC,LV=(0),BNDRY=PAGE,SP=(14),LOC=(31,64)
         GETMAIN RC,LV=(0),BNDRY=PAGE,LOC=(31,64)
         LTR   R15,R15             SUCCESS?
         BZ    MOREREGN            YES
         SR    R15,R15             NO, INDICATE WITH ZERO ADDRESS
         B     NOTALINE            RETURN WITH THIS
MOREREGN MVC   0(4,R1),EDATORIG    CHAIN STORAGE CHUNKS
         ST    R1,EDATORIG         UPDATE THE STORAGE CHAIN ORIGIN
         L     R0,EDCHUNK          GET THE STORAGE EXTEND SIZE
         LR    R15,R0              COPY IT
         A     R15,EDDATASZ        GET NEW EDIT DATA STORAGE SIZE
         ST    R15,EDDATASZ        SAVE IT
         ST    R0,4(,R1)           SAVE THE SIZE OF THIS CHUNK
         S     R0,EDFW8            DISCOUNT CONTROL AREA
         ST    R0,FREESIZE         SAVE STORAGE AVAILABLE FOR USE
         LA    R1,8(,R1)           POINT TO FIRST DATA SPOT
         ST    R1,FREEAREA         SAVE FIRST ADDRESS TO USE
         AGO   .EXTNDED
.DSPCXTD ANOP
         SAC   0                   SET PRIMARY MODE
         DSPSERV EXTEND,                                               +
               STOKEN=DSPCTOKN,                                        +
               BLOCKS=DSPCEXSZ,                                        +
               MF=(E,DSPCWORK,COMPLETE)
         LTR   R15,R15             DID EXTENSION WORK?
         BZ    XTNDOKAY            YES
         LAE   R15,0               NO, INDICATE WITH ZERO ADDRESS
         B     NOTALINE            RETURN WITH THIS
XTNDOKAY L     R3,DSPCEXSZ         GET EXTRA BLOCK COUNT
         SLL   R3,12               GET EXTRA BYTE COUNT
         LR    R0,R3               COPY IT
         A     R3,FREESIZE         GET NEW AVAILABLE BYTE COUNT
         ST    R3,FREESIZE         SAVE IT
         A     R0,EDDATASZ         GET NEW EDIT DATA STORAGE SIZE
         ST    R0,EDDATASZ         SAVE IT
         LAM   A15,A15,DSPCALET    SET RETURN POINTER ALET
         SAC   512                 SET AR MODE
.EXTNDED ANOP
         B     USEFREEA            REDRIVE THE REQUEST
         SPACE
         DROP  R10                 GETALINE
         TITLE '  E D I T S C R N   -   F O R M A T   S C R E E N  '
*
*    THE DYNAMIC AREA IS LOADED WITH SCREEN ATTRIBUTE INFORMATION
*    AS WELL AS FILE DATA.  UNDISPLAYABLES MUST BE TRANSLATED TO
*    ATTRIBUTE BYTES.  ALL CODE POINTS IN THE X'40' TO X'FE' RANGE
*    ARE CONSIDERED DISPLAYABLE.  PENDING LINE COMMANDS ON VISIBLE
*    LINES MUST ALSO BE ECHOED.
*
*    INSERTION LINES ARE ONLY CREATED WHEN SHOWN ON THE SCREEN -
*    THE STORAGE IS ALLOCATED FOR THEM AT DISPLAY TIME.  UNUSED
*    INSERTION LINES ARE TO BE DELETED AFTER INPUT MERGING.  ONCE
*    THE DISPLAY SCREEN HAS BEEN GENERATED THE COMMAND ELEMENTS
*    SAVED ON THE INSERTION COMMAND CHAIN CAN BE PURGED.
*
*    THE DISPLAY CURSOR POSITION IS SET ACCORDING TO (IN ORDER):
*      - EXPLICIT PLACEMENT OF CURSOR, PERHAPS DUE TO ERROR OR SEARCH.
*      - EARLIEST DISPLAYED INSERTION LINE.
*      - AUTOMATIC MOVEMENT BASED ON PREVIOUS POSITION.
*      - HOME.
*
*    THE NEW SCREEN DYNAMIC AREA IS COPIED FOR LATER COMPARISON.
*
         USING EDITSCRN,R10,R8
EDITSCRN LR    R10,R15             SET LOCAL BASE
         LA    R8,1
         LA    R8,4095(R8,R10)
         ST    R14,EDRETSV1        SAVE RETURN ADDRESS
         SPACE
*         ASCERTAIN ADDRESS OF PANEL DYNAMIC AREA
         SPACE
         L     R14,SCRNCOLS        GET SCREEN WIDTH
         AR    R14,R14             DOUBLE IT
         L     R0,SCREENBF         POINT TO THE PRIMARY BUFFER
         AR    R0,R14              POINT TO THE DYNAMIC AREA
         ST    R0,EDYNAREA         SAVE ITS ADDRESS
         SPACE
*         CHECK THAT SCROLL UP NOT NEEDED TO SHOW DATA SEARCH RESULT
         SPACE
         TM    FINDSW,FVRT         NEED TO SHOW DATA SEARCH RESULT NOW?
         BNO   REDOSCRN            NO
         CLC   FNDNUM,LINENMBR     IS A SCROLL UP NEEDED?
         BL    EDLOCFND            YES, GO DO IT FIRST
         SPACE
*         RESET PRIMARY AND SHADOW SCREEN BUFFERS
         SPACE
REDOSCRN MVI   HDCOLOR,X'04'       CLEAR SCREEN TO GREEN BLANKS
         L     R15,=A(REVHEAD)     POINT TO HEADING ROUTINE
         BASR  R14,R15             INITIALISE FIRST TWO SCREEN LINES
         SPACE
*         SET UP DATA SET NAME FOR HEADING
         SPACE
         L     R6,SCREENBF         POINT TO THE PRIMARY SCREEN BUFFER
         MVC   1(8,R6),@EDITLBL    FLAG DATA EDIT TO VISTA TN3270
         TM    STATUS13,$13RFE     RUNNING UNDER RFE MENU SYSTEM?
         BNO   *+10                NO
         MVC   2(2,R6),=C'FE'      YES, ADJUST FACILITY NAME
         TM    STATUS11,$11VIEW    JUST HERE FOR THE VIEW?
         BNO   *+10                NO, EDIT
         MVC   4(4,R6),=C'VIEW'    YES, ADJUST FACILITY NAME
         LH    R1,DSNAIM           GET THE DATA SET NAME LENGTH
         BCTR  R1,0                DECREMENT FOR EXECUTE
         EX    R1,EDTOPDSN         LOAD THE DATA SET NAME
         LA    R1,10+1(R1,R6)      POINT PAST THE NAME JUST LOADED
         CLC   $MEMBER,EDBLNKS     ANY MEMBER NAME PRESENT?
         BNE   EDMEMNAM            YES, GO LOAD IT
         MVC   0(8,R1),EDONVIO     ADD ' ON VIO ' FOR SEQUENTIAL
         CLC   $VOLSER,EDBLNKS     IS IT REALLY VIO?
         BE    EDGOTVOL            YES
         MVC   4(6,R1),$VOLSER     NO, SHOW ACTUAL VOLUME
EDGOTVOL TM    STATUS10,$10CAP     CAPS ON?
         BO    SCRNHDOK            YES, HEADING ALL SET
         XC    1(2,R1),EDBLNKS     NO, FLAG WITH SOME LOWER CASE
         B     SCRNHDOK            HEADING ALL SET
EDMEMNAM MVI   0(R1),C'('
         MVC   1(8,R1),$MEMBER     LOAD MEMBER NAME
         MVI   9(R1),C')'
EDPDSBLP CLI   8(R1),C' '          TRAILING BLANK IN MEMBER NAME?
         BNE   EDHDSTAT            NO, HEADING ALL SET
         MVI   8(R1),C')'          YES, BRING BRACKET CLOSER
         MVI   9(R1),C' '          ERASE PREVIOUS BRACKET
         BCT   R1,EDPDSBLP         BACKUP ONE AND CHECK IT
EDHDSTAT TM    EDFLG2,E2STAT       STATS ON?
         BNO   SCRNHDOK            NO
         MVI   11(R1),C'-'
         LH    R0,EDNEWVER         GET NEW VERSION
         TM    EDFLG1,SAVEY        DATA CHANGED?
         BO    *+8                 YES
         IC    R0,EDBLVER          NO, GET OLD VERSION
         CVD   R0,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  13(2,R1),DOUBLE     SHOW VERSION
         MVI   15(R1),C'.'
         LH    R0,EDNEWLVL         GET NEW LEVEL
         TM    EDFLG1,SAVEY        DATA CHANGED?
         BO    *+8                 YES
         IC    R0,EDBLLVL          NO, GET OLD LEVEL
         CVD   R0,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  16(2,R1),DOUBLE     SHOW MODIFICATION LEVEL
         CLI   13(R1),C'0'         DOES VERSION HAVE A LEADING ZERO?
         BNE   SCRNHDOK            NO
         MVC   13(5,R1),14(R1)     YES, SUPPRESS IT
SCRNHDOK MVC   MSGDSN,1(R6)        SAVE TEXT FOR REVCOMM
         SPACE
*         SET CURSOR DISPLAY LOCATION
         SPACE
         L     R1,ISPFPAGE         GET VISIBLE LINE COUNT
         TM    STATUS7,EDCOLS      IS LINE 3 FOR STATUS DISPLAY?
         BZ    *+8                 NO
         LA    R1,1(,R1)           YES, COUNT INDICATOR LINE
         M     R0,SCRNCOLS         GET VISIBLE LOCATION COUNT
         ST    R1,VSBLPOSI         SAVE IT
         LAM   A0,A15,EDZEROS      CLEAR ALL ACCESS REGISTERS
         LAM   A2,A2,DSPCALET      LOAD DATA SPACE ALET
         SAC   512                 SET AR MODE
         ICM   R2,15,EDCSROUT      CURSOR LOCATION SET?
         BZ    CSRRECHK            NO, CHECK FOR CURSOR AUTOMATIC MOVE
         BM    CSR@HOME            CURSOR GO TOO HIGH SO MOVE TO HOME
         ST    R0,CSRRECAD         CLEAR AUTOMATIC CURSOR MOVE
         CR    R2,R1               IS CURSOR GOING TO BE VISIBLE?
         BNH   SCRLN1OK            YES, GOOD, LEFT/RIGHT POSI SETTLED
CSR@HOME ST    R0,EDCSROUT         NO, MOVE CURSOR TO HOME
         B     SCRLN1OK            TOP LINE NOW FORMATTED
         SPACE
CSRRECHK TM    EDFLG2,E2CRU        CSRRECAD UPDATED SINCE DISPLAY?
         BO    SCRLN1OK            YES, CAN NOW SHOW COLUMNS ON LINE 1
         ICM   R2,15,CSRRECAD      WAS CURSOR ON A DATA LINE?
         BZ    SCRLN1OK            NO, FORGET ABOUT AUTOMATIC MOVE
         CLC   EDFW8,EDCSRCOL      CURSOR IN DATA PART OF SCREEN?
         BNL   SCRLN1OK            NO, LEAVE IT
         ICM   R2,15,FWD(R2)       YES, POINT TO THE NEXT RECORD ENTRY
         BZ    SCRLN1OK            BOTTOM-OF-DATA SO CURSOR GOES HOME
         ST    R2,CSRRECAD         SAVE UPDATED ADDRESS - HOME IF ZERO
         ICM   R0,15,EDTABMIN      ARE ANY SOFTWARE TABS SET?
         BZ    SCRLN1OK            NO, DO NOT SCROLL LEFT
         ST    R0,EDTAB@           YES, MOVE CURSOR TO FIRST TAB COLUMN
         BCTR  R0,0                CONVERT COLUMN TO OFFSET
         C     R0,EDOFFSET         NEED TO SCROLL LEFT TO SHOW IT?
         BNL   SCRLN1OK            NO
         ST    R0,EDOFFSET         YES, MAKE IT FIRST VISIBLE COLUMN
         SPACE
*         FORMAT COLUMN RANGE ON DISPLAY
         SPACE
SCRLN1OK L     R0,EDATWDTH         GET SCREEN DATA WIDTH
         A     R0,EDOFFSET         GET LAST VISIBLE COLUMN NUMBER
         CVD   R0,DOUBLE           GET LAST COLUMN NUMBER IN DECIMAL
         L     R1,SCRNCOLS         GET SCREEN WIDTH
         S     R1,EDFW7            GET OFFSET INTO REVLN1
         A     R1,SCREENBF         POINT TO TARGET ADDRESS
         MVC   0(6,R1),EDED5Z
         EDMK  0(6,R1),DOUBLE+5
         LA    R0,1
         A     R0,EDOFFSET         GET FIRST VISIBLE COLUMN NUMBER
         CVD   R0,DOUBLE           GET FIRST COLUMN NUMBER IN DECIMAL
         S     R1,EDFW7
         MVC   0(6,R1),EDED5Z      (USED TO SHOW ALL 5 DIGITS FOR START
         EDMK  0(6,R1),DOUBLE+5    & END COLUMNS FOR VISTA GRAPHICS
         S     R1,EDFW8            EXPERIMENTAL LIMITED RELEASE TO SHOW
         MVC   0(7,R1),=C'COLUMNS' CO-ORDS IN DATA RATHER THAN SCREEN)
         TM    STATUS10,$10CAP     CAPS ON?
         BO    TOPTXTOK            YES
         XC    1(6,R1),EDBLNKS     NO, FLAG WITH SOME LOWER CASE
TOPTXTOK BCTR  R1,0
         MVI   0(R1),C' '          INSERT A LEADING BLANK
         SPACE
*         PREPARE TO LOOP THROUGH DATA LINES
         SPACE
         MVC   EDRETSV2,LINENMBR   GET TOP DATA LINE NUMBER
         L     R2,LINEADDR         GET TOP DATA LINE ADDRESS
         L     R6,EDYNAREA         GET DYNAMIC AREA ADDRESS
         L     R7,EDITDIR@         GET SCREEN DIRECTORY ADDRESS
         L     R5,SCRNLNES         GET NUMBER OF SCREEN LINES
         BCTR  R5,0
         BCTR  R5,0                GET NUMBER OF LINES TO LOAD
         SR    R0,R0
         ST    R0,COUNTER1         RESET PENDING INSERT COUNT
         ST    R0,TOPINSLN         CLEAR TOP INSERTED LINE POINTER
         ST    R0,CSROUTLN         CLEAR CURSOR SCREEN LINE POINTER
         ST    R0,CSRDIRAD         CLEAR CURSOR DIRECTORY POINTER
         TM    EDFLG1,E1MT         INITIAL DISPLAY OF EMPTY FILE?
         BNO   *+8                 NO
         MVI   TOPINSLN,X'80'      YES, LEAVE CURSOR AT HOME
         LAM   A0,A15,EDZEROS      CLEAR ALL ACCESS REGISTERS
         LAM   A2,A2,DSPCALET      LOAD DATA SPACE ALET
         SAC   512                 SET AR MODE
         SPACE
*         DISPOSE OF HIDDEN EXCLUDED LINES AT TOP OF SCREEN
         SPACE
         TM    EPHIDE,1            HIDING EXCLUDED LINES?
         BZ    SHOWLIN3            NO
         L     R0,LINENMBR         GET TOP DATA LINE NUMBER
SHOLN3LP TM    FLG1(R2),XCLD       IS THE TOP LINE EXCLUDED?
         BZ    SHOWLIN3            NO
         TM    FLG1(R2),LMSG       YES, IS THIS A MESSAGE LINE?
         L     R2,BAK(,R2)         POINT TO PREVIOUS RECORD
         ST    R2,LINEADDR         UPDATE TOP LINE ADDRESS
         BO    SHOLN3LP            YES, LINE NUMBER UNCHANGED
         BCTR  R0,0                DECREMENT LINE NUMBER
         ST    R0,LINENMBR         UPDATE TOP LINE NUMBER
         ST    R0,EDRETSV2         UPDATE CURRENT LINE NUMBER
         B     SHOLN3LP
         SPACE
*         GENERATE PROFILE OR DATA COLUMN INDICATOR LINE
         SPACE
SHOWLIN3 TM    STATUS7,EDCOLS      IS LINE 3 FOR STATUS DISPLAY?
         BZ    SCRNLNLP            NO
         MVI   EDIRREC(R7),EDIRCOL FLAG LINE IS COLUMN MARKER
         MVI   0(R6),FLDOUTLO      LOW INTENSITY FOR COLUMNS LABEL
         L     R0,EDDATASZ         GET SIZE OF STORAGE BACKING DATA
         SRL   R0,10               CONVERT TO KILOBYTES
         LR    R14,R0              COPY IT
         SRL   R14,10              CONVERT TO MEGABYTES
         SLL   R14,10              CONVERT TO KILOBYTES
         CR    R0,R14              SIZE A MULTIPLE OF MEGABYTES?
         BE    SHOSTGMB            YES, GO SHOW MEGABYTES
         CVD   R0,DOUBLE
         LA    R14,9
         CLM   R14,15,DOUBLE+2     MORE THAN 9,999KB?
         BL    SHOSTGMB            YES, GO SHOW MEGABYTES
         LA    R14,=C'KB'          NO
         B     SHOSTGOK            GO SHOW KILOBYTES
SHOSTGMB SRL   R0,10               CONVERT TO MEGABYTES
         CVD   R0,DOUBLE
         LA    R14,=C'MB'
SHOSTGOK MVC   1(6,R6),EDED9Z
         ED    1(6,R6),DOUBLE+5
         MVC   1(4,R6),3(R6)       MAKE ROOM FOR SCALE LABEL
         MVC   5(2,R6),0(R14)      INDICATE UNITS
         MVI   7(R6),FLDOUTHI      HIGH INTENSITY FOR COLUMNS LINE
         A     R6,SCREENSZ         POINT TO LINE'S SHADOW
         MVI   1(R6),X'01'         USE BLUE FOR COLUMNS LINE LABEL
         MVC   2(5,R6),1(R6)       SPREAD ALONG WHOLE FIELD
         L     R14,VIEWIDTH        GET THE SCREEN DATA WIDTH
         BCTR  R14,0               DO NOT COUNT SEED
         BCTR  R14,0               DECREMENT FOR EXECUTE
         MVI   8(R6),X'05'         USE TURQUOISE FOR COLUMNS LINE
         EX    R14,COLSPRED        MAKE COLUMNS INDICATOR TURQUOISE
         S     R6,SCREENSZ         POINT BACK TO PRIMARY BUFFER
         SPACE
SHOWCOLS L     R0,EDOFFSET         GET DISTANCE SCROLLED RIGHT
         CVD   R0,DOUBLE           GET IT IN DECIMAL
         L     R0,EDATWDTH         GET THE SCREEN DATA WIDTH
         LA    R1,8(,R6)           POINT TO THE FIRST DATA COLUMN
COLSLOOP AP    DOUBLE,EDDEC1       GET COLUMN NUMBER
         MVI   0(R1),C'-'          LOAD DASH
         CLI   DOUBLE+7,X'5C'      NEED A PLUS?
         BNE   *+8                 NO
         MVI   0(R1),C'+'          YES, LOAD IT
         CLI   DOUBLE+7,X'0C'      NEED A DIGIT?
         BNE   NEXT_COL            NO
         MVC   0(1,R1),DOUBLE+6    YES, LOAD IT
         OI    0(R1),X'F0'         MAKE IT DISPLAYABLE
NEXT_COL LA    R1,1(,R1)           POINT TO THE NEXT COLUMN
         BCT   R0,COLSLOOP         LOOP FOR EACH DATA COLUMN ON SHOW
         ICM   R0,15,EDOFFSET      CURRENTLY AT LEFT MAX?
         BNZ   SCRNXTIN            NO, COLUMNS LINE COMPLETE
         TM    DCBRECFM,DCBRECCA   ANSI CARRIAGE CONTROL?
         BNO   *+8                 NO
         MVI   8(R6),C'A'          YES, INDICATE THIS
         TM    DCBRECFM,DCBRECCM   MACHINE CARRIAGE CONTROL?
         BNO   SCRNXTIN            NO
         MVI   8(R6),C'M'          YES, INDICATE THIS
         B     SCRNXTIN            GO FORMAT FIRST DATA LINE OF SCREEN
COLSPRED MVC   9(0,R6),8(R6)       <<< EXECUTED >>>
         SPACE
*         LOOP THROUGH THE DATA DISPLAY SCREEN LINES
         SPACE
SCRNLNLP ICM   R0,15,COUNTER1      GET PENDING INSERT COUNT
         BNP   SCRNTINS            NO INSERTIONS PENDING
         SPACE
*         DETECT AND DIVERT A TEXT ENTRY REQUEST
         SPACE
         CLI   COUNTER1,X'7F'      TEXT ENTRY REQUEST?
         BNE   SCRNOTTE            NO
         L     R2,BAK(,R2)         YES, POINT TO PREVIOUS LINE
         L     R15,=A(EDITTEXT)    POINT TO TEXT ENTRY ROUTINE
         BASR  R14,R15             INVOKE IT
         L     R2,FWD(,R2)         POINT TO LINE TO SHOW NOW
         B     SCRNTINS            GO SHOW ENTERED TEXT
         SPACE
*         GENERATE DISPLAY FOR LINE INSERTION
         SPACE
SCRNOTTE BCTR  R0,0                DECREMENT
         ST    R0,COUNTER1         SAVE NEW COUNT
         TM    FINDSW,FVRT         LOCATION CONTROLLED BY FIND RESULTS?
         BO    INSCSROK            YES, DO NOT PUT CURSOR ON INSERTION
         ICM   R15,15,TOPINSLN     IS THIS THE FIRST INSERTED LINE?
         BNZ   INSCSROK            NO, ALREADY HAVE INSERTS THIS SCREEN
         ST    R6,TOPINSLN         YES, SAVE ITS ADDRESS
         ST    R7,CSRDIRAD         SAVE DIRECTORY ENTRY ADDRESS
         OI    CSRDIRAD,EDIRINS    FLAG CURSOR ON INSERTED LINE
INSCSROK MVI   EDIR1ST(R7),EDIRINS FLAG INSERTED LINE FOR EDITLINE
         L     R15,GETALIN@
         BASR  R14,R15             GET STORAGE FOR AN INSERTED RECORD
         BNZ   CANDOINS            STORAGE ACQUIRED
         ST    R15,COUNTER1        NONE, SO CLEAR PENDING INSERTS
         MVI   MSG,123             REQUEST ABORTED - STORAGE FULL
         B     SCRNTINS            CONTINUE FORMATTING DISPLAY
CANDOINS ST    R15,EDIRREC(,R7)    SET FIRST RECORD OF LINE
         ST    R15,EDIRFIN(,R7)    SET LAST RECORD OF LINE
         OI    FLG1(R15),LINS      FLAG LINE AS INSERTION
         LAE   R14,CTLLEN(,R15)    POINT TO RECORD DATA AREA
         L     R15,MAXRECSZ        GET NEW RECORD DATA AREA LENGTH
         SR    R3,R3               ZERO SOURCE LENGTH
         ICM   R3,8,EDBLNKS        SET PAD CHARACTER
         MVCL  R14,R2              BLANK OUT NEW RECORD
         L     R15,EDIRREC(,R7)    POINT TO NEW RECORD
         LAE   R3,0(,R15)          POINT TO NEW RECORD
         LA    R0,EDIRSIZ          GET ENTRY SIZE
         SR    R7,R0               TOP DATA LINE CAN NEVER BE AN INSERT
         L     R15,EDIRFIN(,R7)    POINT TO PREVIOUS RECORD
         AR    R7,R0               RESTORE DIRECTORY ENTRY POINTER
         MVC   FWD(4,R3),FWD(R15)  SET NEW FORWARD POINTER
         ST    R15,BAK(,R3)        SET NEW BACKWARD POINTER
         ST    R3,FWD(,R15)        UPDATE OLD FORWARD POINTER
         L     R15,FWD(,R3)        POINT TO NEXT RECORD
         ST    R3,BAK(,R15)        UPDATE OLD BACKWARD POINTER
         MVI   0(R6),FLDINHI       HIGH INTENSITY FOR COMMAND FIELD
         A     R6,SCREENSZ         POINT TO LINE'S SHADOW
         MVI   1(R6),X'02'         USE RED FOR HIGH INTENSITY
         MVC   2(5,R6),1(R6)       SPREAD ALONG WHOLE FIELD
         LA    R0,EDTABL/4         GET MAXMIMUM TABS COLUMN COUNT
         LAE   R15,EDTAB#          POINT TO THE TABS COLUMN NUMBERS
INSTABLP ICM   R1,15,0(R15)        GET TABS COLUMN NUMBER
         BZ    INSTABOK            END OF ACTIVE SLOTS REACHED
         BCTR  R1,0                CONVERT COLUMN TO OFFSET
         S     R1,EDOFFSET         CONVERT TO SCREEN COLUMN
         BM    INSTABNX            COLUMN IS LEFT OF SCREEN
         A     R1,EDFW8            ACCOUNT FOR LINE NUMBER AREA
         C     R1,SCRNCOLS         IS IT TO THE RIGHT OF SCREEN?
         BNL   INSTABNX            YES
         LAE   R1,0(R1,R6)         POINT TO SHADOW BUFFER LOCATION
         OI    0(R1),X'30'         FLAG WITH UNDERSCORE
INSTABNX LA    R15,4(,R15)         POINT TO NEXT TABS COLUMN NUMBER
         BCT   R0,INSTABLP
INSTABOK S     R6,SCREENSZ         POINT BACK TO PRIMARY BUFFER
         MVI   1(R6),QUOTE         SHOW QUOTES INSTEAD OF NUMBER
         MVC   2(5,R6),1(R6)
         MVI   7(R6),FLDINLO       LOW INTENSITY FOR FILE DATA
         L     R15,EDATWDTH        GET SCREEN DATA WIDTH
         LAE   R1,8(R15,R6)        POINT PAST END OF RECORD
         TM    EDFLG1,E1SHORT      IS DATA TOO SHORT FOR LINE?
         BNO   *+8                 NO
         MVI   0(R1),FLDOUTLO      YES, END LINE WITH ATTRIBUTE BYTE
         BCTR  R1,0                POINT TO LAST DATA BYTE
         MVI   0(R1),0             SET A NULL TO TEST FOR UPDATE
         TM    EPHEX,1             IS HEX ON?
         BNO   SCRNXTIN            NO, END OF INSERTED LINE PROCESSING
         SPACE
*         GENERATE EXTRA LINES FOR INSERTIONS WHEN HEX IS ON
         SPACE
         ST    R7,EDDIREND         REMEMBER THIS LINE USED IN CASE LAST
         S     R5,EDFW1            YES, DECREMENT LINE COUNT
         BNP   EDCSRFND            THAT WAS THE LAST SCREEN LINE
         A     R6,SCRNCOLS         POINT TO NEXT LINE IN BUFFER
         MVI   0(R6),FLDOUTLO      DELETE LINE COMMAND AREA
         LA    R1,EDIRSIZ(,R7)     POINT TO NEXT DIRECTORY ENTRY
         MVC   0(EDIRSIZ,R1),0(R7) COPY LINE PARTICULARS
         LR    R7,R1               ADJUST DIRECTORY ENTRY POINTER
         ST    R7,EDDIREND         REMEMBER THIS LINE USED IN CASE LAST
         S     R5,EDFW1            DECREMENT LINE COUNT
         BNP   EDCSRFND            THIS IS THE LAST SCREEN LINE
         MVI   7(R6),FLDINLO       ALLOW HEX DIGIT UPDATE
         L     R15,EDATWDTH        GET WIDTH OF DATA TO LOAD
         BCTR  R15,0               DECREMENT FOR SEED
         BCTR  R15,0               DECREMENT FOR EXECUTE
         MVI   8(R6),C'4'          LOAD SEED
         EX    R15,EDINSREP        PROPAGATE FOURS
         LA    R1,10(R15,R6)       POINT PAST DATA
         TM    EDFLG1,E1SHORT      IS DATA TOO SHORT FOR LINE?
         BNO   *+8                 NO
         MVI   0(R1),FLDOUTLO      END DATA AREA WITH ATTRIBUTE BYTE
         A     R6,SCRNCOLS         POINT TO NEXT LINE IN BUFFER
         LA    R1,EDIRSIZ(,R7)     POINT TO NEXT DIRECTORY ENTRY
         MVC   0(EDIRSIZ,R1),0(R7) COPY LINE PARTICULARS
         LR    R7,R1               ADJUST DIRECTORY ENTRY POINTER
         MVI   8(R6),C'0'          LOAD SEED
         EX    R15,EDINSREP        PROPAGATE NOUGHTS
         LA    R1,1(R15,R14)       POINT PAST DATA
         TM    EDFLG1,E1SHORT      IS DATA TOO SHORT FOR LINE?
         BNO   *+8                 NO
         MVI   0(R1),FLDOUTLO      END DATA AREA WITH ATTRIBUTE BYTE
         S     R5,EDFW1            DECREMENT LINE COUNT
         BNP   EDCSRFND            THAT WAS THE LAST SCREEN LINE
         A     R6,SCRNCOLS         POINT TO NEXT LINE IN BUFFER
         MVI   0(R6),FLDOUTHI      PREPARE FOR A LINE OF DASHES
         MVI   1(R6),C'-'          SET SEED
         L     R1,SCRNCOLS
         S     R1,EDFW4
         EX    R1,EDXDASHS         SPREAD DASHES
         A     R6,SCREENSZ         POINT TO THE SHADOW
         MVI   1(R6),X'07'         MAKE THE DASHES WHITE
         LA    R1,1(,R1)           GO TO END OF LINE
         EX    R1,EDXDASHS         MAKE REST OF LINE WHITE
         S     R6,SCREENSZ         POINT BACK TO THE PRIMARY BUFFER
         LA    R1,EDIRSIZ(,R7)     POINT TO NEXT DIRECTORY ENTRY
         MVC   0(EDIRSIZ,R1),0(R7) COPY LINE PARTICULARS
         LR    R7,R1               ADJUST DIRECTORY ENTRY POINTER
         B     SCRNXTIN            END OF INSERTED LINE PROCESSING
         SPACE
*         GENERATE DISPLAY FOR EXISTING DATA LINE
         SPACE
SCRNTINS L     R0,EDRETSV2         GET RECORD SEQUENCE NUMBER
         ST    R0,EDIR1ST(,R7)     SET LINE'S FIRST RECORD NUMBER
         ST    R0,EDIRLST(,R7)     SET LINE'S LAST RECORD NUMBER
         ST    R2,EDIRREC(,R7)     SET LINE'S FIRST RECORD ENTRY
         ST    R2,EDIRFIN(,R7)     SET LINE'S LAST RECORD ENTRY
         TM    EDFLG1,E1FREEZE     IS ERROR STATUS SET?
         BO    AUTOINOK            YES, SKIP AUTO INSERT
         C     R2,INSRECAD         AUTOMATIC INSERT AFTER THIS LINE?
         BNE   AUTOINOK            NO
         CLC   EDCSRCOL,EDFW8      CURSOR IN DATA PART?
         BNH   AUTOINOK            NO
         OI    EDFLG4,E4RT2        YES, PREPARE FOR 'RIGHT' COMMAND
         TM    EDFLG4,E4RT1        IS PRIMARY COMMAND 'RIGHT'?
         BO    AUTOINOK            YES, SUPPRESS INSERT FOR THE MOMENT
         CLC   EDCSROFF,EDTAB@     IMPLEMENTING A SOFTWARE TAB?
         BNH   AUTOINOK            YES, SUPPRESS INSERT FOR THE MOMENT
         NI    EDFLG4,255-E4RT2    NO, RESET FLAG
         MVC   COUNTER1,EDFW1      QUEUE IT UP
         TM    FINDSW,FVRT         LOCATION CONTROLLED BY FIND RESULTS?
         BO    AUTOINOK            YES, DO NOT SCROLL TO SHOW INSERTION
         LA    R14,3               GET THREE
         TM    EPHEX,1             IS HEX ON?
         BNO   *+8                 NO
         LA    R14,9               YES, GET NINE
         C     R14,ISPFPAGE        SPACE FOR AT LEAST THREE DATA LINES?
         BH    AUTOINOK            NO, FORGET ABOUT AUTO SCROLL
         CR    R5,R14              BEFORE SECOND LAST LINE?
         BNL   AUTOINOK            YES, PLENTY OF ROOM FOR INSERT
         L     R7,EDITDIR@         NO, POINT TO FIRST SCREEN DATA LINE
         LA    R7,EDIRSIZ(,R7)     POINT TO SECOND SCREEN DATA LINE
         TM    EPHEX,1             IS HEX ON?
         BNO   *+8                 NO
         LA    R7,3*EDIRSIZ(,R7)   YES, POINT TO FIFTH SCREEN ENTRY
         TM    STATUS7,EDCOLS      IS LINE 3 FOR STATUS DISPLAY?
         BZ    *+8                 NO
         LA    R7,EDIRSIZ(,R7)     YES, ACCOUNT FOR INDICATOR LINE
         TM    EDIR1ST(R7),EDIRINS IS SECOND DATA LINE AN INSERTION?
         BO    AUTOINOK            YES, SO SKIP SCROLL
         MVC   LINEADDR,EDIRREC(R7)
         MVC   LINENMBR,EDIR1ST(R7)
         SAC   0                   SET PRIMARY MODE
         B     REDOSCRN            REPAINT SCROLLED DOWN A LINE
AUTOINOK CLI   ECHO(R2),C' '       ANY LINE COMMAND TO ECHO?
         BH    ECHOLCMD            YES
         TM    FLG2(R2),LLBL       DOES LINE HAVE A LABEL?
         BZ    ECHOSEQN            NO
         LA    R14,LABANKOR        YES, POINT TO THE LABEL CHAIN ANCHOR
         USING @EDLABEL,R14
ECHOLBLP ICM   R14,15,EDL_NEXT     POINT TO NEXT LABEL ELEMENT
         BZ    ECHOSEQN            SHOULD NOT REACH END OF CHAIN
         C     R2,EDL_ADDR         FOUND THIS LINE'S LABEL ELEMENT?
         BNE   ECHOLBLP            NO, KEEP LOOKING
         MVC   ECHO(6,R2),EDL_NAME YES, REFRESH IT
         B     SHOWLCMD            NOW GO DISPLAY IT
         DROP  R14                 @EDLABEL
ECHOSEQN TM    FLG1(R2),XCLD       EXCLUDED LINE?
         BO    XCLDSEQN            YES
         ICM   R14,15,BAK(R2)      TOP OF DATA?
         BZ    ECHOSTAR            YES
         ICM   R14,15,FWD(R2)      END OF DATA?
         BZ    ECHOSTAR            YES
         TM    FLG1(R2),LMSG       MESSAGE LINE?
         BO    ECHONOTE            YES
         CVD   R0,DOUBLE
         OI    DOUBLE+7,X'0F'
         MVI   0(R6),FLDINLO       LOW INTENSITY FOR LINE NUMBER
         UNPK  1(6,R6),DOUBLE      SHOW LINE NUMBER
         STC   R0,DOUBLE
         TM    DOUBLE,X'03'        LINE NUMBER MULTIPLE OF 4?
         BNZ   SCLINNUM            NO
         OI    EDFLG4,E4TBLN       YES, SHOW TABS
SCLINNUM TM    EPNUM,1             IS NUMBER ON?
         BNO   SCLINDAT            NO, GO SHOW THE DATA
         TM    EDFLG1,SAVEY        HAS ANYTHING CHANGED?
         BNO   SCLINDAT            NO, GO SHOW THE DATA
         L     R0,EDIR1ST(,R7)     GET LINE'S RECORD NUMBER
         CVD   R0,DOUBLE
         OI    DOUBLE+7,X'0F'
         LAE   R3,CTLLEN(,R2)      POINT TO ACTUAL DATA
         TM    DCBRECFM,DCBRECV    VARIABLE-LENGTH RECORDS?
         BO    SCLSEQOK            YES, NUMBERS NOT AT RECORD END
         A     R3,MAXRECSZ         POINT PAST THE DATA
         S     R3,EDFW8            POINT TO THE SEQUENCE NUMBER FIELD
SCLSEQOK UNPK  0(6,R3),DOUBLE      REFRESH THE SEQUENCE NUMBER
         TM    EPNUM,2             IS NUMBER ON COBOL?
         BNO   SCLCOBOK            NO, GO SHOW THE DATA
         MVC   CTLLEN(6,R2),0(R3)  YES, LOAD COBOL SEQUENCE NUMBER
SCLCOBOK TM    EDFLG2,E2STAT       STATS ON?
         BO    SCLINSTA            YES
         MVC   6(2,R3),=C'00'      NO, SUPPLY REST OF SEQUENCE NUMBER
         B     SCLINDAT            SEQUENCE NUMBER NOW REFRESHED
SCLINSTA OC    6(2,R3),=C'00'      ENSURE NUMERICS PRESENT
         TM    FLG1(R2),CHGL       HAS RECORD CHANGED THIS SESSION?
         BZ    SCLINDAT            NO
         MVC   6(2,R3),EDLVLIND    YES, SUPPLY REST OF SEQUENCE NUMBER
SCLINDAT MVI   7(R6),FLDINLO       LOW INTENSITY FOR FILE DATA
         SPACE
*         PERFORM SYNTAX COLOURING
         SPACE
         CLC   EDFW80,MAXRECSZ     80-BYTE RECORDS?
         BNE   EDCOLROK            NO
         LAE   R1,0(,R2)           YES, POINT TO CURRENT LINE
         L     R15,EDITSNT@        POINT TO ROUTINE ENTRY POINT
         MVI   EDDEVTYP,0          REQUEST EXTENDED CHECKING
         BASR  R14,R15             GET THE LINE COLOURING INFORMATION
         CLI   EDHITYP,0           IS SYNTAX COLOURING ACTIVE?
         BE    EDCOLROK            NO, DO NOT USE BUT READY IF SET ON
         TM    EPASCII,X'01'       IN ASCII MODE?
         BO    EDCOLROK            YES, DO NOT HIGHLIGHT STUFF
         LAE   R14,EDLNSHDW        POINT TO DATA FOR SHADOW LINE
         LAE   R1,8(,R6)           POINT TO CURRENT SCREEN LINE AREA
         LA    R15,80              GET COLOUR DATA LENGTH
         A     R14,EDOFFSET        ACCOUNT FOR SCROLL RIGHT OFFSET
         S     R15,EDOFFSET
         A     R1,SCREENSZ         POINT TO LINE'S SHADOW
         C     R15,EDATWDTH        BIGGER THAN SCREEN DATA WIDTH?
         BNH   *+8                 NO
         L     R15,EDATWDTH        YES, REDUCE TO MAXIMUM
         BCTR  R15,0               DECREMENT FOR EXECUTE
         EX    R15,SHOWCOLR        LOAD HIGHLIGHTING INTO SHADOW BUFFER
         TM    EDDEVTYP,X'FF'      NUMERICS SUPPLIED BY SYNTAX CHECKER?
         BNM   EDCOLROK            NO
         CLI   ECHO(R2),C' '       ANY LINE COMMAND BEING ECHOED?
         BNE   EDCOLROK            YES, DO NOT OVERLAY IT
         MVC   1(2,R6),EDBLNKS     NO, BLANK LEADING DIGITS
         MVC   3(4,R6),EDDEVTYP    SHOW UNIT GENERIC NAME
EDCOLROK BAS   R4,EDBLUBND         SHOW OUT-OF-BOUNDS DATA IN BLUE
         SPACE
*         LOAD DATA INTO SCREEN LINE
         SPACE
         LAE   R14,8(,R6)          POINT TO DATA TARGET
         L     R15,EDATWDTH        GET WIDTH OF DATA TO LOAD
         BCTR  R15,0               DECREMENT FOR EXECUTE
         LAE   R3,CTLLEN(,R2)      POINT TO ACTUAL DATA
         TM    FLG3(R2),LFIX       ALWAYS SHOW AT LEFT MAX?
         BO    *+8                 YES, IGNORE SCROLL RIGHT OFFSET
         A     R3,EDOFFSET         POINT TO DATA TO SHOW
         EX    R15,SHOWDATA        COPY DATA TO SHOW
         TM    FLG3(R2),LFIX       NON-DATA MESSAGE?
         BO    SCRNCURS            YES, IT SHOULD BE READY TO SHOW
         TM    EPASCII,X'01'       IN ASCII MODE?
         BZ    SCRNSNOW            NO
         SAC   0                   YES, SET PRIMARY MODE FOR SVC
         LA    R0,1(,R15)          GET LENGTH TO TRANSLATE
         LA    R1,8(,R6)           POINT TO ASCII DATA
         XLATE (1),(0),TO=E        PERFORM TRANSLATION
         SAC   512                 SET AR MODE
         LAE   R14,8(,R6)          POINT TO DATA TARGET
         L     R15,EDATWDTH        GET WIDTH OF DATA TO LOAD
         BCTR  R15,0               DECREMENT FOR EXECUTE
SCRNSNOW EX    R15,SNOWDATA        SANITISE THE DATA
         TM    EDFLG1,E1SHORT      IS DATA TOO SHORT FOR LINE?
         BNO   SCRN#ATR            NO
         LAE   R1,1(R15,R14)       YES, POINT PAST COPIED DATA
         MVI   0(R1),FLDOUTLO      END DATA AREA WITH ATTRIBUTE BYTE
SCRN#ATR TM    EPNUM,1             IS NUMBER ON?
         BNO   SCRNCURS            NO, WHOLE RECORD IS DATA
         TM    FLG1(R2),LMSG       MESSAGE LINE?
         BO    SCRNCURS            YES, WHOLE RECORD IS DATA
         TM    DCBRECFM,DCBRECV    VARIABLE-LENGTH RECORDS?
         BO    SCRNCURS            YES, NUMBERS NOT AT RECORD END
         L     R1,MAXRECSZ
         S     R1,EDOFFSET         GET SCREEN OFFSET OF SEQUENCE NUMBER
         C     R1,SCRNCOLS         IS FIRST DIGIT ON DISPLAY?
         BNL   SCRNCURS            NO
         LAE   R1,0(R1,R6)         YES, POINT TO DISPLAY POSITION
         MVI   0(R1),FLDOUTLO      REDUCE DATA ENTRY INTERFERENCE
SCRNCURS C     R2,CSRRECAD         CURSOR TO BE SHOWN ON THIS LINE?
         BNE   SCLINTNS            POSSIBLY NOT, GO SET INTENSITY
         LA    R0,8+1(,R6)         YES
         S     R0,EDYNAREA         GET CURSOR POSITION TO BE SET
         C     R0,VSBLPOSI         IN VISIBLE AREA?
         BH    SCLINTNS            NO, DO NOT SET IT
         LAE   R14,8(,R6)          POINT TO START OF DATA ON VIEW
         ICM   R0,15,EDTAB@        PERFORMING A SOFTWARE TAB?
         BNZ   SCRSWTAB            YES
         TM    FINDSW,FVRT         LOCATION CONTROLLED BY FIND RESULTS?
         BNO   SCRNFEND            NO, GO CHECK FOR END OF DATA
         A     R14,FNDOFF          YES
         S     R14,EDOFFSET        POINT TO FOUND DATA
         B     SCRCSROK            CURSOR NOW POSITIONED BY FIND
SCRSWTAB BCTR  R0,0                CONVERT COLUMN TO OFFSET
         S     R0,EDOFFSET         ACCOUNT FOR LEFT/RIGHT SCROLL
         AR    R14,R0              POINT TO SCREEN LOCATION TO TAB TO
         B     SCRCSROK            GO MOVE THE CURSOR THERE
SCRNFEND LA    R14,1(,R6)          POINT TO FIRST INPUT COLUMN
         ICM   R0,15,EDCSRCOL      LEAVING CURSOR IN LINE COMMAND AREA?
         BZ    SCRCSROK            YES, PUT IT THERE
         LA    R14,8(,R6)          NO, POINT TO START OF DATA ON VIEW
         L     R0,EDATWDTH         GET WIDTH OF DATA TO SCAN
         TM    EPNUM,3             COBOL NUMBERING?
         BNO   SCRNFACT            NO
         LA    R1,6
         S     R1,EDOFFSET         GET COBOL NUMBER COLUMNS ON SHOW
         BNP   SCRNFACT            THERE ARE NONE
         AR    R14,R1              POINT PAST COBOL LINE NUMBER AREA
         SR    R0,R1               REDUCE COLUMNS TO SCAN
SCRNFACT TM    FINDSW,FACT         END OF DATA REACHED BY FIND?
         BNO   SCRCSRLP            NO, GO LOOK FOR NON-BLANK
         L     R14,EDCSRCOL        GET THE COLUMN THE CURSOR WAS IN
         BCTR  R14,0               CONVERT TO RELATIVE COLUMN NUMBER
         AR    R14,R6              POINT TO WHERE THE CURSOR SHOULD GO
         B     SCRCSROK            PUT IT THERE
SCRCSRLP CLI   0(R14),C' '         BLANK?
         BNE   SCRCSROK            NO, PLACE CURSOR THERE
         LA    R14,1(,R14)         YES, POINT TO NEXT CHARACTER
         BCT   R0,SCRCSRLP         GO CHECK IT
         LA    R14,8(,R6)          POINT BACK TO FIRST BYTE OF RECORD
SCRCSROK S     R14,EDYNAREA        GET OFFSET INTO DYNAMIC AREA
         LA    R14,1(,R14)         CONVERT TO POSITION
         ST    R14,EDCSROUT        SET CURSOR POSITION
SCLINTNS ICM   R0,15,EDCSROUT      GET CURSOR POSITION
         BNP   SCRNCHGL            CURSOR NOT IN DYNAMIC AREA
         BCTR  R0,0                CONVERT TO OFFSET
         A     R0,EDYNAREA         POINT TO CURSOR LOCATION
         CR    R0,R6               CURSOR BEFORE THIS LINE?
         BL    SCRNCHGL            YES, LEAVE SEQUENCE NUMBER IN GREEN
         L     R14,SCRNCOLS        GET SCREEN WIDTH
         TM    EPHEX,1             IS HEX ON?
         BNO   SCRCSRNG            NO, CURSOR "RANGE" IS ONE LINE
         AR    R14,R14             YES
         A     R14,SCRNCOLS        CURSOR "RANGE" IS THREE LINES
SCRCSRNG SR    R0,R14
         CR    R0,R6               CURSOR ON THIS LINE?
         BNL   SCRNCHGL            NO, LEAVE SEQUENCE NUMBER IN AS-IS
         MVI   0(R6),FLDINHI       YES, HIGH INTENSITY FOR LINE NUMBER
         A     R6,SCREENSZ         POINT TO LINE'S SHADOW
         MVI   1(R6),X'02'         USE RED FOR HIGH INTENSITY
         MVC   2(5,R6),1(R6)       SPREAD ALONG WHOLE FIELD
         S     R6,SCREENSZ         POINT BACK TO PRIMARY BUFFER
         ST    R6,CSROUTLN         SAVE POINTER TO LINE WITH CURSOR
SCRNCHGL A     R6,SCREENSZ         POINT TO LINE'S SHADOW
         TM    FLG1(R2),CHGL+CHGE  THIS LINE HAS CHANGE OR ERROR FLAG?
         BZ    SCR#VIEW            NO
         TM    FLG2(R2),LLBL       IS THIS LINE LABELLED?
         BNO   SCRNCHNL            NO, NO LABEL
         CLI   ECHO(R2),C'.'       YES, ECHOING THE LABEL?
         BE    SCRNCRED            YES, NO COMMAND SO SHOW LINE STATUS
SCRNCHNL CLI   ECHO(R2),C' '       ECHOING LINE COMMAND ON THIS LINE?
         BH    SCR#SPRD            YES, LEAVE COMMAND IN NORMAL RED
SCRNCRED TM    FLG1(R2),CHGL       LINE FLAGGED AS CHANGED?
         BZ    SCRNCHGE            NO
         OI    1(R6),X'01'         YES, FLAG THIS VISUALLY
SCRNCHGE TM    FLG1(R2),CHGE       LINE INCURRED ERROR CONDITION?
         BNO   SCRNCHGA            NO
         OI    1(R6),X'20'         YES, SHOW IN REVERSE VIDEO
         B     SCR#VIEW            AVOID UNDERSCORE
SCRNCHGA TM    FLG1(R2),CHGA       LINE CHANGED BY 'CHANGE ALL'?
         BNO   SCR#VIEW            NO
         OI    1(R6),X'30'         YES, SHOW WITH UNDERSCORE
SCR#VIEW TM    STATUS11,$11VIEW    OPERATING IN VIEW MODE?
         BNO   SCR#SPRD            NO
         TM    1(R6),X'0F'-X'04'   ANY COLOUR EXCEPT GREEN?
         BNZ   SCR#SPRD            YES, LEAVE IT AS IS
         OI    1(R6),X'01'         SET "BLUE FOR VIEW"
         NI    1(R6),X'FF'-X'04'   RESET "GREEN FOR EDIT"
SCR#SPRD MVC   2(5,R6),1(R6)       SPREAD ALONG WHOLE FIELD
         S     R6,SCREENSZ         POINT BACK TO PRIMARY BUFFER
         TM    FLG1(R2),CHGE       LINE INCURRED ERROR CONDITION?
         BNO   SCRNULLS            NO
         MVI   0(R6),FLDINHI       YES, HIGH INTENSITY FOR LINE NUMBER
SCRNULLS TM    STATUS14,$14NUL     NULLS ON?
         BNO   SCRNLNOK            NO
         L     R1,EDATWDTH         GET LENGTH OF DATA ON SHOW
         BCTR  R1,0                GET LENGTH CODE OF DATA ON SHOW
         BCTR  R1,0                DECREMENT FOR PERCOLATION
         EX    R1,EDREPCHK         IS THE LINE A SINGLE CHAR REPEATED?
         BE    SCRNLNOK            YES, NO NEED FOR NULLS BLANK OR NOT
         LA    R14,8(R1,R6)        POINT TO SECOND LAST BYTE ON SHOW
         CLI   1(R14),C' '         WAS LAST ONE A BLANK?
         BNE   SCRNLNOK            NO, NEED FOR ANY NULLS
SCRNULLP CLI   0(R14),C' '         TRAILING BLANK?
         BNE   SCRNLNOK            NO, ENOUGH NULLING
         MVI   1(R14),NULL         YES, SUPPLY A NULL
         BCT   R14,SCRNULLP        CONTINUE NULLING
SCRNLNOK TM    EPHEX,1             IS HEX ON?
         BNO   SCRNLNXT            NO
         SPACE
*         GENERATE EXTRA LINES WHEN HEX IS ON
         SPACE
         ST    R7,EDDIREND         REMEMBER THIS LINE USED IN CASE LAST
         S     R5,EDFW1            YES, DECREMENT LINE COUNT
         BNP   EDCSRFND            THAT WAS THE LAST SCREEN LINE
         A     R6,SCRNCOLS         POINT TO NEXT LINE IN BUFFER
         MVI   0(R6),FLDOUTLO      DELETE LINE COMMAND AREA
         LAE   R1,EDIRSIZ(,R7)     POINT TO NEXT DIRECTORY ENTRY
         MVC   0(EDIRSIZ,R1),0(R7) COPY LINE PARTICULARS
         LR    R7,R1               ADJUST DIRECTORY ENTRY POINTER
         ST    R7,EDDIREND         REMEMBER THIS LINE USED IN CASE LAST
         S     R5,EDFW1            DECREMENT LINE COUNT
         BNP   EDCSRFND            THIS IS THE LAST SCREEN LINE
         ICM   R0,15,BAK(R2)       TOP OF DATA?
         BZ    SCRNHIOK            YES
         TM    FLG1(R2),XCLD       EXCLUDED LINE?
         BO    SCRNHIOK            YES
         TM    FLG3(R2),LFIX       ENVIRONMENTAL MESSAGE?
         BO    SCRNHIOK            YES
         LAE   R1,0(,R3)           POINT TO RECORD'S DATA
         LA    R14,8(,R6)          POINT TO DATA TARGET
         LA    R0,1(,R15)          GET THE DATA BYTE COUNT ON SHOW
         TM    FLG1(R2),LMSG       MESSAGE LINE?
         BO    SCRNHILP            YES, LEAVE HEX DATA PROTECTED
         MVI   7(R6),FLDINLO       NO, ALLOW HEX DIGIT UPDATE
SCRNHILP UNPK  0(1,R14),0(1,R1)    SWAP A DATA BYTE'S NIBBLES
         NI    0(R14),X'0F'        PRESERVE WHAT WAS THE HIGH NIBBLE
         LA    R1,1(,R1)           POINT TO NEXT DATA BYTE
         LA    R14,1(,R14)         POINT TO NEXT DISPLAY LOCATION
         BCT   R0,SCRNHILP         PROCESS NEXT BYTE
         TM    EDFLG1,E1SHORT      IS DATA TOO SHORT FOR LINE?
         BNO   *+8                 NO
         MVI   0(R14),FLDOUTLO     END DATA AREA WITH ATTRIBUTE BYTE
         EX    R15,NIBLDATA        CONVERT TO HEXADECIMAL DIGITS
         BAS   R4,EDBLUBND         SHOW OUT-OF-BOUNDS DATA IN BLUE
SCRNHIOK A     R6,SCRNCOLS         POINT TO NEXT LINE IN BUFFER
         MVI   0(R6),FLDOUTLO      DELETE LINE COMMAND AREA
         LAE   R1,EDIRSIZ(,R7)     POINT TO NEXT DIRECTORY ENTRY
         MVC   0(EDIRSIZ,R1),0(R7) COPY LINE PARTICULARS
         LR    R7,R1               ADJUST DIRECTORY ENTRY POINTER
         ICM   R0,15,BAK(R2)       TOP OF DATA?
         BZ    SCRNLOOK            YES
         TM    FLG1(R2),XCLD       EXCLUDED LINE?
         BO    SCRNLOOK            YES
         TM    FLG3(R2),LFIX       ENVIRONMENTAL MESSAGE?
         BO    SCRNLOOK            YES
         LAE   R1,0(,R3)           POINT TO RECORD'S DATA
         LA    R14,8(,R6)          POINT TO DATA TARGET
         LA    R0,1(,R15)          GET THE DATA BYTE COUNT ON SHOW
         TM    FLG1(R2),LMSG       MESSAGE LINE?
         BO    SCRNLOLP            YES, LEAVE HEX DATA PROTECTED
         MVI   7(R6),FLDINLO       NO, ALLOW HEX DIGIT UPDATE
SCRNLOLP MVC   0(1,R14),0(R1)      COPY A DATA BYTE
         NI    0(R14),X'0F'        PRESERVE THE LOW NIBBLE
         LA    R1,1(,R1)           POINT TO NEXT DATA BYTE
         LA    R14,1(,R14)         POINT TO NEXT DISPLAY LOCATION
         BCT   R0,SCRNLOLP         PROCESS NEXT BYTE
         TM    EDFLG1,E1SHORT      IS DATA TOO SHORT FOR LINE?
         BNO   *+8                 NO
         MVI   0(R14),FLDOUTLO     END DATA AREA WITH ATTRIBUTE BYTE
         EX    R15,NIBLDATA        CONVERT TO HEXADECIMAL DIGITS
         BAS   R4,EDBLUBND         SHOW OUT-OF-BOUNDS DATA IN BLUE
SCRNLOOK S     R5,EDFW1            DECREMENT LINE COUNT
         BNP   EDCSRFND            THAT WAS THE LAST SCREEN LINE
         A     R6,SCRNCOLS         POINT TO NEXT LINE IN BUFFER
         MVI   0(R6),FLDOUTHI      PREPARE FOR A LINE OF DASHES
         MVI   1(R6),C'-'          SET SEED
         L     R1,SCRNCOLS
         S     R1,EDFW4
         EX    R1,EDXDASHS         SPREAD DASHES
         A     R6,SCREENSZ         POINT TO THE SHADOW
         MVI   1(R6),X'07'         MAKE THE DASHES WHITE
         LA    R1,1(,R1)           GO TO END OF LINE
         EX    R1,EDXDASHS         MAKE REST OF LINE WHITE
         S     R6,SCREENSZ         POINT BACK TO THE PRIMARY BUFFER
         LAE   R1,EDIRSIZ(,R7)     POINT TO NEXT DIRECTORY ENTRY
         MVC   0(EDIRSIZ,R1),0(R7) COPY LINE PARTICULARS
         LR    R7,R1               ADJUST DIRECTORY ENTRY POINTER
         SPACE
*         FILE RECORD PROCESSING COMPLETE
         SPACE
SCRNLNXT SR    R14,R14             CLEAR A COUNTER
SCRNLNXX LA    R0,1
         L     R2,FWD(,R2)         POINT TO NEXT DATA LINE
         TM    FLG1(R2),LMSG       IS IT A MESSAGE LINE?
         BO    SCRNXTIN            YES, DO NOT INCREMENT LINE NUMBER
         A     R0,EDRETSV2         NO, INCREMENT LINE NUMBER
         ST    R0,EDRETSV2         SAVE IT
SCRNXTIN TM    EPHIDE,1            HIDING EXCLUDED LINES?
         BNO   SCRNXTHD            NO
         TM    FLG1(R2),XCLD       IS THIS LINE EXCLUDED?
         BNO   SCRNXEND            NO
         A     R14,EDFW1           YES, INCREMENT EXCLUDED LINE COUNT
         B     SCRNLNXX            ON TO NEXT DATA RECORD
*  NOW UP TO NEXT UNEXCLUDED LINE - TIME TO INDICATE HIDDEN LINES
SCRNXEND LTR   R14,R14             WERE ANY LINES HIDDEN?
         BNP   SCRNXTHD            NO, PROCEED AS NORMAL
*  EXCLUSION(S) HIDDEN - MAKE LINE PAST DATA WHITE
         L     R1,VIEWIDTH         GET SCREEN DATA WIDTH CAPACITY
         L     R0,EDATWDTH         GET SCREEN DATA WIDTH IN USE
         SR    R1,R0               GET EXCESS SCREEN WIDTH
         ST    R1,DOUBLE           SAVE THIS NUMBER
         BNP   SCRNLUND            THERE IS NONE
         AR    R0,R6
         A     R0,EDFW8            POINT PAST LINE'S DATA
         A     R0,SCREENSZ         POINT TO ITS SHADOW
         LA    R15,X'07'           GET UNHIGHLIGHTED WHITE CODE
         SLL   R15,24              PROMOTE TO PAD AND ZERO LENGTH
         MVCL  R0,R14              MAKE LINE PAST DATA WHITE
*  UNDERSCORE LINE AFTER COMMAND AREA TO RIGHT SCREEN EDGE
SCRNLUND L     R0,VIEWIDTH         GET DATA WIDTH
SCRNLUNL LAE   R1,8(,R6)           POINT TO FIRST DATA BYTE
         A     R1,SCREENSZ         POINT TO ITS SHADOW
SCRNLULP TM    0(R1),X'30'         EITHER BLINK OR REVERSE VIDEO?
         BM    *+8                 YES, DO NOT ALTER HIGHLIGHTING
         XI    0(R1),X'30'         NO, TOGGLE UNDERSCORE
         LA    R1,1(,R1)           POINT TO THE NEXT BYTE
         BCT   R0,SCRNLULP         CONTINUE WITH LINE UNDERSCORE LOOP
*  SHOW THE CONVENTIONAL EXCLUDED RECORD COUNT IF THERE IS ROOM
         LA    R0,LENGLXCL+10      GET A DECIDING NUMBER
         C     R0,DOUBLE           ENOUGH ROOM FOR MESSAGE?
         BH    SCRNXTHD            NO, SKIP IT
         L     R1,SCRNCOLS         YES, GET SCREEN WIDTH
         CVD   R14,DOUBLE          GET DECIMAL EXCLUDED LINE COUNT
         LAE   R1,0(R1,R6)         POINT PAST THIS LINE
         SR    R1,R0               POINT TO MESSAGE AREA
         MVC   0(10,R1),EDED9Z
         ED    0(10,R1),DOUBLE+3
         MVC   10(LENGLXCL,R1),LINESXCL
         TM    STATUS10,$10CAP     CAPS ON?
         BO    SCRNLUOK            YES
         TR    10(LENGLXCL,R1),EDTUNKAP NO, SHOW SOME MIXED CASE
SCRNLUOK A     R1,SCREENSZ         POINT TO LINE'S SHADOW
         MVI   0(R1),X'07'         RESET UNDERSCORE TO REDUCE CLUTTER
         MVC   1(9+LENGLXCL,R1),0(R1)
*  RESUME NORMAL PREPARATIONS FOR A NEW SCREEN LINE OF DATA
SCRNXTHD A     R6,SCRNCOLS         POINT TO NEXT LINE IN BUFFER
         ST    R7,EDDIREND         REMEMBER THE LAST ENTRY USED
         LA    R7,EDIRSIZ(,R7)     POINT TO NEXT DIRECTORY ENTRY
         BCT   R5,SCRNLNLP         GO SHOW NEXT LINE
         SPACE
*         CHECK THAT SCROLL DOWN NOT NEEDED TO SHOW DATA SEARCH RESULT
         SPACE
EDCSRFND TM    FINDSW,FVRT         LOCATION DICTATED BY A DATA SEARCH?
         BNO   EDCSRINS            NO
         ICM   R0,15,EDCSROUT      CURSOR SET TO VISIBLE DATA LOCATION?
         BNZ   EDSCRNEX            YES, RECORD SHOULD BE ON SHOW
         SPACE
*         SCROLL SO THAT SEARCH RESULT ON SECOND SCREEN DATA LINE
         SPACE
EDLOCFND LAM   A0,A15,EDZEROS      CLEAR ALL ACCESS REGISTERS
         LAM   A2,A2,DSPCALET      LOAD DATA SPACE ALET
         LAM   A3,A3,DSPCALET      LOAD DATA SPACE ALET
         SAC   512                 SET AR MODE
         ICM   R1,15,FNDNUM        GET THE TARGET RECORD NUMBER
         BNP   EDTOPFND            JUST IN CASE
         L     R3,FNDREC           GET THE TARGET RECORD ADDRESS
*  NOTE THAT 'FIND' DOES NOT SEARCH MESSAGE LINES - SO SKIP LMSG CHECK
         TM    FLG1(R3),XCLD       IS THE TARGET EXCLUDED?
         L     R3,BAK(,R3)         POINT TO PREVIOUS RECORD
         BCTR  R1,0                GET ITS NUMBER
         BO    EDLFNDX1            YES
         TM    FLG1(R3),XCLD       IS THE PREVIOUS LINE EXCLUDED?
         BNO   EDSCRFND            NO, NOW HAVE NEW TOP OF SCREEN LINE
EDLFNDLP L     R2,BAK(,R3)         POINT TO PREVIOUS RECORD
         TM    FLG1(R2),XCLD       IS THE PREVIOUS RECORD EXCLUDED?
         BNO   EDSCRFND            NO, NOW HAVE NEW TOP OF SCREEN LINE
         LR    R3,R2               YES, IT BELONGS ON THE TOP DATA LINE
         TM    FLG1(R2),LMSG       IS THE EXCLUDED LINE A MESSAGE?
         BO    EDLFNDLP            YES, SKIP RECORD NUMBER ADJUSTMENT
         BCTR  R1,0                DECREMENT RECORD NUMBER
         B     EDLFNDLP            PROCESSED FIND/FINDNOT RESULT
EDTOPFND SR    R1,R1               ZERO SEQUENCE NUMBER
         L     R3,TOPADDR          POINT TO TOP OF DATA
         B     EDSCRFND            GO SHOW IT
EDLFNDX1 TM    FLG1(R3),XCLD       IS THE PREVIOUS LINE EXCLUDED?
         BNO   EDSCRFND            NO, NOW HAVE NEW TOP OF SCREEN LINE
         TM    FLG1(R3),LMSG       YES, IS IT A MESSAGE?
         L     R3,BAK(,R3)         POINT TO PREVIOUS RECORD
         BO    EDLFNDX1            YES, GO CHECK IT
         BCTR  R1,0                NO, GET ITS NUMBER
         B     EDLFNDX1            GO CHECK IT
EDSCRFND ST    R1,LINENMBR         SAVE NEW TOP SEQUENCE NUMBER
         ST    R3,LINEADDR         SAVE NEW TOP RECORD ADDRESS
         SAC   0                   SET PRIMARY MODE
         B     REDOSCRN            REPAINT TO SHOW SEARCH RESULT
         SPACE
*         UPDATE CURSOR PLACEMENT FOR INSERTION
         SPACE
EDCSRINS ICM   R2,15,TOPINSLN      TOP INSERTION LINE PRESENT?
         BNP   EDSCRNEX            NO, SCREEN NOW FORMATTED
         ICM   R6,15,CSROUTLN      YES, POINT TO LINE WITH CURSOR
         BZ    DOCSRINS            NO CURRENT LINE WITH CURSOR
         CLI   1(R6),C'0'          SEQUENCE NUMBER ON SHOW THERE?
         BL    DOCSRINS            NO, DO NOT RESET INTENSITY
         MVI   0(R6),FLDINLO       YES, REVERT TO LOW INTENSITY
         A     R6,SCREENSZ         POINT TO THAT LINE'S SHADOW
         CLI   1(R6),X'03'         PINK LINE NUMBER?
         MVI   1(R6),X'05'         SHOW THE NUMBER IN TURQUOISE
         BE    FLOWINS#            YES, MUST BE UPDATED CURSOR LINE
         MVI   1(R6),X'04'         SHOW THE NUMBER IN GREEN
         TM    STATUS11,$11VIEW    OPERATING IN VIEW MODE?
         BNO   FLOWINS#            NO
         MVI   1(R6),X'01'         SHOW THE NUMBER IN BLUE
FLOWINS# MVC   2(5,R6),1(R6)       SPREAD ALONG SEQUENCE NUMBER FIELD
DOCSRINS LR    R6,R2               POINT TO TOP INSERTION LINE
         L     R0,SCRNCOLS         GET SCREEN WIDTH
         TM    EPHEX,1             IS HEX ON?
         BNO   *+8                 NO
         SLA   R0,2                YES, QUADRUPLE IT
         SR    R6,R0               POINT TO PREVIOUS LINE ON SCREEN
         L     R15,EDATWDTH        GET WIDTH OF DATA TO SCAN
         SR    R7,R7               RESET COBOL NUMBER ADJUSTMENT
         TM    EPNUM,2             COBOL NUMBERING?
         BNO   CSRINSLP            NO
         LA    R7,6
         S     R7,EDOFFSET         GET COBOL NUMBER COLUMNS ON SHOW
         BNP   CSRINSLP            THERE ARE NONE
         AR    R6,R7               POINT PAST COBOL LINE NUMBER AREA
         SR    R15,R7              REDUCE COLUMNS TO SCAN
CSRINSLP CLI   8(R6),C' '          BLANK?
         BNE   CSRINSOK            NO, FOUND COLUMN FOR CURSOR
         LA    R6,1(,R6)           YES, POINT TO NEXT COLUMN
         BCT   R15,CSRINSLP        TRY IT
         LR    R6,R2               LINE ABOVE WAS BLANK
         SR    R6,R0               SET PRE-SCAN LINE POINTER
         LTR   R7,R7               NEED TO ADJUST FOR COBOL NUMBERING?
         BNP   CSRINSOK            NO
         AR    R6,R7               YES, DO SO
CSRINSOK AR    R6,R0               TRANSFER POINTER BACK TO INSERT LINE
         TM    STATUS14,$14NUL     NULLS ON?
         BNO   *+8                 NO, TYPED BLANK WILL RETAIN NEW LINE
         MVI   8(R6),NULL          YES, PUT A NULL WHERE THE CURSOR IS
         LA    R6,8+1(,R6)         POINT PAST COLUMN ON TOP INSERTION
         S     R6,EDYNAREA         GET CURSOR POSITION
         ST    R6,EDCSROUT         SAVE IT
         L     R7,TOPINSLN         POINT TO TOP INSERTION SCREEN LINE
         S     R7,EDYNAREA         GET ITS OFFSET INTO THE SCREEN
         SR    R6,R6               CLEAR FOR DIVIDE
         D     R6,SCRNCOLS         GET RELATIVE LINE NUMBER
         LA    R0,EDIRSIZ          GET DIRECTORY ENTRY SIZE
         MR    R6,R0               GET ENTRY OFFSET INTO DIRECTORY
         A     R7,EDITDIR@         POINT TO DIRECTORY ENTRY
         L     R3,EDIRREC(,R7)     POINT TO TOP INSERTION RECORD
         ST    R3,CSRRECAD         SAVE THE CURSOR'S RECORD ADDRESS
*        B     EDSCRNEX            SCREEN NOW FORMATTED
         SPACE
*         EDITSCRN TERMINATION PROCESSING
         SPACE
EDSCRNEX SAC   0                   SET PRIMARY MODE
         LAM   A0,A15,EDZEROS      CLEAR ALL ACCESS REGISTERS
         TM    FINDSW,FVRT         WAS DATA JUST FOUND?
         BNO   SCRFRVOK            NO, SKIP REVERSE VIDEO HIGHLIGHT
         L     R14,EDCSROUT        GET CURSOR POSITION
         BCTR  R14,0               CONVERT TO OFFSET
         LR    R1,R14              COPY THIS OFFSET
         A     R14,EDYNAREA        POINT TO THE FOUND DATA
         A     R14,SCREENSZ        POINT TO ITS SHADOW
         LA    R0,1
         AH    R0,STRINGL          GET THE FOUND DATA LENGTH
         TM    FINDSW3,CHNGE       CHANGE COMMAND?
         BNO   SCRFRVLP            NO, IT WAS A SEARCH ONLY
         CLI   MSG,128             CHANGE ERROR?
         BE    SCRFRVLP            YES, HIGHLIGHT UNCHANGED TEXT
         SR    R0,R0               CLEAR FOR DIVIDE
         D     R0,SCRNCOLS         GET COLUMN OFFSET FROM LEFT EDGE
         LTR   R0,R0               IS CURSOR TO BE IN COLUMN 1?
         BNZ   SCRCOLCH            NO, THAT'S FINE
         LA    R0,1                YES
         A     R0,EDCSROUT         POINT TO COLUMN 2 OF THAT LINE
         ST    R0,EDCSROUT         MOVE THE CURSOR TO IT
SCRCOLCH LA    R0,1
         AH    R0,STRING2L         GET THE REPLACEMENT DATA LENGTH
         BNP   SCRFRVOK            AVOID "NEAR INFINITE" LOOP
         SR    R14,R0              POINT TO REPLACEMENT STRING
SCRFRVLP NI    0(R14),255-X'10'    ENSURE BLINK/UNDERSCORE IS OFF
         OI    0(R14),X'20'        TURN ON REVERSE VIDEO
         LA    R14,1(,R14)         POINT TO THE NEXT SHADOW BYTE
         BCT   R0,SCRFRVLP         HIGHLIGHT WHOLE FOUND STRING
SCRFRVOK NI    FINDSW,255-FVRT-FACT      FIND CYCLE COMPLETE
         NI    EDFLG2,255-E2CRU    RESET CSRRECAD UPDATED FLAG
         TM    EDFLG4,E4RT2        POSTPONED AUTOMATIC INSERT?
         BO    SCRINSLP            YES, LEAVE RECORD ADDRESS FOR LATER
         XC    INSRECAD,INSRECAD   CLEAR AUTOMATIC INSERT REQUEST
SCRINSLP ICM   R1,15,INSANKOR      ANY INSERT COMMAND ELEMENTS?
         BZ    SCRINSMT            NO, EMPTY LIST
         LAM   A3,A3,DSPCALET      LOAD DATA SPACE ALET
         SAC   512                 SET AR MODE
         L     R3,EDIRREC(,R1)     POINT TO FIRST RECORD OF ELEMENT
         MVC   ECHO(6,R3),EDBLNKS  CLEAR LINE'S LINE COMMAND
         SAC   0                   SET PRIMARY MODE
         CPYA  A3,A2               ZERO ALL ACCESS REGISTERS
         LA    R0,CMDESIZE         GET COMMAND ELEMENT SIZE
         MVC   INSANKOR,CMDENEXT(R1)
         FREEMAIN RU,LV=(0),SP=12,A=(1)
         B     SCRINSLP
SCRINSMT ST    R1,EDTAB@           RESET SOFTWARE TAB COLUMN
         L     R0,EDYNAREA         POINT TO LATEST SCREEN IMAGE
         L     R1,EDYNSIZE         GET ITS SIZE
         L     R14,EDYNCOPY        POINT TO SAVE AREA
         LR    R15,R1              GET ITS SIZE
         MVCL  R14,R0              COPY DYNAMIC AREA DATA
         NI    STATUS4,255-$4REFR  CLEAR REFRESH FLAG
         L     R14,EDRETSV1        RESTORE RETURN ADDRESS
         MVC   REVCSR,EDREVBUF     PUT CURSOR IN DYNAMIC AREA
         ICM   R0,15,EDCSROUT      GET CURSOR POSITION
         BNP   SCRNPRIM            CURSOR NOT TO BE PUT IN DYNAMIC AREA
         ST    R0,REVPOS           SET CURSOR POSITION
         BR    R14                 RETURN TO MAINLINE
SCRNPRIM MVC   REVCSR,EDZCMDNM     PUT CURSOR IN PRIMARY INPUT AREA
         L     R0,REVPOS           GET CURSOR POSITION
         MVC   REVPOS,EDFW1        PUT CURSOR AT HOME
         TM    STATUS14,$14RCL     POINTING OUT BAD OPERAND?
         BNOR  R14                 NO, RETURN TO MAINLINE
         LTR   R0,R0               SENSIBLE POSITION?
         BNPR  R14                 NO, RETURN TO MAINLINE
         LA    R1,50               GET MAXMIMUM OPERAND POSITION
         CR    R0,R1               SENSIBLE POSITION?
         BHR   R14                 NO, RETURN TO MAINLINE
         ST    R0,REVPOS           RESTORE PRE-SET CURSOR POSITION
         BR    R14                 RETURN TO MAINLINE
         SPACE
*         ECHO LINE COMMAND
         SPACE
ECHOLCMD TM    EDFLG1,E1FREEZE     IS ERROR STATUS SET?
         BO    SHOWLCMD            YES, GO ECHO COMMAND
         CLC   =C'TS',ECHO(R2)     TEXT SPLIT COMMAND?
         BNE   ECHOISRT            NO, GO CHECK FOR INSERT
         ICM   R0,15,TOPINSLN      ALREADY INSERTED A LINE?
         BNZ   ECHO123C            YES, TREAT AS ANOTHER INSERT
         MVI   TOPINSLN,X'80'      NO, FLAG NO CURSOR MOVEMENT
         B     ECHO123C            NOW TREAT AS INSERT
ECHOISRT CLI   ECHO(R2),C'I'       INSERT COMMAND?
         BNE   SHOWLCMD            NO, GO ECHO COMMAND
ECHO123C CLI   MSG,123             BUT IS STORAGE EXHAUSTED?
         BE    ECHOSEQN            YES, SUPPRESS INSERT COMMAND
         LAE   R1,INSANKOR-EDIRSIZ POINT TO INSERT COMMAND CHAIN ORIGIN
ECHOINLP ICM   R1,15,CMDENEXT(R1)  POINT TO NEXT ELEMENT
         BZ    SHOWLCMD            INSERT STILL PENDING
         C     R2,EDIRREC(,R1)     COMMAND ELEMENT FOR THIS RECORD?
         BNE   ECHOINLP            NO, FOLLOW CHAIN FOR NEXT ONE
         L     R0,CMDEREPL(,R1)    GET REPLICATION COEFFICIENT
         ST    R0,COUNTER1         SAVE FOR FORMATTING NEXT LINE
         L     R0,EDRETSV2         GET SEQUENCE NUMBER
         TM    CMDEFLAG(R1),CMDETE TEXT ENTRY COMMAND?
         BNO   ECHOSEQN            NO, GO SHOW SEQUENCE NUMBER
         MVI   COUNTER1,X'7F'      FLAG 'TE' WITH HIGH POSITIVE
         B     ECHOSEQN            GO SHOW SEQUENCE NUMBER
SHOWLCMD MVI   0(R6),FLDINHI       HIGH INTENSITY FOR LINE COMMAND
         A     R6,SCREENSZ         POINT TO LINE'S SHADOW
         MVI   1(R6),X'02'         USE RED FOR HIGH INTENSITY
         MVC   2(5,R6),1(R6)       SPREAD ALONG WHOLE FIELD
         S     R6,SCREENSZ         POINT BACK TO PRIMARY BUFFER
         MVC   1(6,R6),ECHO(R2)    COPY COMMAND TEXT
         ICM   R0,15,BAK(R2)       TOP OF DATA?
         BZ    SHOWSTAR            YES
         ICM   R0,15,FWD(R2)       END OF DATA?
         BZ    SHOWSTAR            YES
         TM    FLG1(R2),XCLD       EXCLUDED LINE?
         BO    XCLDDATA            YES
         TM    FLG1(R2),LMSG       MESSAGE LINE?
         BO    SHOWNOTE            YES
         B     SCLINNUM            NO, SHOW LINE'S FILE DATA
         SPACE
*         SHOW ASTERISKS FOR TOP AND BOTTOM MARKER LINES
         SPACE
ECHOSTAR MVI   0(R6),FLDINHI       HIGH INTENSITY FOR NON-DATA LINE
         A     R6,SCREENSZ         POINT TO LINE'S SHADOW
         MVI   1(R6),X'02'         USE RED FOR HIGH INTENSITY
         MVC   2(5,R6),1(R6)       SPREAD ALONG WHOLE FIELD
         S     R6,SCREENSZ         POINT BACK TO PRIMARY BUFFER
         MVC   1(6,R6),EDSTARS     LINE DOES NOT SHOW A SEQUENCE NUMBER
SHOWSTAR MVI   7(R6),FLDOUTLO      LOW INTENSITY FOR TOP/END TERMINATOR
         LAE   R3,8(,R6)           POINT TO LINE'S DATA AREA (SOURCE)
         MVI   0(R3),C'*'          LOAD SEED
         LAE   R14,1(,R3)          SET TARGET ADDRESS
         L     R15,VIEWIDTH        SET LENGTH TO COPY
         BCTR  R15,0               DECREMENT FOR SEED
         BCTR  R15,0               DECREMENT FOR EXECUTE
         EX    R15,SHOWDATA        PROPAGATE ASTERISKS
         CLC   18(10,R6),19(R6)    TARGET AREA ALL ASTERISKS?
         BNE   SHOASVOK            NO, SKIP SHOWING THIS DATUM
         TM    STATUS11,$11VIEW    IN VIEW MODE?
         BO    SHOASVOK            YES, AUTOSAVE IS NOT OPERATIVE
         TM    STATUS16,$16NAS     AUTOSAVE OFF?
         BO    SHOASVOK            YES
         MVC   19(8,R6),=CL8'AUTOSAVE'
         TM    STATUS10,$10CAP     CAPS ON?
         BO    SHOASVOK            YES
         XC    20(7,R6),EDBLNKS    NO
SHOASVOK TM    STATUS14,$14NUL     NULLS ON?
         BNO   SHONULOK            NO
         A     R14,VIEWIDTH        YES
         S     R14,EDFW10
         CLC   0(5,R14),1(R14)     TARGET AREA ALL ASTERISKS?
         BNE   SHONULOK            NO, SKIP SHOWING THIS DATUM
         MVC   0(5,R14),=CL5'NULLS'
         TM    STATUS10,$10CAP     CAPS ON?
         BO    SHONULOK            YES
         XC    1(4,R14),EDBLNKS    NO
SHONULOK A     R3,SCREENSZ         POINT TO DATA'S SHADOW
         MVI   0(R3),X'01'         LOAD BLUE SEED
         LA    R14,1(,R3)          SET TARGET ADDRESS
         EX    R15,SHOWDATA        PROPAGATE ATTRIBUTE FOR ASTERISKS
         CLI   19(R6),C'A'
         BNE   SHOPOCHK
         TM    EDFLG1,SAVEY        IS A SAVE NECESSARY?
         BNO   SHOPOCHK            NO
         MVI   19-8(R3),X'05'      YES, SHOW FLAG IN TURQUOISE
         MVC   20-8(7,R3),19-8(R3)
SHOPOCHK TM    DS1DSORG,DS1DSGPO   PARTITIONED ORGANISATION?
         BNO   SHOZAPOK            NO
         TM    DS1SMSFG,DS1PDSE    PDSE?
         BO    SHOZAPOK            YES
         TM    TSTRECFM,X'40'      FIXED-LENGTH RECORDS?
         BO    SHOZAPOK            NO
         CLC   11(5,R6),12(R6)     TARGET AREA ALL ASTERISKS?
         BNE   SHOZAPOK            NO, SKIP SHOWING THIS DATUM
         TM    STATUS11,$11VIEW    IN VIEW MODE?
         BO    SHOZAPOK            YES
         TM    EPZAP,1             IS ZAP ON?
         BO    SHOZAPON            YES, GO SHOW IT
         TM    EDFLG1,SAVEY        IS A SAVE NECESSARY?
         BNO   SHOZAPOK            NO, IT WOULD NOT BE USED
         CLC   REDLINES,RECLINES   ORIGINAL LINE COUNT?
         BNE   SHOZAPOK            NO, IT WOULD NOT BE USED
         MVC   12(3,R6),=C'ADD'    YES, ISSUE GENTLE REMINDER ABOUT ZAP
         B     SHOADDOK
SHOZAPON MVC   12(3,R6),=C'ZAP'    YES, SHOW IT
         TM    EDFLG1,SAVEY        IS A SAVE NECESSARY?
         BNO   SHOADDOK            NO, DO NOT SHOW IN RED
         CLC   REDLINES,RECLINES   ORIGINAL LINE COUNT?
         BNE   SHOADDOK            NO, DO NOT SHOW IN RED
         MVI   4(R3),X'02'         SET RED SEED
         MVC   5(2,R3),4(R3)       SHOW SAVE-IN-PLACE INDICATOR IN RED
SHOADDOK TM    STATUS10,$10CAP     CAPS ON?
         BO    SHOZAPOK            YES
         XC    13(2,R6),EDBLNKS    NO
SHOZAPOK TM    EPASCII,X'01'       PROCESSING ASCII DATA?
         BZ    SHOASCOK            NO
         L     R15,SCRNCOLS
         LAE   R15,0(R15,R6)       POINT PAST LINE
         LA    R0,5+4
         SR    R15,R0
         MVC   0(5,R15),=CL5'ASCII'
SHOASCOK L     R15,VIEWIDTH        GET LENGTH OF DATA AREA
         SRA   R15,1               HALVE IT
         ICM   R0,15,FWD(R2)       END OF DATA?
         BZ    SHOWBOTM            YES
         LA    R0,(LENGTOPO+1)/2   POSITION AND LOAD STRING
         SR    R15,R0
         LA    R15,8(R15,R6)
         MVC   0(LENGTOPO,R15),TOPODATA
         TM    STATUS10,$10CAP     CAPS ON?
         BO    EDCHEKMT            YES
         XC    2(2,R15),EDBLNKS
         XC    5(2,R15),EDBLNKS
         XC    9(3,R15),EDBLNKS
EDCHEKMT TM    EDFLG1,E1MT         INITIAL DISPLAY OF EMPTY FILE?
         BNO   SCRNLNOK            NO
         NI    EDFLG1,255-E1MT     YES, RESET FLAG
         L     R0,ISPFPAGE         GET MEMBER LIST LINE COUNT ON SHOW
         TM    STATUS7,EDCOLS      IS LINE 3 FOR STATUS DISPLAY?
         BZ    *+8                 NO, CAN HAVE AN EXTRA INSERT LINE
         S     R0,EDFW1            DISCOUNT ONE FOR TOP OF DATA
         S     R0,EDFW1            DISCOUNT ONE FOR END OF DATA
         BNP   SCRNLNOK            NO LINES LEFT FOR INSERT LINES
         ST    R0,COUNTER1         INSERT THIS NUMBER OF LINES
         B     SCRNLNOK
SHOWBOTM ST    R7,EDDIREND         REMEMBER THE LAST ENTRY USED
         LA    R0,(LENGENDO+1)/2   POSITION AND LOAD STRING
         SR    R15,R0
         LAE   R15,8(R15,R6)
         MVC   0(LENGENDO,R15),ENDODATA
         TM    STATUS10,$10CAP     CAPS ON?
         BO    EDCSRINS            YES, NO MORE DATA LINES TO SHOW
         XC    2(5,R15),EDBLNKS
         XC    8(2,R15),EDBLNKS
         XC    12(3,R15),EDBLNKS
         B     EDCSRINS            NO MORE DATA LINES TO SHOW
         SPACE
*         SHOW EXCLUDED RECORD(S) MARKER LINE
         SPACE
XCLDSEQN MVI   0(R6),FLDINHI       HIGH INTENSITY FOR EXCLUSIONS
         A     R6,SCREENSZ         POINT TO LINE'S SHADOW
         MVI   1(R6),X'02'         USE RED FOR HIGH INTENSITY
         MVC   2(5,R6),1(R6)       SPREAD ALONG WHOLE FIELD
         S     R6,SCREENSZ         POINT BACK TO PRIMARY BUFFER
         MVC   1(6,R6),EDDASHES    LINE DOES NOT SHOW A SEQUENCE NUMBER
XCLDDATA MVI   7(R6),FLDOUTHI      HIGH INTENSITY FOR EXCLUSIONS
         LAE   R3,8(,R6)           POINT TO LINE'S DATA AREA (SOURCE)
         MVI   0(R3),C' '          LOAD SEED
         LAE   R14,1(,R3)          SET TARGET ADDRESS
         L     R15,VIEWIDTH        SET LENGTH TO COPY
         BCTR  R15,0               DECREMENT FOR SEED
         BCTR  R15,0               DECREMENT FOR EXECUTE
         EX    R15,SHOWDATA        PROPAGATE BLANKS
         SR    R15,R15             RESET COUNTER
         LAE   R3,0(,R2)           COPY FIRST LINE ENTRY ADDRESS
         L     R1,EDIR1ST(,R7)     GET FIRST SEQUENCE NUMBER FOR LINE
         BCTR  R1,0                PREPARE FOR COUNTING LINES
XCLDLOOP TM    FLG1(R3),XCLD       IS THIS LINE EXCLUDED?
         BNO   ENDOXCLD            NO
         LA    R15,1(,R15)         YES, COUNT IT
         A     R15,EDFW1           YES, COUNT IT
         TM    FLG1(R3),LMSG       IS THIS LINE A MESSAGE?
         BO    *+8                 YES, DO NOT INCREMENT LINE NUMBER
         A     R1,EDFW1            NO, INCREMENT LINE NUMBER
         LR    R2,R3               MAKE THIS ENTRY CURRENT
         L     R3,FWD(,R2)         POINT TO THE NEXT LINE ENTRY
         C     R2,CSRRECAD         CURSOR TO BE SHOWN ON THIS LINE?
         BNE   XCLDLOOP            POSSIBLY NOT, GO CHECK EXCLUSION
         TM    FINDSW,FVRT         LOCATION CONTROLLED BY FIND RESULTS?
         BO    XCLDFIND            YES, THIS IS THE RECORD
         ST    R3,CSRRECAD         NO, MAKE IT THE NEXT LINE
         B     XCLDLOOP            GO SEE IF IT IS EXCLUDED
XCLDFIND LR    R14,R6              POINT TO THIS SCREEN LINE
         A     R14,FNDOFF
         S     R14,EDOFFSET
         LA    R14,8+1(,R14)
         S     R14,EDYNAREA        GET CURSOR POSITION
         ST    R14,EDCSROUT        SET CURSOR POSITION
         B     XCLDLOOP            CURSOR POSITIONED BY EXCLUDE COMMAND
ENDOXCLD CVD   R15,DOUBLE          SHOW EXCLUDED LINE COUNT
         BCTR  R15,0
         A     R15,EDIR1ST(,R7)    GET LAST SEQUENCE NUMBER FOR LINE
         ST    R15,EDIRLST(,R7)    SAVE IT
         ST    R15,EDRETSV2        KEEP DISPLAYED LINE NUMBERS IN SYNC
         ST    R1,EDIRLST(,R7)     SAVE LAST LINE NUMBER OF BLOCK
         ST    R1,EDRETSV2         KEEP DISPLAYED LINE NUMBERS IN SYNC
         ST    R2,EDIRFIN(,R7)     SAVE LAST RECORD ENTRY FOR LINE
         L     R15,VIEWIDTH
         LA    R15,8(R15,R6)       POINT PAST LINE'S DATA AREA
         LA    R0,LENGLXCL+10
         SR    R15,R0              POINT TO NUMBER DISPLAY AREA
         MVC   0(10,R15),EDED9Z
         ED    0(10,R15),DOUBLE+3
         MVC   10(LENGLXCL,R15),LINESXCL
         TM    STATUS10,$10CAP     CAPS ON?
         BO    XCLCAPOK            YES
         TR    10(LENGLXCL,R15),EDTUNKAP NO, SHOW SOME MIXED CASE
XCLCAPOK A     R15,SCREENSZ        POINT TO LINE'S SHADOW
         MVI   0(R15),X'07'        USE WHITE FOR HIGH INTENSITY OUTPUT
         MVC   1(9+LENGLXCL,R15),0(R15)
         LA    R15,7(,R6)          POINT TO DATA AREA OF LINE
         A     R15,SCREENSZ        POINT TO LINE'S SHADOW
         MVI   0(R15),X'07'        USE WHITE FOR HIGH INTENSITY OUTPUT
         S     R15,SCREENSZ        POINT BACK TO PRIMARY BUFFER
XCDASHLP CLC   0(3,R15),EDBLNKS    THREE BLANKS PRESENT?
         BH    SCRNLNOK            NO, DISPLAY LINE NOW FORMATTED
         MVI   1(R15),C'-'         YES, SUPPLY A DASH
         A     R15,SCREENSZ        POINT TO ITS SHADOW
         MVC   1(3,R15),0(R15)     SPREAD ALONG
         S     R15,SCREENSZ        POINT BACK TO PRIMARY BUFFER
         LA    R15,3(,R15)         ADVANCE POINTER
         B     XCDASHLP            CONTINUE FORMATTING
         SPACE
*         SHOW MESSAGE (NON-DATA) LINE
         SPACE
ECHONOTE MVI   0(R6),FLDINHI       HIGH INTENSITY FOR LINE COMMAND AREA
         MVI   1(R6),C'='          PRIME WITH EQUALS SIGNS
         MVC   2(5,R6),1(R6)
         A     R6,SCREENSZ         POINT TO LINE'S SHADOW
         MVI   1(R6),X'07'         MAKE EQUALS SIGNS WHITE
         MVC   2(5,R6),1(R6)       MAKE THE NON-DATA LINE WHITE
         S     R6,SCREENSZ         POINT BACK TO THE PRIMARY BUFFER
SHOWNOTE MVI   7(R6),FLDOUTHI      HIGH INTENSITY FOR MESSAGE TEXT
         A     R6,SCREENSZ         POINT TO LINE'S SHADOW
         MVI   8(R6),X'07'         MAKE THE NON-DATA LINE WHITE
         L     R1,SCRNCOLS         GET THE SCREEN WIDTH
         S     R1,EDFW10           GET EXECUTE LENGTH
         EX    R1,EDINSREP         MAKE REST OF LINE WHITE
         S     R6,SCREENSZ         POINT BACK TO THE PRIMARY BUFFER
**  FOLLOWING NOT REQ'D SINCE EDITSNTX JUMPS BACK OVER MESSAGE LINES
**       L     R2,BAK(,R2)         POINT TO PREVIOUS RECORD
**       ICM   R0,7,PRND(R2)       GET SYNTAX PARSE STATUS
**       L     R2,FWD(,R2)         RESTORE CURRENT RECORD POINTER
**       STCM  R0,7,PRND(R2)       CASCADE SYNTAX PARSE STATUS
         TM    FLG3(R2),LFIX       ALWAYS SHOW AT LEFT MAX?
         BZ    EDCOLROK            NO, GO SHOW THE NON-DATA TEXT
         CLI   CTLLEN(R2),HIPRFIDX EDIT PROFILE DISPLAY LINE?
         BH    EDCOLROK            NO, GO SHOW THE NON-DATA TEXT
         SR    R1,R1               YES
         MVC   9(9,R6),PROFDASH    LOAD PROFILE LINE INDICATOR
         IC    R1,CTLLEN(,R2)      GET THE PROFILE LINE INDEX
         SLA   R1,2                MULTIPLY IT BY FOUR
         B     *+4(R1)             BRANCH TO APPROPRIATE ROUTINE
         B     SHOWPLN0            GO FORMAT PROFILE LINE 0
         B     SHOWPLN1            GO FORMAT PROFILE LINE 1
         B     SHOWPLN2            GO FORMAT PROFILE LINE 2
         B     SHOWPLN3            GO FORMAT PROFILE LINE 3
         B     SHOWPLN4            GO FORMAT PROFILE LINE 4
         B     SHOWPLN5            GO FORMAT PROFILE LINE 5
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SHOWPLN0 MVC   21(L'EDPRFLN0,R6),EDPRFLN0
         TM    STATUS10,$10CAP     CAPS ON?
         BO    *+10                YES
         MVC   26(3,R6),EDOFF      NO
         TM    STATUS14,$14NUL     NULLS ON?
         BO    *+10                YES
         MVC   38(3,R6),EDOFF      NO
         TM    EPHEX,1             HEX ON?
         BO    *+10                YES
         MVC   48(3,R6),EDOFF      NO
         TM    EPNUM,1             NUMBER ON?
         BO    *+10                YES
         MVC   58(3,R6),EDOFF      NO
         TM    EPNUM,3             NUMBER ON COBOL?
         BNO   SCRNCURS            NO, PROFILE LINE NOW FORMATTED
         MVC   62(5,R6),EDCCOBOL   YES
         B     SCRNCURS            PROFILE LINE NOW FORMATTED
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SHOWPLN1 MVC   21(L'EDPRFLN1,R6),EDPRFLN1
         TM    EPHIDE,1            HIDE ON?
         BO    *+10                YES
         MVC   26(3,R6),EDOFF      NO
         TM    EDFLG2,E2STAT       STATS ON?
         BO    *+10                YES
         MVC   38(3,R6),EDOFF      NO
         TM    EPZAP,1             ZAP ON?
         BO    *+10                YES
         MVC   48(3,R6),EDOFF      NO
         TM    STATUS11,$11VIEW    IN VIEW MODE?
         BNO   *+10                NO
         MVC   48(3,R6),=C'N/A'    YES
         TM    STATUS16,$16NAS     AUTOSAVE ON?
         BZ    SCRNCURS            YES, PROFILE LINE NOW FORMATTED
         MVC   63(5,R6),EDOFF      NO
         B     SCRNCURS            PROFILE LINE NOW FORMATTED
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SHOWPLN2 MVC   21(L'EDPRFLN2,R6),EDPRFLN2
         TM    STATUS7,EDCOLS      COLS ON?
         BO    *+10                YES
         MVC   26(3,R6),EDOFF      NO
         TM    EPASCII,X'01'       ASCII ON?
         BO    *+10                YES
         MVC   38(3,R6),EDOFF      NO
         LA    R0,1                SHOW LEFT BOUND
         A     R0,EDLBND
         CVD   R0,DOUBLE
         MVC   50(6,R6),EDED5Z
         ED    50(6,R6),DOUBLE+5
         L     R0,EDRBND           SHOW RIGHT BOUND
         CVD   R0,DOUBLE
         MVC   56(6,R6),EDED5Z
         ED    56(6,R6),DOUBLE+5
         B     SCRNCURS            PROFILE LINE NOW FORMATTED
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SHOWPLN3 MVC   21(L'EDPRFLN3,R6),EDPRFLN3
         TM    EPDSNC,X'01'        DSNC ON?
         BO    *+10                YES
         MVC   26(3,R6),EDOFF      NO
         SR    R1,R1               CLEAR FOR INSERT
         IC    R1,EDHITYP          GET HILITE TYPE CODE
         SLA   R1,3                MULTIPLY BY 8 FOR INDEX
         LA    R1,EDHITAB@(R1)     POINT TO HILITE SETTING NAME
         MVC   39(8,R6),0(R1)      SHOW HILITE SETTING
         CLI   EDHITYP,EDAUTO      HIGHLIGHTING ON AUTOMATIC?
         BNE   SCRNCURS            NO, PROFILE LINE NOW FORMATTED
         SR    R0,R0               CLEAR FOR INSERT
         ICM   R0,1,EDFLG3         GET SOURCE TYPE
         LA    R1,EDASM
         SR    R0,R1               CONVERT ORDINAL TO RELATIVE
         BM    SCRNCURS            NONE IDENTIFIED
         LA    R1,EDCASM           POINT TO TYPE LITERAL VECTOR
         SLA   R0,3                MULTIPLY BY 8 FOR INDEX
         AR    R1,R0               POINT TO TYPE NAME
         MVC   45(8,R6),0(R1)
         MVI   43(R6),C':'
         B     SCRNCURS            PROFILE LINE NOW FORMATTED
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SHOWPLN4 MVC   21(L'EDPRFLN4,R6),EDPRFLN4
         MVC   21+26(3,R6),EPC#NX  SHOW COMPARE X NX LINE COUNT
         CLI   21+26(R6),C'0'      LEADING ZERO?
         BNE   PROFPRES            NO
         MVI   21+26(R6),C' '      YES, SUPPRESS IT
         CLI   21+27(R6),C'0'      LEADING ZERO?
         BNE   PROFPRES            NO
         MVI   21+27(R6),C' '      YES, SUPPRESS IT
PROFPRES TM    EPPRES,1            PRESERVE ON?
         BO    SCRNCURS            YES, PROFILE LINE NOW FORMATTED
         MVC   21+L'EDPRFLN4-2(3,R6),EDOFF
         B     SCRNCURS            PROFILE LINE NOW FORMATTED
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SHOWPLN5 MVC   21(L'EDPRFLN5,R6),EDPRFLN5
         ICM   R0,15,EDTABMIN      ARE ANY SOFTWARE TABS SET?
         BZ    SCRNCURS            NO, PROFILE LINE NOW FORMATTED
         LA    R0,EDTABL/4         GET MAXMIMUM TABS COLUMN COUNT
         LAE   R15,EDTAB#          POINT TO THE TABS COLUMN NUMBERS
         LAE   R14,67(,R6)         POINT TO LAST DISPLAY SLOT
PROF5LP1 ICM   R1,15,0(R15)        GET TABS COLUMN NUMBER
         BZ    PROF5LP2            END OF ACTIVE SLOTS REACHED
         CVD   R1,DOUBLE
         MVC   0(6,R14),EDED5Z
         ED    0(6,R14),DOUBLE+5
         LA    R15,4(,R15)         POINT TO NEXT TABS COLUMN NUMBER
         S     R14,EDFW6           POINT TO PREVIOUS DISPLAY SLOT
         BCT   R0,PROF5LP1
PROF5LP2 CLI   30(R6),C' '         LEADING BLANKS SLOT?
         BNE   SCRNCURS            NO, PROFILE LINE NOW FORMATTED
         MVC   25(48,R6),31(R6)    YES, SHUFFLE ONE SLOT TO THE LEFT
         B     PROF5LP2
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
         SPACE
*         SHOW OUT-OF-BOUNDS DATA IN BLUE
         SPACE
EDBLUBND TM    FLG3(R2),LFIX       ADMINISTRATIVE MESSAGE?
         BOR   R4                  YES, LEAVE WHITE SO NO ACTION HERE
         TM    FLG3(R2),LNEW       NEW LINE FROM COMPARE?
         BNO   EDBLUELN            NO
         LAE   R14,8(,R6)          YES, POINT TO DATA TARGET
         A     R14,SCREENSZ        POINT TO DATA TARGET'S SHADOW
         L     R0,EDATWDTH         GET DATA WIDTH ON SCREEN
EDYELOLP NI    0(R14),X'F0'        REMOVE COLOUR, BUT NOT HIGHLIGHTING
         OI    0(R14),X'06'        CHANGE THE COLOUR TO YELLOW
         LA    R14,1(,R14)         POINT TO NEXT COLUMN
         BCT   R0,EDYELOLP
EDBLUELN L     R0,EDLBND           GET COLUMNS LEFT OF LEFT BOUND
         S     R0,EDOFFSET         GET SUCH COLUMNS ON SHOW
         BNP   EDLBNDOK            THERE ARE NONE
         LAE   R14,8(,R6)          POINT TO DATA TARGET
         A     R14,SCREENSZ        POINT TO DATA TARGET'S SHADOW
         C     R0,EDATWDTH         MORE DATA THAN SHOWN?
         BNH   EDCLLFLP            NO
         L     R0,EDATWDTH         YES, REDUCE TO DATA ON SHOW
EDCLLFLP NI    0(R14),X'F0'        REMOVE COLOUR, BUT NOT HIGHLIGHTING
         OI    0(R14),X'01'        CHANGE THE COLOUR TO BLUE
         LA    R14,1(,R14)         POINT TO NEXT COLUMN
         BCT   R0,EDCLLFLP
EDLBNDOK L     R0,EDATWDTH         GET SCREEN DATA WIDTH
         A     R0,EDOFFSET         GET LAST VISIBLE COLUMN NUMBER
         S     R0,EDRBND           GET COLUMNS PAST RIGHT BOUND
         BNP   EDRBNDOK            THERE ARE NONE
         LAE   R14,8(,R6)          POINT TO LINE'S DATA
         A     R14,EDATWDTH        POINT PAST DATA TARGET
         A     R14,SCREENSZ        POINT PAST DATA TARGET'S SHADOW
         C     R0,EDATWDTH         MORE DATA THAN SHOWN?
         BNH   EDCLRTLP            NO
         L     R0,EDATWDTH         YES, REDUCE TO DATA ON SHOW
EDCLRTLP BCTR  R14,0               BACK UP ONE COLUMN
         NI    0(R14),X'F0'        REMOVE COLOUR, BUT NOT HIGHLIGHTING
         OI    0(R14),X'01'        CHANGE THE COLOUR TO BLUE
         BCT   R0,EDCLRTLP
EDRBNDOK BR    R4                  RETURN TO CALLER
         SPACE
         SPACE
SHOWCOLR MVC   0(0,R1),0(R14)      <<< EXECUTED >>>
SHOWDATA MVC   0(0,R14),0(R3)      <<< EXECUTED >>>
SNOWDATA TR    0(0,R14),EDTRENDR   <<< EXECUTED >>>
NIBLDATA TR    8(0,R6),EDHEX       <<< EXECUTED >>>
EDXDASHS MVC   2(0,R6),1(R6)       <<< EXECUTED >>>
EDINSREP MVC   9(0,R6),8(R6)       <<< EXECUTED >>>
EDREPCHK CLC   9(0,R6),8(R6)       <<< EXECUTED >>>
EDTOPDSN MVC   10(0,R6),DSNAIM+2   <<< EXECUTED >>>
         SPACE
         DROP  R10,R8              EDITSCRN
         SPACE
         DC    0D'0'
         LTORG
EDONVIO  DC    CL8' ON VIO '
TOPODATA DC    C' TOP OF DATA '
LENGTOPO EQU   *-TOPODATA
ENDODATA DC    C' BOTTOM OF DATA '
LENGENDO EQU   *-ENDODATA
LINESXCL DC    C' LINE(S) EXCLUDED   '
LENGLXCL EQU   *-LINESXCL
PROFDASH DC    CL9'-PROFILE-'
EDPRFLN0 DC    C'CAPS ON    NULLS ON    HEX ON    NUM ON  STD'
EDPRFLN1 DC    C'HIDE ON    STATS ON    ZAP ON    AUTOSAVE ON'
EDPRFLN2 DC    C'COLS ON    ASCII ON    BOUNDS'
EDPRFLN3 DC    C'DSNC ON    HILITE'
EDPRFLN4 DC    C'COMPARE X SHOW LINE COUNT        PRESERVE ON'
EDPRFLN5 DC    C'TABS 0'
HIPRFIDX EQU   5                   MAXIMUM PROFILE INDEX
         DC    0H'0'
*  ----------------------------------------------------------------
         TITLE '  E D I T T E X T   -   T E X T   E N T R Y  '
*
*    EDITTEXT IS CALLED FROM EDITSCRN WHEN AN ELEMENT ON THE INSERT
*    ELEMENT CHAIN IS FOUND TO REPRESENT A 'TE' LINE COMMAND.
*
*    ELEMENTS ON THE INSERT CHAIN ARE PROCESSED AS THEIR CORRES-
*    PONDING LINE COMMANDS ARE ENCOUNTERED AS THE LINES ARE
*    FORMATTED FOR DISPLAY.  THE INSERT LINE COUNT IS SET PENDING
*    FOR THE CONSTRUCTION OF SUBSEQUENT LINES.  FOR NORMAL INSERTS
*    THE COUNT WILL NEVER BE LARGER THAN THE SCREEN'S LINE COUNT.
*    WHEN THE CMDETE FLAG IS FOUND TO BE SET, THE VALUE X'7F' IS
*    PLACED INTO THE HIGH BYTE OF THE PENDING INSERT LINE COUNT
*    FULLWORD.  WHEN THIS VALUE IS DETECTED AT INSERT LINE FORMAT
*    TIME, THIS ROUTINE IS CALLED.
*
*    EDITTEXT WILL EDIT THE SCREEN IMAGE FOR TEXT ENTRY, PERFORM
*    AN ADDITIONAL TERMINAL I/O CYCLE TO ACQUIRE THE TEXT DATA,
*    REFLOW THE TEXT DATA INTO NEW RECORDS, AND RETURN CONTROL
*    TO EDITSCRN SO THAT THE PENDING INSERT COUNTER AND THE
*    INSERT ELEMENT CHAIN CAN BE CLEARED.
*
*         ON ENTRY: R2 ->  LINE BEFORE TEXT ENTRY DATA
*                   R5  =  LINES REMAINING TO BE FORMATTED
*                   R6 ->  PRIMARY SCREEN BUFFER LINE START
*                   R7 ->  SCREEN LINE DIRECTORY ENTRY
*                  R10 ->  @EDDATA
*                  R13 ->  SAVE AREA
*                  R14 ->  RETURN POINT
*                  R15 ->  EDITTEXT
*
         SPACE
         USING EDITTEXT,R10
EDITTEXT STM   R14,R12,12(R13)     SAVE GENERAL PURPOSE REGISTERS
         LR    R10,R15             SET LOCAL BASE
         SAC   0                   SET PRIMARY MODE
         LA    R0,EDSAVE2          POINT TO SAVE AREA
         ST    R13,EDSAVE2+4       CHAIN SAVE AREAS
         ST    R0,8(,R13)
         LR    R13,R0              POINT TO NEW SAVE AREA
         SPACE
*         PROTECT PRE-INSERT INPUT FIELDS
         SPACE
         LR    R1,R6               POINT TO CURRENT LINE
         L     R0,SCREENBF         POINT TO THE PRIMARY BUFFER
ET_LOOP1 BCTR  R1,0                BACK UP A BYTE
         CLR   R1,R0               STILL IN PRIMARY SCREEN BUFFER?
         BNH   ET_DONE1            NO, EXIT LOOP
         CLI   0(R1),FLDINLO       INPUT FIELD?
         BL    ET_LOOP1            NO
         CLI   0(R1),FLDINHI       INPUT FIELD?
         BH    ET_LOOP1            NO
         OI    0(R1),X'04'         YES, MAKE PROTECTED AUTOSKIP
         B     ET_LOOP1
ET_DONE1 EQU   *
         SPACE
*         PREPARE REST OF SCREEN FOR INPUT
         SPACE
         LR    R15,R5              GET REMAINING LINE COUNT
         MH    R15,SCRNCOLS+2      GET REMAINING LOCATION COUNT
         LR    R14,R6              POINT TO THIS LINE
         STM   R14,R15,EDENQPRM    SAVE FOR LATER
         S     R15,SCRNCOLS        LEAVE LAST LINE FOR NOW
         BNP   ET_NULLS            ONLY ONE LINE
         SR    R1,R1
         ICM   R1,8,EDBLNKS        SET PAD TO BLANK
         MVCL  R14,R0              BLANK UP TO LAST LINE
ET_NULLS L     R15,SCRNCOLS        GET LENGTH OF LAST LINE
         S     R15,EDFW2           LEAVE TWO BYTES
         SR    R1,R1               SET PAD TO NULL
         ST    R1,COUNTER1         CLEAR PENDING INSERTS
         MVCL  R14,R0              RESET LAST LINE
         MVI   0(R14),FLDOUTHI     SET END OF INPUT ATTRIBUTE BYTE
         MVI   1(R14),C'|'         FLAG END OF FIELD
         LM    R14,R15,EDENQPRM    RESTORE REST-OF-SCREEN DETAILS
         A     R14,SCREENSZ        POINT TO ITS SHADOW
         BCTR  R15,0               LEAVE LAST BYTE
         LA    R1,X'04'            GET CODE FOR GREEN
         SLL   R1,24               PROMOTE TO PAD AND ZERO LENGTH
         MVCL  R14,R0              MAKE REST OF SCREEN GREEN
         MVI   0(R14),X'07'        SHOW VERTICAL BAR IN WHITE
         MVI   0(R6),FLDINLO       SET TEXT ENTRY FIELD ATTRIBUTE
         SPACE
*         READ TEXT ENTRY DATA
         SPACE
         LR    R14,R6              POINT TO CURRENT LINE
         S     R14,EDYNAREA        GET DYNAMIC AREA OFFSET
         LA    R14,2(,R14)         GET CURSOR POSITION
         ST    R14,REVPOS          SET CURSOR POSITION
         MVC   REVCSR,EDREVBUF     PUT CURSOR IN DYNAMIC AREA
         SPACE
         ICM   R0,3,MSG            ANY MESSAGE PRESENT?
         BNZ   *+8                 YES, DO NOT OVERLAY IT
         MVI   MSG,186             PRESS ANY PF KEY TO CANCEL
         SPACE
         L     R15,EDCOMMAD
         BASR  R14,R15             DISPLAY SCREEN AND GET INPUT
         SPACE
         TM    STATUS13,$13NTRM    NEW TERMINAL SCREEN SIZE?
         BO    ET_EXIT             YES, LOSE INTEREST FOR NOW
         MVI   MSG,29              REQUEST CANCELLED
         TM    STATUS4,$4ATTN      ATTENTION INTERRUPT?
         BO    ET_EXIT             YES, DISCARD ENTERED DATA
         MVI   MSG,0               CLEAR MESSAGE
         SPACE
*         FLOW INPUT WORDS INTO NEW NEW LINES
         SPACE
         SAC   512                 SET AR MODE
         LM    R6,R7,EDENQPRM      GET INPUT TEXT AREA DETAILS
         LA    R6,1(,R6)           POINT PAST INPUT FIELD ATTRIBUTE
         S     R7,EDFW3            GET ACTUAL INPUT AREA LENGTH
         SPACE
ET_NEWLN L     R15,GETALIN@
         BASR  R14,R15             GET STORAGE FOR A RECORD
         BZ    ET_NOSTG            INSUFFICIENT STORAGE
         CPYA  A14,A15             COPY DATA SPACE ALET
         L     R14,FWD(,R2)        POINT TO RECORD AFTER NEW RECORD
         ST    R2,BAK(,R15)        SET NEW BACKWARD POINTER
         ST    R14,FWD(,R15)       SET NEW FORWARD POINTER
         ST    R15,FWD(,R2)        UPDATE OLD FORWARD POINTER
         ST    R15,BAK(,R14)       UPDATE OLD BACKWARD POINTER
         LR    R2,R15              POINT TO NEW RECORD
         LA    R14,CTLLEN(,R15)    POINT TO RECORD DATA AREA
         L     R15,MAXRECSZ        GET NEW RECORD DATA AREA LENGTH
         SR    R1,R1               ZERO SOURCE LENGHT
         ICM   R1,8,EDBLNKS        SET PAD CHARACTER
         MVCL  R14,R0              BLANK NEW RECORD
         LA    R0,1
         A     R0,RECLINES         INCREMENT RECORD COUNT
         ST    R0,RECLINES
         LA    R14,CTLLEN(,R2)     POINT TO RECORD DATA AREA
         L     R15,EDRBND          GET RIGHT BOUND COLUMN NUMBER
         A     R14,EDLBND          POINT TO LEFT BOUND COLUMN
         S     R15,EDLBND          GET AVAILABLE COLUMN COUNT
         SPACE
ET_GETWD CLI   0(R6),C' '          BLANK?
         BNE   ET_NEWWD            NO
         LA    R6,1(,R6)           YES, POINT PAST IT
         BCT   R7,ET_GETWD         GO LOOK FOR NON-BLANK
         B     ET_ENDUP            INPUT TEXT ALL PROCESSED
         SPACE
ET_NEWWD BL    ET_ENDUP            INPUT TEXT ALL PROCESSED
         LR    R4,R6               POINT TO START OF NEW WORD
         SR    R5,R5               RESET WORD LENGTH COUNTER
ET_GOTWD CLI   0(R6),C' '          REACHED END OF WORD?
         BNH   ET_ENDWD            YES
         LA    R6,1(,R6)           NO, POINT TO NEXT CHARACTER
         LA    R5,1(,R5)           INCREMENT WORD LENGTH
         BCT   R7,ET_GOTWD         CONTINUE WORD ACQUISTION
         SPACE
ET_ENDWD CR    R15,R5              ENOUGH ROOM TO LOAD WORD?
         BNL   ET_PUTWD            YES, GO DO IT
         LR    R6,R4               POINT TO START OF WORD
         AR    R7,R5               UNDO WORD ACQUISITION
         TM    FLG1(R2),CHGL       ANYTHING LOADED IN THIS LINE YET?
         BO    ET_NEWLN            NO, REDRIVE PARSE WITH NEW LINE
         L     R5,EDRBND           YES, THIS IS AS BIG AS IT GETS
         S     R5,EDLBND           GET MAXIMUM ROOM PER RECORD
         AR    R6,R5               MARK A LINE'S WORTH AS DONE
         SR    R7,R5
         SPACE
ET_PUTWD LR    R0,R15              GET ROOM LEFT IN THIS RECORD
         SR    R0,R5               GET NEW ROOM LEFT AFTER THIS WORD
         LR    R15,R5              TARGET LENGTH EQUALS SOURCE LENGTH
         MVCL  R14,R4              LOAD WORD INTO RECORD
         LR    R15,R0              GET NEW ROOM LEFT IN RECORD
         OI    EDFLG1,SAVEY+SAVEZ  FLAG IN-CORE DATA HAS CHANGED
         OI    FLG1(R2),CHGL       MARK RECORD AS CHANGED
         BCTR  R4,0                POINT TO LAST NON-BLANK LOADED
         LA    R0,2                PREPARE FOR END OF SENTENCE
         CLI   0(R4),C'.'          END OF SENTENCE?
         BE    ET_GAPWD            YES
         CLI   0(R4),C'?'          END OF SENTENCE?
         BE    ET_GAPWD            YES
         CLI   0(R4),C'!'          END OF SENTENCE?
         BE    ET_GAPWD            YES
         LA    R0,1                NOT END OF SENTENCE, JUST A WORD
ET_GAPWD AR    R14,R0              LEAVE A GAP
         SR    R15,R0              ADJUST REMAINING ROOM LEFT
         BP    ET_GETWD            GO GET THE NEXT WORD
         B     ET_NEWLN            GET A NEW RECORD BEFORE NEXT WORD
         SPACE
ET_ENDUP TM    FLG1(R2),CHGL       WAS ANYTHING LOADED INTO THIS LINE?
         BO    ET_EXIT             YES, MISSION ACCOMPLISHED
         L     R14,BAK(,R2)        POINT TO PREVIOUS LINE
         L     R15,FWD(,R2)        POINT TO NEXT LINE
         ST    R14,BAK(,R15)       UPDATE FOLLOWING BACK POINTER
         ST    R15,FWD(,R14)       UPDATE PREVIOUS FORWARD POINTER
         MVC   FWD(4,R2),MPTANKOR  ADD UNCHAINED LINE TO EMPTY CHAIN
         OI    FLG2(R2),255-LLBL   FLAG LINE AS AWAITING REUSE
         ST    R2,MPTANKOR
         L     R0,RECLINES
         BCTR  R0,0                ADJUST TOTAL RECORD COUNT
         ST    R0,RECLINES
         B     ET_EXIT
         SPACE
*         REPORT EDIT DATA STORAGE FULL
         SPACE
ET_NOSTG MVI   MSG,123             REQUEST ABORTED - STORAGE FULL
         SPACE
*         UNPROTECT PRE-INSERT INPUT FIELDS - AND RETURN
         SPACE
ET_EXIT  L     R13,4(,R13)         POINT TO CALLER'S SAVE AREA
         USING SAVER,R13
         L     R6,SAVGRS6          RESTORE SCREEN LINE POINTER
         DROP  R13                 SAVER
         L     R0,SCREENBF         POINT TO THE PRIMARY BUFFER
ET_LOOP2 BCTR  R6,0                BACK UP A BYTE
         CLR   R6,R0               STILL IN PRIMARY SCREEN BUFFER?
         BNH   ET_DONE2            NO, EXIT LOOP
         CLI   0(R6),FLDSKPLO      AUTOSKIP FIELD?
         BL    ET_LOOP2            NO
         CLI   0(R6),FLDSKPHI      AUTOSKIP FIELD?
         BH    ET_LOOP2            NO
         NI    0(R6),255-X'04'     YES, MAKE IT UNPROTECTED
         B     ET_LOOP2
ET_DONE2 EQU   *
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         SAC   512                 SET AR MODE
         BR    R14                 RETURN TO CALLER
         SPACE
         DROP  R10                 EDITTEXT
         DC    0H'0'
         TITLE '  E D I T S N T X   -   S Y N T A X   C O L O R I N G '
*
*    EDITSNTX IS INVOKED VIA 'BASR  R14,R15'.
*
*    ENTRY ADDRESSING MODE ALLOWS ACCESS TO THE FILE'S EDIT DATA.
*
*    ON ENTRY R1 POINTS TO THE LINE TO BE COLOURED.
*
*    ON EXIT 'EDLNSHDW' HAS THE COLOURED SHADOW DATA FOR THE LINE.
*
*    DURING PROCESSING -
*
*        R0 COUNTS THE DATA BYTES STILL TO PROCESS.
*        R1 POINTS TO INTERNAL LINE ENTRY BEING PROCESSED.
*        R3 TRACKS PROGRESS THROUGH THE LINE'S DATA.
*        R10 AND R8 ARE THE LOCAL BASE REGISTERS.
*        R14 TRACKS PROGRESS THROUGH THE SHADOW BUFFER (EDLNSHDW).
*
         USING EDITSNTX,R10,R8
EDITSNTX STM   R14,R12,12(R13)     SAVE GENERAL PURPOSE REGISTERS
         STAM  A0,A15,EDARSAVE     SAVE ACCESS REGISTERS
         LR    R10,R15             SET LOCAL BASE
         LA    R8,1
         LA    R8,4095(R8,R10)
         LAM   A2,A15,EDZEROS      ZERO ACCESS REGISTERS
         SPACE
         XC    EDSYNWRK,EDSYNWRK   CLEAR WORK AREA
         LAE   R5,0(,R1)           POINT TO CURRENT RECORD
         LA    R14,EDLNSHDW        POINT TO OUTPUT AREA
         LAE   R3,CTLLEN(,R1)      POINT TO ACTUAL DATA
         LA    R0,71               GET LENGTH OF LINE TO COLOUR
         SR    R6,R6               CLEAR FOR INSERT
         NI    FLG2(R1),255-LQOT-LCNT-LLOG
         MVI   PRND(R1),0          RESET LINE SYNTAX STATUS
         SPACE
*
*    HANDLE IEBUPDTE/PDSLOAD/REVLMOD/REVLPDS CONTROL STATEMENTS
*
         MVI   EDLNSHDW,X'07'      WHITE FOR IEBUPDTE/PDSLOAD/REVLMOD
         CLC   ED_D_S,CTLLEN(R1)   IEBUPDTE/PDSLOAD/REVLMOD STATEMENT?
         BE    EDSYNCLR            YES
         SPACE
*
*    HANDLE JCL COMMENTS AND DIVERT JCL STATEMENTS
*
         MVI   EDLNSHDW,X'05'      TURQUOISE FOR COMMENTS
         MVC   EDLNSHDW+1(79),EDLNSHDW
         CLC   ED_S_S_A,0(R3)      JCL COMMENT?
         BE    EDSYNJCL            YES, HAVE LINE COLOUR
         CLC   ED_S_S,CTLLEN(R1)   IS THIS A A JCL STATEMENT?
         BE    EDJCLCNT            YES, CHECK FOR A CONTINUATION
         SPACE
*
*    DETERMINE IF THIS IS A NON-JCL "TOP" RECORD
*
*    THE 'LTOP' FLAG CAN ONLY BE SET FOR NON-JCL RECORDS.
*    IT IS SET FOR A DATA RECORD WHICH IS FIRST IN THE FILE, OR
*    FIRST AFTER JCL OR IEBUPDTE CONTROL STATEMENT RECORDS.
*
         NI    FLG1(R1),255-LTOP   FLAG NOT A "TOP" RECORD
         IC    R7,EDFLG2           SAVE FLAG BYTE VALUE
         NI    EDFLG2,255-E2SACE   RESET '/*' COMMENT FLAG
         LR    R5,R1               POINT TO CURRENT RECORD
EDSYNBAK L     R5,BAK(,R5)         POINT TO PREVIOUS RECORD
         C     R5,TOPADDR          IS THIS THE FIRST DATA LINE?
         BE    EDSYNTOP            YES, DEFINITELY A "TOP" RECORD
         TM    FLG1(R5),LMSG       IS PREVIOUS LINE A MESSAGE LINE?
         BO    EDSYNBAK            YES, GO GET THE LINE BEFORE THAT
         CLC   ED_D_S,CTLLEN(R5)   THIS LINE AFTER A ./ STATEMENT?
         BE    EDSYNTOP            YES, ALSO A "TOP" RECORD
         CLC   ED_S_S,CTLLEN(R5)   THIS LINE AFTER A JCL STATEMENT?
         BE    EDSYNTOP            YES, COULD BE INSTREAM DATA
         STC   R7,EDFLG2           RESTORE FLAG BYTE VALUE
         TM    FLG1(R5),LNNB+LTOP  ANY NON-BLANK NON-COMMENTS YET?
         BNO   EDJCLCHK            YES, NOT START OF SOURCE CODE
EDSYNTOP OI    FLG1(R1),LTOP       FLAG RECORD IS A "TOP" RECORD
         SPACE
*
*    DETECT TSO HELP AND ISPF PANELS
*
         CLI   CTLLEN(R1),C')'     SECTION START?
         BE    EDSYNDAT            YES, DO NOT ATTEMPT TO COLOUR
         SPACE
*
*    DETECT UNDISPLAYABLES SUCH AS OBJECT DECKS AND TRANSMIT FILES
*
         XC    DYNTABLE,DYNTABLE   CLEAR TRANSLATE TABLE
         MVI   DYNTABLE,X'FF'      FLAG UNDISPLAYABLE CHARACTERS
         MVI   DYNTABLE+255,X'FF'
         MVC   DYNTABLE+1(63),DYNTABLE
         LR    R7,R1               SAVE CURRENT RECORD ADDRESS
         TRT   CTLLEN(80,R1),DYNTABLE
         LR    R1,R7               RESTORE RECORD POINTER IF NOT ZERO
         BNZ   EDSYNDAT            COLOURING COMPLETE FOR RAW DATA
         SPACE
*
*    DETECT '*PROCESS' STATEMENT WHICH COULD BE ASSEMBLER OR PL/I
*
         CLI   CTLLEN(R1),C'*'     STATEMENT STARTS WITH AN ASTERISK?
         BE    EDPSTART            YES
         CLI   CTLLEN(R1),C'%'     STATEMENT STARTS WITH A PERCENT?
         BNE   EDJCLCHK            NO
EDPSTART CLC   EDPROCES,CTLLEN+1(R1)
         BNE   EDJCLCHK            NOT *PROCESS OR %PROCESS
*
*    LOOK FOR PL/I MARGINS SPECIFICATION
         LA    R5,CTLLEN+9(,R1)    POINT TO EARLIEST OPERAND START
         LA    R0,70-9             GET COLUMNS TO SCAN
EDPLMLP1 LA    R15,L'EDMAR1
         CLC   EDMAR1,0(R5)        FOUND MAR( ?
         BE    EDGOTMAR            YES
         LA    R15,L'EDMAR2
         CLC   EDMAR2,0(R5)        FOUND MARGINS( ?
         BE    EDGOTMAR            YES
         LA    R15,L'EDMAR3
         CLC   EDMAR3,0(R5)        FOUND SORMGIN=( ?
         BE    EDGOTMAR            YES
         LA    R5,1(,R5)           POINT TO NEXT BYTE
         BCT   R0,EDPLMLP1         CONTINUE SCAN
         B     EDMARGOK
*
*    CONVERT ZONED COLUMN NUMBER TO BINARY
EDMARCOL LR    R3,R5               POINT TO FIRST DIGIT
EDMARLP  CLI   0(R5),C'0'          DECIMAL DIGIT?
         BL    EDMAR#              NO
         LA    R5,1(,R5)           YES, POINT TO NEXT BYTE
         B     EDMARLP
EDMAR#   LR    R15,R5
         SR    R15,R3              GET DIGIT COUNT
         BNP   EDMARGOK            NO DIGITS SO FORGET PL/I MARGINS
         BCTR  R15,0               DECREMENT FOR EXECUTE
         EX    R15,EDRGNPAK        GET THE SPECIFIED COLUMN NUMBER
         CVB   R15,DOUBLE          GET VALUE TO RETURN
         BR    R14                 RETURN TO CALLER
*
*    CONVERT ZONED COLUMN NUMBER TO BINARY
EDGOTMAR AR    R5,R15              POINT TO FIRST DIGIT
         BAS   R14,EDMARCOL        GET SOURCE START COLUMN
         CLI   0(R5),C','          EXPECTED SYNTAX?
         BNE   EDMARGOK            NO, SO FORGET PL/I MARGINS
         CH    R15,EDPLI2          SENSIBLE VALUE?
         BNL   EDMARGOK            NO, SO FORGET PL/I MARGINS
         BCTR  R15,0               CONVERT TO START OFFSET
         STH   R15,EDPLI1          SAVE IT
         LA    R5,1(,R5)           POINT TO SECOND NUMBER
         BAS   R14,EDMARCOL        GET SOURCE END COLUMN
         STC   R15,EDPLI2+1        SAVE IT (ENSURE < 256)
         CLI   EDPLI2+1,80         TOO BIG TO USE?
         BNH   *+8                 NO
         MVI   EDPLI2+1,80         YES, REDUCE IT
         BCTR  R15,0               CONVERT TO OFFSET
         CH    R15,EDPLI1          SENSIBLE VALUE?
         BH    EDMARGOK            HOPE SO
         MVI   EDPLI2+1,72         NO, RESTORE SOURCE END COLUMN
*
*    RESUME GENERAL PROCESS STATEMENT PROCESSING
EDMARGOK MVI   EDLNSHDW,X'01'      YES, SHOW IT IN BLUE
         LA    R14,EDLNSHDW        POINT TO OUTPUT AREA
         L     R5,FWD(,R1)         POINT TO THE NEXT RECORD
         C     R5,BTMADDR          IS THIS THE LAST RECORD?
         BE    EDSYNCLR            YES, LAST LINE NOW COLOURED
         OI    FLG1(R1),LNNB       PREPARE FOR ANOTHER FOLLOWING
         CLC   CTLLEN(9,R1),CTLLEN(R5)     ANOTHER FOLLOWING?
         BE    EDSYNCLR            YES, DECIDE LANGUAGE NEXT TIME
         NI    FLG1(R1),255-LNNB   NO, DECIDE IT ALL HERE AND NOW
         XC    DYNTABLE,DYNTABLE   CLEAR TRANSLATE TABLE
         MVI   DYNTABLE+C';',C';'  SET SEMICOLON
         MVI   EDFLG3,EDASM        FLAG DATA IS ASSEMBLER SOURCE CODE
         TRT   CTLLEN+L'EDPROCES(72-L'EDPROCES,R1),DYNTABLE
         BZ    EDSYNCLR            ASSEMBLER IT IS
         LR    R1,R7               RESTORE RECORD POINTER
         MVI   EDFLG3,EDPLI        FLAG DATA IS PL/I SOURCE CODE
         B     EDSYNCLR            NOW HAVE LINE COLOUR AND LANGUAGE
         SPACE
*
*    CHECK FOR NON-JCL RESULTING IN A MISSING JCL CONTINUATION
*
EDJCLCHK LR    R5,R1               POINT TO THE CURRENT RECORD
EDJCLPRV L     R5,BAK(,R5)         POINT TO PREVIOUS RECORD
         C     R5,TOPADDR          GONE BACK TO TOP OF DATA?
         BE    EDJECLCK            YES, JCL CONTINUATION NOT MISSING
         TM    FLG1(R5),LMSG       IS PREVIOUS LINE A MESSAGE LINE?
         BO    EDJCLPRV            YES, GO GET THE LINE BEFORE THAT
         CLC   ED_S_S_A,CTLLEN(R5) IS PRIOR JCL A COMMENT?
         BE    EDJCLPRV            YES, BACK UP ANOTHER RECORD
         CLC   ED_S_S,CTLLEN(R5)   IS EARLIER RECORD JCL?
         BNE   EDJECLCK            NO, JCL CONTINUATION NOT MISSING
         TM    FLG2(R5),LCNT       IS OPERAND CONTINUATION REQUIRED?
         BO    EDJCLERR            YES, SLASHES MISSING
         CLI   CTLLEN+71(R5),C' '  NON-BLANK IN PREVIOUS COLUMN 72?
         BNE   EDJCLERR            YES, SLASHES MISSING
         SPACE
*
*    DETERMINE IF THIS NON-TOP RECORD IS JECL OR A DELIMITER
*
EDJECLCK CLC   ED_S_A,CTLLEN(R1)   DOES RECORD START WITH '/*'?
         BNE   EDCNTCHK            NO, CHECK FOR NON-JCL CONTINUATION
         L     R5,FWD(,R1)         POINT TO THE NEXT RECORD
         C     R5,BTMADDR          PROCESSING THE LAST RECORD?
         BE    EDNOTCNT            YES, DO NOT TREAT AS COMMENT START
         CLC   ED_S_S,CTLLEN(R5)   IS A JCL STATEMENT NEXT?
         BE    EDNOTCNT            YES, DO NOT TREAT AS COMMENT START
         LR    R5,R1               POINT TO THE CURRENT RECORD
EDJECPRV L     R5,BAK(,R5)         POINT TO THE PREVIOUS RECORD
         C     R5,TOPADDR          IS THIS RECORD THE FIRST?
         BE    EDCMTSCN            YES, PROBABLY A COMMENT
         TM    FLG1(R5),LMSG       IS PREVIOUS LINE A MESSAGE LINE?
         BO    EDJECPRV            YES, GO GET THE LINE BEFORE THAT
         CLC   ED_S_S,CTLLEN(R5)   DOES THIS RECORD FOLLOW JCL?
         BE    EDNOTCNT            YES, DO NOT TREAT AS COMMENT START
         TM    FLG1(R5),LNNB       ANY NON-BLANK NON-COMMENTS YET?
         BO    EDCMTSCN            NO, PROBABLY A COMMENT
         TM    FLG2(R5),LCMT       FOLLOWING A COMMENT?
         BO    EDCMTSCN            YES, PROBABLY A COMMENT
         CLC   ED_S_A,CTLLEN(R5)   FOLLOWING A COMMENT?
         BE    EDCMTSCN            YES, PROBABLY A COMMENT
         SPACE
*
*    DETERMINE IF THIS RECORD IS AN ASSEMBLER CONTINUATION
*
EDCNTCHK CLI   EDFLG3,EDDATA       DATA DEEMED TO BE JUST DATA?
         BE    EDSYNOFF            YES, NO SYNTAX TO COLOUR
         CLI   EDFLG3,EDCOBOL      COBOL SOURCE?
         BE    EDSYNOFF            YES
         CLI   EDFLG3,EDASM        DATA DEEMED TO BE OTHER SOURCE?
         BH    EDCMTSCN            YES, PERFORM COMMENT SCAN
         TM    FLG1(R1),LTOP       IS RECORD A "TOP" LINE?
         BO    EDNOTCNT            YES, THIS CANNOT BE A CONTINUATION
         CLI   EDFLG3,EDASM        DATA DEEMED TO BE ASSEMBLER SOURCE?
         BNE   EDCMTSCN            NO, JUST PERFORM COMMENT SCAN
         LR    R5,R1               POINT TO THIS LINE
EDASMPRV L     R5,BAK(,R5)         POINT TO THE PREVIOUS LINE
         ICM   R2,15,BAK(R5)       TOP OF DATA?
         BZ    EDNOTCNT            YES, THIS CANNOT BE A CONTINUATION
         TM    FLG1(R5),LMSG       IS PREVIOUS LINE A MESSAGE LINE?
         BO    EDASMPRV            YES, GO GET THE LINE BEFORE THAT
         CLC   ED_D_S,CTLLEN(R5)   IS PREVIOUS LINE A ./ STATEMENT?
         BE    EDNOTCNT            YES, THIS CANNOT BE A CONTINUATION
**       CLC   ED_S_S_A,CTLLEN(R5) IS PREVIOUS LINE A JCL COMMENT?
**       BE    EDASMPRV            YES, GO GET THE LINE BEFORE THAT
         CLC   ED_S_S,CTLLEN(R5)   IS PREVIOUS LINE JCL?
         BE    EDJCLCNT            YES
         CLI   CTLLEN+71(R5),C' '  NON-BLANK IN PREVIOUS COLUMN 72?
         BE    EDNOTCNT            NO, NOT AN ASSEMBLER CONTINUATION
         SPACE
         CLI   CTLLEN(R1),C' '     ARE FIRST 15 COLUMNS BLANK?
         BNE   EDBDACNT            NO, BAD ASSEMBLER CONTINUATION
         CLC   CTLLEN+1(14,R1),CTLLEN(R1)
         BNE   EDBDACNT            NO, BAD ASSEMBLER CONTINUATION
         TM    FLG2(R5),LQOT+LCNT  IS OPERAND CONTINUATION REQUIRED?
         BZ    EDSYNACT            NO, JUST COMMENT CONTINUATION
         TM    FLG2(R5),LLOG       MACRO LOGICAL EXPRESSION?
         BNO   *+8                 NO
         OI    FLG2(R1),LLOG       YES
         OI    FLG2(R1),LQOT       PREPARE FOR QUOTED STRING
         MVI   0(R14),X'07'
         MVC   1(14,R14),0(R14)
         TM    FLG2(R5),LQOT       CURRENTLY QUOTING A STRING?
         BO    EDASMCNT            YES, BLANK DATA ALLOWED
         NI    FLG2(R1),255-LQOT   NO
         MVI   0(R14),X'04'
         MVC   1(14,R14),0(R14)
         MVI   15(R14),X'23'       PREPARE FOR CONTINUATION ERROR
         CLI   CTLLEN+15(R1),C' '  IS COLUMN 16 BLANK?
         BE    EDSYNACT            YES, ERROR
EDASMCNT LA    R14,EDLNSHDW+15     ADJUST OUTPUT AREA POINTER
         LA    R3,CTLLEN+15(,R1)   POINT TO CONTINUED DATA
         LA    R0,71-15            GET LENGTH OF REST OF LINE TO COLOUR
         IC    R6,PRND(,R5)        GET CURRENT NESTING LEVEL
         STC   R6,PRND(,R1)        SET CURRENT NESTING LEVEL
         B     EDSYNLP5            RESUME OPERAND SCAN
         SPACE
*
*    DETERMINE IF A JCL CONTINUATION IS PENDING FOR THIS JCL RECORD
*
EDJCLCNT L     R5,BAK(,R5)         POINT TO THE PREVIOUS LINE
         C     R5,TOPADDR          TOP-OF-DATA?
         BE    EDNOTCNT            YES, THIS IS A NEW JCL STATEMENT
         TM    FLG1(R5),LMSG       IS PREVIOUS LINE A MESSAGE LINE?
         BO    EDJCLCNT            YES, GO GET THE LINE BEFORE THAT
         CLC   ED_S_S_A,CTLLEN(R5) JCL COMMENT?
         BE    EDJCLCNT            YES, BACK UP ANOTHER RECORD
         CLC   ED_S_S,CTLLEN(R5)   JCL STATEMENT?
         BNE   EDNOTCNT            NO, THIS IS A NEW JCL STATEMENT
         TM    FLG2(R5),LCNT       IS OPERAND CONTINUATION REQUIRED?
         BNO   EDJCLXTN            NO, CHECK FOR CARD EXTENSION
         MVC   STYP(1,R1),STYP(R5) YES, COPY STATEMENT TYPE
         MVI   EDLNSHDW,X'04'      MAKE THE SLASHES GREEN
         MVI   EDLNSHDW+1,X'04'
         MVI   EDLNSHDW+2,X'23'    PREPARE FOR LABEL PRESENCE
         CLI   CTLLEN+2(R1),C' '   JCL LABEL PRESENT?
         BNE   EDSYNACT            YES, ERROR
         LA    R14,EDLNSHDW+2      ADJUST OUTPUT AREA POINTER
         LAE   R3,CTLLEN+2(,R1)    POINT TO CONTINUED DATA
         LA    R0,71-2             GET LENGTH OF REST OF LINE TO COLOUR
         IC    R6,PRND(,R5)        GET CURRENT NESTING LEVEL
         STC   R6,PRND(,R1)        SET CURRENT NESTING LEVEL
         B     EDSYNLP4            SCAN FOR OPERAND RESUMPTION
         SPACE
EDJCLERR MVI   EDLNSHDW,X'23'      SLASHES MISSING
         MVI   EDLNSHDW+1,X'23'
         B     EDSYNJCL
         SPACE
EDJCLXTN CLI   CTLLEN+71(R5),C' '  NON-BLANK IN PREVIOUS COLUMN 72?
         BE    EDNOTCNT            NO, JCL EXTENSION NOT NEEDED
         MVI   EDLNSHDW,X'04'      NO, MAKE THE SLASHES GREEN
         MVI   EDLNSHDW+1,X'04'
         TM    FLG2(R1),LQOT       NEED CONTINUATION OF QUOTED STRING?
         BNO   EDSYNACT            NO, ANYTHING ELSE IS A COMMENT
         MVC   STYP(1,R1),STYP(R5) YES, COPY STATEMENT TYPE
         B     EDJCLQOT            YES
         SPACE
EDJCLQOT MVI   EDLNSHDW+2,X'23'    PREPARE FOR CONTINUATION ERROR
         MVC   EDLNSHDW+3(12),EDLNSHDW+2
         CLI   CTLLEN+2(R1),C' '   ARE COLUMNS 3-15 BLANK?
         BNE   EDSYNACT            NO, ERROR
         CLC   CTLLEN+3(12,R1),CTLLEN+2(R1)
         BNE   EDSYNACT            NO, ERROR
         MVC   EDLNSHDW+2(13),EDLNSHDW+1
         LA    R14,EDLNSHDW+15     ADJUST OUTPUT AREA POINTER
         LA    R3,CTLLEN+15(,R1)   POINT TO CONTINUED DATA
         LA    R0,71-15            GET LENGTH OF REST OF LINE TO COLOUR
         OI    FLG2(R1),LQOT       WITHIN QUOTED STRING
         IC    R6,PRND(,R5)        GET CURRENT NESTING LEVEL
         STC   R6,PRND(,R1)        SET CURRENT NESTING LEVEL
         B     EDSYNLP5            RESUME OPERAND SCAN
         SPACE
*
*    SCAN FOR COMMENTS AND QUOTED STRINGS
*
EDCMTSCN LA    R3,CTLLEN(,R1)      POINT TO RECORD'S DATA
         LA    R14,EDLNSHDW        POINT TO ITS SHADOW
         LA    R0,80               GET COLUMNS TO COLOUR
         TM    EPNUM,1             SEQUENCE NUMBER PRESENT?
         BNO   *+8                 NO
         LA    R0,72               YES, DO NOT COLOUR IT
         CLI   EDFLG3,EDPLI        PL/I SOURCE?
         BNE   EDPLIOK1            NO
         MVC   0(80,R14),0(R3)     YES, COPY SOURCE TEXT
         TR    0(80,R14),EDPLITAB  CONVERT TO COLOUR CODES
         AR    R14,R0              POINT PAST RECORD DATA
         SH    R0,EDPLI2           GET COLUMNS PAST SOURCE END MARGIN
         BNP   EDPLIOK2            THERE ARE NONE
EDPLILP1 BCTR  R14,0               POINT TO PREVIOUS COLUMN
         MVI   0(R14),X'01'        SHOW COLUMN PAST SOURCE IN BLUE
         BCT   R0,EDPLILP1
EDPLIOK2 LH    R14,EDPLI1          GET COLUMNS BEFORE SOURCE
         LTR   R14,R14             ARE THERE ANY?
         BNP   EDPLIOK3            NO
         LR    R0,R14              YES, COPY THIS COUNT
         LA    R14,EDLNSHDW-1(R14) POINT TO LAST COLUMN BEFORE SOURCE
EDPLILP2 MVI   0(R14),X'01'        SHOW COLUMN BEFORE SOURCE IN BLUE
         BCTR  R14,0               POINT TO PREVIOUS COLUMN
         BCT   R0,EDPLILP2
EDPLIOK3 LA    R14,EDLNSHDW        POINT TO THE SHADOW LINE
         AH    R14,EDPLI1          POINT TO THE SOURCE START SHADOW
         AH    R3,EDPLI1           POINT TO THE SOURCE START
         LH    R0,EDPLI2
         SH    R0,EDPLI1           GET THE SOURCE COLUMNS TO PARSE
EDPLIOK1 NI    FLG1(R1),255-LNNB   RESET NON-COMMENT NON-BLANK FLAG
         TM    FLG1(R1),LTOP       IS RECORD A "TOP" LINE?
         BNO   EDLNNBOK            NO
         MVI   FLG2(R1),0          YES, RESET LINE SYNTAX STATUS FLAGS
         CLI   EDFLG3,EDASM        DATA TYPE ALREADY SET?
         BNL   EDLNNBOK            YES
         OI    FLG1(R1),LNNB       YES, NO NON-COMMENT TEXT YET
EDLNNBOK LR    R5,R1               POINT TO CURRENT RECORD
EDLNNPRV L     R5,BAK(,R5)         POINT TO PREVIOUS RECORD
         C     R5,TOPADDR          IS IT TOP OF DATA?
         BE    EDSTXTLP            YES, THERE IS NO PREVIOUS RECORD
         TM    FLG1(R5),LMSG       IS PREVIOUS LINE A MESSAGE LINE?
         BO    EDLNNPRV            YES, GO GET THE LINE BEFORE THAT
         CLC   ED_D_S,CTLLEN(R5)   IEBUPDTE/PDSLOAD/REVLMOD STATEMENT?
         BE    EDSTXTLP            YES, THERE IS NO PREVIOUS SOURCE
         CLC   ED_S_S,CTLLEN(R1)   IS THIS A A JCL STATEMENT?
         BE    EDSTXTLP            YES, THERE IS NO PREVIOUS SOURCE
         TM    FLG1(R5),LNNB+LTOP  ANY NON-BLANK NON-COMMENTS YET?
         BNO   *+8                 YES
         OI    FLG1(R1),LNNB+LTOP  NO, SOURCE TYPE NOT KNOWN YET
         CLI   EDFLG3,EDCLIST      IS IT A TSO CLIST?
         BE    EDSTXTLP            YES, IGNORE CARRY OVER
         MVC   FLG2(4,R1),FLG2(R5) COPY FLAGS AND STATEMENT STATUS
*        NI    FLG2(R1),255-???    RESET IRRELEVANT FLAGS
         IC    R6,PRND(,R5)        GET PARENTHESIS DEPTH
         TM    FLG2(R1),LCMT       INSIDE A COMMENT?
         BO    EDSCMTLP            YES
         TM    FLG2(R1),LQOT       INSIDE QUOTES?
         BO    EDSQOTLP            YES
         TM    FLG2(R1),LMAC       INSIDE A MACRO?
         BO    EDSMACLP            YES
         SPACE
EDSTXTLP CLI   0(R3),QUOTE         ENCOUNTERED A QUOTE?
         BE    EDSQOTLP            YES, SWITCH TO WHITE
         CLI   EDFLG3,EDPLI        PL/I SOURCE?
         BNE   EDEXPROC            NO
         CLI   0(R3),C'%'          MACRO STATEMENT?
         BE    EDSYNMAC            YES, PL/I PRE-PROCESSOR STATEMENT
EDEXPROC C     R0,EDFW1            MORE THAN ONE BYTE TO GO?
         BNH   EDSINTXT            NO, CANNOT START A COMMENT
         CLC   ED_S_A,0(R3)        ENCOUNTERED A SLASH-ASTERISK?
         BE    EDSNSACE            YES, SWITCH TO TURQUOISE
EDSINTXT CLI   0(R3),C'('          OPEN PARENTHESIS?
         BNE   EDSNTOPN            NO
         A     R6,EDFW1            INCREMENT NESTING DEPTH
         STC   R6,PRND(,R1)        SAVE CURRENT NESTING DEPTH
EDSNTOPN CLI   0(R3),C')'          CLOSE PARENTHESIS?
         BNE   EDSNTCLS
         S     R6,EDFW1            DECREMENT NESTING DEPTH
         STC   R6,PRND(,R1)        SAVE CURRENT NESTING DEPTH
         BNM   EDSNTCLS
         MVI   PRND(R1),0          RESET CURRENT NESTING DEPTH
         MVI   0(R14),X'23'        MORE CLOSES THAN OPENS
EDSNTCLS CLI   EDFLG3,EDPLI        PL/I SOURCE?
         BNE   EDSNTPLI            NO
         CLI   0(R3),C';'          END OF STATEMENT?
         BNE   EDWASBLU            NO, ALREADY HAVE SOURCE COLOUR
         CLI   PRND(R1),0          OUT OF ALL PARENTHESES?
         BE    EDWASBLU            YES, ALREADY HAVE SOURCE COLOUR
         MVI   0(R14),X'23'        NO, NOT ENOUGH CLOSES
         MVI   PRND(R1),0          RESET CURRENT NESTING DEPTH
         B     EDWASBLU            ALREADY HAVE SOURCE COLOUR
EDSNTPLI CLI   0(R3),C' '          FOUND A NON-BLANK NON-COMMENT?
         BE    EDTXTGRN            NO, IT'S A BLANK
         TM    FLG1(R1),LNNB       FIRST NON-COMMENT TEXT?
         BNO   EDTXTGRN            NO, ALREADY KNOW IF CLIST OR NOT
         NI    FLG1(R1),255-LNNB   YES, RESET FLAG
         C     R0,EDFW5            MORE THAN FIVE COLUMNS TO GO?
         BNH   EDTXTGRN            NO, SKIP IT
         CLC   EDPROC,0(R3)        FOUND 'PROC '?
         BE    EDSNPROC            YES
EDTXTGRN MVI   0(R14),X'04'        SHOW TEXT BYTE IN GREEN
EDWASBLU LA    R3,1(,R3)           POINT TO NEXT DATA BYTE
         LA    R14,1(,R14)         POINT TO NEXT SHADOW BYTE
EDSTXTNX BCT   R0,EDSTXTLP         CONTINUE SCAN
         B     EDSCNDON            SCAN COMPLETE
         SPACE
EDSYNMAC NI    FLG1(R1),255-LNNB   FOUND A NON-BLANK NON-COMMENT
         OI    FLG2(R1),LMAC       IN PL/I PRE-PROCESSOR STATEMENT
EDSMACLP CLI   0(R3),QUOTE         ENCOUNTERED A QUOTE?
         BE    EDSQOTLP            YES, SWITCH TO WHITE
         CLI   0(R3),C';'          END OF MACRO STATEMENT?
         BE    EDSEOMAC            YES
         C     R0,EDFW1            MORE THAN ONE BYTE TO GO?
         BNH   EDSINMAC            NO, CANNOT START A COMMENT
         CLC   ED_S_A,0(R3)        ENCOUNTERED A SLASH-ASTERISK?
         BE    EDSNSACE            YES, SWITCH TO TURQUOISE
EDSINMAC MVI   0(R14),X'01'        SHOW TEXT BYTE IN BLUE
         LA    R3,1(,R3)           POINT TO NEXT DATA BYTE
         LA    R14,1(,R14)         POINT TO NEXT SHADOW BYTE
EDSMACNX BCT   R0,EDSMACLP         CONTINUE SCAN
         B     EDSCNDON            SCAN COMPLETE
EDSEOMAC MVI   0(R14),X'01'        SHOW SEMICOLON IN BLUE
         NI    FLG2(R1),255-LMAC   END OF PRE-PROCESSOR STATEMENT
         B     EDWASBLU            SWITCH FROM BLUE TO GREEN
         SPACE
EDSNPROC MVI   0(R14),X'07'        SHOW 'PROC' IN WHITE
         MVC   1(3,R14),0(R14)
         MVI   4(R14),X'04'
         LA    R3,5(,R3)           POINT PAST IT
         LA    R14,5(,R14)
         S     R0,EDFW5            ADJUST REMAINING BYTE COUNTER
EDPROCLP CLI   0(R3),C' '          BLANK?
         BE    EDPRCGRN            YES
         CLI   0(R3),C'0'          NUMERIC?
         BL    EDEXPROC            NO, GO CHECK FOR COMMENT
         CLI   0(R3),C'9'          NUMERIC?
         BH    EDEXPROC            NO, GO CHECK FOR COMMENT
         MVI   EDFLG3,EDCLIST      YES, CLAIM IT IS A TSO CLIST
         B     EDTXTGRN            BACK TO NORMAL PROCESSING
EDPRCGRN MVI   0(R14),X'04'        SHOW TEXT BYTE IN GREEN
         LA    R3,1(,R3)           POINT TO NEXT DATA BYTE
         LA    R14,1(,R14)         POINT TO NEXT SHADOW BYTE
         BCT   R0,EDPROCLP         CONTINUE SCAN
         SPACE
EDSCNDON CLI   EDHITYP,0           SHOWING HIGHLIGHTING?
         BE    EDSYNOFF            NO, SO DON'T SHOW IT
         TM    FLG1(R1),LNNB       ANYTHING DETERMINATE YET?
         BO    EDSYNXIT            NO, LET IT GO THROUGH
         CLI   EDFLG3,0            ANY SOURCE TYPE DETECTED?
         BNE   EDSYNXIT            YES, SO SHOW IT
         XC    DYNTABLE,DYNTABLE   CLEAR TRANSLATE TABLE
         MVI   DYNTABLE+X'23',C'?' LOOK FOR A SYNTAX ERROR
         TRT   EDLNSHDW,DYNTABLE   ANY PRESENT?
         BZ    EDSYNXIT            NO, LET IT GO THROUGH
         B     EDSYNOFF            YES, BETTER SUPPRESS IT
         SPACE
EDSQOTLP MVI   0(R14),X'07'        SHOW QUOTED STRING IN WHITE
         CLI   0(R3),QUOTE         ENCOUNTERED A QUOTE?
         BNE   *+8                 NO
         XI    FLG2(R1),LQOT       YES, TOGGLE QUOTE FLAG
         LA    R3,1(,R3)           POINT TO NEXT DATA BYTE
         LA    R14,1(,R14)         POINT TO NEXT SHADOW BYTE
         TM    FLG2(R1),LQOT       STRING IN QUOTES?
         BNO   EDBLUGRN            NO, REVERT TO GREEN OR BLUE TEXT
         BCT   R0,EDSQOTLP         CONTINUE SCAN
         B     EDSCNDON            SCAN COMPLETE
EDBLUGRN TM    FLG2(R1),LMAC       INSIDE PRE-PROCESSOR STATEMENT?
         BNO   EDSTXTNX            NO, BACK TO GREEN
         B     EDSMACNX            YES, BACK TO BLUE
         SPACE
EDSNSACE OI    EDFLG2,E2SACE       SLASH-ASTERISK COMMENT ENCOUNTERED
EDSCMTLP MVI   0(R14),X'05'        SHOW COMMENTS IN TURQUOISE
         C     R0,EDFW1            MORE THAN ONE BYTE TO GO?
         BNH   EDSINCMT            NO, CANNOT END A COMMENT
         CLC   ED_A_S,0(R3)        ENCOUNTERED AN ASTERISK-SLASH?
         BE    EDSOTCMT            YES, LEAVE COMMENT
EDSINCMT LA    R3,1(,R3)           POINT TO NEXT DATA BYTE
         LA    R14,1(,R14)         POINT TO NEXT SHADOW BYTE
         BCT   R0,EDSCMTLP         CONTINUE SCAN
         OI    FLG2(R1),LCMT       FLAG INCOMPLETE COMMENT
         B     EDSCNDON            SCAN COMPLETE
EDSOTCMT MVI   1(R14),X'05'        COMPLETE THE TURQUOISE AREA
         LA    R3,2(,R3)           POINT PAST COMMENT DELIMITER
         LA    R14,2(,R14)         POINT PAST COMMENT SHADOW
         NI    FLG2(R1),255-LCMT   FLAG COMMENT COMPLETE
         S     R0,EDFW2            ADJUST BYTES TO GO
         BNP   EDSCNDON            SCAN COMPLETE
         TM    FLG2(R1),LMAC       INSIDE PRE-PROCESSOR STATEMENT?
         BNO   EDSTXTLP            NO, BACK TO GREENLAND
         B     EDSMACLP            YES, BACK TO BLUELAND
         SPACE
*
*    BEGIN JCL AND ASSEMBLER DATA PARSE
*
EDNOTCNT XC    EDSSTMTW,EDSSTMTW   RESET STATEMENT WORK AREA
         CLI   0(R3),C'*'          ASM COMMENT?
         BE    EDASMCMT            YES, CHECK FOR LEADING COMMENT
         CLC   ED_D_A,0(R3)        MACRO COMMENT?
         BE    EDASMCMT            YES, CHECK FOR LEADING COMMENT
         CLC   ED_S_S,0(R3)        JCL STATEMENT?
         BE    EDSYNLP1            YES, GO PROCESS THE LABEL
         TM    EDFLG2,E2SACE       ALREADY FOUND A '/*' COMMENT?
         BO    EDCMTSCN            YES, CANNOT BE ASSEMBLER
         CLC   ED_S_A,0(R3)        JECL OR DELIMITER?
         BNE   EDSYNLP1            NO
         CLI   2(R3),C' '          DELIMITER?
         BNE   EDSYNLP1            NO, JECL
         MVI   EDLNSHDW,X'04'      YES, SHOW IT IN GREEN
         MVI   EDLNSHDW+1,X'04'
         B     EDSYNACT
         SPACE
EDSYNLP1 CLI   0(R3),C' '          LABEL PROCESSED?
         BE    EDSNLBCK            YES, CHECK LABEL BEFORE PROCEEDING
         MVC   0(1,R14),0(R3)      NO, COPY LABEL TEXT BYTE
         LA    R4,EDJCLTAB         POINT TO JCL CHARACTER COLOUR CODES
         CLC   ED_S_S,CTLLEN(R1)   JCL STATEMENT?
         BE    EDSYNLBL            YES
         CLC   ED_S_A,CTLLEN(R1)   JECL STATEMENT?
         BE    EDSYNLBL            YES
         LA    R4,EDASMTAB         NO, USE CODES FOR ASSEMBLER
EDSYNLBL TR    0(1,R14),0(R4)      CONVERT TO COLOUR CODE
         CLI   0(R14),X'04'        SET TO GREEN?
         BE    EDSYNLOK            YES, LOOKS GOOD
         CLI   0(R3),X'50'         AMPERSAND?
         BNE   EDSYNLBD            NO, LOOKS BAD
         CLI   1(R3),C' '          TRAILING AMPERSAND?
         BNE   EDSYNLOK            NO, PROBABLY VALID
EDSYNLBD MVI   0(R14),X'23'        INVALID
EDSYNLOK LA    R3,1(,R3)           POINT TO NEXT DATA BYTE
         LA    R14,1(,R14)         POINT TO NEXT SHADOW BYTE
         BCT   R0,EDSYNLP1         CONTINUE SCANNING LABEL
         B     EDSYNACT            END OF LINE REACHED
         SPACE
*
*    CHECK ASSEMBLER LABEL SYNTAX
*
EDSNLBCK CLI   CTLLEN(R1),C'0'     DOES LABEL START WITH A NUMERIC?
         BL    *+8                 NO
         MVI   EDLNSHDW,X'23'      YES, INVALID
         CLC   ED_S_S,CTLLEN(R1)   IS THIS LINE JCL?
         BE    SYNQALBL            YES, PERFORM LABEL QUALIFIER CHECK
         CLC   ED_S_A,CTLLEN(R1)   IS THIS LINE JCL?
         BNE   EDSYNLP2            NO, PROCEED
         SPACE
*
*    CHECK JCL STATEMENT LABEL SYNTAX - LABEL OR STEPNAME.LABEL
*
SYNQALBL LAE   R5,CTLLEN+2(,R1)    POINT TO START OF JCL LABEL
         LA    R4,EDLNSHDW+2       POINT TO ITS SHADOW
         LR    R15,R5              POINT TO SIMPLE NAME START
SYNJLBLP CR    R5,R15              START OF SIMPLE NAME?
         BNE   SYNJLCHR            NO, EXAMINE CHARACTER
         CLI   0(R5),C'0'          SIMPLE NAME STARTS WITH A NUMERIC?
         BNL   SYNJLBAD            YES, INVALID
         CLI   0(R5),C'.'          SIMPLE NAME STARTS WITH A PERIOD?
         BE    SYNJLBAD            YES, INVALID
         CR    R5,R3               END OF LABEL?
         BNL   SYNJLBAD            YES, INVALID
SYNJLCHR CR    R5,R3               END OF LABEL?
         BNL   SYNJLEND            YES, LEAVE SYNJLBLP LOOP
         CLI   0(R5),C'.'          END OF STEP NAME?
         BNE   SYNJLNXT            NO, JUST ANOTHER PIECE OF LABEL
         CLI   1(R5),C' '          TRAILING PERIOD?
         BE    SYNJLBAD            YES, INVALID
         CLC   ED_S_A,CTLLEN(R1)   JECL STATEMENT?
         BE    SYNJLBAD            YES, INVALID
         TM    EDSYNFLG,EDSDIL     ALREADY HAD A DOT-IN-LABEL?
         BO    SYNJLBAD            YES, CAN ONLY HAVE ONE OR NONE
         OI    EDSYNFLG,EDSDIL     NO, HAD ONE NOW
         LR    R15,R4              POINT TO THE PERIOD SHADOW
         LA    R2,EDLNSHDW         POINT TO THE LINE SHADOW START
         SR    R15,R2              GET PERIOD DATA OFFSET
         STC   R15,EDDOTLOC        SAVE IT
         LA    R15,1(,R5)          POINT PAST PERIOD
SYNJLNXT LR    R2,R5               POINT TO CURRENT CHARACTER
         SR    R2,R15              GET LENGTH CODE OF STEP OR LABEL
         C     R2,EDFW8            STEP OR LABEL TOO LONG?
         BNL   SYNJLBAD            YES, INVALID
         LA    R5,1(,R5)           POINT TO NEXT LABEL CHARACTER
         LA    R4,1(,R4)           POINT TO NEXT CHARACTER'S SHADOW
         B     SYNJLBLP
         SPACE
JCLLBTRT TRT   0(0,R5),EDJLBLTB    <<< EXECUTED >>>
         SPACE
SYNJLEND LA    R5,CTLLEN+2(,R1)    POINT TO START OF THE LABEL
         LR    R15,R3              POINT PAST LABEL
         SR    R15,R5              GET THE LENGTH OF THE LABEL
         LR    R7,R1               SAVE CURRENT RECORD POINTER
         BCTR  R15,0               DECREMENT FOR EXECUTE
         EX    R15,JCLLBTRT        ANY INVALID CHARACTERS?
         BZ    EDSYNLP2            NO
         SR    R1,R5               GET THE BAD CHARACTER OFFSET
         LA    R4,EDLNSHDW+2(R1)   POINT TO BAD CHARACTER'S SHADOW
         LR    R1,R7               RESTORE CURRENT RECORD POINTER
SYNJLBAD MVI   0(R4),X'23'         FLAG BAD SYNTAX
         SPACE
*
*    SCAN FOR THE VERB
*
EDSYNLP2 CLI   0(R3),C' '          FOUND VERB YET?
         BNE   EDSNVRB1            YES
         MVI   0(R14),X'04'        NO, GREEN UNTIL VERB
         LA    R3,1(,R3)           POINT TO NEXT DATA BYTE
         LA    R14,1(,R14)         POINT TO NEXT SHADOW BYTE
         BCT   R0,EDSYNLP2         CONTINUE SCANNING FOR VERB
         CLI   CTLLEN(R1),C' '     IS WHOLE LINE BLANK?
         BNE   EDSYNACT            NO, END OF RECORD REACHED
         SPACE
*
*    PROCESS BLANK LINES AND ASSEMBLER AND MACRO COMMENTS
*
EDASMCMT TM    FLG1(R1),LTOP       IS THIS A "TOP" LINE?
         BNO   EDSYNACT            NO, HAVE LINE COLOUR
         CLI   EDFLG3,EDASM        DATA TYPE ALREADY SET?
         BNL   EDSYNACT            YES, HAVE LINE COLOUR
         OI    FLG1(R1),LNNB       YES, NO NON-BLANK NON-COMMENTS YET
         B     EDSYNACT            HAVE LINE COLOUR
         SPACE
*
*    PROCESS THE VERB
*
EDSNVRB1 CLC   ED_S_A,CTLLEN(R1)   JECL?
         BE    EDSYNLP5            YES, RED VERB NOT APPROPRIATE
         ST    R3,EDSYNWRK         SAVE VERB START ADDRESS
         ST    R14,EDSYNWRK+4      SAVE VERB START SHADOW ADDRESS
EDSYNLP3 CLI   0(R3),C' '          FOUND END OF VERB YET?
         BE    EDSNVRB2            YES
         MVI   0(R14),X'02'        NO, COLOUR IT RED
         CLC   ED_S_S,CTLLEN(R1)   JCL STATEMENT?
         BE    EDVRB1OK            YES, VALIDATE LATER AGAINST LIST
         MVC   0(1,R14),0(R3)      COPY VERB TEXT BYTE
         CLI   0(R3),X'50'         AMPERSAND?
         BNE   *+8                 NO
         MVI   0(R14),C'A'         YES, SUPPRESS ERROR INDICATION
         LA    R4,EDASMTAB         USE CODES FOR ASSEMBLER
         TR    0(1,R14),0(R4)      CONVERT TO COLOUR CODE
         CLI   0(R14),X'04'        SET TO GREEN?
         MVI   0(R14),X'02'        SET TO RED FOR VERB
         BE    *+8                 YES, VERB CHARACTER IS NOW RED
         MVI   0(R14),X'23'        NO, INVALID
         C     R3,EDSYNWRK         FIRST CHARACTER OF VERB NAME?
         BNE   EDVRB1OK            NO
         CLI   0(R3),C'0'          DOES VERB NAME START WITH NUMERIC?
         BL    EDVRB1OK            NO
         MVI   0(R14),X'23'        YES, INVALID
         TM    FLG1(R1),LTOP       IS RECORD A "TOP" LINE?
         BNO   EDVRB1OK            NO
         CLI   0(R3),C'9'          DOES VERB NAME START WITH NUMERIC?
         BH    EDVRB1OK            NO
         CLC   EDPROC,CTLLEN(R1)   IS THIS A CLIST PROC STATEMENT?
         BNE   EDVRB1OK            NO
         MVI   EDFLG3,0            YES, RESET ASSEMBLER SOURCE FLAG
         B     EDCMTSCN            GO COLOUR THE PROC STATEMENT
EDVRB1OK LA    R3,1(,R3)           POINT TO NEXT DATA BYTE
         LA    R14,1(,R14)         POINT TO NEXT SHADOW BYTE
         BCT   R0,EDSYNLP3         CONTINUE SCANNING VERB
         B     EDSYNACT            END OF LINE REACHED
         SPACE
EDSNVRB2 LR    R15,R3              POINT PAST VERB
         L     R5,EDSYNWRK         POINT TO VERB
         SR    R15,R5              GET VERB TEXT LENGTH
         SPACE
*
*    TRAP NON-ASSEMBLER COMMENTS TO DETECT NON-ASSEMBLER SOURCE
*
         CLI   EDFLG3,0            SOURCE TYPE DECIDED YET?
         BNE   EDJCLTYP            YES, PROCEED
         C     R15,EDFW2           IS VERB MORE THAN ONE BYTE LONG?
         BL    EDJCLTYP            NO, PROCEED
         CLC   ED_S_A,0(R5)        DOES IT START WITH '/*'?
         BE    EDCMTSCN            YES, GO COLOUR THE COMMENT
         SPACE
*
*    DETERMINE THE JCL STATEMENT TYPE
*
EDJCLTYP CLC   ED_S_S,CTLLEN(R1)   JCL STATEMENT?
         BNE   EDSNTPCK            NO, GO CHECK FOR TOP OF SOURCE
         MVI   STYP(R1),0          YES, RESET STATEMENT TYPE
         LA    R2,EDVRBJCL         POINT TO JCL VERB TABLE
         SR    R7,R7               CLEAR STATEMENT TYPE
EDSNJVLP CLI   0(R2),X'FF'         REACHED END OF TABLE?
         BE    EDSNJVBD            YES, JCL VERB IS BAD
         LA    R7,1(,R7)           INCREMENT STATEMENT TYPE
         CLM   R15,1,0(R2)         RIGHT LENGTH FOR THIS ENTRY?
         BNE   EDSNJVNX            NO
         EX    R15,EDVRBTST        IS IT A MATCH?
         BE    EDSNJVOK            YES, VALID JCL VERB
EDSNJVNX LA    R2,10(,R2)          POINT TO THE NEXT ENTRY
         B     EDSNJVLP            GO CHECK THE NEXT ENTRY
EDSNJVOK STC   R7,STYP(,R1)        SET JCL STATEMENT TYPE
         LA    R7,X'02'            RED FOR VERB
         CLI   OSBITS,X'9B'        MODERN MVS-TYPE OS?
         BE    EDSNJVCL            YES, GO COLOUR JCL VERB
         CLI   STYP(R1),4          DD, JOB, EXEC OR PROC?
         BNH   EDSNJVCL            YES, GO COLOUR JCL VERB
         CLI   STYP(R1),PENDTYPE   PEND?
         BE    EDSNJVCL            YES, GO COLOUR JCL VERB
         LA    R7,X'03'            USE PINK TO SHOW NO GOOD HERE
         B     EDSNJVCL            GO COLOUR JCL VERB
EDSNJVBD LA    R7,X'23'            REVERSE PINK FOR ERROR
EDSNJVCL L     R2,EDSYNWRK+4       POINT TO SHADOW OF VERB
         STC   R7,0(,R2)           SET FIRST COLOUR CODE
         LR    R7,R15              COPY VERB LENGTH
         S     R7,EDFW2            GET LENGTH CODE TO PROPAGATE
         BM    EDASRCOK            SINGLE BYTE VERB SO ALL DONE
         EX    R7,ECLRJCLV         COLOUR THE WHOLE VERB
         TM    EDSYNFLG,EDSDIL     WAS THERE A DOT-IN-LABEL?
         BNO   EDASRCOK            NO
         SR    R7,R7
         IC    R7,EDDOTLOC         GET OFFSET OF PERIOD
         MVI   EDDOTLOC,0          CLEAR FOR LATER USE
         CLI   STYP(R1),1          JOB STATEMENT?
         BNE   EDASRCOK            NO, ASSUME LABEL CAN HAVE PERIOD
         LA    R7,EDLNSHDW(R7)     POINT TO ITS SHADOW
         MVI   0(R7),X'23'         FLAG INVALID PERIOD IN JOB NAME
         B     EDASRCOK
ECLRJCLV MVC   1(0,R2),0(R2)       <<< EXECUTED >>>
         SPACE
*
*    DETERMINE IF THIS IS THE START OF ASSEMBLER SOURCE
*
EDSNTPCK TM    FLG1(R1),LTOP       IS RECORD A "TOP" LINE?
         BNO   EDASRCOK            NO, NOT START OF SOURCE CODE
         CLI   EDFLG3,0            SOURCE TYPE DECIDED YET?
         BNE   EDASRCOK            YES, CONTINUE
         CLI   CTLLEN(R1),C'/'     DATA STARTS WITH SOME SORT OF JCL?
         BE    EDASRCOK            MAYBE, BUT IT ISN'T ASSEMBLER
         C     R15,EDFW5           IS THE FIRST VERB 5 BYTES LONG?
         BNE   EDASRCOK            NO, PROBABLY NOT ASSEMBLER
         LA    R7,CTLLEN+9(,R1)    GET ADDRESS OF COLUMN 10
         LA    R2,EDASRCTB         YES, POINT TO CANDIDATE TABLE
         CR    R5,R7               IS VERB IN COLUMN 10?
         BNE   EDASRCLP            NO, USE "RIGOROUS" TABLE
         LA    R2,EDASRCXT         YES, USE "EXTENDED" TABLE
EDASRCLP CLI   0(R2),X'FF'         REACHED END OF TABLE?
         BE    EDASRCOK            YES, DID NOT RECOGNIZE ASSEMBLER
         CLC   0(5,R2),0(R5)       RECOGNISED ASSEMBLER?
         BE    EDASRCON            YES
         LA    R2,5(,R2)           NO, POINT TO NEXT ENTRY
         B     EDASRCLP            GO CHECK IT
         SPACE
EDASRCON MVI   EDFLG3,EDASM        EDITING ASSEMBLER SOURCE DATA
         SPACE
*
*    DETERMINE IF ANY OPERANDS ARE APPROPRIATE
*
EDASRCOK CL    R15,EDFW8           LONGER THAN EXPECTED?
         BH    EDSYNLP4            YES, ASSUME OPERAND NEEDED
         LA    R2,EDVRBTB1         POINT TO JCL TABLE
         CLC   ED_S_S,CTLLEN(R1)   JCL STATEMENT?
         BE    EDSNVBLP            YES, HAVE RIGHT TABLE
         LA    R2,EDVRBTB2         NO, POINT TO ASM TABLE
EDSNVBLP CLI   0(R2),X'FF'         REACHED END OF TABLE?
         BE    EDSYNLP4            YES, PROCEED AS USUAL
         CLM   R15,1,0(R2)         RIGHT LENGTH FOR THIS ENTRY?
         BNE   EDSNVBNX            NO
         EX    R15,EDVRBTST        MATCHING ENTRY?
         BE    EDSYNACT            YES, REST OF LINE IS COMMENTS
EDSNVBNX LA    R2,10(,R2)          POINT TO NEXT TABLE ENTRY
         B     EDSNVBLP
EDVRBTST CLC   1(0,R2),0(R5)       <<< EXECUTED >>>
         SPACE
*
*    SCAN FOR OPERANDS
*
EDSYNLP4 CLI   0(R3),C' '          FOUND OPERAND YET?
         BNE   EDSYNLP5            YES
         MVI   0(R14),X'04'        NO, GREEN UNTIL OPERAND
         LA    R3,1(,R3)           POINT TO NEXT DATA BYTE
         LA    R14,1(,R14)         POINT TO NEXT SHADOW BYTE
         BCT   R0,EDSYNLP4         CONTINUE SCANNING FOR OPERAND
         B     EDSYNACT            END OF LINE REACHED
         SPACE
*
*    PROCESS OPERANDS
*
EDSYNLP5 TM    FLG2(R1),LQOT       WITHIN QUOTED TEXT?
         BO    EDSYNQT1            YES
         CLC   ED_S_A,CTLLEN(R1)   JECL?
         BE    EDSYNDO5            YES, ASSUME NO COMMENTS
         CLI   0(R3),C' '          FOUND END OF OPERAND YET?
         BNE   EDSYNDO5            NO
         LTR   R6,R6               ANY CLOSES REQUIRED?
         BNP   EDSYNACT            NO, FOUND END OF OPERAND
         TM    FLG2(R1),LLOG       LOGICAL EXPRESSION WITH BLANKS?
         BO    EDSYNDO5            YES
         L     R5,EDSYNWRK         POINT TO VERB
         C     R15,EDFW3           IS VERB LENGTH 3?
         BNE   EDSYNSET            NO
         CLC   EDSNAIF,0(R5)       AIF STATEMENT?
         BE    EDSYNLOG            YES, STILL WITHIN LOGICAL EXPRESSION
         CLC   EDSNAGO,0(R5)       AGO STATEMENT?
         BE    EDSYNLOG            YES, STILL WITHIN LOGICAL EXPRESSION
         B     EDSYNMCE            MIGHT BE A MISSING CLOSE ERROR
EDSYNSET C     R15,EDFW4           IS VERB LENGTH 4?
         BNE   EDSYNMCE            NO, MIGHT BE A MISSING CLOSE ERROR
         CLC   EDSNSETA,0(R5)      SET STATEMENT?
         BH    EDSYNMCE            NO, MIGHT BE A MISSING CLOSE ERROR
         CLC   EDSNSETC,0(R5)      SET STATEMENT?
         BNL   EDSYNLOG            YES, STILL WITHIN LOGICAL EXPRESSION
         SPACE
EDSYNMCE TM    FLG2(R1),LCNT       IS CONTINUATION POSSIBLE?
         BNO   EDSYNERR            NO, IT IS AN ERROR
         CLC   ED_S_S,CTLLEN(R1)   JCL?
         BE    EDSYNACT            YES, DO NOT FLAG ERROR ON THIS LINE
         CLI   CTLLEN+71(R1),C' '  ASSEMBLER CONTINUATION EXPECTED?
         BNE   EDSYNACT            YES, DO NOT FLAG ERROR ON THIS LINE
EDSYNERR MVI   0(R14),X'23'        FLAG ERROR
         B     EDSYNACT
         SPACE
EDSYNLOG OI    FLG2(R1),LLOG       BLANKS ALLOWED IN LOGICAL EXPRESSION
EDSYNDO5 MVC   0(1,R14),0(R3)      NO, COPY OPERAND TEXT BYTE
         LA    R4,EDJCLTAB         POINT TO JCL CHARACTER COLOUR CODES
         CLC   ED_S_S,CTLLEN(R1)   JCL STATEMENT?
         BE    *+8                 YES
         LA    R4,EDASMTAB         NO, USE CODES FOR ASSEMBLER
         TR    0(1,R14),0(R4)      CONVERT TO COLOUR CODE
         CLI   0(R3),C'('          OPEN PARENTHESIS?
         BE    EDSYNOPN            YES
         CLI   0(R3),C')'          CLOSE PARENTHESIS?
         BE    EDSYNCLS            YES
         CLI   0(R3),C','          COMMA?
         BE    EDSYNCMA            YES
         CLI   0(R3),QUOTE         QUOTE?
         BE    EDSYNQT0            YES
EDSYNNX5 LA    R3,1(,R3)           POINT TO NEXT DATA BYTE
         LA    R14,1(,R14)         POINT TO NEXT SHADOW BYTE
         BCT   R0,EDSYNLP5         CONTINUE SCANNING FOR OPERAND
         CLC   ED_S_S,CTLLEN(R1)   JCL STATEMENT?
         BE    EDSYNACT            YES, END OF LINE REACHED
         TM    FLG2(R1),LLOG       MACRO LOGICAL EXPRESSION ALLOWED?
         BNO   EDNOTLOG            NO
         CLI   PRND(R1),0          INSIDE ANY PARENTHESES?
         BE    EDNOTLOG            NO
         OI    FLG2(R1),LCNT       YES, NEED A CONTINUATION
EDNOTLOG CLI   0(R3),C' '          IS CONTINUATION MANDATED?
         BE    *+8                 NO
         OI    FLG2(R1),LCNT       YES
         TM    FLG2(R1),LQOT+LCNT  IS CONTINUATION REQUIRED?
         BZ    EDSYNACT            NO, END OF LINE REACHED
         CLI   0(R3),C' '          YES, IS IT THERE?
         BNE   EDSYNACT            YES, END OF LINE REACHED
         MVI   EDLNSHDW+71,X'23'   NO, MISSING CONTINUATION
         B     EDSYNACT            END OF LINE REACHED
         SPACE
EDSYNOPN A     R6,EDFW1            INCREMENT NESTING DEPTH
         STC   R6,PRND(,R1)        SAVE CURRENT NESTING DEPTH
         B     EDSYNNX5
         SPACE
EDSYNCLS S     R6,EDFW1            DECREMENT NESTING DEPTH
         STC   R6,PRND(,R1)        SAVE CURRENT NESTING DEPTH
         BNM   EDSYNNX5
         MVI   PRND(R1),0          RESET CURRENT NESTING DEPTH
         MVI   0(R14),X'23'        MORE CLOSES THAN OPENS
         B     EDSYNNX5
         SPACE
EDSYNCMA C     R0,EDFW1            COMMA IN COLUMN 71?
         BE    EDSYNC71            YES
         CLI   1(R3),C' '          FOLLOWED BY A BLANK?
         BNE   EDSYNNX5            NO, PROCEED
EDSYNC71 OI    FLG2(R1),LCNT       FLAG CONTINUATION NEEDED
         B     EDSYNNX5
         SPACE
EDSYNQT0 CLC   ED_S_S,CTLLEN(R1)   JCL STATEMENT?
         BE    EDSYNQTX            YES, START QUOTING
         LR    R5,R3               NO, POINT TO THIS QUOTE
         BCTR  R5,0                BACK UP A BYTE
         CLI   0(R5),C'L'          LENGTH ATTRIBUTE?
         BE    EDSYNNX5            YES, NO QUOTING
         CLI   0(R5),C'N'          NUMBER ATTRIBUTE?
         BE    EDSYNNX5            YES, NO QUOTING
         CLI   0(R5),C'T'          TYPE ATTRIBUTE?
         BE    EDSYNNX5            YES, NO QUOTING
         CLI   0(R5),C'K'          COUNT ATTRIBUTE?
         BE    EDSYNNX5            YES, NO QUOTING
         CLI   0(R5),C'S'          SCALING ATTRIBUTE?
         BE    EDSYNNX5            YES, NO QUOTING
         CLI   0(R5),C'I'          INTEGER ATTRIBUTE?
         BE    EDSYNNX5            YES, NO QUOTING
EDSYNQTX OI    FLG2(R1),LQOT       SET QUOTING STATUS
         MVI   0(R14),X'07'        SHOW QUOTED STRING IN WHITE
         B     EDSYNNX5
         SPACE
EDSYNQT1 MVI   0(R14),X'07'        SHOW QUOTED STRING IN WHITE
         CLI   0(R3),QUOTE         IS THIS CHARACTER A QUOTE?
         BNE   EDSYNNX5            NO, CONTINUE
         NI    FLG2(R1),255-LQOT   RESET QUOTING STATUS
         B     EDSYNNX5
         SPACE
EDBDACNT MVI   0(R14),X'23'        BAD ASSEMBLER CONTINUATION
         MVC   1(14,R14),0(R14)    NON-BLANK FOUND IN FIRST 15 COLS
         SPACE
EDSYNACT CLC   ED_S_S,CTLLEN(R1)   JCL STATEMENT?
         BE    EDSYNJCL            YES
         CLC   ED_S_A,CTLLEN(R1)   JCL STATEMENT?
         BE    EDSYNJCL            YES
         CLI   EDHITYP,EDJCL       HIGHLIGHTING TO BE SHOWN?
         BNH   EDSYNOFF            NO
         CLI   EDFLG3,EDASM        SHOWING ASSEMBLER SOURCE?
         BE    EDSYNXIT            YES, SHOW IT
         TM    FLG1(R1),LTOP       IS RECORD A "TOP" LINE?
         BNO   EDSYNOFF            NO, SUPPRESS HIGHLIGHTING
         CLI   CTLLEN(R1),C'*'     ASM COMMENT?
         BE    EDSYNXIT            MAYBE, COLOUR AS SUCH ANYWAY
         CLC   ED_D_A,CTLLEN(R1)   MACRO COMMENT?
         BE    EDSYNXIT            MAYBE, COLOUR AS SUCH ANYWAY
         B     EDCMTSCN            TRY FOR COMMENTS AND STRINGS
         SPACE
EDSYNJCL CLI   EDHITYP,0           HIGHLIGHTING TO BE SHOWN?
         BE    EDSYNOFF            NO
         CLI   EDHITYP,EDAUTO      HIGHLIGHTING TO BE SHOWN?
         BH    EDSYNOFF            NO
         CLI   EDDEVTYP,0          PERFORM EXTENDED CHECKING?
         BNE   EDSYNXIT            NO, NOBODY IS INTERESTED
         CLI   STYP(R1),1          'JOB' JCL STATEMENT?
         BE    EDRGNCHK            YES
         CLI   STYP(R1),2          'EXEC' JCL STATEMENT?
         BE    EDRGNCHK            YES
         CLI   STYP(R1),3          'DD' JCL STATEMENT?
         BE    EDDSNCHK            YES
         CLI   STYP(R1),5          'IF' JCL STATEMENT?
         BNE   EDSYNXIT            NO
         LTR   R0,R0               ANY COLUMNS LEFT?
         BNP   EDSYNXIT            NO
EDTHENLP MVI   0(R14),X'04'        GREEN FOR IF CLAUSE
         CLC   EDSNTHEN,0(R3)      FOUND 'THEN' ?
         BE    EDGTTHEN            YES
         LA    R3,1(,R3)           NO
         LA    R14,1(,R14)
         BCT   R0,EDTHENLP         KEEP LOOKING FOR 'THEN'
         OI    FLG2(R1),LCNT       'THEN' THERE SO LINE IS CONTINUED
         B     EDSYNXIT            YES
EDGTTHEN MVC   1(3,R14),0(R14)     SHOW 'THEN' IN GREEN
         B     EDSYNXIT            YES
         SPACE
EDRGNCHK LAE   R3,CTLLEN+8(,R1)    GET STARTING POSITION
         LA    R0,55               GET NUMBER OF COLUMNS TO SEARCH
         LA    R15,EDSYNXIT        SET EDRGNERR EXIT-TO ADDRESS
EDRGNLP1 CLC   EDRGNEQL,0(R3)      FOUND 'REGION='?
         BE    EDRGNFND            YES
         LA    R3,1(,R3)           NO, POINT TO NEXT COLUMN
         BCT   R0,EDRGNLP1
         B     EDSYNXIT            NOT FOUND
EDRGNFND LA    R3,L'EDRGNEQL(,R3)  POINT PAST IT
         SR    R2,R2               RESET LENGTH COUNTER
         LR    R5,R3               POINT TO THE START
         MVI   EDSYNWRK,X'23'      SET CODE TO FLAG ERROR
EDRGNLP2 CLI   0(R5),C' '          END OF DATA?
         BE    EDRGNGTL            YES, GOT ITS LENGTH
         CLI   0(R5),C','          END OF VALUE?
         BE    EDRGNGTL            YES, GOT ITS LENGTH
         CLI   0(R5),C'K'          END OF DATA?
         BE    EDRGNKIL            YES, GOT ITS LENGTH
         CLI   0(R5),C'M'          END OF DATA?
         BE    EDRGNMEG            YES, GOT ITS LENGTH
         CLI   0(R5),C'0'          NUMERIC?
         BL    EDRGNERR            NO, ERROR
         CLI   0(R5),C'9'          NUMERIC?
         BH    EDRGNERR            NO, ERROR
         LA    R5,1(,R5)           POINT TO NEXT COLUMN
         LA    R2,1(,R2)           INCREMENT LENGTH OF NUMBER
         B     EDRGNLP2
EDRGNPAK PACK  DOUBLE,0(0,R3)      <<< EXECUTED >>>
EDRGNPNK MVC   1(0,R3),0(R3)       <<< EXECUTED >>>
EDRGNMEG MVI   EDSYNWRK+1,C'M'     REMEMBER THAT 'M' WAS SPECIFIED
**       TM    OSBITS,X'80'        31-BIT ADDRESSING SUPPORTED?
**       BO    EDRGNKIL            YES
**       LTR   R2,R2               ANY NUMERICS?
**       BZ    EDRGNERR            NO, ERROR
**       MVI   EDSYNWRK,X'03'      YES, FLAG VALID BUT NOT HERE
**       LR    R3,R5               POINT TO THE 'M'
**       LNR   R2,R2               JUST HIGHLIGHT THE "'M'"
**       B     EDRGNERR            ** USERMOD ALLOWS M IN MVS/370
EDRGNKIL CLI   1(R5),C' '          END OF DATA FOLLOWS?
         BE    EDRGNGTL            YES, GOOD
         CLI   1(R5),C','          END OF VALUE FOLLOWS?
         BE    EDRGNGTL            YES, GOOD
         LA    R3,1(,R5)           NO, POINT TO BAD SYNTAX
         LNR   R2,R2
         B     EDRGNERR
EDRGNGTL C     R2,EDFW8            TOO MANY NUMERICS?
         BNL   EDRGNTST            YES
         LTR   R2,R2               ANY NUMERICS?
         BP    EDRGNTST            YES
         CLI   0(R3),C' '          END OF DATA?
         BE    EDSYNXIT            YES
         CLI   0(R3),C','          END OF VALUE?
         BE    EDSYNXIT            YES
EDRGNERR LA    R0,CTLLEN(,R1)
         SR    R3,R0               GET OFFSET INTO RECORD
         LAE   R3,EDLNSHDW(R3)     GET ITS SHADOW
         TM    0(R3),X'05'         IN QUOTED STRING OR COMMENT?
         BOR   R15                 YES, DO NOT ALTER HIGHLIGHTING
         MVC   0(1,R3),EDSYNWRK    FLAG JCL ERROR
         LTR   R2,R2               ANY BYTES TO FOLLOW SUIT?
         BNPR  R15                 NO
         BCTR  R2,0                DECREMENT FOR EXECUTE
         EX    R2,EDRGNPNK         YES, SPREAD THE NEWS
         BR    R15                 NO
EDRGNTST BCTR  R2,0                DECREMENT FOR EXECUTE
         EX    R2,EDRGNPAK         GET THE DECIMAL REGION SIZE
         LA    R2,1(,R2)           CONVERT LENGTH CODE BACK TO LENGTH
         MVI   EDSYNWRK,X'23'      FLAG NOT VALID ANYWHERE
         CLI   EDSYNWRK+1,C'M'     WAS 'M' SPECIFIED?
         BE    EDMEGTST            YES
         CP    DOUBLE,EDRGNKLM     IS IT TOO BIG?
         BH    EDRGNERR            YES
         TM    OSBITS,X'80'        31-BIT ADDRESSING SUPPORTED?
         BO    EDSYNXIT            YES, NOT TOO BIG
         CP    DOUBLE,EDDEC16K     IS IT TOO BIG FOR MVS/370?
         BL    EDSYNXIT            NO, EVERYTHING IS FINE
         MVI   EDSYNWRK,X'03'      YES, FLAG VALID BUT NOT HERE
         B     EDRGNERR
EDMEGTST CP    DOUBLE,EDRGNMLM     IS IT TOO BIG?
         BH    EDRGNERR            YES
         B     EDSYNXIT            NO, EVERYTHING IS FINE
         SPACE
EDDSNCHK LAE   R3,CTLLEN+3(,R1)    GET STARTING POSITION
         LAE   R14,EDLNSHDW+3      GET STARTING POSITION SHADOW
         LA    R0,64               GET NUMBER OF COLUMNS TO SEARCH
EDDSNLP1 CLC   EDDSNEQL,0(R3)      FOUND 'DSN='?
         BE    EDDSNFND            YES
         CLC   EDDSNMEQ,0(R3)      FOUND 'DSNAME='?
         BE    EDDSNAMF            YES
         LA    R3,1(,R3)           NO, POINT TO NEXT COLUMN
         LA    R14,1(,R14)
         BCT   R0,EDDSNLP1
         B     EDSERCHK            NOT FOUND
EDDSNAMF LA    R3,L'EDDSNMEQ-L'EDDSNEQL(,R3)
         LA    R14,L'EDDSNMEQ-L'EDDSNEQL(,R14)
EDDSNFND LA    R3,L'EDDSNEQL(,R3)  POINT PAST IT
         LA    R14,L'EDDSNEQL(,R14)
         SR    R2,R2               RESET LENGTH COUNTER
         MVI   EDLOCDSN,C' '
         MVC   EDLOCDSN+1(43),EDLOCDSN
         LA    R4,EDLOCDSN
         ST    R3,SBASAVE          SAVE DSNAME START ADDRESS
EDDSNLP2 CLI   0(R3),C' '          END OF DATA?
         BNH   EDDSNVAL            YES
         CLC   EDSYSUID,0(R3)      &SYSUID?
         BNE   EDNOTUID            NO
         LAM   A15,A15,EDZEROS     ZERO ACCESS REGISTER
         L     R15,REVPSCB         YES, POINT TO PSCB
         USING PSCB,R15
         MVC   0(7,R4),PSCBUSER    LOAD IN THE USER ID
         SR    R0,R0
         IC    R0,PSCBUSRL         LOAD THE USER ID LENGTH
         CLI   PSCBUSER,C'>'       8-CHARACTER USERID?
         BNE   EDGOTUID            NO
         MVC   0(8,R4),PSCB+84     LOAD IN PSCBUID8
         LA    R0,8                LOAD THE USER ID LENGTH
         DROP  R15                 PSCB
EDGOTUID AR    R2,R0               ADJUST LENGTH
         AR    R4,R0               POINT PAST USER ID
         LA    R3,L'EDSYSUID(,R3)  POINT PAST &SYSUID
         LA    R14,L'EDSYSUID(,R14)
         CLI   0(R3),C'.'          TRAILING PERIOD?
         BNE   EDDSNLP2            NO
         B     EDDSNSKP            YES, THAT'S NOW PROCESSED ALSO
EDNOTUID CLI   0(R3),X'50'         SUBSTITUTION HAPPENING?
         BE    EDSERCHK            YES, SKIP THE CHECK
         CLI   0(R3),C'*'          DD REFERAL?
         BE    EDSERCHK            YES, SKIP THE CHECK
         CLI   0(R14),X'04'        VALID DATA?
         BNE   EDDSNVAL            NO, ASSUME END OF VALUE
EDDSNCHR MVC   0(1,R4),0(R3)       COPY DSNAME CHARACTER
         LA    R2,1(,R2)           INCREMENT LENGTH
         LA    R4,1(,R4)           OVERFLOW INTO EDLOCBUF IS OKAY
EDDSNSKP LA    R3,1(,R3)           POINT TO NEXT COLUMN
         LA    R14,1(,R14)
         B     EDDSNLP2
EDDSNVAL CLI   0(R14),X'23'        ERROR ALREADY FLAGGED?
         BE    EDSERCHK            YES, NEED NOT CHECK ANY MORE
         LTR   R2,R2               ANY DSNAME PRESENT?
         BNP   EDSERCHK            NO, NO PROBLEM
         CLC   EDNULFIL,EDLOCDSN   IS IT A DUMMY FILE?
         BE    EDSERCHK            YES, SO SKIP CATALOG CHECK
         MVI   EDSYNWRK,X'23'      SET CODE TO FLAG ERROR
         LA    R0,44
         CR    R2,R0               IS DATA TOO LONG?
         BH    EDDSNERR            YES, ERROR
         CLI   0(R3),C'('          POSSIBLE GDG MEMBER SPECIFIED?
         BNE   EDNOTGDG            NO
         CLI   1(R3),C'0'          MEMBER STARTS WITH NUMERIC?
         BNL   EDSERCHK            YES, SKIP CHECK FOR GDG
         CLI   1(R3),C'+'          RELATIVE MEMBER?
         BE    EDSERCHK            YES, SKIP CHECK FOR GDG
         CLI   1(R3),C'-'          RELATIVE MEMBER?
         BE    EDSERCHK            YES, SKIP CHECK FOR GDG
EDNOTGDG LAE   R4,EDLOCDSN         POINT TO THE EXTRACTED NAME
         LR    R7,R4               POINT TO FIRST QUALIFIER
         LR    R0,R2               GET DATA SET NAME LENGTH
EDSQUALP CR    R7,R4               START OF QUALIFIER?
         BNE   EDSQLCHR            NO, EXAMINE CHARACTER
         CLI   0(R7),C'0'          QUALIFIER STARTS WITH A NUMERIC?
         BE    EDDSNERR            YES, INVALID
         CLI   0(R7),C'-'          QUALIFIER STARTS WITH A MINUS?
         BE    EDDSNERR            YES, INVALID
         CLI   0(R7),C'.'          QUALIFIER STARTS WITH A PERIOD?
         BE    EDDSNERR            YES, INVALID
EDSQLCHR CLI   0(R7),C'.'          END OF QUALIFIER?
         BNE   EDSQLNXT            NO, JUST ANOTHER PIECE OF DSNAME
         LA    R4,1(,R7)           POINT TO WHERE NEXT QUAL MUST START
EDSQLNXT LR    R5,R7               POINT TO CURRENT CHARACTER
         SR    R5,R4               GET LENGTH CODE OF QUALIFIER SO FAR
         C     R5,EDFW8            QUALIFIER TOO LONG?
         BNL   EDDSNERR            YES, INVALID
         LA    R7,1(,R7)           POINT TO NEXT DSNAME CHARACTER
         BCT   R0,EDSQUALP
EDSQLEND LR    R5,R1               SAVE CURRENT RECORD POINTER
         BCTR  R2,0                DECREMENT FOR EXECUTE
         EX    R2,EDDSNTRT         ANY BAD DSNAME CHARACTERS?
         BNZ   EDDSNBAD            YES
         SPACE
         TM    EPDSNC,1            LOOK UP DATA SET CATALOG ENTRY?
         BNO   EDSERCHK            NO, SKIP IT
         XC    EDENQPRM,EDENQPRM   RESET CAMLST AREA
         XC    EDLOCBUF,EDLOCBUF   CLEAR SOME RESIDUAL DATA
         MVI   EDENQPRM,X'44'      INDICATE LOCATE CAMLST
         LA    R0,EDLOCDSN         GET DSNAME ADDRESS
         ST    R0,EDENQPRM+4       SET DSNAME ADDRESS
         LA    R0,EDLOCBUF         GET OUTPUT BUFFER ADDRESS
         ST    R0,EDENQPRM+12      SET OUTPUT BUFFER ADDRESS
         SAC   0                   SET PRIMARY MODE
         LOCATE EDENQPRM
         SAC   512                 SET AR MODE
         LR    R1,R5               RESTORE RECORD ADDRESS
         CPYA  A1,A5               RESTORE DATA SPACE ACCESS
         MVI   EDSYNWRK,X'34'      UNDERSCORE CATALOGED DATA SET NAME
         LTR   R15,R15             SUCCESS?
         BZ    *+8                 YES
         MVI   EDSYNWRK,X'01'      NO, SHOW UNCATALOGED NAME IN BLUE
EDDSNERR LA    R15,EDSERCHK        SET EDRGNERR EXIT-TO ADDRESS
         LR    R2,R3               POINT PAST DSNAME
         L     R3,SBASAVE          POINT TO DSNAME
         SR    R2,R3               GET DSNSME LENGTH
         BCTR  R2,0                GET LENGTH CODE TO HIGHLIGHT
         B     EDRGNERR            GO HIGHLIGHT DATA SET NAME
         SPACE
EDDSNTRT TRT   EDLOCDSN(0),EDDSNTAB      <<< EXECUTED >>>
*
*    AT THIS POINT A BAD CHARACTER HAS BEEN FOUND IN THE DATA
*    SET NAME AFTER SYMBOL SUBSTITUTION, BUT THE OFFSET OF THE
*    BAD CHARACTER MAY HAVE BEEN CHANGED BY SYMBOL SUBSTITUTION.
*
*    SO, THE ORIGINAL DATA SET NAME SPECIFICATION IN THE EDIT
*    DATA MUST BE SEARCHED TO LOCATE THE BAD CHARACTER SO THAT
*    THE CORRECT SCREEN LOCATION RECEIVES THE ERROR HIGHLIGHTING.
*
*    THE LENGTH OF THE DATA SET NAME IN THE ORIGINAL JCL IS NOT
*    KNOWN HERE, SO A COMMA, BLANK OR NON-DISPLAY CODE POINT WILL
*    END THE SEARCH IN CASE THE BAD CHARACTER IS FROM THE SYMBOL.
*
EDDSNBAD L     R3,SBASAVE          POINT TO DATA SET NAME IN DATA
         IC    R0,0(R1,0)          INSERT BAD CHAR (INDEX ALET=0)
         LR    R1,R5               RESTORE CURRENT RECORD POINTER
         SR    R2,R2               JUST HIGHLIGHT THE FIRST BAD BYTE
         LA    R15,EDSERCHK        SET EDRGNERR EXIT-TO ADDRESS
EDDSNELP CLM   R0,1,0(R3)          FOUND BAD CHARACTER?
         BE    EDRGNERR            YES, GO HIGHLIGHT IT
         LA    R3,1(,R3)           NO, POINT TO NEXT CHARACTER
         CLI   0(R3),C','          FOUND A COMMA?
         BE    EDSERCHK            YES, BAIL OUT OF LOOP
         CLI   0(R3),C' '          FOUND A BLANK?
         BH    EDDSNELP            NO, GO CHECK IT FOR BAD CHAR
         SPACE
EDSERCHK LAE   R3,CTLLEN+7(,R1)    GET STARTING POSITION
         LAE   R14,EDLNSHDW+7      GET STARTING POSITION SHADOW
         LAE   R15,EDSYNXIT        SET EDRGNERR EXIT-TO ADDRESS
         LA    R0,60               GET NUMBER OF COLUMNS TO SEARCH
EDSERLP1 CLC   EDSEREQL,0(R3)      FOUND 'SER='?
         BE    EDSERFND            YES
         LA    R3,1(,R3)           NO, POINT TO NEXT COLUMN
         LA    R14,1(,R14)
         BCT   R0,EDSERLP1
         B     EDSYNXIT            NOT FOUND
EDSERFND LA    R3,L'EDSEREQL(,R3)  POINT PAST IT
         LA    R14,L'EDSEREQL(,R14)
         SR    R2,R2               RESET LENGTH COUNTER
         MVC   DYNTABLE(6),EDBLNKS
         LA    R4,DYNTABLE
EDSERLP2 CLI   0(R3),X'50'         SUBSTITUTION HAPPENING?
         BE    EDSYNXIT            YES, SKIP THE CHECK
         CLI   0(R3),C' '          END OF DATA?
         BNH   EDSERVAL            YES
         CLI   0(R14),X'04'        VALID DATA?
         BNE   EDSERVAL            NO, ASSUME END OF VALUE
         MVC   0(1,R4),0(R3)       COPY VOLUME SERIAL NUMBER CHARACTER
         LA    R2,1(,R2)           INCREMENT LENGTH
         LA    R3,1(,R3)           NO, POINT TO NEXT COLUMN
         LA    R14,1(,R14)
         LA    R4,1(,R4)
         B     EDSERLP2
EDSERVAL CLI   0(R14),X'23'        ERROR ALREADY FLAGGED?
         BE    EDSYNXIT            YES, NEED NOT CHECK ANY MORE
         LTR   R2,R2               ANY VOLUME SERIAL NUMBER PRESENT?
         BNP   EDSYNXIT            NO, NO PROBLEM
         SR    R3,R2               YES, POINT BACK TO IT
         MVI   EDSYNWRK,X'23'      SET CODE TO FLAG ERROR
         C     R2,EDFW6            IS DATA TOO LONG?
         BCTR  R2,0                GET HIGHLIGHT EXTRA BYTE COUNT
         BH    EDRGNERR            YES, ERROR
         AIF   (&ENVESA).UCBESA
         LR    R0,R2               SAVE VOLUME SERIAL LENGTH CODE
         L     R4,CVTPTR(,0)       POINT TO THE CVT
         L     R4,40(,R4)          LOAD CVTILK2 FOR UCB LOOKUP TABLE
EDSERLP3 CLC   EDTBLEND,0(R4)      END OF LOOKUP TABLE?
         BE    EDSYNXIT            YES, VOLUME NOT FOUND
         ICM   R2,3,0(R4)          GET UCB ADDRESS
         LA    R4,2(,R4)           POINT TO NEXT ADDRESS SLOT
         BZ    EDSERLP3            EMPTY SLOT
         CLI   18(R2),X'20'        DASD DEVICE CLASS?
         BNE   EDSERLP3            NO
         CLC   DYNTABLE(6),28(R2)  MATCHING VOLUME SERIAL?
         BNE   EDSERLP3            YES
         SR    R7,R7               PREPARE FOR INSERT
         MVI   EDSYNWRK,X'34'      SET CODE TO FLAG ONLINE VOLUME
         IC    R7,19(R2)           GET DEVICE TYPE CODE
         CLI   19(R2),X'0F'        DEVICE TYPE IN SUPPORTED RANGE?
         LR    R2,R0               GET HIGHLIGHT EXTRA BYTE COUNT
         BH    EDRGNERR            NO, DO NOT SUPPLY INIT TYPE
         SLL   R7,2                YES, MULTIPLY BY FOUR FOR INDEX
         LA    R7,EDDEVNUM(R7)     POINT TO THE UNIT GENERIC NAME
         MVC   EDDEVTYP,0(R7)      LOAD THE UNIT GENERIC NAME
         B     EDRGNERR            GO HIGHLIGHT THE VOLUME SERIAL
         AGO   .UCBDONE
.UCBESA  ANOP
         B     EDSYNXIT
.UCBDONE ANOP
         SPACE
         SPACE
EDSYNDAT MVI   EDFLG3,EDDATA       FLAG FILE AS RAW DATA
EDSYNOFF MVI   EDLNSHDW,X'04'      NO, CLEAR IT ALL
EDSYNCLR MVC   EDLNSHDW+1(79),EDLNSHDW
         TM    EPNUM,1             SEQUENCE NUMBER PRESENT?
         BNO   EDSYNCOB            NO
         MVI   EDLNSHDW+72,X'05'   YES, SHOW IN TURQUOISE
         MVC   EDLNSHDW+73(7),EDLNSHDW+72
EDSYNCOB CLI   EDFLG3,EDCOBOL      COBOL SOURCE?
         BNE   EDSYNXIT            NO
         MVI   EDLNSHDW,X'01'      YES, SHOW COBOL NUMBERS IN BLUE
         MVC   EDLNSHDW+1(5),EDLNSHDW
         CLI   CTLLEN+6(R1),C'*'   COBOL COMMENT?
         BE    EDCOBCMT            YES
         CLI   CTLLEN+6(R1),C'/'   COBOL COMMENT?
         BNE   EDSYNXIT            NO
EDCOBCMT MVI   EDLNSHDW+6,X'05'    YES, SHOW IN TURQUOISE
         MVC   EDLNSHDW+7(65),EDLNSHDW+6
         SPACE
*
*    MARK SOFTWARE TAB COLUMNS ON EVERY FOURTH LINE
*
EDSYNXIT TM    EDFLG4,E4TBLN       SHOW TABS ON THIS LINE?
         BZ    EDSYN_X             NO
         NI    EDFLG4,255-E4TBLN   YES, RESET FLAG
         LA    R0,EDTABL/4         GET MAXMIMUM TABS COLUMN COUNT
         LA    R2,EDTAB#           POINT TO THE TABS COLUMN NUMBERS
EDSYNXLP ICM   R1,15,0(R2)         GET TABS COLUMN NUMBER
         BZ    EDSYN_X             END OF ACTIVE SLOTS REACHED
         BCTR  R1,0                CONVERT COLUMN TO OFFSET
         C     R1,EDFW80           BEYOND COLUMN 80?
         BNL   EDSYNXNX            YES, NOT IN AREA OF INTEREST HERE
         LA    R1,EDLNSHDW(R1)     NO, POINT TO BYTE TO HIGHLIGHT
         OI    0(R1),X'30'         FLAG WITH UNDERSCORE
EDSYNXNX LA    R2,4(,R2)           POINT TO NEXT TABS COLUMN NUMBER
         BCT   R0,EDSYNXLP
         SPACE
*
*    EXIT TO CALLER
*
EDSYN_X  LM    R14,R12,12(R13)     RESTORE GENERAL PURPOSE REGISTERS
         LAM   A0,A15,EDARSAVE     RESTORE ACCESS REGISTERS
         BR    R14                 RETURN TO CALLER
         SPACE
         DROP  R10,R8              EDITSNTX
         SPACE
EDSNAIF  DC    C'AIF'
EDSNAGO  DC    C'AGO'
EDSNSETA DC    C'SETA'
EDSNSETC DC    C'SETC'
EDSNTHEN DC    C'THEN'
EDPROCES DC    C'PROCESS '
EDMAR1   DC    C'MAR('
EDMAR2   DC    C'MARGINS('
EDMAR3   DC    C'SORMGIN=('
EDNULFIL DC    C'NULLFILE '
EDRGNEQL DC    C'REGION='
EDDSNEQL DC    C'DSN='
EDDSNMEQ DC    C'DSNAME='
EDSYSUID DC    C'&&SYSUID'
EDSEREQL DC    C'SER='
EDDEC16K DC    P'16384'
EDRGNKLM DC    P'2096128'
EDRGNMLM DC    P'2047'
         SPACE
EDASMTAB DC    0F'0'               ASM OPERAND CHARACTER COLOUR TABLE
         DC    256X'23'
         ORG   EDASMTAB+C' '
         DC    X'04'
         ORG   EDASMTAB+X'50'      AMPERSAND
         DC    X'06'
         ORG   EDASMTAB+C'.'
         DC    X'04'
         ORG   EDASMTAB+C'+'
         DC    X'06'
         ORG   EDASMTAB+C'-'
         DC    X'06'
         ORG   EDASMTAB+C'*'
         DC    X'06'
         ORG   EDASMTAB+C'/'
         DC    X'06'
         ORG   EDASMTAB+C'='
         DC    X'06'
         ORG   EDASMTAB+C','
         DC    X'06'
         ORG   EDASMTAB+C'('
         DC    X'04'
         ORG   EDASMTAB+C')'
         DC    X'04'
         ORG   EDASMTAB+C'_'
         DC    X'04'
         ORG   EDASMTAB+QUOTE
         DC    X'04'
         ORG   EDASMTAB+C'$'
         DC    X'04'
         ORG   EDASMTAB+C'#'
         DC    X'04'
         ORG   EDASMTAB+C'@'
         DC    X'04'
         ORG   EDASMTAB+X'81'
         DC    9X'04'
         ORG   EDASMTAB+X'91'
         DC    9X'04'
         ORG   EDASMTAB+X'A2'
         DC    8X'04'
         ORG   EDASMTAB+C'A'
         DC    9X'04'
         ORG   EDASMTAB+C'J'
         DC    9X'04'
         ORG   EDASMTAB+C'S'
         DC    8X'04'
         ORG   EDASMTAB+C'0'
         DC    10X'04'
         ORG
         SPACE
EDJCLTAB DC    0F'0'               JCL OPERAND CHARACTER COLOUR TABLE
         DC    256X'23'
         ORG   EDJCLTAB+C' '
         DC    X'04'
         ORG   EDJCLTAB+C'.'
         DC    X'04'
         ORG   EDJCLTAB+C'+'
         DC    X'04'
         ORG   EDJCLTAB+C'-'
         DC    X'04'
         ORG   EDJCLTAB+C'*'
         DC    X'04'
         ORG   EDJCLTAB+C'/'
         DC    X'04'
         ORG   EDJCLTAB+X'50'      AMPERSAND
         DC    X'06'
         ORG   EDJCLTAB+C'='
         DC    X'06'
         ORG   EDJCLTAB+C','
         DC    X'06'
         ORG   EDJCLTAB+C'('
         DC    X'06'
         ORG   EDJCLTAB+C')'
         DC    X'06'
         ORG   EDJCLTAB+C'_'
         DC    X'04'
         ORG   EDJCLTAB+C'$'
         DC    X'04'
         ORG   EDJCLTAB+C'#'
         DC    X'04'
         ORG   EDJCLTAB+C'@'
         DC    X'04'
         ORG   EDJCLTAB+X'81'
         DC    9X'04'
         ORG   EDJCLTAB+X'91'
         DC    9X'04'
         ORG   EDJCLTAB+X'A2'
         DC    8X'04'
         ORG   EDJCLTAB+C'A'
         DC    9X'04'
         ORG   EDJCLTAB+C'J'
         DC    9X'04'
         ORG   EDJCLTAB+C'S'
         DC    8X'04'
         ORG   EDJCLTAB+C'0'
         DC    10X'04'
         ORG
         SPACE
EDJLBLTB DC    0F'0'               JCL LABEL CHARACTER VALIDITY TABLE
         DC    256X'FF'
         ORG   EDJLBLTB+C'.'
         DC    X'00'
         ORG   EDJLBLTB+X'50'      AMPERSAND
         DC    X'00'
         ORG   EDJLBLTB+C'$'
         DC    X'00'
         ORG   EDJLBLTB+C'#'
         DC    X'00'
         ORG   EDJLBLTB+C'@'
         DC    X'00'
         ORG   EDJLBLTB+C'A'
         DC    9X'00'
         ORG   EDJLBLTB+C'J'
         DC    9X'00'
         ORG   EDJLBLTB+C'S'
         DC    8X'00'
         ORG   EDJLBLTB+C'0'
         DC    10X'00'
         ORG
         SPACE
EDDSNTAB DC    0F'0'               DATA SET NAME VALID CHARACTER TABLE
         DC    256X'FF'
         ORG   EDDSNTAB+C'.'
         DC    X'00'
         ORG   EDDSNTAB+C'$'
         DC    X'00'
         ORG   EDDSNTAB+C'#'
         DC    X'00'
         ORG   EDDSNTAB+C'@'
         DC    X'00'
         ORG   EDDSNTAB+C'A'
         DC    9X'00'
         ORG   EDDSNTAB+C'J'
         DC    9X'00'
         ORG   EDDSNTAB+C'S'
         DC    8X'00'
         ORG   EDDSNTAB+C'0'
         DC    10X'00'
         ORG
         SPACE
EDPLITAB DC    0F'0'               PL/I SOURCE CHARACTER COLOUR TABLE
         DC    256X'23'
         ORG   EDPLITAB+C' '
         DC    X'04'
         ORG   EDPLITAB+C'.'
         DC    X'04'
         ORG   EDPLITAB+C'+'
         DC    X'06'
         ORG   EDPLITAB+C'-'
         DC    X'06'
         ORG   EDPLITAB+C'*'
         DC    X'06'
         ORG   EDPLITAB+C'/'
         DC    X'06'
         ORG   EDPLITAB+C'='
         DC    X'06'
         ORG   EDPLITAB+C'>'
         DC    X'06'
         ORG   EDPLITAB+C'<'
         DC    X'06'
         ORG   EDPLITAB+X'50'      AMPERSAND
         DC    X'06'
         ORG   EDPLITAB+X'4F'      VERTICAL LINE
         DC    X'06'
         ORG   EDPLITAB+X'5F'      NOT SIGN
         DC    X'06'
         ORG   EDPLITAB+C'%'       WILL NOT BE USED
         DC    X'01'
         ORG   EDPLITAB+C','
         DC    X'06'
         ORG   EDPLITAB+C';'
         DC    X'06'
         ORG   EDPLITAB+C':'
         DC    X'06'
         ORG   EDPLITAB+C'('
         DC    X'06'
         ORG   EDPLITAB+C')'
         DC    X'06'
         ORG   EDPLITAB+C'_'
         DC    X'04'
         ORG   EDPLITAB+QUOTE      WILL NOT BE USED
         DC    X'07'
         ORG   EDPLITAB+C'$'
         DC    X'04'
         ORG   EDPLITAB+C'#'
         DC    X'04'
         ORG   EDPLITAB+C'@'
         DC    X'04'
         ORG   EDPLITAB+X'81'
         DC    9X'04'
         ORG   EDPLITAB+X'91'
         DC    9X'04'
         ORG   EDPLITAB+X'A2'
         DC    8X'04'
         ORG   EDPLITAB+C'A'
         DC    9X'04'
         ORG   EDPLITAB+C'J'
         DC    9X'04'
         ORG   EDPLITAB+C'S'
         DC    8X'04'
         ORG   EDPLITAB+C'0'
         DC    10X'04'
         ORG
         SPACE
EDDEVNUM DC    F'0'                DASD CLASS DEVICE TYPES
         DC    CL4'2311'               2001
         DC    CL4'2301'               2002  DRUM
         DC    CL4'2303'               2003  DRUM
*        DC    CL4'2302'               2004
         DC    CL4'9345'           30102004
         DC    CL4'2321'               2005  DATA CELL
         DC    CL4'2305'               2006
         DC    CL4'2305'           30502007
         DC    CL4'2314'           30C02008
         DC    CL4'3330'           30502009
         DC    CL4'3340'           3040200A
         DC    CL4'3350'           3050200B
         DC    CL4'3375'           3010200C
         DC    CL4'3331'           3050200D
         DC    CL4'3380'           3010200E
         DC    CL4'3390'           3010200F
         SPACE
         SPACE
         SPACE
EDASRCXT DC    CL5'ADATA'          ASSEMBLER SOURCE START VERBS TABLE
         DC    CL5'ALIAS'                IFF VERB IS IN COLUMN 10
         DC    CL5'AMODE'
         DC    CL5'CATTR'
         DC    CL5'EJECT'
         DC    CL5'ENTRY'
         DC    CL5'LTORG'
         DC    CL5'MNOTE'
         DC    CL5'OPSYN'
         DC    CL5'PRINT'
         DC    CL5'PUNCH'
         DC    CL5'REPRO'
         DC    CL5'RMODE'
         DC    CL5'SPACE'
         DC    CL5'USING'
EDASRCTB DC    CL5'CSECT'          ASSEMBLER SOURCE START VERBS TABLE
         DC    CL5'DSECT'
         DC    CL5'RSECT'
         DC    CL5'START'
         DC    CL5'MACRO'
         DC    CL5'TITLE'
         DC    CL5'LOCTR'
         DC    X'FF'               END OF TABLE
         SPACE
EDVRBJCL DC    0H'0'               TABLE OF JCL VERBS
*                                  FIRST ARE PRE-SP JCL STATEMENTS
         DC    AL1(3),CL9'JOB     '  JCL STATEMENT TYPE 1
         DC    AL1(4),CL9'EXEC    '  JCL STATEMENT TYPE 2
         DC    AL1(2),CL9'DD      '  JCL STATEMENT TYPE 3
EDPROC   EQU   *+1,5                 CL5'PROC '
         DC    AL1(4),CL9'PROC    '  JCL STATEMENT TYPE 4
*                             MORE MODERN VERBS FOLLOW STARTING WITH IF
         DC    AL1(2),CL9'IF      '  JCL STATEMENT TYPE 5
         DC    AL1(7),CL9'COMMAND '
         DC    AL1(4),CL9'CNTL    '
         DC    AL1(6),CL9'EXPORT  '  NEW WITH Z/OS 2.1
         DC    AL1(7),CL9'INCLUDE '
         DC    AL1(6),CL9'JCLLIB  '
         DC    AL1(6),CL9'NOTIFY  '  NEW WITH Z/OS 2.3
         DC    AL1(6),CL9'OUTPUT  '
         DC    AL1(8),CL9'SCHEDULE'  NEW WITH Z/OS 2.2
         DC    AL1(3),CL9'SET     '
         DC    AL1(3),CL9'XMIT    '
EDVRBTB1 DC    0H'0'               TABLE OF JCL VERBS WITHOUT OPERANDS
         DC    AL1(4),CL9'PEND    '
PENDTYPE EQU   (*-EDVRBJCL)/10     STATEMENT TYPE OF PEND (ALSO PRE-SP)
         DC    AL1(4),CL9'ELSE    '
         DC    AL1(5),CL9'ENDIF   '
         DC    AL1(7),CL9'ENDCNTL '
EDTBLEND DC    H'-1'               END OF TABLE
         SPACE
EDVRBTB2 DC    0H'0'               TABLE OF ASM VERBS WITHOUT OPERANDS
*                                  ASSEMBLER INSTRUCTIONS
         DC    AL1(5),CL9'CSECT   '
         DC    AL1(5),CL9'DSECT   '
         DC    AL1(5),CL9'RSECT   '
         DC    AL1(5),CL9'START   '
         DC    AL1(5),CL9'LTORG   '
         DC    AL1(5),CL9'MACRO   '
         DC    AL1(4),CL9'MEND    '
         DC    AL1(5),CL9'MEXIT   '
         DC    AL1(3),CL9'COM     '
         DC    AL1(5),CL9'EJECT   '
         DC    AL1(6),CL9'CEJECT  '
         DC    AL1(6),CL9'AEJECT  '
         DC    AL1(5),CL9'LOCTR   '
         DC    AL1(5),CL9'REPRO   '
         DC    AL1(4),CL9'ANOP    '
*                                  MACHINE INSTRUCTION MNEMONICS
         DC    AL1(2),CL9'PR      '    0101
         DC    AL1(3),CL9'UPT     '    0102
         DC    AL1(4),CL9'PTFF    '    0104
         DC    AL1(5),CL9'SCKPF   '    0107
         DC    AL1(4),CL9'PFPO    '    010A
         DC    AL1(3),CL9'TAM     '    010B
         DC    AL1(5),CL9'SAM24   '    010C
         DC    AL1(5),CL9'SAM31   '    010D
         DC    AL1(5),CL9'SAM64   '    010E
         DC    AL1(5),CL9'TRAP2   '    01FF
         DC    AL1(3),CL9'IPK     '    B20B
         DC    AL1(4),CL9'PTLB    '    B20D
         DC    AL1(3),CL9'SAL     '    B237
         DC    AL1(4),CL9'PALB    '    B248
*                                  OS MACRO INSTRUCTIONS
         DC    AL1(8),CL9'DYNALLOC'
         DC    AL1(7),CL9'IEZBITS '
         DC    AL1(8),CL9'SYNADRLS'
         DC    AL1(5),CL9'YREGS   '
         DC    H'-1'               END OF TABLE
         TITLE '  E D I T M E R G   -   R E C O R D   U P D A T E  '
*
*    MERGE ANY MODIFICATIONS TO THE DATA PORTION OF DISPLAY LINES
*    INTO THE IN-STORAGE COPY OF THE FILE DATA BEING EDITED.
*
         USING EDITMERG,R10
EDITMERG LR    R10,R15             SET LOCAL BASE
         ST    R14,EDRETSV1        SAVE RETURN ADDRESS
         NI    EDFLG4,255-E4CTAB   RESET TABBED CURSOR RESHOW FLAG
         SPACE
         TM    EPASCII,X'01'       PROCESSING ASCII DATA?
         BZ    EDMGAOK1            NO, NO TRANSLATION REQUIRED
         LA    R1,DYNTABLE+255     YES, BUILD A TRANSLATE TABLE
         LA    R0,255
EDMGALP1 STC   R0,0(,R1)           SAVE INPUT CODE POINT
         BCTR  R1,0                BACK UP 1 BYTE
         S     R0,EDFW1            REDUCE CODE POINT VALUE
         BNM   EDMGALP1            POPULATE WHOLE TABLE
         XLATE DYNTABLE,256,TO=A   GET SYSTEM'S TRANSLATE TABLE
         SPACE
EDMGAOK1 TM    STATUS4,$4REFR      VALID SCREEN INPUT?
         BNO   EDMERGIT            YES, PROCESS IT
         SPACE
*         PERFORM SCREEN REFRESH PROCESSING WITHOUT DATA MERGE
         SPACE
         L     R0,EDYNCOPY         POINT TO SAVED SCREEN IMAGE
         L     R1,EDYNSIZE         GET ITS SIZE
         L     R14,EDYNAREA        POINT TO PRIMARY BUFFER
         LR    R15,R1              GET ITS SIZE
         MVCL  R14,R0              RESTORE THE DYNAMIC AREA
         STH   R1,CSRLOCN          SAY THE CURSOR WAS AT HOME
         NI    STATUS4,255-$4REFR  CLEAR REFRESH FLAG
         SPACE
*         GET DETAILS OF INPUT CURSOR POSITION
         SPACE
EDMERGIT SR    R0,R0               CLEAR FOR DIVIDE
         ST    R0,CSRRECAD         CLEAR CURSOR DATA RECORD ADDRESS
         ST    R0,CSRDIRAD         CLEAR CURSOR DIRECTORY ENTRY ADDRESS
         ST    R0,EDCSROUT         CLEAR OUTPUT CURSOR LOCATION
         ST    R0,EDCSRPOS         CLEAR CURSOR LOCATION
         ST    R0,EDCSRROW         CLEAR CURSOR SCREEN LINE NUMBER
         ST    R0,EDCSRCOL         CLEAR CURSOR SCREEN COLUMN NUMBER
         ST    R0,EDCSROFF         CLEAR CURSOR RECORD OFFSET
         ST    R0,FNDOFF           CLEAR FIND SEARCH START OFFSET
         MVC   FNDREC,LINEADDR     SET FIND SEARCH START RECORD ADDRESS
         MVC   FNDNUM,LINENMBR     SET FIND SEARCH START RECORD NUMBER
         SR    R1,R1               CLEAR FOR INSERT
         ICM   R1,3,CSRLOCN        CURSOR PLACED IN DYNAMIC AREA?
         BZ    CSRDTLOK            NO, CHECK FOR LINE COMMANDS
         S     R1,SCRNCOLS         CONVERT SCREEN POSITION TO
         S     R1,SCRNCOLS              DYNAMIC AREA POSITION
         LA    R7,1(,R1)           CONVERT OFFSET TO POSITION
         ST    R7,EDCSRPOS         SAVE CURSOR POSITION
         D     R0,SCRNCOLS         GET CURSOR ROW AND COLUMN
         ST    R1,EDCSRROW         SAVE CURSOR RELATIVE DYNAMIC ROW
         LR    R7,R0               COPY SCREEN OFFSET FROM LEFT
         A     R0,EDFW1            CONVERT TO SCREEN COLUMN NUMBER
         ST    R0,EDCSRCOL         SAVE CURSOR SCREEN COLUMN NUMBER
         S     R7,EDFW8            MAKE RELATIVE TO DATA WINDOW
         BM    CSROFFOK            IF NOT IN DATA PART THEN LEAVE ZERO
         A     R7,EDOFFSET         GET OFFSET INTO DATA RECORD
         ST    R7,EDCSROFF         SAVE CURSOR OFFSET INTO RECORD
CSROFFOK EQU   *
         L     R7,EDITDIR@         POINT TO FIRST ROW DIRECTORY ENTRY
         LTR   R1,R1               CURSOR ON TOP DATA LINE?
         BZ    CSRRECOK            YES
CSRRECLP EQU   *
         LA    R7,EDIRSIZ(,R7)     POINT TO NEXT DIRECTORY ENTRY
         C     R7,EDDIREND         GONE BEYOND END OF DATA?
         BH    CSRDTLOK            YES, CURSOR NOT ON DATA RECORD LINE
         BCT   R1,CSRRECLP
CSRRECOK EQU   *
         CLI   EDIRREC(R7),EDIRCOL COLUMN INDICATOR LINE?
         BE    CSRDTLOK            YES, CURSOR NOT REALLY IN DATA
         L     R1,EDIRREC(,R7)     POINT TO RECORD WITH CURSOR
         ST    R1,CSRRECAD         SAVE RECORD ADDRESS
         ST    R7,CSRDIRAD         SAVE DIRECTORY ENTRY ADDRESS
         TM    EDIR1ST(R7),EDIRINS LINE INSERTION?
         BNO   CSRDTLOK            NO
         OI    CSRDIRAD,EDIRINS    YES, EDIR1ST WILL BE SET BY MERGE
CSRDTLOK EQU   *
         SPACE
*         CHECK FOR NULL ENTER IN ORDER TO TAB CURSOR ONLY
         SPACE
         TM    OPD0+6,PRESENT      ANY COMMAND ENTERED?
         BO    MRGITALL            YES, DON'T TAKE SHORTCUT
         TM    EDFLG1,E1FREEZE     IS SOMETHING UP?
         BO    MRGITALL            YES, DON'T TAKE SHORTCUT
         TM    STATUS16,$16RFC     'RFIND' OR 'RCHANGE' QUEUED?
         BNZ   MRGITALL            YES, DON'T TAKE SHORTCUT
         LA    R1,REPLY            POINT TO TGET BUFFER
         A     R1,TGETREGS+8       POINT PAST PRIMAT INPUT
         CLI   0(R1),SBA           ANYTHING ELSE ENTERED?
         BNL   MRGITALL            YES, DON'T TAKE SHORTCUT
         CLC   EDCSRCOL,EDFW8      CURSOR IN DATA PART OF SCREEN?
         BL    MRGITALL            NO, DON'T TAKE SHORTCUT
         CLC   EDCSROFF,EDTAB#     PAST LAST TAB?
         BNL   MRGITALL            YES, DON'T TAKE SHORTCUT
         LA    R1,EDTAB#           POINT TO TAB COLUMNS
         LA    R5,(EDTABL/4)       GET MAXIMUM TAB COLUMN COUNT
MRGSWTAB L     R2,0(,R1)           GET TAB COLUMN
         BCTR  R2,0                CONVERT COLUMN TO OFFSET
         C     R2,EDCSROFF         CURSOR BEYOND THIS TAB COLUMN?
         BNH   MRGTABOK            YES, END OF TAB COLUMN CHECKING
         MVC   DOUBLE(4),0(R1)     NO, SET TAB COLUMN TO IMPLEMENT
         LA    R1,4(,R1)           POINT TO NEXT (LESS) TAB COLUMN
         BCT   R5,MRGSWTAB         SCAN TABLE TO GET LEAST NEXT COLUMN
MRGTABOK L     R1,DOUBLE           GET TARGET COLUMN
         BCTR  R1,0                CONVERT TO AN OFFSET
         S     R1,EDCSROFF         GET SIZE OF COLUMN ADVANCEMENT
         A     R1,EDCSRCOL         GET NEW SCREEN COLUMN
         CL    R1,SCRNCOLS         BEYOND RIGHT SCREEN EDGE?
         BH    MRGITALL            YES, DON'T TAKE SHORTCUT
         S     R1,EDCSRCOL         GET SIZE OF COLUMN ADVANCEMENT AGAIN
         A     R1,EDCSRPOS         GET NEW CURSOR POSITION
         MVC   REVCSR,EDREVBUF     PUT CURSOR IN DYNAMIC AREA
         ST    R1,REVPOS           SET CURSOR POSITION
         OI    EDFLG4,E4CTAB       REQUEST RESHOW WITH TABBED CURSOR
         B     EDMERGEX            READY FOR RESHOW
MRGITALL EQU   *
         SPACE
*         MERGE INPUT DATA INTO FILE DATA BEFORE COMMAND PROCESSING
         SPACE
         L     R6,EDYNAREA         GET ADDRESS OF UPDATED SCREEN DATA
         L     R7,EDITDIR@         GET SCREEN LINE DIRECTORY ADDRESS
         L     R8,EDYNCOPY         GET ADDRESS OF OUTPUT SCREEN DATA
         LAM   A0,A15,EDZEROS      CLEAR ALL ACCESS REGISTERS
         LAM   A3,A3,DSPCALET      LOAD DATA SPACE ALET
         CPYA  A4,A3               LOAD DATA SPACE ALET
         CPYA  A5,A3               LOAD DATA SPACE ALET
         SAC   512                 SET AR MODE
         TM    STATUS7,EDCOLS      IS LINE 3 FOR STATUS DISPLAY?
         BZ    MERGELP1            NO, PROCEED WITH INPUT DATA MERGE
         A     R6,SCRNCOLS         YES, START WITH SECOND LINE
         LA    R7,EDIRSIZ(,R7)     POINT TO ITS DIRECTORY ENTRY
         A     R8,SCRNCOLS         POINT TO THE PRE-INPUT VERSION
         SPACE
*         LOOP THROUGH EACH SCREEN LINE WITH FILE DATA
         SPACE
MERGELP1 CLI   7(R6),FLDINLO       FILE DATA INPUT LINE?
         BNE   MERGNXT1            NO
         L     R15,EDATWDTH        GET SCREEN LINE DATA SIZE
         BCTR  R15,0               DECREMENT FOR EXECUTE
         EX    R15,MERGCOMP        SENT AND RECEIVED LINE DATA EQUAL?
         BE    MERGNXT1            YES, THIS LINE'S DATA NOT CHANGED
         TM    STATUS10,$10CAP     CAPS ON?
         BNO   MERGCASE            NO
         AIF   (&ENV390).EK1
         LA    R2,EDITKAPS         YES, POINT TO TRANSLATE TABLE
         AGO   .EK2
.EK1     ANOP
         LARL  R2,EDITKAPS         YES, POINT TO TRANSLATE TABLE
.EK2     ANOP
         EX    R15,MERGTRAN        FOLD LOWER CASE TO UPPER CASE
         EX    R15,MERGCOMP        SENT AND RECEIVED LINE DATA EQUAL?
         BE    MERGNXT1            YES, IT WAS A LOWER CASE OVERTYPE
MERGCASE OI    EDFLG1,SAVEY+SAVEZ  FLAG IN-CORE DATA HAS CHANGED
         L     R3,EDIRREC(,R7)     POINT TO RECORD ENTRY
         OI    FLG1(R3),CHGL       MARK RECORD AS CHANGED
         TM    FLG1(R3),LINS       IS THIS AN INSERTION?
         BNO   MERGINOK            NO
         LA    R0,1                YES
         A     R0,RECLINES         INCREMENT RECORD COUNT
         ST    R0,RECLINES
         LA    R0,6                GET LENGTH OF LINE COMMAND AREA
         LAE   R15,1(,R6)          POINT TO LINE COMMAND AREA
MRGPRGQT CLI   0(R15),QUOTE        QUOTE IN LINE COMMAND AREA?
         BNE   *+8                 NO
         MVI   0(R15),C' '         YES, REPLACE WITH A BLANK
         LA    R15,1(,R15)         POINT TO THE NEXT CHARACTER
         BCT   R0,MRGPRGQT         CONTINUE PURGING QUOTES
         LAM   A15,A15,EDZEROS     ADDRESS PRIMARY ADDRESS SPACE
         L     R15,EDITDIR@        GET SCREEN LINE DIRECTORY ADDRESS
         CR    R7,R15              INSERT AFTER FIRST LINE?
         BNH   MERGINOK            NO, BUT SHOULD NOT HAPPEN
         LR    R15,R7              YES, POINT TO THIS INSERT'S ENTRY
         LA    R0,EDIRSIZ          GET ENTRY SIZE
         SR    R15,R0              POINT TO PREVIOUS ENTRY
         LA    R0,1
         A     R0,EDIRLST(,R15)    GET NEW LINE'S SEQUENCE NUMBER
         ST    R0,EDIR1ST(,R7)     SAVE IT
         ST    R0,EDIRLST(,R7)
         LR    R15,R7
MERGINSQ LA    R15,EDIRSIZ(,R15)   POINT TO NEXT LINE'S DIRECTORY ENTRY
         C     R15,EDDIREND        END OF SCREEN LINE DIRECTORY?
         BH    MERGINOK            YES
         LA    R0,1
         A     R0,EDIR1ST(,R15)    ADJUST LINE'S FIRST SEQUENCE NUMBER
         ST    R0,EDIR1ST(,R15)
         LA    R0,1
         A     R0,EDIRLST(,R15)    ADJUST LINE'S LAST SEQUENCE NUMBER
         ST    R0,EDIRLST(,R15)
         B     MERGINSQ            CONTINUE FOR WHOLE SCREEN
*                                  IF INSERTION THEN NOW HERE TO STAY
*                                  ALSO RESET CHANGE ALL/ERROR FLAGS
MERGINOK NI    FLG1(R3),255-LINS-CHGA-CHGE
         LA    R3,CTLLEN(,R3)      POINT TO RECORD DATA
         A     R3,EDOFFSET         POINT TO RECORD DATA ON SHOW
         LAE   R15,8(,R6)          POINT TO LINE DATA FROM TERMINAL
         L     R0,EDATWDTH         GET SCREEN LINE DATA SIZE
MERGELP2 CLI   0(R15),NULL         NULL?
         BE    MERGNULL            YES
         CLI   0(R15),C' '         INPUT UNPRINTABLE?
         BL    MERGNXT5            YES, NOT TYPED IN BY USER
         MVC   0(1,R3),0(R15)      LOAD LATEST DATA BYTE
         B     MERGNXT2
MERGNULL MVI   0(R3),C' '          INPUT NULL MEANS BLANK DATA
MERGNXT2 TM    EPASCII,X'01'       IN ASCII MODE?
         BNO   MERGNXT5            NO
         TR    0(1,R3),DYNTABLE    YES, CONVERT FILE BYTE TO ASCII
MERGNXT5 LA    R3,1(,R3)           POINT TO NEXT TARGET BYTE
         LA    R15,1(,R15)         POINT TO NEXT SOURCE BYTE
         BCT   R0,MERGELP2         GO PROCESS NEXT BYTE IN RECORD
         CPYA  A1,A3               LOAD DATA SPACE ALET
         L     R1,EDIRREC(,R7)     POINT TO RECORD ENTRY
         L     R15,EDITSNT@        POINT TO ROUTINE ENTRY POINT
         BASR  R14,R15             UPDATE LINE SYNTAX STATUS
MERGNXT1 TM    EPHEX,1             IS HEX ON?
         BNO   MERGNXT3            NO
         SPACE
*         PROCESS LINES OF HEXADECIMAL DATA NIBBLES
         SPACE
         A     R6,SCRNCOLS         POINT TO NEW HIGH-NIBBLE LINE
         LA    R7,EDIRSIZ(,R7)     POINT TO ITS DIRECTORY ENTRY
         A     R8,SCRNCOLS         POINT TO OLD HIGH-NIBBLE LINE
*         IF NO ROOM FOR SECOND LINE THEN FIRST IS ALSO NOT SHOWN
         LA    R0,EDIRSIZ(,R7)     POINT TO NEXT LINE'S DIRECTORY ENTRY
         C     R0,EDDIREND         BEYOND LAST SCREEN LINE?
         BH    EDMERGEX            YES, FINISHED SCREEN DATA MERGE
         L     R15,VIEWIDTH        GET SCREEN LINE DATA SIZE
         BCTR  R15,0               DECREMENT FOR EXECUTE
         AIF   (&ENV390).EK3
         LA    R2,EDITKAPS         POINT TO UPPER CASE TRANSLATE TABLE
         AGO   .EK4
.EK3     ANOP
         LARL  R2,EDITKAPS         POINT TO UPPER CASE TRANSLATE TABLE
.EK4     ANOP
         EX    R15,MERGTRAN        FOLD LOWER CASE TO UPPER CASE
         LR    R0,R6               SAVE POINTER
         A     R6,SCRNCOLS         POINT TO NEW LOW-NIBBLE LINE
         EX    R15,MERGTRAN        FOLD LOWER CASE TO UPPER CASE
         L     R2,EDXDATAD         POINT TO HEXDATA TRANSLATE TABLE
         EX    R15,MERGTRAN        CONVERT TO ZONED HEXADECIMAL
         LR    R6,R8               POINT TO OLD HIGH-NIBBLE LINE
         EX    R15,MERGTRAN        CONVERT TO ZONED HEXADECIMAL
         A     R6,SCRNCOLS         POINT TO OLD LOW-NIBBLE LINE
         EX    R15,MERGTRAN        CONVERT TO ZONED HEXADECIMAL
         LR    R6,R0               POINT TO NEW HIGH-NIBBLE LINE
         EX    R15,MERGTRAN        CONVERT TO ZONED HEXADECIMAL
         STM   R14,R12,12(R13)     SAVE REGISTERS
         L     R0,VIEWIDTH         GET COLUMN COUNT TO CHECK
         LR    R14,R6              POINT TO NEW HIGH-NIBBLE LINE
         LR    R15,R8              POINT TO OLD HIGH-NIBBLE LINE
         A     R14,SCRNCOLS        POINT TO NEW LOW-NIBBLE LINE
         A     R15,SCRNCOLS        POINT TO OLD LOW-NIBBLE LINE
MRGXCOLP CLI   8(R6),C'0'          HEX DATA?
         BL    MRGXCOLX            NO, FINISHED WITH COLUMN
         CLI   8(R14),C'0'         HEX DATA?
         BL    MRGXCOLX            NO, FINISHED WITH COLUMN
         CLC   8(1,R6),8(R8)       SAME HIGH-ORDER NIBBLE?
         BNE   MRGXCOLN            NO, NEW DATA
         CLC   8(1,R14),8(R15)     SAME LOW-ORDER NIBBLE?
         BE    MRGXCOLX            YES, FINISHED WITH COLUMN
MRGXCOLN MVC   DOUBLE(1),8(R6)     GET HIGH-ORDER NIBBLE
         MVC   DOUBLE+1(1),8(R14)  GET LOW-ORDER NIBBLE
         PACK  DOUBLE+4(2),DOUBLE(3)
         L     R3,EDIRREC(,R7)     POINT TO RECORD ENTRY
         TM    FLG1(R3),LINS       IS THIS AN INSERTION?
         BNO   MRGXINOK            NO
         LA    R4,1                YES
         A     R4,RECLINES         INCREMENT RECORD COUNT
         ST    R4,RECLINES
         NI    FLG1(R3),255-LINS   RECORD NOW HERE TO STAY
MRGXINOK OI    FLG1(R3),CHGL       MARK RECORD AS CHANGED
         A     R3,VIEWIDTH         ADD COLUMNS TO PROCESS
         SR    R3,R0               SUBTRACT COLUMNS TO GO
         A     R3,EDOFFSET         ADD OFFSET INTO RECORD
         LA    R3,CTLLEN(,R3)      POINT TO BYTE TO UPDATE
         MVC   0(1,R3),DOUBLE+4    LOAD NEW BYTE VALUE
         OI    EDFLG1,SAVEY+SAVEZ  FLAG IN-CORE DATA HAS CHANGED
MRGXCOLX LA    R6,1(,R6)           POINT TO NEXT NEW HIGH-ORDER NIBBLE
         LA    R14,1(,R14)         POINT TO NEXT NEW LOW-ORDER NIBBLE
         LA    R8,1(,R8)           POINT TO NEXT OLD HIGH-ORDER NIBBLE
         LA    R15,1(,R15)         POINT TO NEXT OLD LOW-ORDER NIBBLE
         BCT   R0,MRGXCOLP         PROCESS NEXT SCREEN COLUMN
         LM    R14,R12,12(R13)     RECORD DONE SO RESTORE REGISTERS
         A     R6,SCRNCOLS         POINT TO NEW LOW-NIBBLE LINE
         A     R6,SCRNCOLS         POINT TO NEW LINE OF DASHES
         LA    R7,EDIRSIZ+EDIRSIZ(,R7)
         A     R8,SCRNCOLS         POINT TO OLD LOW-NIBBLE LINE
         A     R8,SCRNCOLS         POINT TO OLD LINE OF DASHES
         SPACE
*         DELETE UNUSED LINE INSERTIONS
         SPACE
MERGNXT3 TM    EDIR1ST(R7),EDIRINS LINE INSERTION?
         BNO   MERGNXT4            NO
         L     R3,EDIRREC(,R7)     YES, POINT TO RECORD ENTRY
         TM    FLG1(R3),LINS       WAS THIS LINE USED?
         BNO   MERGNXT4            YES, KEEP IT
         L     R4,BAK(,R3)         POINT TO PREVIOUS RECORD
         L     R5,FWD(,R3)         POINT TO FOLLOWING RECORD
         ST    R4,BAK(,R5)         UPDATE FOLLOWING BACK POINTER
         ST    R5,FWD(,R4)         UPDATE PREVIOUS FORWARD POINTER
         MVC   FWD(4,R3),MPTANKOR  ADD THIS LINE TO EMPTY CHAIN
         OI    FLG2(R3),255-LLBL   FLAG LINE AS AWAITING REUSE
         ST    R3,MPTANKOR         UPDATE EMPTY CHAIN ORIGIN
         C     R3,CSRRECAD         WAS THE CURSOR ON THIS LINE?
         BNE   MERGNXT4            NO
         ST    R5,CSRRECAD         YES, MOVE IT TO THE NEXT LINE
         ST    R5,BAK(,R3)         ALSO, REMEMBER SUCCESSOR
         OI    EDFLG2,E2CRU        FLAG UPDATE
         SPACE
*         PREPARE TO PROCESS INPUT FROM NEXT SCREEN LINE
         SPACE
MERGNXT4 CLC   BTMADDR,EDIRREC(R7) JUST PROCESSED BOTTOM-OF-DATA?
         BE    EDMERGEX            YES, DO NOT PROCESS RESIDUAL DATA
         A     R6,SCRNCOLS         POINT TO NEXT CURRENT BUFFER LINE
         LA    R7,EDIRSIZ(,R7)     POINT TO NEXT LINE'S DIRECTORY ENTRY
         A     R8,SCRNCOLS         POINT TO NEXT PRE-INPUT BUFFER LINE
         C     R7,EDDIREND         BEYOND LAST SCREEN LINE?
         BNH   MERGELP1            NO, GO PROCESS NEXT SCREEN LINE
         SPACE
EDMERGEX SAC   0                   SET PRIMARY MODE
         L     R14,EDRETSV1        RESTORE RETURN ADDRESS
         BR    R14                 RETURN TO CALLER
         SPACE
         DROP  R10                 EDITMERG
         SPACE
MERGTRAN TR    8(0,R6),0(R2)       <<< EXECUTED >>>
MERGCOMP CLC   8(0,R6),8(R8)       <<< EXECUTED >>>
         SPACE
         TITLE '  E D I T P A R S   -   P R I M A R Y   I N P U T  '
*
*    PERFORM INITIAL PARSING OF THE PRIMARY INPUT COMMAND.
*    PROCESS FLAGGED COMMANDS LIKE 'CANCEL' AND 'RESET' IMMEDIATELY.
*    IF IT IS UNRECOGNISED THEN LOAD AN ERROR MESSAGE AND FLAG AN
*    ALARM STATUS.  OTHER VALID PRIMARY COMMANDS ARE LEFT PENDING.
*
         USING EDITPARS,R10
EDITPARS LR    R10,R15             SET LOCAL BASE
         ST    R14,EDRETSV1        SAVE RETURN ADDRESS
         SPACE
         SR    R0,R0
         ST    R0,PENDADDR         RESET PENDING PRIMARY COMMAND
         ST    R0,EDTAB@           RESET SOFTWARE TAB COLUMN
         C     R0,CSRRECAD         IS CURSOR ON A DATA LINE?
         BE    GOTSWTAB            NO, SO NO SOFTWARE TAB TO DO
         CLC   EDCSRCOL,EDFW8      CURSOR IN DATA PART OF SCREEN?
         BL    GOTSWTAB            NO, SO NO SOFTWARE TAB TO DO
         LA    R1,EDTAB#           POINT TO TAB COLUMNS
         LA    R5,(EDTABL/4)       GET MAXIMUM TAB COLUMN COUNT
GETSWTAB L     R2,0(,R1)           GET TAB COLUMN
         BCTR  R2,0                CONVERT COLUMN TO OFFSET
         C     R2,EDCSROFF         CURSOR BEYOND THIS TAB COLUMN?
         BNH   GOTSWTAB            YES, END OF TAB COLUMN CHECKING
         MVC   EDTAB@,0(R1)        NO, SET TAB COLUMN TO IMPLEMENT
         LA    R1,4(,R1)           POINT TO NEXT (LESS) TAB COLUMN
         BCT   R5,GETSWTAB         SCAN TABLE TO GET LEAST NEXT COLUMN
         MVC   EDTAB@,EDTABMIN     DONE ALL TABS, TIME TO GO LEFT
GOTSWTAB TM    STATUS16,$16RFC     'RFIND' OR 'RCHANGE' QUEUED?
         BZ    *+8                 NO
         ST    R0,EDTAB@           YES, RESET SOFTWARE TAB COLUMN
         TM    OPD0+6,PRESENT      ANY COMMAND ENTERED?
         BNO   EDPARSEX            NO, NO MORE TO DO HERE
         ST    R0,EDTAB@           YES, RESET SOFTWARE TAB COLUMN
         L     R1,OPD0             POINT TO COMMAND
         LH    R15,OPD0+4          GET SUBCOMMAND LENGTH CODE PLUS 1
         CLI   0(R1),C':'          MEANT TO BE A LINE COMMAND?
         BE    EDCLNCMD            YES
         L     R5,EDTCMDT@         POINT TO SUBCOMMAND TABLE
         NI    EDFLG4,255-E4RT1-E4RT2
         TM    STATUS13,$13RFE     RUNNING UNDER RFE MENU SYSTEM?
         BNO   EDTCMDLP            NO
         CLI   0(R1),C'='          JUMPING TO OTHER MENU ITEM?
         BNE   EDTCMDLP            NO
         SR    R15,R15             YES, MATCH ON THE ENTRY FOR '=X'
EDTCMDLP EX    R15,EDCMDTST        IS IT THIS SUBCOMMAND?
         BL    EDBADCMD            NO, IT'S NOT IN THE (SORTED) TABLE
         BE    GOTSBCMD            YES, FOUND IT
         LA    R5,EDTCMDL(,R5)     NO, POINT TO NEXT SUBCOMMAND
         B     EDTCMDLP            CONTINUE SEARCHING FOR SUBCOMMAND
         SPACE
GOTSBCMD SR    R1,R1               CLEAR FOR INSERT
         IC    R1,0(,R5)           LOAD FLAGS FOR SUBCOMMAND
         SRA   R1,1                ANY KEYWORDS TO CHECK FOR?
         BZ    SUBKEYOK            NO
         SLA   R1,2                YES, GET ADDRESS VECTOR SLOT NUMBER
         L     R1,EDKEYVEC-4(R1)   POINT TO SUBCOMMAND KEYWORD TABLE
         L     R15,EDKEYPRS        POINT TO KEYWORD PARSER
         BASR  R14,R15             CHECK SUBCOMMAND FOR KEYWORDS
SUBKEYOK L     R15,EDTCMDL-4(,R5)  GET SUBCOMMAND ROUTINE ADDRESS
         TM    0(R5),1             PROCESS COMMAND NOW?
         BOR   R15                 YES, PASS CONTROL TO IT
         ST    R5,PENDADDR         NO, SAVE ADDRESS AND FLAG PENDING
         L     R2,EDTCMDT@         POINT TO SUBCOMMAND TABLE
         L     R2,EDRT@$(,R2)      POINT TO EDRIGHT ROUTINE
         CR    R2,R15              IS PRIMARY COMMAND 'RIGHT'?
         BNE   EDPARSEX            NO, PRIMARY INPUT NOW PROCESSED
         OI    EDFLG4,E4RT1        YES, FLAG THIS
         B     EDPARSEX            PRIMARY INPUT NOW PROCESSED
         SPACE
EDCLNCMD TM    OPD1+6,PRESENT      OPERANDS PRESENT?
         BO    EDBADCMD            YES, INVALID
         CLI   OPD0+5,1            ANYTHING AFTER COLON?
         BNH   EDBADCMD            NO, INVALID
         CLI   OPD0+5,7            MORE THAN WILL FIT IN AREA?
         BH    EDBADCMD            YES, INVALID
         ICM   R0,15,CSRRECAD      IS CURSOR ON A DATA LINE?
         BZ    EDNOLINE            YES, NO PRIMARY COMMAND IS PENDING
         L     R6,EDCSRPOS         GET CURSOR POSITION
         S     R6,EDCSRCOL         GET OFFSET OF LINE START
         A     R6,EDYNAREA         POINT TO SCREEN LINE WITH CURSOR
EDPSLCLP CLI   0(R6),FLDINHI       LINE COMMAND FIELD PRESENT?
         BNH   EDLINCHK            YES, GOOD
         S     R6,SCRNCOLS         NO, PROBABLY HEX ON
         B     EDPSLCLP            TRY PREVIOUS LINE
EDLINCHK MVI   DYNTABLE,X'FF'      PREPARE TRANSLATE TABLE
         MVC   DYNTABLE+1(255),DYNTABLE
         MVI   DYNTABLE+C' ',0
         MVI   DYNTABLE+C'*',0
         MVI   DYNTABLE+QUOTE,0
         MVI   DYNTABLE+C'=',0
         XC    DYNTABLE+C'0'(10),DYNTABLE+C'0'
         TRT   1(6,R6),DYNTABLE    ANY LINE COMMAND PRESENT?
         BNZ   EDLINBAD            YES, CONFLICT
         MVC   1(6,R6),1(R1)       NO, LOAD IN LINE COMMAND TEXT
         B     EDPARSEX            PRIMARY COMMAND PROCESSING COMPLETE
         SPACE
EDLINBAD MVI   MSG,137             LINE COMMAND CONFLICT
         MVC   EDCSROUT,EDCSRPOS   LEAVE CURSOR WHERE IT IS
         OI    EDFLG2,E2CRU        FLAG CURSOR NOT TO BE MOVED
         B     EDBADFRZ            STOP AND COMPLAIN
         SPACE
EDNOLINE MVI   MSG,138             CURSOR NOT ON DATA LINE
EDBADFRZ OI    EDFLG1,E1FREEZE     PUT LINE COMMANDS ON HOLD
         B     EDBADBEL            SOUND AUDIBLE ALARM FOR ERROR
         SPACE
EDBADCMD MVI   MSG,20              INVALID COMMAND
         CLI   REPLY,ENTERAID      ENTER AID PRESENT?
         BNE   EDBADBEL            NO, WHOLE COMMAND NOT RECALLABLE
         TM    STATUS9,$9ISPF      ISPF PERFORMING SCREEN I/O?
         BO    EDBADBEL            YES, CAN'T RECALL FROM HERE
         L     R15,OPD0            POINT TO THE COMMAND
         CLI   0(R15),C'A'         ANYTHING SENSIBLE?
         BL    EDBADBEL            NO, DO NOT RECALL IT
         OI    STATUS14,$14RCL     REDISPLAY THE COMMAND
EDBADBEL OI    STATUS7,$7BELL      SOUND AUDIBLE ALARM FOR ERROR
         SPACE
EDPARSEX L     R14,EDRETSV1        RESTORE RETURN ADDRESS
         ICM   R0,15,EDTAB@        IMPLEMENTING A SOFTWARE TAB?
         BZR   R14                 NO, RETURN TO CALLER
         BCTR  R0,0                YES, CONVERT COLUMN TO OFFSET
         LR    R2,R0               COPY IT
         S     R0,EDOFFSET         ADJUST FOR LEFT/RIGHT SCROLL
         C     R0,VIEWIDTH         SCREEN TOO FAR LEFT TO REACH COLUMN?
         BL    EDTABOK2            NO, PROCEED
         LR    R0,R2               YES, RELOAD TAB OFFSET
         ST    R0,EDOFFSET         SCROLL RIGHT TO TARGET COLUMN
         A     R2,VIEWIDTH
         C     R2,MAXRECSZ         SCROLLED RIGHT BEYOND RECORD'S END?
         BNH   EDTABOK1            NO, PROCEED
         L     R2,MAXRECSZ         YES
         S     R2,VIEWIDTH
         ST    R2,EDOFFSET         SCROLL RIGHT MAX
EDTABOK1 S     R0,EDOFFSET         ADJUST FOR LEFT/RIGHT SCROLL
EDTABOK2 A     R0,EDFW8            ADJUST FOR LINE NUMBER AREA
         ST    R0,EDCSRCOL         SAVE NEW CURSOR COLUMN
         OI    EDFLG2,E2CRU        FLAG UPDATE
         BR    R14                 RETURN TO CALLER
         SPACE
         DROP  R10                 EDITPARS
         SPACE
         SPACE
*
*        SUBCOMMAND KEYWORD TABLE ENTRIES HAVE FORMAT OF:
*           1-BYTE INTERNAL CODE REPRESENTING KEYWORD,
*           1-BYTE KEYWORD LENGTH CODE RESTRICTIONS,
*           8-BYTE AREA CONTAINING LEFT-JUSTIFIED KEYWORD.
*
*        IF THE LENGTH CODE VALUE IS > 7, THEN THE MAXIMUM
*        LENGTH CODE IS THE VALUE ANDED (SIC) WITH 7 AND THE
*        MINIMUM LENGTH CODE IS THE VALUE DIVIDED BY 16.
*        THAT IS: B'0.......' - SHOULD ALWAYS BE ZERO
*                 B'.111....' - MINIMUM LENGTH CODE (RANGE IF NOT 0)
*                 B'....1...' - FLAG RANGE IF MIN LEN CODE = 0
*                 B'.....111' - EXACT OR MAXIMUM LENGTH CODE
*                 B'00000...' - NEED EXACT LEN CODE (NOT A RANGE)
*
*        THE TABLE IS TERMINATED BY A BYTE OF HIGH VALUES.
*
*        IDENTIFIED KEYWORDS HAVE THEIR INTERNAL CODE LOADED
*        INTO THE LAST BYTE OF THE 8-BYTE OPERAND DESCRIPTOR.
*
*        INTERNAL CODE CLASHES WITH VALID STRING TYPES (SUCH
*        AS 'C', 'P', 'T' AND 'X') SHOULD BE AVOIDED BECAUSE
*        THE SAME BYTE IS USED BY REVCOMM COMMAND PARSING TO
*        STORE THE STRING TYPE.
*
*        REVEDIT ALSO USES THE SAME BYTE TO FLAG AN OPERAND
*        DESCRIBING A VALID LABEL WITH AN 'L'.
*
         CNOP  0,4
EDKEYVEC DC    A(0)                SLOT 1 - 'ON'/'OFF' (DEFAULT)
         DC    A(EDKEYLOC)         SLOT 2 - LOCATE
         DC    A(EDKEYRES)         SLOT 3 - RESET
         DC    A(EDKEYFND)         SLOT 4 - F / FN / C / X / XN
         DC    A(EDKEYDEL)         SLOT 5 - DELETE
         DC    A(EDKEYSRT)         SLOT 6 - SORT
         DC    A(EDKEYCMP)         SLOT 7 - COMPARE
         DC    A(EDKEYNUM)         SLOT 8 - NUMBER
         SPACE
EDKEYLOC DC    0H'0'
         DC    AL1(00+04,X'04'),CL8'FIRST   '
         DC    AL1(00+08,X'03'),CL8'NEXT    '
         DC    AL1(00+12,X'03'),CL8'PREV    '
         DC    AL1(00+16,X'03'),CL8'LAST    '
         DC    AL1(64+04,X'26'),CL8'COMMAND '  RANGE: COM -> COMMAND
         DC    AL1(64+04,X'02'),CL8'CMD     '
         DC    AL1(64+08,X'25'),CL8'CHANGE  '  RANGE: CHA -> CHANGE
         DC    AL1(64+08,X'02'),CL8'CHG     '
         DC    AL1(64+12,X'24'),CL8'ERROR   '  RANGE: ERR -> ERROR
         DC    AL1(64+16,X'25'),CL8'UPDATE  '  RANGE: UPD -> UPDATE
         DC    AL1(64+20,X'24'),CL8'LABEL   '  RANGE: LAB -> LABEL
         DC    AL1(64+24,X'00'),CL8'X       '
         DC    AL1(64+24,X'17'),CL8'EXCLUDED'  RANGE: EX -> EXCLUDED
         DC    AL1(64+28,X'26'),CL8'SPECIAL '  RANGE: SPE -> SPECIAL
         DC    AL1(255,0)
         SPACE
EDKEYRES DC    0H'0'
         DC    AL1(04*01,X'26'),CL8'COMMAND '  RANGE: COM -> COMMAND
         DC    AL1(04*01,X'02'),CL8'CMD     '
         DC    AL1(04*02,X'25'),CL8'CHANGE  '  RANGE: CHA -> CHANGE
         DC    AL1(04*02,X'02'),CL8'CHG     '
         DC    AL1(04*03,X'24'),CL8'ERROR   '  RANGE: ERR -> ERROR
         DC    AL1(04*04,X'24'),CL8'LABEL   '  RANGE: LAB -> LABEL
         DC    AL1(04*05,X'26'),CL8'SPECIAL '  RANGE: SPE -> SPECIAL
         DC    AL1(04*06,X'00'),CL8'X       '
         DC    AL1(04*06,X'17'),CL8'EXCLUDED'  RANGE: EX -> EXCLUDED
         DC    AL1(04*07,X'02'),CL8'ALL     '
         DC    AL1(04*08,X'05'),CL8'SOURCE  '  SAME AS 'ASCII OFF'
         DC    AL1(04*09,X'03'),CL8'HIDE    '  SAME AS 'HIDE OFF'
         DC    AL1(255,0)
         SPACE
EDKEYFND DC    0H'0'
         DC    AL1(00001,X'04'),CL8'FIRST   '
         DC    AL1(00002,X'03'),CL8'NEXT    '
         DC    AL1(00003,X'03'),CL8'PREV    '
         DC    AL1(00004,X'03'),CL8'LAST    '
         DC    AL1(00005,X'02'),CL8'ALL     '
         DC    AL1(00006,X'25'),CL8'PREFIX  '  RANGE: PRE -> PREFIX
         DC    AL1(00007,X'25'),CL8'SUFFIX  '  RANGE: SUF -> SUFFIX
         DC    AL1(00008,X'03'),CL8'WORD    '
         DC    AL1(00009,X'17'),CL8'EXCLUDED'  RANGE: EX -> EXCLUDED
         DC    AL1(00009,X'00'),CL8'X       '
         DC    AL1(00010,X'01'),CL8'NX      '
         DC    AL1(00011,X'26'),CL8'UPDATED '  RANGE: UPD -> UPDATED
         DC    AL1(00012,X'27'),CL8'NOUPDATE'  RANGE: NOU -> NOUPDATE
EDKEYFHI EQU   12                  HIGHEST KEYWORD CODE IN TABLE
         DC    AL1(255,0)
         SPACE
EDKEYNUM DC    0H'0'
         DC    AL1(00001,X'01'),CL8'ON      '
         DC    AL1(00002,X'02'),CL8'OFF     '
         DC    AL1(00003,X'02'),CL8'STD     '
         DC    AL1(00004,X'04'),CL8'COBOL   '
         DC    AL1(255,0)
         SPACE
EDELA    EQU   1
EDELX    EQU   2
EDELN    EQU   3
EDKEYDEL DC    0H'0'
         DC    AL1(EDELA,X'02'),CL8'ALL     '
         DC    AL1(EDELX,X'17'),CL8'EXCLUDED'  RANGE: EX -> EXCLUDED
         DC    AL1(EDELX,X'00'),CL8'X       '
         DC    AL1(EDELN,X'01'),CL8'NX      '
         DC    AL1(255,0)
         SPACE
EDKEYSRT DC    0H'0'
         DC    AL01(EDSA,X'00'),CL8'A       '
         DC    AL01(EDSD,X'00'),CL8'D       '
         DC    AL01(EDSX,X'17'),CL8'EXCLUDED'  RANGE: EX -> EXCLUDED
         DC    AL01(EDSX,X'00'),CL8'X       '
         DC    AL1(EDSNX,X'01'),CL8'NX      '
         DC    AL1(255,0)
         SPACE
EDKEYCMP DC    0H'0'
         DC    AL1(00001,X'26'),CL8'SESSION '  RANGE: SES -> SESSION
         DC    AL1(00001,X'00'),CL8'*       '
         DC    AL1(00002,X'00'),CL8'X       '
         DC    AL1(00002,X'17'),CL8'EXCLUDED'  RANGE: EX -> EXCLUDED
*        DC    AL1(00003,X'??'),CL8'????????'  AVAILABLE IF REQUIRED
         DC    AL1(00004,X'03'),CL8'NEXT    '
         DC    AL1(255,0)
         SPACE
         SPACE
         DC    0H'0'
         SPACE
         TITLE '  C A N C E L   &&   R E S E T  '
         USING EDCANCEL,R15
EDCANCEL OI    EDFLG1,E1CNCL       FLAG IMMEDIATE TERMINATION REQUESTED
         XC    OPD1(8+8),OPD1      IGNORE ALL OPERANDS
         LA    R15,EDRESET
         DROP  R15                 EDCANCEL
         SPACE
         USING EDRESET,R7
EDRESET  LR    R7,R15              SET LOCAL BASE
         NI    STATUS16,255-$16RFC CLEAR ANY PENDING COMMANDS
         NI    EDFLG5,255-E5COMP-E5SEQS-E5XCLD-E5NEXT-E5CUT
         SPACE
*   'DOUBLE' IS USED TO RECORD OPERAND PARSING STATUS
*
*        VALUE AT DOUBLE+0:
*           RECORD ENTRY 'FLG1' AND BIT MASK
*
*        VALUE AT DOUBLE+1:
*           RECORD ENTRY 'FLG2' AND BIT MASK
*
*        VALUE AT DOUBLE+2:
*           X'80' - RESETTING COMMANDS
*           X'40' - RESETTING LABELS (REDUNDANCY SIMPLIFIES TESTING)
*           X'20' - RESETTING SPECIAL LINES (DELETING MESSAGES)
*           X'10' - RESETTING HIDDEN EXCLUSIONS
*
*        VALUE AT DOUBLE+3:
*           'S' - RESETTING SOURCE ENCODING (EQUIVALENT TO 'ASCII OFF')
*
*        VALUE OF HALFWORD AT DOUBLE+4:
*             0 - NO LABELS SPECIFIED
*           > 0 - OPD OFFSET OF LABEL SAVED AT 20(R13)
*
*        VALUE OF HALFWORD AT DOUBLE+6:
*             0 - FEWER THAN TWO LABELS SPECIFIED
*           > 0 - OPD OFFSET OF LABEL SAVED AT 26(R13)
*
*        SINCE THE NUMBER OF OPERAND DESCRIPTORS EXCEEDS THE NUMBER
*        OF VALID OPERANDS THAN CAN BE SPECIFIED, THERE IS NO NEED
*        TO LIMIT THE NUMBER OF OPERANDS PARSED, BECAUSE AN ABSENT
*        (IE. THE END OF THE SPECIFIED OPERANDS HAS BEEN REACHED)
*        OR INVALID OPERAND MUST BE ENCOUNTERED BEFORE THE END OF
*        THE OPERAND DESCRIPTOR LIST IS REACHED.
         SPACE
         XC    DOUBLE,DOUBLE       RESET PARSING STATUS
         MVC   RESWORK(8),TOPADDR  PREPARE FOR NO LABEL RANGE
         MVC   DOUBLE(4),EDRESPRE  SET UP FOR PARSING
         LA    R15,OPD0            POINT TO COMMAND DESCRIPTOR
EDRESOLP LA    R15,8(,R15)         POINT TO NEXT OPERAND DESCRIPTOR
         TM    6(R15),PRESENT      IS IT PRESENT?
         BNO   EDRESOND            NO, END OF OPERANDS REACHED
         CLI   4(R15),0            SENSIBLE LENGTH?
         BNE   EDRBADOP            NO
         TM    6(R15),QUOTED       IS OPERAND QUOTED?
         BO    EDRBADOP            YES, INVALID
         TM    7(R15),3            IS IT A KEYWORD?  (MULTIPLE OF 4?)
         BNZ   EDRESLAB            NO, SHOULD BE A LABEL
         SR    R14,R14             CLEAR FOR INSERT
         ICM   R14,1,7(R15)        GET CODE - IS IT A KEYWORD?
         BZ    EDRESLAB            NO, SHOULD BE A LABEL
EDRESBRT B     EDRESBRT(R14)       YES, BRANCH TO KEYWORD HANDLER
         B     EDRESCOM
         B     EDRESCHG
         B     EDRESERR
         B     EDRESLBL
         B     EDRESSPE
         B     EDRESEXC
         B     EDRESALL
         B     EDRESSRC
         OI    DOUBLE+2,X'10'      FLAG 'HIDE' OPERAND
         B     EDRESOLP            GO PROCESS NEXT OPERAND
EDRESSRC MVI   DOUBLE+3,C'S'       FLAG 'SOURCE' OPERAND
         B     EDRESOLP            GO PROCESS NEXT OPERAND
EDRESCOM OI    DOUBLE+2,X'80'      FLAG 'COMMAND' OPERAND
         B     EDRESOLP            GO PROCESS NEXT OPERAND
EDRESCHG NI    DOUBLE,255-CHGA     FLAG 'CHANGE' OPERAND
         B     EDRESOLP            GO PROCESS NEXT OPERAND
EDRESERR NI    DOUBLE,255-CHGE     FLAG 'ERROR' OPERAND
         B     EDRESOLP            GO PROCESS NEXT OPERAND
EDRESLBL NI    DOUBLE+1,255-LLBL   FLAG 'LABEL' OPERAND
         OI    DOUBLE+2,X'40'      FLAG 'LABEL' OPERAND
         B     EDRESOLP            GO PROCESS NEXT OPERAND
EDRESSPE OI    DOUBLE+2,X'20'      FLAG 'SPECIAL' OPERAND
         B     EDRESOLP            GO PROCESS NEXT OPERAND
EDRESEXC NI    DOUBLE,255-XCLD     FLAG 'EXCLUDE' OPERAND
         B     EDRESOLP            GO PROCESS NEXT OPERAND
EDRESALL NI    DOUBLE,255-XCLD-CHGA-CHGE
         NI    DOUBLE+1,255-LLBL
         OI    DOUBLE+2,X'F0'      FLAG 'ALL' OPERAND
         MVI   DOUBLE+3,C'S'
         B     EDRESOLP            GO PROCESS NEXT OPERAND
         SPACE
EDRESLAB BAS   R14,EDVLABEL        SET R0->LABEL AND DO SOME CHECKS
         CLI   7(R15),C'L'         DOES OPERAND SPECIFY A LABEL?
         BNE   EDRBADOP            NO, INVALID OPERAND
         LA    R14,DOUBLE+4        TRY FOR FIRST LABEL
         LA    R2,RESWORK
         CLI   1(R14),0            ALREADY ENCOUNTERED A LABEL?
         BE    EDRESSAV            NO
         LA    R14,DOUBLE+6
         LA    R2,RESWORK+4
         CLI   1(R14),0            ALREADY ENCOUNTERED 2 LABELS?
         BNE   EDRBADOP            YES, INVALID
EDRESSAV ST    R0,0(,R2)           SAVE LINE ELEMENT ADDRESS
         LR    R3,R15              POINT TO OPERAND DESCRIPTOR
         LA    R0,OPD0             POINT TO COMMAND DESCRIPTOR
         SR    R3,R0               GET OPD OFFSET
         STH   R3,0(,R14)          SAVE IT IN DOUBLE
         B     EDRESOLP            LABEL OPERAND NOW PROCESSED
         SPACE
EDRESOND CLC   DOUBLE(4),EDRESPRE  ANY KEYWORDS SPECIFIED?
         BNE   EDRESRNG            YES, AND THEY HAVE BEEN REGISTERED
         MVC   DOUBLE(4),EDRESDFT  NO, SET THE DEFAULT RESET ACTION
EDRESRNG ICM   R0,3,DOUBLE+4       ANY LABELS SPECIFIED?
         BZ    EDRESRDY            NO, THAT'S FINE
         ICM   R0,3,DOUBLE+6       TWO LABELS SPECIFIED?
         BNZ   EDRESRDY            YES, SO A RANGE HAS BEEN SPECIFIED
         MVI   MSG,210             LABEL RANGE NOT FULLY SPECIFIED
         LH    R1,DOUBLE+4         FIRST LABEL IS BAD OPERAND
         LA    R1,OPD0(R1)         CONVERT OFFSET TO ADDRESS
         B     EDRPT2OP
         SPACE
*    PARSING OF 'RESET' SUBCOMMAND IS NOW COMPLETE
         SPACE
EDRESRDY CLI   DOUBLE+3,C'S'       RESETTING SOURCE ENCODING?
         BNE   EDRSRCOK            NO
         MVI   EPASCII,C'0'        YES
         NI    MODE,255-MD_ASCII
         CLC   DOUBLE(3),EDRESPRE  ANYTHING ELSE TO DO?
         BE    EDRESETX            NO, SO SKIP STUFF AND EXIT QUICKLY
EDRSRCOK TM    DOUBLE+2,X'10'      RESETTING HIDDEN EXCLUSIONS?
         BNO   EDRSHDOK            NO
         MVI   EPHIDE,C'0'         YES, PERFORM 'HIDE OFF'
EDRSHDOK TM    DOUBLE+2,X'40'      RESETTING LABELS?
         BNO   EDRLBLOK            NO
         CLC   RESWORK(8),TOPADDR  RESETTING ALL LINES?
         BNE   EDRLBLOK            NO
         BAS   R3,FREELBLS         YES, PROVIDE BIG PERFORMANCE BOOST
         SPACE
*    CLEAR ON-SCREEN LINE COMMANDS
         SPACE
EDRLBLOK L     R1,EDYNAREA         POINT TO PANEL DYNAMIC AREA
EDRDIRLL CLI   1(R1),C'-'          EXCLUDED LINES MARKER?
         BE    EDRDIRBL            YES, BLANK IT
         TM    DOUBLE+2,X'80'      RESETTING COMMANDS?
         BNO   EDRDIRNL            NO, ON TO NEXT LINE
EDRDIRBL MVC   1(6,R1),EDBLNKS     BLANK COMMAND AREA
EDRDIRNL A     R1,SCRNCOLS         POINT TO NEXT SCREEN LINE
         C     R1,SHADOWBF         STILL IN PRIMARY SCREEN BUFFER?
         BL    EDRDIRLL            YES, LOOP THROUGH ALL LINES
         SPACE
*    SEARCH FOR FIRST LINE TO RESET
         SPACE
         L     R2,TOPADDR          POINT TO TOP OF DATA
         SR    R4,R4               RESET LINE NUMBER
         LAM   A0,A15,EDZEROS      ZERO ACCESS REGISTERS
         LAM   A2,A2,DSPCALET      LOAD DATA SPACE ALET
         SAC   512                 SET AR MODE
EDRES1LP C     R2,RESWORK          FIRST LABEL MATCH FOR THIS 'RESET'?
         BE    EDRES2LP            YES, OPERANDS WERE IN ORDER
         C     R2,RESWORK+4        FIRST LABEL MATCH FOR THIS 'RESET'?
         BE    EDRES2GT            YES, OPERANDS IN REVERSE ORDER
         A     R4,EDFW1            NO, INCREMENT LINE NUMBER
         ICM   R2,15,FWD(R2)       POINT TO NEXT LINE
         BNZ   EDRES1LP            KEEP LOOKING FOR FIRST LABEL
         B     EDRESETX            SHOULD NOT HAPPEN, BUT...
EDRES2GT MVC   RESWORK+4(4),RESWORK
         ST    R2,RESWORK          SWAP TO "CORRECT" THE ORDER
         SPACE
*    RESET EACH LINE
         SPACE
EDRES2LP MVC   32(6,R13),EDZEROS   CLEAR LABEL COMPARE AREA
         TM    DOUBLE+2,X'A0'      RESETTING COMMANDS OR SPECIAL LINES?
         BZ    EDRCMDOK            NO
         MVC   ECHO(6,R2),EDBLNKS  YES, CLEAR LINE'S LINE COMMAND
         LA    R3,CMDANKOR-EDIRSIZ POINT TO COMMAND LIST ANCHOR
EDRCMDLP ICM   R3,15,CMDENEXT(R3)  POINT TO NEXT COMMAND ELEMENT
         BZ    EDRCMDOK            END OF COMMAND ELEMENT CHAIN
         C     R2,EDIRREC(,R3)     COMMAND FOR THIS LINE?
         BNE   EDRCMDLP            NO, KEEP LOOKING
         MVI   CMDECODE(R3),C'N'   ARRANGE FOR COMMAND ELEMENT DISPOSAL
EDRCMDOK TM    FLG2(R2),LLBL       IS THIS LINE LABELLED?
         BNO   EDRLABOK            NO
         TM    DOUBLE+2,X'C0'      RESETTING COMMANDS AND/OR LABELS?
         BZ    EDRLABOK            NO, NEITHER, SO SKIP A LOT OF WORK
         LA    R1,LABANKOR         POINT TO LABEL ELEMENT CHAIN ORIGIN
         USING @EDLABEL,R1
EDRLABLP LR    R3,R1               SAVE PREVIOUS LABEL ELEMENT ADDRESS
         ICM   R1,15,EDL_NEXT      POINT TO NEXT LABEL ELEMENT ON CHAIN
         BZ    EDRLABNT            SHOULD NOT REACH END OF CHAIN
         C     R2,EDL_ADDR         FOUND LINE'S LABEL ELEMENT?
         BNE   EDRLABLP            NO, KEEP SEARCHING CHAIN
         MVC   32(6,R13),EDL_NAME  YES, COPY THE LABEL NAME
EDRLABNT CLI   ECHO(R2),C'.'       NEED TO REFRESH THE LABEL?
         BH    EDRRELAB            NO
         MVC   ECHO(6,R2),32(R13)  YES, RELOAD LINE'S LABEL
EDRRELAB TM    DOUBLE+1,LLBL       RETAINING LINE LABELS?
         BO    EDRLABOK            YES, DO NOT CLEAR IT
         LTR   R1,R1               FOUND THE LABEL ELEMENT?
         BZ    EDRLABGN            NO, IT'S GONE
         MVC   EDL_NEXT-@EDLABEL(4,R3),EDL_NEXT  DECHAIN ELEMENT
         L     R15,LBBANKOR        POINT TO NEWEST LABEL BLOCK
         USING @EDLBLHD,R15
         MVC   EDL_NEXT,ELH_FREE
         ST    R1,ELH_FREE         PUT ELEMENT ON FREE-TO-REUSE CHAIN
         DROP  R1,R15              @EDLABEL, @EDLBLHD
EDRLABGN NI    FLG3(R2),255-LNEW   RESET UNMATCHED DATA FLAG
         CLC   ECHO(6,R2),32(R13)  NEED TO CLEAR LABEL ECHO?
         BNE   EDRLABOK            NO
         MVC   ECHO(6,R2),EDBLNKS  YES, CLEAR LINE'S LABEL ECHO
EDRLABOK TM    FLG1(R2),LMSG       IS THIS A MESSAGE LINE?
         BNO   EDRSPEOK            NO
         S     R4,EDFW1            YES, DON'T COUNT THIS LINE
         TM    DOUBLE+2,X'20'      RESETTING SPECIAL LINES?
         BNO   EDRSPEOK            NO
         LM    R0,R1,FWD(R2)       YES, SAVE CHAIN POINTER VALUES
         OI    FLG3(R2),LDEL       FLAG THIS LINE AS DELETED
         MVC   FWD(4,R2),MPTANKOR  POINT TO EMPTY CHAIN
         ST    R2,MPTANKOR         ADD THIS TO THE EMPTY CHAIN
         LR    R2,R0               POINT TO NEXT LINE
         ST    R1,BAK(,R2)         POINT BACK TO PREVIOUS LINE
         LR    R2,R1               POINT TO PREVIOUS LINE
         ST    R0,FWD(,R2)         POINT FORWARD TO NEXT LINE
         L     R1,MSGLINES
         BCTR  R1,0                DECREMENT THE MESSAGE LINE COUNT
         ST    R1,MSGLINES         SAVE THE UPDATED COUNT
         CLC   MPTANKOR,LINEADDR   WAS THIS THE TOP SCREEN LINE?
         BNE   EDRSPEDN            NO
         ST    R2,LINEADDR         YES, SO REPOSITION TO DATA LINE
EDRSPEDN CLC   MPTANKOR,RESWORK+4  IS THIS THE LAST LINE TO RESET?
         BE    EDRESETX            YES, DATA LINE SCAN COMPLETE
EDRSPEOK NC    FLG1(2,R2),DOUBLE   RESET SPECIFIED FLAGS
         TM    DOUBLE+1,LLBL       RESETTING LABELS?
         BO    *+8                 NO
         NI    FLG3(R2),255-LNEW   YES, ALSO RESET COMPARE RESULT
         TM    DOUBLE,XCLD         RESETTING ECLUSIONS?
         BO    EDRTOPCK            NO
         CLI   ECHO(R2),C'-'       EXCLUDED LINE ECHO PRESENT?
         BNE   EDRTOPCK            NO
         MVC   ECHO(6,R2),EDBLNKS  YES, CLEAR LINE'S LABEL ECHO
EDRTOPCK C     R4,LINENMBR         LINE BEFORE TOP-OF-SCREEN?
         BL    EDRESNXT            YES, NO NEED TO CHECK SCREEN
         L     R5,EDDIREND         POINT TO LAST DIRECTORY ENTRY
         C     R4,EDIR1ST(,R5)     LINE AFTER BOTTOM-OF-SCREEN?
         BH    EDRESNXT            YES, NO NEED TO CHECK SCREEN
         TM    DOUBLE+2,X'C0'      RESETTING COMMANDS AND/OR LABELS?
         BZ    EDRESNXT            NO, NEITHER, NO NEED TO CHECK SCREEN
         L     R5,EDITDIR@         POINT TO FIRST ROW DIRECTORY ENTRY
         L     R1,EDYNAREA         POINT TO PANEL DYNAMIC AREA
         CLI   EDIRREC(R5),EDIRCOL COLUMN INDICATOR LINE?
         BE    EDRDIRNX            YES, NOT A RECORD LINE
EDRDIRLP CLI   1(R1),C'-'          EXCLUDED LINES MARKER?
***@@@   BNE   EDRDIRX1            NO
***@@@   MVC   1(6,R1),EDBLNKS     YES, CLEAR THEM
EDRDIRX1 C     R2,EDIRREC(,R5)     RECORD ON THIS SCREEN LINE?
         BNE   EDRDIRNX            NO, TRY NEXT SCREEN LINE
         CLI   ECHO(R2),C'-'       EXCLUDED LINES MARKER?
         BNE   EDRDIRX2            NO
         MVC   ECHO(6,R2),EDBLNKS  YES, CLEAR THEM
EDRDIRX2 CLC   1(6,R1),32(R13)     DOES SCREEN SHOW LINE'S LABEL?
         BE    EDRLBCHK            YES
         TM    DOUBLE+2,X'80'      RESETTING COMMANDS?
         BZ    EDRLABCK            NO, BRANCH TO NEW KLUDGE
         MVC   1(6,R1),ECHO(R2)    CLEAR COMMAND WITH BLANKS OR LABEL
         B     EDRESNXT            WON'T ALSO BE ON ANOTHER SCREEN LINE
* THE NEXT 5 LINES ARE NEEDED SINCE ADDING THE CALL TO FREELBLS ABOVE
EDRLABCK TM    DOUBLE+2,X'40'      RESETTING LABELS?
         BZ    EDRDIRNX            NO, LEAVE LINE'S MARGIN UNCHANGED
         CLI   1(R1),C'.'          ANY SORT OF LABEL PRESENT?
         BNE   EDRDIRNX            NO, LEAVE LINE'S MARGIN UNCHANGED
         B     EDRLBCLR            YES, CLEAR IT
EDRDIRNX C     R5,EDDIREND         IS THIS THE LAST DIRECTORY ENTRY?
         BE    EDRESNXT            YES, THIS RECORD NOW RESET
         LA    R5,EDIRSIZ(,R5)     POINT TO NEXT DIRECTORY ENTRY
         A     R1,SCRNCOLS         POINT TO NEXT SCREEN LINE
         B     EDRDIRLP            GO PROCESS NEXT SCREEN LINE
EDRLBCHK TM    DOUBLE+2,X'40'      RESETTING LABELS?
         BZ    EDRDIRNX            NO, LEAVE LINE'S MARGIN UNCHANGED
EDRLBCLR MVC   1(6,R1),ECHO(R2)    CLEAR LABEL WITH BLANKS
*        B     EDRESNXT            WON'T ALSO BE ON ANOTHER SCREEN LINE
EDRESNXT C     R2,RESWORK+4        IS THIS THE LAST LINE TO RESET?
         BE    EDRESETX            YES, DATA LINE SCAN COMPLETE
         A     R4,EDFW1            NO, INCREMENT LINE NUMBER
         ICM   R2,15,FWD(R2)       POINT TO NEXT LINE
         BNZ   EDRES2LP            CONTINUE WITH RESET PROCESS
         SPACE
EDRESETX SAC   0                   SET PRIMARY MODE
         L     R14,EDRETSV1        RESTORE RETURN ADDRESS
         BR    R14                 RETURN TO CALLER (OF EDITPARS)
         SPACE
EDRES2ND LH    R1,DOUBLE+6         SECOND LABEL IS BAD OPERAND
         B     EDRESOFF
EDRES1LB LH    R1,DOUBLE+4         FIRST LABEL IS BAD OPERAND
EDRESOFF LA    R1,OPD0(R1)         CONVERT OFFSET TO ADDRESS
EDRBADOP MVI   MSG,34              INVALID OPERAND
EDRPT2OP CLI   REPLY,ENTERAID      ENTER AID PRESENT?
         BNE   EDRBADEX            NO, WHOLE COMMAND NOT RECALLABLE
         TM    STATUS9,$9ISPF      ISPF PERFORMING SCREEN I/O?
         BO    EDRBADEX            YES, CAN'T RECALL FROM HERE
         S     R1,OPD0             GET OPERAND OFFSET IN COMMAND STRING
         BNP   EDRBADEX            JUST IN CASE
         LA    R1,1(,R1)           CONVERT OFFSET TO POSITION
         ST    R1,REVPOS           SET CURSOR POSITION
         MVC   REVCSR,EDZCMDNM     SET CURSOR FIELD
         MVC   EDCSROUT,EDZEROS    REMOVE CURSOR FROM DYNAMIC AREA
         MVC   CSRRECAD,EDZEROS    REMOVE CURSOR FROM DYNAMIC AREA
         OI    STATUS14,$14RCL     REDISPLAY THE COMMAND
EDRBADEX OI    STATUS7,$7BELL      SOUND AUDIBLE ALARM FOR ERROR
         L     R14,EDRETSV1        RESTORE RETURN ADDRESS
         BR    R14                 RETURN TO CALLER (OF EDITPARS)
         SPACE
         DROP  R7                  EDRESET
         SPACE
EDRESPRE DC    X'FFFF0000'                      PRE-PARSING SETTINGS
EDRESDFT DC    AL1(255-XCLD-CHGA-CHGE,255,X'B0',0)  DEFAULT SETTINGS
         TITLE '  E D I T L I N E   -   L I N E   I N P U T  '
*
*    PARSE INPUT LINE COMMANDS.  IF ALL LINE COMMANDS ARE RESOLVED
*    THEN PROCESS ALL PENDING LINE COMMANDS.  LOAD A MESSAGE TO SHOW
*    INVALID OR INCOMPLETE LINE COMMAND STATUS.
*
         USING EDITLINE,R10
EDITLINE LR    R10,R15             SET LOCAL BASE
         ST    R14,EDRETSV1        SAVE RETURN ADDRESS
         SPACE
*         EXTRACT INPUT LINE COMMANDS
         SPACE
         L     R6,EDYNAREA         GET ADDRESS OF UPDATED SCREEN DATA
         L     R7,EDITDIR@         GET SCREEN LINE DIRECTORY ADDRESS
         L     R8,EDYNCOPY         GET ADDRESS OF OUTPUT SCREEN DATA
         LAM   A0,A15,EDZEROS      CLEAR ALL ACCESS REGISTERS
         LAM   A14,A14,DSPCALET    LOAD DATA SPACE ALET
         LAM   A15,A15,DSPCALET    LOAD DATA SPACE ALET
         SAC   512                 SET AR MODE
         SPACE
LNCMDLP1 CLI   0(R6),FLDINHI       LINE COMMAND FIELD PRESENT?
         BH    LNCMDNXT            NO, PROBABLY HEX ON
         L     R15,EDIRREC(,R7)    POINT TO FILE RECORD'S ENTRY
         TM    FLG3(R15),LDEL      HAS THIS LINE BENN DELETED?
         BO    LNCMDNXT            YES, IGNORE IT
         MVC   ECHO(6,R15),EDBLNKS CLEAR LINE'S LINE COMMAND
         MVC   DYNTABLE,CMDCHRTB   PRIME TRANSLATE TABLE
         TM    EDIR1ST(R7),EDIRINS INSERTING THIS LINE?
         BNO   LNOQUOTE            NO
         MVI   DYNTABLE+C'-',X'FF' YES, DASH(ES) INVALID
         B     LNOASTER            CONTINUE
LNOQUOTE MVI   DYNTABLE+QUOTE,X'FF'
         TM    FLG1(R15),XCLD      EXCLUDED LINE(S) ON SCREEN LINE?
         BO    LNOASTER            YES, ASTERISK(S) INVALID
         MVI   DYNTABLE+C'-',X'FF' NO, DASH(ES) INVALID
         ICM   R14,15,BAK(R15)     TOP OF DATA?
         BZ    LNCMDTRT            YES, ASTERISK IS VALID
         ICM   R14,15,FWD(R15)     END OF DATA?
         BZ    LNCMDTRT            YES, ASTERISK IS VALID
         TM    FLG1(R15),LMSG      MESSAGE LINE(S) ON SCREEN LINE?
         BNO   LNOASTER            NO, EQUALS SIGN INVALID
         MVI   DYNTABLE+C'=',0     YES, EQUALS SIGN IS VALID
LNOASTER MVI   DYNTABLE+C'*',X'FF' ASTERISK IS INVALID
LNCMDTRT L     R2,EDKAPSAD
         TR    1(6,R6),0(R2)       ENSURE ANY TEXT IS IN UPPER CASE
         SR    R1,R1               SET MORE PERSISTENT TRT CC=0 FLAG
         TRT   1(6,R6),DYNTABLE    DETECT COMMAND IN LINE COMMAND AREA
         STC   R2,CALLPARM         SAVE COMMAND CHARACTER CODE BYTE
         LR    R0,R1               POINT TO FOUND COMMAND
         SR    R0,R6               GET OFFSET INTO LINE
         LA    R2,6                GET LENGTH OF LINE COMMAND FIELD
         SR    R2,R0               GET MAXIMUM LENGTH CODE OF COMMAND
         TM    FLG2(R15),LLBL      DOES THIS LINE HAVE A LABEL?
         BZ    LNCMDTST            NO
         CLI   1(R8),C'.'          WAS THE LABEL BEING SHOWN?
         BNE   LNCMDTST            NO, DO NOT ERASE LABEL
         LA    R0,1(,R6)           POINT TO WHERE PERIOD WAS
         CR    R1,R0               DOES NEW INPUT START THERE?
         BE    LNCMDTST            YES, DO NOT ERASE LABEL
         LTR   R3,R1               POINT TO REMAINING COMMAND TEXT
         BZ    LNLBLGON            THE WHOLE LABEL HAS BEEN CLEARED
         SR    R3,R6               GET SCREEN LINE OFFSET
         AR    R3,R8               POINT TO (PRE-DISPLAY) OUTPUT TEXT
         EX    R2,EOCMDCHG         REST OF FIELD UNCHANGED?
         BNE   LNCMDTST            NO, DO NOT ERASE LABEL
LNLBLGON ST    R1,DOUBLE           SAVE TRT RESULT INDICATOR
         LA    R1,LABANKOR         POINT TO LABEL ELEMENT CHAIN ORIGIN
         USING @EDLABEL,R1
LNLBLLP5 LR    R3,R1               SAVE PREVIOUS LABEL ELEMENT ADDRESS
         ICM   R1,15,EDL_NEXT      POINT TO NEXT LABEL ELEMENT ON CHAIN
         BZ    LNTRTCHK            SHOULD NOT REACH END OF CHAIN
         C     R15,EDL_ADDR        FOUND LINE'S LABEL ELEMENT?
         BNE   LNLBLLP5            NO, KEEP SEARCHING CHAIN
         MVC   EDL_NEXT-@EDLABEL(4,R3),EDL_NEXT  DECHAIN ELEMENT
         NI    FLG2(R15),255-LLBL  UNLABEL CURRENT LINE
         NI    FLG3(R15),255-LNEW  RESET UNMATCHED DATA FLAG
         L     R4,LBBANKOR         POINT TO NEWEST LABEL BLOCK
         USING @EDLBLHD,R4
         MVC   EDL_NEXT,ELH_FREE
         ST    R1,ELH_FREE         PUT ELEMENT ON FREE-TO-REUSE CHAIN
         DROP  R1,R4               @EDLABEL, @EDLBLHD
         L     R15,EDIRREC(,R7)    POINT TO FILE RECORD'S ENTRY
LNTRTCHK L     R1,DOUBLE           RESTORE TRT RESULT INDICATOR
LNCMDTST LTR   R1,R1               ANY COMMAND IN LINE COMMAND AREA?
         BZ    LCMDGOOD            NO, NO NEED TO EXTRACT COMMAND
         CLC   1(6,R6),1(R8)       LINE COMMAND FIELD CHANGED?
         BNE   ECHOLOOP            YES, NEED TO EXTRACT COMMAND
         MVC   ECHO(6,R15),1(R8)   NO, RESTORE LINE'S LINE COMMAND
         B     ECHODONE            COMMAND ALREADY EXTRACTED
FIXMKDAT MVI   ECHO(R15),C'K'      SET CORRECT LINE COMMAND CODE
         B     FIXUPPER
FIXLOWER MVI   CALLPARM,X'02'      SET VALUE FROM DYNTABLE+C'W'
         MVI   ECHO(R15),C'W'      SET CORRECT LINE COMMAND CODE
FIXUPPER CLC   ECHO+1(1,R15),ECHO+2(R15) BLOCK COMMAND?
         MVC   ECHO+1(4,R15),ECHO+2(R15)
         MVI   ECHO+5(R15),C' '    OBLITERATE 'C' AND SUPPLY A BLANK
         BNE   ECHODONE            NOT A BLOCK COMMAND
         MVC   ECHO+1(1,R15),ECHO(R15)
         B     ECHODONE
ECHOLOOP MVC   ECHO(1,R15),0(R1)   COPY A CHARACTER OF THE COMMAND
         LA    R15,1(,R15)         INCREMENT ECHO BUFFER POINTER
         LA    R1,1(,R1)           INCREMENT INPUT TEXT POINTER
         LR    R3,R1               POINT TO INPUT TEXT
         SR    R3,R6
         AR    R3,R8               POINT TO (PRE-DISPLAY) OUTPUT TEXT
         BCTR  R2,0                GET LENGTH CODE OF FIELD TO GO
         LTR   R2,R2               DONE WHOLE FIELD?
         BM    ECHODONE            YES, GO CHECK VALIDITY
         EX    R2,EOCMDCHG         REST OF FIELD UNCHANGED?
         BNE   ECHOLOOP            NO, MORE CHARACTERS TO ECHO
         L     R14,EDIRREC(,R7)    POINT TO FILE RECORD'S ENTRY
         TM    FLG1(R14),XCLD      EXCLUDED LINE(S) ON SCREEN LINE?
         BNO   ECHONCLD            NO
         CLI   6(R6),C' '          BLANK AT END OF FIELD?
         BNE   ECHOLOOP            NO, MORE CHARACTERS TO ECHO
         B     ECHOCURS            YES
ECHONCLD ICM   R0,15,BAK(R14)      TOP OF DATA?
         BZ    ECHOXTRM            YES
         ICM   R0,15,FWD(R14)      END OF DATA?
         BZ    ECHOXTRM            YES
         TM    FLG2(R14),LLBL      LABELLED LINE?
         BO    ECHOLBLD            YES
         TM    FLG1(R14),LMSG      INFORMATION LINE?
         BO    ECHOINFO            YES
         CLI   6(R6),C'0'          DIGIT AT END OF FIELD?
         BL    ECHOLOOP            NO, MORE CHARACTERS TO ECHO
         B     ECHOCURS            YES
ECHOLBLD CLI   1(R8),C'.'          LABEL PREVIOUSLY ON DISPLAY?
         BNE   ECHOLOOP            NO, MORE CHARACTERS TO ECHO
         B     ECHOCURS            YES
ECHOINFO CLI   6(R6),C'='          EQUALS AT END OF FIELD?
         BNE   ECHOLOOP            NO, MORE CHARACTERS TO ECHO
         B     ECHOCURS            YES
ECHOXTRM CLI   6(R6),C'*'          ASTERISK AT END OF FIELD?
         BNE   ECHOLOOP            NO, MORE CHARACTERS TO ECHO
ECHOCURS EQU   *                   PARSE ALL CHARS BEFORE CURSOR
         L     R5,EDCSRPOS         GET CURSOR POSITION
         BCTR  R5,0                GET CURSOR OFFSET
         A     R5,EDYNAREA         POINT TO WHERE CURSOR IS
         CR    R5,R1               IS CURSOR PAST HERE?
         BNH   ECHODONE            NO, NOW HAVE ENTIRE LINE COMMAND
         LA    R0,9(,R6)           POINT PAST LINE COMMAND FIELD
         CR    R5,R0               CURSOR IN THIS LINE COMMAND FIELD?
         BL    ECHOLOOP            YES, MORE CHARACTER(S) TO ECHO
ECHODONE EQU   *                   LINE COMMAND STRING NOW EXTRACTED
         CLI   CALLPARM,X'FF'      INVALID LINE COMMAND?
         BE    LNLBLCHK            YES, SET UP ERROR STATUS
         TM    EDFLG1,E1FREEZE     IS ERROR STATUS ALREADY SET?
         BO    LNCMDNXT            YES, DO NOT VALIDATE COMMAND NOW
         L     R15,EDIRREC(,R7)    NO, POINT TO FILE RECORD'S ENTRY
         LA    R4,1                INITIALIZE REPLICATION COEFFICIENT
         CLC   ECHO(1,R15),ECHO+1(R15)
         BNE   LCMD1LTR            SINGLE LETTER COMMAND
         CLI   CALLPARM,2          DOUBLE LETTER COMMAND - OKAY?
         BL    LNCMDBAD            NO
         MVI   CALLPARM+1,CMDE2LTR SET DOUBLE LETTER COMMAND FLAG
         L     R2,EDNONBLA         POINT TO TRANSLATE TABLE
         TRT   ECHO+2(4,R15),0(R2) LOOK FOR EXTRA INPUT
         BZ    LCMDGOOD            NO MODIFIER AFTER COMMAND CODE
         CLI   CALLPARM,3          IS A COEFFICIENT ALLOWED?
         BL    LNREPBAD            NO
         B     GTREPLIC            GO GET REPLICATION COEFFICIENT
LCMD1LTR MVI   CALLPARM+1,CMDE1LTR SET SINGLE LETTER COMMAND FLAG
         CLC   EDLC,ECHO(R15)      ISPF LOWER CASE?
         BE    FIXLOWER            YES
         CLC   EDUC,ECHO(R15)      ISPF UPPER CASE?
         BE    FIXUPPER            YES
         CLC   EDMD,ECHO(R15)      ISPF MAKE DATA?
         BE    FIXMKDAT            YES
         C     R7,EDDIREND         PROCESSING LAST DIRECTORY ENTRY?
         BNE   LCMDDNOK            NO
         CLI   ECHO(R15),C'I'      INSERT AFTER LAST LINE?
         BE    LCMDDODN            YES
         CLI   ECHO(R15),C'R'      REPEAT OF LAST LINE?
         BNE   LCMDDNOK            NO
LCMDDODN ICM   R0,15,PENDADDR      ANY PRIMARY COMMAND PENDING?
         BNZ   LCMDDNOK            YES, DO NOT CHANGE IT
         MVI   CMDAREA,C'+'        NO, QUEUE UP A 'DOWN' COMMAND
         MVI   CMDAREA+2,C'1'      SCROLL DOWN 1 RECORD
         LA    R1,CMDAREA
         ST    R1,OPD0             SET COMMAND ADDRESS
         LA    R1,CMDAREA+2
         ST    R1,OPD1             SET OPERAND ADDRESS
         MVI   OPD0+5,1            SET COMMAND LENGTH
         MVI   OPD1+5,1            SET OPERAND LENGTH
         MVI   OPD0+6,PRESENT
         MVI   OPD1+6,PRESENT+NUMERIC
         L     R1,EDTCMDT@         POINT TO SUBCOMMAND TABLE
         LA    R1,EDTCMDL(,R1)     POINT TO COMMAND ENTRY
         ST    R1,PENDADDR
LCMDDNOK L     R2,EDNONBLA         POINT TO TRANSLATE TABLE
         CLI   ECHO(R15),C'T'      DOES LINE COMMAND START WITH 'T'?
         BNE   LCMDNOTT            NO
         CLI   ECHO+1(R15),C'E'    TEXT ENTRY?
         BE    LCMDWAST            YES
         CLI   ECHO+1(R15),C'S'    TEXT SPLIT?
         BE    LCMDWAST            YES
         CLI   ECHO+1(R15),C'F'    TEXT FLOW?
         BNE   LNCMDBAD            NO
LCMDWAST TRT   ECHO+2(4,R15),0(R2) LOOK FOR EXTRA INPUT
         B     LCMD1MOD            GO BACK TO COMMON LOGIC
LCMDNOTT TRT   ECHO+1(5,R15),0(R2) LOOK FOR EXTRA INPUT
LCMD1MOD BZ    LCMDGOOD            NO MODIFIER AFTER COMMAND CODE
GTREPLIC LR    R14,R1              POINT TO FOUND MODIFIER
         LA    R5,ECHO+6-1(,R15)   POINT TO END OF COMMAND FIELD
         SR    R5,R1               GET MAX LENGTH CODE OF DATA
         L     R2,EDTABNUM         POINT TO TRANSLATE TABLE
         EX    R5,EDNUMTRT         ANY NON-NUMERIC?
         BZ    GDREPLIC            NO, REPLICATION IS GOOD
         LA    R2,ECHO+6-1(,R15)   POINT TO END OF COMMAND FIELD
         SR    R2,R1               GET MAX LENGTH CODE AFTER NUMBER
         LAM   A1,A1,DSPCALET      LOAD DATA SPACE ALET
         EX    R2,LCBLANKS         ONLY BLANKS AFTER NUMBER?
         LAM   A1,A1,EDZEROS       CLEAR DATA SPACE ALET
         BNE   LNCMDBAD            NO, SO INVALID LINE COMMAND
         LR    R5,R1               YES, POINT PAST NUMBER
         SR    R5,R14              GET DECIMAL DIGIT COUNT
         BCTR  R5,0                DECREMENT FOR EXECUTE
GDREPLIC EX    R5,EDNUMPAK         EXTRACT REPLICATION COEFFICIENT
         CVB   R5,DOUBLE           GET COEFFICIENT IN BINARY
         LTR   R5,R5               ANY VALUE SPECIFIED?
         BNP   LCMDGOOD            NO
         LR    R4,R5               YES, USE IT
         OI    CALLPARM+1,CMDECOEF FLAG COEFFICIENT SPECIFIED
         CLC   TFCMDNM,ECHO(R15)   'TF' LINE COMMAND?
         BNE   LCMDGOOD            NO
         C     R4,EDLBND           COLUMN BEFORE LEFT BOUND?
         BH    LCMDGOOD            NO, GOOD
         MVI   MSG,114             INVALID COLUMN RANGE
         B     LNCMDFRZ            GO FLAG ERROR CONDITION
TFCMDNM  DC    C'TF'
LCMDGOOD DC    0H'0'               NOW SEARCH FOR LINE COMMAND ENTRY
         LA    R5,CMDANKOR-EDIRSIZ POINT TO COMMAND LIST ANCHOR
         CLI   ECHO(R15),C' '      ANYTHING PRESENT?
         BNH   FNDCMDLP            NO, PROCEED
         ICM   R14,15,BAK(R15)     TOP OF DATA?
         BZ    LNCMDTOP            YES
         ICM   R14,15,FWD(R15)     END OF DATA?
         BZ    LNCMDEND            YES
         TM    FLG1(R15),LMSG      MESSAGE LINE?
         BO    LNCMDMSG            YES
FNDCMDLP ICM   R1,15,CMDENEXT(R5)  POINT TO NEXT COMMAND ELEMENT
         BZ    MAKECMDE            END OF CHAIN SO MAKE A NEW ONE
         CLC   EDIR1ST(4,R7),EDIR1ST(R1)
         BL    MAKECMDE            PAST WHERE IT SHOULD BE
         BH    FNDCMDNX            NOT UP TO IT YET
         CLC   EDIRREC(4,R7),EDIRREC(R1)
         BE    UPDTCMDE            FOUND A MATCH - UPDATE IT
FNDCMDNX LR    R5,R1               POINT TO CHAINED ELEMENT
         B     FNDCMDLP            KEEP LOOKING FOR IT
LNCMDMSG CLI   ECHO(R15),C'('
         BE    LCMDRONG            CAN'T SHIFT IT LEFT
         CLI   ECHO(R15),C')'
         BE    LCMDRONG            CAN'T SHIFT IT EIGHT
         CLI   ECHO(R15),C'O'
         BE    LCMDRONG            CAN'T COPY OVER IT
         CLI   ECHO(R15),C'U'
         BE    LCMDRONG            CAN'T UPPER CASE IT
         CLI   ECHO(R15),C'W'
         BE    LCMDRONG            CAN'T LOWER CASE IT
         CLI   ECHO(R15),C'K'
         BE    LCMDPROF            CAN'T LOWER CASE IT
         CLI   ECHO(R15),C'T'      A 'TEXT' COMMAND?
         BNE   FNDCMDLP            NO, PROCEED
         CLI   ECHO+1(R15),C'E'    'TE' COMMAND?
         BE    FNDCMDLP            YES, PROCEED
         B     LCMDRONG            CAN'T SPLIT IT OR FLOW IT
LCMDPROF TM    FLG3(R15),LFIX      IS MESSAGE FIXED AT LEFT MAX?
         BNO   FNDCMDLP            NO, PROCEED
         CLI   CTLLEN(R15),C' '    DYNAMICALLY GENERATED LINE?
         BNL   FNDCMDLP            NO, PROCEED
         B     LCMDRONG            YES, CAN'T MAKE IT DATA
LNCMDTOP CLI   ECHO(R15),C'A'      'A' COMMAND ON TOP LINE?
         BE    FNDCMDLP            YES, PROCEED
         CLI   ECHO(R15),C'I'      'I' COMMAND ON TOP LINE?
         BE    FNDCMDLP            YES, PROCEED
         CLI   ECHO(R15),C'T'      'TE' COMMAND ON TOP LINE?
         BNE   LCMDRONG            NO, INVALID ON THIS LINE
         CLI   ECHO+1(R15),C'E'    'TE' COMMAND ON TOP LINE?
         BE    FNDCMDLP            YES, PROCEED
         B     LCMDRONG            NO, INVALID ON THIS LINE
LNCMDEND CLI   ECHO(R15),C'B'      'B' COMMAND ON END LINE?
         BE    FNDCMDLP            YES, PROCEED
LCMDRONG MVI   MSG,106             INVALID ON THIS LINE
         B     LNCMDFRZ            GO FLAG ERROR CONDITION
MAKECMDE L     R15,EDIRREC(,R7)    POINT TO FILE RECORD'S ENTRY
         CLI   ECHO(R15),C' '      ANY COMMAND TO CHAIN?
         BNH   LNCMDNXT            NO, NOTHING TO SET UP
         SAC   0                   SET PRIMARY MODE
         LA    R0,CMDESIZE         GET COMMAND ELEMENT SIZE
         MVI   GETMNTRC,48         TRACK GETMAIN IN CASE OF FAILURE
         GETMAIN RU,LV=(0),SP=12,LOC=(31,64)
         XC    0(CMDESIZE,R1),0(R1)
         MVC   CMDENEXT(4,R1),CMDENEXT(R5)
         ST    R1,CMDENEXT(,R5)    UPDATE ELEMENT CHAIN
         LAM   A0,A1,EDZEROS       RESET ALET
         LAM   A14,A14,DSPCALET    LOAD DATA SPACE ALET
         LAM   A15,A15,DSPCALET    LOAD DATA SPACE ALET
         SAC   512                 SET AR MODE
UPDTCMDE L     R15,EDIRREC(,R7)    POINT TO FILE RECORD'S ENTRY
         CLI   ECHO(R15),C' '      ANY COMMAND TO CHAIN?
         BH    KEEPCMDE            YES
         LA    R14,LNCMDNXT        NO
         B     FREECMDE            NEED TO DROP AN ELEMENT
KEEPCMDE LR    R5,R1               POINT TO NEW ELEMENT
         MVC   0(EDIRSIZ,R5),0(R7) COPY SCREEN LINE DIRECTORY ENTRY
         ST    R4,CMDEREPL(R5)     SAVE REPLICATION COEFFICIENT
         MVC   CMDECODE(1,R5),ECHO(R15)
         MVC   CMDEFLAG(1,R5),CALLPARM+1
         B     LNCMDNXT            LINE COMMAND ELEMENT NOW CURRENT
         SPACE
EOCMDCHG CLC   0(0,R1),0(R3)       <<< EXECUTED >>>
EOCMDFIL TRT   0(0,R1),DYNTABLE    <<< EXECUTED >>>
LCBLANKS CLC   0(0,R1),EDBLNKS     <<< EXECUTED >>>
LLBLALFA TRT   ECHO+1(0,R15),DYNTABLE <<< EXECUTED >>>
         SPACE
LNREPBAD MVI   MSG,107             NUMBER NOT ALLOWED
         B     LNCMDFRZ
LNLBLCHK L     R15,EDIRREC(,R7)    POINT TO FILE RECORD'S ENTRY
         CLI   ECHO(R15),C'.'      POTENTIALLY A LABEL?
         BNE   LNCMDBAD            NO
         TM    FLG1(R15),LMSG      MESSAGE LINE?
         BO    LCMDRONG            YES, INVALID ON THIS LINE
         LA    R3,5                GET MAXIMUM LABEL LENGTH
         LA    R14,ECHO+5(,R15)    POINT TO ITS LAST POSSIBLE CHARACTER
LNLBLLP1 CLI   0(R14),C' '         TRAILING BLANK?
         BNE   LNLBLSZD            NO, LABEL NAME HAS BEEN SIZED
         BCTR  R14,0               YES, BACK UP A BYTE
         BCT   R3,LNLBLLP1         CONTINUE CHECKING
         B     LNCMDBAD            A PERIOD IN ISOLATION IS NOT VALID
LNLBLSZD MVI   DYNTABLE,X'FF'      CONSTRUCT TRANSLATE TABLE
         MVC   DYNTABLE+1(255),DYNTABLE
         XC    DYNTABLE+C'A'(9),DYNTABLE+C'A'
         XC    DYNTABLE+C'J'(9),DYNTABLE+C'J'
         XC    DYNTABLE+C'S'(8),DYNTABLE+C'S'
         BCTR  R3,0                GET LENGTH CODE OF NAME AFTER PERIOD
         EX    R3,LLBLALFA         IS LABEL NAME ALL ALPHABETIC?
         BNZ   LNLBLBAD            NO, INVALID LABEL NAME
         CLI   ECHO+1(R15),C'Z'    DOES LABEL NAME BEGIN WITH 'Z'?
         BE    LNLBLZED            YES
         LA    R3,LABANKOR         POINT TO LABEL ELEMENT CHAIN
         XC    DOUBLE,DOUBLE       CLEAR SOME STORAGE
         USING @EDLABEL,R3
LNLBLLP2 ICM   R3,15,EDL_NEXT      POINT TO NEXT LABEL ELEMENT ON CHAIN
         BZ    LNLBLUPD            END OF CHAIN REACHED
         CLC   EDL_NAME,ECHO(R15)  FOUND A MATCHING LABEL?
         BNE   *+8                 NO
         ST    R3,DOUBLE           YES
         C     R15,EDL_ADDR        FOUND A MATCHING ADDRESS?
         BNE   LNLBLLP2            NO, SEARCH WHOLE CHAIN
         ST    R3,DOUBLE+4
         B     LNLBLLP2            SEARCH WHOLE CHAIN
LNLBLUPD ICM   R3,15,DOUBLE+4      FOUND AN ENTRY FOR THIS LINE?
         BZ    LNLBLTST            NO
         OI    FLG2(R15),LLBL      YES, ENSURE LABELLED FLAG IS ON
         C     R3,DOUBLE           DOES IT ALREADY HAVE THIS LABEL?
         BE    LNCMDNXT            YES, WHAT WAS THAT ALL ABOUT?
         MVC   EDL_NAME,ECHO(R15)  NO, UPDATE THE LABEL NAME
         DROP  R3                  @EDLABEL
         ICM   R1,15,DOUBLE        WAS THIS LABEL USED ELSEWHERE?
         BZ    LNCMDNXT            NO, EXISTING LABEL NOW HAS NEW NAME
         USING @EDLABEL,R1
         L     R14,EDL_ADDR        YES, POINT TO THE LABELLED LINE
         NI    FLG2(R14),255-LLBL  UNLABEL THAT LINE
         NI    FLG3(R14),255-LNEW  RESET UNMATCHED DATA FLAG
         CLC   EDL_NAME,ECHO(R14)  IS IT ECHOING THIS LABEL?
         BE    LNLBLJMP            NO
         MVC   ECHO(6,R14),EDBLNKS YES, CLEAR IT'S ECHO TEXT
         L     R0,EDL_NEXT         SAVE FORWARD CHAIN POINTER
         DROP  R1                  @EDLABEL
LNLBLJMP LA    R3,LABANKOR         POINT TO LABEL ELEMENT CHAIN ORIGIN
         USING @EDLABEL,R3
LNLBLLP3 C     R1,EDL_NEXT         FOUND ELEMENT BEFORE ONE TO DELETE?
         BE    LNLBLPRG            YES, GO PURGE IT
         ICM   R3,15,EDL_NEXT      POINT TO NEXT LABEL ELEMENT ON CHAIN
         BNZ   LNLBLLP3            KEEP SEARCHING CHAIN
         B     LNCMDNXT            SHOULD NOT REACH END OF CHAIN
LNLBLPRG MVC   EDL_NEXT,EDL_NEXT-@EDLABEL(R1) DECHAIN ELEMENT
         DROP  R3                  @EDLABEL
         USING @EDLABEL,R1
         L     R4,LBBANKOR         POINT TO NEWEST LABEL BLOCK
         USING @EDLBLHD,R4
         MVC   EDL_NEXT,ELH_FREE
         ST    R1,ELH_FREE         PUT ELEMENT ON FREE-TO-REUSE CHAIN
         B     LNCMDNXT            UPDATE NOW COMPLETE
         DROP  R1,R4               @EDLABEL, @EDLBLHD
         USING @EDLABEL,R3
LNLBLTST ICM   R3,15,DOUBLE        FOUND THIS LABEL ALREADY USED?
         BZ    LNLBLNEW            NO, GO CREATE A NEW LABEL ELEMENT
         L     R14,EDL_ADDR        YES, POINT TO LINE THAT HAD LABEL
         ST    R15,EDL_ADDR        REPLACE THIS LABEL'S LINE POINTER
         OI    FLG2(R15),LLBL      ENSURE LABELLED FLAG IS ON
         NI    FLG2(R14),255-LLBL  RESET THE FORMER LINE'S FLAG
         NI    FLG3(R14),255-LNEW  RESET UNMATCHED DATA FLAG
         CLC   EDL_NAME,ECHO(R14)  IS IT ECHOING THIS LABEL?
         BNE   LNLBLRES            NO
         MVC   ECHO(6,R14),EDBLNKS YES, CLEAR IT'S ECHO TEXT
LNLBLRES L     R2,EDITDIR@         POINT TO SCREEN LINE DIRECTORY
         L     R5,EDYNAREA         POINT TO FIRST SCREEN LINE
LNLBLLP4 C     R2,EDDIREND         PROCESSED LAST ENTRY?
         BH    LNCMDNXT            YES, UPDATE NOW COMPLETE
         C     R14,EDIRREC(,R2)    IS THIS THE LABEL'S PREVIOUS LINE?
         BE    LNLBLCLN            YES, GO CLEAN IT UP
         LA    R2,EDIRSIZ(,R2)     POINT TO NEXT SCREEN LINE EMTRY
         A     R5,SCRNCOLS         POINT TO NEXT LINE IN BUFFER
         B     LNLBLLP4            RESUME SCAN FOR LABEL'S OLD LINE
LNLBLCLN CLC   1(6,R5),EDL_NAME    IS THE OLD LINE SHOWING THIS LABEL?
         BNE   LNCMDNXT            NO, UPDATE NOW COMPLETE
         MVC   1(6,R5),EDBLNKS     YES, CLEAN IT UP
         B     LNCMDNXT            UPDATE NOW COMPLETE
         DROP  R3                  @EDLABEL
LNLBLNEW SAC   0                   SET PRIMARY MODE FOR SVC
         BAS   R14,GETALABL        GET A MEW (ZEROED) LABEL ELEMENT
         LAM   A0,A1,EDZEROS       RESET ALET
         LAM   A14,A14,DSPCALET    LOAD DATA SPACE ALET
         LAM   A15,A15,DSPCALET    LOAD DATA SPACE ALET
         SAC   512                 RESTORE AR MODE
         LTR   R15,R15             SUCCESS?
         BNZ   LNLBL123            NO
         USING @EDLABEL,R1
         L     R15,EDIRREC(,R7)    POINT TO FILE RECORD'S ENTRY
         ST    R15,EDL_ADDR        SET THE RECORD ADDRESS
         MVC   EDL_NAME,ECHO(R15)  SET THE LABEL NAME
         MVC   EDL_NEXT,LABANKOR   SET THE CHAIN POINTER
         ST    R1,LABANKOR         ADD THIS ELEMENT TO THE CHAIN
         OI    FLG2(R15),LLBL      FLAG RECORD IS NOW LABELLED
         B     LNCMDNXT            UPDATE NOW COMPLETE
         DROP  R1                  @EDLABEL
LNLBLBAD MVC   MSG+2(6),ECHO(R15)  COPY INVALID LABEL TEXT
         LA    R1,MSG+2+2(R3)      POINT PAST LOADED LABEL TEXT
         MVC   0(32,R1),EDLBLMSG
         LA    R3,2+32(,R3)        GET MESSAGE LENGTH
         STH   R3,MSG              SET MESSAGE LENGTH
         TM    STATUS10,$10CAP     CAPS ON?
         BO    LNCMDFRZ            YES
         TR    0(32,R1),EDTUNKAP   NO
         B     LNCMDFRZ
LNLBLZED MVC   MSG(EDZMSGL),EDZMSG 'Z' LABELS ARE RESERVED
         TM    STATUS10,$10CAP     CAPS ON?
         BO    LNCMDFRZ            YES
         TR    MSG+6(EDZMSGL-6),EDTUNKAP
         B     LNCMDFRZ
LNLBL123 MVI   MSG,123             REQUEST ABORTED - STORAGE FULL
         B     LNCMDFRZ
LNCMDBAD MVI   MSG,105             UNKNOWN LINE COMMAND
LNCMDFRZ OI    EDFLG1,E1FREEZE     DO NOT ALLOW BAD CMD TO SCROLL OFF
         OI    STATUS7,$7BELL      SOUND AUDIBLE ALARM FOR ERROR
         LA    R1,1+1(,R6)         POINT TO FIELD START PLUS ONE
         S     R1,EDYNAREA         GET REQUIRED CURSOR POSITION
         ST    R1,EDCSROUT         SAVE IT FOR DISPLAY
         SPACE
LNCMDNXT A     R6,SCRNCOLS         POINT TO NEXT CURRENT BUFFER LINE
         LA    R7,EDIRSIZ(,R7)     POINT TO NEXT LINE'S DIRECTORY ENTRY
         A     R8,SCRNCOLS         POINT TO NEXT PREVIOUS BUFFER LINE
         C     R7,EDDIREND         BEYOND LAST SCREEN LINE?
         BNH   LNCMDLP1            NO, GO PROCESS NEXT SCREEN LINE
         SPACE
*         ADJUST EDITLINE BASE REGISTER FOR ADDRESSABILITY
         SPACE
         LA    R10,FREECMDE        POINT TO NEW BASE ORIGIN
         DROP  R10                 EDITLINE
         USING FREECMDE,R10
         SPACE
*         DETERMINE IF LINE COMMANDS ARE TO PROCEED
         SPACE
         TM    STATUS7,$7BELL      ERROR SITUATION?
         BO    LNCMDXIT            YES, DO NOT VALIDATE COMMAND CHAIN
         SPACE
*         GENERATE AUTOMATIC NEW INSERTION
         SPACE
         ICM   R7,15,CSRDIRAD      WAS CURSOR ON INSERTED LINE?
         BNM   LNCMDVAL            NO
         L     R15,EDIRREC(,R7)    YES, POINT TO INSERTED RECORD ENTRY
         TM    FLG1(R15),LINS      IS IT NOW USED?
         BO    LNCMDVAL            NO, STILL UNUSED
         ST    R15,INSRECAD        YES, AUTOMATICALLY INSERT ANOTHER
         B     LNCMDVAL
         SPACE
*         LINE COMMAND CHARACTER TABLE
*
*              CODE    MEANING
*              X'00'   DOES NOT TRIGGER A LINE COMMAND
*              X'01'   LETTER MUST BE SINGLE
*              X'02'   LETTER MAY BE DOUBLED
*              X'03'   LETTER MAY BE DOUBLED WITH COEFFICIENT
*              X'FF'   INVALID COMMAND CHARACTER
CMDCHRTB DC    256X'FF'
         ORG   CMDCHRTB+C' '
         DC    X'00'               BLANK
         ORG   CMDCHRTB+C'('
         DC    X'03'               '(' - "SHIFT LEFT"
         ORG   CMDCHRTB+C'*'
         DC    X'00'               ASTERISK
         ORG   CMDCHRTB+C')'
         DC    X'03'               ')' - "SHIFT RIGHT"
         ORG   CMDCHRTB+C'-'
         DC    X'00'               DASH
         ORG   CMDCHRTB+QUOTE
         DC    X'00'               QUOTE
         ORG   CMDCHRTB+C'A'
         DC    X'01'               'A' - "AFTER"
         DC    X'01'               'B' - "BEFORE"
         DC    X'02'               'C' - "COPY"
         DC    X'02'               'D' - "DELETE"
         DC    X'FF'               'E' - INVALID
         DC    X'01'               'F' - "FIRST"
         DC    X'FF'               'G' - INVALID
         DC    X'FF'               'H' - INVALID
         DC    X'01'               'I' - "INSERT"
         ORG   CMDCHRTB+C'K'
         DC    X'02'               'K' - "MAKE DATA"
         DC    X'01'               'L' - "LAST"
         DC    X'02'               'M' - "MOVE"
         DC    X'FF'               'N' - INVALID (NULL ELEMENT)
         DC    X'02'               'O' - "OVER"
         ORG   CMDCHRTB+C'R'
         DC    X'03'               'R' - "REPEAT"
         ORG   CMDCHRTB+C'S'
         DC    X'01'               'S' - "SHOW"
         DC    X'01'               'T' - "TEXT"
         DC    X'02'               'U' - "UPPER CASE"
         DC    X'FF'               'V' - INVALID
         DC    X'02'               'W' - "LOWER CASE"
         DC    X'02'               'X' - "EXCLUDE"
         ORG   CMDCHRTB+C'0'
         DC    10X'00'             DECIMAL DIGITS
         ORG
         SPACE
EDLBLMSG DC    CL32' NOT ALL ALPHABETIC AFTER PERIOD'
EDZMSG   MESG  '''Z'' LABELS ARE RESERVED'
         SPACE
**       DC    0D'0'               UNCOMMENT IF NEEDED
**       LTORG                     UNCOMMENT IF NEEDED
         DC    0H'0'
         SPACE
*         FREECMDE - FREE STORAGE OF PROCESSED LINE COMMAND ELEMENT
*
*         ON ENTRY: R1 ->  COMMAND ELEMENT TO BE FREED
*                   R5 ->  COMMAND ELEMENT BEFORE ONE TO BE FREED
*                  R14 ->  RETURN ADDRESS
*
*         LOCAL USE: R14 IS LOCAL BASE FOR BRANCH IN FREEMAIN MACRO
*               BECAUSE BASE R10 CAN POINT TO EDITLINE OR FREECMDE.
*
FREECMDE ST    R14,EDRETSV2        SAVE RETURN ADDRESS
         DROP  R10                 FREECMDE
         SAC   0                   SET PRIMARY MODE
         BASR  R14,0
         USING *,R14
         MVC   CMDENEXT(4,R5),CMDENEXT(R1)
         LA    R0,CMDESIZE         GET COMMAND ELEMENT SIZE
         FREEMAIN RU,LV=(0),SP=12,A=(1)
         DROP  R14
         LAM   A0,A1,EDZEROS       RESET ALET
         LAM   A14,A14,DSPCALET    LOAD DATA SPACE ALET
         LAM   A15,A15,DSPCALET    LOAD DATA SPACE ALET
         SAC   512                 SET AR MODE
         L     R14,EDRETSV2        RESTORE RETURN ADDRESS
         BR    R14                 LINE COMMAND ELEMENT NOW FREED
         USING FREECMDE,R10
         SPACE
*         THERE ARE NO ERROR CONDITIONS LEFT OUTSTANDING.
*         THE NEXT STEP IS TO VALIDATE THE LINE COMMAND ELEMENT CHAIN.
*
*         RULES ARE:
*            1. EACH BLOCK COMMAND MUST BE PAIRED.
*            2. #_MOVES + #_COPIES = #_AFTERS + #_BEFORES + #_OVERS.
*            3. REPLICATION MISMATCHES LEAVE COMMAND PENDING.
*            4. COMMANDS MAY NOT BE IN ANOTHER'S REPLICATION RANGE.
         SPACE
LNCMDVAL XC    COUNTER1,COUNTER1   CLEAR A COUNTER
         XC    COUNTER2,COUNTER2   CLEAR A COUNTER
         LA    R5,CMDANKOR-EDIRSIZ POINT TO COMMAND LIST ANCHOR
VALCMDLP ICM   R1,15,CMDENEXT(R5)  POINT TO NEXT COMMAND ELEMENT
         BZ    VALCHAIN            END OF CHAIN - GO DECIDE
         CLI   CMDECODE(R1),C'O'   OVER COMMAND?
         BE    LNTARGET            YES
         CLI   CMDECODE(R1),C'M'   MOVE COMMAND?
         BE    LNSOURCE            YES
         CLI   CMDECODE(R1),C'C'   COPY COMMAND?
         BE    LNSOURCE            YES
         BH    SRCTGTOK            NO
         CLI   CMDECODE(R1),C'A'   AFTER OR BEFORE?
         BL    SRCTGTOK            NO, NOT A TARGET
LNTARGET LA    R0,1
         A     R0,COUNTER2         INCREMENT TARGET COUNT
         ST    R0,COUNTER2
         B     SRCTGTOK
LNSOURCE LA    R0,1
         A     R0,COUNTER1         INCREMENT SOURCE COUNT
         ST    R0,COUNTER1
SRCTGTOK TM    CMDEFLAG(R1),CMDE2LTR
         BNO   NOTBLOCK            NOT A BLOCK COMMAND
         LR    R3,R5               REMEMBER ENTRY BEFORE BLOCK START
         LR    R5,R1               COPY CURRENT ELEMENT POINTER
         ICM   R1,15,CMDENEXT(R5)  POINT TO NEXT COMMAND ELEMENT
         BZ    NOBLKYET            NONE - BLOCK INCOMPLETE
         CLC   CMDECODE(1,R1),CMDECODE(R5)
         BNE   NOBLKYET            COMMAND MISMATCH - BLOCK INCOMPLETE
         CLI   CMDECODE(R1),C'X'   "EXCLUDE" BLOCK COMMAND?
         BE    DOXCLBLK            YES
         TM    CMDEFLAG(R1),CMDE2LTR
         BNO   NOBLKYET            NOT A BLOCK COMMAND
         TM    CMDEFLAG(R1),CMDECOEF
         BNO   ISABLOCK            CANNOT BE COEFFICIENT CONFLICT
         TM    CMDEFLAG(R5),CMDECOEF
         BNO   ISABLOCK            CANNOT BE COEFFICIENT CONFLICT
         CLC   CMDEREPL(4,R1),CMDEREPL(R5)
         BNE   LCNFLCT#            COMMAND CONFLICT
ISABLOCK LR    R5,R1               POINT TO CURRENT COMMAND ELEMENT
         B     VALCMDLP            CONTINUE LOOKING AT CHAIN ELEMENTS
NOTBLOCK CLI   CMDECODE(R1),C'F'   "FIRST" LINE COMMAND?
         BE    DOFIRST             YES
         CLI   CMDECODE(R1),C'L'   "LAST" LINE COMMAND?
         BE    DOLAST              YES
         CLI   CMDECODE(R1),C'S'   "SHOW" LINE COMMAND?
         BE    DOSHOW              YES
         CLI   CMDECODE(R1),C'C'   "COPY" LINE COMMAND?
         BE    CHKRANGE            YES
         CLI   CMDECODE(R1),C'D'   "DELETE" LINE COMMAND?
         BE    CHKRANGE            YES
         CLI   CMDECODE(R1),C'M'   "MOVE" LINE COMMAND?
         BE    CHKRANGE            YES
         CLI   CMDECODE(R1),C'O'   "OVER" LINE COMMAND?
         BE    CHKRANGE            YES
         CLI   CMDECODE(R1),C'U'   "UPPER" LINE COMMAND?
         BE    CHKRANGE            YES
         CLI   CMDECODE(R1),C'W'   "LOWER" LINE COMMAND?
         BE    CHKRANGE            YES
         CLI   CMDECODE(R1),C'K'   "MAKE DATA" LINE COMMAND?
         BE    CHKRANGE            YES
         CLI   CMDECODE(R1),C'X'   "EXCLUDE" LINE COMMAND?
         BE    CHKRANGE            YES
LETTEROK CLI   CMDECODE(R1),C'X'   "EXCLUDE" LINE COMMAND?
         BE    DOXCLUDE            YES
         LR    R5,R1               POINT TO CURRENT COMMAND ELEMENT
         B     VALCMDLP            CONTINUE LOOKING AT CHAIN ELEMENTS
         SPACE
*         EFFECTIVELY CONVERT A SINGLE LINE COMMAND WITH LINE COUNT
*         MULTIPLIER INTO A BLOCK COMMAND (BUT 2-LETTER FLAG STAYS OFF)
         SPACE
CHKRANGE L     R15,EDIRFIN(,R1)    POINT TO LAST RECORD OF SCREEN LINE
         L     R2,EDIRLST(,R1)     GET LAST SCREEN LINE SEQUENCE NUMBER
         TM    CMDEFLAG(R1),CMDECOEF
         BNO   LRANGEOK            RANGE COEFFICIENT IS ONE
         L     R0,CMDEREPL(,R1)    GET SCREEN LINE RANGE
         BCTR  R0,0                THIS LINE OBVIOUSLY OKAY
         LTR   R0,R0               RANGE MORE THAN ONE?
         BNP   LRANGEOK            NO, SO WHOLE RANGE OKAY
CHKRNGLP ICM   R14,15,FWD(R15)     POINT TO NEXT RECORD ENTRY
         BZ    LRANGEND            END OF DATA SO RANGE IS OKAY
         LR    R15,R14             COPY NEXT ADDRESS
         LA    R2,1(,R2)           INCREMENT SEQUENCE NUMBER
         CLI   ECHO(R15),C'A'      COMMAND PENDING FOR THIS LINE?
         BNL   LCONFLCT            YES, COMMAND CONFLICT
         CLI   ECHO(R15),C'('      COMMAND PENDING FOR THIS LINE?
         BE    LCONFLCT            YES, COMMAND CONFLICT
         CLI   ECHO(R15),C')'      COMMAND PENDING FOR THIS LINE?
         BE    LCONFLCT            YES, COMMAND CONFLICT
         TM    FLG1(R15),XCLD      IS THIS LINE EXCLUDED?
         BNO   RNGLINOK            NO
RNGEXCLP ICM   R14,15,FWD(R15)     YES, POINT TO NEXT LINE
         BZ    LRANGEND            END OF DATA SO RANGE IS OKAY
         TM    FLG1(R14),XCLD      IS THIS LINE EXCLUDED?
         BNO   RNGLINOK            NO, WOULD BE DISPLAYED ON NEW LINE
         LR    R15,R14             YES, COPY ITS ADDRESS
         LA    R2,1(,R2)           INCREMENT SEQUENCE NUMBER
         B     RNGEXCLP
RNGLINOK BCT   R0,CHKRNGLP         CHECK NEXT DISPLAY LINE FOR COMMAND
         ICM   R0,15,FWD(R15)      REACHED BOTTOM-OF-DATA LINE?
         BNZ   LRANGEOK            NO, INCLUDE LINE IN RANGE
LRANGEND L     R15,BAK(,R15)       POINT TO LAST DATA ENTRY
         BCTR  R2,0                DECREMENT SEQUENCE NUMBER
LRANGEOK ST    R15,EDIRFIN(,R1)    SAVE LAST LINE AFFECTED BY COMMAND
         ST    R2,EDIRLST(,R1)     SAVE LAST SEQUENCE NUMBER IN RANGE
         B     LETTEROK            NO OTHER COMMAND IN COMMAND RANGE
         SPACE
LCONFLCT MVI   MSG,110             COMMAND CONFLICT
         LA    R5,CMDANKOR-EDIRSIZ POINT TO COMMAND LIST ANCHOR
LCONLOOP ICM   R5,15,CMDENEXT(R5)  POINT TO NEXT COMMAND ELEMENT
         BZ    LGETLINE            END OF CHAIN - SHOULD NOT HAPPEN
         C     R3,EDIRREC(,R5)     COMMAND ELEMENT FOR THIS LINE?
         BE    LGETLINE            YES
         B     LCONLOOP            NO, KEEP LOOKING
LCNFLCT# MVI   MSG,111             CONFLICTING NUMBERS
LGETLINE L     R6,EDYNAREA         POINT TO FIRST SCREEN LINE
         L     R7,EDITDIR@         POINT TO FIRST DIRECTORY ENTRY
LGETLNLP CLC   EDIR1ST(4,R7),EDIR1ST(R5)
         BE    LCMDFRZ2            FOUND A MATCH
         A     R6,SCRNCOLS         POINT TO NEXT CURRENT BUFFER LINE
         LA    R7,EDIRSIZ(,R7)     POINT TO NEXT LINE'S DIRECTORY ENTRY
         C     R7,EDDIREND         GONE PAST END OF SCREEN?
         BH    LCMDFRZ2            YES, SAFETY NET - SHOULD NOT HAPPEN
         B     LGETLNLP            NO, GO CHECK NEXT LINE
LCMDFRZ2 OI    EDFLG1,E1FREEZE     DO NOT ALLOW BAD CMD TO SCROLL OFF
         OI    STATUS7,$7BELL      SOUND AUDIBLE ALARM FOR ERROR
         LA    R1,1+1(,R6)         POINT TO FIELD START PLUS ONE
         S     R1,EDYNAREA         GET REQUIRED CURSOR POSITION
         ST    R1,EDCSROUT         SAVE IT FOR DISPLAY
         B     LNCMDXIT            LINE COMMANDS ON HOLD FOR NOW
         SPACE
NOBLKYET TM    STATUS7,$7BELL      ALARM ALREADY SET?
         BO    VALCMDLP            YES, DO NOT REPLACE MESSAGE
         MVI   MSG,109             BLOCK COMMAND INCOMPLETE
         B     VALCMDLP            KEEP LOOKING DOWN THE CHAIN
         SPACE
VALCHAIN ICM   R0,3,MSG            ANY MESSAGE TO SHOW?
         BNZ   LNCMDXIT            YES, LINE COMMANDS ON HOLD FOR NOW
         CLC   COUNTER1,COUNTER2   EQUAL NUMBER OF SOURCES AND TARGETS?
         BE    LCMDDOIT            YES, PROCESS ALL PENDING COMMANDS
         MVI   MSG,108             MOVE/COPY IS PENDING
         B     LNCMDXIT            LINE COMMANDS ON HOLD FOR NOW
         SPACE
*
*         "SHOW" LINE COMMAND
*
DOSHOW   L     R15,EDIRREC(,R1)    POINT TO FIRST RECORD OF SCREEN LINE
         MVC   ECHO(6,R15),EDBLNKS CLEAR LINE'S LINE COMMAND
DOSHOWLP NI    FLG1(R15),255-XCLD  SHOW THIS RECORD
         C     R15,EDIRFIN(,R1)    PROCESSED LAST LINE OF COMMAND?
         BE    PURGCMDE            YES, COMMAND NOW COMPLETE
         L     R15,FWD(,R15)       NO, POINT TO NEXT RECORD ENTRY
         B     DOSHOWLP            CONTINUE PROCESSING
         SPACE
*
*         "FIRST" LINE COMMAND
*
DOFIRST  L     R15,EDIRREC(,R1)    POINT TO FIRST RECORD OF SCREEN LINE
         MVC   ECHO(6,R15),EDBLNKS CLEAR LINE'S LINE COMMAND
         NI    FLG1(R15),255-XCLD  SHOW THIS RECORD
         L     R0,CMDEREPL(,R1)    GET SPECIFIED COEFFICIENT
         BCTR  R0,0                GET REMAINING LINES TO PROCESS
         LTR   R0,R0               ALL DONE?
         BNP   PURGCMDE            YES, COMMAND NOW COMPLETE
DOFRSTLP C     R15,EDIRFIN(,R1)    PROCESSED LAST LINE OF COMMAND?
         BE    PURGCMDE            YES, COMMAND NOW COMPLETE
         L     R15,FWD(,R15)       NO, POINT TO NEXT RECORD ENTRY
         NI    FLG1(R15),255-XCLD  SHOW THIS RECORD
         BCT   R0,DOFRSTLP         CONTINUE PROCESSING
         B     PURGCMDE            "FIRST" COMMAND NOW COMPLETE
         SPACE
*
*         "LAST" LINE COMMAND
*
DOLAST   L     R15,EDIRREC(,R1)    POINT TO FIRST RECORD OF SCREEN LINE
         MVC   ECHO(6,R15),EDBLNKS CLEAR LINE'S LINE COMMAND
         L     R15,EDIRFIN(,R1)    POINT TO LAST RECORD OF SCREEN LINE
         NI    FLG1(R15),255-XCLD  SHOW THIS RECORD
         L     R0,CMDEREPL(,R1)    GET SPECIFIED COEFFICIENT
         BCTR  R0,0                GET REMAINING LINES TO PROCESS
         LTR   R0,R0               ALL DONE?
         BNP   PURGCMDE            YES, COMMAND NOW COMPLETE
DOLASTLP C     R15,EDIRREC(,R1)    PROCESSED FIRST LINE IN COMMAND?
         BE    PURGCMDE            YES, COMMAND NOW COMPLETE
         L     R15,BAK(,R15)       NO, POINT TO PREVIOUS RECORD ENTRY
         NI    FLG1(R15),255-XCLD  SHOW THIS RECORD
         BCT   R0,DOLASTLP         CONTINUE PROCESSING
         B     PURGCMDE            "LAST" COMMAND NOW COMPLETE
         SPACE
*
*         "EXCLUDE" LINE COMMAND
*
DOXCLBLK BAS   R6,BLOCKTO1         REDUCE BLOCK TO ONE COMMAND ELEMENT
         SPACE
DOXCLUDE L     R15,EDIRREC(,R1)    POINT TO FIRST RECORD OF COMMAND
         MVC   ECHO(6,R15),EDBLNKS CLEAR LINE'S LINE COMMAND
DOXCLDLP OI    FLG1(R15),XCLD      EXCLUDE THIS RECORD
         C     R15,LINEADDR        EXCLUDED THE TOP-OF-SCREEN LINE NOW?
         BNE   CONTXCLD            NO, CONTINUE WITH EXCLUDE PROCESSING
         L     R0,LINENMBR         YES, GET ITS LINE NUMBER
         LR    R14,R15             COPY THIS LINE'S ENTRY ADDRESS
EXCLDTOP L     R14,BAK(,R14)       POINT TO PRECEDING ENTRY
         BCTR  R0,0                GET ITS LINE SEQUENCE NUMBER
         TM    FLG1(R14),XCLD      PREVIOUS LINE EXCLUDED?
         BO    EXCLDTOP            YES, HAVE TO BACK UP ANOTHER RECORD
         ST    R14,LINEADDR        NO, MAKE THIS RECORD THE TOP
         ST    R0,LINENMBR         SAVE THE NEW TOP LINE NUMBER
CONTXCLD C     R15,EDIRFIN(,R1)    PROCESSED LAST LINE OF COMMAND?
         BE    PURGCMDE            YES, COMMAND NOW COMPLETE
         L     R15,FWD(,R15)       NO, POINT TO NEXT RECORD ENTRY
         B     DOXCLDLP            GO EXCLUDE IT
         SPACE
PURGCMDE LA    R14,VALCMDLP        SET RETURN ADDRESS
         B     FREECMDE            FREE THE PROCESSED COMMAND ELEMENT
         SPACE
*         BLOCKTO1 - CONVERT 2 RELATED BLOCK COMMAND ELEMENTS
*                    TO A SINGLE COMMAND ELEMENT FOR PROCESSING
*
*         ON ENTRY: R1 ->  BLOCK END COMMAND ELEMENT
*                          WHICH WILL BE FREED
*                   R3 ->  COMMAND ELEMENT POINTING TO BLOCK START
*                   R5 ->  BLOCK START COMMAND ELEMENT
*                          WHICH POINTS TO THE BLOCK END COMMAND
*                          ELEMENT AND WILL BECOME THE REMAINING
*                          ELEMENT REPRESENTING THE WHOLE BLOCK
*                   R6 ->  RETURN ADDRESS
*
*                                  SAVE BLOCK END RECORD DETAILS
BLOCKTO1 TM    CMDEFLAG(R5),CMDEBLOK
         BO    BLK2DONE            ALREADY BLOCKED - NO ELEMENT TO FREE
         MVC   EDIRFIN(4,R5),EDIRFIN(R1)
         MVC   EDIRLST(4,R5),EDIRLST(R1)
         OI    CMDEFLAG(R5),CMDEBLOK
         TM    CMDEFLAG(R1),CMDECOEF
         BNO   BLK2COEF            NO NEED TO SAVE COEFFICIENT DETAILS
         OI    CMDEFLAG(R5),CMDECOEF
         MVC   CMDEREPL(4,R5),CMDEREPL(R1)
BLK2COEF L     R14,EDIRREC(,R1)    POINT TO FIRST RECORD OF BLOCK END
         MVC   ECHO(6,R14),EDBLNKS CLEAR LINE'S LINE COMMAND
         BAS   R14,FREECMDE        FREE BLOCK END COMMAND ELEMENT
BLK2DONE LR    R1,R5               POINT TO TOTAL BLOCK COMMAND ELEMENT
         LR    R5,R3               POINT TO PRECEDING COMMAND ELEMENT
         BR    R6                  RETURN TO CALLER
         SPACE
*         PERFORM REMAINING LINE COMMANDS.  THIS POINT IS ONLY
*         REACHED WHEN ALL SPECIFIED LINE COMMANDS HAVE BEEN
*         RESOLVED.  "SHOW", "EXCLUDE", "FIRST" AND "LAST"
*         COMMANDS HAVE ALREADY BEEN PROCESSED.
*
LCMDDOIT LA    R3,CMDANKOR-EDIRSIZ POINT TO COMMAND LIST ANCHOR
LCMDDOLP ICM   R5,15,CMDENEXT(R3)  POINT TO NEXT COMMAND ELEMENT
         BZ    LNCMDXIT            ALL LINE COMMANDS NOW PROCESSED
         CLI   CMDECODE(R5),C'N'   "NULL" LINE COMMAND?
         BE    DONOUGHT            YES, NEVER CALL BLOCKTO1
         L     R1,CMDENEXT(R5)     PREPARE FOR BLOCK COMMAND
         TM    CMDEFLAG(R5),CMDE2LTR
         BNO   LCMD1ELE            ELEMENT IS NOT A BLOCK START
         BAS   R6,BLOCKTO1         REDUCE BLOCK TO ONE ELEMENT
         LR    R5,R1               POINT TO BLOCK COMMAND ELEMENT
LCMD1ELE CLI   CMDECODE(R5),C'('   "SHIFT LEFT" LINE COMMAND?
         BE    DOSHIFTL            YES
         CLI   CMDECODE(R5),C')'   "SHIFT RIGHT" LINE COMMAND?
         BE    DOSHIFTR            YES
         CLI   CMDECODE(R5),C'D'   "DELETE" LINE COMMAND?
         BE    DODELETE            YES
         CLI   CMDECODE(R5),C'R'   "REPEAT" LINE COMMAND?
         BE    DOREPEAT            YES
         CLI   CMDECODE(R5),C'C'   "COPY" LINE COMMAND?
         BE    DOCPYMOV            YES
         CLI   CMDECODE(R5),C'M'   "MOVE" LINE COMMAND?
         BE    DOCPYMOV            YES
         CLI   CMDECODE(R5),C'I'   "INSERT" LINE COMMAND?
         BE    DOINSERT            YES
         CLI   CMDECODE(R5),C'W'   "LOWER" LINE COMMAND?
         BE    DOLOWER             YES
         CLI   CMDECODE(R5),C'U'   "UPPER" LINE COMMAND?
         BE    DOUPPER             YES
         CLI   CMDECODE(R5),C'T'   "TEXT" LINE COMMAND?
         BE    DOTEXT              YES
         CLI   CMDECODE(R5),C'K'   "MAKE DATA" LINE COMMAND?
         BE    DOMKDATA            YES
         LR    R3,R5               POINT TO THIS COMMAND ELEMENT
         B     LCMDDOLP            IGNORE MOVE/COPY TARGETS FOR NOW
         SPACE
*
*         "SHIFT LEFT" LINE COMMAND
*
DOSHIFTL L     R1,EDIRREC(,R5)     POINT TO (FIRST) RECORD TO SHIFT
         CPYA  A6,A14              LOAD DATA SPACE ALET
         CPYA  A1,A15              LOAD DATA SPACE ALET
         MVC   ECHO(6,R1),EDBLNKS  CLEAR LINE'S LINE COMMAND
         LA    R0,2                GET DEFAULT COLUMN SHIFT DISTANCE
         TM    CMDEFLAG(R5),CMDECOEF
         BNO   SHFTLFLP            USE DEFAULT
         L     R0,CMDEREPL(,R5)    USE SPECIFIED COLUMN COUNT
SHFTLFLP LA    R14,CTLLEN(,R1)     POINT TO DATA
         A     R14,EDLBND          POINT TO DATA IN BOUNDS
         L     R15,EDRBND
         S     R15,EDLBND          GET SIZE OF DATA IN BOUNDS
         STM   R14,R15,DOUBLE      SAVE FOR QUICK RELOAD
         SR    R7,R7               ZERO LENGTH
         ICM   R7,8,EDBLNKS        SET PAD TO BLANK
         CLCL  R14,R6              IS AREA ALREADY BLANK?
         BE    SHFTEDLF            YES, NO CHANGE FOR THIS LINE
         LM    R14,R15,DOUBLE      NO, RELOAD AREA DETAILS
         LR    R6,R14              POINT TO RECORD'S DATA
         LR    R7,R15              GET SIZE OF DATA FOR RECORD
         AR    R6,R0               POINT TO SOURCE
         SR    R7,R0               GET SIZE OF SOURCE
         BNM   SHFTLFOK
         SR    R7,R7               SHIFT MORE THAN DATA LENGTH
SHFTLFOK ICM   R7,8,EDBLNKS        SET PAD TO BLANK
         MVCL  R14,R6              SHIFT DATA LEFT
         OI    FLG1(R1),CHGL       MARK RECORD AS CHANGED
         OI    EDFLG1,SAVEY+SAVEZ  FLAG IN-CORE DATA HAS CHANGED
         L     R15,EDITSNT@        POINT TO ROUTINE ENTRY POINT
         BASR  R14,R15             UPDATE LINE SYNTAX STATUS
SHFTEDLF C     R1,EDIRFIN(,R5)     PROCESSED LAST RECORD OF ELEMENT?
         BE    DONOUGHT            YES, FINISH UP
         ICM   R1,15,FWD(R1)       NO, POINT TO NEXT RECORD
         BNZ   SHFTLFLP            GO PROCESS IT
         B     DONOUGHT            SHOULD NOT HAPPEN
         SPACE
*
*         "SHIFT RIGHT" LINE COMMAND
*
DOSHIFTR L     R1,EDIRREC(,R5)     POINT TO (FIRST) RECORD TO SHIFT
         CPYA  A6,A14              LOAD DATA SPACE ALET
         CPYA  A1,A15              LOAD DATA SPACE ALET
         MVC   ECHO(6,R1),EDBLNKS  CLEAR LINE'S LINE COMMAND
         LA    R0,2                GET DEFAULT COLUMN SHIFT DISTANCE
         TM    CMDEFLAG(R5),CMDECOEF
         BNO   *+8                 USE DEFAULT
         L     R0,CMDEREPL(,R5)    USE SPECIFIED COLUMN COUNT
         L     R15,EDRBND
         S     R15,EDLBND          GET SIZE OF DATA IN BOUNDS
         CR    R0,R15              SHIFT MORE THAN DATA LENGTH?
         BNH   *+8                 NO
         LA    R0,0(,R15)          YES, SET TO DATA LENGTH
         STM   R15,R0,DOUBLE       SAVE DATA LENGTH AND SHIFT COUNT
SHFTRTLP LA    R14,CTLLEN(,R1)     POINT TO DATA
         A     R14,EDLBND          POINT TO DATA IN BOUNDS
         L     R15,DOUBLE          GET DATA LENGTH
         LA    R2,0(R15,R14)       POINT PAST DATA IN BOUNDS
         SR    R7,R7               ZERO LENGTH
         ICM   R7,8,EDBLNKS        SET PAD TO BLANK
         CLCL  R14,R6              IS AREA ALREADY BLANK?
         BE    SHFTEDRT            YES, NO CHANGE FOR THIS LINE
         LA    R14,CTLLEN(,R1)     POINT TO DATA
         A     R14,EDLBND          POINT TO DATA IN BOUNDS
         LM    R15,R0,DOUBLE       GET DATA LENGTH AND SHIFT COUNT
         AR    R14,R15             POINT PAST DATA
         BCTR  R14,0               POINT TO LAST DATA BYTE
         LR    R6,R14              POINT TO LAST DATA BYTE
         SR    R6,R0               BACK UP BY SHIFT COUNT
         SR    R15,R0              GET DATA LENGTH TO SHIFT
         BNP   SHFTRTOK            SHIFTING OUT ALL DATA
SHFTRTL1 MVC   0(1,R14),0(R6)      SHIFT A BYTE
         BCTR  R14,0               BACK TARGET UP ONE
         BCTR  R6,0                BACK SOURCE UP ONE
         BCT   R15,SHFTRTL1        GO SHIFT NEXT BYTE
SHFTRTOK LR    R15,R0              GET SHIFT COLUMN COUNT
         LA    R14,CTLLEN(,R1)     POINT TO DATA
         A     R14,EDLBND          POINT TO DATA IN BOUNDS
         SR    R7,R7               ZERO SOURCE LENGTH
         ICM   R7,8,EDBLNKS        SET PAD TO BLANK
         MVCL  R14,R6              BLANK OUT START OF RECORD
         OI    FLG1(R1),CHGL       MARK RECORD AS CHANGED
         OI    EDFLG1,SAVEY+SAVEZ  FLAG IN-CORE DATA HAS CHANGED
         L     R15,EDITSNT@        POINT TO ROUTINE ENTRY POINT
         BASR  R14,R15             UPDATE LINE SYNTAX STATUS
SHFTEDRT C     R1,EDIRFIN(,R5)     PROCESSED LAST RECORD OF ELEMENT?
         BE    DONOUGHT            YES, FINISH UP
         ICM   R1,15,FWD(R1)       NO, POINT TO NEXT RECORD
         BNZ   SHFTRTLP            GO PROCESS IT
         B     DONOUGHT            SHOULD NOT HAPPEN
         SPACE
*
*         "DELETE" LINE COMMAND
*
DODELETE OI    EDFLG1,SAVEY+SAVEZ  FLAG IN-CORE DATA HAS CHANGED
         L     R15,EDIRREC(,R5)    POINT TO (FIRST) RECORD TO DELETE
         CPYA  A6,A15              LOAD DATA SPACE ALET
         CPYA  A7,A15              LOAD DATA SPACE ALET
         L     R0,LINENMBR         GET PRE-DELETE TOP-OF-SCREEN NUMBER
DODELOOP L     R6,BAK(,R15)        POINT TO PREVIOUS RECORD
         L     R7,FWD(,R15)        POINT TO FOLLOWING RECORD
         TM    FLG1(R15),LINS      WAS THIS LINE AN UNUSED INSERTION?
         BO    DELTOSOK            YES, ALREADY DELETED BY EDITMERG
         ST    R6,BAK(,R7)         UPDATE FOLLOWING BACK POINTER
         ST    R7,FWD(,R6)         UPDATE PREVIOUS FORWARD POINTER
         MVC   FWD(4,R15),MPTANKOR ADD THIS LINE TO EMPTY CHAIN
         OI    FLG2(R15),255-LLBL  FLAG LINE AS AWAITING REUSE
         ST    R15,MPTANKOR
         LAE   R14,RECLINES        POINT TO COUNTER TO ADJUST
         TM    FLG1(R15),LMSG      MESSAGE LINE?
         BNO   *+8                 NO
         LA    R14,MSGLINES        YES, ADJUST A DIFFERENT COUNTER
         L     R2,0(,R14)          LOAD THE COUNT
         BCTR  R2,0                DECREMENT THE COUNT
         ST    R2,0(,R14)          SAVE THE UPDATED COUNT
         C     R15,CSRRECAD        WAS CURSOR ON LINE JUST DELETED?
         BNE   DELCSROK            NO
         ST    R7,CSRRECAD         YES, MOVE IT TO NEXT LINE
         XC    EDCSRCOL,EDCSRCOL   LEAVE CURSOR IN LINE COMMAND AREA
         OI    EDFLG2,E2CRU        FLAG UPDATE
DELCSROK C     R15,LINEADDR        JUST DELETED TOP-OF-SCREEN RECORD?
         BNE   DELTOPOK            NO
         ST    R7,LINEADDR         YES, MAKE NEXT RECORD TOP-OF-SCREEN
         B     DELTOSOK            OBVIOUSLY NOT BEFORE TOP-OF-SCREEN
DELTOPOK CL    R0,EDIR1ST(,R5)     WAS DELETED LINE FROM BEFORE TOP?
         BNH   DELTOSOK            NO, TOP-OF-SCREEN SEQUENCE UNCHANGED
         TM    FLG1(R15),LMSG      WAS DELETED LINE A MESSAGE LINE?
         BO    DELTOSOK            YES, LINE NUMBER NOT AFFECTED
         BCTR  R0,0                DECREMENT TOP-OF-SCREEN NUMBER
         ST    R0,LINENMBR         SAVE IT
DELTOSOK TM    FLG2(R15),LLBL      DOES THIS LINE HAVE A LABEL?
         BZ    DELLBLOK            NO
         LA    R1,LABANKOR         POINT TO LABEL ELEMENT CHAIN ORIGIN
         ST    R3,DOUBLE           SAVE COMMAND ELEMENT CHAIN ANCHOR
         USING @EDLABEL,R1
DELLBLLP LR    R3,R1               SAVE PREVIOUS LABEL ELEMENT ADDRESS
         ICM   R1,15,EDL_NEXT      POINT TO NEXT LABEL ELEMENT ON CHAIN
         BZ    DELLBLOK            SHOULD NOT REACH END OF CHAIN
         C     R15,EDL_ADDR        FOUND LINE'S LABEL ELEMENT?
         BNE   DELLBLLP            NO, KEEP SEARCHING CHAIN
         MVC   EDL_NEXT-@EDLABEL(4,R3),EDL_NEXT  DECHAIN ELEMENT
         NI    FLG2(R15),255-LLBL  UNLABEL DELETED LINE
         L     R4,LBBANKOR         POINT TO NEWEST LABEL BLOCK
         USING @EDLBLHD,R4
         MVC   EDL_NEXT,ELH_FREE
         ST    R1,ELH_FREE         PUT ELEMENT ON FREE-TO-REUSE CHAIN
         DROP  R1,R4               @EDLABEL, @EDLBLHD
         L     R15,MPTANKOR        RESTORE POINTER TO DELETED LINE
         L     R3,DOUBLE           RESTORE COMMAND ELEMENT CHAIN ANCHOR
         LAM   A15,A15,DSPCALET    LOAD DATA SPACE ALET
         MVI   FLG2(R15),255-LLBL  RESET LABEL FLAG
         C     R15,EDRGEFST        WAS THIS LINE TOP OF RANGE?
         BE    DELNORGE            YES, GO CLEAR LINE RANGE
         C     R15,EDRGELST        WAS THIS LINE END OF RANGE?
         BNE   DELLBLOK            NO, LEAVE RANGE STATUS UNCHANGED
DELNORGE NI    FINDSW4,255-FRGE    RESET LINE RANGE CURRENT FLAG
DELLBLOK C     R15,EDIRFIN(,R5)    IS THIS THE LAST RECORD TO DELETE?
         BE    DNDELETE            YES, DELETION NOW COMPLETE
         LR    R15,R7              NO, POINT TO NEXT ENTRY TO DELETE
         B     DODELOOP            GO DELETE IT
DNDELETE LAM   A0,A13,EDZEROS      RESET ALETS
DONOUGHT LR    R1,R5               POINT TO PROCESSED COMMAND ELEMENT
         LR    R5,R3               POINT TO PRECEDING COMMAND ELEMENT
         BAS   R14,FREECMDE        FREE THE COMMAND ELEMENT
         B     LCMDDOIT            GO LOOK FOR MORE LINE COMMANDS
         SPACE
*
*         "REPEAT" LINE COMMAND
*
DOREPEAT CPYA  A6,A15              LOAD DATA SPACE ALET
         CPYA  A7,A15              LOAD DATA SPACE ALET
         CPYA  A8,A15              LOAD DATA SPACE ALET
         L     R7,EDIRFIN(,R5)     POINT TO RECORD BEFORE NEW RECORD
         MVI   DOUBLE,0            CLEAR A FLAG
DOCOMMON LR    R1,R5               POINT TO CURRENT COMMAND ELEMENT
         LR    R5,R3               POINT TO PRECEDING COMMAND ELEMENT
DOREPLLP L     R6,EDIRREC(,R1)     POINT TO FIRST RECORD TO REPEAT
         MVC   ECHO(6,R6),EDBLNKS  CLEAR LINE'S LINE COMMAND
DOREPTLP L     R8,FWD(,R7)         POINT TO RECORD AFTER THIS ONE
         L     R15,GETALIN@
         BASR  R14,R15             GET STORAGE FOR A RECORD
         BZ    DONOTREP            NO STORAGE TO BE HAD
         ST    R7,BAK(,R15)        SET NEW BACK POINTER
         ST    R8,FWD(,R15)        SET NEW FORWARD POINTER
         ST    R15,FWD(,R7)        UPDATE OLD FORWARD POINTER
         ST    R15,BAK(,R8)        UPDATE OLD BACK POINTER
         LR    R7,R15              POINT TO THE NEW RECORD
         LAE   R2,RECLINES         POINT TO LINE CATEGORY COUNTER
         TM    FLG1(R6),LMSG       REPLICATING A MESSAGE LINE?
         BNO   REPLDATA            NO
         OI    FLG1(R7),LMSG       YES, MAKE THE NEW LINE A MESSAGE
         LAE   R2,MSGLINES         POINT TO LINE CATEGORY COUNTER
         TM    FLG3(R6),LFIX       MESSAGE LOCKED AT LEFT MAX?
         BNO   REPLDATA            NO
         OI    FLG3(R7),LFIX       YES, MAKE IT SO FOR THE NEW LINE
REPLDATA LA    R0,1
         A     R0,0(,R2)           INCREMENT RECORD COUNTER
         ST    R0,0(,R2)
         MVC   OLEN(2,R7),OLEN(R6) REPLICATE ORIGINAL RECORD LENGTH
         LAE   R2,CTLLEN(,R6)      POINT TO DATA TO REPEAT
         L     R3,MAXRECSZ         GET DATA LENGTH
         LA    R14,CTLLEN(,R7)     POINT TO WHERE DATA IS TO GO
         LR    R15,R3              GET DATA LENGTH
         MVCL  R14,R2              REPLICATE RECORD'S DATA
         CLI   DOUBLE,0            NEW LINE ABOVE TOP-OF-SCREEN?
         BE    REPLNUMB            NO
         TM    FLG1(R6),LMSG       REPLICATING A MESSAGE LINE?
         BO    REPLNUMB            YES, LINE NUMBER UNAFFECTED
         LA    R0,1
         A     R0,LINENMBR         INCREMENT CURRENT TOP LINE NUMBER
         ST    R0,LINENMBR
REPLNUMB OI    FLG1(R7),CHGL       MARK RECORD AS CHANGED
         OI    EDFLG1,SAVEY+SAVEZ  FLAG IN-CORE DATA HAS CHANGED
         TM    EDFLG2,E2CRU        CSRRECAD UPDATED SINCE DISPLAY?
         BO    REPCRUOK            YES, DO NOT ALTER IT AGAIN
         ST    R7,CSRRECAD         NO, MOVE CURSOR TO THIS LINE
         ST    R3,EDCSRCOL         LEAVE CURSOR IN LINE COMMAND AREA
         OI    EDFLG2,E2CRU        FLAG UPDATE
REPCRUOK C     R6,EDIRFIN(,R1)     REPEATED LAST RECORD OF REQUEST?
         BE    DONEAREP            YES
         L     R6,FWD(,R6)         NO, POINT TO NEXT RECORD TO REPEAT
         B     DOREPTLP            GO REPEAT NEXT RECORD
DONEAREP L     R0,CMDEREPL(,R1)    GET REPLICATION COEFFICIENT
         BCTR  R0,0                DECREMENT IT
         ST    R0,CMDEREPL(,R1)    SAVE IT
         LTR   R0,R0               MORE REPEATING REQUIRED?
         BP    DOREPLLP            YES, GO DO IT
         LAM   A0,A13,EDZEROS      RESET ALETS
         BAS   R14,FREECMDE        FREE THE COMMAND ELEMENT
         B     LCMDDOIT            GO LOOK FOR MORE LINE COMMANDS
DONOTREP LA    R5,CMDANKOR-EDIRSIZ POINT TO COMMAND LIST ANCHOR
         MVI   MSG,123             REQUEST ABORTED - STORAGE FULL
DONTRPLP ICM   R1,15,CMDENEXT(R5)  POINT TO NEXT COMMAND ELEMENT
         BZ    LNCMDXIT            END OF CHAIN GO SHOW SCREEN
         BAS   R14,FREECMDE        FREE THE COMMAND ELEMENT
         B     DONTRPLP            PROCESS NEXT ELEMENT ON CHAIN
         SPACE
*
*         "COPY" AND "MOVE" LINE COMMANDS
*
*
*         FIRST PHASE IS TO LOOK FOR A TARGET COMMAND ELEMENT.
*
DOCPYMOV LA    R1,CMDANKOR-EDIRSIZ POINT TO COMMAND LIST ANCHOR
TARGETLP L     R1,CMDENEXT(,R1)    POINT TO NEXT COMMAND ELEMENT
         CLI   CMDECODE(R1),C'O'   "OVER"?
         BE    OVERLORD            YES
         CLI   CMDECODE(R1),C'A'   "AFTER" OR "BEFORE"?
         BL    TARGETLP            NO, KEEP LOOKING
         CLI   CMDECODE(R1),C'B'   "AFTER" OR "BEFORE"?
         BH    TARGETLP            NO, KEEP LOOKING
         CPYA  A6,A15              LOAD DATA SPACE ALET
         CPYA  A7,A15              LOAD DATA SPACE ALET
         CPYA  A8,A15              LOAD DATA SPACE ALET
*
*         NOW PROCESS TARGET ELEMENT INFORMATION:
*         1.  DETERMINE EXACT TARGET INSERTION POINT.
*         2.  SET TARGET REPLICATION COEFFICIENT.
*
         L     R0,EDIR1ST(,R1)     GET TARGET LINE NUMBER
         BCTR  R0,0                GET TARGET LINE NUMBER IF A "BEFORE"
         L     R7,EDIRREC(,R1)     POINT TO FIRST RECORD ON SCREEN LINE
         MVC   ECHO(6,R7),EDBLNKS  CLEAR TARGET LINE'S LINE COMMAND
         L     R7,BAK(,R7)         POINT TO RECORD BEFORE LINE
         BE    AFTORB4             TARGET IS A "BEFORE"
         L     R0,EDIRLST(,R1)     GET TARGET LINE NUMBER
         L     R7,EDIRFIN(,R1)     TARGET IS AN "AFTER" - GET LAST REC
*                                  SET TARGET REPLICATION COEFFICIENT
AFTORB4  MVC   CMDEREPL(4,R5),CMDEREPL(R1)
         MVI   DOUBLE,0            CLEAR A FLAG
         CL    R0,LINENMBR         IS IT BEFORE TOP SCREEN LINE?
         BNL   *+8                 NO, TOP-OF-SCREEN SEQUENCE UNCHANGED
         MVI   DOUBLE,1            SET A FLAG
*
*         FOR A "COPY" CONVERT THE TARGET TO AN INTERNAL NO-OPERATION.
*         FOR A "MOVE" CONVERT THE TARGET TO A "DELETE" OF THE SOURCE.
*         BRANCH TO "REPEAT" TO PERFORM THE COPYING PROCESS, WHILE
*         LEAVING THE OLD TARGET COMMAND ELEMENT QUEUED FOR LATER.
*
         MVI   CMDECODE(R1),C'N'   CHANGE TO AN INTERNAL NO-OPERATION
         CLI   CMDECODE(R5),C'C'   PROCESSING A "COPY" REQUEST?
         BE    DOCOMMON            YES, GO PERFORM DATA REPLICATION
         MVC   0(EDIRSIZ,R1),0(R5) NO, COPY "MOVE" SOURCE DETAILS
         MVI   CMDECODE(R1),C'D'   CHANGE TO A "DELETE" COMMAND ELEMENT
         B     DOCOMMON            GO PERFORM DATA REPLICATION
*
*         PROCESS "COPY OVER" AND "MOVE OVER"
*
*         FIRSTLY, CHECK IF THE TARGET IS A BLOCK.
*         IF IT IS, AND THE TARGET IS AFTER THE SOURCE,
*         THEN IT WOULD NOT HAVE BEEN REDUCED TO ONE ELEMENT YET,
*         SO THIS MUST BE DONE BEFORE THE OVERLAY CAN PROCEED.
*
OVERLORD TM    CMDEFLAG(R1),CMDE2LTR
         BNO   OVERPLAY            TARGET IS NOT A BLOCK
         CLC   EDIRREC(4,R1),EDIRFIN(R1)
         BNE   OVERPLAY            TARGET BLOCK ELEMENTS ARE COMBINED
         LR    R3,R5               SAVE SOURCE ELEMENT ADDRESS
         LR    R5,R1               POINT TO TARGET BLOCK START
         L     R1,CMDENEXT(,R5)    POINT TO TARGET BLOCK END
         BAS   R6,BLOCKTO1         REDUCE TARGET BLOCK TO ONE ELEMENT
*
*         PERFORM THE DATA OVERLAY PROCESSING UNTIL END-OF-TARGET
*
OVERPLAY CPYA  A6,A15              LOAD DATA SPACE ALET
         CPYA  A7,A15              LOAD DATA SPACE ALET
         CPYA  A8,A15              LOAD DATA SPACE ALET
         MVI   DOUBLE,0            CLEAR A FLAG
         L     R8,EDIRREC(,R5)     POINT TO FIRST SOURCE RECORD
         MVC   ECHO(6,R8),EDBLNKS  CLEAR SOURCE LINE'S LINE COMMAND
         L     R15,EDIRREC(,R1)    POINT TO FIRST TARGET RECORD
         MVC   ECHO(6,R15),EDBLNKS CLEAR TARGET LINE'S LINE COMMAND
OVERLINE TM    FLG1(R15),LMSG      IS THE TARGET A MESSAGE LINE?
         BO    ROLLOVER            YES, SO SKIP IT
         TM    FLG3(R8),LFIX       IS THE SOURCE LINE A PROFILE LINE?
         BNO   OVERDUB             NO
         CLI   CTLLEN(R8),C' '     IS THE SOURCE LINE A PROFILE LINE?
         BNL   OVERDUB             NO
         OI    DOUBLE,1            FLAG AN OVERLAY COULD NOT BE DONE
         B     OVERDONE            DO NOT ACTUALLY COPY ANYTHING
OVERDUB  L     R0,EDRBND
         S     R0,EDLBND           GET SIZE OF DATA IN BOUNDS
         LA    R6,CTLLEN(,R8)      POINT TO THE SOURCE DATA START
         LA    R7,CTLLEN(,R15)     POINT TO THE TARGET DATA START
         A     R6,EDLBND           POINT TO SOURCE DATA IN BOUNDS
         A     R7,EDLBND           POINT TO TARGET DATA IN BOUNDS
BOWLOVER CLI   0(R6),C' '          IS THE SOURCE A BLANK?
         BE    OVERSTEP            YES, THAT'S EASY - DO NOTHING
         CLI   0(R7),C' '          IS THE TARGET A BLANK?
         BE    MAKEOVER            YES, PERFORM THE MAKEOVER
         CLC   0(1,R7),0(R6)       DOES SOURCE BYTE MATCH TARGET BYTE?
         BE    OVERSTEP            YES, SO DO NOT INHIBIT DELETE
         OI    DOUBLE,1            FLAG AN OVERLAY COULD NOT BE DONE
         B     OVERSTEP            MOVED LINES WILL NOT BE DELETED
MAKEOVER MVC   0(1,R7),0(R6)       OVERLAY A TARGET BYTE
         OI    FLG1(R15),CHGL      MARK RECORD AS CHANGED
         OI    EDFLG1,SAVEY+SAVEZ  FLAG IN-CORE DATA HAS CHANGED
OVERSTEP LA    R6,1(,R6)           POINT TO NEXT SOURCE BYTE
         LA    R7,1(,R7)           POINT TO NEXT TARGET BYTE
         BCT   R0,BOWLOVER         PROCESS THE WHOLE RECORD
OVERDONE C     R8,EDIRFIN(,R5)     REACHED LAST SOURCE RECORD?
         L     R8,FWD(,R8)         POINT TO NEXT SOURCE RECORD
         BNE   ROLLOVER            NO, NOW POINTING TO NEXT ONE
         L     R8,EDIRREC(,R5)     YES, POINT TO FIRST SOURCE RECORD
         OI    DOUBLE,2            REMEMBER END OF SOURCE REACHED
ROLLOVER C     R15,EDIRFIN(,R1)    PROCESSED LAST TARGET RECORD?
         L     R15,FWD(,R15)       POINT TO NEXT TARGET RECORD
         BNE   OVERLINE            NO, OVERLAY ANOTHER LINE
         SPACE
*
*         MARK TARGET ELEMENT AS A NO-OPERATION FOR LATER DISPOSAL.
*         ALSO MARK SOURCE ELEMENT AS A NOP IF IT IS A COPY.
*         MARK SOURCE AS A DELETE ELEMENT AFTER A SUCCESSFUL MOVE.
*         A MOVE IS SUCCESSFUL IF ALL NON-BLANKS WERE COPIED.
*
         MVI   CMDECODE(R1),C'N'   CHANGE TO AN INTERNAL NO-OPERATION
         CLI   CMDECODE(R5),C'M'   MOVE OR COPY?
         MVI   CMDECODE(R5),C'N'   CHANGE TO AN INTERNAL NO-OPERATION
         BNE   LCMDDOIT            COPY, SO ALL DONE SUCCESSFULLY
         MVI   CMDECODE(R5),C'D'   CHANGE TO A DELETE
         CLI   DOUBLE,2            MOVE, WAS ALL THE SOURCE PRESERVED?
         BE    LCMDDOIT            YES, THE SOURCE CAN BE DELETED
         MVI   CMDECODE(R5),C'N'   CHANGE TO AN INTERNAL NO-OPERATION
         MVI   MSG,127             LINE(S) NOT DELETED
         B     LCMDDOIT            MOVE TRANSFORMED INTO COPY
         SPACE
*
*         "TEXT" LINE COMMAND GROUP
*
DOTEXT   L     R6,EDIRREC(,R5)     POINT TO FIRST RECORD OF SCREEN LINE
         CPYA  A6,A15              LOAD DATA SPACE ALET
         CLI   ECHO+1(R6),C'S'     TEXT SPLIT?
         BE    DOSPLIT             YES, GO PERFORM IT
         CLI   ECHO+1(R6),C'E'     TEXT ENTRY?
         BE    DOENTRY             YES, GO PERFORM IT
         ICM   R1,15,CMDENEXT(R5)  IS THIS THE LAST COMMAND ELEMENT?
         BZ    DOFLOW              YES, PERFORM TEXT FLOW
         LAM   R6,R6,EDZEROS       NO, RESET ALTERED ALET
         LR    R3,R5               POINT TO THIS COMMAND ELEMENT
         B     LCMDDOLP            DO TEXT FLOW LINE COMMANDS LAST
         SPACE
*
*         "TEXT FLOW" LINE COMMAND
*
DOFLOW   MVI   CMDECODE(R5),C'N'   ARRANGE FOR COMMAND ELEMENT DISPOSAL
         MVC   ECHO(6,R6),EDBLNKS  CLEAR LINE'S LINE COMMAND
         ST    R1,CALLPARM+4       ZERO A WORD
         ICM   R1,8,EDBLNKS        SET PAD BYTE INTO ZEROED REGISTER
         L     R0,MAXRECSZ         GET LENGTH OF RECORD
         TM    EPNUM,1             SEQUENCE NUMBERS ACTIVE?
         BNO   *+8                 NO
         S     R0,EDFW8            YES, IGNORE SEQUENCE NUMBER COLUMNS
         C     R0,CMDEREPL(,R5)    IS LAST COLUMN ALLOWED BEYOND END?
         BNL   *+8                 NO
         ST    R0,CMDEREPL(,R5)    YES, REDUCE TO MAXIMUM
         LAE   R14,CTLLEN(,R6)     POINT TO CURRENT RECORD DATA AREA
         LAE   R7,CTLLEN(,R6)      POINT TO CURRENT RECORD DATA AREA
         A     R14,EDLBND          POINT TO DATA IN BOUNDS
         L     R15,EDRBND
         S     R15,EDLBND          GET ITS DATA LENGTH
         LR    R2,R15              SAVE LENGTH
         CLCL  R14,R0              IS IT ALL BLANK?
         BE    DONOUGHT            YES, SO NOTHING TO DO
         L     R0,EDIR1ST(,R5)     GET LINE NUMBER OF CURRENT RECORD
         CL    R0,LINENMBR         IS IT BEFORE TOP SCREEN LINE?
         BNL   TFLIN#OK            NO, TOP-OF-SCREEN SEQUENCE UNCHANGED
         ST    R0,LINENMBR         YES, SO MAKE THIS THE TOP LINE
         ST    R6,LINEADDR         ROUGH, BUT IT WILL AVOID ERRORS
TFLIN#OK XC    EDENQPRM,EDENQPRM   RESET STATUS AREA:
*                                  +0 LEFT MARGIN FOR FIRST LINE
*                                  +4 LEFT MARGIN FOR OTHER LINES
*                                  +8 LIMIT OF SOURCE LINE TEXT INPUT
*                                  +C LIMIT OF TARGET LINE TEXT OUTPUT
         LR    R0,R14
         SR    R0,R7               REMEMBER LEFT MARGIN INDENTATION
         ST    R0,EDENQPRM         THIS IS FOR FIRST LINE ONLY
         L     R14,FWD(,R6)        POINT TO NEXT RECORD
         C     R14,BTMADDR         REACHED END-OF-DATA?
         BE    FLOOFFOK            YES
         LA    R14,CTLLEN(,R14)    POINT TO NEXT RECORD DATA AREA
         LR    R7,R14
         A     R14,EDLBND          POINT TO DATA IN BOUNDS
         LR    R15,R2              GET RECORD DATA LENGTH
         CLCL  R14,R0              IS IT ALL BLANK?
         BE    FLOOFFOK            YES, SO HAVE LEFT MARGIN OFFSET
         SR    R14,R7              GET LEFT MARGIN INDENTATION
         CR    R14,R0              MARGIN MORE TO THE LEFT?
         BNL   FLOOFFOK            NO
         LR    R0,R14              YES
FLOOFFOK ST    R0,EDENQPRM+4       THIS OFFSET FOR LINES AFTER FIRST
         A     R2,EDLBND
         ST    R2,EDENQPRM+8       SAVE SOURCE RECORD DATA LENGTH
         TM    CMDEFLAG(R5),CMDECOEF
         BNO   FLOCOLOK            NO LAST COLUMN SPECIFIED
         CLC   EDLBND,CMDEREPL(R5) LAST COLUMN BEFORE LEFT BOUND?
         BNL   EDBDCOL             YES, CANNOT DO IT
         C     R2,CMDEREPL(,R5)    SHORTER TEXT LINE REQUESTED?
         BNH   FLOCOLOK            NO
         L     R2,CMDEREPL(,R5)    YES, GET IT
FLOCOLOK ST    R2,EDENQPRM+12      SAVE TARGET RECORD DATA LENGTH
         MVI   DOUBLE,1            INITIALIZE FLAGS:
*                                  1 - HAVE SOURCE RECORD TO PROCESS
*                                  2 - HAVE TARGET RECORD TO PROCESS
*                                  4 - TARGET HAS SOME DATA LOADED
         SPACE
FLOSRCLP ST    R6,COUNTER1         SAVE SOURCE RECORD ADDRESS
         LA    R6,CTLLEN(,R6)      POINT TO SOURCE RECORD DATA
         A     R6,EDENQPRM         POINT TO FIRST SOURCE NON-BLANK
         SPACE
FLOTGTST TM    DOUBLE,2            HAVE TARGET RECORD?
         BO    FLOTGTOK            YES
         SPACE
*
*         TF - PROCURE A NEW TEXT RE-FLOW TARGET RECORD
*
FLONEWLN L     R15,GETALIN@        NO
         BASR  R14,R15             GET STORAGE FOR A RECORD
         BZ    DONOTREP            NO STORAGE TO BE HAD
         LR    R2,R15              POINT TO NEW LINE
         CPYA  A2,A15              LOAD DATA SPACE ALET
         ST    R2,COUNTER2         SAVE TARGET RECORD ADDRESS
         L     R15,COUNTER1        POINT TO CURRENT SOURCE
         L     R14,BAK(,R15)       POINT TO SOURCE'S PREVIOUS
         ST    R2,FWD(,R14)        INSERT BEFORE CURRENT RECORD
         ST    R2,BAK(,R15)
         ST    R15,FWD(,R2)
         ST    R14,BAK(,R2)
         OI    FLG1(R2),CHGL       MARK NEW RECORD AS CHANGED
         LA    R14,CTLLEN(,R2)     POINT TO TARGET'S DATA
         L     R15,MAXRECSZ
         MVCL  R14,R0              BLANK OUT NEW RECORD
         LA    R0,1
         A     R0,RECLINES         INCREMENT RECORD COUNT
         ST    R0,RECLINES
         OI    DOUBLE,2            NOW HAVE TARGET RECORD
         NI    DOUBLE,255-4        TARGET RECORD HAS NO DATA YET
         L     R2,COUNTER1         POINT TO SOURCE RECORD
         C     R2,CALLPARM+4       ALREADY COPIED THIS ONE?
         BE    FLOMARGN            YES
         ST    R2,CALLPARM+4       NO, COPY OUT-OF-BOUNDS DATA NOW
         L     R14,COUNTER2        POINT TO TARGET RECORD
         L     R15,MAXRECSZ
         LA    R2,CTLLEN(,R2)      POINT TO SOURCE'S DATA
         LR    R3,R15              COPY LENGTH
         LA    R14,CTLLEN(,R14)    POINT TO TARGET'S DATA
         MVCL  R14,R2              COPY ORIGINAL RECORD
         L     R14,COUNTER2        POINT TO TARGET RECORD
         LA    R14,CTLLEN(,R14)    POINT TO TARGET'S DATA
         A     R14,EDLBND          POINT TO DATA IN BOUNDS
         L     R15,EDRBND
         S     R15,EDLBND          GET BYTE COUNT IN BOUNDS
         MVCL  R14,R0              BLANK DATA IN BOUNDS
FLOMARGN LM    R2,R3,EDENQPRM      GET LEFT MARGINS
         ST    R3,EDENQPRM         SET LEFT MARGIN FOR NEXT TARGET
         A     R2,COUNTER2         POINT TO FIRST NON-BLANK TARGET
         LA    R2,CTLLEN(,R2)
FLOTGTOK L     R7,COUNTER1         POINT TO SOURCE RECORD
         LA    R7,CTLLEN(,R7)      POINT TO SOURCE RECORD'S DATA
         A     R7,EDENQPRM+8       POINT PAST SOURCE RECORD'S DATA
         SR    R7,R6               GET LENGTH OF SOURCE REMAINING
*
*         TF - DETERMINE THE NEXT WORD TO COPY
*
FLOGTLEN SR    R3,R3               RESET WORD LENGTH
FLOSCNLP CLI   0(R6),C' '          SOURCE BLANK?
         BE    FLOSCNWD            YES, END OF WORD
         LA    R6,1(,R6)           NO, POINT TO NEXT CHARACTER
         LA    R3,1(,R3)           INCREMENT WORD LENGTH
         BCT   R7,FLOSCNLP         CONTINUE SCAN UNTIL END OF RECORD
FLOSCNWD SR    R6,R3               POINT BACK TO WORD
         TM    DOUBLE,4            DOES TARGET HAVE ANY DATA?
         BNO   FLOWWORD            NO, SO SKIP LIMIT CHECK
         L     R14,COUNTER2        POINT TO TARGET RECORD
         LA    R14,CTLLEN(,R14)    POINT TO TARGET RECORD'S DATA
         A     R14,EDENQPRM+12     POINT PAST TARGET RECORD'S DATA
         SR    R14,R2              GET LENGTH OF TARGET REMAINING
         CR    R14,R3              SUFFICIENT ROOM FOR WORD?
         BL    FLONEWLN            NO, NEED ANOTHER LINE
*
*         TF - COPY THE WORD AND POSITION FOR THE NEXT WORD
*
FLOWWORD LR    R7,R3               SOURCE LENGTH EQUALS TARGET LENGTH
         MVCL  R2,R6               COPY WORD
         OI    DOUBLE,4            TARGET LINE NOW HAS DATA
         BCTR  R2,0                POINT TO LAST COPIED BYTE
         LA    R3,3
         CLI   0(R2),C':'          END OF SENTENCE?
         BE    FLOWSENT            YES
         CLI   0(R2),C')'          CLOSE PARENTHESIS?
         BNE   FLOWBRAC            NO
         BCTR  R2,0                YES, BACK UP ONE
         LA    R3,1(,R3)           ADJUST FOR BACKING UP
FLOWBRAC CLI   0(R2),C'"'          UNQUOTE?
         BNE   FLOWQUOT            NO
         BCTR  R2,0                YES, BACK UP ONE
         LA    R3,1(,R3)           ADJUST FOR BACKING UP
FLOWQUOT CLI   0(R2),C'.'          END OF SENTENCE?
         BE    FLOWSENT            YES
         CLI   0(R2),C'?'          END OF SENTENCE?
         BE    FLOWSENT            YES
         CLI   0(R2),C'!'          END OF SENTENCE?
         BE    FLOWSENT            YES
         BCTR  R3,0                NO, ONLY ONE BLANK NEEDED
FLOWSENT AR    R2,R3               POSITION FOR NEXT WORD
*
*         TF - WORD HAS BEEN MOVED, BUT IT MIGHT HAVE BEEN ADDED TO AN
*         EXISTING SOURCE RECORD WHOSE EXISTING WORDS WERE NOT MOVED.
*         IF SO, CHGL MIGHT BE OFF, BUT NOW IT SHOULD BE ON.
*         SO, IF IT IS OFF TURN IT ON AND SAY THE DATA HAS CHANGED.
*
         L     R7,COUNTER2         POINT TO TARGET RECORD
         TM    FLG1(R7),CHGL       IS IT MARKED AS CHANGED?
         BO    FLOEOINC            YES, GO CHECK FOR END OF IN DATA
         OI    FLG1(R7),CHGL       NO, SO NOW MARK IT AS CHANGED
         OI    EDFLG1,SAVEY+SAVEZ  FLAG IN-CORE DATA HAS CHANGED
FLOEOINC L     R7,COUNTER1         POINT TO SOURCE RECORD
         LA    R7,CTLLEN(,R7)      POINT TO SOURCE RECORD'S DATA
         A     R7,EDENQPRM+8       POINT PAST SOURCE RECORD'S DATA
         SR    R7,R6               GET LENGTH OF SOURCE REMAINING
         BNP   FLOINLNC            INPUT RECORD DONE - CHECK FOR CHANGE
         CLCL  R6,R0               ANY MORE WORDS TO FLOW IN RECORD?
         BNE   FLOGTLEN            YES, GO GET ITS LENGTH
*
*         TF - WORDS FROM SOURCE RECORD HAVE NOW BEEN PROCESSED
*
FLOINLNC NI    DOUBLE,255-1        FLAG NO LONGER HAVE A SOURCE RECORD
         L     R6,COUNTER1         POINT TO SOURCE RECORD
         MVC   DOUBLE+4(4),FWD(R6) SAVE ADDRESS OF NEXT SOURCE RECORD
         LA    R6,CTLLEN(,R6)      POINT TO SOURCE RECORD'S DATA
         A     R6,EDLBND           POINT TO SOURCE DATA IN BOUNDS
         L     R7,EDENQPRM+8       GET DATA LAST COLUMN NUMBER
         S     R7,EDLBND           GET DATA LENGTH
         L     R14,COUNTER2        POINT TO TARGET RECORD
         LA    R14,CTLLEN(,R14)    POINT TO TARGET RECORD'S DATA
         A     R14,EDLBND          POINT TO TARGET DATA IN BOUNDS
         LR    R15,R7              GET DATA LENGTH
         CLCL  R14,R6              SOURCE AND TARGET HAVE SAME DATA?
         BE    FLODELTG            YES, DELETE TARGET
*
*         TF - SOURCE AND TARGET RECORDS DIFFER, SO DELETE THE SOURCE
*
         OI    EDFLG1,SAVEY+SAVEZ  FLAG IN-CORE DATA HAS CHANGED
         CLC   LINEADDR,COUNTER1   WAS SOURCE TOP DATA LINE?
         BNE   FLODELS1            NO
         MVC   LINEADDR,COUNTER2   YES, NOW TARGET IS TOP DATA LINE
FLODELS1 CLC   CSRRECAD,COUNTER1   WAS CURSOR ON THE SOURCE LINE?
         BNE   FLODELS2            NO
         MVC   CSRRECAD,COUNTER2   YES, MOVE IT TO THE TARGET LINE
         OI    EDFLG2,E2CRU        FLAG UPDATE
FLODELS2 L     R15,COUNTER1        POINT TO RECORD TO BE DELETED
         B     FLODELLN            GO TO DELETE ROUTINE
*
*         TF - TEXT UNCHANGED BY FLOW, SO DELETE TARGET RECORD
*
FLODELTG S     R2,COUNTER2         GET OUTPUT LOCATION OFFSET
         L     R15,COUNTER2        POINT TO RECORD TO BE DELETED
         MVC   COUNTER2,COUNTER1   SOURCE RECORD NOW CONSIDERED TARGET
         A     R2,COUNTER2         TRANSFER TO NEW TARGET ADDRESS
         OI    DOUBLE,2+4          TARGET EXISTS AND HAS DATA TO KEEP
*
*         TF - DELETE THE SUPERFLUOUS RECORD
*
FLODELLN L     R6,BAK(,R15)        POINT TO PREVIOUS RECORD
         L     R14,FWD(,R15)       POINT TO FOLLOWING RECORD
         ST    R6,BAK(,R14)        UPDATE FOLLOWING BACK POINTER
         ST    R14,FWD(,R6)        UPDATE PREVIOUS FORWARD POINTER
         MVC   FWD(4,R15),MPTANKOR ADD THIS LINE TO EMPTY CHAIN
         OI    FLG2(R15),255-LLBL  FLAG LINE AS AWAITING REUSE
         ST    R15,MPTANKOR
         L     R0,RECLINES
         BCTR  R0,0                DECREMENT RECORD COUNT
         ST    R0,RECLINES
         L     R6,DOUBLE+4         POINT TO NEXT SOURCE RECORD
         C     R6,BTMADDR          IS IT BOTTOM-OF-DATA?
         BE    FLOWTIDY            YES, GO TIDY UP TO FINISH OFF
         ST    R6,COUNTER1         NO, SAVE RECORD ADDRESS
         OI    DOUBLE,1            FLAG HAVE A SOURCE RECORD
         LAE   R14,CTLLEN(,R6)     POINT TO RECORD DATA AREA
         LR    R7,R14              POINT TO RECORD DATA AREA
         A     R14,EDLBND          POINT TO RECORD DATA IN BOUNDS
         L     R15,EDENQPRM+8      GET DATA LAST COLUMN NUMBER
         S     R15,EDLBND          GET DATA LENGTH
         CLCL  R14,R0              IS IT ALL BLANK?
         BE    FLOWTIDY            YES, GO TIDY UP TO FINISH OFF
         SR    R14,R7              GET THE LEFT MARGIN INDENTATION
         C     R14,EDENQPRM+4      INDENTATION CHANGE?
         BE    FLOSRCLP            NO, GO FLOW THIS LINE
FLOWTIDY TM    DOUBLE,2+4          LEFT WITH UNUSED TARGET RECORD?
         BNM   LCMDDOIT            NO, TEXT FLOW NOW COMPLETE
         L     R15,COUNTER2        YES, POINT TO IT
         L     R6,BAK(,R15)        POINT TO PREVIOUS RECORD
         L     R14,FWD(,R15)       POINT TO FOLLOWING RECORD
         ST    R6,BAK(,R14)        UPDATE FOLLOWING BACK POINTER
         ST    R14,FWD(,R6)        UPDATE PREVIOUS FORWARD POINTER
         MVC   FWD(4,R15),MPTANKOR ADD THIS LINE TO EMPTY CHAIN
         OI    FLG2(R15),255-LLBL  FLAG LINE AS AWAITING REUSE
         ST    R15,MPTANKOR
         L     R0,RECLINES
         BCTR  R0,1                DECREMENT RECORD COUNT
         ST    R0,RECLINES
         B     LCMDDOIT            TEXT FLOW NOW COMPLETE
         SPACE
*
*         "TEXT ENTRY" LINE COMMAND
*
DOENTRY  OI    CMDEFLAG(R5),CMDETE SET "TEXT ENTRY" FLAG
         B     GOINSERT            GO CONVERT IT TO AN "INSERT"
         SPACE
*
*         "TEXT SPLIT" LINE COMMAND
*
DOSPLIT  NI    FLG1(R6),255-XCLD   SHOW THIS RECORD
         C     R6,CSRRECAD         WAS THE CURSOR ON THIS LINE?
         BNE   GOINSERT            NO, IDENTICAL TO INSERT
         L     R4,EDCSRCOL         YES, GET CURSOR COLUMN
         S     R4,EDFW8            WAS THE CURSOR ON DATA?
         BNP   GOINSERT            NO, IDENTICAL TO INSERT
         C     R4,EDATWDTH         WAS THE CURSOR ON DATA?
         BH    GOINSERT            NO, IDENTICAL TO INSERT
         A     R4,EDOFFSET         CONVERT TO RECORD COLUMN
         C     R4,EDLBND           LEFT OF BOUNDS?
         BNH   GOINSERT            YES, IDENTICAL TO INSERT
         C     R4,EDRBND           RIGHT OF BOUNDS?
         BH    GOINSERT            YES, IDENTICAL TO INSERT
         BCTR  R4,0                CONVERT COLUMN TO OFFSET
         MVC   EDCSROUT,EDCSRPOS   LEAVE CURSOR WHERE IT IS
         OI    EDFLG2,E2CRU        FLAG CURSOR NOT TO BE MOVED
         SR    R1,R1
         ICM   R1,8,EDBLNKS        SET PAD CHARACTER
         LAE   R14,CTLLEN(,R6)     POINT TO CURRENT RECORD DATA AREA
         AR    R14,R4              POINT TO DATA UNDER CURSOR
         L     R15,EDRBND          GET LAST COLUMN TO PROCESS
         SR    R15,R4              GET DATA LENGTH PAST CURSOR
         CLCL  R14,R0              IS IT ALL BLANK AFTER CURSOR?
         BE    DOINSERT            YES, NO TEXT TO RELOCATE
         STM   R14,R15,DOUBLE      SAVE DETAILS OF TEXT TO MOVE
         L     R15,GETALIN@
         BASR  R14,R15             GET STORAGE FOR A RECORD
         BZ    DONOTREP            INSUFFICIENT STORAGE
         L     R14,FWD(,R6)        POINT TO OLD NEXT RECORD
*                                  R4   = CURSOR RECORD DATA OFFSET
*                                  R6  -> CURRENT RECORD
*                                  R15 -> NEWLY CREATED RECORD
*                                  R14 -> PRE-COMMAND NEXT RECORD
         ST    R15,BAK(,R14)       POINT BACK TO NEW RECORD
         ST    R15,FWD(,R6)        POINT FORWARD TO NEW RECORD
         ST    R6,BAK(,R15)        POINT BACK TO CURRENT RECORD
         ST    R14,FWD(,R15)       POINT FORWARD TO OLD NEXT RECORD
         LR    R2,R14              SAVE OLD NEXT RECORD ADDRESS
         LA    R14,CTLLEN(,R15)    POINT TO NEW RECORD DATA AREA
         L     R15,MAXRECSZ        GET NEW RECORD DATA AREA LENGTH
         LR    R7,R15              PREPARE TO HANDLE BLANK RECORD
         MVCL  R14,R0              BLANK OUT NEW RECORD
         LA    R0,1
         A     R0,RECLINES         INCREMENT RECORD COUNT
         ST    R0,RECLINES
         L     R0,LINENMBR         GET TOP-OF-SCREEN LINE NUMBER
         CL    R0,EDIR1ST(,R5)     IS TOP LINE AFTER NEW LINE?
         BNH   TSLIN#OK            NO, TOP-OF-SCREEN SEQUENCE UNCHANGED
         A     R0,EDFW1            YES, INCREMENT TOP-OF-SCREEN NUMBER
         ST    R0,LINENMBR         SAVE IT
TSLIN#OK C     R2,BTMADDR          IS OLD NEXT BOTTOM-OF-DATA?
         BE    TCHKCRNT            YES, DO NOT SCAN FOR NON-BLANK
         LA    R14,CTLLEN(,R2)     NO, POINT TO ITS DATA
         LR    R2,R14
         L     R15,EDRBND          GET LAST COLUMN NUMBER TO PROCESS
         A     R14,EDLBND          POINT TO IN-BOUNDS AREA
         S     R15,EDLBND          GET IN-BOUNDS AREA SIZE
         CLCL  R14,R0              IS IT ALL BLANK?
         BE    TCHKCRNT            YES, NO OFFSET TO REMEMBER
         SR    R14,R2              GET FIRST NON-BLANK DATA OFFSET
         LR    R7,R14              SAVE OLD NEXT NON-BLANK OFFSET
TCHKCRNT LA    R14,CTLLEN(,R6)     POINT TO CURRENT RECORD DATA AREA
         LR    R0,R14
         L     R15,EDRBND          GET LAST COLUMN NUMBER TO PROCESS
         A     R14,EDLBND          POINT TO IN-BOUNDS AREA
         S     R15,EDLBND          GET IN-BOUNDS AREA SIZE
         CLCL  R14,R0              IS IT ALL BLANK?
         BE    TCHKMVTX            YES, NO OFFSET TO REMEMBER
         SR    R14,R0              GET FIRST NON-BLANK DATA OFFSET
         CR    R14,R7              EARLIER COLUMN THAN NEXT LINE?
         BNL   TCHKMVTX            NO
         LR    R7,R14              YES, GET OFFSET TO MOVE TO
TCHKMVTX CR    R7,R4               FOUND A GOOD START OFFSET?
         BNH   *+8                 YES, DATA WILL FIT IN BOUNDS
         L     R7,EDLBND           NO, USE START OF IN-BOUNDS AREA
         LM    R14,R15,DOUBLE      GET DETAILS OF TEXT TO MOVE
         OI    FLG1(R6),CHGL       MARK RECORD AS CHANGED
         OI    EDFLG1,SAVEY+SAVEZ  FLAG IN-CORE DATA HAS CHANGED
         L     R6,FWD(,R6)         POINT TO NEW RECORD
         OI    FLG1(R6),CHGL       MARK RECORD AS CHANGED
         LA    R6,CTLLEN(,R6)      POINT TO NEW RECORD'S DATA
         AR    R6,R7               POINT TO FIRST NON-BLANK COLUMN
         LR    R7,R15              COPY TARGET LENGTH FROM SOURCE
         MVCL  R6,R14              MOVE TEXT FROM CURRENT TO NEW LINE
         LM    R14,R15,DOUBLE      RESTORE SOURCE TEXT DETAILS
         MVCL  R14,R0              BLANK OUT MOVED TEXT
         B     DOINSERT            NOW DO THE INSERTION(S)
GOINSERT MVI   ECHO(R6),C'I'       CONVERT "TEXT SPLIT" TO INSERT
         SPACE
*
*         "INSERT" LINE COMMAND
*
*                                  REMOVE ELEMENT FROM COMMAND LIST
DOINSERT MVC   CMDENEXT(4,R3),CMDENEXT(R5)
*                                  ADD ELEMENT TO START OF INSERT LIST
         MVC   CMDENEXT(4,R5),INSANKOR
         ST    R5,INSANKOR
         L     R0,ISPFPAGE         GET VISIBLE LINE COUNT
         BCTR  R0,0                TOP DATA LINE NEVER AN INSERTION
         CL    R0,CMDEREPL(,R5)    REPLICATION FACTOR MORE THAN THIS?
         BNL   LCMDDOIT            NO, GO LOOK FOR MORE LINE COMMANDS
         ST    R0,CMDEREPL(,R5)    YES, REDUCE TO MAXIMUM
         B     LCMDDOIT            GO LOOK FOR MORE LINE COMMANDS
         SPACE
*
*         "LOWER CASE" LINE COMMAND
*
DOLOWER  L     R15,EDIRREC(,R5)    POINT TO FIRST RECORD OF SCREEN LINE
         CPYA  A14,A15             COPY DATA SPACE ALET
DOLOWLP  MVC   ECHO(6,R15),EDBLNKS CLEAR LINE'S LINE COMMAND
         LA    R14,CTLLEN(,R15)    POINT TO RECORD'S DATA
         A     R14,EDLBND          POINT TO START OF BOUNDS
         L     R6,EDRBND
         S     R6,EDLBND           GET DATA LENGTH IN BOUNDS
         LA    R0,256              GET CHUNK SIZE
LOWCHUNK CR    R6,R0               LAST CHUNK OF THIS RECORD?
         BNH   DOLOWEND            YES
         TRT   0(256,R14),EDTUPPER ANY UPPER CASE IN THIS CHUNK?
         BZ    DOLOWNXT            NO
         TR    0(256,R14),EDTUNKAP YES, MAKE IT LOWER CASE
         OI    FLG1(R15),CHGL      MARK RECORD AS CHANGED
DOLOWNXT AR    R14,R0              POINT TO NEXT CHUNK
         SR    R6,R0               REDUCE LENGTH
         B     LOWCHUNK            PROCESS NEXT CHUNK
DOLOWEND BCTR  R6,0                DECREMENT FOR EXECUTE
         EX    R6,DOLOWTRT         ANY UPPER CASE IN THIS CHUNK?
         BZ    DOLOWREC            NO
         EX    R6,DOLOWTR          YES, MAKE IT LOWER CASE
         OI    FLG1(R15),CHGL      MARK RECORD AS CHANGED
         OI    EDFLG1,SAVEY+SAVEZ  FLAG IN-CORE DATA HAS CHANGED
DOLOWREC C     R15,EDIRFIN(,R5)    PROCESSED LAST LINE OF COMMAND?
         BE    DONOUGHT            YES, COMMAND NOW COMPLETE
         L     R15,FWD(,R15)       NO, POINT TO NEXT RECORD ENTRY
         B     DOLOWLP             CONTINUE PROCESSING
DOLOWTRT TRT   0(0,R14),EDTUPPER   <<< EXECUTED >>>
DOLOWTR  TR    0(0,R14),EDTUNKAP   <<< EXECUTED >>>
         SPACE
*
*         "UPPER CASE" LINE COMMAND
*
DOUPPER  L     R15,EDIRREC(,R5)    POINT TO FIRST RECORD OF SCREEN LINE
         L     R4,EDKAPSAD         POINT TO TRANSLATE TABLE
         CPYA  A14,A15             COPY DATA SPACE ALET
DOUPRLP  MVC   ECHO(6,R15),EDBLNKS CLEAR LINE'S LINE COMMAND
         LA    R14,CTLLEN(,R15)    POINT TO RECORD'S DATA
         A     R14,EDLBND          POINT TO START OF BOUNDS
         L     R6,EDRBND
         S     R6,EDLBND           GET DATA LENGTH IN BOUNDS
         LA    R0,256              GET CHUNK SIZE
UPRCHUNK CR    R6,R0               LAST CHUNK OF THIS RECORD?
         BNH   DOUPREND            YES
         TRT   0(256,R14),EDTLOWER ANY LOWER CASE IN THIS CHUNK?
         BZ    DOUPRNXT            NO
         TR    0(256,R14),0(R4)    YES, MAKE IT UPPER CASE
         OI    FLG1(R15),CHGL      MARK RECORD AS CHANGED
DOUPRNXT AR    R14,R0              POINT TO NEXT CHUNK
         SR    R6,R0               REDUCE LENGTH
         B     UPRCHUNK            PROCESS NEXT CHUNK
DOUPREND BCTR  R6,0                DECREMENT FOR EXECUTE
         EX    R6,DOUPRTRT         ANY LOWER CASE IN THIS CHUNK?
         BZ    DOUPRREC            NO
         EX    R6,DOUPRTR          YES, MAKE IT UPPER CASE
         OI    FLG1(R15),CHGL      MARK RECORD AS CHANGED
         OI    EDFLG1,SAVEY+SAVEZ  FLAG IN-CORE DATA HAS CHANGED
DOUPRREC C     R15,EDIRFIN(,R5)    PROCESSED LAST LINE OF COMMAND?
         BE    DONOUGHT            YES, COMMAND NOW COMPLETE
         L     R15,FWD(,R15)       NO, POINT TO NEXT RECORD ENTRY
         B     DOUPRLP             CONTINUE PROCESSING
DOUPRTRT TRT   0(0,R14),EDTLOWER   <<< EXECUTED >>>
DOUPRTR  TR    0(0,R14),0(R4)      <<< EXECUTED >>>
         SPACE
*
*         "MAKE DATA" LINE COMMAND
*
DOMKDATA L     R15,EDIRREC(,R5)    POINT TO FIRST RECORD OF SCREEN LINE
         L     R4,EDKAPSAD         POINT TO TRANSLATE TABLE
         CPYA  A14,A15             COPY DATA SPACE ALET
DOMKDTLP MVC   ECHO(6,R15),EDBLNKS CLEAR LINE'S LINE COMMAND
         TM    FLG1(R15),LMSG      MESSAGE LINE?
         BNO   DOMKDTNX            NO, NO CHANGE FOR THIS LINE
         TM    FLG3(R15),LFIX      FIXED AT LEFT MAX MESSAGE?
         BNO   DOMKDTOK            NO, PROCEED
         CLI   CTLLEN(R15),C' '    DYNAMICALLY GENERATED LINE?
         BL    DOMKDTNX            YES, LEAVE IT AS A MESSAGE
DOMKDTOK NI    FLG1(R15),255-LMSG  RESET MESSAGE STATUS
         NI    FLG3(R15),255-LFIX  NO LONGER FIXED AT LEFT MAX
         LA    R0,1
         A     R0,RECLINES         INCREMENT RECORD COUNT
         ST    R0,RECLINES         SAVE IT
         OI    FLG1(R15),CHGL      MARK RECORD AS CHANGED
         OI    EDFLG1,SAVEY+SAVEZ  FLAG IN-CORE DATA HAS CHANGED
         L     R0,MSGLINES
         BCTR  R0,0                DECREMENT MESSAGE LINE COUNT
         ST    R0,MSGLINES         SAVE IT
DOMKDTNX C     R15,EDIRFIN(,R5)    PROCESSED LAST LINE OF COMMAND?
         BE    DONOUGHT            YES, COMMAND NOW COMPLETE
         L     R15,FWD(,R15)       NO, POINT TO NEXT RECORD ENTRY
         B     DOMKDTLP            CONTINUE PROCESSING
         SPACE
*
*         CHECK THAT TOP DATA LINE IS NOT INSIDE AN EXCLUDED BLOCK
*
LNCMDXIT L     R15,LINEADDR        POINT TO TOP-OF-SCREEN ENTRY
         TM    FLG1(R15),XCLD      IS THIS LINE EXCLUDED?
         BNO   LNRECNUM            NO, READY TO EXIT EDITLINE ROUTINE
         L     R0,LINENMBR         YES, GET ITS SEQUENCE NUMBER
LNCMDXLP L     R15,BAK(,R15)       POINT TO THE PREVIOUS LINE
         TM    FLG1(R15),XCLD      IS THIS LINE ALSO EXCLUDED?
         BNO   LNRECNUM            NO, READY TO EXIT EDITLINE ROUTINE
         BCTR  R0,0                YES, DECREMENT TOP SEQUENCE NUMBER
         ST    R15,LINEADDR        UPDATE TOP-OF-SCREEN ENTRY ADDRESS
         ST    R0,LINENMBR         UPDATE TOP-OF-SCREEN SEQUENCE NUMBER
         B     LNCMDXLP            CONTINUE CHECKING
         SPACE
*
*         GET LINE NUMBER TO START FIND SEARCH ON
*
LNRECNUM ICM   R15,15,CSRRECAD     WAS THE CURSOR ON A DATA LINE?
         BZ    LNCMDXOK            NO, NO MORE TO DO HERE
         TM    FLG1(R15),LINS      YES, WAS IT A DELETED INSERTION?
         BNO   LNRECCSR            NO
         MVC   CSRRECAD,BAK(R15)   YES, USE THE SUCCESSOR
         OI    EDFLG2,E2CRU        FLAG UPDATE
         B     LNRECNUM            REDRIVE DATA ACQUISITION
LNRECCSR L     R0,LINENMBR         GET NUMBER OF TOP RECORD
         L     R15,LINEADDR        GET ADDRESS OF TOP RECORD
LNREC#LP C     R15,CSRRECAD        FOUND THE RECORD?
         BE    LNGOTNUM            YES
         A     R0,EDFW1            NO, INCREMENT RECORD NUMBER
         ICM   R15,15,FWD(R15)     POINT TO NEXT RECORD
         BNZ   LNREC#LP
         MVC   CSRRECAD,LINEADDR   HANDLE IF RECORD ABOVE SCREEN VIEW
LNGOTNUM ST    R0,FNDNUM           SET FIND STARTING RECORD NUMBER
         ST    R15,FNDREC          SET FIND STARTING RECORD ADDRESS
         TM    EDFLG2,E2CRU        CSRRECAD UPDATED SINCE DISPLAY?
         BO    LNCMDXOK            YES, LEAVE START OFFSET ZERO
         MVC   FNDOFF,EDCSROFF     NO, SET FIND SEARCH START OFFSET
         SPACE
*
*         LINE COMMAND PROCESSING COMPLETE UNTIL NEXT DISPLAY
*
LNCMDXOK SAC   0                   SET PRIMARY MODE
         AIF   (&ENVESA).ESKPCHK
         L     R1,TOPADDR
         SR    R0,R0
         ST    R0,DOUBLE+4
         BCTR  R0,0
         ST    R0,DOUBLE
CHKLP1   LR    R2,R1
         ICM   R1,15,FWD(R1)
         BZ    CHKEND
         LA    R14,DOUBLE
         TM    FLG1(R1),LMSG
         BZ    *+8
         LA    R14,DOUBLE+4
         LA    R0,1
         A     R0,0(,R14)
         ST    R0,0(,R14)
         SR    R0,R0               R0 = 0 => BAD FWD/BACK POINTER
         C     R2,BAK(,R1)
         BE    CHKLP1
CHKERR   DC    H'0'                ABEND WITH S0C1
CHKEND   LA    R0,1                R0 = 1 => RECLINES IS NOT ACCURATE
         CLC   RECLINES,DOUBLE
         BNE   CHKERR
         LA    R0,2                R0 = 2 => MSGLINES IS NOT ACCURATE
         CLC   MSGLINES,DOUBLE+4
         BNE   CHKERR
.ESKPCHK ANOP
         L     R14,EDRETSV1        RESTORE RETURN ADDRESS
         BR    R14                 RETURN TO CALLER
         DROP  R10                 LNCMDVAL
         SPACE
**       DC    0D'0'               UNCOMMENT IF NEEDED
**       LTORG                     UNCOMMENT IF NEEDED
         DC    0H'0'
         TITLE '  E X I T  '
         USING EDEQALSX,R10
EDEQALSX LR    R10,R15             SET LOCAL BASE
         SPACE
         LA    R15,EDEND
         TM    EDFLG1,SAVEY        IS A SAVE NECESSARY?
         BNO   EDEXITOK            NO, LEAVE REVEDIT
         TM    STATUS16,$16NAS     AUTOSAVE ON?
         BO    EDEND               NO, GO ISSUE MESSAGE WITHOUT EXIT
         SPACE
EDEXITOK NI    STATUS,255-STPODIR  DO NOT RETURN TO PDS DIRECTORY
         DROP  R10                 EDEQALSX
         SPACE
         USING EDEND,R10
EDEND    LR    R10,R15             SET LOCAL BASE
         SPACE
         NI    STATUS16,255-$16RFC CLEAR ANY PENDING COMMANDS
         OI    EDFLG1,SAVEX        FLAG REVEDIT EXIT REQUEST
         XC    MSG(3),MSG          RESET MESSAGE
         SR    R4,R4               CLEAR ERROR STATUS
         TM    EDFLG1,SAVEY        IS A SAVE NECESSARY?
         BNO   EDITEXIT            NO, LEAVE REVEDIT
         TM    STATUS16,$16NAS     AUTOSAVE ON?
         BZ    EDENDSV             YES, GO DO IT
         NI    EDFLG1,255-SAVEX    NO, BELAY (SIC) EXIT REQUEST
         MVC   MSG(EDENDML),EDENDM ISSUE ACTION MESSAGE
         OI    STATUS7,$7BELL      SOUND BELL FOR ACTION MESSAGE
         TM    STATUS10,$10CAP     CAPS ON?
         BOR   R14                 YES, RETURN TO CALLER
         XC    MSG+3(4),EDBLNKS    NO
         XC    MSG+15(2),EDBLNKS
         BR    R14                 RETURN TO CALLER
         SPACE
EDENDM   MESG  'ENTER ''SAVE'' OR ''CANCEL'''
         SPACE
EDENDSV  LA    R15,EDSAVE          SAVE THE EDITED DATA BEFORE EXITING
         DROP  R10                 EDEND
         TITLE '  S A V E  '
         USING EDSAVE,R10
EDSAVE   LR    R10,R15             SET LOCAL BASE
         TM    STATUS11,$11VIEW    IN VIEW MODE?
         BO    EDNOSAVE            YES, CAN ONLY SAVE IN EDIT
         ST    R14,EDRETSV1        SAVE RETURN ADDRESS
         SPACE
*         DETERMINE IF ANY OTHER PROCESS HAS UPDATED THE FILE
         SPACE
         TM    STATUS,STPODIR      DOES REVPDS FACE REFRESH DECISION?
         BNO   EDSVENQ             NO, SO NO NEED FOR DATA FOR IT
         TM    EDFLG4,E4OTHUP      ALREADY DETERMINED THAT IT HAS?
         BO    EDSVENQ             YES, NO NEED TO CHECK AGAIN
         MVC   DOUBLE(5),DS1LSTAR  COPY DS1LSTAR AND DS1TRBAL
         OBTAIN OBTAINW            REFRESH VTOC ENTRY COPY
         CLC   DOUBLE(5),DS1LSTAR  ANYTHING ELSE WRITTEN TO DATA SET?
         BE    EDSVENQ             NO, DATA SET FULLNESS IS UNCHANGED
         OI    EDFLG4,E4OTHUP      YES, FLAG THIS
         SPACE
*         SERIALIZE WHILE UPDATING PERMANENT STORAGE
         SPACE
EDSVENQ  XC    EDENQPRM,EDENQPRM   CLEAR RESERVE PARAMETER LIST
         MVI   EDENQPRM,X'C0'      USE ORIGINAL PARAMETER LIST FORMAT
         RESERVE (EDSPFQN,EDDSNMEM,E,44,SYSTEMS),RET=NONE,UCB=$UCBAD,  +
               MF=(E,EDENQPRM)
         SPACE
*         PREPARE TO OPEN THE FILE PRIOR TO WRITING THE DATA
         SPACE
         MVI   SYNADSW,0           RESET I/O ERROR FLAG
         XC    MSG(3),MSG          RESET MESSAGE
EDSVRTRY TM    EDFLG2,E2OPNI       DCB OPEN FOR INPUT OR UPDATE?
         BZ    EDSVPREP            NO, GO PREPARE FOR OPEN
         NI    EDFLG2,255-E2OPNU   YES, FLAG DCB CLOSED
         TM    DCBOFLGS,DCBOFOPN   IS IT OPEN?
         BZ    EDSVPREP            NO, PREPARE TO OPEN IT
         MVI   CLOSED,X'80'        CLOSE IT
         CLOSE (EDITDCB),MF=(E,CLOSED)
         SPACE
EDSVPREP NI    STATUS,255-STABEND  RESET ABEND FLAG
         MVI   OPEND,X'80'         PREPARE TO OPEN ONE DCB
         LA    R0,EDIOXLST         POINT TO RELEVANT EXIT LIST
         STCM  R0,7,DCBEXLSA       SET IT INTO THE DCB
         LAM   A0,A15,EDZEROS      ZERO ACCESS REGISTERS
         LAM   A3,A3,DSPCALET      LOAD DATA SPACE ALET
         L     R3,TOPADDR          POINT TO TOP OF DATA
         XC    COUNTER1,COUNTER1   RESET MODIFIED RECORD COUNT
         SPACE
*         DECIDE BETWEEN OUTPUT AND UPDATE-IN-PLACE
         SPACE
         TM    EDFLG2,E2OPNO       DCB OPEN FOR OUTPUT?
         BO    EDSVOPND            YES, START REWRITING SEQUENTIAL FILE
         CLI   SYNADSW,0           RETRY AFTER I/O ERROR ON UPDATE?
         BNE   EDSVOPNO            YES, USE OUTPUT
         TM    EPZAP,1             IS ZAP ON?
         BNO   EDSVOPNO            NO, USE OUTPUT
         TM    DS1DSORG,DS1DSGPO   PARTITIONED ORGANISATION?
         BNO   EDSVOPNO            NO, USE OUTPUT
         TM    DS1SMSFG,DS1PDSE    PROCESSING A PDSE?
         BO    EDSVOPNO            YES, USE OUTPUT
         TM    TSTRECFM,X'40'      FIXED-LENGTH RECORDS?
         BO    EDSVOPNO            NO, USE OUTPUT
         CLC   REDLINES,RECLINES   SAME NUMBER OF RECORDS?
         BNE   EDSVOPNO            NO, USE OUTPUT
         ICM   R0,15,RECLINES      ANY LINES PRESENT?
         BZ    EDSVOPNO            NO, USE OUTPUT
         SPACE
*         SET UP FOR USING UPDATE-IN-PLACE
         SPACE
         LA    R0,EDSVEODU         POINT TO RELEVANT EODAD EXIT
         STCM  R0,7,DCBEODA        SET IT INTO THE DCB
         MVC   DOUBLE,=C'EDOPSVUP' SET FLAG FOR DUMP
         OPEN  (EDITDCB,(UPDAT)),MF=(E,OPEND)
         TM    DCBOFLGS,DCBOFOPN   IS DCB OPEN?
         BZ    EDSAVEPO            NO, ERROR
         OI    EDFLG2,E2OPNU       FLAG DCB OPEN FOR UPDATE
         MVI   SYNADSW,0           RESET I/O ERROR FLAG
         MVC   BLDLNAME,$MEMBER    LOAD MEMBER NAME INTO LIST
         XI    REDLINES,X'FF'      MAKE REDLINES AND RECLINES DIFFERENT
         BLDL  EDITDCB,BLDL        LOCATE LATEST DISK VERSION OF MEMBER
         LTR   R15,R15             DOES IT STILL EXIST?
         BNZ   EDSVRTRY            NO, NEED TO CHANGE UPDATE TO OUTPUT
         CLC   BLDLNAME(14),EDBLNAME
         BNE   EDSVRTRY            MEMBER HAS CHANGED SO USE OUTPUT
         XI    REDLINES,X'FF'      MAKE REDLINES AND RECLINES THE SAME
         XASAM24
         FIND  EDITDCB,EDBLTTRP,C  POINT TO THE START OF EXISTING DATA
         XASAM31
         ZAP   DOUBLE,EDDEC0       RESET RECORD COUNT
         L     R4,EDBUFADR         POINT TO THE READ BUFFER
         B     EDSVREAD            GO READ THE FIRST BLOCK
         SPACE
*         REWRITE A BLOCK THAT HAS BEEN FILLED WITH NEW DATA
         SPACE
EDSVUPDT SAC   0                   SET PRIMARY MODE
         L     R4,EDBUFADR         POINT TO THE WRITE BUFFER
         XASAM24
         WRITE DYNDECBW,SF,EDITDCB,(R4),'S',MF=E
         CHECK DYNDECBW            WAIT FOR WRITE TO FINISH
         XASAM31
         TM    STATUS,STABEND      ABEND?
         BO    EDSAVEPO            YES
         CLI   SYNADSW,0           ANY I/O PROBLEMS?
         BNE   EDSVIOEU            YES, REPORT I/O ERROR AND TRY OUTPUT
         OI    STATUS7,$7SAVE      FLAG REVEDIT HAS CHANGED DISK DATA
         SPACE
*         READ A BLOCK THAT IS TO BE UPDATED
         SPACE
EDSVREAD XASAM24
         READ  DYNDECBW,SF,EDITDCB,(R4),'S',MF=E
         CHECK DYNDECBW            WAIT FOR READ TO FINISH
         XASAM31
         TM    STATUS,STABEND      ABEND?
         BO    EDSAVEPO            YES
         CLI   SYNADSW,0           ANY I/O PROBLEMS?
         BNE   EDSVIOEU            YES, REPORT I/O ERROR AND TRY OUTPUT
         LH    R1,DCBBLKSI
         L     R14,DYNDECBW+16
         SH    R1,14(,R14)         SUBTRACT RESIDUAL COUNT
         SAC   512                 SET AR MODE
         SPACE
*         FILL A BLOCK WITH RECORD DATA FROM THE EDIT SESSION
         SPACE
EDSVZPLP L     R3,FWD(,R3)         POINT TO THE NEXT DATA RECORD
         ICM   R0,15,FWD(R3)       END OF DATA?
         BZ    EDSVBDCT            YES, GOT THE RECORD COUNT WRONG
         TM    FLG1(R3),LMSG       MESSAGE LINE?
         BO    EDSVZPLP            YES, DO NOT SAVE IT
         LAE   R14,CTLLEN(,R3)     POINT TO THE RECORD'S DATA
         L     R15,MAXRECSZ        GET THE RECORD'S LENGTH
         TM    EPNUM,1             NUMBER ON?
         BNO   EDNUMOKU            NO
         TM    EDFLG1,SAVEY        HAS ANYTHING CHANGED?
         BNO   EDNUMOKU            NO
         AP    DOUBLE,EDDEC100     INCREMENT RECORD SEQUENCE NUMBER
         OI    DOUBLE+7,X'0F'      ENSURE UNPACKED RESULT IS NUMERIC
         AR    R14,R15             POINT PAST RECORD'S DATA
         S     R14,EDFW8           POINT TO SEQUENCE NUMBER FIELD
         MVC   COUNTER2(2),6(R14)  COPY POSSIBLE RECORD LEVEL INDICATOR
         UNPK  0(8,R14),DOUBLE     LOAD RECORD SEQUENCE NUMBER
         CLI   COUNTER2,C'0'
         BL    EDCHKCHU            DISCARD NON-NUMERIC LEVEL
         CLI   COUNTER2+1,C'0'
         BL    EDCHKCHU            DISCARD NON-NUMERIC LEVEL
         CLI   COUNTER2,C'9'
         BH    EDCHKCHU            DISCARD NON-NUMERIC LEVEL
         CLI   COUNTER2+1,C'9'
         BH    EDCHKCHU            DISCARD NON-NUMERIC LEVEL
         MVC   6(2,R14),COUNTER2   RESTORE PREVIOUS LEVEL INDICATOR
         CLC   6(2,R14),EDLVLIND   RECORD LEVEL HIGHER THAN CURRENT?
         BH    EDSETLVL            YES, GO REDUCE TO CURRENT LEVEL
EDCHKCHU TM    FLG1(R3),CHGL       WAS RECORD CHANGED THIS SESSION?
         BZ    EDCHKMDU            NO
EDSETLVL MVC   6(2,R14),EDLVLIND   YES, INDICATE THIS LEVEL
EDCHKMDU CLC   =C'00',6(R14)       COUNT THIS RECORD AS MODIFIED?
         BE    EDDNNUMU            NO
         LA    R14,1               YES
         A     R14,COUNTER1        INCREMENT THE MODIFIED COUNT
         ST    R14,COUNTER1
EDDNNUMU TM    EPNUM,2             NUMBER ON COBOL?
         BNO   EDNUMDAT            NO
         MVC   CTLLEN(6,R3),0(R14) YES, LOAD COBOL SEQUENCE NUMBER
EDNUMDAT LA    R14,CTLLEN(,R3)     POINT TO THE RECORD'S DATA (AGAIN)
EDNUMOKU NI    FLG1(R3),255-CHGL   RESET CHANGED FLAG
         LR    R5,R15              COPY DATA LENGTH
         SR    R1,R15              GET THE UPDATED UNUSED BUFFER SIZE
         MVCL  R4,R14              LOAD THE RECORD'S DATA INTO BUFFER
         LTR   R1,R1               BUFFER FULL?
         BP    EDSVZPLP            NO, GO BUFFER THE NEXT RECORD
         B     EDSVUPDT            YES, GO WRITE IT AND READ THE NEXT
         SPACE
*         REPORT AN I/O ERROR FROM THE READ OR THE REWRITE
         SPACE
EDSVIOEU LA    R1,SYNADMSG         POINT TO ERROR MESSAGE
         LA    R0,L'SYNADMSG       GET THE MESSAGE LENGTH
         TPUT  (1),(0),R           ISSUE LINE MODE MESSAGE
         B     EDSVRTRY            RETRY SAVE WITH OUTPUT, NOT UPDATE
         SPACE
*         END OF FILE  -  REWRITE COMPLETE
         SPACE
EDSVEODU SAC   512                 SET AR MODE
         XASAM31
         L     R3,FWD(,R3)         POINT TO NEXT RECORD
         SAC   0                   SET PRIMARY MODE
         C     R3,BTMADDR          BOTTOM OF DATA?
         BNE   EDSVBDCT            NO, GOT THE RECORD COUNT WRONG
         TM    EDFLG2,E2STAT       STATS ON?
         BO    EDSVSTOW            YES, GO UPDATE THE DIRECTORY ENTRY
         B     EDSVCLOS            NO, DON'T NEED A STOW
         SPACE
EDSVBDCT MVI   SYNADSW,X'BD'       FLAG ERROR
         LA    R1,=CL32'REVEDIT - RECORD COUNT INCORRECT'
         LA    R0,32
         TPUT  (1),(0),R           DISPLAY DIAGNOSTIC
         B     EDSVRTRY            BETTER RETRY THE WHOLE THING
         SPACE
*         SET UP FOR USING OUTPUT
         SPACE
EDSVOPNO MVC   DOUBLE,=C'EDOPSVOT' SET FLAG FOR DUMP
         OPEN  (EDITDCB,(OUTPUT)),MF=(E,OPEND)
         TM    DCBOFLGS,DCBOFOPN   IS DCB OPEN?
         BZ    EDSAVEPO            NO, ERROR
         OI    EDFLG2,E2OPNO       FLAG DCB OPEN FOR OUTPUT
EDSVOPND MVI   SYNADSW,0           RESET I/O ERROR FLAG
         ZAP   DOUBLE,EDDEC0       RESET RECORD COUNT
         L     R4,EDBUFADR         POINT TO THE WRITE BUFFER
         B     EDSVBFIT            GO BUFFER A RECORD
         SPACE
*         WRITE A BLOCK THAT HAS BEEN FILLED WITH NEW DATA
         SPACE
EDSVWRIT SAC   0                   SET PRIMARY MODE
         L     R4,EDBUFADR         POINT TO THE WRITE BUFFER
         XASAM24
         WRITE DYNDECBW,SF,EDITDCB,(R4),'S',MF=E
         XASAM31
         TM    STATUS,STABEND      ABEND?
         BO    EDSAVEPO            YES
         XASAM24
         CHECK DYNDECBW            WAIT FOR WRITE TO FINISH
         XASAM31
         TM    STATUS,STABEND      ABEND?
         BO    EDSAVEPO            YES
         CLI   SYNADSW,0           ANY I/O PROBLEMS?
         BE    EDSVWROT            NO, CONTINUE
EDSVIOER MVI   MSG,112             I/O ERROR
         NI    EDFLG1,255-SAVEX    ERROR - CANCEL TERMINATION REQUEST
         NI    STATUS16,255-$16RFC CLEAR ANY PENDING COMMAND
         LA    R1,SYNADMSG         POINT TO ERROR MESSAGE
         LA    R0,L'SYNADMSG       GET THE MESSAGE LENGTH
         TPUT  (1),(0),R           ISSUE LINE MODE MESSAGE
         B     EDSVCLOS            CLOSE OUTPUT FILE
         SPACE
EDSVWROT OI    STATUS7,$7SAVE      FLAG REVEDIT HAS CHANGED DISK DATA
EDSVBFIT SAC   512                 SET AR MODE
         LH    R1,DCBBLKSI         GET MAXIMUM BLOCK LENGTH
         TM    DCBRECFM,DCBRECV    VARIABLE-LENGTH RECORDS?
         BNO   EDSVNBDW            NO, NO BDW TO SET UP
         LA    R0,4                GET LENGTH OF BDW
         STH   R0,0(,R4)           SET LENGTH IN BDW
         STCM  R0,12,2(R4)         CLEAR REST OF BDW
         AR    R4,R0               POINT PAST BDW
         SR    R1,R0               ACCOUNT FOR BDW OCCUPANCY
EDSVNBDW L     R15,MAXRECSZ        GET THE RECORD'S LENGTH
         LR    R0,R15              GET THE RECORD'S LENGTH
         ICM   R14,15,BAK(R3)      TOP OF DATA?
         BNZ   EDDONNUM            NO, RECORD READY TO BUFFER
         SPACE
*         FILL A BLOCK WITH RECORD DATA FROM THE EDIT SESSION
         SPACE
EDSVPTLP L     R3,FWD(,R3)         POINT TO THE NEXT DATA RECORD
         ICM   R0,15,FWD(R3)       END OF DATA?
         BZ    EDSVLAST            YES, GO WRITE THE LAST BLOCK
         TM    FLG1(R3),LMSG       MESSAGE LINE?
         BO    EDSVPTLP            YES, DO NOT SAVE IT
         LAE   R14,CTLLEN(,R3)     POINT TO THE RECORD'S DATA
         L     R15,MAXRECSZ        GET THE RECORD'S LENGTH
         LR    R0,R15              GET THE RECORD'S LENGTH
         TM    EPNUM,1             NUMBER ON?
         BNO   EDNUMOK             NO
         TM    EDFLG1,SAVEY        HAS ANYTHING CHANGED?
         BNO   EDNUMOK             NO
         AP    DOUBLE,EDDEC100     INCREMENT RECORD SEQUENCE NUMBER
         OI    DOUBLE+7,X'0F'      ENSURE UNPACKED RESULT IS NUMERIC
         TM    DCBRECFM,DCBRECV    VARIABLE-LENGTH RECORDS?
         BO    EDNUMFLD            YES, ALREADY AT NUMBER FIELD
         AR    R14,R0              POINT PAST RECORD'S DATA
         S     R14,EDFW8           POINT TO SEQUENCE NUMBER FIELD
EDNUMFLD MVC   COUNTER2(2),6(R14)  COPY POSSIBLE RECORD LEVEL INDICATOR
         UNPK  0(8,R14),DOUBLE     LOAD RECORD SEQUENCE NUMBER
         TM    DS1DSORG,DS1DSGPO   PARTITIONED ORGANISATION?
         BNO   EDDONNUM            NO, FORGET STATS PROCESSING
         CLI   COUNTER2,C'0'
         BL    EDCHKCHG            DISCARD NON-NUMERIC LEVEL
         CLI   COUNTER2+1,C'0'
         BL    EDCHKCHG            DISCARD NON-NUMERIC LEVEL
         CLI   COUNTER2,C'9'
         BH    EDCHKCHG            DISCARD NON-NUMERIC LEVEL
         CLI   COUNTER2+1,C'9'
         BH    EDCHKCHG            DISCARD NON-NUMERIC LEVEL
         MVC   6(2,R14),COUNTER2   RESTORE PREVIOUS LEVEL INDICATOR
EDCHKCHG TM    FLG1(R3),CHGL       WAS RECORD CHANGED THIS SESSION?
         BZ    EDCHKMOD            NO
         MVC   6(2,R14),EDLVLIND   YES, INDICATE THIS LEVEL
EDCHKMOD CLC   =C'00',6(R14)       COUNT THIS RECORD AS MODIFIED?
         BE    EDDONNUM            NO
         LA    R14,1               YES
         A     R14,COUNTER1        INCREMENT THE MODIFIED COUNT
         ST    R14,COUNTER1
EDDONNUM TM    EPNUM,2             NUMBER ON COBOL?
         BNO   EDNDODAT            NO
         MVC   CTLLEN(6,R3),0(R14) YES, LOAD COBOL SEQUENCE NUMBER
EDNDODAT LAE   R14,CTLLEN(,R3)     POINT TO THE RECORD'S DATA (AGAIN)
EDNUMOK  NI    FLG1(R3),255-CHGL   RESET CHANGED FLAG
         TM    DCBRECFM,DCBRECV    VARIABLE-LENGTH RECORDS?
         BNO   EDSVRCOK            NO, HAVE THE RECORD'S DETAILS
         AR    R14,R15             POINT PAST THE RECORD'S DATA
EDSVTRNC BCTR  R14,0               POINT TO PREVIOUS DATA BYTE
         CLI   0(R14),C' '         TRAILING BLANK?
         BNE   EDSVPRES            NO, HAVE RECORD LENGTH
         BCT   R15,EDSVTRNC        YES, CONTINUE TRUNCATION
         LA    R15,1               BLANK RECORD SO WRITE ONE BLANK
EDSVPRES TM    EPPRES,1            IS PRESERVE ON?
         BNO   EDSVVARL            NO, USE THIS LENGTH
         CLM   R15,3,OLEN(R3)      YES, SHORTER THAN MIMINUM LENGTH?
         BNL   EDSVVARL            NO, USE THIS LENGTH
         ICM   R15,3,OLEN(R3)      YES, USE THE ORIGINAL RECORD LENGTH
EDSVVARL LAE   R14,CTLLEN(,R3)     POINT TO THE RECORD'S DATA (AGAIN)
         LA    R0,4(,R15)          COUNT RDW IN RECORD LENGTH
EDSVRCOK CR    R0,R1               WILL RECORD FIT IN THIS BLOCK?
         BH    EDSVWRIT            NO, GO WRITE THE CURRENT BLOCK
         TM    DCBRECFM,DCBRECV    VARIABLE-LENGTH RECORDS?
         BNO   EDSVLDRC            NO, GO LOAD THE RECORD
         STCM  R0,3,0(R4)          SET THE LENGTH IN THE RDW
         STCM  R0,12,2(R4)         CLEAR THE REST OF THE RDW
         LA    R4,4(,R4)           POINT PAST THE RDW
         S     R1,EDFW4            SUBTRACT LENGTH OF RDW
EDSVLDRC LR    R5,R15              COPY DATA LENGTH
         SR    R1,R15              GET THE UPDATED UNUSED BUFFER SIZE
         MVCL  R4,R14              LOAD THE RECORD'S DATA INTO BUFFER
         TM    DCBRECFM,DCBRECV    VARIABLE-LENGTH RECORDS?
         BNO   EDSVPTLP            NO, GO PUT THE NEXT RECORD
         LR    R0,R4               POINT PAST CURRENT DATA IN BLOCK
         L     R5,EDBUFADR         POINT TO THE BLOCK
         SR    R0,R5               GET THE CURRENT BLOCK LENGTH
         STH   R0,0(,R5)           SET IT IN THE BDW
         B     EDSVPTLP            GO PUT THE NEXT RECORD
         SPACE
*         HANDLE WRITING A POSSIBLE LAST BLOCK
         SPACE
EDSVLAST SAC   0                   SET PRIMARY MODE
         L     R2,EDBUFADR         POINT TO THE WRITE BUFFER
         CH    R1,DCBBLKSI         IS THE BLOCK EMPTY?
         BNL   EDSVSTOW            YES, DO NOT WRITE ANOTHER BLOCK
         TM    DCBRECFM,DCBRECV    VARIABLE-LENGTH RECORDS?
         BNO   EDSVSHRT            NO, GO WRITE THE SHORT BLOCK
         CLC   0(2,R2),EDFW4+2     IS THE BDW THE ONLY OCCUPANT?
         BNH   EDSVSTOW            YES, DO NOT WRITE ANOTHER BLOCK
         SPACE
EDSVSHRT LH    R0,DCBBLKSI         GET THE BLOCK SIZE
         LR    R4,R0               SAVE THE MAXIMUM BLOCK SIZE
         SR    R0,R1               GET THE USED BUFFER AMOUNT
         STH   R0,DCBBLKSI         SET THE SHORT BLOCK SIZE
         XASAM24
         WRITE DYNDECBW,SF,EDITDCB,(R2),'S',MF=E
         XASAM31
         TM    STATUS,STABEND      ABEND?
         BO    EDSAVEPO            YES
         XASAM24
         CHECK DYNDECBW            WAIT FOR WRITE TO FINISH
         XASAM31
         STH   R4,DCBBLKSI         RESTORE MAXIMUM BLOCK SIZE
         TM    STATUS,STABEND      ABEND?
         BO    EDSAVEPO            YES
         CLI   SYNADSW,0           ANY I/O PROBLEMS?
         BNE   EDSVIOER            YES, REPORT DETAILS
         OI    STATUS7,$7SAVE      FLAG REVEDIT HAS CHANGED DISK DATA
         SPACE
*         UPDATE THE DIRECTORY ENTRY
         SPACE
EDSVSTOW DS    0H
         MVC   REDLINES,RECLINES   UPDATE RECORD COUNT ON DISK
         TM    DS1DSORG,DS1DSGPO   PARTITIONED ORGANISATION?
         BNO   EDSVCLOS            NO, SKIP STOW PROCESSING
         MVC   EDBLNAME+2,$MEMBER  YES, SET MEMBER NAME
         SR    R0,R0
         STCM  R0,15,EDBLTTRP+2    CLEAR TTR, FLAGS AND USERDATA COUNT
         TM    EDFLG2,E2STAT       STATS ON?
         BNO   EDSTOWSV            NO, READY FOR STOW
         MVI   EDBLINDC,20         SET 20 HALFWORDS OF USERDATA
         MVI   EDBLBLNK,C' '       SET REQUIRED BLANK
         MVC   EDBXSIZE,RECLINES   SET EXTENDED SIZE
         MVC   EDBXMOD,COUNTER1    SET MODIFIED RECORD COUNT
         TM    EDBLFLG,EDBLXSTA    EXTENDED ISPF STATS?
         BO    EDSVSTAT            YES, GO COMPLETE THE DATA
         MVI   EDBLFLG,EDBLXSTA    NO, SET EXTENDED STATS
         XC    EDBXINIT,EDBXINIT   SET EXTENDED INITIAL SIZE
         MVC   EDBXINIT+2(2),EDBLINIT
         ICM   R0,3,COUNTER1       MODIFED COUNT NEEDS FULLWORD?
         BNZ   EDSVSTAT            YES
         ICM   R0,3,RECLINES       CURRENT COUNT NEEDS FULLWORD?
         BNZ   EDSVSTAT            YES
         MVI   EDBLFLG,0           NO, SET ORIGINAL STATS
         MVI   EDBLINDC,15         SET 15 HALFWORDS OF USERDATA
         MVC   EDBLBLNK,EDBLNKS    SET REQUIRED BLANKS
EDSVSTAT L     R1,REVPSCB          POINT TO THE PSCB
         USING PSCB,R1
         MVC   EDBLUID,PSCBUSER    COPY TSO USERID
         CLI   PSCBUSER,C'>'       8-CHARACTER USERID?
         BNE   *+10                NO
         MVC   EDBLUID(8),PSCB+84  YES, LOAD PSCBUID8
         DROP  R1                  PSCB
         MVC   EDBLVER,EDNEWVER+1  SET VERSION
         MVC   EDBLLVL,EDNEWLVL+1  SET LEVEL
         L     R0,RECLINES         GET THE RECORD COUNT
         STH   R0,EDBLSIZE         SET THE RECORD COUNT
         SRA   R0,16               TEST FOR OVERFLOW
         BZ    EDSVSZOK            COUNT IS LESS THAN 64K
         MVC   EDBLSIZE,=X'FFFF'   SET RECORD COUNT TO MAXIMUM
EDSVSZOK MVC   EDBLMOD,COUNTER1+2  SET MODIFIED RECORD COUNT
         ICM   R0,3,COUNTER1       HAS THIS COUNT OVERFLOWED?
         BZ    EDSVMDOK            NO
         MVC   EDBLMOD,=X'FFFF'    YES, SET TO MAXIMUM
EDSVMDOK TIME  DEC                 GET CURRENT TIME AND DATE
         STCM  R0,12,EDBLHOUR      SET TIME HOUR AND MINUTE
         STCM  R0,2,EDBLSEC        SET TIME SECOND
         STCM  R1,15,EDBLUPD       SET DATE
         TM    EDBLCRE+3,X'0F'     VALID CREATION VALUES?
         BO    EDSTOWSV            YES
         MVC   EDBLCRE,EDBLUPD     NO, SET CREATION DATE
         MVC   EDBLINIT,EDBLSIZE   SET INITIAL RECORD COUNT
         MVC   EDBXINIT,RECLINES   SET INITIAL RECORD COUNT
         SPACE
*         WRITE THE DIRECTORY ENTRY TO THE DIRECTORY
         SPACE
EDSTOWSV STOW  EDITDCB,EDBLNAME+2,R
         CL    R15,EDFW12          SUCCESS?
         BNL   EDSTOBAD            NO, GO SET MESSAGE
         NI    EDFLG1,255-SAVEY    YES, MEMBER SAVE NOW PERFORMED
         OI    STATUS7,$7SAVE      FLAG REVEDIT HAS CHANGED DISK DATA
         TM    EDFLG1,SAVEX        TERMINATION REQUESTED?
         BO    EDSAVEEX            YES, ONLY INVOKE CLOSE ONCE MORE
         B     EDSVCLOS            NO, PERFORM CLOSE AFTER SAVE REQUEST
         SPACE
*         HANDLE A PROBLEM WITH STOW
         SPACE
EDSTOBAD NI    EDFLG1,255-SAVEX    ERROR - CANCEL TERMINATION REQUEST
         NI    STATUS16,255-$16RFC CLEAR ANY PENDING COMMAND
         MVI   MSG,117             PDS DIRECTORY FULL
         MVC   BLDLNAME,EDBLNAME+2 SAVE MEMBER NAME FOR REVMSGS
         CL    R15,EDFW12          CORRECT GUESS?
         BE    EDSVCLOS            YES, INSUFFICIENT SPACE IN DIRECTORY
         MVI   MSG,112             NO, PROBABLY SOME SORT OF I/O ERROR
         SPACE
*         CLOSE THE FILE AFTER SAVE
         SPACE
EDSVCLOS MVI   CLOSED,X'80'        TELL CLOSE ABOUT ONE DCB
         TM    DS1DSORG,DS1DSGPO   PARTITIONED ORGANISATION?
         BO    EDSAVEPO            YES, DO A REAL CLOSE TO UPDATE VTOC
         NI    EDFLG1,255-SAVEY    SEQUENTIAL FILE SAVE NOW PERFORMED
         TM    EDFLG1,SAVEX        TERMINATION REQUESTED?
         BO    EDSAVEEX            YES, ONLY INVOKE CLOSE ONCE MORE
         CLOSE (EDITDCB,REREAD),TYPE=T,MF=(E,CLOSED)
         LA    R0,1                GET FIRST BLOCK ADDRESS
         ST    R0,TTR              SET IT - GOOD FOR TAPE AND DASD
         XASAM24
         POINT EDITDCB,TTR         POINT BACK TO START FOR NEXT SAVE
         XASAM31
         B     EDSAVEEX            SAVE PROCESSING NOW COMPLETE
         SPACE
EDSAVEPO TM    DCBOFLGS,DCBOFOPN   IS DCB OPEN?
         BZ    EDSVCLSD            NO, DO NOT HAVE TO CLOSE IT
         CLOSE (EDITDCB),MF=(E,CLOSED)
         OBTAIN OBTAINW            REFRESH VTOC ENTRY COPY
EDSVCLSD NI    EDFLG2,255-E2OPNU   FLAG DCB CLOSED
         NI    STATUS,255-STABEND  RESET DCB ABEND FLAG
         SR    R0,R0
         STCM  R0,7,DCBEXLSA       RESET DCB EXIT LIST
         TM    DS1DSORG,DS1DSGPO   PARTITIONED ORGANISATION?
         BNO   EDSAVEEX            NO, FINISHED FOR NOW
         MVC   DOUBLE,=C'EDOPSVIN' SET FLAG FOR DUMP
         MVI   OPEND,X'80'
         OPEN  (EDITDCB,(INPUT)),MF=(E,OPEND)
         XC    DOUBLE,DOUBLE       RESET DUMP FLAG
         OI    EDFLG2,E2OPNI       FLAG DCB OPEN FOR INPUT
         MVC   EDBLNAME,$MEMBER
         BLDL  EDITDCB,EDBL        GET LATEST MEMBER DETAILS
         SPACE
*         RELEASE SERIALIZATION AND EXIT
         SPACE
EDSAVEEX XC    EDENQPRM,EDENQPRM   CLEAR DEQ PARAMETER LIST
         MVI   EDENQPRM,X'C0'      USE ORIGINAL PARAMETER LIST FORMAT
         DEQ   (EDSPFQN,EDDSNMEM,44,SYSTEMS),RET=NONE,UCB=$UCBAD,      +
               MF=(E,EDENQPRM)
         SPACE
         L     R14,EDRETSV1        RESTORE RETURN ADDRESS
         TM    EDFLG1,SAVEX        TERMINATION REQUESTED?
         BOR   R14                 YES, RETURN TO CALLER
         ICM   R0,3,MSG            ERROR MESSAGE TO BE ISSUED?
         BNER  R14                 YES, RETURN TO CALLER
         MVI   MSG,75              DATA SAVED
         BR    R14                 RETURN TO CALLER
         SPACE
*         PROCESS SAVE REQUEST WHEN USING VIEW
         SPACE
EDNOSAVE MVI   MSG,148             SAVE NOT VALID IN VIEW MODE
         NI    EDFLG1,255-SAVEX    RESET ANY TERMINATION REQUEST
         BR    R14                 RETURN TO CALLER
         DROP  R10                 EDSAVE
         SPACE
         DC    0D'0'
         LTORG
         DC    0H'0'
         TITLE '  C A P S  '
         USING EDCAPS,R10
EDCAPS   LR    R10,R15             SET LOCAL BASE
         SPACE
         TM    OPD2+6,PRESENT      ARE THERE TOO MANY OPERANDS?
         BO    ED2MANY             YES, INVALID
         TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BO    EDCAPSON            YES, CHECK IT OUT
         XI    STATUS10,$10CAP     NO, FLIP-FLOP
         LA    R0,C'C'             LOAD CAUTION CONTENT KEY
         BAS   R14,CAUT2WND        DELETE ANY CAPS CAUTION MESSAGE
         MVI   EPCAPS,C'0'         SET CAPS OFF IN PROFILE
         TM    STATUS10,$10CAP     CAPS NOW OFF?
         BNO   EDCAPSQM            YES
         MVI   EPCAPS,C'1'         SET CAPS ON IN PROFILE
EDCAPSQM TM    STATUS10,$10CAP     IS IT ON OR OFF?
         BO    EDNOWON             IT'S ON
         B     EDNOWOFF            IT'S OFF
EDCAPSON CLI   OPD1+7,3            IS IT '?'?
         BE    EDCAPSQM            YES
         BH    EDINVOP             NO, INVALID OPERAND
         CLI   OPD1+7,0            IS IT 'ON' OR 'OFF'?
         BE    EDINVOP             NO, INVALID OPERAND
         LA    R0,C'C'             LOAD CAUTION CONTENT KEY
         BAS   R14,CAUT2WND        DELETE ANY CAPS CAUTION MESSAGE
         CLI   OPD1+7,1            IS IT 'ON'?
         BNE   ECAPSOFF            NO, IT'S 'OFF'
         TM    STATUS10,$10CAP     CAPS ALREADY ON?
         BO    EDUNCHGD            YES
         OI    STATUS10,$10CAP     SETTING WAS OFF
         MVI   EPCAPS,C'1'         SET CAPS ON IN PROFILE
         B     EDNOWON
ECAPSOFF TM    STATUS10,$10CAP     CAPS ALREADY OFF?
         BNO   EDUNCHGD            YES
         NI    STATUS10,255-$10CAP SETTING WAS ON
         MVI   EPCAPS,C'0'         SET CAPS OFF IN PROFILE
         B     EDNOWOFF
         SPACE
         DROP  R10                 EDCAPS
         TITLE '  N U L L S  '
         USING EDNULLS,R10
EDNULLS  LR    R10,R15             SET LOCAL BASE
         SPACE
         TM    OPD2+6,PRESENT      ARE THERE TOO MANY OPERANDS?
         BO    ED2MANY             YES, INVALID
         TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BO    EDNULLON            YES, CHECK IT OUT
         XI    STATUS14,$14NUL     NO, FLIP-FLOP
EDNULLQM TM    STATUS14,$14NUL     IS IT ON OR OFF?
         BO    EDNOWON             IT'S ON
         B     EDNOWOFF            IT'S OFF
EDNULLON CLI   OPD1+7,3            IS IT '?'?
         BE    EDNULLQM            YES
         CLI   OPD1+7,1            IS IT 'ON'?
         BNE   ENULLOFF            NO, TRY OFF
         TM    STATUS14,$14NUL     NULLS ALREADY ON?
         BO    EDUNCHGD            YES
         OI    STATUS14,$14NUL     SETTING WAS OFF
         B     EDNOWON
ENULLOFF CLI   OPD1+7,2            IS IT 'OFF'?
         BNE   EDINVOP             NO, INVALID OPERAND
         TM    STATUS14,$14NUL     NULLS ALREADY OFF?
         BNO   EDUNCHGD            YES
         NI    STATUS14,255-$14NUL SETTING WAS ON
         B     EDNOWOFF
         SPACE
         DROP  R10                 EDNULLS
         TITLE '  H I L I T E  '
         USING EDHILITE,R10
EDHILITE LR    R10,R15             SET LOCAL BASE
         SPACE
         TM    OPD2+6,PRESENT      ARE THERE TOO MANY OPERANDS?
         BO    ED2MANY             YES, INVALID
         TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BNO   EDMISOP             NO, INVALID
         TM    OPD1+6,QUOTED       IS OPERAND QUOTED?
         BO    EDINVOP             YES, INVALID
         CLI   OPD1+4,0            IS OPERAND TOO LONG?
         BNE   EDINVOP             YES, INVALID
         CLI   OPD1+5,7            IS OPERAND TOO LONG?
         BH    EDINVOP             YES, INVALID
         SPACE
         L     R15,OPD1            POINT TO OPERAND
         LH    R4,OPD1+4           GET OPERAND LENGTH
         L     R2,EDKAPSAD         POINT TO KAPS - WANT X'00'->X'40'
         EX    R4,EDHITRAN         ENSURE OPERAND IS UPPER CASE
         SPACE
         LA    R1,EDHITAB@         POINT TO HILITE TYPES
         LA    R0,EDHITAB#         GET HILITE TYPE COUNT
EDHILOOP EX    R4,EDHICOMP         MATCHING ENTRY?
         BE    EDHIMTCH            YES, ENSURE UPPER CASE
         LA    R1,8(,R1)           POINT TO NEXT
         BCT   R0,EDHILOOP         CONTINUE SEARCH
         B     EDINVOP             INVALID
         SPACE
EDHIMTCH LA    R1,EDHITAB#         GET THE NUMBER OF HILITE TYPES
         SR    R1,R0               GET THE RELATIVE ENTRY NUMBER
         CLM   R1,1,EDHITYP        ANY CHANGE?
         BE    EDUNCHGD            NO, SAME AS IS ACTIVE
         STC   R1,EDHITYP          YES, SET NEW HILITE TYPE
         LTR   R1,R1               HILITE NOW OFF?
         BZ    EDNOWOFF            YES
         CLI   EDHITYP,EDAUTO      HILITE AUTO?
         BER   R14                 YES, RETURN TO CALLER
         STC   R1,EDFLG3           NO, EXPLICITLY SET SOURCE TYPE
         BR    R14                 RETURN TO CALLER
         SPACE
         DROP  R10                 EDHILITE
         SPACE
EDHITRAN TR    0(0,R15),0(R2)      <<< EXECUTED >>>
EDHICOMP CLC   0(0,R15),0(R1)      <<< EXECUTED >>>
         TITLE '  C O L U M N S  '
         USING EDCOLUMN,R10
EDCOLUMN LR    R10,R15             SET LOCAL BASE
         SPACE
         TM    OPD2+6,PRESENT      ARE THERE TOO MANY OPERANDS?
         BO    ED2MANY             YES, INVALID
         TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BO    EDCOLSON            YES, CHECK IT OUT
         XI    STATUS7,EDCOLS      NO, FLIP-FLOP
         B     EDCOLSEX
EDCOLSON CLI   OPD1+7,1            IS IT 'ON'?
         BNE   EDCOLOFF            NO, TRY OFF
         OI    STATUS7,EDCOLS      YES
         B     EDCOLSEX
EDCOLOFF CLI   OPD1+7,2            IS IT 'OFF'?
         BNE   EDINVOP             NO, INVALID OPERAND
         NI    STATUS7,255-EDCOLS  YES
         SPACE
EDCOLSEX BR    R14                 RETURN TO CALLER
         DROP  R10                 EDCOLUMN
         TITLE '  A U T O S A V E  '
         USING EDAUTOSV,R10
EDAUTOSV LR    R10,R15             SET LOCAL BASE
         SPACE
         TM    STATUS11,$11VIEW    IN VIEW MODE?
         BO    EDNOAUTO            YES, CAN ONLY SAVE IN EDIT
         TM    OPD2+6,PRESENT      ARE THERE TOO MANY OPERANDS?
         BO    ED2MANY             YES, INVALID
         TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BO    EDAUTOON            YES, CHECK IT OUT
         XI    STATUS16,$16NAS     NO, FLIP-FLOP
         TM    STATUS16,$16NAS     AUTOSAVE NOW OFF?
         BO    EDNOWOFF            YES
         B     EDNOWON             NO
EDAUTOON CLI   OPD1+7,1            IS IT 'ON'?
         BNE   EDAUTOFF            NO, TRY OFF
         NI    STATUS16,255-$16NAS YES
         B     EDNOWON             SETTING NOW ON
EDAUTOFF CLI   OPD1+7,2            IS IT 'OFF'?
         BNE   EDINVOP             NO, INVALID OPERAND
         OI    STATUS16,$16NAS     YES
         B     EDNOWOFF            SETTING NOW OFF
EDNOAUTO MVI   MSG,148             AUTOSAVE NOT VALID IN VIEW MODE
         B     EDITCYCL
         SPACE
         DROP  R10                 EDAUTOSV
         TITLE '  P R O F I L E  '
         USING EDPROFIL,R10
EDPROFIL LR    R10,R15             SET LOCAL BASE
         ST    R14,EDRETSV1        SAVE RETURN ADDRESS
         SPACE
         TM    OPD2+6,PRESENT      ARE THERE TOO MANY OPERANDS?
         BO    ED2MANY             YES
         LA    R0,6                LOAD DEFAULT LINES-TO-SHOW
         TM    OPD1+6,PRESENT+NUMERIC
         BM    EDINVOP             NON-NUMERIC OPERAND IS INVALID
         BZ    EDPROF00            NO OPERAND SO PROCEED
         CLI   OPD1+5,16           IS LENGTH MORE THAN 16?
         BH    EDINVOP             YES, INVALID
         L     R14,OPD1            GET ADDRESS OF DATA
         LH    R1,OPD1+4           GET LENGTH
         BCTR  R1,0
         EX    R1,EDNUMPAK
         CVB   R0,DOUBLE
         LA    R1,HIPRFIDX+1       GET MAXMIMUM SUPPORTED VALUE
         CR    R0,R1               IS IT TOO LARGE?
         BNH   EDPROF00            NO
         LR    R0,R1               YES, REDUCE TO THE MAXIMUM
         SPACE
EDPROF00 BAS   R14,WIPEPROF        CLEAR PROFILE MSGS, SET AR MODE
         SR    R1,R1               RESET INSERTED LINE COUNT
         L     R3,LINEADDR         POINT TO TOP LINE ON SCREEN
EDPROF01 TM    FLG1(R3),XCLD       EXCLUDED LINE?
         BNO   EDPROF02            NO
         L     R3,FWD(,R3)         YES, POINT TO NEXT LINE
         B     EDPROF01            GO TEST AGAIN
EDPROF02 ICM   R4,15,FWD(R3)       POINT TO LINE AFTER TOP LINE
         BNZ   EDPROF03            BOTTOM OF DATA WAS NOT TOP LINE
         LR    R4,R3               POINT TO BOTTOM OF DATA
         L     R3,BAK(,R3)         POINT TO LAST CONTENT LINE
*  CREATE PROFILE LINES - ONE FOR EACH VALID PROFILE LINE INDEX.
*  BY USING A SINGLE BYTE CODE IN THE DATA AREA OF THE LINE,
*  FULL PROFILE REPORT LINES CAN BE DISPLAYED EVEN IF THE
*  MAXIMUM DATA LENGTH FOR A RECORD IS ONE BYTE.
*  NOTE THAT PROFILE LINES HAVE BOTH LMSG AND LFIX FLAGS SET.
*  THE PROFILE LINE INDEX VALUES ARE INTERPRETED BY EDITSCRN.
*  THE FULL SIZE ENTRIES CONTAIN RESIDUAL DATA AFTER THE INDEX BYTE.
EDPROF03 L     R15,GETALIN@
         BASR  R14,R15             GET STORAGE FOR A RECORD
         BZ    EDPROFAB            INSUFFICIENT STORAGE
         ST    R15,FWD(,R3)        POINT FORWARD TO NEW LINE
         ST    R3,BAK(,R15)        POINT BACK TO PREVIOUS LINE
         ST    R15,BAK(,R4)        POINT BACK TO NEW LINE
         ST    R4,FWD(,R15)        POINT FORWARD TO NEXT LINE
         OI    FLG1(R15),LMSG      NEW LINE IS A MESSAGE LINE
         OI    FLG3(R15),LFIX      ALWAYS KEEP NEW LINE AT LEFT MAX
         STC   R1,CTLLEN(,R15)     SET PROFILE LINE INDEX
         LA    R2,1
         A     R2,MSGLINES         INCREMENT MESSAGE LINE COUNT
         ST    R2,MSGLINES         SAVE UPDATED COUNT
         LA    R1,1(,R1)           INCREMENT PROFILE LINE INDEX
         LR    R3,R15              POINT TO NEXT LINE'S PREVIOUS LINE
         CLC   LINEADDR,BTMADDR    IS BOTTOM-OF-DATA TOP OF SCREEN?
         BNE   EDPROF04            NO, NEW LINES WILL BE ON SCREEN
         ST    R15,LINEADDR        YES, SHOW PROFILE ON TOP SCREEN LINE
         L     R2,LINENMBR         GET LOCATION RECORD NUMBER
         BCTR  R2,0                DECREMENT IT
         ST    R2,LINENMBR         SAVE IT
EDPROF04 BCT   R0,EDPROF03         GO DO THE NEXT LINE
         B     EDPROFEX            PROFILE DISPLAY SET UP NOW COMPLETE
         SPACE
EDPROFAB MVI   MSG,123             ABORTED - VIRTUAL STORAGE FULL
EDPROFEX L     R14,EDRETSV1        RESTORE RETURN ADDRESS
         SAC   0                   SET PRIMARY MODE
         LAM   A0,A15,EDZEROS      ZERO ACCESS REGISTERS
         BR    R14                 RETURN TO CALLER
         DROP  R10                 EDPROFIL
         TITLE '  Z A P  -  U P D A T E   P D S   I N   P L A C E  '
         USING EDZAPMEM,R10
EDZAPMEM LR    R10,R15             SET LOCAL BASE
         SPACE
         MVI   MSG,149             ZAP NOT VALID IN VIEW MODE
         TM    STATUS11,$11VIEW    IN VIEW MODE?
         BO    EDITCYCL            YES, CAN ONLY SET ZAP IN EDIT
         TM    DS1DSORG,DS1DSGPO   PARTITIONED ORGANISATION?
         BO    EDZAPPO             YES
         MVI   MSG,38              DATA SET IS NOT PARTITIONED
         B     EDITCYCL            GO DISPLAY MESSAGE
EDZAPPO  TM    DS1SMSFG,DS1PDSE    IS MEMBER LIST FOR A PDSE?
         BZ    EDZAPPDS            NO
         MVI   MSG,118             UPDATE-IN-PLACE NOT USED FOR PDSE
         B     EDITCYCL            GO DISPLAY MESSAGE
EDZAPPDS TM    TSTRECFM,X'40'      FIXED-LENGTH RECORDS?
         BNO   EDZAPFIX            YES
         MVI   MSG,119             RECORD FORMAT NOT FIXED-LENGTH
         B     EDITCYCL            GO DISPLAY MESSAGE
         SPACE
EDZAPFIX TM    OPD2+6,PRESENT      ARE THERE TOO MANY OPERANDS?
         BO    ED2MANY             YES, INVALID
         TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BO    EDZAPON             YES, CHECK IT OUT
         XI    EPZAP,1             NO, FLIP-FLOP
         TM    EPZAP,1             IS IT ON OR OFF?
         BO    EDNOWON             IT'S ON
         B     EDNOWOFF            IT'S OFF
EDZAPON  CLI   OPD1+7,1            IS IT 'ON'?
         BNE   EDZAPOFF            NO, TRY OFF
         TM    EPZAP,1             ZAP ALREADY ON?
         BO    EDUNCHGD            YES
         MVI   EPZAP,C'1'          SETTING WAS OFF
         B     EDNOWON
EDZAPOFF CLI   OPD1+7,2            IS IT 'OFF'?
         BNE   EDINVOP             NO, INVALID OPERAND
         TM    EPZAP,1             ZAP ALREADY OFF?
         BNO   EDUNCHGD            YES
         MVI   EPZAP,C'0'          SETTING WAS ON
         B     EDNOWOFF
         SPACE
         DROP  R10                 EDZAPMEM
         TITLE '  D S N C H K  '
         USING EDSNCHK,R10
EDSNCHK  LR    R10,R15             SET LOCAL BASE
         SPACE
         TM    OPD2+6,PRESENT      ARE THERE TOO MANY OPERANDS?
         BO    ED2MANY             YES, INVALID
         TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BO    EDSNCON             YES, CHECK IT OUT
         XI    EPDSNC,1            NO, FLIP-FLOP
EDSNCQM  TM    EPDSNC,1            IS IT ON OR OFF?
         BO    EDNOWON             IT'S ON
         B     EDNOWOFF            IT'S OFF
EDSNCON  CLI   OPD1+7,3            IS IT '?'?
         BE    EDSNCQM             YES
         CLI   OPD1+7,1            IS IT 'ON'?
         BNE   EDSNCOFF            NO, TRY OFF
         TM    EPDSNC,1   '        DSNC ALREADY ON?
         BO    EDUNCHGD            YES
         MVI   EPDSNC,C'1'         SETTING WAS OFF
         B     EDNOWON
EDSNCOFF CLI   OPD1+7,2            IS IT 'OFF'?
         BNE   EDINVOP             NO, INVALID OPERAND
         TM    EPDSNC,1            DSNC ALREADY OFF?
         BNO   EDUNCHGD            YES
         MVI   EPDSNC,C'0'         SETTING WAS ON
         B     EDNOWOFF
         SPACE
         DROP  R10                 EDSNCHK
         TITLE '  S T A T I S T I C S  '
         USING EDSTATS,R10
EDSTATS  LR    R10,R15             SET LOCAL BASE
         SPACE
         TM    DS1DSORG,DS1DSGPO   PARTITIONED ORGANISATION?
         BO    EDSTATPO            YES
         MVI   MSG,38              DATA SET IS NOT PARTITIONED
         B     EDITCYCL            GO DISPLAY MESSAGE
         SPACE
EDSTATPO TM    OPD2+6,PRESENT      ARE THERE TOO MANY OPERANDS?
         BO    ED2MANY             YES, INVALID
         TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BO    EDSTATON            YES, CHECK IT OUT
         XI    EDFLG2,E2STAT       NO, FLIP-FLOP
         B     EDSTATEX
EDSTATON CLI   OPD1+7,1            IS IT 'ON'?
         BNE   ESTATOFF            NO, TRY OFF
         OI    EDFLG2,E2STAT       YES
         B     EDSTATEX
ESTATOFF CLI   OPD1+7,2            IS IT 'OFF'?
         BNE   EDINVOP             NO, INVALID OPERAND
         NI    EDFLG2,255-E2STAT   YES
         SPACE
EDSTATEX BR    R14                 RETURN TO CALLER
         DROP  R10                 EDSTATS
         TITLE '  H E X  '
         USING EDHEXMD,R10
EDHEXMD  LR    R10,R15             SET LOCAL BASE
         SPACE
         TM    OPD2+6,PRESENT      ARE THERE TOO MANY OPERANDS?
         BO    ED2MANY             YES, INVALID
         TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BO    EDHEXON             YES, CHECK IT OUT
         XI    EPHEX,C'1'-C'0'     NO, FLIP-FLOP
         B     EDHEXEX
EDHEXON  CLI   OPD1+7,1            IS IT 'ON'?
         BNE   EHEXOFF             NO, TRY OFF
         MVI   EPHEX,C'1'          YES
         B     EDHEXEX
EHEXOFF  CLI   OPD1+7,2            IS IT 'OFF'?
         BNE   EDINVOP             NO, INVALID OPERAND
         MVI   EPHEX,C'0'          YES
         SPACE
EDHEXEX  BR    R14                 RETURN TO CALLER
         DROP  R10                 EDHEXMD
         TITLE '  A S C I I  '
         USING EDASCII,R10
EDASCII  LR    R10,R15             SET LOCAL BASE
         SPACE
         TM    OPD2+6,PRESENT      ARE THERE TOO MANY OPERANDS?
         BO    ED2MANY             YES, INVALID
         TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BO    EDASCON             YES, CHECK IT OUT
         XI    EPASCII,C'1'-C'0'   NO, FLIP-FLOP
EDASCIQM TM    EPASCII,C'1'-C'0'   IS IT NOW ON?
         BO    EDASC143            YES
         B     EDASC144            NO
EDASCON  CLI   OPD1+7,3            IS IT '?'?
         BE    EDASCIQM            YES
         CLI   OPD1+7,1            IS IT 'ON'?
         BNE   EASCOFF             NO, TRY OFF
         MVI   EPASCII,C'1'        YES
EDASC143 MVI   MSG,143             SETTING NOW ON
         OI    MODE,MD_ASCII
         B     EDASCEX
EASCOFF  CLI   OPD1+7,2            IS IT 'OFF'?
         BNE   EDINVOP             NO, INVALID OPERAND
         MVI   EPASCII,C'0'        YES
EDASC144 MVI   MSG,144             SETTING NOW OFF
         NI    MODE,255-MD_ASCII
         SPACE
EDASCEX  XI    STRINGL,X'FF'       INVALIDATE SEARCH STRING
         XI    STRING2L,X'F0'      INVALIDATE REPLACEMENT STRING
         BR    R14                 RETURN TO CALLER
         DROP  R10                 EDASCII
         TITLE '  H I D E  '
         USING EDHIDE,R10
EDHIDE   LR    R10,R15             SET LOCAL BASE
         SPACE
         TM    OPD2+6,PRESENT      ARE THERE TOO MANY OPERANDS?
         BO    ED2MANY             YES, INVALID
         TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BO    EDHIDEON            YES, CHECK IT OUT
         XI    EPHIDE,C'1'-C'0'    NO, FLIP-FLOP
EDHIDEQM TM    EPHIDE,C'1'-C'0'    IS IT NOW ON?
         BO    EDHID143            YES
         B     EDHID144            NO
EDHIDEON CLI   OPD1+7,3            IS IT '?'?
         BE    EDHIDEQM            YES
         CLI   OPD1+7,1            IS IT 'ON'?
         BNE   EHIDEOFF            NO, TRY OFF
EHIDESET MVI   EPHIDE,C'1'         YES
EDHID143 MVI   MSG,143             SETTING NOW ON
         BR    R14                 RETURN
EHIDEOFF CLI   OPD1+7,2            IS IT 'OFF'?
         BNE   EDHIDEXC            NO, CHECK FOR OTHER SYNTAX
         MVI   EPHIDE,C'0'         YES
EDHID144 MVI   MSG,144             SETTING NOW OFF
         BR    R14                 RETURN
EDHIDEXC L     R1,OPD1             POINT TO THE OPERAND
         CLI   0(R1),C'X'          'HIDE X' REQUEST?
         BE    EHIDESET            PROBABLY
         CLI   0(R1),C'E'          'HIDE EX' REQUEST?
         BE    EHIDESET            PROBABLY
         B     EDINVOP             NO, INVALID
         SPACE
         DROP  R10                 EDHIDE
         TITLE '  P R E S E R V E  '
         USING EDPRESRV,R10
EDPRESRV LR    R10,R15             SET LOCAL BASE
         SPACE
         TM    OPD2+6,PRESENT      ARE THERE TOO MANY OPERANDS?
         BO    ED2MANY             YES, INVALID
         TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BO    EDPRESON            YES, CHECK IT OUT
         XI    EPPRES,C'1'-C'0'    NO, FLIP-FLOP
EDPRESQM TM    EPPRES,C'1'-C'0'    IS IT NOW ON?
         BO    EDPRE143            YES
         B     EDPRE144            NO
EDPRESON CLI   OPD1+7,3            IS IT '?'?
         BE    EDPRESQM            YES
         CLI   OPD1+7,1            IS IT 'ON'?
         BNE   EPRESOFF            NO, TRY OFF
EPREESET MVI   EPPRES,C'1'         YES
EDPRE143 MVI   MSG,143             SETTING NOW ON
         BR    R14                 RETURN
EPRESOFF CLI   OPD1+7,2            IS IT 'OFF'?
         BNE   EDINVOP             NO, INVALID
         MVI   EPPRES,C'0'         YES
EDPRE144 MVI   MSG,144             SETTING NOW OFF
         BR    R14                 RETURN
         SPACE
         DROP  R10                 EDPRESRV
         TITLE '  V E R S I O N  '
         USING EDVER,R10
EDVER    LR    R10,R15             SET LOCAL BASE
         LR    R7,R14              COPY RETURN ADDRESS
         TM    OPD2+6,PRESENT      ARE THERE TOO MANY OPERANDS?
         BO    ED2MANY             YES, INVALID
         TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BNO   EDMISOP             NO, INVALID
         TM    OPD1+6,QUOTED       IS OPERAND QUOTED?
         BO    EDINVOP             YES, INVALID
         TM    OPD1+6,NUMERIC      IS OPERAND NUMERIC?
         BNO   EDINVOP             NO, INVALID
         CLI   OPD1+5,16           IS LENGTH MORE THAN 16?
         BH    EDINVOP             YES, INVALID
         L     R14,OPD1            GET ADDRESS OF DATA
         LH    R1,OPD1+4           GET LENGTH
         BCTR  R1,0
         EX    R1,EDNUMPAK
         CVB   R0,DOUBLE
         LA    R1,99               GET LARGEST VALID VALUE
         CLR   R0,R1               TOO BIG?
         BH    EDINVOP             YES, INVALID
         LTR   R0,R0               POSITIVE?
         BNP   EDINVOP             NO, INVALID
         STH   R0,EDNEWVER         YES, SET NEW VERSION NUMBER
         TM    EDFLG1,SAVEY        HAS DATA CHANGED?
         BOR   R7                  YES, DOESN'T MATTER WHAT VERSION IS
         CLM   R0,1,EDBLVER        IS VERSION NUMBER DIFFERENT?
         BER   R7                  NO, DO NOT SET DATA-CHANGED FLAG
         OI    EDFLG1,SAVEY+SAVEZ  YES, FLAG IN-CORE DATA HAS CHANGED
         BR    R7                  RETURN TO CALLER
         DROP  R10                 EDVER
         TITLE '  L E V E L  '
         USING EDLEVEL,R10
EDLEVEL  LR    R10,R15             SET LOCAL BASE
         LR    R7,R14              COPY RETURN ADDRESS
         TM    OPD2+6,PRESENT      ARE THERE TOO MANY OPERANDS?
         BO    ED2MANY             YES, INVALID
         TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BNO   EDMISOP             NO, INVALID
         TM    OPD1+6,QUOTED       IS OPERAND QUOTED?
         BO    EDINVOP             YES, INVALID
         TM    OPD1+6,NUMERIC      IS OPERAND NUMERIC?
         BNO   EDINVOP             NO, INVALID
         CLI   OPD1+5,16           IS LENGTH MORE THAN 16?
         BH    EDINVOP             YES, INVALID
         L     R14,OPD1            GET ADDRESS OF DATA
         LH    R1,OPD1+4           GET LENGTH
         BCTR  R1,0
         EX    R1,EDNUMPAK
         CVB   R0,DOUBLE
         LA    R1,99               GET LARGEST VALID VALUE
         CLR   R0,R1               TOO BIG?
         BH    EDINVOP             YES, INVALID
         STH   R0,EDNEWLVL         YES, SET NEW LEVEL NUMBER
         CVD   R0,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  EDLVLIND,DOUBLE
         TM    EDFLG1,SAVEY        HAS DATA CHANGED?
         BOR   R7                  YES, DOESN'T MATTER WHAT VERSION IS
         CLM   R0,1,EDBLLVL        IS LEVEL NUMBER DIFFERENT?
         BER   R7                  NO, DO NOT SET DATA-CHANGED FLAG
         OI    EDFLG1,SAVEY+SAVEZ  YES, FLAG IN-CORE DATA HAS CHANGED
         BR    R7                  RETURN TO CALLER
         DROP  R10                 EDLEVEL
         TITLE '  U N N U M B E R  '
         USING EDUNNUM,R10
EDUNNUM  LR    R10,R15             SET LOCAL BASE
         LA    R15,OPD1            SET FOR ED2MANY
         TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BO    ED2MANY             YES, INVALID
         TM    EPNUM,1             IS NUMBER ON?
         BO    EDDOUNN             YES, GO DO THE UNNUMBER
         MVI   MSG,121             NUMBER ALREADY OFF
         BR    R14
         SPACE
EDDOUNN  ST    R14,EDRETSV1        SAVE RETURN ADDRESS
         LA    R0,C'N'             LOAD CAUTION CONTENT KEY
         BAS   R14,CAUT2WND        DELETE ANY NUM CAUTION MESSAGE
         LAM   A0,A15,EDZEROS      ZERO ACCESS REGISTERS
         LAM   A3,A3,DSPCALET      LOAD DATA SPACE ALET
         LAM   A4,A4,DSPCALET      LOAD DATA SPACE ALET
         L     R3,TOPADDR          POINT TO TOP OF DATA
         SAC   512                 SET AR MODE
EDUNNLP  L     R3,FWD(,R3)         POINT TO FIRST RECORD
         CL    R3,BTMADDR          BOTTOM OF DATA?
         BE    EDUNNUMX            YES, ALL DONE
         TM    FLG1(R3),LMSG       MESSAGE LINE?
         BO    EDUNNLP             YES, DO NOT CHANGE IT
         LA    R4,CTLLEN(,R3)      POINT TO THE RECORD'S DATA
         TM    DCBRECFM,DCBRECV    VARIABLE-LENGTH RECORDS?
         BO    EDUNNSPC            YES
         A     R4,MAXRECSZ         POINT PAST THE RECORD'S DATA
         S     R4,EDFW8            POINT TO SEQUENCE NUMBER
EDUNNSPC MVC   0(8,R4),EDBLNKS     CLEAR THE SEQUENCE NUMBER
         TM    EPNUM,2             IS NUMBER ON COBOL?
         BNO   EDUNMCHG            NO
         MVC   CTLLEN(6,R3),0(R4)  YES, ALSO CLEAR COBOL NUMBERS
EDUNMCHG OI    FLG1(R3),CHGL       MARK RECORD AS CHANGED
         TM    STATUS4,$4ATTN      ATTENTION INTERRUPT?
         BNO   EDUNNLP             NO, GO PROCESS THE NEXT RECORD
         MVI   MSG,122             PROCESSING INTERRUPTED
         NI    STATUS16,255-$16RFC CLEAR ANY PENDING COMMAND
         SPACE
EDUNNUMX SAC   0                   SET PRIMARY MODE
         NI    EPNUM,255-1         SET NUMBER OFF
         OI    EDFLG1,SAVEY+SAVEZ  FLAG IN-CORE DATA HAS CHANGED
         L     R14,EDRETSV1        RESTORE RETURN ADDRESS
         TM    DCBRECFM,DCBRECV    VARIABLE-LENGTH RECORDS?
         BO    EDUNNEXV            YES
         L     R0,MAXRECSZ         GET RECORD LENGTH
         S     R0,EDFW8            DISCOUNT SEQUENCE NUMBER COLUMNS
         C     R0,EDRBND           NEED TO ADJUST BOUNDS?
         BNER  R14                 NO, RETURN TO CALLER
         MVC   EDRBND,MAXRECSZ     YES, EXTEND RIGHT BOUND
         BR    R14                 RETURN TO CALLER
EDUNNEXV CLC   EDLBND,EDFW8        MANUALLY SET LEFT BOUND?
         BHR   R14                 YES, RETURN TO CALLER
         MVC   EDLBND,EDZEROS      NO, RESET LEFT BOUND
         CLC   EDOFFSET,EDFW8      MANUALLY SCROLLED RIGHT?
         BHR   R14                 YES, RETURN TO CALLER
         MVC   EDOFFSET,EDZEROS    NO, SCROLL LEFT MAX
         BR    R14                 RETURN TO CALLER
         DROP  R10                 EDUNNUM
         TITLE '  N U M B E R  '
         USING EDNUMBER,R10
EDNUMBER LR    R10,R15             SET LOCAL BASE
         SPACE
         TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BZ    EDMISOP             NO, MISSING OPERAND
*
*   'DOUBLE' IS USED TO RECORD OPERAND PARSING STATUS
*
*        VALUE AT DOUBLE+0:
*             0 - NEITHER 'ON' NOR 'OFF' SPECIFIED
*             1 - 'ON' SPECIFIED
*             2 - 'OFF' SPECIFIED
*
*        VALUE AT DOUBLE+1:
*             0 - NEITHER 'STD' NOR 'COBOL' SPECIFIED
*             3 - 'STD' SPECIFIED
*             4 - 'COBOL' SPECIFIED
*
*        VALUE AT DOUBLE+2 (SET AFTER PARSING):
*             0 - 'STD'/'COBOL' STATUS IS UNCHANGED
*             1 - 'STD'/'COBOL' STATUS HAS CHANGED
*
         MVC   DOUBLE,EDZEROS      RESET PARSING STATUS
         LA    R15,OPD0            POINT TO COMMAND DESCRIPTOR
         SPACE
EDNUMOPS LA    R15,8(,R15)         POINT TO NEXT OPERAND DESCRIPTOR
         TM    6(R15),PRESENT      REACHED END OF OPERANDS?
         BNO   EDNUMBDO            YES
         ST    R15,16(,R13)        SAVE OPERAND ADDRESS FOR EDINVOP
         CLI   7(R15),0            VALID KEYWORD OPERAND?
         BE    EDINVOP             NO
         CLI   7(R15),4            VALID KEYWORD OPERAND?
         BH    EDINVOP             NO
         BL    EDNUMPAR            YES
         TM    DCBRECFM,DCBRECV    VARIABLE-LENGTH RECORDS?
         BO    EDINVOP             YES, 'COBOL' NOT ALLOWED
EDNUMPAR LA    R5,DOUBLE+1         PREPARE FOR 'STD' OR 'COBOL'
         CLI   7(R15),2            GOOD GUESS?
         BH    *+8                 YES
         LA    R5,DOUBLE           NO, IT IS 'ON' OR 'OFF'
         CLI   0(R5),0             HAS THIS BEEN SET BEFORE?
         BNE   EDINVOP             YES, CONFLICTING OPERANDS
         MVC   0(1,R5),7(R15)      SAVE OPERAND CODE
         B     EDNUMOPS
         SPACE
EDNUMBDO ST    R14,EDRETSV1        SAVE RETURN ADDRESS
         LA    R0,C'N'             LOAD CAUTION CONTENT KEY
         BAS   R14,CAUT2WND        DELETE ANY NUM CAUTION MESSAGE
         L     R14,EDRETSV1        RESTORE RETURN ADDRESS
         CLI   DOUBLE+1,4          IS 'COBOL' SPECIFIED?
         BNE   EDNUMSTD            NO
         IC    R0,MSG              SAVE MESSAGE STATUS
         MVI   MSG,125             RECORDS TOO SHORT FOR SEQ. NUMBERS
         CLC   MAXRECSZ,EDFW80     80-BYTE RECORDS?
         BL    EDITCYCL            NO, TOO SHORT
         STC   R0,MSG              RESTORE MESSAGE STATUS
         CLC   EDLBND,EDFW6        LEFT BOUND BEFORE COLUMN 7?
         BNL   EDNUMLOK            NO
         MVI   EDLBND+3,6          YES, MAKE IT COLUMN 7
EDNUMLOK CLC   EDRBND,EDFW72       RIGHT BOUND AFTER COLUMN 72?
         BNH   EDNUMROK            NO
         MVI   EDRBND+3,72         YES, MAKE IT COLUMN 72
EDNUMROK MVI   EDFLG3,EDCOBOL      SET 'HILITE COBOL'
         TM    EPNUM,2             'COBOL' ALREADY SET?
         BO    EDNUMON             YES, SO NO CHANGE THERE
         OI    EPNUM,C'2'          NO, FLAG 'COBOL' SET
         MVI   DOUBLE+2,1          FLAG 'COBOL' CAUSED A CHANGE
         B     EDNUMON
EDNUMSTD CLI   DOUBLE+1,3          IS 'STD' SPECIFIED?
         BNE   EDNUMON             NO
         TM    EPNUM,2             'STD' ALREADY SET?
         BZ    EDNUMON             YES, SO NO CHANGE THERE
         NI    EPNUM,255-2         NO, RESET 'COBOL'
         CLC   EDLBND,EDFW6        IS LEFT BOUND COLUMN 7?
         BNE   EDNUMON             NO
         MVI   EDLBND+3,0          YES, MAKE IT COLUMN 1
         SPACE
EDNUMON  CLI   DOUBLE,1            IS 'ON' SPECIFIED?
         BNE   EDNUMOFF            NO, TRY OFF
         TM    EPNUM,1             IS NUMBER ALREADY ON?
         BZ    EDNUMREN            NO, GO RENUMBER RECORDS
         TM    DOUBLE+2,1          ANY 'STD' / 'COBOL' CHANGE?
         BZ    EDUNCHGD            NO, NO NEED TO RENUMBER RECORDS
EDNUMREN MVI   OPD1+6,0            PRETEND NO SUBCOMMAND OPERANDS
         LA    R15,EDRENUM         POINT TO RENUMBER ROUTINE
         BR    R15                 GO SET NUM ON AND SUPPLY NUMBERS
         SPACE
EDNUMOFF CLI   DOUBLE,2            IS 'OFF' SPECIFIED?
         BNER  R14                 NO, INVALID OPERAND
         TM    EPNUM,1             IS NUMBER ALREADY OFF?
         BNO   EDUNCHGD            YES, NO CHANGE
         NI    EPNUM,255-1         NO, SET NUMBER OFF
         TM    DCBRECFM,DCBRECV    VARIABLE-LENGTH RECORDS?
         BO    EDNUMOFV            YES
         L     R0,MAXRECSZ         GET RECORD LENGTH
         S     R0,EDFW8            DISCOUNT SEQUENCE NUMBER COLUMNS
         C     R0,EDRBND           NEED TO ADJUST BOUNDS?
         BNER  R14                 NO, RETURN TO CALLER
         MVC   EDRBND,MAXRECSZ     YES, EXTEND RIGHT BOUND
EDNUMOFV CLC   EDLBND,EDFW8        LEFT BOUND AT COLUMN 9?
         BNER  R14                 NO, RETURN TO CALLER
         MVC   EDLBND,EDZEROS      YES, SET IT TO COLUMN 1
         BR    R14                 RETURN TO CALLER
         DROP  R10                 EDNUMBER
         TITLE '  R E N U M B E R  '
         USING EDRENUM,R10
EDRENUM  LR    R10,R15             SET LOCAL BASE
         LA    R15,OPD1            SET FOR ED2MANY
         TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BO    ED2MANY             YES, INVALID
         SPACE
**@@@    MVI   MSG,107             NUMBER NOT ALLOWED
**@@@    TM    DCBRECFM,DCBRECV    VARIABLE-LENGTH RECORDS?
**@@@    BO    EDITCYCL            YES
         MVI   MSG,125             RECORDS TOO SHORT FOR SEQ. NUMBERS
         L     R0,MAXRECSZ         GET THE RECORD LENGTH
         CH    R0,EDNUMMIN         LONG ENOUGH FOR SEQUENCE NUMBERS?
         BL    EDITCYCL            NO, TOO SHORT
         MVI   MSG,0               YES, CLEAR ERROR MESSAGE
         SPACE
         ST    R14,EDRETSV1        SAVE RETURN ADDRESS
         LA    R0,C'N'             LOAD CAUTION CONTENT KEY
         BAS   R14,CAUT2WND        DELETE ANY NUM CAUTION MESSAGE
         SPACE
         ZAP   DOUBLE,EDDEC0       RESET SEQUENCE NUMBER
         LAM   A0,A15,EDZEROS      ZERO ACCESS REGISTERS
         LAM   A3,A3,DSPCALET      LOAD DATA SPACE ALET
         LAM   A4,A4,DSPCALET      LOAD DATA SPACE ALET
         L     R3,TOPADDR          POINT TO TOP OF DATA
         SAC   512                 SET AR MODE
EDRENLP  L     R3,FWD(,R3)         POINT TO FIRST RECORD
         CL    R3,BTMADDR          BOTTOM OF DATA?
         BE    EDRENUMX            YES, ALL DONE
         TM    FLG1(R3),LMSG       MESSAGE LINE?
         BO    EDRENLP             YES, DO NOT CHANGE IT
         LA    R4,CTLLEN(,R3)      POINT TO THE RECORD'S DATA
         TM    DCBRECFM,DCBRECV    VARIABLE-LENGTH RECORDS?
         BO    EDREN100            YES
         A     R4,MAXRECSZ         POINT PAST THE RECORD'S DATA
         S     R4,EDFW8            POINT TO SEQUENCE NUMBER
EDREN100 AP    DOUBLE,EDDEC100     INCREMENT SEQUENCE NUMBER
         OI    DOUBLE+7,X'0F'      PREPARE FOR UNPACK
         UNPK  16(8,R13),DOUBLE    GET NUMERIC CHARACTERS
         TM    EDFLG2,E2STAT       STATS ON?
         BO    EDRENSTA            YES
         CLC   0(8,R4),16(R13)     SEQUENCE NUMBER ALREADY SET?
         BNE   EDRENUPD            NO, TIME FOR AN UPDATE
         TM    EPNUM,2             IS NUMBER ON COBOL?
         BNO   EDRENNXT            NO, SO NO CHANGE HERE
         CLC   CTLLEN(6,R3),16(R13)    SEQUENCE NUMBER ALREADY SET?
         BE    EDRENNXT            YES, NO CHANGE HERE
EDRENUPD MVC   0(8,R4),16(R13)     NO, BUT NOW IT IS
EDRENCOB TM    EPNUM,2             IS NUMBER ON COBOL?
         BNO   EDRENCHG            NO, BUT THE LINE HAS CHANGED
         MVC   CTLLEN(6,R3),16(R13)    SUPPLY COBOL SEQUENCE NUMBER
EDRENCHG OI    FLG1(R3),CHGL       MARK RECORD AS CHANGED
         OI    EDFLG1,SAVEY+SAVEZ  FLAG IN-CORE DATA HAS CHANGED
EDRENNXT TM    STATUS4,$4ATTN      ATTENTION INTERRUPT?
         BNO   EDRENLP             NO, GO PROCESS THE NEXT RECORD
         MVI   MSG,122             PROCESSING INTERRUPTED
         NI    STATUS16,255-$16RFC CLEAR ANY PENDING COMMAND
         B     EDRENUMX+4          NOT COMPLETE SO NUMBER NOT ON
EDRENSTA L     R2,EDTABNUM         POINT TO TRANSLATE TABLE
         TRT   6(2,R4),0(R2)       NUMERIC LEVEL FLAG?
         BNZ   EDRENNEW            NO, NEEDS A NEW NUMBER
         CLC   0(6,R4),16(R13)     SEQUENCE NUMBER ALREADY SET?
         BNE   EDRENNEW            NO, IT NEEDS TO BE SET
         TM    EPNUM,2             IS NUMBER ON COBOL?
         BNO   EDRENNXT            NO, SO NO CHANGE HERE
         CLC   CTLLEN(6,R3),16(R13)    SEQUENCE NUMBER ALREADY SET?
         BE    EDRENNXT            YES, NO CHANGE HERE
EDRENNEW MVC   0(6,R4),16(R13)     NO, BUT NOW IT IS
         MVC   6(2,R4),EDLVLIND    SUPPLY LEVEL INDICATION
         B     EDRENCOB            GO SEE ABOUT COBOL SEQUENCING
         SPACE
EDRENUMX OI    EPNUM,1             SET NUMBER ON
         SAC   0                   SET PRIMARY MODE
         L     R14,EDRETSV1        RESTORE RETURN ADDRESS
         TM    DCBRECFM,DCBRECV    VARIABLE-LENGTH RECORDS?
         BO    EDRENEXV            YES
         L     R0,MAXRECSZ         GET RECORD LENGTH
         S     R0,EDFW8            DISCOUNT SEQUENCE NUMBER COLUMNS
         C     R0,EDRBND           NEED TO ADJUST BOUNDS?
         BNLR  R14                 NO, RETURN TO CALLER
         ST    R0,EDRBND           YES, BRING IN RIGHT BOUND
         C     R0,EDLBND           LEFT BOUND IN ORDER?
         BHR   R14                 YES, RETURN TO CALLER
         SR    R0,R0               NO
         ST    R0,EDLBND           RESET LEFT BOUND
         BR    R14                 RETURN TO CALLER
EDRENEXV LA    R0,8
         A     R0,EDATWDTH         GET SCREEN DATA WIDTH PLUS EIGHT
         C     R0,MAXRECSZ         WOULD 'RIGHT 8' WORK?
         BH    EDRENXVX            NO, GO CHECK THE BOUNDS
         CLC   EDOFFSET,EDFW8      SCROLLED RIGHT PAST SEQUENCE FIELD?
         BNL   EDRENXVX            YES, NO NEED FOR ADJUSTMENT
         MVC   EDOFFSET,EDFW8      NO, SO DO IT NOW
EDRENXVX CLC   EDLBND,EDFW8        IS LEFT BOUND IN SEQUENCE FIELD?
         BNLR  R14                 NO, RETURN TO CALLER
         MVC   EDLBND,EDFW8        YES, ADJUST LEFT BOUND
         CLC   EDLBND,EDRBND       RIGHT BOUND IN ORDER?
         BLR   R14                 YES, RETURN TO CALLER
         MVC   EDRBND,MAXRECSZ     NO, RESET RIGHT BOUND
         BR    R14                 RETURN TO CALLER
         DROP  R10                 EDRENUM
         TITLE '  L E F T  '
         USING EDLEFT,R10
EDLEFT   LR    R10,R15             SET LOCAL BASE
         ST    R14,EDRETSV1        SAVE RETURN ADDRESS
         SPACE
         TM    OPD2+6,PRESENT      ARE THERE TOO MANY OPERANDS?
         BO    ED2MANY             YES, INVALID
         TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BZ    ELFTDEF             NO, USE DEFAULT
         TM    OPD1+6,QUOTED       IS OPERAND QUOTED?
         BO    EDINVOP             YES, INVALID
         LH    R1,OPD1+4           GET LENGTH
         LTR   R1,R1               IS IT NULL STRING?
         BZ    EDINVOP             YES, ERROR
         C     R1,EDFW5            IS LENGTH MORE THAN 5?
         BH    EDINVOP             YES, ERROR
         L     R14,OPD1            GET ADDRESS OF DATA
         OI    0(R14),C' '         ENSURE UPPER CASE
         CLI   0(R14),C'C'         CURSOR REQUESTED?
         BE    ELFTCSR             YES
         CLI   0(R14),C'M'         MAXIMUM REQUESTED?
         BE    ELFTMAX             YES
         CLI   0(R14),C'P'         FULL PAGE REQUESTED?
         BE    ELFTPAGE            YES
         CLI   0(R14),C'H'         HALF PAGE REQUESTED?
         BE    ELFTHALF            YES
         TM    OPD1+6,NUMERIC      IS IT NUMERIC?
         BNO   EDINVOP             NO, ERROR
         BCTR  R1,0
         EX    R1,EDNUMPAK
         CVB   R15,DOUBLE
         B     ELFTR15
ELFTCSR  L     R1,EDCSRPOS         GET CURSOR SCREEN ADDRESS
         LTR   R1,R1               IN DATA PART OF SCREEN?
         BZ    ELFTPAGE            NO, CAN'T BE CURSOR SCROLLING
         L     R0,EDCSRCOL         YES, GET CURSOR COLUMN NUMBER
         BCTR  R0,0                CONVERT TO OFFSET
         S     R0,EDFW8            ACCOUNT FOR LINE COMMAND FIELD
         BM    ELFTPAGE            CURSOR WAS NOT IN DATA AREA
         L     R15,VIEWIDTH        GET HORIZONTAL PAGE SIZE
         BCTR  R15,0               GET COLS-MINUS-ONE
         SR    R15,R0              LOAD CURSOR OFFSET FROM RIGHT SIDE
         BZ    ELFTPAGE            CURSOR WAS IN LAST COLUMN
         B     ELFTR15             GO SCROLL LEFT
ELFTHALF L     R15,VIEWIDTH
         SRL   R15,1               GET HALF OF SCREEN WIDTH
         B     ELFTR15
ELFTDEF  TM    STATUS4,$4CSR       CURSOR SCROLLING?
         BO    ELFTCSR             YES
         TM    STATUS4,$4PAGE      FULL PAGE SCROLLING?
         BO    ELFTPAGE            YES, IT MEANS LEFT-A-PAGE
         TM    STATUS4,$4HALF      HALF PAGE SCROLLING?
         BO    ELFTHALF            YES, IT MEANS HALF-A-PAGE
         L     R15,SCROLL          NO, USE SCROLL AMOUNT
         B     ELFTR15
ELFTPAGE L     R15,VIEWIDTH
ELFTR15  L     R1,EDOFFSET
         SR    R1,R15              REDUCE OFFSET BY SCROLL AMOUNT
         BNM   ELFTNTNG            IF RESULT IS NEGATIVE
ELFTMAX  SR    R1,R1                  THEN MAKE IT ZERO
ELFTNTNG L     R14,EDOFFSET        GET PREVIOUS OFFSET
         TM    DCBRECFM,DCBRECV    VARIABLE-LENGTH RECORDS?
         BNO   ELFTNEWO            NO, HAVE NEW OFFSET
         TM    EPNUM,1             NUMBER ON?
         BNO   ELFTNEWO            NO, HAVE NEW OFFSET
         C     R14,EDFW8           OLD OFFSET MORE THAN 8?
         BNH   ELFTNEWO            NO, HAVE NEW OFFSET
         LA    R1,8                YES, ONLY SHOW LEFT TO COLUMN 9
ELFTNEWO ST    R1,EDOFFSET         SET NEW OFFSET
         SR    R14,R1              GET DECREASE IN OFFSET
         SPACE
         ICM   R15,15,EDCSRPOS     GET OLD CURSOR POSITION
         BZ    ELFTEXIT            CURSOR NOT IN DYNAMIC AREA
         S     R15,EDCSRCOL        POINT TO START OF LINE
         LA    R15,2(,R15)         PUT CURSOR AT START OF LINE NUMBER
         ST    R15,EDCSROUT        SAVE NEW CURSOR POSITION
         L     R15,EDCSRCOL        GET OLD CURSOR NUMBER
         C     R15,EDFW8           CURSOR IN DATA PART?
         BNH   ELFTEXIT            NO, CURSOR POINTS TO SEQUENCE NUMBER
         AR    R14,R15             GET NEW CURSOR SCREEN COLUMN
         L     R0,VIEWIDTH
         A     R0,EDFW8            GET RIGHT MOST COLUMN NUMBER ALLOWED
         CR    R14,R0              CURSOR GONE TOO FAR RIGHT?
         BNH   *+8                 NO, NEW CURSOR COLUMN NOW KNOWN
         LA    R14,9               YES, PUT IT BACK TO START OF DATA
         L     R15,EDCSRPOS        GET OLD CURSOR POSITION
         S     R15,EDCSRCOL
         AR    R15,R14
         ST    R15,EDCSROUT        SET NEW CURSOR POSITION
         SPACE
ELFTEXIT L     R14,EDRETSV1        RESTORE RETURN ADDRESS
         BR    R14                 RETURN TO CALLER
         DROP  R10                 EDLEFT
         TITLE '  R I G H T  '
         USING EDRIGHT,R10
EDRIGHT  LR    R10,R15             SET LOCAL BASE
         ST    R14,EDRETSV1        SAVE RETURN ADDRESS
         SPACE
         TM    OPD2+6,PRESENT      ARE THERE TOO MANY OPERANDS?
         BO    ED2MANY             YES, INVALID
         TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BZ    EDRTDEF             NO, USE DEFAULT
         TM    OPD1+6,QUOTED       IS OPERAND QUOTED?
         BO    EDINVOP             YES, INVALID
         LH    R1,OPD1+4           GET LENGTH
         LTR   R1,R1               IS IT NULL STRING?
         BZ    EDINVOP             YES, ERROR
         C     R1,EDFW5            IS LENGTH MORE THAN 5?
         BH    EDINVOP             YES, ERROR
         L     R14,OPD1            GET ADDRESS OF DATA
         OI    0(R14),C' '         ENSURE UPPER CASE
         CLI   0(R14),C'C'         CURSOR REQUESTED?
         BE    EDRTCSR             YES
         CLI   0(R14),C'M'         MAXIMUM REQUESTED?
         BE    EDRTMAX             YES
         CLI   0(R14),C'P'         FULL PAGE REQUESTED?
         BE    EDRTPAGE            YES
         CLI   0(R14),C'H'         HALF PAGE REQUESTED?
         BE    EDRTHALF            YES
         TM    OPD1+6,NUMERIC      IS IT NUMERIC?
         BNO   EDINVOP             NO, ERROR
         BCTR  R1,0
         EX    R1,EDNUMPAK
         CVB   R1,DOUBLE
         B     EDRTR1
EDRTCSR  L     R1,EDCSRPOS         GET CURSOR SCREEN ADDRESS
         LTR   R1,R1               IN DATA PART OF SCREEN?
         BZ    EDRTPAGE            NO, CAN'T BE CURSOR SCROLLING
         L     R1,EDCSRCOL         YES, GET CURSOR COLUMN NUMBER
         BCTR  R1,0                CONVERT TO OFFSET
         S     R1,EDFW8            ACCOUNT FOR LINE COMMAND FIELD
         BM    EDRTPAGE            CURSOR WAS NOT IN DATA AREA
         BZ    EDRTPAGE            CURSOR WAS IN DATA COLUMN 1
         B     EDRTR1
EDRTHALF L     R1,VIEWIDTH
         SRL   R1,1                GET HALF OF SCREEN WIDTH
         B     EDRTR1
EDRTPAGE L     R1,VIEWIDTH
         B     EDRTR1
EDRTMAX  L     R1,MAXRECSZ
         B     EDRTR1
EDRTDEF  TM    STATUS4,$4CSR       CURSOR SCROLLING?
         BO    EDRTCSR             YES
         TM    STATUS4,$4PAGE      FULL PAGE SCROLLING?
         BO    EDRTPAGE            YES, IT MEANS RIGHT-A-PAGE
         TM    STATUS4,$4HALF      HALF PAGE SCROLLING?
         BO    EDRTHALF            YES, IT MEANS HALF-A-PAGE
         L     R1,SCROLL           NO, USE SCROLL AMOUNT
EDRTR1   L     R0,EDOFFSET
         AR    R0,R1
         L     R1,MAXRECSZ
         L     R15,VIEWIDTH
         SR    R1,R15              GET MAXRECSZ-COLS
         BNM   *+6                 IF MAXRECSZ IS LESS THAN COLS
         SR    R1,R1                  THEN MAXRECSZ-COLS IS ZERO
         CR    R0,R1               IF OFFSET+COLS GT MAXRECSZ-COLS
         BNH   *+6                    THEN
         LR    R0,R1                  USE MAXRECSZ-COLS
         L     R14,EDOFFSET        GET PREVIOUS OFFSET
         ST    R0,EDOFFSET         SET NEW OFFSET
         SR    R0,R14              GET INCREASE IN OFFSET
         SPACE
         ICM   R15,15,EDCSRPOS     GET OLD CURSOR POSITION
         BZ    EDRTEXIT            CURSOR NOT IN DYNAMIC AREA
         S     R15,EDCSRCOL        POINT TO START OF LINE
         LA    R15,2(,R15)         PUT CURSOR AT START OF LINE NUMBER
         ST    R15,EDCSROUT        SAVE NEW CURSOR POSITION
         L     R15,EDCSRCOL        GET OLD CURSOR NUMBER
         C     R15,EDFW8           CURSOR IN DATA PART?
         BNH   EDRTEXIT            NO, CURSOR POINTS TO SEQUENCE NUMBER
         SR    R15,R0              GET NEW CURSOR SCREEN COLUMN
         C     R15,EDFW8           IS NEW OFFSET IN DATA PART?
         BH    *+8                 YES, NEW CURSOR COLUMN NOW KNOWN
         LA    R15,9               NO, PUT IT BACK TO START OF DATA
         L     R14,EDCSRPOS        GET OLD CURSOR POSITION
         S     R14,EDCSRCOL
         AR    R14,R15
         ST    R14,EDCSROUT        SET NEW CURSOR POSITION
         SPACE
EDRTEXIT L     R14,EDRETSV1        RESTORE RETURN ADDRESS
         BR    R14                 RETURN TO CALLER
         DROP  R10                 EDRIGHT
         TITLE '  B O U N D S  '
         USING EDBOUNDS,R10
EDBOUNDS LR    R10,R15             SET LOCAL BASE
         ST    R14,EDRETSV1        SAVE RETURN ADDRESS
         SPACE
         SR    R0,R0               PREPARE FOR NO OPERANDS
         L     R1,MAXRECSZ         GET LENGTH OF RECORD
         TM    EPNUM,1             SEQUENCE NUMBERS ACTIVE?
         BNO   *+8                 NO
         S     R1,EDFW8            YES, IGNORE SEQUENCE NUMBER COLUMNS
         LR    R15,R1              SAVE FOR COMPARISON
         CLI   EDFLG3,EDCOBOL      EDITING COBOL SOURCE?
         BNE   EDBNDOPS            NO
         LA    R0,6                YES, ALLOW FOR COBOL NUMBERS
         LA    R1,72               ALLOW FOR THE USUAL NUMBERS
         SPACE
         TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
EDBNDOPS TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BZ    EDBNRSET            NO, GO SET DEFAULT BOUNDS
         TM    OPD2+6,PRESENT      ARE THERE ENOUGH OPERANDS?
         BZ    EDMISOP             NO, GO SET DEFAULT BOUNDS
         LA    R15,OPD3            SET FOR ED2MANY
         TM    OPD3+6,PRESENT      ARE THERE TOO MANY OPERANDS?
         BO    ED2MANY             YES, INVALID
         SPACE
         LA    R5,OPD1             POINT TO FIRST OPERAND DETAILS
         BAS   R2,EDBNDSOP         GET THE OPERAND VALUE
         LR    R0,R1               SAVE IT
         LA    R5,OPD2             POINT TO SECOND OPERAND DETAILS
         BAS   R2,EDBNDSOP         GET THE OPERAND VALUE
         LTR   R1,R1               SECOND OPERAND AN ASTERISK?
         BM    EDBNRSET            YES
         CR    R0,R1               COLUMNS OUT OF ORDER?
         BH    EDBDCOL             YES, INVALID
         SPACE
EDBNRSET LTR   R0,R0               LEAVE LEFT BOUNDARY AS IS?
         BM    EDBNLFOK            YES
         BCTR  R0,0                NO, CONVERT COLUMN TO OFFSET
         ST    R0,EDLBND           SAVE NEW SETTING
         SPACE
EDBNLFOK LTR   R1,R1               LEAVE RIGHT BOUNDARY AS IS?
         BM    EDBNEXIT            YES
         ST    R1,EDRBND           NO, SAVE NEW SETTING
         SPACE
EDBNEXIT L     R14,EDRETSV1        RESTORE RETURN ADDRESS
         BR    R14                 RETURN TO CALLER
         SPACE
EDBNDSOP ST    R5,16(,R13)         SAVE OPERAND ADDRESS FOR EDINVOP
         TM    6(R5),QUOTED        IS OPERAND QUOTED?
         BO    EDINVOP             YES, INVALID
         LH    R1,4(,R5)           GET LENGTH
         LTR   R1,R1               IS IT NULL STRING?
         BNP   EDINVOP             YES, ERROR
         C     R1,EDFW10           IS LENGTH MORE THAN 9?
         BNL   EDINVOP             YES, ERROR
         L     R14,0(,R5)          GET ADDRESS OF DATA
         BCTR  R1,0                DECREMENT FOR EXECUTE
         TM    6(R5),NUMERIC       IS OPERAND NUMERIC?
         BNO   EDBNDAST            NO, CHECK FOR ASTERISK
         EX    R1,EDNUMPAK         YES
         CVB   R1,DOUBLE           GET COLUMN NUMBER
         LTR   R1,R1               COLUMN ZERO?
         BNP   EDCOLOP             YES, ERROR
         CR    R1,R15              TOO BIG?
         BH    EDCOLOP             YES, ERROR
         BR    R2                  RETURN TO CALLER
EDBNDAST LTR   R1,R1               IS LENGTH ONE CHARACTER?
         BNZ   EDINVOP             NO, ERROR
         CLI   0(R14),C'*'         IS IT AN ASTERISK?
         BNE   EDINVOP             NO, ERROR
         BCTR  R1,0                YES, RETURN A NEGATIVE VALUE
         BR    R2                  RETURN TO CALLER
         DROP  R10                 EDBOUNDS
         TITLE '  T A B S  '
         USING EDTABS,R10
EDTABS   LR    R10,R15             SET LOCAL BASE
         ST    R14,EDRETSV1        SAVE RETURN ADDRESS
         SPACE
         TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BZ    EDMISOP             NO, MISSING OPERAND
         LA    R15,OPD9            SET FOR ED2MANY
         TM    OPD9+6,PRESENT      ARE THERE TOO MANY OPERANDS?
         BO    ED2MANY             YES, INVALID
         SPACE
*         VALIDATE AND STORE EACH OPERAND
         SPACE
         LA    R5,OPD1             POINT TO FIRST OPERAND
         LA    R2,20(,R13)         POINT TO TEMPORARY HOLD AREA
         XC    0(EDTABL+4,R2),0(R2)    CLEAR IT
         MVI   20(R13),99          SET MINIMUM INVALIDLY HIGH
EDTABLP1 TM    6(R5),PRESENT       OPERAND PRESENT?
         BZ    EDTAB#OK            NO, PROCESSED ALL OPREANDS
         ST    R5,16(,R13)         SAVE OPERAND ADDRESS FOR EDINVOP
         TM    6(R5),QUOTED        IS OPERAND QUOTED?
         BO    EDINVOP             YES, INVALID
         TM    6(R5),NUMERIC       IS OPERAND NUMERIC?
         BNO   EDINVOP             NO, INVALID
         LH    R1,4(,R5)           YES, GET ITS LENGTH
         BCTR  R1,0                DECREMENT FOR EXECUTE
         L     R14,0(,R5)          POINT TO THE OPERAND
         EX    R1,EDNUMPAK         YES
         CVB   R1,DOUBLE           GET COLUMN NUMBER
         C     R1,MAXRECSZ         BEYOND END OF RECORD?
         BH    EDINVOP             YES, INVALID
         LA    R2,4(,R2)           NO, POINT TO NEXT HOLD AREA SLOT
         ST    R1,0(,R2)           SAVE THE COLUMN NUMBER
         LA    R5,8(,R5)           POINT TO NEXT OPERAND
         LTR   R1,R1               WAS A NON-ZERO COLUMN SPECIFIED?
         BZ    EDTABLP1            NO
         C     R1,20(,R13)         YES, SMALLEST SO FAR?
         BNL   EDTABLP1            NO
         ST    R1,20(,R13)         YES, SAVE IT
         B     EDTABLP1
         SPACE
*         ACTIVATE THE NEWLY VALIDATED VALUES
         SPACE
EDTAB#OK MVI   20(R13),0           CLEAR HIGH SETTING IF STILL PRESENT
         MVC   EDTAB#(EDTABL),24(R13)    LOAD NEW TABS COLUMN NUMBERS
         MVC   EDTABMIN,20(R13)    AND NOTE SMALLEST NON-ZERO COLUMN
         SPACE
*         SORT THE VALUES INTO DECREASING ORDER
         SPACE
         LA    R14,(EDTABL/4)-1    GET INITIAL COMPARE COUNT
EDTABLP2 LR    R0,R14              GET SLOTS TO SORT THIS TIME
         LA    R2,EDTAB#           POINT TO HOLD AREA
EDTABLP3 L     R1,0(,R2)           GET THIS VALUE
         C     R1,4(,R2)           IS IT LESS THAN THE NEXT VALUE?
         BNL   EDTABNX3            NO
         MVC   0(4,R2),4(R2)       YES, PROMOTE NEXT VALUE
         ST    R1,4(,R2)           DEMOTE THIS VALUE
EDTABNX3 LA    R2,4(,R2)           POINT TO NEXT SLOT
         BCT   R0,EDTABLP3         CONTINUE THIS BUBBLE PASS
         BCT   R14,EDTABLP2        PERFORM NEXT BUBBLE PASS
         SPACE
*         ALL DONE - IF FIRST VALUE IS ZERO THEN ALL ARE
         SPACE
         L     R14,EDRETSV1        RESTORE RETURN ADDRESS
         BR    R14                 RETURN TO CALLER
         SPACE
         DROP  R10                 EDTABS
         TITLE '  L O C A T E  '
         USING EDLOCATE,R10
EDLOCATE LR    R10,R15             SET LOCAL BASE
         ST    R14,EDRETSV1        SAVE RETURN ADDRESS
         SPACE
         TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BZ    EDMISOP             NO, MISSING OPERAND
         LA    R0,OPD1             GET 1ST OPERAND ELEMENT ADDRESS
         LA    R1,OPD2             GET 2ND OPERAND ELEMENT ADDRESS
         ST    R0,16(,R13)         SAVE 1ST OPERAND ADDRESS FOR EDINVOP
         TM    OPD1+6,QUOTED       IS OPERAND QUOTED?
         BO    EDINVOP             YES, INVALID
         TM    OPD1+6,NUMERIC      IS FIRST OPERAND NUMERIC?
         BNO   EDLOCCMD            NO, SO NOT A RECORD NUMBER
         ST    R1,16(,R13)         SAVE 2ND OPERAND ADDRESS FOR EDINVOP
         TM    OPD2+6,PRESENT      ARE THERE TOO MANY OPERANDS?
         BO    EDINVOP             YES, INVALID
         ST    R0,16(,R13)         SAVE 1ST OPERAND ADDRESS FOR EDINVOP
         LH    R1,OPD1+4           GET LENGTH
         LTR   R1,R1               VALID LENGTH?
         BNP   EDINVOP             NO, ERROR
         C     R1,EDFW10           IS LENGTH MORE THAN 9?
         BNL   EDINVOP             YES, ERROR
         L     R14,OPD1            GET ADDRESS OF DATA
         BCTR  R1,0
         EX    R1,EDNUMPAK
         CVB   R1,DOUBLE           GET RECORD NUMBER TO LOCATE TO
         L     R14,EDRETSV1        RESTORE RETURN ADDRESS
         L     R0,LINENMBR         GET CURRENT TOP LINE NUMBER
         LR    R3,R0               COPY IT
         CR    R1,R0               GOING UP OR DOWN?
         BE    ELOCHERE            NEITHER, ALREADY THERE
         BH    ELOCDOWN            GOING DOWN
         SRA   R3,1                GET HALFWAY BETWEEN HERE AND TOP
         CR    R1,R3               CLOSER TO HERE OR TOP?
         BL    EDLTOPDN            TOP
         SR    R0,R1               GET LINES TO SCROLL UP
         B     EDLOCUP             GO SCROLL UP
         SPACE
ELOCHERE LAM   A2,A2,DSPCALET      LOAD DATA SPACE ALET
         L     R2,LINEADDR         POINT TO TOP LINE
         SAC   512                 SET AR MODE
ELOCRISE TM    FLG1(R2),LMSG       MESSAGE LINE?
         BNO   ELOCDONE            NO, THIS IS THE RIGHT PLACE
         L     R2,BAK(,R2)         YES, POINT TO PREVIOUS RECORD
         B     ELOCRISE            GO CHECK IT
         SPACE
EDLTOPDN SR    R0,R0
         ST    R0,LINENMBR         GO TO TOP
         MVC   LINEADDR,TOPADDR
         B     EDLOCDWN            GO SCROLL DOWN
         SPACE
ELOCDOWN A     R3,RECLINES
         SRA   R3,1                GET HALFWAY BETWEEN HERE AND END
         CR    R1,R3               CLOSER TO HERE OR BOTTOM?
         BH    EDLBTMUP            BOTTOM
         SR    R1,R0               GET LINES TO SCROLL DOWN
EDLOCDWN LR    R0,R1               GET LINES TO SCROLL DOWN
         L     R2,LINEADDR         POINT TO TOP LINE
         L     R3,LINENMBR         GET TOP LINE NUMBER
         LAM   A2,A2,DSPCALET      LOAD DATA SPACE ALET
         SAC   512                 SET AR MODE
         LTR   R0,R0               GOING DOWN AT ALL?
         BNP   ELOCDONE            NO
ELOCDNLP C     R2,BTMADDR          REACHED THE BOTTOM?
         BE    ELOCDONE            YES, STOP GOING DOWN
         TM    STATUS4,$4ATTN      ATTENTION INTERRUPT?
         BO    ELOCATTN            YES, STOP RIGHT NOW
         L     R2,FWD(,R2)         NO, POINT TO NEXT RECORD
         TM    FLG1(R2),LMSG       MESSAGE LINE?
         BO    ELOCDNLP            YES, NO CHANGE TO LINE NUMBER
         LA    R3,1(,R3)           INCREMENT LINE NUMBER
         BCT   R0,ELOCDNLP         DECREMENT LINES-TO-GO
ELOCDONE NI    FLG1(R2),255-XCLD   ENSURE LOCATED LINE NOT EXCLUDED
         ST    R2,LINEADDR         UPDATE TOP LINE ADDRESS
         ST    R3,LINENMBR         UPDATE TOP LINE NUMBER
         B     EDLOCEX
         SPACE
ELOCATTN MVI   MSG,122             PROCESSING INTERRUPTED
         B     ELOCDONE
         SPACE
EDLBTMUP LA    R0,1
         A     R0,RECLINES
         ST    R0,LINENMBR         GO TO BOTTOM
         MVC   LINEADDR,BTMADDR
         SR    R0,R1               GET LINES TO SCROLL DOWN
         BNPR  R14                 REQUEST TOO BIG - STAY AT BOTTOM
EDLOCUP  L     R2,LINEADDR         POINT TO TOP LINE
         L     R3,LINENMBR         GET TOP LINE NUMBER
         LAM   A2,A2,DSPCALET      LOAD DATA SPACE ALET
         SAC   512                 SET AR MODE
         LTR   R0,R0               GOING UP AT ALL?
         BNP   ELOCDONE            NO
ELOCUPLP C     R2,TOPADDR          REACHED THE TOP?
         BE    ELOCDONE            YES, STOP GOING UP
         TM    STATUS4,$4ATTN      ATTENTION INTERRUPT?
         BO    ELOCATTN            YES, STOP RIGHT NOW
         TM    FLG1(R2),LMSG       MESSAGE LINE?
         L     R2,BAK(,R2)         POINT TO PREVIOUS RECORD
         BO    ELOCUPLP            YES, NO CHANGE TO LINE NUMBER
         BCTR  R3,0                DECREMENT LINE NUMBER
         BCT   R0,ELOCUPLP         DECREMENT LINES-TO-GO
         B     ELOCDONE
         SPACE
*
*   'DOUBLE' IS USED TO RECORD OPERAND PARSING STATUS
*        WHEN THE FIRST OPERAND IS NOT NUMERIC
*
*        DECIMAL VALUE OF HALFWORD AT DOUBLE+0:
*             0 - NOTHING RELEVANT SPECIFIED
*             4 - 'COM' SPECIFIED
*             8 - 'CHG' SPECIFIED
*            12 - 'ERR' SPECIFIED
*            16 - 'UPD' SPECIFIED
*            20 - 'LAB' SPECIFIED
*            24 - 'EXC' SPECIFIED
*            28 - 'SPE' SPECIFIED
*
*        DECIMAL VALUE OF HALFWORD AT DOUBLE+2:
*             0 - NOTHING RELEVANT SPECIFIED
*             4 - 'FIRST' SPECIFIED
*             8 - 'NEXT' SPECIFIED
*            12 - 'PREV' SPECIFIED
*            16 - 'LAST' SPECIFIED
*
*        VALUE OF HALFWORD AT DOUBLE+4:
*             0 - NO LABELS SPECIFIED
*           > 0 - OPD OFFSET OF LABEL SAVED AT 20(R13)
*
*        VALUE OF HALFWORD AT DOUBLE+6:
*             0 - FEWER THAN TWO LABELS SPECIFIED
*           > 0 - OPD OFFSET OF LABEL SAVED AT 26(R13)
*
*        SINCE THE NUMBER OF OPERAND DESCRIPTORS EXCEEDS THE NUMBER
*        OF VALID OPERANDS THAN CAN BE SPECIFIED, THERE IS NO NEED
*        TO LIMIT THE NUMBER OF OPERANDS PARSED, BECAUSE AN ABSENT
*        (IE. THE END OF THE SPECIFIED OPERANDS HAS BEEN REACHED)
*        OR INVALID OPERAND MUST BE ENCOUNTERED BEFORE THE END OF
*        THE OPERAND DESCRIPTOR LIST IS REACHED.
         SPACE
EDLOCCMD ICM   R0,15,RECLINES      ANY DATA RECORDS PRESENT?
         BZ    EDLOCNOT            NO, SO CANNOT LOCATE TO IT
         XC    DOUBLE,DOUBLE       RESET PARSING STATUS
         MVC   RESWORK(8),TOPADDR  PREPARE FOR NO LABEL RANGE
         LA    R15,OPD0            POINT TO COMMAND DESCRIPTOR
EDLOCOLP LA    R15,8(,R15)         POINT TO NEXT OPERAND DESCRIPTOR
         ST    R15,16(,R13)        SAVE ITS ADDRESS FOR EDINVOP
         TM    6(R15),PRESENT      IS IT PRESENT?
         BNO   EDLOCOND            NO, END OF OPERANDS REACHED
         CLI   4(R15),0            SENSIBLE LENGTH?
         BNE   EDINVOP             NO
         TM    6(R15),QUOTED       IS OPERAND QUOTED?
         BO    EDINVOP             YES, INVALID
         CLI   7(R15),0            IS IT A KEYWORD?
         BE    EDLOCLAB            NO, SHOULD BE A LABEL
         TM    7(R15),3            IS IT A KEYWORD?
         BNZ   EDLOCLAB            NO, SHOULD BE A LABEL
         LA    R14,DOUBLE          POINT TO OBJECT TYPE OPERAND STATUS
         CLI   7(R15),64           IS KEYWORD ABOUT OBJECT TYPE?
         BH    *+8                 YES
         LA    R14,DOUBLE+2        NO, POINT TO SCOPE OPERAND STATUS
         CLI   1(R14),0            ALREADY SPECIFIED?
         BNE   EDINVOP             YES, INVALID
         MVC   1(1,R14),7(R15)     NO, SO USE IT
         NI    1(R14),255-64       RESET OPERAND TYPE DIFFERENTIAL FLAG
         B     EDLOCOLP
         SPACE
EDLOCLAB BAS   R14,EDVLABEL        SET R0->LABEL AND DO SOME CHECKS
         CLI   7(R15),C'L'         DOES OPERAND SPECIFY A LABEL?
         BNE   EDINVOP             NO, INVALID OPERAND
         LA    R14,DOUBLE+4        TRY FOR FIRST LABEL
         LA    R2,RESWORK
         CLI   1(R14),0            ALREADY ENCOUNTERED A LABEL?
         BE    EDLOCSAV            NO
         LA    R14,DOUBLE+6        TRY FOR SECOND LABEL
         LA    R2,RESWORK+4
         CLI   1(R14),0            ALREADY ENCOUNTERED 2 LABELS?
         BNE   EDINVOP             YES, INVALID
EDLOCSAV ST    R0,0(,R2)           SAVE LINE ELEMENT ADDRESS
         LR    R3,R15              POINT TO OPERAND DESCRIPTOR
         LA    R0,OPD0             POINT TO COMMAND DESCRIPTOR
         SR    R3,R0               GET OPD OFFSET
         STH   R3,0(,R14)          SAVE IT IN DOUBLE
         B     EDLOCOLP            LABEL OPERAND NOW PROCESSED
         SPACE
EDLOCOND LH    R14,DOUBLE+4
         LTR   R14,R14             ANY LABELS SPECIFIED?
         BZ    EDLOC0LB            NO
         LH    R14,DOUBLE+6
         LTR   R14,R14             TWO LABELS SPECIFIED?
         BZ    EDLOC1LB            NO
         MVI   RESWORK+8,2         FLAG 2 LABELS SPECIFIED
         CLI   DOUBLE+3,4          'FIRST' SPECIFIED?
         BE    EDLOC2LB            YES, GO PROCESS LABEL BLOCK SCOPE
         CLI   DOUBLE+3,16         'LAST' SPECIFIED?
         BE    EDLOC2LB            YES, GO PROCESS LABEL BLOCK SCOPE
         MVI   MSG,226             'FIRST' OR 'LAST' NOT SPECIFIED
         B     EDITCYCL            RETURN TO MAINLINE
         SPACE
EDLOC1LB LA    R0,OPD2             WHATEVER THE SECOND OPERAND IS
         ST    R0,16(,R13)         - SAY IT'S WRONG
         TM    OPD2+6,PRESENT      MORE THAN ONE OPERAND SPECIFIED?
         BO    EDINVOP             YES, INVALID
         MVI   RESWORK+8,1         FLAG ONLY 1 LABEL SPECIFIED
EDLOC2LB L     R2,TOPADDR          POINT TO TOP OF DATA
         LAM   A0,A15,EDZEROS      ZERO ACCESS REGISTERS
         LAM   A2,A2,DSPCALET      LOAD DATA SPACE ALET
         SR    R0,R0               RESET LINE NUMBER
         SAC   512                 SET AR MODE
EDLOC1LP C     R2,RESWORK          FOUND THE REQUESTED LINE?
         BE    EDLOC1GT            YES
         C     R2,RESWORK+4        FOUND THE REQUESTED LINE?
         BE    EDLOC2GT            YES
         A     R0,EDFW1            NO, INCREMENT LINE NUMBER
         ICM   R2,15,FWD(R2)       POINT TO NEXT LINE
         BNZ   EDLOC1LP            GO CHECK IT
         B     EDLOCNOT            SHOULD NOT HAPPEN, BUT...
EDLOC1GT CLI   RESWORK+8,1         REQUEST TO LOCATE THIS LINE?
         BE    EDLOCGOT            YES, GO DO THAT
         CLI   DOUBLE+3,10         SEARCHING IN FORWARD DIRECTION?
         BL    EDLTFRST            YES, GO START SEARCH FROM HERE
         MVI   RESWORK+8,3         FLAG FOUND ONE LABEL ALREADY
         B     EDLOC1LP            NO, KEEP LOOKING FOR OTHER LABEL
EDLOC2GT CLI   RESWORK+8,3         FOUND THIS ONE SECOND?
         BE    EDLTLAST            YES, GO START SEARCH FROM HERE
         MVC   RESWORK+4(4),RESWORK
         ST    R2,RESWORK+4        NO, SWAP TO CORRECT THE ORDER
         CLI   DOUBLE+3,10         SEARCHING IN FORWARD DIRECTION?
         BL    EDLTFRST            YES, GO START SEARCH FROM HERE
         MVI   RESWORK+8,3         NO, FLAG FOUND ONE LABEL ALREADY
         B     EDLOC1LP            KEEP LOOKING FOR OTHER LABEL
         SPACE
EDLOC0LB MVI   RESWORK+8,0         FLAG 0 LABELS SPECIFIED
         CLI   DOUBLE+1,0          CHG/CMD/ERR/LAB/UPD/SPE SPECIFIED?
         BE    EDINVOP             NO
         LH    R14,DOUBLE+2        YES, GET START POINT AND DIRECTION
         LAM   A2,A2,DSPCALET      LOAD DATA SPACE ALET
         SAC   512                 SET AR MODE
         B     EDLBRTAB(R14)       BRANCH TO CORRECT ROUTINE
EDLBRTAB B     EDLNEXT             NEXT DEFAULTED
         B     EDLFIRST            FIRST SPECIFIED
         B     EDLNEXT             NEXT SPECIFIED
         B     EDLPREV             PREV SPECIFED
         B     EDLLAST             LAST SPECIFIED
         SPACE
EDLOCATN MVI   MSG,122             PROCESSING INTERRUPTED
         B     EDLOCGOT
         SPACE
EDLFIRST SR    R0,R0
         L     R2,TOPADDR
         B     EDLTFRST
EDLNEXT  L     R0,LINENMBR
         L     R2,LINEADDR
EDLNEXTL C     R2,RESWORK+4        REACHED LIMIT OF SEARCH?
         BE    EDLOCNOT            YES
         TM    STATUS4,$4ATTN      ATTENTION INTERRUPT?
         BO    EDLOCATN            YES, STOP RIGHT NOW
         ICM   R2,15,FWD(R2)
         BZ    EDLOCNOT
         TM    FLG1(R2),LMSG       MESSAGE LINE?
         BO    EDLTFRST            YES, DO NOT INCREMENT LINE NUMBER
         A     R0,EDFW1
EDLTFRST LH    R14,DOUBLE          GET LOCATE TYPE
EDLTFBRT B     EDLTFBRT(R14)       LOCATE TYPE FORWARD BRANCH TABLE
         B     EDCOMFWD
         B     EDCHGFWD
         B     EDERRFWD
         B     EDUPDFWD
         B     EDLABFWD
         B     EDEXCFWD
         B     EDSPEFWD
EDCOMFWD CLI   ECHO(R2),C'.'       ECHOING A LABEL ON THIS LINE?
         BE    EDLNEXTL            YES, KEEP LOOKING
         CLI   ECHO(R2),C' '       ANY COMMAND PRESENT ON THIS LINE?
         BNH   EDLNEXTL            NO, KEEP LOOKING
         B     EDLOCGOT
EDCHGFWD TM    FLG1(R2),CHGA       CHANGE ALL FLAGGED?
         BNO   EDLNEXTL            NO, KEEP LOOKING
         B     EDLOCGOT
EDUPDFWD TM    FLG1(R2),CHGL       LINE UPDATED THIS SESSION?
         BZ    EDLNEXTL            NO, KEEP LOOKING
         B     EDLOCGOT
EDLABFWD TM    FLG2(R2),LLBL       LINE LABELLED?
         BZ    EDLNEXTL            NO, KEEP LOOKING
         B     EDLOCGOT
EDEXCFWD TM    FLG1(R2),XCLD       LINE EXCLUDED?
         BZ    EDLNEXTL            NO, KEEP LOOKING
         B     EDLOCGOT
EDSPEFWD TM    FLG1(R2),LMSG       LINE IS A NOTICE?
         BZ    EDLNEXTL            NO, KEEP LOOKING
         B     EDLOCGOT
EDERRFWD TM    FLG1(R2),CHGE       CHANGE ERROR FLAGGED?
         BNO   EDLNEXTL            NO, KEEP LOOKING
EDLOCGOT ST    R0,LINENMBR         YES, LOCATE TO IT
         ST    R2,LINEADDR
         NI    FLG1(R2),255-XCLD   ENSURE LOCATED LINE NOT EXCLUDED
         B     EDLOCEX
EDLLAST  LA    R0,1
         A     R0,RECLINES
         L     R2,BTMADDR
         B     EDLTLAST
EDLPREV  L     R0,LINENMBR
         L     R2,LINEADDR
EDLPREVL C     R2,RESWORK          REACHED LIMIT OF SEARCH?
         BE    EDLOCNOT            YES
         TM    STATUS4,$4ATTN      ATTENTION INTERRUPT?
         BO    EDLOCATN            YES, STOP RIGHT NOW
         ICM   R14,15,BAK(R2)
         BZ    EDLOCNOT
         TM    FLG1(R2),LMSG       MESSAGE LINE?
         LR    R2,R14              POINTER VALID SO USE IT
         BO    EDLTLAST            YES, DO NOT DECREMENT LINE NUMBER
         BCTR  R0,0
EDLTLAST LH    R14,DOUBLE          GET LOCATE TYPE
EDLTBBRT B     EDLTBBRT(R14)       LOCATE TYPE BACKWARD BRANCH TABLE
         B     EDCOMBAK
         B     EDCHGBAK
         B     EDERRBAK
         B     EDUPDBAK
         B     EDLABBAK
         B     EDEXCBAK
         B     EDSPEBAK
EDCOMBAK CLI   ECHO(R2),C'.'       ECHOING A LABEL ON THIS LINE?
         BE    EDLPREVL            YES, KEEP LOOKING
         CLI   ECHO(R2),C' '       ANY COMMAND PRESENT ON THIS LINE?
         BNH   EDLPREVL            NO, KEEP LOOKING
         B     EDLOCGOT            YES
EDCHGBAK TM    FLG1(R2),CHGA       CHANGE ALL FLAGGED?
         BNO   EDLPREVL            NO, KEEP LOOKING
         B     EDLOCGOT            YES
EDUPDBAK TM    FLG1(R2),CHGL       LINE UPDATED THIS SESSION?
         BZ    EDLPREVL            NO, KEEP LOOKING
         B     EDLOCGOT            YES
EDLABBAK TM    FLG2(R2),LLBL       LINE LABELLED?
         BZ    EDLPREVL            NO, KEEP LOOKING
         B     EDLOCGOT
EDEXCBAK TM    FLG1(R2),XCLD       LINE EXCLUDED?
         BZ    EDLPREVL            NO, KEEP LOOKING
         B     EDLOCGOT
EDSPEBAK TM    FLG1(R2),LMSG       LINE IS A NOTICE?
         BZ    EDLPREVL            NO, KEEP LOOKING
         B     EDLOCGOT
EDERRBAK TM    FLG1(R2),CHGE       CHANGE ERROR FLAGGED?
         BNO   EDLPREVL            NO, KEEP LOOKING
         B     EDLOCGOT            YES
         SPACE
EDLOCNOT MVI   MSG,116             LINE NOT LOCATED
         SPACE
EDLOCEX  SAC   0                   SET PRIMARY MODE
         L     R14,EDRETSV1        RESTORE RETURN ADDRESS
         BR    R14                 RETURN TO CALLER
         SPACE
         DROP  R10                 EDLOCATE
         SPACE
         DC    0H'0'
         TITLE '  D O W N  '
         USING EDDOWN,R10
EDDOWN   LR    R10,R15             SET LOCAL BASE
         ST    R14,EDRETSV1        SAVE RETURN ADDRESS
         SPACE
         TM    OPD2+6,PRESENT      ARE THERE TOO MANY OPERANDS?
         BO    ED2MANY             YES, INVALID
         L     R0,SCROLL
         TM    STATUS4,$4CSR       CURSOR SCROLLING ACTIVE?
         BNO   EDWNOTCS            NO
EDWNCSR  ICM   R1,15,EDCSRPOS      IS CURSOR IN DATA PART OF SCREEN?
         BZ    EDWNOTCS            NO, CAN'T BE CURSOR SCROLLING
         L     R0,EDCSRROW         YES, GET CURSOR RELATIVE DATA ROW
         TM    STATUS7,EDCOLS      IS LINE 3 FOR STATUS DISPLAY?
         BZ    *+6                 NO
         BCTR  R0,0                YES, ACCOUNT FOR INDICATOR LINE
         TM    EPHEX,1             HEX ON?
         BNO   EDNXCSCK            NO
         SRL   R0,2                YES
         SLL   R0,2                CLEAR LOW 2 BITS
EDNXCSCK LTR   R0,R0               CURSOR ON TOP DATA LINE?
         BP    EDWNOTCS            NO, SCROLL SOME AMOUNT
         L     R0,ISPFPAGE         YES, SO SCROLL DOWN A PAGE
EDWNOTCS DS    0H                  GOT SCROLL AMOUNT FROM CURSOR
         TM    EPHEX,1             HEX ON?
         BNO   EDDNCSOK            NO
         LTR   R0,R0               ZERO VISIBLE LINES?
         BZ    EDDNCSOK            YES, IT WILL STAY ZERO FOR HEX ON
         SRA   R0,2                FOUR SCREEN LINES PER RECORD
         BNZ   EDDNCSOK            NON-ZERO IS GOOD
         LA    R0,1                THERE IS A VISIBLE LINE
EDDNCSOK TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BZ    EDWNRNGE            NO, USE RANGE
         TM    OPD1+6,QUOTED       IS OPERAND QUOTED?
         BO    EDINVOP             YES, INVALID
         LH    R1,OPD1+4           GET LENGTH
         LTR   R1,R1               IS IT NULL STRING?
         BZ    EDINVOP             YES, ERROR
         C     R1,EDFW10           IS LENGTH MORE THAN 9?
         BNL   EDINVOP             YES, ERROR
         L     R14,OPD1            GET ADDRESS OF DATA
         OI    0(R14),C' '         ENSURE UPPER CASE
         CLI   0(R14),C'C'         CURSOR SCROLLING REQUESTED?
         BNE   EDWNFIXD            NO, SCROLL DOWN BY A FIXED AMOUNT
         MVI   OPD1+6,0            YES, OBLITERATE OPERAND TRACE
         B     EDWNCSR             SCROLL DOWN BY CURSOR AMOUNT
EDWNFIXD L     R0,ISPFPAGE         YES, CONSIDER LAST VISIBLE LINE
         TM    EPHEX,1             HEX ON?
         BNO   *+8                 NO
         SRA   R0,2                YES, FOUR SCREEN LINES PER RECORD
         CLI   0(R14),C'P'         FULL PAGE REQUESTED?
         BE    EDWNRNGE            YES
         SRL   R0,1                HALVE IT
         CLI   0(R14),C'H'         HALF PAGE REQUESTED?
         BE    EDWNRNGE            YES
         CLI   0(R14),C'M'         MAXIMUM REQUESTED?
         BE    EDWNBOTM            YES
         TM    OPD1+6,NUMERIC      IS IT NUMERIC?
         BNO   EDINVOP             NO, ERROR
         BCTR  R1,0
         EX    R1,EDNUMPAK
         CVB   R0,DOUBLE
EDWNRNGE L     R2,LINEADDR         POINT TO TOP LINE
         L     R3,LINENMBR         GET TOP LINE NUMBER
         L     R4,EDCSRPOS         GET INPUT CURSOR POSITION
         LAM   A2,A2,DSPCALET      LOAD DATA SPACE ALET
         SAC   512                 SET AR MODE
         LTR   R0,R0               SCROLLING MORE THAN ZERO?
         BNP   EDWNDONE            NO, NO ACTION REQUESTED
         L     R1,SCRNCOLS         GET SCREEN WIDTH
         TM    EPHEX,1             HEX ON?
         BNO   EDWNLOOP            NO
         SLA   R1,2                YES, FOUR SCREEN LINES PER RECORD
EDWNLOOP TM    FLG1(R2),XCLD       IS THIS LINE EXCLUDED?
         BNO   EDWNNEXT            NO
         ICM   R14,15,FWD(R2)      YES, POINT TO THE NEXT LINE
         BZ    EDWNDONE            REACHED BOTTOM - SHOULD NOT HAPPEN
         TM    EPHIDE,1            HIDING EXCLUDED LINES?
         BO    EDWNNONE            YES, NO PROGRESS IF EXCLUDED
         TM    FLG1(R14),XCLD      IS THE NEXT LINE EXCLUDED?
         BNO   EDWNNEXT            NO, SO ON DIFFERENT DISPLAY LINE
EDWNNONE LR    R2,R14              NEXT RECORD BUT SAME DISPLAY LINE
         TM    FLG1(R2),LMSG       MESSAGE LINE?
         BO    EDWNLOOP            YES, DO NOT INCREMENT LINE NUMBER
         A     R3,EDFW1            NO, INCREMENT LINE NUMBER
         B     EDWNLOOP
EDWNNEXT ICM   R14,15,FWD(R2)      POINT TO NEXT LINE
         BZ    EDWNDONE            REACHED BOTTOM SO END OF SCROLL
         LR    R2,R14              POINTER VALID SO USE IT
         TM    FLG1(R2),LMSG       MESSAGE LINE?
         BO    EDWNONE             YES, DO NOT INCREMENT LINE NUMBER
         A     R3,EDFW1            INCREMENT LINE NUMBER
EDWNONE  SR    R4,R1               MOVE CURSOR UP A ROW
         BCT   R0,EDWNLOOP         CONTINUE SCROLLING UNTIL DONE
EDWNDNLP TM    FLG1(R2),XCLD       IS THIS LINE EXCLUDED?
         BNO   EDWNDONE            NO
         TM    EPHIDE,1            HIDING EXCLUDED LINES?
         BZ    EDWNDONE            NO
         L     R2,FWD(R2)          POINT TO NEXT LINE
         TM    FLG1(R2),LMSG       MESSAGE LINE?
         BO    EDWNDNLP            YES, DO NOT INCREMENT LINE NUMBER
         A     R3,EDFW1            INCREMENT LINE NUMBER
         B     EDWNDNLP
         SPACE
EDWNDONE ST    R2,LINEADDR         SAVE NEW TOP LINE ADDRESS
         ST    R3,LINENMBR         SAVE NEW TOP LINE NUMBER
         SAC   0                   SET PRIMARY MODE
         L     R14,EDRETSV1        RESTORE RETURN ADDRESS
         TM    EDFLG2,E2CRU        CSRRECAD UPDATED SINCE DISPLAY?
         BOR   R14                 YES, DO NOT OVERRIDE THAT HERE
         ST    R4,EDCSROUT         SAVE NEW CURSOR POSITION
         TM    STATUS7,EDCOLS      IS LINE 3 FOR STATUS DISPLAY?
         BZR   R14                 NO, RETURN TO CALLER
         CL    R4,SCRNCOLS         YES, CURSOR ON INDICATOR LINE?
         BHR   R14                 NO, RETURN TO CALLER
         MVI   EDCSROUT,X'80'      YES, MOVE CURSOR TO HOME
         BR    R14                 RETURN TO CALLER
         SPACE
EDWNBOTM SAC   0                   SET PRIMARY MODE
         L     R14,EDRETSV1        RESTORE RETURN ADDRESS
         LA    R15,EDBOTTOM        PASS CONTROL TO BOTTOM COMMAND
         DROP  R10                 EDDOWN
         TITLE '  B O T T O M  '
         USING EDBOTTOM,R10
EDBOTTOM LR    R10,R15             SET LOCAL BASE
         ST    R14,EDRETSV1        SAVE RETURN ADDRESS
         SPACE
         XC    EDCSROUT,EDCSROUT   RESET CURSOR POSITION
         L     R0,BTMADDR
         ST    R0,LINEADDR         SHOW FROM BOTTOM OF DATA
         LA    R0,1
         A     R0,RECLINES
         ST    R0,LINENMBR         SET BOTTOM LINE NUMBER
         L     R0,ISPFPAGE         GET VISIBLE LINE COUNT
         BCTR  R0,0                DECREMENT FOR BOTTOM LINE
         TM    EPHEX,1             IS HEX ON?
         BNO   *+8                 NO
         SRA   R0,2                YES, DIVIDE BY FOUR
         SPACE
         LTR   R0,R0               ANY SCROLLING UP TO DO?
         BNPR  R14                 NO, RETURN TO CALLER
         LA    R10,EDUP            YES, SET BASE FOR UP COMMAND ROUTINE
         DROP  R10                 EDBOTTOM
         USING EDUP,R10
         B     EDUPRNGE            SHOW LAST PAGE OF DATA
         TITLE '  U P  '
EDUP     LR    R10,R15             SET LOCAL BASE
         ST    R14,EDRETSV1        SAVE RETURN ADDRESS
         SPACE
         TM    OPD2+6,PRESENT      ARE THERE TOO MANY OPERANDS?
         BO    ED2MANY             YES, INVALID
         L     R0,SCROLL
         TM    STATUS4,$4CSR       CURSOR SCROLLING ACTIVE?
         BNO   EDUPNTCS            NO
EDUPCSR  ICM   R1,15,EDCSRPOS      IS CURSOR IN DATA PART OF SCREEN?
         BZ    EDUPNTCS            NO, CAN'T BE CURSOR SCROLLING
         ICM   R0,15,ISPFPAGE      YES, GET VISIBLE LINE COUNT
         BZ    EDUPNTCS            ZERO - CURSOR SCROLLING IS NO ACTION
         L     R1,EDCSRROW         GET RELATIVE CURSOR LINE NUMBER
         LA    R1,1(,R1)           GET CURSOR LINE NUMBER
         SR    R0,R1               GET LINES TO SCROLL UP
         TM    EPHEX,1             HEX ON?
         BNO   EUPXCSCK            NO
         SRL   R0,2                YES
         SLL   R0,2                CLEAR LOW 2 BITS
EUPXCSCK LTR   R0,R0               CURSOR ON BOTTOM DATA LINE?
         BP    EDUPNTCS            NO, SCROLL SOME AMOUNT
         L     R0,ISPFPAGE         YES, SO SCROLL A PAGE
EDUPNTCS DS    0H                  GOT SCROLL AMOUNT FROM CURSOR
         TM    EPHEX,1             HEX ON?
         BNO   EDUPCSOK            NO
         LTR   R0,R0               ZERO VISIBLE LINES?
         BZ    EDUPCSOK            YES, IT WILL STAY ZERO FOR HEX ON
         SRA   R0,2                FOUR SCREEN LINES PER RECORD
         BNZ   EDUPCSOK            NON-ZERO IS GOOD
         LA    R0,1                THERE IS A VISIBLE LINE
EDUPCSOK TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BZ    EDUPRNGE            NO, USE RANGE
         TM    OPD1+6,QUOTED       IS OPERAND QUOTED?
         BO    EDINVOP             YES, INVALID
         LH    R1,OPD1+4           GET LENGTH
         LTR   R1,R1               IS IT NULL STRING?
         BZ    EDINVOP             YES, ERROR
         C     R1,EDFW10           IS LENGTH MORE THAN 9?
         BNL   EDINVOP             YES, ERROR
         L     R14,OPD1            GET ADDRESS OF DATA
         OI    0(R14),C' '         ENSURE UPPER CASE
         CLI   0(R14),C'C'         CURSOR SCROLLING REQUESTED?
         BNE   EDUPFIXD            NO, SCROLL UP BY A FIXED AMOUNT
         MVI   OPD1+6,0            YES, OBLITERATE OPERAND TRACE
         B     EDUPCSR             SCROLL UP BY CURSOR AMOUNT
EDUPFIXD L     R0,ISPFPAGE         CONSIDER LAST VISIBLE LINE
         TM    EPHEX,1             HEX ON?
         BNO   *+8                 NO
         SRA   R0,2                YES, FOUR SCREEN LINES PER RECORD
         CLI   0(R14),C'P'         FULL PAGE REQUESTED?
         BE    EDUPRNGE            YES
         SRL   R0,1                HALVE IT
         CLI   0(R14),C'H'         HALF PAGE REQUESTED?
         BE    EDUPRNGE            YES
         CLI   0(R14),C'M'         MAXIMUM REQUESTED?
         BE    EDUPTOP             YES
         TM    OPD1+6,NUMERIC      IS IT NUMERIC?
         BNO   EDINVOP             NO, ERROR
         BCTR  R1,0
         EX    R1,EDNUMPAK
         CVB   R0,DOUBLE
EDUPRNGE L     R2,LINEADDR         POINT TO TOP LINE
         L     R3,LINENMBR         GET TOP LINE NUMBER
         L     R4,EDCSRPOS         GET INPUT CURSOR POSITION
         LAM   A2,A2,DSPCALET      LOAD DATA SPACE ALET
         SAC   512                 SET AR MODE
         LTR   R0,R0               SCROLLING MORE THAN ZERO?
         BNP   EDUPDONE            NO, NO ACTION REQUESTED
         L     R1,SCRNCOLS         GET SCREEN WIDTH
         TM    EPHEX,1             HEX ON?
         BNO   EDUPLOOP            NO
         SLA   R1,2                YES, FOUR SCREEN LINES PER RECORD
EDUPLOOP ICM   R14,15,BAK(R2)      POINT TO THE PREVIOUS LINE
         BZ    EDUPDONE            REACHED TOP SO END OF SCROLL
         TM    FLG1(R2),LMSG       MESSAGE LINE?
         LR    R2,R14              POINTER VALID SO USE IT
         BO    EDUPXNXT            YES, DO NOT DECREMENT LINE NUMBER
         BCTR  R3,0                DECREMENT LINE NUMBER
EDUPXNXT TM    FLG1(R2),XCLD       IS THIS LINE EXCLUDED?
         BNO   EDUPONE             NO, SO ON DIFFERENT DISPLAY LINE
         L     R14,BAK(,R2)        YES, POINT TO THE PREVIOUS LINE
         TM    EPHIDE,1            HIDING EXCLUDED LINES?
         BO    EDUPNONE            YES, NO PROGRESS IF EXCLUDED
         TM    FLG1(R14),XCLD      IS THE PREVIOUS LINE EXCLUDED?
         BNO   EDUPONE             NO, SO ON DIFFERENT DISPLAY LINE
EDUPNONE TM    FLG1(R2),LMSG       MESSAGE LINE?
         LR    R2,R14              ANOTHER RECORD BUT SAME DISPLAY LINE
         BO    EDUPXNXT            YES, DO NOT DECREMENT LINE NUMBER
         BCTR  R3,0                NO, DECREMENT LINE NUMBER
         B     EDUPXNXT
EDUPONE  LTR   R4,R4               CURSOR IN DYNAMIC AREA?
         BNP   EDUPDCSR            NO
         AR    R4,R1               YES, MOVE CURSOR DOWN A ROW
EDUPDCSR BCT   R0,EDUPLOOP         CONTINUE SCROLLING UNTIL DONE
         SPACE
EDUPDONE ST    R2,LINEADDR         SAVE NEW TOP LINE ADDRESS
         ST    R3,LINENMBR         SAVE NEW TOP LINE NUMBER
         SAC   0                   SET PRIMARY MODE
         L     R14,EDRETSV1        RESTORE RETURN ADDRESS
         TM    EDFLG2,E2CRU        CSRRECAD UPDATED SINCE DISPLAY?
         BOR   R14                 YES, DO NOT OVERRIDE THAT HERE
         ST    R4,EDCSROUT         SAVE NEW CURSOR POSITION
         BR    R14                 RETURN TO CALLER
         SPACE
EDUPTOP  L     R14,EDRETSV1        RESTORE RETURN ADDRESS
         LA    R15,EDTOP           PASS CONTROL TO TOP COMMAND ROUTINE
         DROP  R10                 EDUP
         TITLE '  T O P  '
         USING EDTOP,R10
EDTOP    LR    R10,R15             SET LOCAL BASE
*        ST    R14,EDRETSV1        SAVE RETURN ADDRESS
         SPACE
         L     R0,TOPADDR
         ST    R0,LINEADDR         SHOW FROM TOP OF DATA
         SR    R0,R0
         ST    R0,LINENMBR         RESET TOP LINE NUMBER
         ST    R0,FNDNUM           RESET LAST-FOUND NUMBER
         ST    R0,FNDOFF           RESET LAST-FOUND OFFSET
         ST    R0,EDCSROUT         RESET CURSOR POSITION
         SPACE
*        L     R14,EDRETSV1        RESTORE RETURN ADDRESS
         BR    R14                 RETURN TO CALLER
         DROP  R10                 EDTOP
         TITLE '  S U B M I T  '
         USING DAPB08,MYDAPB
         USING DAPB18,MYDAPB
         USING EDSUBMIT,R10
EDSUBMIT LR    R10,R15             SET LOCAL BASE
         LA    R15,OPD1            SET FOR ED2MANY
         TM    OPD1+6,PRESENT      ANY OPERANDS?
         BO    ED2MANY             YES, TOO MANY
         ST    R14,EDRETSV1        SAVE RETURN ADDRESS
         SPACE
*         ALLOCATE TEMPORARY DATA SET
         SPACE
         LA    R14,EDVIO           POINT TO PREFERRED UNIT NAME
ESUBREDO XC    MYDAPB,MYDAPB
         MVI   DA08CD+1,X'08'
         LA    R0,44
         STH   R0,EDSUBDSN
         MVI   EDSUBDSN+2,C' '
         MVC   EDSUBDSN+3(43),EDSUBDSN+2
         LA    R0,EDSUBDSN
         ST    R0,DA08PDSN
         MVC   DA08DDN,EDBLNKS
         MVC   DA08UNIT,0(R14)
         MVC   DA08SER,EDBLNKS
         MVC   DA08MNM,EDBLNKS
         MVC   DA08PSWD,EDBLNKS
         MVI   DA08DSP1,DA08NEW
         MVI   DA08DPS2,DA08DEL
         MVI   DA08DPS3,DA08DELE
         MVI   DA08CTL,DA08ABKL
         LA    R0,4080
         ST    R0,DA08BLK
         L     R1,RECLINES         GET RECORD COUNT
         SR    R0,R0               PREPARE FOR DIVIDE
         LA    R15,4080/80         GET BLOCKING FACTOR
         DR    R0,R15
         LA    R1,10(,R1)          ALLOW FOR ROUNDING AND SOME SLACK
         ST    R1,DA08PQTY         SET THE PRIMARY QUANTITY
         XC    MYECB,MYECB
         XASAM24
         LA    R1,MYDAPL
         L     R15,CVTPTR(,0)      CVT
         L     R15,CVTDAIR-CVT(,R15)
         BASR  R14,R15             CALL IKJDAIR
         XASAM31
         LTR   R15,R15
         BZ    EDSUBALC            FILE SUCCESSFULLY ALLOCATED
         CLC   DA08DARC,EDX21C     INVALID UNIT?
         BNE   EDSUBER1            NO, THAT WASN'T THE PROBLEM
         CLI   DA08UNIT,C'V'       HAVE WE ALREADY RETRIED?
         BNE   EDSUBER1            YES, REPORT ERROR
         LA    R14,EDALLDA         NO, POINT TO BACKUP UNIT NAME
         B     ESUBREDO            RETRY WITH ALTERNATE UNIT NAME
         SPACE
*         REPORT ALLOCATION FAILURE
         SPACE
EDSUBER1 MVC   MSG(MSGEALCL),MSGEALC
         STC   R15,DOUBLE
         UNPK  EALCRC(3),DOUBLE(2)
         TR    EALCRC(2),EDHEX-C'0'
         MVI   EALCRC+2,C' '
         UNPK  EALCCTRC(5),DA08CTRC(3)
         TR    EALCCTRC(4),EDHEX-C'0'
         MVI   EALCCTRC+4,C' '
         UNPK  EALCDARC(5),DA08DARC(3)
         TR    EALCDARC(4),EDHEX-C'0'
         OI    STATUS7,$7BELL      SOUND BELL FOR ERROR MESSAGE
         B     EDITCYCL            GO DISPLAY THE MESSAGE
         SPACE
*         SET UP SUBMIT COMMAND
         SPACE
EDSUBALC L     R1,OPD0             POINT TO COMMAND TEXT
         MVC   DOUBLE,0(R1)        SAVE IT
         MVI   CMDAREA,C' '
         MVC   CMDAREA+1(L'CMDAREA-1),CMDAREA
         MVC   CMDAREA(12),=CL12'TSO SUBMIT '''
         CLI   DOUBLE+1,C'U'       'SUBMIT' OR 'SUB'?
         BE    EDSUBAL2            YES, CORRECT COMMAND SET
         MVC   CMDAREA+4(6),=CL6'%REVSB'
         OI    STATUS11,$11ST      STAY IN FULLSCREEN MODE THROUGHOUT
EDSUBAL2 MVC   CMDAREA+12(44),EDSUBDSN+2    LOAD DATA SET NAME
         LH    R1,EDSUBDSN         GET LENGTH OF DATA SET NAME
         LA    R1,CMDAREA+12(R1)   POINT PAST DATA SET NAME
         MVI   0(R1),QUOTE         SUPPLY TRAILING QUOTE
         LA    R0,CMDAREA          POINT TO GENERATED COMMAND
         SR    R1,R0               GET COMMAND LENGTH CODE
         ST    R1,CMDLEN           SAVE COMMAND STRING LENGTH CODE
         SPACE
*         COPY IN-STORAGE DATA TO TEMPORARY DATA SET
         SPACE
         MVI   SUBREC,C' '         BLANK BUFFER IN CASE RECORDS SHORT
         MVC   SUBREC+1(79),SUBREC
         LA    R7,80               GET EXPECTED RECORD LENGTH
         C     R7,MAXRECSZ         LONGER THAN ACTUAL RECORD LENGTH?
         BNH   *+8                 NO, NEED NOT HAVE BLANKED BUFFER
         L     R7,MAXRECSZ         YES, LUCKILY BUFFER IS BLANKED
         BCTR  R7,0                DECREMENT FOR EXECUTE
         MVC   SUBDCB,EDSUBDCB
         MVC   SUBDDNAM,DA08DDN
         MVC   DOUBLE,=C'EDOPSBIN' SET FLAG FOR DUMP
         MVI   OPEND,X'80'         OPEN THE OUTPUT DCB
         OPEN  (SUBDCB,OUTPUT),MF=(E,OPEND)
         XC    DOUBLE,DOUBLE       RESET DUMP FLAG
         LAM   A0,A15,EDZEROS      ZERO ACCESS REGISTERS
         LAM   A3,A3,DSPCALET      LOAD DATA SPACE ALET
         L     R3,TOPADDR          POINT TO TOP OF DATA
         SAC   512                 SET AR MODE
EDSUBLP  L     R3,FWD(,R3)         POINT TO FIRST RECORD
         ICM   R0,15,FWD(R3)       POINT TO NEXT RECORD
         BZ    EDSUBCLS            BOTTOM OF DATA SO ALL WRITTEN
         TM    FLG1(R3),LMSG       MESSAGE LINE?
         BO    EDSUBLP             YES, SKIP IT
         EX    R7,EDSUBCPY         COPY RECORD IMAGE
         SAC   0                   SET PRIMARY MODE
         XASAM24
         PUT   SUBDCB,SUBREC       WRITE OUT JOB STREAM RECORD
         XASAM31
         SAC   512                 SET AR MODE
         B     EDSUBLP             GO PROCESS NEXT RECORD
EDSUBCPY MVC   SUBREC(0),CTLLEN(R3)        <<< EXECUTED >>>
         SPACE
EDSUBCLS SAC   0                   SET PRIMARY MODE
         MVI   CLOSED,X'80'
         CLOSE (SUBDCB),MF=(E,CLOSED)
         FREEPOOL SUBDCB           FREE SYSTEM-ACQUIRED DCB STORAGE
         SPACE
*         SUBMIT THE TEMPORARY DATA SET
         SPACE
         OI    STATUS4,$4CMD       TELL REVCOMM TO SKIP TERMINAL I/O
         L     R15,EDCOMMAD        NO PARAMETER LIST PASSED
         BASR  R14,R15             PROCESS COMMAND STRING
         NI    STATUS11,255-$11ST  RESET FLAG IN CASE IT WAS SET
         SPACE
*         DEALLOCATE THE TEMPORARY DATA SET
         SPACE
         XC    MYDAPB,MYDAPB
         MVI   DA18CD+1,X'18'
         LA    R0,EDSUBDSN
         ST    R0,DA18PDSN         FREE DANGLING ALLOC BY SUBMIT
         MVC   DA18DDN,DCBDDNAM    DDNAME WILL NOW BE IGNORED
         MVC   DA18MNM,EDBLNKS     MEMBER NAME
         MVC   DA18SCLS,EDBLNKS    SYSOUT CLASS IS 2-BYTE FIELD
         XC    MYECB,MYECB
         XASAM24
         LA    R1,MYDAPL
         L     R15,CVTPTR(,0)      CVT
         L     R15,CVTDAIR-CVT(,R15)
         BASR  R14,R15             CALL IKJDAIR
         XASAM31
         SPACE
EDSUBEX  L     R14,EDRETSV1        RESTORE RETURN ADDRESS
         BR    R14                 RETURN TO CALLER
         DROP  R10                 EDSUBMIT
         SPACE
         DC    0F'0'
         PRINT NOGEN
EDSUBDCB DCB   DSORG=PS,MACRF=PM,DDNAME=-SUBMIT-,                      +
               RECFM=FB,LRECL=80,BLKSIZE=4080,BUFNO=1
SUBDCB_L EQU   *-EDSUBDCB          QSAM DCB LENGTH
         PRINT GEN
         SPACE
         DC    0D'0'
         LTORG
         DC    0H'0'
         TITLE '  C U T  '
         USING EDCUT,R10
EDCUT    LR    R10,R15             SET LOCAL BASE
         SPACE
         TM    OPD2+6,PRESENT      TOO MANY OPERANDS PRESENT?
         BO    ED2MANY             YES
         SPACE
         MVI   MSG,110             COMMAND CONFLICT
         ICM   R0,15,COUNTER2      ANY TARGET LINE COMMANDS?
         BNZ   EDITCYCL            YES, COMMAND CONFLICT
         SPACE
         TM    OPD1+6,PRESENT      ANY OPERANDS PRESENT?
         BNO   EDCUT0              NO, GO CLEAR CLIPBOARD
         L     R15,OPD1            YES, POINT TO OPERAND
         CLI   0(R15),C'R'         RESET/REPLACE?
         BE    EDCUT0              YES, GO CLEAR CLIPBOARD
         CLI   0(R15),C'A'         ADD/APPEND?
         BNE   EDINVOP             NO, INVALID OPERAND
         ICM   R0,15,RECLINES      ANY DATA RECORDS PRESENT?
         BZR   R14                 NO, SO NO DATA
         MVI   MSG,139             NO LINES SELECTED
         ICM   R0,15,COUNTER1      ANY SOURCE LINE COMMANDS?
         BZ    EDITCYCL            NO, SO NO DATA
         B     EDCUTGO             YES, KEEP EXISTING DATA
         SPACE
EDCUT0   ST    R14,EDRETSV1        SAVE RETURN ADDRESS
         FREEMAIN RC,SP=38         FREE THE CLIPBOARD STORAGE
         L     R15,RECURS@         AND ZERO THE POINTERS TO IT
         XC    RCRSL+8(8,R15),RCRSL+8(R15)
         MVI   MSG,182             CLIPBOARD EMPTIED
         L     R14,EDRETSV1        RESTORE RETURN ADDRESS
         ICM   R0,15,COUNTER1      ANY SOURCE LINE COMMANDS?
         BZR   R14                 NO, SO NO DATA
         ICM   R0,15,RECLINES      ANY DATA RECORDS PRESENT?
         BZR   R14                 NO, SO NO DATA
EDCUTGO  EQU   *
         OI    EDFLG5,E5CUT        FLAG 'CUT' IS ACTIVE
         LA    R15,EDREPL          GET NEW LOCAL BASE ORIGIN
         B     EDREPL+4            BRANCH TO COMMON CODE
         DROP  R10                 EDCUT
         TITLE '  C R E A T E  '
         USING EDCREATE,R10
EDCREATE OI    STATUS12,$12CRE     FLAG 'CREATE' IS ACTIVE
         OI    STATUS10,$10LIKE    CAN COPY DATA SET ATTRIBUTES
         LR    R10,R15             SET LOCAL BASE
         LA    R15,EDREPL          GET NEW LOCAL BASE ORIGIN
         B     EDREPL+4            BRANCH TO COMMON CODE
         DROP  R10                 EDCREATE
         TITLE '  R E P L A C E  '
         USING EDREPL,R10
EDREPL   OI    STATUS12,$12REP     FLAG 'REPLACE' IS ACTIVE
         LR    R10,R15             SET LOCAL BASE
         ST    R14,EDRETSV1        SAVE RETURN ADDRESS
         SPACE
         TM    EDFLG5,E5CUT        'CUT' ACTIVE?
         BO    EDREPLIT            YES, GO CHECK SOURCE LOCATION
         SPACE
*         PERFORM OPERAND VALIDATION
         SPACE
         XC    REPLOAIA,REPLOAIA   CLEAR OAIA
         USING OAIAREA,REPLOAIA
         TM    OPD1+6,PRESENT      ANY OPERANDS PRESENT?
         BNO   EDREPLIT            NO, PROCEED
         TM    OPD2+6,PRESENT      TOO MANY OPERANDS PRESENT?
         BO    ED2MANY             YES
         TM    OPD1+6,QUOTED       IS OPERAND QUOTED?
         BO    EDINVOP             YES, INVALID
         LH    R1,OPD1+4           GET LENGTH
         LTR   R1,R1               IS IT NULL STRING?
         BNP   EDINVOP             YES, INVALID
         C     R1,EDFW8            IS LENGTH MORE THAN 8?
         BH    EDINVOP             YES, INVALID
         MVI   MSG,38              DATA SET IS NOT PARTITIONED
         TM    DS1DSORG,DS1DSGPO   PARTITIONED ORGANISATION?
         BNO   EDREPLEX            NO, RETURN WITH THE BAD NEWS
         MVC   BLDLNAME,EDBLNKS
         L     R14,OPD1            GET ADDRESS OF DATA
         BCTR  R1,0                DECREMENT FOR EXECUTE
         EX    R1,EDMEMMVC         LOAD THE MEMBER NAME
         MVC   OAIADDN,$DDNAME     COPY THE DATA DEFINITION NAME
         MVC   OAIADSN,DSNAIM+2    COPY THE DATA SET NAME
         MVC   OAIAMEM,BLDLNAME    COPY THE MEMBER NAME
         MVC   OAIAUCB,$UCBAD      COPY THE UCB ADDRESS
         OI    STATUS12,$12ENQ     NO ALLOCATION NEEDED
         SPACE
*         VERIFY REPLACE SOURCE LOCATION IS KNOWN
         SPACE
EDREPLIT MVI   MSG,110             COMMAND CONFLICT
         ICM   R0,15,COUNTER2      ANY TARGET LINE COMMANDS?
         BNZ   EDREPLEX            YES, COMMAND CONFLICT
         MVI   MSG,139             NO LINES SELECTED
         C     R0,COUNTER1         ANY SOURCE LINE COMMANDS?
         BE    EDREPLEX            NO, SO NO DATA
         C     R0,RECLINES         ANY DATA RECORDS PRESENT?
         BE    EDREPLEX            NO, SO NO DATA
         SPACE
*         FREE REPLACE SOURCE COMMAND ELEMENT AND CLEAR ECHO
         SPACE
         MVI   MSG,110             COMMAND CONFLICT
         CLC   COUNTER1,EDFW1      ONE SOURCE NOMINATED?
         BNE   EDREPLEX            NO
         ICM   R1,15,CMDANKOR      POINT TO FIRST COMMAND ELEMENT
         BZ    EDREPLEX            SHOULD NOT HAPPEN
         CLI   CMDECODE(R1),C'C'   COPY?
         BNE   EDREPLEX            NO
         LAM   A0,A15,EDZEROS      ZERO ACCESS REGISTERS
         LAM   A3,A3,DSPCALET      LOAD DATA SPACE ALET
         TM    CMDEFLAG(R1),CMDE2LTR
         BNO   EDREPSRC            NOT A BLOCK COMMAND SO GO DO IT
         LR    R5,R1               POINT TO BLOCK START ELEMENT
         ICM   R1,15,CMDENEXT(R5)  POINT TO SECOND COMMAND ELEMENT
         BZ    EDREPLEX            SHOULD NOT HAPPEN
         TM    CMDEFLAG(R1),CMDE2LTR
         BNO   EDREPLEX            NOT A BLOCK COMMAND - MISMATCH
         CLI   CMDECODE(R1),C'C'   COPY?
         BNE   EDREPLEX            NO, COMMAND MISMATCH
         MVC   EDIRFIN(4,R5),EDIRFIN(R1)
         MVC   EDIRLST(4,R5),EDIRLST(R1)
         SAC   512                 SET AR MODE
         L     R3,EDIRREC(,R1)     POINT TO FIRST RECORD OF BLOCK END
         MVC   ECHO(6,R3),EDBLNKS  CLEAR LINE'S LINE COMMAND
         SAC   0                   SET PRIMARY MODE
         MVC   CMDENEXT(4,R5),CMDENEXT(R1)
         LA    R0,CMDESIZE         GET COMMAND ELEMENT SIZE
         FREEMAIN RU,LV=(0),SP=12,A=(1)
         LR    R1,R5               POINT TO TOTAL BLOCK COMMAND ELEMENT
EDREPSRC L     R3,EDIRREC(,R1)     POINT TO FIRST RECORD TO COPY
         MVC   EDENQPRM(4),EDIRFIN(R1)
         SAC   512                 SET AR MODE
         MVC   ECHO(6,R3),EDBLNKS  CLEAR LINE'S LINE COMMAND
         SAC   0                   SET PRIMARY MODE
         LA    R0,CMDESIZE         GET COMMAND ELEMENT SIZE
         FREEMAIN RU,LV=(0),SP=12,A=(1)
         XC    CMDANKOR,CMDANKOR   ALL LINE COMMAND ELEMENTS FREED
         SPACE
         TM    EDFLG5,E5CUT        'CUT' ACTIVE?
         BO    EDREPCUT            YES, PROCEED
         SPACE
*         ALLOCATE AND ENQ OUTPUT DATA SET TO BE REPLACED
*
*                                  ALLOCATION WILL INCLUDE MEMBER NAME,
*                                         BUT THIS IS IGNORED BY BPAM.
         SPACE
         CLI   ALCDSSAV,0          DATA SET NAME ALREADY PRIMED?
         BNE   EDALCODS            YES, CONTINUE
         MVI   ALCDSSAV,QUOTE      NO, PRIME WITH CURRENT DATA SET NAME
         LA    R0,$DSNAME+2
         LH    R1,$DSNAME
         LA    R14,ALCDSSAV+1
         LR    R15,R1
         MVCL  R14,R0
         MVI   0(R14),QUOTE
EDALCODS MVI   MSG,54              MEMBER IN USE
         CLC   OAIAMEM,$MEMBER     TRYING TO OVERLAY EDITED MEMBER?
         BE    EDREPLEX            YES, DON'T EVEN TRY IT
         MVI   MSG,0               NO, CLEAR MESSAGE STATUS
         LA    R1,REPLOAIA         POINT TO OAIA
         L     R15,EDALCOAD        POINT TO ENQ/ALLOCATION ROUTINE
         BASR  R14,R15             ALLOCATE OUTPUT FILE
         LTR   R15,R15             PROCEED WITH OUTPUT?
         BNZ   EDREPLEX            NO, GO PERFORM CLEANUP
         SPACE
*         OPEN THE OUTPUT DATA SET TO BE REPLACED
         SPACE
         L     R15,EDITREA@
         LA    R1,EDPDSDCB-EDITREAD(,R15)
         CLI   OAIAMEM,C' '        PARTITIONED ORGANISATION?
         BH    *+8                 YES, HAVE RIGHT DCB
         LA    R1,EDSEQDCB-EDITREAD(,R15)
         MVC   SUBDCB(SEQDCBL),0(R1)
         MVC   SUBDDNAM,OAIADDN    SET THE DDNAME
         TM    STATUS10,$10NEW     NEW DATA SET?
         BNO   EDRPOPEN            NO
         MVC   SUBRECFM,DCBRECFM   COPY RECFM
         MVC   SUBLRECL,DCBLRECL   COPY LRECL
EDRPOPEN MVI   OPEND,X'80'         OPEN THE OUTPUT DCB
         LA    R0,EDIOXLST         POINT TO RELEVANT EXIT LIST
         STCM  R0,7,SUBEXLSA       SET IT INTO THE DCB
         OPEN  (SUBDCB,OUTPUT),MF=(E,OPEND)
         ZAP   DOUBLE,EDDEC0       RESET RECORD COUNT
         TM    STATUS,STABEND      OPEN ABEND?
         BO    EDREPDEQ            YES, GO DEALLOCATE THE FILE
         MVI   MSG,77              REQUEST ABORTED - RECFM NOT F OR V
         TM    SUBRECFM,DCBRECU    SUPPORTED RECORD FORMAT?
         BNM   EDRPCLOS            NO, GO CLOSE FILE
         MVI   MSG,0               RESET MESSAGE STATUS
         LH    R0,SUBBLKSI         YES, GET THE BLOCK SIZE
         LTR   R0,R0               POSITIVE?
         BP    *+8                 YES, GOOD
         L     R0,EDBUFSIZ         NO, USE SOURCE BLOCK SIZE
         CH    R0,SUBLRECL         SMALLER THAN LRECL?
         BL    EDRPCLOS            YES, CAN'T HANDLE IT
         ST    R0,REPLBLK2         SAVE IT SOMEWHERE
         C     R0,EDBUFSIZ         COMPARE WITH BUFFER SIZE
         BNH   *+8                 BLOCK WILL FIT IN BUFFER
         L     R0,EDBUFSIZ         REDUCE OUTPUT MAXIMUM BLOCK SIZE
         ST    R0,REPLBLK1         SAVE IT SOMEWHERE
         STH   R0,SUBBLKSI         PERHAPS TELL EXCP ABOUT SHORT BLOCKS
         MVI   SYNADSW,0           RESET I/O ERROR FLAG
         L     R4,EDBUFADR         POINT TO THE WRITE BUFFER
         SAC   512                 SET AR MODE
         L     R3,BAK(,R3)         POINT TO RECORD BEFORE 1ST TO WRITE
         TM    SUBRECFM,DCBRECF    FIXED-LENGTH RECORDS?
         BNO   EDRPBFIT            NO, GO BUFFER A RECORD
         LH    R0,SUBLRECL         YES, GET LRECL
         LTR   R0,R0               POSITIVE?
         BP    *+8                 YES, GOOD
         L     R0,MAXRECSZ         NO, COPY SOURCE LRECL
         SR    R14,R14             CLEAR FOR DIVIDE
         L     R15,REPLBLK1        GET MAXIMUM BLOCK SIZE
         DR    R14,R0              GET MAXIMUM BLOCKING FACTOR
         MR    R14,R0              ENSURE BLKSIZE IS MULTIPLE OF LRECL
         ST    R15,REPLBLK1        SAVE THE RESULT
         STH   R15,SUBBLKSI        PERHAPS TELL EXCP ABOUT SHORT BLOCKS
         B     EDRPBFIT            GO BUFFER A RECORD
         SPACE
*         WRITE A BLOCK THAT HAS BEEN FILLED WITH EDIT SESSION DATA
         SPACE
EDRPWRIT SAC   0                   SET PRIMARY MODE
         L     R4,EDBUFADR         POINT TO THE WRITE BUFFER
         XASAM24
         WRITE DYNDECBW,SF,SUBDCB,(R4),'S',MF=E
         XASAM31
         TM    STATUS,STABEND      ABEND?
         BO    EDRPCLOS            YES
         XASAM24
         CHECK DYNDECBW            WAIT FOR WRITE TO FINISH
         XASAM31
         TM    STATUS,STABEND      ABEND?
         BO    EDRPCLOS            YES
         SAC   512                 SET AR MODE
         CLI   SYNADSW,0           ANY I/O PROBLEMS?
         BE    EDRPDON#            NO, CONTINUE
         SAC   0                   SET PRIMARY MODE
EDRPIOER MVI   MSG,112             I/O ERROR
         LA    R1,SYNADMSG         POINT TO ERROR MESSAGE
         LA    R0,L'SYNADMSG       GET THE MESSAGE LENGTH
         TPUT  (1),(0),R           ISSUE LINE MODE MESSAGE
         B     EDRPCLOS            CLOSE OUTPUT FILE
         SPACE
EDRPBFIT TM    SUBRECFM,DCBRECV    VARIABLE-LENGTH RECORDS?
         BNO   EDRPNBDW            NO, NO BDW TO SET UP
         LA    R0,4                GET LENGTH OF BDW
         STH   R0,0(,R4)           SET LENGTH IN BDW
         STCM  R0,12,2(R4)         CLEAR REST OF BDW
         AR    R4,R0               POINT PAST BDW
         SR    R1,R0               ACCOUNT FOR BDW OCCUPANCY
EDRPNBDW L     R15,MAXRECSZ        GET THE RECORD'S LENGTH
         LR    R0,R15              GET THE RECORD'S LENGTH
         SPACE
*         FILL A BLOCK WITH RECORD DATA FROM THE EDIT SESSION
         SPACE
EDRPPTLP C     R3,EDENQPRM         JUST WROTE LAST RECORD?
         BE    EDRPLAST            YES, GO WRITE THE LAST BLOCK
         L     R3,FWD(,R3)         POINT TO THE NEXT DATA RECORD
         ICM   R0,15,FWD(R3)       END OF DATA?
         BZ    EDRPLAST            YES, GO WRITE THE LAST BLOCK
         LAE   R14,CTLLEN(,R3)     POINT TO THE RECORD'S DATA
         L     R15,MAXRECSZ        GET THE RECORD'S LENGTH
         LR    R0,R15              GET THE RECORD'S LENGTH
         TM    EPNUM,1             NUMBER ON?
         BNO   EDRP#OK             NO
         TM    EDFLG1,SAVEY        HAS ANYTHING CHANGED?
         BNO   EDRP#OK             NO
         AP    DOUBLE,EDDEC100     INCREMENT RECORD SEQUENCE NUMBER
         OI    DOUBLE+7,X'0F'      ENSURE UNPACKED RESULT IS NUMERIC
         AR    R14,R0              POINT PAST RECORD'S DATA
         S     R14,EDFW8           POINT TO SEQUENCE NUMBER FIELD
         UNPK  0(8,R14),DOUBLE     LOAD RECORD SEQUENCE NUMBER
         TM    EPNUM,2             NUMBER ON COBOL?
         BNO   EDRPDON#            NO
         MVC   CTLLEN(6,R3),0(R14) YES, LOAD COBOL SEQUENCE NUMBER
EDRPDON# LAE   R14,CTLLEN(,R3)     POINT TO THE RECORD'S DATA (AGAIN)
EDRP#OK  TM    SUBRECFM,DCBRECV    VARIABLE-LENGTH RECORDS?
         BNO   EDRPRCOK            NO, HAVE THE RECORD'S DETAILS
         AR    R14,R15             POINT PAST THE RECORD'S DATA
EDRPTRNC BCTR  R14,0               POINT TO PREVIOUS DATA BYTE
         CLI   0(R14),C' '         TRAILING BLANK?
         BNE   EDRPPRES            NO, HAVE RECORD LENGTH
         BCT   R15,EDRPTRNC        YES, CONTINUE TRUNCATION
         LA    R15,1               BLANK RECORD SO WRITE ONE BLANK
EDRPPRES TM    EPPRES,1            IS PRESERVE ON?
         BNO   EDRPVARL            NO, USE THIS LENGTH
         CLM   R15,3,OLEN(R3)      YES, SHORTER THAN MIMINUM LENGTH?
         BNL   EDRPVARL            NO, USE THIS LENGTH
         ICM   R15,3,OLEN(R3)      YES, USE THE ORIGINAL RECORD LENGTH
EDRPVARL LAE   R14,CTLLEN(,R3)     POINT TO THE RECORD'S DATA (AGAIN)
         LA    R0,4(,R15)          COUNT RDW IN RECORD LENGTH
EDRPRCOK TM    SUBRECFM,DCBRECF    FIXED-LENGTH RECORDS?
         BO    EDRPRECL            YES, USE THE OUTPUT RECORD LENGTH
         CH    R0,SUBLRECL         TOO LONG TO WRITE IT ALL?
         BNH   *+8                 NO
EDRPRECL LH    R0,SUBLRECL         USE MAXIMUM ALLOWABLE RECORD LENGTH
         LR    R1,R4               POINT TO WHERE RECORD WOULD GO
         AR    R1,R0               POINT PAST END OF RECORD
         S     R1,EDBUFADR         GET PROSPECTIVE BLOCK LENGTH
         C     R1,REPLBLK1         WILL RECORD FIT IN THIS BLOCK?
         BH    EDRPWRIT            NO, GO WRITE THE CURRENT BLOCK
         TM    SUBRECFM,DCBRECV    VARIABLE-LENGTH RECORDS?
         BNO   EDRPLDRC            NO, GO LOAD THE RECORD
         STCM  R0,3,0(R4)          SET THE LENGTH IN THE RDW
         STCM  R0,12,2(R4)         CLEAR THE REST OF THE RDW
         LA    R4,4(,R4)           POINT PAST THE RDW
         S     R0,EDFW4            SUBTRACT LENGTH OF RDW
EDRPLDRC LR    R5,R0               COPY OUTPUT RECORD DATA LENGTH
         ICM   R15,8,EDBLNKS       SET PAD CHARACTER
         MVCL  R4,R14              LOAD THE RECORD'S DATA INTO BUFFER
         LA    R0,1
         A     R0,COUNTER2         INCREMENT RECORD COUNT
         ST    R0,COUNTER2
         TM    SUBRECFM,DCBRECV    VARIABLE-LENGTH RECORDS?
         BNO   EDRPPTLP            NO, GO PUT THE NEXT RECORD
         LR    R0,R4               POINT PAST CURRENT DATA IN BLOCK
         L     R5,EDBUFADR         POINT TO THE BLOCK
         SR    R0,R5               GET THE CURRENT BLOCK LENGTH
         STH   R0,0(,R5)           SET IT IN THE BDW
         B     EDRPPTLP            GO PUT THE NEXT RECORD
         SPACE
*         HANDLE WRITING A POSSIBLE LAST BLOCK
         SPACE
EDRPLAST SAC   0                   SET PRIMARY MODE
         L     R2,EDBUFADR         POINT TO THE WRITE BUFFER
         CR    R4,R2               IS THE BLOCK EMPTY?
         BNH   EDRPSTOW            YES, DO NOT WRITE ANOTHER BLOCK
         TM    SUBRECFM,DCBRECV    VARIABLE-LENGTH RECORDS?
         BNO   EDRPSHRT            NO, GO WRITE THE SHORT BLOCK
         CLC   0(2,R2),EDFW4+2     IS THE BDW THE ONLY OCCUPANT?
         BNH   EDRPSTOW            YES, DO NOT WRITE ANOTHER BLOCK
         SPACE
EDRPSHRT LH    R5,SUBBLKSI         SAVE ORIGINAL BLOCK SIZE
         SR    R4,R2               GET THE SHORT BLOCK SIZE
         STH   R4,SUBBLKSI         SET THE SHORT BLOCK SIZE
         XASAM24
         WRITE DYNDECBW,SF,SUBDCB,(R2),'S',MF=E
         XASAM31
         TM    STATUS,STABEND      ABEND?
         BO    EDRPCLOS            YES
         XASAM24
         CHECK DYNDECBW            WAIT FOR WRITE TO FINISH
         XASAM31
         STH   R5,SUBBLKSI         RESTORE ORIGINAL BLOCK SIZE
         TM    STATUS,STABEND      ABEND?
         BO    EDRPCLOS            YES
         CLI   SYNADSW,0           ANY I/O PROBLEMS?
         BNE   EDRPIOER            YES, REPORT DETAILS
         SPACE
*         UPDATE THE DIRECTORY ENTRY
         SPACE
EDRPSTOW XC    REPLSTOW,REPLSTOW   RESET STOW RC AND DATA AREA
         CLI   OAIAMEM,C' '        PARTITIONED ORGANISATION?
         BNH   EDRPCLOS            NO, SKIP STOW PROCESSING
         MVC   REPLNAME,OAIAMEM    MEMBER NAME
         MVI   REPLINDC,15         USERDATA HALFWORD COUNT
         MVI   REPLVER,1           VERSION
**       MVI   REPLLVL,0           LEVEL
**       MVI   REPLFLG,0           FLAGS
         TIME  DEC                 GET CURRENT TIME AND DATE
         STCM  R0,2,REPLSEC        SET TIME SECOND
         STCM  R1,15,REPLCRE            AND DATES
         STCM  R1,15,REPLUPD
         STCM  R0,12,REPLHOUR           AND HOUR AND MINUTE
         L     R1,REVPSCB          POINT TO THE PSCB
         USING PSCB,R1
         MVC   REPLUID,PSCBUSER
         MVC   REPLBLNK,EDBLNKS
         CLI   PSCBUSER,C'>'       8-CHARACTER USERID?
         BNE   *+10                NO
         MVC   REPLUID(8),PSCB+84  YES, LOAD PSCBUID8
         DROP  R1                  PSCB
         MVC   REPLSIZE,COUNTER2+2
         ICM   R0,3,COUNTER2       MORE THAN 65535?
         BZ    EDRPSTAT            NO
         MVC   REPLSIZE,=X'FFFF'   YES, LOAD MAXIMUM
         MVC   REPXSIZE,COUNTER2   SET ACTUAL COUNT IN EXTENSION
         MVC   REPXINIT,COUNTER2
         MVI   REPLFLG,EDBLXSTA    FLAG EXTENDED STATISTICS
         MVI   REPLINDC,20         USERDATA HALFWORD COUNT
EDRPSTAT MVC   REPLINIT,REPLSIZE
         SPACE
*         WRITE THE DIRECTORY ENTRY TO THE DIRECTORY
         SPACE
EDSTOWRP TM    STATUS12,$12CRE     NEED TO CREATE A NEW MEMBER?
         BO    EDSTOWAD            YES
         STOW  SUBDCB,REPLNAME,R   NO
         B     EDAFTSTO
EDSTOWAD STOW  SUBDCB,REPLNAME,A
EDAFTSTO ST    R15,REPLRETC        SAVE THE RETURN CODE
         CLI   REPLRETC+3,4        DUPLICATE MEMBER NAME?
         BE    EDRPDUPL            YES, MUST HAVE BEEN 'CREATE'
         CLI   REPLRETC+3,12       SUCCESS?
         BL    EDRPCLOS            YES, GO CLOSE THE FILE
*        CLI   REPLRETC+3,12       LACK OF ROOM IN DIRECTORY?
         BH    EDRPSTBD            NO
         CLI   REPLINDC,0          TRYING TO STORE STATS?
         MVI   REPLINDC,0          PREPARE FOR RETRY
         BNE   EDSTOWRP            YES, RETRY WITHOUT STATS
         SPACE
*         HANDLE A PROBLEM WITH STOW
         SPACE
EDRPSTBD MVI   MSG,117             PDS DIRECTORY FULL
         MVC   BLDLNAME,REPLNAME   SAVE MEMBER NAME FOR REVMSGS
         CLI   REPLRETC+3,12       CORRECT GUESS?
         BE    EDRPCLOS            YES, INSUFFICIENT SPACE IN DIRECTORY
         MVI   MSG,112             NO, PROBABLY SOME SORT OF I/O ERROR
         B     EDRPCLOS
EDRPDUPL MVI   MSG,142             MEMBER NAME ALREADY EXISTS
         SPACE
*         CLOSE THE FILE AFTER SAVE
         SPACE
EDRPCLOS MVI   CLOSED,X'80'        TELL CLOSE ABOUT ONE DCB
         CLOSE (SUBDCB),MF=(E,CLOSED)
         ICM   R0,3,MSG            ANY MESSAGE PRIMED?
         BNZ   EDREPDEQ            YES, DO NOT OVERLAY IT
         L     R0,COUNTER2         GET WRITTEN RECORD COUNT
         CVD   R0,DOUBLE           SHOW THE NUMBER OF LINES WRITTEN
         MVC   MSG+2(10),EDED9Z
         LA    R1,MSG+11           JUST IN CASE COUNT IS ZERO
         MVI   MSG+10,X'21'        JUST IN CASE COUNT IS ZERO
         EDMK  MSG+2(10),DOUBLE+3
         LA    R0,MSG+2
         LR    R15,R1
         SR    R15,R0              GET LEADING BLANK COUNT
         MVC   MSG+2(10),0(R1)     SHUFFLE UP NUMBER AND BLANK
         LA    R2,MSG+12           POINT PAST WHERE NUMBER ENDED
         SR    R2,R15              POINT PAST WHERE NUMBER ENDS
*                                  LOAD MESSAGE TEXT AFTER NUMBER
         MVC   0(16,R2),=C' LINE(S) WRITTEN'
         LA    R2,16(,R2)          POINT PAST MESSAGE TEXT
         LA    R0,MSG+2            POINT TO NUMBER
         SR    R2,R0               GET TOTAL MESSAGE TEXT LENGTH
         STH   R2,MSG              SET THE CORRECT MESSAGE LENGTH
         TM    STATUS10,$10CAP     CAPS ON?
         BO    *+10                YES, LEAVE MESSAGE IN UPPER CASE
         TR    MSG+4(24),EDTUNKAP  NO, SHOW SOME MIXED CASE
         CLI   OAIAMEM,C' '        PARTITIONED ORGANISATION?
         BNH   EDREPDEQ            NO, GO PERFORM DEALLOCATION
         LA    R2,MSG+2(R2)        YES, POINT PAST MESSAGE SO FAR
         MVC   0(10,R2),=C' CREATING '
         LA    R1,10
         CLI   REPLRETC+3,8        DID STOW CREATE A NEW MEMBER?
         BE    EDRPSTWD            YES
         TM    STATUS12,$12CRE     'CREATE' REQUESTED?
         BO    EDRPSTWD            YES
         MVC   1(10,R2),=C'REPLACING '
         LA    R1,11
EDRPSTWD TM    STATUS10,$10CAP     CAPS ON?
         BO    *+10                YES, LEAVE MESSAGE IN UPPER CASE
         TR    1(9,R2),EDTUNKAP    NO, SHOW SOME MIXED CASE
         AR    R2,R1               POINT PAST MESSAGE TEXT
         MVC   0(8,R2),OAIAMEM     SET MEMBER NAME INTO MESSAGE
         LA    R2,8(,R2)           POINT PAST COMPLETED MESSAGE TEXT
         SR    R2,R0               GET TOTAL MESSAGE TEXT LENGTH
         STH   R2,MSG              SET THE CORRECT MESSAGE LENGTH
         SPACE
*         DEQ AND DEALLOCATE OUTPUT DATA SET TO BE REPLACED
         SPACE
EDREPDEQ LA    R1,REPLOAIA         POINT TO OAIA
         L     R15,EDDALOAD        POINT TO DEQ/DEALLOCATION ROUTINE
         BASR  R14,R15             FREE THE OUTPUT FILE
         SPACE
EDREPLEX L     R14,EDRETSV1        RESTORE RETURN ADDRESS
         NI    STATUS,255-STABEND  RESET FLAGS
         NI    STATUS10,255-$10LIKE
         NI    STATUS12,255-$12REP-$12CRE-$12ENQ
         NI    EDFLG5,255-E5ADD-E5CUT
         BR    R14                 RETURN TO CALLER
         TITLE '  C U T   T O   S U B P O O L   3 8  '
EDREPCUT L     R4,RECURS@          POINT TO RECURSION VECTOR
         SAC   512                 SET AR MODE
         ICM   R0,15,RCRSL+8(R4)   ADDING TO EXISTING DATA?
         BZ    EDCUTLP1            NO
         OI    EDFLG5,E5ADD        YES, REMEMBER FOR MESSAGE TEXT
EDCUTLP1 TM    FLG1(R3),LMSG       MESSAGE LINE?
         BO    EDCUTDON            YES, DO NOT CUT IT
         L     R2,MAXRECSZ         GET MAXIMUM DATA LENGTH
         LAE   R1,CTLLEN-1(R2,R3)  POINT TO LAST DATA BYTE OF RECORD
EDCUTLP2 CLI   0(R1),C' '          TRAILING BLANK?
         BNE   EDCUTTHS            NO, CUT THIS
         BCTR  R1,0                YES, BACK UP ONE
         BCT   R2,EDCUTLP2
EDCUTTHS LA    R0,8+7(,R2)
         SRL   R0,3
         SLL   R0,3                GET STORAGE REQUIREMENT
         SAC   0                   SET PRIMARY MODE
         GETMAIN RC,LV=(0),SP=38,LOC=(31,64)
         LTR   R15,R15             SUCCESS?
         BNZ   EDCUTFUL            NO, REGION PROBABLY FULL
         ST    R15,0(,R1)          ZERO NEW FORWARD POINTER
         ST    R2,4(,R1)           SAVE DATA LENGTH IN SECOND WORD
         L     R15,RECURS@         POINT TO RECURSION VECTOR
         ICM   R4,15,RCRSL+12(R15) GET LAST CLIPBOARD RECORD ADDRESS
         BNZ   EDCUTREC            GOT IT SO THIS IS NOT THE FIRST
         ST    R1,RCRSL+8(,R15)    SAVE FIRST CLIPBOARD RECORD ADDRESS
         B     EDCUTLST            IT'S ALSO THE LAST RECORD SO FAR
EDCUTREC ST    R1,0(,R4)           CHAIN NEW LAST TO PREVIOUS LAST
EDCUTLST ST    R1,RCRSL+12(,R15)   SAVE ADDRESS OF CLIPBOARD NEW LAST
         SAC   512                 SET AR MODE
         LAE   R14,CTLLEN(,R3)     POINT TO DATA TO COPY
         LR    R15,R2              COPY DATA LENGTH TO COPY
         LA    R4,8(,R1)           POINT TO CLIPBOARD DATA AREA
         LR    R5,R15              COPY THE DATA LENGTH
         MVCL  R4,R14              COPY THE RECORD'S DATA
         LA    R0,1
         A     R0,COUNTER2         INCREMENT RECORD COUNT
         ST    R0,COUNTER2
EDCUTDON C     R3,EDENQPRM         JUST WROTE LAST RECORD?
         BE    EDCUTCUT            YES, STOP COPYING DATA
         L     R3,FWD(,R3)         POINT TO THE NEXT DATA RECORD
         ICM   R0,15,FWD(R3)       END OF DATA?
         BNZ   EDCUTLP1            NO, GO "CUT" THIS RECORD
         SPACE
EDCUTCUT EQU   *                   CUTTING OPERATIONS COMPLETE
         SAC   0                   SET PRIMARY MODE
         L     R0,COUNTER2         GET WRITTEN RECORD COUNT
         CVD   R0,DOUBLE           SHOW THE NUMBER OF LINES WRITTEN
         MVC   MSG+2(10),EDED9Z
         LA    R1,MSG+11           JUST IN CASE COUNT IS ZERO
         MVI   MSG+10,X'21'        JUST IN CASE COUNT IS ZERO
         EDMK  MSG+2(10),DOUBLE+3
         LA    R0,MSG+2
         LR    R15,R1
         SR    R15,R0              GET LEADING BLANK COUNT
         MVC   MSG+2(10),0(R1)     SHUFFLE UP NUMBER AND BLANK
         LA    R2,MSG+12           POINT PAST WHERE NUMBER ENDED
         SR    R2,R15              POINT PAST WHERE NUMBER ENDS
*                                  LOAD MESSAGE TEXT AFTER NUMBER
         MVC   0(29,R2),=C' LINE(S) COPIED TO CLIPBOARD '
         TM    EDFLG5,E5ADD        ADDING TO EXISTING DATA?
         BNO   EDCUTADD            NO
         MVC   9(3,R2),=C'ADD'     YES, INDICATE THIS IN MESSAGE TEXT
         MVC   12(17,R2),13(R2)    FIX SPELLING
EDCUTADD LA    R2,28(,R2)          POINT PAST MESSAGE TEXT
         LA    R0,MSG+2            POINT TO NUMBER
         SR    R2,R0               GET TOTAL MESSAGE TEXT LENGTH
         STH   R2,MSG              SET THE CORRECT MESSAGE LENGTH
         TM    STATUS10,$10CAP     CAPS ON?
         BO    *+10                YES, LEAVE MESSAGE IN UPPER CASE
         TR    MSG+4(36),EDTUNKAP  NO, SHOW SOME MIXED CASE
         B     EDREPLEX            CUT PROCESSING NOW COMPLETE
         SPACE
EDCUTFUL MVI   MSG,123             ABORTED - VIRTUAL STORAGE FULL
         FREEMAIN RC,SP=38         FREE THE CLIPBOARD STORAGE
         L     R15,RECURS@         AND ZERO THE POINTERS TO IT
         XC    RCRSL+8(8,R15),RCRSL+8(R15)
         B     EDREPLEX            CUT PROCESSING NOW TERMINATED
         SPACE
         DROP  R10                 EDREPL
         SPACE
         DC    0D'0'
         LTORG
         DC    0H'0'
         SPACE
         DROP  R12                 @EDDATA
         USING @EDDATA,R12
         TITLE '  C O M P A R E  '
         USING EDCOMP,R10
EDCOMP   LR    R10,R15             SET LOCAL BASE
         ST    R14,EDRETSV1        SAVE RETURN ADDRESS
         SPACE
*   'CALLPARM' IS USED TO RECORD OPERAND PARSING STATUS
*
*        VALUE AT CALLPARM+0 (WHICH DESCRIBES DATA SOURCE):
*           0 - PROMPT FOR "OLD" DATA
*           1 - 'SESSION' OR '*' => "OLD" DATA IS SAME DATA SET
*           4 - 'NEXT'
*           9 - NAME PROVIDED FOR "OLD" DATA
*
*        VALUE AT CALLPARM+1:
*           0 - 'EXCLUDE' NOT SPECIFIED
*           2 - 'EXCLUDE' SPECIFIED
*
*        VALUE AT CALLPARM+2:
*           0 - POTENTIAL 3RD KEYWORD NOT SPECIFIED
*           3 - POTENTIAL 3RD KEYWORD SPECIFIED
*
*        VALUE AT CALLPARM+3:
*           0 - NUMERIC OPERAND NOT SPECIFIED
*         '#' - THE SINGLE EBCDIC DECIMAL DIGIT SUPPLIED
*
*        VALUE AT CALLPARM+4:
*           ADDRESS OF OPERAND DESCRIPTOR THAT PROVIDED THE NAME,
*           OR ZERO IF NO NAME SPECIFIED
*
*        VALUE AT CALLPARM+0 = X'000200'
*           IS A SPECIAL CASE WHERE NO NEW COMPARE IS DONE, BUT
*           EXCLUSIONS ARE REASSIGNED BASED ON PREVIOUS RESULTS
*           - AN UPDATED NUMERIC OPERAND MAY ALSO BE SUPPLIED
         SPACE
         MVC   CALLPARM(8),EDZEROS CLEAR PARSE RESULTS AREA
         LA    R15,OPD0            POINT TO THE COMMAND
         SR    R1,R1               CLEAR FOR INSERT
EDCMOPLP LA    R15,8(,R15)         POINT TO THE NEXT OPERAND
         TM    6(R15),PRESENT      IS THIS OPERAND PRESENT?
         BNO   EDCMOPDN            NO, REACHED END OF OPERANDS
         ST    R15,16(,R13)        PREPARE FOR INVALID OPERAND
         TM    6(R15),NUMERIC      IS THIS OPERAND NUMERIC?
         BO    EDCMNXNM            YES
         CLI   7(R15),1            KEYWORD OPERAND?
         BL    EDCMNAME            NO
         CLI   7(R15),4            KEYWORD OPERAND?
         BH    EDCMNAME            NO
         IC    R1,7(,R15)          GET OPERAND TYPE
         LA    R14,CALLPARM(R1)
         BCTR  R14,0               POINT TO OPERAND'S FLAG
         CLI   7(R15),4            'NEXT'?
         BNE   *+8                 NO
         LA    R14,CALLPARM        YES, USE SAME BYTE AS '*'
         CLI   0(R14),0            FIRST TIME HERE?
         BNE   EDINVOP             NO, INVALID
         STC   R1,0(,R14)          YES, FLAG IT WAS SPECIFIED
         B     EDCMOPLP            GO PROCESS NEXT OPERAND
EDCMNAME CLI   CALLPARM,0          FIRST TIME HERE?
         BNE   EDINVOP             NO, INVALID
         MVI   CALLPARM,9          YES, FLAG NAME SUPPLIED
         ST    R15,CALLPARM+4      SAVE NAME'S OPD ADDRESS
         B     EDCMOPLP            GO PROCESS NEXT OPERAND
EDCMNXNM LH    R1,4(,R15)          GET LENGTH
         L     R14,0(,R15)         GET ADDRESS OF DATA
         BCTR  R1,0                DECREMENT FOR EXECUTE
         EX    R1,EDNUMPAK         CONVERT TO PACKED DECIMAL
         CVB   R1,DOUBLE           CONVERT TO BINARY
         CL    R1,EDFW127          WITHIN RANGE?
         BH    EDINVOP             NO, INVALID
         CLI   CALLPARM+3,0        ALREADY DONE THIS?
         BNE   EDINVOP             YES, INVALID
         STC   R1,CALLPARM+3       NO, SAVE THE NUMBER
         OI    CALLPARM+3,X'80'    ENSURE BYTE IS NOT NULL
         B     EDCMOPLP            GO PROCESS NEXT OPERAND
         SPACE
*         PROCESS RESULTS OF 'COMPARE' COMMAND PARSING
         SPACE
EDCMOPDN NI    EDFLG5,255-E5SEQS-E5XCLD-E5NEXT
         MVI   EDCMPCAT,X'7F'      SET RELATIVE DD NUMBER TO LARGE +VE
         CLI   CALLPARM+1,2        'EXCLUDE' SPECIFIED?
         BNE   EDCMPXOK            NO
         OI    EDFLG5,E5XCLD       YES, FLAG IT
EDCMPXOK NI    OPD1+6,255-PRESENT  ERASE ALL OPERAND DESCRIPTORS
         CLI   CALLPARM,4          'NEXT' SPECIFIED?
         BNE   EDCMNXTX            NO
         TM    DS1DSORG,DS1DSGPO   PARTITIONED ORGANISATION?
         BNO   EDCMNNPO            NO, NO MEMBER, LET ALONE A "NEXT"
         SR    R1,R1               CLEAR FOR INSERT
         IC    R1,$CONCAT          GET THE RELATIVE DD NUMBER
         CH    R1,ARLRTRVD         IS SUCH A DD PRESENT?
         BNL   EDCMNNXT            NO, THERE IS NO "NEXT"
         OI    EDFLG5,E5NEXT       YES, FLAG 'NEXT' SPECIFIED
         STH   R1,EDCMPCAT         SAVE CURRENT DD RELATIVE NUMBER
         B     EDCMP#NX
EDCMNNXT MVI   MSG,234             NO MORE DATA SETS IN CONCATENATION
         B     EDCOPYEX
EDCMNNPO MVI   MSG,38              DATA SET IS NOT PARTITIONED
         B     EDCOPYEX
EDCMNXTX CLI   CALLPARM,1          'SESSION' OR '*' SPECIFIED?
         BNE   EDCMSESX            NO
         OI    EDFLG5,E5SEQS       YES, FLAG IT
         TM    DS1DSORG,DS1DSGPO   PARTITIONED ORGANISATION?
         BNO   EDCMSESX            NO, $MEMBER SHOULD BE BLANK
         NI    EDFLG5,255-E5SEQS   YES, ACTUALLY DON'T NEED THIS FLAG
         LA    R15,24(,R13)        POINT TO SOME WORKING STORAGE
         LA    R0,$MEMBER          POINT TO NAME OF MEMBER BEING EDITED
         LA    R1,8                GET ITS LENGTH
         SLL   R1,16               SHIFT LENGTH TO HIGH HALFWORD
         STM   R0,R1,0(R15)        SAVE PHONY OPERAND DESCRIPTOR
         ST    R15,CALLPARM+4      SAVE ITS ADDRESS
EDCMSESX ICM   R15,15,CALLPARM+4   POINT TO NAME OF COMPARE DATA
         BZ    EDCMP#NX            NO NAME WAS SUPPLIED
         MVC   OPD1(8),0(R15)      MAKE THE NAME THE FIRST OPERAND
         OI    OPD1+6,PRESENT      ENSURE OPERAND FLAGGED AS PRESENT
EDCMP#NX SR    R1,R1               CLEAR FOR INSERT
         ICM   R1,7,CALLPARM       SAVE FIRST 3 PARSE RESULTS BYTES
         CLI   CALLPARM+3,0        ANY NUMBER SPECIFIED?
         BE    EDCOMPEX            NO
         NI    CALLPARM+3,X'7F'    YES, GET ACTUAL NUMBER
         SR    R0,R0               CLEAR FOR INSERT
         IC    R0,CALLPARM+3       LOAD THE SPECIFIED NUMBER
         CVD   R0,DOUBLE
         OI    DOUBLE+7,X'0F'      PREPARE FOR UNPACK
         UNPK  EPC#NX,DOUBLE       SAVE NEW NUMBER IN EDIT PROFILE
         SPACE
EDCOMPEX MVI   OPD2+6,0            ERASE 2ND AND SUBSEQUENT OPERANDS
         OI    EDFLG5,E5COMP       FLAG 'COMPARE' IS ACTIVE
         L     R14,EDRETSV1        RESTORE RETURN ADDRESS
         LA    R15,EDCOPY          GET NEW LOCAL BASE ORIGIN
         LA    R0,X'000200'        GET SPECIAL VALUE TO CHECK FOR
         CR    R1,R0               COMPARE EXCLUDE REPAGINATION?
         BNER  R15                 NO, GO DO AN ACTUAL COMPARE
         DROP  R10                 EDCOMP
         LR    R10,R15             SET NEW LOCAL BASE
         USING EDCOPY,R10
         B     EDCMPEXC            GO REDO EXCLUSIONS OF LAST COMPARE
         DROP  R10                 EDCOPY
         TITLE '  P A S T E  '
         USING EDPASTE,R10
EDPASTE  LR    R10,R15             SET LOCAL BASE
         SPACE
         LA    R15,OPD1            SET FOR ED2MANY
         TM    OPD1+6,PRESENT      ANY OPERANDS PRESENT?
         BO    ED2MANY             YES, TOO MANY
         SPACE
         OI    EDFLG5,E5CUT        FLAG 'PASTE' IS ACTIVE
         LA    R15,EDCOPY          GET NEW LOCAL BASE ORIGIN
         DROP  R10                 EDPASTE
         TITLE '  C O P Y  '
         USING EDCOPY,R10
EDCOPY   LR    R10,R15             SET LOCAL BASE
         ST    R14,EDRETSV1        SAVE RETURN ADDRESS
         IC    R6,MSG              SAVE MESSAGE STATUS
         TM    EDFLG5,E5CUT        'PASTE' ACTIVE?
         BO    EDCOPYIT            YES, GO CHECK TARGET LOCATION
         TM    EDFLG5,E5COMP+E5NEXT    DOING A 'COMPARE NEXT'?
         BO    EDCOPYIT            YES, GO CHECK TARGET LOCATION
         SPACE
*         PROCESS MEMBER NAME SPECIFICATION
         SPACE
         MVC   BLDLNAME,EDBLNKS    RESET MEMBER SPECIFICATION
         TM    OPD1+6,PRESENT      ANY OPERANDS PRESENT?
         BNO   EDCOPYIT            NO, PROCEED
         TM    OPD2+6,PRESENT      TOO MANY OPERANDS PRESENT?
         BO    ED2MANY             YES
         LH    R1,OPD1+4           GET LENGTH
         LTR   R1,R1               IS IT NULL STRING?
         BNP   EDINVOP             YES, INVALID
         LA    R0,44+10
         CR    R1,R0               IS IT TOO LONG FOR A DATA SET?
         BH    EDINVOP             YES, INVALID
         TM    OPD1+6,QUOTED       IS OPERAND QUOTED?
         BO    EDCPYQOT            YES, MUST BE A DATA SET NAME
         C     R1,EDFW8            IS LENGTH MORE THAN 8?
         BH    EDCPYDSN            YES, MUST BE A DATA SET NAME
         L     R14,OPD1            GET ADDRESS OF DATA
         LR    R0,R1               GET ITS LENGTH
EDCPYLP0 CLI   0(R14),C'.'         NAME CONTAINS A PERIOD?
         BE    EDCPYDSN            YES, MUST BE A DATA SET NAME
         LA    R14,1(,R14)         POINT TO THE NEXT CHARACTER
         BCT   R0,EDCPYLP0         SEARCH THE WHOLE NAME FOR A PERIOD
         TM    DS1DSORG,DS1DSGPO   PARTITIONED ORGANISATION?
         BNO   EDCPYDSN            NO, MUST BE A DATA SET NAME
         L     R14,OPD1            GET ADDRESS OF DATA
         BCTR  R1,0                DECREMENT FOR EXECUTE
         EX    R1,EDMEMMVC         LOAD THE MEMBER NAME
         TM    EDFLG2,E2OPNI       DCB OPEN FOR INPUT OR UPDATE?
         BZ    EDCPYBLD            YES, GO PERFORM BLDL
         MVI   OPEND,X'80'
         OPEN  (EDITDCB,(INPUT)),MF=(E,OPEND)
         OI    EDFLG2,E2OPNI       FLAG DCB OPEN FOR INPUT
EDCPYBLD BLDL  EDITDCB,BLDL        LOOK FOR MEMBER
         LTR   R15,R15             DOES MEMBER EXIST?
         BZ    EDCOPYIT            YES, GO COPY IT
EDMEMGON MVI   MSG,36              MEMBER NOT FOUND
         B     EDITCYCL            RETURN WITH THE BAD NEWS
         SPACE
*         PROCESS DATA SET NAME SPECIFICATION
         SPACE
EDCPYQOT CLI   OPD1+7,C'T'         NORMAL QUOTED STRING TYPE?
         BNE   EDINVOP             NO, INVALID
EDCPYDSN XC    ALCDSSAV,ALCDSSAV   CLEAR THE TARGET AREA
         L     R0,OPD1             POINT TO SPECIFIED DATA SET NAME
         LA    R14,ALCDSSAV        POINT TO TARGET
         LR    R15,R1              COPY LENGTH FROM SOURCE
         TM    OPD1+6,QUOTED       WAS IT QUOTED?
         BZ    EDCPRIME            NO, JUST GO PRIME THE NAME
         MVI   ALCDSSAV,QUOTE      YES, SUPPLY A QUOTE
         LA    R14,ALCDSSAV+1      POINT PAST THE QUOTE
EDCPRIME MVCL  R14,R0              PRIME PANEL WITH SUPPLIED NAME
         TM    OPD1+6,QUOTED       WAS IT QUOTED?
         BZ    EDCOPYIT            NO, NAME NOW PRIMED
         MVI   0(R14),QUOTE        YES, APPEND TRAILING QUOTE
         SPACE
*         VERIFY COPY TARGET LOCATION IS KNOWN
         SPACE
EDCOPYIT MVI   MSG,110             COMMAND CONFLICT
         ICM   R0,15,COUNTER1      ANY SOURCE LINE COMMANDS?
         BNZ   EDITCYCL            YES, COMMAND CONFLICT
         TM    EDFLG5,E5COMP       PERFORMING A COMPARE?
         BNO   EDNTCOMP            NO, GO PERFORM COPY
         ICM   R0,15,COUNTER2      ANY TARGET LINE COMMANDS?
         BNZ   EDITCYCL            YES, COMMAND CONFLICT
         SAC   512                 SET AR MODE
         L     R15,GETALIN@
         BASR  R14,R15             GET STORAGE FOR A RECORD
         ST    R15,TOPADDR2        SAVE NEW ENTRY ADDRESS
         BZ    EDCOMPX1            INSUFFICIENT STORAGE
         L     R15,GETALIN@
         BASR  R14,R15             GET STORAGE FOR A RECORD
         ST    R15,BTMADDR2        SAVE NEW ENTRY ADDRESS
         BZ    EDCOMPX2            INSUFFICIENT STORAGE
         MVC   BAK(4,R15),TOPADDR2 LAST POINTS BACK TO FIRST
         L     R15,TOPADDR2        POINT TO FIRST
         MVC   FWD(4,R15),BTMADDR2 FIRST POINTS FORWARD TO LAST
         SAC   0                   SET PRIMARY MODE
         L     R2,BTMADDR2         POINT TO BOTTOM OF DATA
         B     EDCOPYGO
EDCOMPX2 L     R15,TOPADDR2        POINT TO NOW USELESS ACQUIRED ENTRY
         MVC   FWD(4,R15),MPTANKOR LOAD POINTER TO EMPTY CHAIN HEAD
         ST    R15,MPTANKOR        ADD IT TO THE EMPTY CHAIN
EDCOMPX1 SAC   0                   SET PRIMARY MODE
         MVI   MSG,123             REQUEST ABORTED - STORAGE FULL
         B     EDITCYCL            RETURN WITH THE BAD NEWS
EDNTCOMP CLC   COUNTER2,EDFW1      EXACTLY ONE TARGET LINE COMMAND?
         BH    EDITCYCL            NO, MORE, SO COMMAND CONFLICT
         BE    EDCOPYOK            YES, LOOKING GOOD
         MVI   MSG,129             TARGET LOCATION NOT SPECIFIED
         ICM   R0,15,RECLINES      ANY DATA RECORDS PRESENT?
         BNZ   EDITCYCL            YES, SO NEED A LOCATION
         OI    STATUS10,$10CAP     USE "CAPS ON" IF NO LOWER CASE
         L     R2,BTMADDR          POINT TO BOTTOM OF DATA
EDCOPYGO LA    R5,C'B'             SET TARGET DESIGNATION
         LA    R8,1                GET THE REPLICATION COEFFICIENT
         B     EDCOPLOC            HAVE TARGET LOCATION
         SPACE
*         LOCATE COPY TARGET COMMAND ELEMENT
         SPACE
EDCOPYOK LA    R5,CMDANKOR-EDIRSIZ POINT TO COMMAND LIST ANCHOR
EDCOPYLP ICM   R1,15,CMDENEXT(R5)  POINT TO NEXT COMMAND ELEMENT
         BZ    EDCOPYEX            CANNOT HAPPEN UNLESS TARGET IS 'O'
         CLI   CMDECODE(R1),C'A'   AFTER?
         BE    EDCOPTGT            YES
         CLI   CMDECODE(R1),C'B'   BEFORE?
         BE    EDCOPTGT            YES
         LR    R5,R1               POINT TO THIS COMMAND ELEMENT
         B     EDCOPYLP            NO, GO GET NEXT LINE COMMAND ELEMENT
         SPACE
*         FREE COPY TARGET COMMAND ELEMENT
         SPACE
EDCOPTGT L     R8,CMDEREPL(,R1)    GET THE REPLICATION COEFFICIENT
         L     R2,EDIRREC(,R1)     POINT TO TARGET RECORD
         MVC   CMDENEXT(4,R5),CMDENEXT(R1)
         IC    R5,CMDECODE(,R1)    GET TARGET DESIGNATION
         LA    R0,CMDESIZE         GET COMMAND ELEMENT SIZE
         FREEMAIN RU,LV=(0),SP=12,A=(1)
         SPACE
*         CLEAR TARGET COMMAND ECHO AND LOCATE INSERTION POINT
         SPACE
EDCOPLOC STC   R6,MSG              RESTORE MESSAGE STATUS
         CLI   MSG,108             MOVE/COPY IS PENDING ?
         BNE   *+8                 NO
         MVI   MSG,0               YES, BUT NOT ANY MORE
         LAM   A0,A15,EDZEROS      ZERO ACCESS REGISTERS
         LAM   A2,A2,DSPCALET      LOAD DATA SPACE ALET
         SAC   512                 SET AR MODE
         MVC   ECHO(6,R2),EDBLNKS  CLEAR LINE'S LINE COMMAND
         CLM   R5,1,EDHEX+X'B'     WAS TARGET 'BEFORE'?
         BNE   *+8                 NO, MUST HAVE BEEN 'AFTER'
         L     R2,BAK(,R2)         YES, POINT TO PREVIOUS RECORD
         SAC   0                   SET PRIMARY MODE
         TM    EDFLG5,E5CUT        'PASTE' ACTIVE?
         BO    EDPASTIN            YES, GO GET A PASTIN'...
         SPACE
*         ALLOCATE INPUT DATA SET TO BE COPIED
         SPACE
         CLI   BLDLNAME,C' '       COPYING MEMBER OF CURRENT PDS?
         BH    EDALCMEM            YES, SKIP CALL OF REVLOAD
         MVC   DOUBLE,$DDNAME      PREPARE FOR 'COMPARE SESSION'
         TM    EDFLG5,E5COMP+E5SEQS    DOING A 'COMPARE SESSION'?
         BO    EDCPYOPN            YES, AND IT'S A SEQUENTIAL DATA SET
         TM    EDFLG5,E5COMP+E5NEXT    DOING A 'COMPARE NEXT'?
         BO    EDALCMEM            YES, GO ALLOCATE THE "OLD" MEMBER
         CLI   ALCDSSAV,0          DATA SET NAME ALREADY PRIMED?
         BNE   EDALCIDS            YES, CONTINUE
         MVI   ALCDSSAV,QUOTE      NO, PRIME WITH CURRENT DATA SET NAME
         LA    R0,$DSNAME+2
         LH    R1,$DSNAME
         LA    R14,ALCDSSAV+1
         LR    R15,R1
         MVCL  R14,R0
         MVI   0(R14),QUOTE
EDALCIDS TM    EDFLG5,E5COMP       DOING A 'COMPARE'?
         BNO   EDALCIMN            NO
         MVC   BLDLNAME,$MEMBER    YES, DEFAULT TO THE SAME MEMBER NAME
EDALCIMN XC    DOUBLE,DOUBLE       CLEAR DDNAME HOLD AREA
         MVC   EDSAVE2(1),STATUS15 SAVE STATUS FLAG BYTE
         NI    STATUS15,255-$15GEN DISABLE GENERATION MEMBER VISIBILITY
         L     R15,=A(REVLOAD)     GET ALLOCATION ROUTINE ENTRY POINT
         BASR  R14,R15             GO ALLOCATE INPUT FILE
         MVC   STATUS15,EDSAVE2    RESTORE STATUS FLAG BYTE
         CLI   DOUBLE+2,0          WAS A DDNAME ALLOCATED?
         BE    EDCOPYEX            NO, RETURN WITHOUT ACTION
         B     EDCPYOPN            YES, GO USE IT
         SPACE
*         ALLOCATE THE INPUT MEMBER OF THIS PDS
         SPACE
EDALCMEM XC    MYDAPB,MYDAPB
         MVI   DA08CD+1,X'08'
         LA    R0,DSNAIM
         ST    R0,DA08PDSN
         MVC   DA08DDN,EDBLNKS
         MVC   DA08UNIT,EDBLNKS
         MVC   DA08SER,EDBLNKS
         MVC   DA08MNM,BLDLNAME
         MVC   DA08PSWD,EDBLNKS
         MVI   DA08DSP1,DA08SHR
         MVI   DA08DPS2,DA08KEEP
         MVI   DA08DPS3,DA08KEP
         TM    EDFLG5,E5NEXT       'NEXT' SPECIFIED?
         BNO   EDMEMALC            NO
         MVC   BLDLNAME,$MEMBER    YES, BOTH MEMBER NAMES ARE THE SAME
         LH    R1,EDCMPCAT         GET CURRENT RELATIVE DD NUMBER
         CH    R1,ARLRTRVD         IS THERE A LATER DATA SET?
         BNL   EDNONEXT            NO, THERE IS NO "NEXT"
         LA    R1,1(,R1)           YES, INCREMENT THE NUMBER
         LR    R0,R1               COPY THE NEW NUMBER
         STH   R1,EDCMPCAT         SAVE IT FOR NEXT TIME
         L     R1,ARLAREA          POINT TO CONCATENATED JFCBS
EDCMNXT1 S     R0,EDFW1            DECREMENT DD NUMBER TO GO
         BNP   EDCMNXT2            HAVE NEXT DATA SET TO TRY
         AH    R1,0(,R1)           POINT TO NEXT JFCB
         B     EDCMNXT1            GO CHECK IT
EDNONEXT MVI   MSG,36              MEMBER NOT FOUND
         B     EDCOPYEX
EDCMNXT2 MVC   DA08UNIT,EDALLDA    LOAD NEXT DATA SET PARTICULARS
         MVC   DA08SER(6),JFCBVOLS-INFMJFCB+4(R1)
         LA    R0,2(,R1)           POINT TO 2 BYTES AHEAD OF DSNAME
         ST    R0,DA08PDSN         SAVE ITS ADDRESS
         LA    R0,44               GET PRESUMED NAME LENGTH
         STH   R0,2(,R1)           SET LENGTH INDICATOR
         MVI   MSG,0               CLEAR POSSIBLE PENDING MESSAGE
EDMEMALC XC    MYECB,MYECB
         MVC   DA08MNM,BLDLNAME    SPECIFY THE MEMBER TO ALLOCATE
         XASAM24
         LA    R1,MYDAPL
         L     R15,CVTPTR(,0)      CVT
         L     R15,CVTDAIR-CVT(,R15)
         BASR  R14,R15             CALL IKJDAIR
         XASAM31
         LTR   R15,R15
         BNZ   EDMEMGON            DYNAMIC ALLOCATION FAILED
         MVC   DOUBLE,DA08DDN      COPY GENERATED DD NAME
         SPACE
*         OPEN THE INPUT DATA SET TO BE COPIED
         SPACE
EDCPYOPN MVC   SUBDCB,EDCPYDCB     INITIALIZE THE DCB
         MVC   SUBDDNAM,DOUBLE     SET THE DDNAME
         XC    MYDAPB,MYDAPB
         MVI   DA18CD+1,X'18'
         MVC   DA18DDN,SUBDDNAM    DDNAME
         MVC   DA18MNM,EDBLNKS     MEMBER NAME
         MVC   DA18SCLS,EDBLNKS    SYSOUT CLASS IS 2-BYTE FIELD
         DROP  R9                  @DATA, DAPB MAPPINGS
         USING @DATA,R9
         L     R5,REVUPT           POINT TO THE UPT
         USING UPT,R5
         IC    R7,UPTSWS           SAVE THE TSO USER PROFILE
         NI    UPTSWS,255-UPTWTP   SUPPRESS TPUT OF ABEND MESSAGE
         MVI   OPEND,X'80'         OPEN THE INPUT DCB
         OPEN  (SUBDCB,INPUT),MF=(E,OPEND)
         STC   R7,UPTSWS           RESTORE TSO PROFILE
         DROP  R5                  UPT
         TM    STATUS,STABEND      OPEN ABEND?
         BO    EDCPYDEA            YES, GO DEALLOCATE THE FILE
         MVI   EDDEVTYP,X'FF'      SUPPRESS EXTENDED CHECKING
         TM    EDFLG5,E5COMP       PERFORMING A COMPARE?
         BNO   EDCPYGET            NO, GO READ THE RECORDS
         SPACE
*         COMPARE PREPARATION - REMOVE LABELS AND MESSAGE LINES
         SPACE
         BAS   R3,FREELBLS         FREE LABEL ELEMENT STORAGE
         CPYA  A3,A2               COPY DATA SPACE ALET
         LR    R5,R2               SAVE INSERTION POINT ADDRESS
         L     R2,TOPADDR          POINT TO TOP-OF-DATA
         SAC   512                 SET AR MODE
EDCMPLP1 L     R2,FWD(,R2)         POINT TO NEXT RECORD
         C     R2,BTMADDR          BOTTOM-OF-DATA?
         BE    EDCMPEX1            YES, LEAVE LOOP
         NI    FLG2(R2),255-LLBL   RESET LABEL FLAG
         NI    FLG3(R2),255-LNEW   RESET UNMATCHED DATA FLAG
         MVC   ECHO(6,R2),EDBLNKS  CLEAR PENDING LABEL NAME
         TM    FLG1(R2),LMSG       MESSAGE LINE?
         BNO   EDCMPLP1            NO, RECORD NOW PREPARED
         L     R3,BAK(,R2)         YES, POINT TO PREVIOUS RECORD
         MVC   FWD(4,R3),FWD(R2)   UNCHAIN MESSAGE LINE
         MVC   FWD(4,R2),MPTANKOR  MOVE IT TO EMPTY CHAIN
         ST    R2,MPTANKOR         MAKE IT HEAD OF LIFO STACK
         LR    R2,R3               POINT TO PREVIOUS RECORD
         L     R3,FWD(,R3)         POINT TO NEW NEXT RECORD
         ST    R2,BAK(,R3)         FIX UP BACKWARD CHAIN
         B     EDCMPLP1            RECORD NOW PREPARED
EDCMPEX1 LR    R2,R5               RESTORE INSERTION POINT ADDRESS
         SAC   0                   SET PRIMARY MODE
         MVC   MSGLINES,EDZEROS    RESET MESSAGE LINE COUNT
         SPACE
*         READ A RECORD AND INSERT ITS DATA
         SPACE
EDCPYGET XASAM24
         GET   SUBDCB              READ THE NEXT RECORD
         XASAM31
         CLI   SYNADSW,0           I/O ERROR?
         BNE   EDCPYERR            YES
         LR    R6,R1               POINT TO THE RECORD JUST READ
         LH    R7,SUBLRECL         GET THE RECORD LENGTH
         TM    SUBRECFM,DCBRECF    VARIABLE-LENGTH RECORDS?
         BO    EDCPYREC            NO
         ICM   R7,3,0(R6)          YES, GET THE RECORD LENGTH
         LA    R6,4(,R6)           POINT PAST THE RDW
         S     R7,EDFW4            DISCOUNT LENGTH OF RDW
EDCPYREC SAC   512                 SET AR MODE
         L     R15,GETALIN@
         BASR  R14,R15             GET STORAGE FOR A RECORD
         BZ    EDCPYFUL            INSUFFICIENT STORAGE
         CPYA  A14,A15             COPY DATA SPACE ALET
         L     R14,FWD(,R2)        POINT TO RECORD AFTER NEW RECORD
         ST    R2,BAK(,R15)        SET NEW BACKWARD POINTER
         ST    R14,FWD(,R15)       SET NEW FORWARD POINTER
         ST    R15,FWD(,R2)        UPDATE OLD FORWARD POINTER
         ST    R15,BAK(,R14)       UPDATE OLD BACKWARD POINTER
         LR    R2,R15              POINT TO NEW RECORD
         LA    R14,CTLLEN(,R15)    POINT TO RECORD DATA AREA
         L     R15,MAXRECSZ        GET NEW RECORD DATA AREA LENGTH
         LR    R3,R15              COPY RECORD DATA LENGTH
         ICM   R7,8,EDBLNKS        SET PAD CHARACTER
         MVCL  R14,R6              LOAD RECORD'S DATA INTO STORAGE
         LA    R0,1
         A     R0,COUNTER1         INCREMENT COPY RECORD COUNT
         ST    R0,COUNTER1
         TM    EDFLG5,E5COMP       PERFORMING A COMPARE?
         BO    EDCPYCAP            YES, EDIT DATA NOT UPDATED
         OI    EDFLG1,SAVEY+SAVEZ  FLAG IN-CORE DATA HAS CHANGED
         OI    FLG1(R2),CHGL       MARK RECORD AS CHANGED
         LA    R0,1
         A     R0,RECLINES         INCREMENT RECORD COUNT
         ST    R0,RECLINES
         CPYA  A1,A15              COPY DATA SPACE ALET
         L     R1,BAK(,R2)         POINT TO RECORD BEFORE NEW RECORD
         C     R1,TOPADDR          TOP OF DATA?
         BE    EDCPYSNT            YES, SKIP SYNTAX STATUS UPDATE
         L     R15,EDITSNT@        POINT TO SYNTAX COLOURING ROUTINE
         BASR  R14,R15             UPDATE LINE SYNTAX STATUS
EDCPYSNT C     R0,COUNTER1         ANY DATA BEFORE COPY?
         BNE   EDCPYCAP            YES, DO NOT CHANGE CAPS SETTING
         LR    R6,R2               SAVE RECORD ADDRESS
         LA    R2,CTLLEN(,R2)      POINT RECORD DATA
         L     R15,=A(EDCAPCHK)
         BASR  R14,R15             CHECK CAPS SETTING
         LR    R2,R6               RESTORE RECORD ADDRESS
EDCPYCAP SAC   0                   SET PRIMARY MODE
         TM    STATUS4,$4ATTN      ATTENTION INTERRUPT?
         BNO   EDCPYGET            NO, GO READ NEXT RECORD
         MVI   MSG,122             PROCESSING INTERRUPTED
         NI    STATUS16,255-$16RFC CLEAR ANY PENDING COMMAND
         B     EDEOCOPY            GO CLOSE THE FILE AND TIDY UP
         SPACE
*         REPORT I/O ERROR DETAILS
         SPACE
EDCPYERR LA    R1,SYNADMSG         POINT TO THE MESSAGE
         LA    R0,78               GET THE MESSAGE LENGTH
         TPUT  (1),(0),R           DISPLAY THE I/O ERROR MESSAGE
         MVI   MSG,112             I/O ERROR
         NI    STATUS16,255-$16RFC CLEAR ANY PENDING COMMAND
         B     EDEOCOPY            GO CLOSE THE FILE AND TIDY UP
         SPACE
*         HANDLE STORAGE EXHAUSTION
         SPACE
EDCPYFUL MVI   MSG,123             REQUEST ABORTED - STORAGE FULL
         NI    STATUS16,255-$16RFC CLEAR ANY PENDING COMMAND
         SPACE
*         CLOSE THE COPIED FILE
         SPACE
EDEOCOPY MVI   CLOSED,X'80'
         CLOSE (SUBDCB),MF=(E,CLOSED)
         CLI   MSG,123             STORAGE FULL?
         BE    *+8                 YES, DO NOT REPEAT
         BCT   R8,EDCPYOPN         REPEAT REQUEST NUMBER OF TIMES
         FREEPOOL SUBDCB           FREE SYSTEM-ACQUIRED DCB STORAGE
         SPACE
*         REPORT THE NUMBER OF RECORDS COPIED
         SPACE
         ICM   R0,3,MSG            ANY MESSAGE PRIMED?
         BNZ   EDCPYDEA            YES, DO NOT OVERLAY
         TM    EDFLG5,E5COMP       PERFORMING A COMPARE?
         BO    EDCPYDEA            YES, SKIP LINE COUNT REPORT
         L     R0,COUNTER1         NO, GET COPIED LINE COUNT
         CVD   R0,DOUBLE           SHOW THE NUMBER OF COPIED LINES
         MVC   MSG+2(10),EDED9Z
         LA    R1,MSG+11           JUST IN CASE COUNT IS ZERO
         MVI   MSG+10,X'21'        JUST IN CASE COUNT IS ZERO
         EDMK  MSG+2(10),DOUBLE+3
         LA    R0,MSG+2               NOT ALL ALPHABETIC AFTER PERIOD
         LR    R15,R1                 NOT ALL ALPHABETIC AFTER PERIOD
         SR    R15,R0              GE NOT ALL ALPHABETIC AFTER PERIOD
         MVC   MSG+2(10),0(R1)     SHUFFLE UP NUMBER AND BLANK
         LA    R2,MSG+12           POINT PAST WHERE NUMBER ENDED
         SR    R2,R15              POINT PAST WHERE NUMBER ENDS
*                                  LOAD MESSAGE TEXT AFTER NUMBER
         MVC   0(15,R2),=C' LINE(S) COPIED'
         LA    R2,15(,R2)          POINT PAST MESSAGE TEXT
         LA    R0,MSG+2            POINT TO NUMBER
         SR    R2,R0               GET TOTAL MESSAGE TEXT LENGTH
         STH   R2,MSG              SET THE CORRECT MESSAGE LENGTH
         TM    STATUS10,$10CAP     CAPS ON?
         BO    EDCPYDEA            YES, MESSAGE COMPLETE
         TR    MSG+4(23),EDTUNKAP  NO, SHOW SOME MIXED CASE
         SPACE
*         DEALLOCATE THE COPIED DATA SET
         SPACE
EDCPYDEA XC    MYECB,MYECB
         TM    EDFLG5,E5SEQS       SEQUENTIAL SELF-COMPARE?
         BO    EDCMPDEA            YES, DO NOT FREE $DDNAME
         XASAM24
         LA    R1,MYDAPL
         L     R15,CVTPTR(,0)      CVT
         L     R15,CVTDAIR-CVT(,R15)
         BASR  R14,R15             CALL IKJDAIR FOR DEALLOCATION
         XASAM31
         SPACE
*         DISCARD MATCHED "OLD" DATA
         SPACE
EDCMPDEA NI    STATUS,255-STABEND  RESET DCB ABEND FLAG
         MVI   SYNADSW,0           RESET I/O ERROR FLAG
         TM    EDFLG5,E5COMP       PERFORMING A COMPARE?
         BNO   EDCOPYEX            NO, COPY PROCESSING COMPLETE
         ICM   R0,3,MSG            ANY MESSAGE PENDING?
         BZ    EDCOMPAR            NO, GO PERFORM COMPARE
         TM    EDFLG5,E5NEXT       COMPARE NEXT?
         BNO   EDCMPXIT            NO, COMPARE COMPLETE
         CLI   MSG,36              MEMBER NOT FOUND?
         BE    EDALCMEM            YES, TRY THE NEXT DD
EDCMPXIT LAM   A2,A2,DSPCALET      SET RECORD POINTER ALET
         L     R2,BTMADDR2         POINT TO LAST COPIED RECORD
         SAC   512                 SET AR MODE
         MVC   FWD(4,R2),MPTANKOR  ADD COPIED LINES TO EMPTY CHAIN
         MVC   MPTANKOR,TOPADDR2+FWD
         SPACE
*         EXIT - AND REPORT A CHANGED CAPS SETTING IF IT DID CHANGE
         SPACE
EDCOPYEX L     R10,EDITREA@        SET EDITREAD BASE REGISTER
         LAM   R0,R15,EDZEROS      ZERO ACCESS REGISTERS
         SAC   512                 SET AR MODE
         B     EDRDNUMX-EDITREAD(,R10)
         SPACE
         SPACE
EDCPYSYN DS    0H
         SYNADAF ACSMETH=QSAM
         MVC   SYNADMSG,50(R1)
         MVI   SYNADSW,X'FF'
         SYNADRLS
         BR    R14
         SPACE
         PRINT NOGEN
EDCPYDCB DCB   DSORG=PS,MACRF=GL,DDNAME=--COPY--,                      +
               EODAD=EDEOCOPY,SYNAD=EDCPYSYN,EXLST=EDIOXLST,EROPT=ACC
         PRINT GEN
         TITLE '  P A S T E   F R O M   S U B P O O L   3 8  '
EDPASTIN L     R4,RECURS@          POINT TO RECURSION VECTOR
         LA    R4,RCRSL+8(,R4)     POINT TO CLIPBOARD CHAIN ORIGIN
         SAC   512                 SET AR MODE
EDPASTLP ICM   R4,15,0(R4)         POINT TO NEXT RECORD TO PASTE
         BZ    EDPASTED            ALL RECORDS NOW PASTED
         L     R15,GETALIN@
         BASR  R14,R15             GET STORAGE FOR A RECORD
         BZ    EDPSTFUL            INSUFFICIENT STORAGE
         CPYA  A14,A15             COPY DATA SPACE ALET
         L     R14,FWD(,R2)        POINT TO RECORD AFTER NEW RECORD
         ST    R2,BAK(,R15)        SET NEW BACKWARD POINTER
         ST    R14,FWD(,R15)       SET NEW FORWARD POINTER
         ST    R15,FWD(,R2)        UPDATE OLD FORWARD POINTER
         ST    R15,BAK(,R14)       UPDATE OLD BACKWARD POINTER
         LR    R2,R15              POINT TO NEW RECORD
         LA    R14,CTLLEN(,R15)    POINT TO RECORD DATA AREA
         L     R15,MAXRECSZ        GET NEW RECORD DATA AREA LENGTH
         LA    R0,8(,R4)           POINT TO DATA TO PASTE
         L     R1,4(,R4)           GET LENGTH OF PASTE DATA
         ICM   R1,8,EDBLNKS        SET PAD CHARACTER
         MVCL  R14,R0              PASTE RECORD'S DATA INTO STORAGE
         OI    EDFLG1,SAVEY+SAVEZ  FLAG IN-CORE DATA HAS CHANGED
         OI    FLG1(R2),CHGL       MARK RECORD AS CHANGED
         LA    R0,1
         A     R0,COUNTER1         INCREMENT PASTED RECORD COUNT
         ST    R0,COUNTER1
         LA    R0,1
         A     R0,RECLINES         INCREMENT RECORD COUNT
         ST    R0,RECLINES
         CPYA  A1,A15              COPY DATA SPACE ALET
         L     R1,BAK(,R2)         POINT TO RECORD BEFORE NEW RECORD
         C     R1,TOPADDR          TOP OF DATA?
         BE    EDPSTSNT            YES, SKIP SYNTAX STATUS UPDATE
         L     R15,EDITSNT@        POINT TO SYNTAX COLOURING ROUTINE
         BASR  R14,R15             UPDATE LINE SYNTAX STATUS
EDPSTSNT C     R0,COUNTER1         ANY DATA BEFORE COPY?
         BNE   EDPASTLP            YES, DO NOT CHANGE CAPS SETTING
         LR    R6,R2               SAVE RECORD ADDRESS
         LA    R2,CTLLEN(,R2)      POINT RECORD DATA
         L     R3,MAXRECSZ         GET RECORD DATA LENGTH TO CHECK
         L     R15,=A(EDCAPCHK)
         BASR  R14,R15             CHECK CAPS SETTING
         LR    R2,R6               RESTORE RECORD ADDRESS
         B     EDPASTLP
EDPASTED SAC   0                   SET PRIMARY MODE
         BCT   R8,EDPASTIN         REPEAT AS PER 'A'/'B' COEFFICIENT
         SPACE
*         REPORT THE NUMBER OF RECORDS PASTED
         SPACE
         L     R0,COUNTER1         NO, GET COPIED LINE COUNT
         CVD   R0,DOUBLE           SHOW THE NUMBER OF COPIED LINES
         MVC   MSG+2(10),EDED9Z
         LA    R1,MSG+11           JUST IN CASE COUNT IS ZERO
         MVI   MSG+10,X'21'        JUST IN CASE COUNT IS ZERO
         EDMK  MSG+2(10),DOUBLE+3
         LA    R0,MSG+2
         LR    R15,R1
         SR    R15,R0              GET LEADING BLANK COUNT
         MVC   MSG+2(10),0(R1)     SHUFFLE UP NUMBER AND BLANK
         LA    R2,MSG+12           POINT PAST WHERE NUMBER ENDED
         SR    R2,R15              POINT PAST WHERE NUMBER ENDS
*                                  LOAD MESSAGE TEXT AFTER NUMBER
         MVC   0(15,R2),=C' LINE(S) PASTED'
         LA    R2,15(,R2)          POINT PAST MESSAGE TEXT
         LA    R0,MSG+2            POINT TO NUMBER
         SR    R2,R0               GET TOTAL MESSAGE TEXT LENGTH
         STH   R2,MSG              SET THE CORRECT MESSAGE LENGTH
         TM    STATUS10,$10CAP     CAPS ON?
         BO    EDPASTEX            YES, MESSAGE COMPLETE
         TR    MSG+4(23),EDTUNKAP  NO, SHOW SOME MIXED CASE
         B     EDPASTEX            NOW MESSAGE COMPLETE
         SPACE
EDPSTFUL MVI   MSG,123             REQUEST ABORTED - STORAGE FULL
         NI    STATUS16,255-$16RFC CLEAR ANY PENDING COMMAND
         SPACE
EDPASTEX NI    EDFLG5,255-E5CUT    RESET 'PASTE' ACTIVE FLAG
         B     EDCOPYEX            GO TERMINATE COMMAND
         TITLE '  C O M P A R E   I N   S T O R A G E  '
*
*    THE DATA BEING EDITED IS REFERRED TO AS THE "NEW" DATA WHILE
*    THE DATA READ IN FROM THE NOMINATED DATA SET OR MEMBER IS
*    REFERRED TO AS THE "OLD" DATA.
*
*    ON ENTRY, 'COUNTER1' CONTAINS THE NUMBER OF RECORDS READ IN
*    TO COMPARE WITH THE CURRENTLY EDITED DATA, AND AS ALWAYS,
*    'RECLINES' CONTAINS THE NUMBER OF EDITABLE DATA LINES.
*    "TOP" AND "BOTTOM" ARE NOT INCLUDED IN EITHER COUNT.
*
*    NOTE THAT WHEN THE DD TO READ IN THE OLD DATA WAS OPENED, ALL
*    LABELS WERE REMOVED AND ALL MESSAGE LINES WERE DELETED, SO
*    'MSGLINES' IS ZERO.
*
*    THE COMPARE PROCESS IS:
*
*      1. SET THE 2 TOPS-OF-DATA AS THE CURRENT SYNC POINT.
*      2. SET THE 2 BOTTOMS-OF-DATA AS THE LATEST VALIDITY LIMIT.
*      3. IF THE NEXT OLD RECORD MATCHES THE NEXT NEW RECORD THEN
*         THIS BECOMES THE NEW CURRENT SYNC POINT, AND GO TO STEP 2.
*      4. GET THE NEXT OLD RECORD AND SEARCH THE NEW DATA FOR A MATCH
*         FROM THE NEXT NEW RECORD ONWARDS, STARTING WITH A RESET
*         FLAG AND AN INVALID (ZERO) CHECKPOINT.
*      5. WHEN THE NEW RECORD AT THE CURRENT VALIDITY LIMIT IS
*         ENCOUNTERED, SET THE FLAG.
*      6. WHEN THE OLD RECORD MATCHES THE NEW RECORD, THEN
*         - IF THE FLAG HAS BEEN SET THEN INVALIDATE THE CHECKPOINT
*           AND PROCESSING OF THE CURRENT OLD RECORD CAN NOW END.
*         - IF THE FLAG HAS NOT BEEN SET THEN CHECKPOINT THIS
*           POTENTIAL SYNC POINT AND CONTINUE THIS SCAN.
*      7. WHEN THE END OF THE NEW DATA IS REACHED -AND- THERE IS
*         A VALID CHECKPOINT, ASSIGN THE CHECKPOINT AS THE NEW
*         VALIDITY LIMIT.
*      8. WHEN THE END OF THE OLD DATA IS REACHED, PROCESS THE
*         VALIDITY LIMIT AS THE NEW SYNC POINT.
*      9. IF UNPROCESSED DATA REMAINS, RETURN TO STEP 2.
*
*    PROCESSING FOR A NEW SYNC POINT INVOLVES:
*      1. REPORTING OLD RECORDS BETWEEN THE PREVIOUS AND CURRENT SYNC
*         POINTS IN MESSAGES.  (THIS INVOLVES REMOVING THE RECORDS
*         FROM THE OLD DATA CHAIN AND INSERTING THEM INTO THE NEW
*         (EDITABLE) DATA CHAIN, AND FLAGGING THEM AS MESSAGES.)
*      2. REPORT NEW RECORDS BETWEEN THE PREVIOUS AND CURRENT SYNC
*         POINTS BY LABELLING THEM AND SHOWING THEM IN YELLOW.
*
*    RECORDS AT SYNC POINTS DO NOT NEED TO BE PROCESSED:
*       - MATCHING "NEW" RECORDS WILL REMAIN UNLABELLED.
*       - MATCHING "OLD" RECORDS WILL REMAIN IN THE "OLD DATA" CHAIN
*         UNTIL THE COMPARE IS COMPLETE, WHEREUPON THEY WILL BE
*         RETURNED TO THE EMPTY RECORD CHAIN TO AWAIT REUSE.
*
*    NOTE THAT 'TOPADDR2' AND 'BTMADDR2' POINT TO FULL SIZE RECORD
*    AREAS EVEN THOUGH THOSE 2 AREAS NEVER CONTAIN DATA, WHICH MEANS
*    THEY CAN BE DISPOSED OF BY MOVING THEM TO THE EMPTY CHAIN ALONG
*    WITH THE OTHER "OLD DATA" ELEMENTS WHICH CONTAIN MATCHED DATA.
*
*    RATHER THAN ACQUIRE MORE WORKING STORAGE TO HOUSE THE VARIABLES
*    NEEDED TO TRACK THE PROGRESS OF THE COMPARE OPERATION, THE SAVE
*    AREA POINTED TO BY R13 WILL BE USED FOR THIS PURPOSE.
*
*    LOCAL WORKING STORAGE FIELD ASSIGMENTS ARE:
*
*         ECLTOPN - "NEW" LATEST SYNC POINT
*         ECLTOPO - "OLD" LATEST SYNC POINT
*         ECVLMTN - "NEW" VALIDITY LIMIT POINT
*         ECVLMTO - "OLD" VALIDITY LIMIT POINT
*         ECCKPTN - "NEW" MATCH CHECKPOINT ENTRY
*         ECCKPTO - "OLD" MATCH CHECKPOINT ENTRY
*         ECCUMCC - CUMULATIVE RECORD COMPARE COUNT
*         ECCUMMC - CUMULATIVE RECORD MATCH COUNT
*         ECLBLCT - UNMATCHED "NEW" LABEL COUNTER
*         ECVFLAG - FLAGS
*               1 - VALIDITY LIMIT REACHED
*               2 - SYNC POINT CANDIDATE HAS BEEN CHECKPOINTED
*
         SPACE
         USING @ECAREA,R13
EDCOMPAR LAM   A0,A15,EDZEROS      ZERO ACCESS REGISTERS
         LAM   A2,A2,DSPCALET      LOAD DATA SPACE ALET
         LAM   A6,A6,DSPCALET      LOAD DATA SPACE ALET
         MVC   ECLBLCT,EDZEROS     RESET LABEL COUNT
         SAC   512                 SET AR MODE
         SPACE
*         LOOK FOR OLD RECORDS IN THE NEW DATA
         SPACE
         MVC   ECCUMCC(8),EDZEROS  ZERO COMPARE AND MATCH ACCUMULATORS
         MVC   ECLTOPN,TOPADDR     SET INITIAL NEW DATA SYNC POINT
         MVC   ECLTOPO,TOPADDR2    SET INITIAL OLD DATA SYNC POINT
EDCMPBLK L     R2,ECLTOPO          POINT TO LAST MATCHED OLD RECORD
         MVC   ECVLMTN,BTMADDR     SET NEW DATA VALIDITY LIMIT
         MVC   ECVLMTO,BTMADDR2    SET OLD DATA VALIDITY LIMIT
         SR    R14,R14             ZERO COMPARE COUNT
         SR    R15,R15             ZERO MATCH COUNT
EDCMPNXO L     R2,FWD(,R2)         POINT TO NEXT OLD RECORD
         C     R2,BTMADDR2         REACHED END OF OLD DATA?
         BE    EDCMPEND            YES, GO REPORT FINAL COMPARE BLOCK
         MVI   ECVFLAG,0           RESET FLAGS FOR THIS OLD RECORD
         L     R6,ECLTOPN          POINT TO LAST MATCHED NEW RECORD
EDCMPNXN L     R6,FWD(,R6)         POINT TO NEXT NEW RECORD
         TM    STATUS4,$4ATTN      ATTENTION INTERRUPT?
         BO    EDCMPINT            YES, TERMINATE PROCESSING
         C     R6,ECVLMTN          REACHED VALIDITY LIMIT?
         BNE   EDCMPCNT            NO, CONTINUE
         TM    ECVFLAG,2           ANYTHING CHECKPOINTED?
         BNO   EDCMPNXO            NO, GO TRY NEXT OLD RECORD
         OI    ECVFLAG,1           YES, SET A FLAG TO MARK THE EVENT
EDCMPCNT C     R6,BTMADDR          REACHED END OF NEW DATA?
         BE    EDCMPBTM            YES, GO CHECK OLD RECORD RESULTS
         A     R14,EDFW1           INCREMENT RECORD COMPARE COUNT
         LR    R0,R6               SAVE NEW RECORD ELEMENT ADDRESS
         LR    R1,R2               SAVE OLD RECORD ELEMENT ADDRESS
         LA    R6,CTLLEN(,R6)      POINT TO NEW RECORD'S DATA
         LA    R2,CTLLEN(,R2)      POINT TO OLD RECORD'S DATA
         L     R7,EDRBND
         A     R6,EDLBND           GET NEW DATA ADDRESS
         S     R7,EDLBND           GET NEW DATA LENGTH
         A     R2,EDLBND           GET OLD DATA ADDRESS
         LR    R3,R7               GET OLD DATA LENGTH
         CLCL  R6,R2               COMPARE THE NEW AND OLD DATA
         LR    R6,R0               RESTORE NEW DATA ADDRESS
         LR    R2,R1               RESTORE OLD DATA ADDRESS
         BNE   EDCMPNXN            MISMATCH SO LOOK AT NEXT NEW RECORD
         A     R15,EDFW1           INCREMENT RECORD MATCH COUNT
         TM    ECVFLAG,2+1         NON-UNIQUE AND/OR BEYOND LIMIT?
         BNZ   EDCMPNXO            YES, GIVE UP ON THIS OLD RECORD
         ST    R6,ECCKPTN          CHECKPOINT NEW DATA MATCHING RECORD
         ST    R2,ECCKPTO          CHECKPOINT OLD DATA MATCHING RECORD
         OI    ECVFLAG,2           FLAG VALID CANDIDATE CHECKPOINTED
         C     R14,EDFW1           DID THE VERY FIRST COMPARE MATCH?
         BE    EDCMPEQL            YES, DECLARE IMMEDIATE SYNC POINT
         B     EDCMPNXN            PROCEED TO CHECK RECORD UNIQUENESS
EDCMPBTM TM    ECVFLAG,2           ANYTHING CHECKPOINTED?
         BNO   EDCMPNXO            NO, GO TRY NEXT OLD RECORD
         MVC   ECVLMTN(8),ECCKPTN  YES, SET IT AS NEW VALIDITY LIMIT
         B     EDCMPNXO            GO TRY NEXT OLD RECORD
         SPACE
*         REMEDIATE (NON-UNIQUE) MATCHING LINES IN MISMATCH BLOCK
         SPACE
EDCMPEND L     R2,ECLTOPO          POINT TO PREVIOUS MATCHED OLD RECORD
         L     R6,ECLTOPN          POINT TO PREVIOUS MATCHED NEW RECORD
         CLC   ECVLMTO,FWD(R2)     ONLY INSERTION(S) IN THIS BLOCK?
         BE    EDOLDSNK            YES, SKIP REMEDIATION PHASE
         CLC   ECVLMTN,FWD(R6)     ONLY DELETION(S) IN THIS BLOCK?
         BE    EDOLDSNK            YES, SKIP REMEDIATION PHASE
EDCFIXDL L     R2,FWD(,R2)         POINT TO NEXT OLD RECORD
         L     R6,FWD(,R6)         POINT TO NEXT NEW RECORD
         C     R2,ECVLMTO          REACHED NEW SYNC POINT?
         BE    EDCFIXUP            YES, TIME FOR UPWARD REMEDIATION
         C     R6,ECVLMTN          REACHED NEW SYNC POINT?
         BE    EDCFIXUP            YES, TIME FOR UPWARD REMEDIATION
         CLC   ECLTOPO,BAK(R2)     FIRST RECORDS IN MISMATCH BLOCK?
         BE    EDCFIXDL            YES, ALREADY KNOW THEY MISMATCH
         A     R14,EDFW1           INCREMENT RECORD COMPARE COUNT
         LR    R0,R6               SAVE NEW RECORD ELEMENT ADDRESS
         LR    R1,R2               SAVE OLD RECORD ELEMENT ADDRESS
         LA    R6,CTLLEN(,R6)      POINT TO NEW RECORD'S DATA
         LA    R2,CTLLEN(,R2)      POINT TO OLD RECORD'S DATA
         L     R7,EDRBND
         A     R6,EDLBND           GET NEW DATA ADDRESS
         S     R7,EDLBND           GET NEW DATA LENGTH
         A     R2,EDLBND           GET OLD DATA ADDRESS
         LR    R3,R7               GET OLD DATA LENGTH
         CLCL  R6,R2               COMPARE THE NEW AND OLD DATA
         LR    R6,R0               RESTORE NEW DATA ADDRESS
         LR    R2,R1               RESTORE OLD DATA ADDRESS
         BNE   EDCFIXDL            THIS RECORD IS ALSO A MISMATCH
         ST    R6,ECVLMTN          UPDATE NEW RECORD SYNC POINT
         ST    R2,ECVLMTO          UPDATE OLD RECORD SYNC POINT
         A     R15,EDFW1           INCREMENT RECORD MATCH COUNT
         B     EDOLDSNK            MISMATCH BLOCK IS NOW SMALLER
EDCFIXUP L     R2,ECVLMTO          POINT TO NEW SYNC MATCHED OLD RECORD
         L     R6,ECVLMTN          POINT TO NEW SYNC MATCHED NEW RECORD
EDCFIXUL L     R2,BAK(,R2)         POINT TO PREVIOUS OLD RECORD
         L     R6,BAK(,R6)         POINT TO PREVIOUS NEW RECORD
         C     R2,ECLTOPO          REACHED OLD SYNC POINT?
         BE    EDOLDSNK            YES, REMEDIATION COMPLETE
         C     R6,ECLTOPN          REACHED OLD SYNC POINT?
         BE    EDOLDSNK            YES, REMEDIATION COMPLETE
         A     R14,EDFW1           INCREMENT RECORD COMPARE COUNT
         LR    R0,R6               SAVE NEW RECORD ELEMENT ADDRESS
         LR    R1,R2               SAVE OLD RECORD ELEMENT ADDRESS
         LA    R6,CTLLEN(,R6)      POINT TO NEW RECORD'S DATA
         LA    R2,CTLLEN(,R2)      POINT TO OLD RECORD'S DATA
         L     R7,EDRBND
         A     R6,EDLBND           GET NEW DATA ADDRESS
         S     R7,EDLBND           GET NEW DATA LENGTH
         A     R2,EDLBND           GET OLD DATA ADDRESS
         LR    R3,R7               GET OLD DATA LENGTH
         CLCL  R6,R2               COMPARE THE NEW AND OLD DATA
         LR    R6,R0               RESTORE NEW DATA ADDRESS
         LR    R2,R1               RESTORE OLD DATA ADDRESS
         BNE   EDCFIXUL            THIS RECORD IS ALSO A MISMATCH
         ST    R6,ECVLMTN          UPDATE NEW RECORD SYNC POINT
         ST    R2,ECVLMTO          UPDATE OLD RECORD SYNC POINT
         A     R15,EDFW1           INCREMENT RECORD MATCH COUNT
         B     EDCFIXUL            MISMATCH BLOCK IS NOW SMALLER
         SPACE
*         INSERT OLD DATA RECORD BLOCK AS MESSAGE LINES
         SPACE
EDCMPEQL MVC   ECVLMTN(8),ECCKPTN  VERY NEXT RECORDS ARE ALSO EQUAL
EDOLDSNK A     R14,ECCUMCC         ACCUMULATE COMPARE COUNT
         A     R15,ECCUMMC         ACCUMULATE MATCH COUNT
         ST    R14,ECCUMCC         SAVE UPDATED COUNT
         ST    R15,ECCUMMC         SAVE UPDATED COUNT
         L     R2,ECLTOPO          POINT TO PREVIOUS MATCHED OLD RECORD
         L     R6,ECLTOPN          POINT TO PREVIOUS MATCHED NEW RECORD
         SR    R15,R15             ZERO A COUNTER
         LR    R1,R6               SAVE PREVIOUS NEW SYNC POINT ADDRESS
         L     R2,FWD(,R2)         POINT TO NEXT OLD RECORD
         C     R2,ECVLMTO          ANY MISMATCHED OLD RECORDS IN BLOCK?
         BE    EDNEWSNK            NO, NO MESSAGES TO ADD
         L     R1,FWD(,R6)         POINT PAST MESSAGE INSERTION POINT
         ST    R2,FWD(,R6)         ENCHAIN FIRST MESSAGE
         ST    R6,BAK(,R2)
EDCMPLP6 OI    FLG1(R2),LMSG       FLAG RECORD AS A MESSAGE
         LA    R15,1(,R15)         COUNT ADDED MESSAGE LINE
         L     R2,FWD(,R2)         POINT TO NEXT MESSAGE TO ADD
         C     R2,ECVLMTO          REACHED END OF MESSAGES TO ADD?
         BNE   EDCMPLP6            NO, GO ADD AND COUNT IT
         LR    R6,R1               POINT PAST ADDED MESSAGES
         L     R2,BAK(,R2)         POINT BACK TO LAST MESSAGE
         ST    R6,FWD(,R2)         ENCHAIN LAST MESSAGE
         ST    R2,BAK(,R6)
         LR    R1,R2               POINT TO LAST ADDED MESSAGE
         A     R15,MSGLINES        TRACK ADDED MESSAGES
         ST    R15,MSGLINES
         L     R2,ECLTOPO          POINT TO PREVIOUS MATCHED OLD RECORD
         L     R6,ECVLMTO          POINT TO CURRENT MATCHED OLD RECORD
         ST    R6,FWD(,R2)         EXCISE THE TRANSFERRED MESSAGES
         ST    R2,BAK(,R6)
         SPACE
*         LABEL EACH LINE IN THE NEW DATA RECORD BLOCK
         SPACE
EDNEWSNK LR    R6,R1               SNEAK UP ON FIRST RECORD TO PROCESS
EDCMPLP7 L     R6,FWD(,R6)         POINT TO NEXT NEW RECORD
         C     R6,ECVLMTN          REACHED CURRENT MATCHED NEW RECORD?
         BE    EDBLKSNK            YES, MISMATCH BLOCK NOW PROCESSED
*                                  COULD COUNT MISMATCHED RECORDS HERE
         SAC   0                   SET PRIMARY MODE FOR SVC
         BAS   R14,GETALABL        GET A NEW (ZEROED) LABEL ELEMENT
         SAC   512                 RESTORE AR MODE
         LTR   R15,R15             SUCCESS?
         BNZ   EDCMPLBX            NO
         USING @EDLABEL,R1
         ST    R6,EDL_ADDR         SET THE RECORD ADDRESS
         LA    R0,1
         A     R0,ECLBLCT          GET THE LABEL NUMBER
         ST    R0,ECLBLCT          SAVE UPDATED NUMBER
         UNPK  EDL_NAME(7),ECLBLCT+1(4) UNPACK THE LABEL NUMBER
         TR    EDL_NAME,EDCMLBTB-C'0'   CONVERT HEX DIGITS TO LETTERS
         MVI   EDL_NAME,C'.'       SUPPLY LEADING PERIOD
         MVC   EDL_NEXT,LABANKOR   SET THE CHAIN POINTER
         ST    R1,LABANKOR         ADD THIS ELEMENT TO THE CHAIN
         NI    FLG1(R6),255-XCLD   DO NOT EXCLUDE THIS LINE
         OI    FLG2(R6),LLBL       FLAG LABELLED LINE
         OI    FLG3(R6),LNEW       HIGHLIGHT THIS LINE APPROPRIATELY
         B     EDCMPLP7            PROCESS WHOLE MISMATCHED NEW BLOCK
         SPACE
EDCMPLBX MVI   MSG,123             REQUEST ABORTED - STORAGE FULL
         SPACE
*         PROMOTE NEW SYNC POINT AND RESUME COMPARE
         SPACE
EDBLKSNK MVC   ECLTOPN(8),ECVLMTN  CURRENT SYNC POINT NOW PREVIOUS
         L     R2,ECLTOPO          POINT TO MATCHED OLD RECORD
         CLC   FWD(4,R6),FWD(R2)   REACHED END OF DATA?  (BOTH ZERO?)
         BNE   EDCMPBLK            NO, GO COMPARE NEXT BLOCK
         SPACE
*         PREPARE A MESSAGE TO REPORT THE COMPARE RESULTS
         SPACE
EDCMPINT L     R2,BTMADDR2         POINT TO END-OF-OLD-DATA
         MVC   FWD(4,R2),MPTANKOR  CHAIN TO TO EMPTY CHAIN
         MVC   MPTANKOR,TOPADDR2   MOVE ALL OLD DATA RECORDS TO CHAIN
         MVC   TOPADDR2(8),EDZEROS DELETE MATCHED OLD DATA
         MVI   MSG,122             PROCESSING INTERRUPTED
         TM    STATUS4,$4ATTN      ATTENTION INTERRUPT?
         BO    EDCOPYEX            YES, TERMINATE COMPARE
         SPACE
*         DETERMINE THE COMPARE RESULT MESSAGE TO SHOW
         SPACE
         L     R0,MSGLINES         GET DELETED LINE COUNT
         LR    R14,R0              COPY IT
         L     R1,ECLBLCT          GET INSERTED LINE COUNT
         AR    R14,R1              ADD THE 2 COUNTS
         BZ    EDNODIFF            NO DIFFERENCES WERE FOUND
         SPACE
*         REPORT THE NEW AND REMOVED LINE COUNTS
         SPACE
         CVD   R1,DOUBLE
         MVC   MSG+2(6),EDED5Z
         MVI   MSG+6,X'21'
         ED    MSG+2(6),DOUBLE+5
         MVC   MSG+8(10),=CL10' INSERTS /'
         CVD   R0,DOUBLE
         MVC   MSG+18(6),EDED5Z
         MVI   MSG+22,X'21'
         ED    MSG+18(6),DOUBLE+5
         MVC   MSG+24(8),=CL8' DELETES'
         LA    R1,30               GET MAXIMUM MESSAGE LENGTH
         TM    STATUS10,$10CAP     CAPS ON?
         BO    EDIFFLP1            YES
         TR    MSG+2(30),EDTUNKAP  NO, SHOW SOME LOWER CASE
EDIFFLP1 CLI   MSG+19,C' '         LEADING BLANK?
         BNE   EDIFFLP2            NO
         MVC   MSG+19(13),MSG+20   YES, SUPPRESS IT
         BCT   R1,EDIFFLP1         GO CHECK FOR MORE
EDIFFLP2 STH   R1,MSG              SAVE MESSAGE LENGTH
         CLI   MSG+2,C' '          LEADING BLANK?
         BNE   EDCMPEXC            NO
         MVC   MSG+2(29),MSG+3     YES, SUPPRESS IT
         BCT   R1,EDIFFLP2         GO CHECK FOR MORE
         SPACE
*         REPORT THE COLUMN RANGE THAT COMPARED EQUAL
         SPACE
EDNODIFF MVI   MSG,235             COMPARED COLUMNS ARE THE SAME
         SAC   0                   SET PRIMARY MODE
         LAM   A0,A15,EDZEROS      ZERO ACCESS REGISTERS
         L     R15,EDMSGSAD
         BASR  R14,R15             FETCH MESSAGE TEXT TEMPLATE
         LA    R0,1
         A     R0,EDLBND
         CVD   R0,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  MSG+10(5),DOUBLE
         L     R0,EDRBND
         CVD   R0,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  MSG+19(5),DOUBLE
         LH    R0,MSG              GET THE MESSAGE LENGTH
EDNODIF1 CLI   MSG+19,C'0'         LEADING ZERO?
         BNE   EDNODIF2            NO
         MVC   MSG+19(18),MSG+20   YES, SUPPRESS IT
         BCT   R0,EDNODIF1
EDNODIF2 CLI   MSG+10,C'0'         LEADING ZERO?
         BNE   EDNODIFX            NO
         MVC   MSG+10(27),MSG+11   YES, SUPPRESS IT
         BCT   R0,EDNODIF2
EDNODIFX STH   R0,MSG              UPDATE MESSAGE LENGTH
         L     R14,EDRETSV1        PREPARE FOR POSSIBLE FAST RETURN
         TM    EDFLG5,E5XCLD       LINE EXCLUSION REQUESTED?
         BNOR  R14                 NO, KEEP CURRENT LOCATION
         SPACE
*         EXCLUDE MATCHED LINES IF REQUESTED
         SPACE
EDCMPEXC L     R2,TOPADDR          POINT TO TOP OF DATA
         SR    R1,R1               INITIALIZE NX LINE COUNTER
         ST    R2,LINEADDR         SHOW FROM TOP OF DATA
         ST    R1,LINENMBR         RESET TOP LINE NUMBER
         ST    R1,FNDNUM           RESET LAST-FOUND NUMBER
         ST    R1,FNDOFF           RESET LAST-FOUND OFFSET
         ST    R1,EDCSROUT         RESET CURSOR POSITION
         LAM   A2,A2,DSPCALET      LOAD DATA SPACE ALET
         SAC   512                 RESTORE AR MODE
         TM    EDFLG5,E5XCLD       LINE EXCLUSION REQUESTED?
         BNO   EDCMPLOC            NO, GO LOCATE TO FIRST MISMATCH
         PACK  DOUBLE,EPC#NX
         CVB   R0,DOUBLE           GET COMPARE X NX LINE COUNT
EDCMXLPF L     R2,FWD(,R2)         POINT TO THE NEXT RECORD
         C     R2,BTMADDR          BOTTOM OF DATA?
         BE    EDCMXREV            YES, TIME TO REVERSE DIRECTION
         TM    FLG1(R2),LMSG       MESSAGE LINE?
         BO    EDCMPNXF            YES
         TM    FLG3(R2),LNEW       UNMATCHED EDIT DATA LINE?
         BO    EDCMPNXF            YES
         OI    FLG1(R2),XCLD       EXCLUDE THIS LINE
         LTR   R1,R1               SHOULD THIS LINE BE DISPLAYED?
         BNP   EDCMXLPF            NO, GO PROCESS NEXT RECORD
         NI    FLG1(R2),255-XCLD   YES, UNEXCLUDE THIS LINE
         BCTR  R1,0                DECREMENT NX LINE COUNT
         B     EDCMXLPF            GO PROCESS NEXT RECORD
EDCMPNXF NI    FLG1(R2),255-XCLD   UNEXCLUDE THIS LINE
         LR    R1,R0               LOAD NX COUNTER
         B     EDCMXLPF            GO PROCESS NEXT RECORD
EDCMXREV LTR   R0,R0               SHOWING ANY MATCHED LINES?
         BNP   EDCOPYEX            NO, EXCLUDE PROCESSING COMPLETE
         SR    R1,R1               REINITIALIZE NX LINE COUNTER
EDCMXLPB L     R2,BAK(,R2)         POINT TO THE PREVIOUS RECORD
         C     R2,TOPADDR          TOP OF DATA?
         BE    EDCOPYEX            YES, EXCLUDE PROCESSING COMPLETE
         TM    FLG1(R2),LMSG       MESSAGE LINE?
         BO    EDCMPNXB            YES
         TM    FLG3(R2),LNEW       UNMATCHED EDIT DATA LINE?
         BO    EDCMPNXB            YES
         LTR   R1,R1               SHOULD THIS LINE BE DISPLAYED?
         BNP   EDCMXLPB            NO, GO PROCESS PREVIOUS RECORD
         NI    FLG1(R2),255-XCLD   YES, UNEXCLUDE THIS LINE
         BCTR  R1,0                DECREMENT NX LINE COUNT
         B     EDCMXLPB            GO PROCESS PREVIOUS RECORD
EDCMPNXB NI    FLG1(R2),255-XCLD   UNEXCLUDE THIS LINE
         LR    R1,R0               LOAD NX COUNTER
         B     EDCMXLPB            GO PROCESS PREVIOUS RECORD
         SPACE
*         LOCATE TO FIRST MISMATCHED LINE
         SPACE
EDCMPLOC TM    STATUS4,$4ATTN      ATTENTION INTERRUPT?
         BO    EDCOPYEX            YES, STOP RIGHT NOW
         ICM   R2,15,FWD(R2)
         BZ    EDCOPYEX            HANDLE UNEXPECTED BOTTOM OF DATA
         TM    FLG1(R2),LMSG       MISMATCHED OLD DATA?
         BO    EDCMPGOT            YES, DO NOT INCREMENT LINE NUMBER
         A     R1,EDFW1            NO, INCREMENT LINE COUNT
         TM    FLG3(R2),LNEW       MISMATCHED NEW DATA?
         BNO   EDCMPLOC            YES, DO NOT INCREMENT LINE NUMBER
EDCMPGOT ST    R2,LINEADDR         SHOW FROM THIS LINE
         ST    R1,LINENMBR         SET TOP LINE NUMBER
         B     EDCOPYEX            COMPARE PROCESSING COMPLETE
         SPACE
         DROP  R13                 @ECAREA
         DROP  R10                 EDCOPY
         SPACE
         DC    0D'0'
EDCMLBTB DC    CL16'UABCDEFGHIJKLMNO'    COMPARE LABEL TRANSLATE TABLE
         LTORG
         DC    0H'0'
         TITLE '  U N D O  '
         USING EDUNDO,R10
EDUNDO   LR    R10,R15             SET LOCAL BASE
         TM    OPD2+6,PRESENT      TOO MANY OPERANDS?
         BO    ED2MANY             YES
         ST    R14,EDRETSV1        SAVE RETURN ADDRESS
         SPACE
         TM    OPD1+6,PRESENT      ANY OPERANDS?
         BZ    EDDOUNDO            NO, GO DO AN UNDO
         TM    OPD1+6,QUOTED       IS OPERAND QUOTED?
         BO    EDINVOP             YES, INVALID
         MVI   MSG,145             SETTING UNCHANGED
         L     R4,OPD1             POINT TO OPERAND
         CLI   OPD1+7,1            IS IT 'ON'?
         BE    EDUNDOON            YES
         SPACE
         CLI   OPD1+7,2            IS IT 'OFF'?
         BNE   EDINVOP             NO, INVALID OPERAND
         TM    UNDOFLGS,DCBOFOPN   IS UNDO FILE OPEN?
         BNO   *+8                 NO, BUT TRY DEALLOC JUST IN CASE
         MVI   MSG,144             SETTING NOW OFF
         L     R15,UNDOSTO@
         BASR  R14,R15             CLOSE AND FREE UNDO FILE
         B     EDUNDOEX
         SPACE
EDUNDOON TM    UNDOFLGS,DCBOFOPN   IS UNDO FILE OPEN?
         BO    EDUNDOEX            YES, UNDO ALREADY AVAILABLE
         MVI   MSG,143             SETTING NOW ON
         L     R15,UNDOINI@
         BASR  R14,R15             ALLOCATE AND OPEN UNDO FILE
         B     EDUNDOEX            UNDOINIT MAY OVERLAY MESSAGE
         SPACE
EDDOUNDO TM    UNDOFLGS,DCBOFOPN   IS UNDO FILE OPEN?
         BNO   EDUNDONA            NO, UNDO IS NOT AVAILABLE
         L     R1,UNDOCRNT         POINT TO CURRENT STATUS MEMBER
         LA    R0,L'UNDOLAST       GET LENGTH OF AN UNDO ENTRY
         SR    R1,R0               POINT TO PREVIOUS ENTRY
         LA    R0,UNDOMEMS         POINT TO EARLIEST POSSIBLE ENTRY
         CR    R1,R0               BACKED UP TO BEFORE START OF TABLE?
         BL    EDUNDONA            YES, CANNOT UNDO ANYMORE
         CLI   2(R1),0             IS R OF TTR ZERO?
         BE    EDUNDONA            YES, EMPTY ENTRY
         ST    R1,UNDOCRNT         NO, SET THIS AS NEW CURRENT ENTRY
         L     R15,UNDORES@        LEAVE RETURN ADDRESS IN EDRETSV1
         BR    R15                 GO PERFORM AN UNDO
         SPACE
EDUNDONA MVI   MSG,146             UNDO NOT AVAILABLE
         NI    STATUS16,255-$16RFC CLEAR ANY PENDING COMMAND
         SPACE
EDUNDOEX L     R14,EDRETSV1        RESTORE RETURN ADDRESS
         BR    R14                 RETURN TO CALLER
         SPACE
         DROP  R10                 EDUNDO
         TITLE '  R E D O  '
         USING EDREDO,R10
EDREDO   LR    R10,R15             SET LOCAL BASE
         LA    R15,OPD1            SET FOR ED2MANY
         TM    OPD1+6,PRESENT      ANY OPERANDS?
         BO    ED2MANY             YES, TOO MANY
         ST    R14,EDRETSV1        SAVE RETURN ADDRESS
         SPACE
         TM    UNDOFLGS,DCBOFOPN   IS UNDO FILE OPEN?
         BNO   EDREDONA            NO, REDO IS NOT AVAILABLE
         L     R1,UNDOCRNT         POINT TO CURRENT STATUS MEMBER
         LA    R1,L'UNDOLAST(,R1)  POINT TO NEXT ENTRY
         C     R1,UNDOLATE         GONE BEYOND LAST ENTRY?
         BH    EDREDONA            YES, CURRENT IS MOST RECENT
         CLI   2(R1),0             IS R OF TTR ZERO?
         BE    EDREDONA            YES, INVALIDATED ENTRY
         ST    R1,UNDOCRNT         NO, SET THIS AS NEW CURRENT ENTRY
         L     R15,UNDORES@        LEAVE RETURN ADDRESS IN EDRETSV1
         BR    R15                 GO PERFORM A REDO
         SPACE
EDREDONA MVI   MSG,147             REDO NOT AVAILABLE
         NI    STATUS16,255-$16RFC CLEAR ANY PENDING COMMAND
         SPACE
         L     R14,EDRETSV1        RESTORE RETURN ADDRESS
         BR    R14                 RETURN TO CALLER
         SPACE
         DROP  R10                 EDREDO
         TITLE '  S O R T  '
         USING EDSORT,R10
EDSORT   LR    R10,R15             SET LOCAL BASE
         LA    R15,OPD5            SET FOR ED2MANY
         TM    OPD5+6,PRESENT      TOO MANY OPERANDS?
         BO    ED2MANY             YES
         ST    R14,EDRETSV1        SAVE RETURN ADDRESS
         SPACE
         MVI   EDFLGS,0            CLEAR SORT FLAGS
         LA    R0,1
         A     R0,EDLBND
         ST    R0,EDSRTCOL         PRIME SORT START COLUMN
         STCM  R0,12,EDSRTEND      CLEAR SORT END COLUMN
         LA    R0,4                GET MAXIMUM OPERAND COUNT
         LA    R15,OPD1            POINT TO FIRST OPERAND DETAILS
ESRTOPLP TM    6(R15),PRESENT      IS THERE ANOTHER OPERAND?
         BZ    ESRTOPOK            NO, GO COMMENCE SORTING
         ST    R15,16(,R13)        SAVE OPERAND ADDRESS FOR EDINVOP
         TM    6(R15),QUOTED       IS OPERAND QUOTED?
         BO    EDINVOP             YES, INVALID
         LH    R1,4(,R15)          GET LENGTH
         LTR   R1,R1               IS IT NULL STRING?
         BNP   EDINVOP             YES, ERROR
         L     R14,0(,R15)         GET ADDRESS OF DATA
         BCTR  R1,0
         TM    6(R15),NUMERIC      IS IT NUMERIC?
         BNO   ESRTALFA            NO, BRANCH
         TM    EDFLGS,EDS2N        COLUMN SPECIFICATIONS ALL DONE?
         BO    EDINVOP             YES, ERROR
         EX    R1,EDNUMPAK
         CVB   R1,DOUBLE
         LTR   R1,R1               IS IT ZERO?
         BNP   EDBDCOL             YES, ERROR
         C     R1,MAXRECSZ         COLUMN PAST END OF RECORD?
         BH    EDBDCOL             YES, ERROR
         TM    EDFLGS,EDS1N        FIRST COLUMN SPEC?
         BO    EDSCOLM2            NO
         STH   R1,EDSRTCOL         YES, SAVE IT
         OI    EDFLGS,EDS1N        FLAG IT
         B     EDSNXTOP
EDSCOLM2 CH    R1,EDSRTCOL         LARGER NUMBER?
         BH    EDCOLBIG            YES
         MVC   EDSRTEND,EDSRTCOL   NO, SAVE LARGER NUMBER
         STH   R1,EDSRTCOL         SAVE SMALLER NUMBER
         B     *+8
EDCOLBIG STH   R1,EDSRTEND         SAVE LARGER NUMBER
         OI    EDFLGS,EDS2N        FLAG COLUMNS ALL DONE
         B     EDSNXTOP
*                                  R15->OPD  R14->DATA  R1=DATA-LENGTH
ESRTALFA CLI   7(R15),EDSX         EXCLUDED RECORDS ONLY?
         BE    EDSRTEXC            YES
         CLI   7(R15),EDSNX        UNEXCLUDED RECORDS ONLY?
         BE    EDSRTEXC            YES
         CLI   7(R15),EDSA         ASCENDING ORDER REQUESTED?
         BE    EDSRTORD            YES
         CLI   7(R15),EDSD         DESCENDING ORDER REQUESTED?
         BE    EDSRTORD            YES
         B     EDINVOP             INVALID OPERAND
EDSRTEXC TM    EDFLGS,EDSNX+EDSX   EXCLUSION AREADY SPECIFIED?
         BNZ   EDINCON             YES, OPERAND CONFLICT
         OC    EDFLGS,7(R15)       NO, FLAG THIS OPERAND
         B     EDSNXTOP
EDSRTORD TM    EDFLGS,EDSA+EDSD    ORDER AREADY SPECIFIED?
         BNZ   EDINCON             YES, OPERAND CONFLICT
         OC    EDFLGS,7(R15)       NO, FLAG THIS OPERAND
*        B     EDSNXTOP
         SPACE
EDSNXTOP LA    R15,8(,R15)         POINT TO NEXT OPERAND DESCRIPTOR
         BCT   R0,ESRTOPLP         PROCESS NEXT OPERAND IF PRESENT
         SPACE
ESRTOPOK LH    R0,EDSRTCOL         GET SORT "KEY" START COLUMN
         BCTR  R0,0                CONVERT START COLUMN TO OFFSET
         STH   R0,EDSRTCOL         SAVE IT
         LH    R1,EDSRTEND         GET SORT "KEY" END COLUMN
         TM    EDFLGS,EDS2N        WAS END SPECIFIED?
         BO    EDSENDOK            YES
         L     R1,EDRBND           NO, GO TO END OF BOUNDS
         CR    R1,R0               IS START BEYOND BOUNDS?
         BH    EDSENDOK            NO
         L     R1,MAXRECSZ         YES, GO TO END OF RECORD
EDSENDOK SR    R1,R0               GET LENGTH OF "KEY"
         STH   R1,EDSRTEND         SAVE IT
         SPACE
         LAM   A0,A15,EDZEROS      ZERO ACCESS REGISTERS
         LAM   A2,A2,DSPCALET      LOAD DATA SPACE ALET
         LAM   A6,A6,DSPCALET      LOAD DATA SPACE ALET
         SAC   512                 SET AR MODE
         SPACE
         MVC   COUNTER1,TOPADDR    INITIAL SORT RANGE START LIMIT
         MVC   COUNTER2,BTMADDR    INITIAL SORT RANGE END LIMIT
         SPACE
EDPASSLP NI    EDFLGS,255-EDSBUBL  NO RECORDS MOVED YET THIS PASS
         TM    STATUS4,$4ATTN      ATTENTION INTERRUPT?
         BO    EDSRTATN            YES, INTERRUPT SORT
         LM    R4,R5,COUNTER1      GET SORT RECORD RANGE LIMITS
         SPACE
         LR    R2,R4               BEGIN FORWARD PASS
EDSRTF10 L     R2,FWD(,R2)         POINT TO NEXT RECORD TO SORT
         CR    R2,R5               REACHED END OF DATA?
         BE    EDPASSBK            YES, FORWARD PASS COMPLETE
         TM    EDFLGS,EDSX+EDSNX   EXCLUSION A CONSIDERATION?
         BZ    EDSRTF11            NO
         TM    FLG1(R2),XCLD       IS THIS LINE EXCLUDED?
         BO    EDSRTF1X            YES
         TM    EDFLGS,EDSX         ONLY SORTING EXCLUDED LINES?
         BO    EDSRTF10            YES, GO GET ANOTHER ONE
         B     EDSRTF11            NO, NOW HAVE FIRST RECORD
EDSRTF1X TM    EDFLGS,EDSNX        ONLY SORTING UNEXCLUDED LINES?
         BO    EDSRTF10            YES, GO GET ANOTHER ONE
EDSRTF11 LR    R6,R2
EDSRTF20 L     R6,FWD(,R6)         POINT TO NEXT RECORD TO SORT
         CR    R6,R5               REACHED END OF DATA?
         BE    EDPASSBK            YES, FORWARD PASS COMPLETE
         TM    EDFLGS,EDSX+EDSNX   EXCLUSION A CONSIDERATION?
         BZ    EDSRTF21            NO
         TM    FLG1(R6),XCLD       IS THIS LINE EXCLUDED?
         BO    EDSRTF2X            YES
         TM    EDFLGS,EDSX         ONLY SORTING EXCLUDED LINES?
         BO    EDSRTF20            YES, GO GET ANOTHER ONE
         B     EDSRTF21            NO, NOW HAVE SECOND RECORD
EDSRTF2X TM    EDFLGS,EDSNX        ONLY SORTING UNEXCLUDED LINES?
         BO    EDSRTF20            YES, GO GET ANOTHER ONE
EDSRTF21 BAS   R14,EDSRTCMP        GO COMPARE THE TWO RECORDS' DATA
         TM    EDFLGS,EDSSWAP      DATA SWAPPED?
         BNO   EDSRTF10            NO, CONTINUE FORWARD PASS
         ST    R6,COUNTER2         UPDATE END LIMIT FOR NEXT TIME
         B     EDSRTF10            CONTINUE FORWARD PASS
         SPACE
EDSRTATN MVI   MSG,59              INTERRUPT - SORT TERMINATED
         NI    STATUS16,255-$16RFC CLEAR ANY PENDING COMMAND
         B     EDSORTEX
         SPACE
EDPASSBK TM    EDFLGS,EDSBUBL      WAS ANY DATA SORTED IN FORWARD PASS?
         BNO   EDSORTEX            NO, SORT COMPLETE
         LR    R6,R5               BEGIN BACKWARD PASS
EDSRTB10 L     R6,BAK(,R6)         POINT TO NEXT RECORD TO SORT
         CR    R6,R4               REACHED TOP OF DATA?
         BE    EDPASSNX            YES, BACKWARD PASS COMPLETE
         TM    EDFLGS,EDSX+EDSNX   EXCLUSION A CONSIDERATION?
         BZ    EDSRTB11            NO
         TM    FLG1(R6),XCLD       IS THIS LINE EXCLUDED?
         BO    EDSRTB1X            YES
         TM    EDFLGS,EDSX         ONLY SORTING EXCLUDED LINES?
         BO    EDSRTB10            YES, GO GET ANOTHER ONE
         B     EDSRTB11            NO, NOW HAVE FIRST RECORD
EDSRTB1X TM    EDFLGS,EDSNX        ONLY SORTING UNEXCLUDED LINES?
         BO    EDSRTB10            YES, GO GET ANOTHER ONE
EDSRTB11 LR    R2,R6
EDSRTB20 L     R2,BAK(,R2)         POINT TO NEXT RECORD TO SORT
         CR    R2,R4               REACHED END OF DATA?
         BE    EDPASSNX            YES, BACKWARD PASS COMPLETE
         TM    EDFLGS,EDSX+EDSNX   EXCLUSION A CONSIDERATION?
         BZ    EDSRTB21            NO
         TM    FLG1(R2),XCLD       IS THIS LINE EXCLUDED?
         BO    EDSRTB2X            YES
         TM    EDFLGS,EDSX         ONLY SORTING EXCLUDED LINES?
         BO    EDSRTB20            YES, GO GET ANOTHER ONE
         B     EDSRTB21            NO, NOW HAVE SECOND RECORD
EDSRTB2X TM    EDFLGS,EDSNX        ONLY SORTING UNEXCLUDED LINES?
         BO    EDSRTB20            YES, GO GET ANOTHER ONE
EDSRTB21 BAS   R14,EDSRTCMP        GO COMPARE THE TWO RECORDS' DATA
         TM    EDFLGS,EDSSWAP      DATA SWAPPED?
         BNO   EDSRTB10            NO, CONTINUE FORWARD PASS
         ST    R2,COUNTER1         UPDATE START LIMIT FOR NEXT TIME
         B     EDSRTB10            CONTINUE BACKWARD PASS
         SPACE
EDPASSNX TM    EDFLGS,EDSBUBL      WAS ANY DATA SORTED IN THIS CYCLE?
         BO    EDPASSLP            YES, CONTINUE WITH SORT
         SPACE
EDSORTEX SAC   0                   SET PRIMARY MODE
         LAM   A0,A15,EDZEROS      ZERO ACCESS REGISTERS
         L     R14,EDRETSV1        RESTORE RETURN ADDRESS
         BR    R14                 RETURN TO CALLER
         SPACE
*         COMPARE TWO RECORDS AND SWAP IF APPROPRIATE
*
*         INPUT:
*              R2       = "EARLIER" RECORD CONTROL HEADER ADDRESS
*              R6       = "LATER" RECORD CONTROL HEADER ADDRESS
*              R14      = RETURN ADDRESS
*              R4       = "UPPER" SORT LIMIT SO DO NOT CHANGE HERE
*              R5       = "LOWER" SORT LIMIT SO DO NOT CHANGE HERE
*              EDSRTCOL = SORT FIELD RECORD OFFSET
*              EDSRTEND = SORT FIELD LENGTH
*              EDSD     - TESTED TO DETERMINE REQUESTED ORDERING
*
*         OUTPUT:
*              EDSSWAP  - RESET IF SWAP NOT PERFORMED
*              EDSSWAP  - SET IF SWAP IS PERFORMED
*              EDSBUBL  - SET IF SWAP IS PERFORMED
*
EDSRTCMP NI    EDFLGS,255-EDSSWAP  RESET RECORD SWAP FLAG
         LR    R0,R2               SAVE "EARLIER" RECORD ADDRESS
         LR    R1,R6               SAVE "LATER" RECORD ADDRESS
         LA    R2,CTLLEN(,R2)      POINT TO "EARLIER" DATA
         LA    R6,CTLLEN(,R6)      POINT TO "LATER" DATA
         AH    R2,EDSRTCOL         POINT TO "EARLIER" SORT FIELD
         AH    R6,EDSRTCOL         POINT TO "LATER" SORT FIELD
         LH    R3,EDSRTEND         GET "EARLIER" SORT FIELD LENGTH
         LR    R7,R3               GET "LATER" SORT FIELD LENGTH
         CLCL  R2,R6               COMPARE THE TWO RECORDS' SORT FIELDS
         LR    R2,R0               RESTORE "EARLIER" RECORD ADDRESS
         LR    R6,R1               RESTORE "LATER" RECORD ADDRESS
         BER   R14                 PRESERVE ORDER IF EQUAL SO RETURN
         BL    EDSRTLOW            "EARLIER" COMPARES LOW TO "LATER"
         TM    EDFLGS,EDSD         DESCENDING ORDER REQUIRED?
         BOR   R14                 YES, WHICH IS THE WAY IT IS
         B     EDSRTSWP            NO, SO NEED TO SWAP THE RECORDS
EDSRTLOW TM    EDFLGS,EDSD         DESCENDING ORDER REQUIRED?
         BNOR  R14                 NO, ASCENDING SO RETURN
         SPACE
EDSRTSWP XC    FWD(8,R2),FWD(R6)   SWAP CHAIN POINTERS
         XC    FWD(8,R6),FWD(R2)
         XC    FWD(8,R2),FWD(R6)
         C     R6,FWD(,R6)         POINTING TO SELF?
         BNE   *+8                 NO
         ST    R2,FWD(,R6)         YES, MUST HAVE BEEN ADJACENT RECORDS
         C     R2,BAK(,R2)         POINTING TO SELF?
         BNE   *+8                 NO
         ST    R6,BAK(,R2)         YES, MUST HAVE BEEN ADJACENT RECORDS
         L     R2,FWD(,R2)         POINT TO RECORD AFTER SWAPPED PAIR
         L     R6,BAK(,R6)         POINT TO RECORD BEFORE SWAPPED PAIR
         ST    R0,BAK(,R2)
         ST    R1,FWD(,R6)
         LA    R6,EDPASSBK
         LA    R14,0(,R14)         CLEAN UP ADDRESS
         LR    R2,R1               POINT TO NEW "EARLIER" RECORD
         CR    R14,R6              FORWARD PASS?
         BNL   EDSRTMOD            NO, BACKWARD PASS
         LR    R2,R0               YES, POINT TO NEW "LATER" RECORD
         TM    EDFLGS,EDSBUBL      ANY SWAP THIS PASS YET?
         BO    EDSRTMOD            YES, SKIP LAST RECORD CHECK
         CLC   BTMADDR,FWD(R2)     LAST RECORD?
         BNE   EDSRTMOD            NO
         LR    R2,R1               YES, MIGHT BE LAST RECORD GOING UP
EDSRTMOD OI    FLG1(R2),CHGL       MARK RECORD AS CHANGED
         OI    EDFLGS,EDSBUBL+EDSSWAP
         OI    EDFLG1,SAVEY+SAVEZ  FLAG IN-CORE DATA HAS CHANGED
         LR    R2,R1               "LATER" IS NOW "EARLIER"
         LR    R6,R0               "EARLIER" IS NOW "LATER"
         L     R2,FWD(,R2)         POINT TO RECORD AFTER "EARLIER"
         L     R6,BAK(,R6)         POINT TO RECORD BEFORE "LATER"
         ST    R1,BAK(,R2)         POINT BACK TO "EARLIER"
         ST    R0,FWD(,R6)         POINT FORWARD TO "LATER"
         LR    R2,R1               RESTORE NEW "EARLIER" POINTER
         LR    R6,R0               RESTORE NEW "LATER" POINTER
         BR    R14                 RETURN TO CALLER
         SPACE
         DROP  R10                 EDSORT
         TITLE '  D E L E T E  '
         USING EDDELETE,R10
EDDELETE LR    R10,R15             SET LOCAL BASE
         LA    R15,OPD3            SET FOR ED2MANY
         TM    OPD3+6,PRESENT      MORE THAN TWO OPERANDS?
         BO    ED2MANY             YES, TOO MANY
         TM    OPD2+6,PRESENT      AT LEAST TWO OPERANDS?
         BNO   EDMISOP             NO, NOT ENOUGH
*        ST    R14,EDRETSV1        SAVE RETURN ADDRESS
         SPACE
         MVI   DOUBLE+1,0          CLEAR A FLAG BYTE
         LA    R0,2                GET OPERAND COUNT
         LA    R15,OPD1            POINT TO FIRST OPERAND DETAILS
EDELOPLP ST    R15,16(,R13)        SAVE OPERAND ADDRESS FOR EDINVOP
         CLI   7(R15),EDELX        'EX' OPERAND?
         BNE   EDELCHK2            NO
         CLI   DOUBLE+1,0          FLAG STILL CLEAR?
         BNE   EDINCON             NO, OPERAND CONFLICT
         MVI   DOUBLE+1,XCLD       FLAG DELETE SCOPE (EX)
         B     EDELOPNX
EDELCHK2 CLI   7(R15),EDELN        'NX' OPERAND?
         BNE   EDELCHK3            NO
         CLI   DOUBLE+1,0          FLAG STILL CLEAR?
         BNE   EDINCON             NO, OPERAND CONFLICT
         MVI   DOUBLE+1,XCLD*2     FLAG DELETE SCOPE (NX)
         B     EDELOPNX
EDDELEXC CLI   DOUBLE+1,0          FLAG STILL CLEAR?
         BNE   EDINCON             NO, OPERAND CONFLICT
         MVI   DOUBLE+1,XCLD       FLAG DELETE SCOPE (EX)
         B     EDELOPNX
EDELCHK3 CLI   7(R15),EDELA        'ALL' OPERAND?
         BNE   EDINVOP             NO, INVALID
EDELOPNX LA    R15,8(,R15)         POINT TO NEXT POSSIBLE OPD
         BCT   R0,EDELOPLP         PROCESS NEXT POSSIBLE OPERAND
         SPACE
         SR    R1,R1               RESET DELETED RECORD COUNT
         L     R2,LINENMBR         GET PRE-DELETE TOP-OF-SCREEN NUMBER
         L     R3,TOPADDR          POINT TO TOP-OF-DATA
         SR    R4,R4               RESET LINE NUMBER
         CLI   DOUBLE+1,XCLD       DELETING EXCLUDED LINES?
         BE    EDDELALL            YES, GO DO IT
         SR    R2,R2               NO, SO AFTERWARDS SHOW TOP-OF-DATA
         ST    R3,LINEADDR
         ST    R4,CSRRECAD
EDDELALL LAM   A0,A15,EDZEROS      ZERO ACCESS REGISTERS
         LAM   A3,A3,DSPCALET      LOAD DATA SPACE ALET
         LAM   A6,A6,DSPCALET      LOAD DATA SPACE ALET
         LAM   A7,A7,DSPCALET      LOAD DATA SPACE ALET
         SAC   512                 SET AR MODE
EDDELLP  L     R3,FWD(,R3)         POINT TO NEXT RECORD
         ICM   R0,15,FWD(R3)       BOTTOM OF DATA?
         BZ    EDDELEX             YES, SO DELETE COMPLETE
         LA    R4,1(,R4)           INCREMENT LINE NUMBER
         MVC   DOUBLE(1),FLG1(R3)  COPY RECORD FLAG BYTE
         XC    DOUBLE(1),DOUBLE+1  DETERMINE APPLICABILITY
         TM    DOUBLE,XCLD         IS THIS RECORD TO BE DELETED?
         BO    EDDELLP             NO, GO CHECK NEXT RECORD
**                                 YES, DELETE THE RECORD
         L     R6,BAK(,R3)         POINT TO PREVIOUS RECORD
         L     R7,FWD(,R3)         POINT TO FOLLOWING RECORD
         ST    R6,BAK(,R7)         UPDATE FOLLOWING BACK POINTER
         ST    R7,FWD(,R6)         UPDATE PREVIOUS FORWARD POINTER
         MVC   FWD(4,R3),MPTANKOR  ADD THIS LINE TO EMPTY CHAIN
         OI    FLG2(R3),255-LLBL   FLAG LINE AS AWAITING REUSE
         ST    R3,MPTANKOR
         LA    R1,1(,R1)           INCREMENT DELETED LINE COUNTER
         C     R3,CSRRECAD         WAS CURSOR ON LINE JUST DELETED?
         BNE   EDELCSOK            NO
         ST    R7,CSRRECAD         YES, MOVE IT TO NEXT LINE
         OI    EDFLG2,E2CRU        FLAG UPDATE
EDELCSOK C     R3,LINEADDR         JUST DELETED TOP-OF-SCREEN RECORD?
         BNE   EDELTPOK            NO
         ST    R7,LINEADDR         YES, MAKE NEXT RECORD TOP-OF-SCREEN
EDELTPOK LR    R3,R6               GO BACK TO PREVIOUS RECORD
         CR    R4,R2               WAS DELETED LINE FROM BEFORE TOP?
         BCTR  R4,0                ADJUST LINE NUMBER
         BNL   EDDELLP             NO, TOP-OF-SCREEN SEQUENCE UNCHANGED
         BCTR  R2,0                YES, DECREMENT TOP-OF-SCREEN NUMBER
         B     EDDELLP
         SPACE
EDDELEX  SAC   0                   SET PRIMARY MODE
         L     R0,RECLINES         GET PRE-DELETE RECORD COUNT
         SR    R0,R1               GET CURRENT RECORD COUNT
         ST    R0,RECLINES         SAVE IT
         ST    R2,LINENMBR         SAVE TOP-OF-SCREEN LINE NUMBER
         SPACE
*        L     R14,EDRETSV1        RESTORE RETURN ADDRESS
         MVC   MSG(MSGDEL0L),MSGDEL0
         OI    STATUS7,$7BELL      SOUND AUDIBLE ALARM
         LTR   R1,R1               WERE ANY LINES DELETED?
         BZ    EDELMSOK            NO, CORRECT MESSAGE LOADED
         NI    STATUS7,255-$7BELL  YES, DO NOT SOUND AUDIBLE ALARM
         OI    EDFLG1,SAVEY+SAVEZ  FLAG IN-CORE DATA HAS CHANGED
         CVD   R1,DOUBLE           SHOW THE NUMBER OF DELETED LINES
         MVC   MSG+2(10),EDED9Z
         EDMK  MSG+2(10),DOUBLE+3
         LA    R0,MSG+2
         LR    R15,R1
         SR    R15,R0              GET LEADING BLANK COUNT
         MVC   MSG+2(10),0(R1)     SHUFFLE UP NUMBER AND BLANK
         LA    R2,MSG+12           POINT PAST WHERE NUMBER ENDED
         SR    R2,R15              POINT PAST WHERE NUMBER ENDS
         MVC   0(14,R2),MSGDEL0+4  LOAD MESSAGE TEXT AFTER NUMBER
         LA    R2,14(,R2)          POINT PAST MESSAGE TEXT
         LA    R0,MSG+2            POINT TO NUMBER
         SR    R2,R0               GET TOTAL MESSAGE TEXT LENGTH
         STH   R2,MSG              SET THE CORRECT MESSAGE LENGTH
EDELMSOK TM    STATUS10,$10CAP     CAPS ON?
         BOR   R14                 YES, MESSAGE COMPLETE
         TR    MSG+3(24),EDTUNKAP  NO, SHOW SOME MIXED CASE
         BR    R14                 RETURN TO CALLER
         DROP  R10                 EDDELETE
         SPACE
MSGDEL0  MESG  'NO LINES DELETED'
         TITLE '  F L I P  '
         USING EDFLIP,R10
EDFLIP   LR    R10,R15             SET LOCAL BASE
*        ST    R14,EDRETSV1        SAVE RETURN ADDRESS
         LA    R15,OPD1            SET FOR ED2MANY
         TM    OPD1+6,PRESENT      ANY OPERANDS?
         BO    ED2MANY             YES, TOO MANY
         SPACE
         LAM   A0,A15,EDZEROS      ZERO ACCESS REGISTERS
         LAM   A3,A3,DSPCALET      LOAD DATA SPACE ALET
         SAC   512                 SET AR MODE
         L     R3,TOPADDR
         L     R3,FWD(,R3)         POINT TO FIRST RECORD
EDFLIPLP ICM   R0,15,FWD(R3)       POINT TO NEXT RECORD
         BZ    EDFLIPEX            BOTTOM OF DATA SO ALL FLIPPED
         XI    FLG1(R3),XCLD       FLIP THIS RECORD
         LR    R3,R0               POINT TO NEXT RECORD
         B     EDFLIPLP            GO FLIP IT
         SPACE
EDFLIPEX SAC   0                   SET PRIMARY MODE
*        L     R14,EDRETSV1        RESTORE RETURN ADDRESS
         BR    R14                 RETURN TO CALLER
         DROP  R10                 EDFLIP
         TITLE '  R C H A N G E   &&   C H A N G E  '
         USING EDRCHG,R10
EDRCHG   LR    R10,R15             SET LOCAL BASE
         SPACE
         LA    R15,OPD1            SET FOR ED2MANY
         TM    OPD1+6,PRESENT      ANY OPERANDS?
         BZ    EDICHG              NO
         OI    STATUS16,$16RC      YES, FLAG 'RCHANE' QUEUED
         L     R15,EDKEYPRS        POINT TO KEYWORD PARSER
         SR    R1,R1               REQUEST 'FIND'/'CHANGE' TABLE
         BASR  R14,R15             DETECT LATENT 'FIND'/'CHANGE'
         CLI   OPD1+7,1            IS IT 'FIND'?
         BE    EDRCNEST            YES
         CLI   OPD1+7,2            IS IT 'CHANGE'?
         BE    EDRCNEST            YES
         NI    STATUS16,255-$16RC  NO, RESET 'RCHANGE'-QUEUED FLAG
         L     R15,OPD0            POINT TO THE COMMAND
         CLI   0(R15),C'R'         WAS IT 'RCHANGE'?
         BE    ED2MANY             YES, TOO MANY OPERANDS
         SPACE
EDICHG   LA    R10,EDFIND          SET TARGET LOCAL BASE
         DROP  R10                 EDRCHG
         USING EDFIND,R10
         OI    FINDSW3,CHNGE       CURRENT OPERATION IS CHANGE
         NI    FINDSW3,255-CHGERR  RESET CHANGE ERROR FLAG
         TM    STRING2L,X'FF'      VALID REPLACEMENT STRING?
         BNM   EFNDSAME            YES, BRANCH TO COMMON CODE
         B     EFNDNULL            NO, GO SHOW MESSAGE
         DROP  R10                 EDFIND
         SPACE
         USING EDRCHG,R10
EDRCNEST MVC   OPD0(OPDLL-8),OPD1  ERASE 'RCHANGE' COMMAND TEXT
         XC    OPDL+OPDLL-8(8),OPDL+OPDLL-8
         CLI   REPLY,ENTERAID      WAS AID AS FOR ENTER?
         MVI   REPLY,ENTERAID      CHANGE PFK TO ENTER
         BNE   *+8                 NO, SO MAKE IT ENTER
         MVI   REPLY,NOAID         YES IT WAS, SO CLEAR IT
         LA    R15,EDFIND          POINT TO 'FIND' ROUTINE
         CLI   OPD0+7,1            IS IT 'FIND'?
         BER   R15                 YES, GO DO IT
         LA    R15,EDCHANGE        NO, POINT TO 'CHANGE' ROUTINE
*        BR    R15                 GO DO IT
         DROP  R10                 EDRCHG
         SPACE
         USING EDCHANGE,R15
EDCHANGE NI    STATUS16,255-$16RC  ABSORB ANY PENDING 'RCHANGE' REQUEST
         TM    OPD2+6,PRESENT      AT LEAST TWO OPERANDS?
         BZ    EDMISOP             NO, REQUIRED OPERAND IS MISSING
         NI    FINDSW2,255-FNOT    DO NOT DO FINDNOT
         MVI   FINDSW3,CHNGE       CURRENT OPERATION IS CHANGE
         LA    R10,EDFIND          SET NEW LOCAL BASE
         B     EDFORC              BRANCH TO COMMON CODE
         DROP  R15                 EDCHANGE
         TITLE '  E X N O T   &&   E X C L U D E  '
         USING EDEXNOT,R15
EDEXNOT  TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BZ    EDMISOP             NO, REQUIRED OPERAND IS MISSING
         OI    FINDSW2,FNOT        DO EXNOT, NOT EXCLUDE
         LA    R15,EDEXCLD         SET NEW LOCAL BASE
         DROP  R15                 EDEXNOT
         SPACE
         USING EDEXCLD,R15
         LA    R10,EDFIND          SET NEW LOCAL BASE
         B     EDEXORXN            BRANCH TO COMMON CODE
         SPACE
*                                  NORMAL EXCLUDE SUBCOMMAND ENTRY
EDEXCLD  TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BZ    EDMISOP             NO, REQUIRED OPERAND IS MISSING
         LA    R10,EDFIND          SET NEW LOCAL BASE
         DROP  R15                 EDEXCLD
         AIF   (&ENV390).USE3
         USING EDEXCLD,R15
         AGO   .USE4
.USE3    ANOP
         USING (EDEXCLD,EDRFIND),R15
.USE4    ANOP
         USING EDFIND,R10
         TM    OPD2+6,PRESENT      MORE THAN ONE OPERAND?
         BO    EDEXCOMN            YES, GO PERFORM SEARCH
         LA    R0,115              GET MSG NUMBER FOR 'ALL'
         CLI   OPD1+7,5            IS THE OPERAND 'ALL'?
         BE    EDEXALL             YES
         LA    R0,228              GET MSG NUMBER FOR 'UPD'
         CLI   OPD1+7,11           IS THE OPERAND 'UPD'?
         BE    EDEXALL             YES
         LA    R0,229              GET MSG NUMBER FOR 'NOU'
         CLI   OPD1+7,12           IS THE OPERAND 'NOU'?
         BE    EDEXALL             YES
         B     EDEXCOMN            NO, GO PERFORM SEARCH
         SPACE
*                                  EXCLUDE ALL
EDEXALL  STC   R0,MSG              ALL/UPDATED/UNUPDATED LINES EXCLUDED
         LAM   A0,A15,EDZEROS      ZERO ACCESS REGISTERS
         LAM   A3,A3,DSPCALET      LOAD DATA SPACE ALET
         SAC   512                 SET AR MODE
         L     R3,TOPADDR
         ST    R3,LINEADDR         SHOW FROM TOP OF DATA
         SR    R0,R0
         ST    R0,LINENMBR         RESET TOP LINE NUMBER
         ST    R0,FNDNUM           RESET LAST-FOUND NUMBER
         ST    R0,FNDOFF           RESET LAST-FOUND OFFSET
         ST    R0,EDCSROUT         RESET CURSOR POSITION
         L     R3,FWD(,R3)         POINT TO FIRST RECORD
         MVI   DOUBLE,0            CLEAR A FLAG
EDEXALLP ICM   R0,15,FWD(R3)       POINT TO NEXT RECORD
         BZ    EDEXDONE            BOTTOM OF DATA SO ALL EXCLUDED
         TM    FLG1(R3),XCLD       THIS LINE ALREADY EXCLUDED?
         BO    EDEXALNX            YES, THAT WAS EASY
         CLI   OPD1+7,11           WAS 'UPDATED' REQUESTED?
         BL    EDEXDOEX            NO, IT WAS 'ALL'
         BH    EDEXNOUP            NO, IT WAS 'NOUPDATE'
         TM    FLG1(R3),CHGL       YES, THIS LINE UPDATED?
         BZ    EDEXALNX            NO, LEAVE IT UNTOUCHED
         B     EDEXDOEX            YES, GO PROCESS IT
EDEXNOUP TM    FLG1(R3),CHGL       THIS LINE UPDATED?
         BNZ   EDEXALNX            YES, DO NOT EXCLUDE IT NOW
EDEXDOEX CLI   ECHO(R3),C' '       IS A PENDING COMMAND ON THIS LINE?
         BNH   EDEXALOK            NO, OKAY TO EXCLUDE THIS LINE
         MVI   MSG,131             SOME LINES NOT EXCLUDED
         B     EDEXALNX            YES, DO NOT EXCLUDE THIS LINE
EDEXALOK OI    FLG1(R3),XCLD       EXCLUDE THIS RECORD
         MVI   DOUBLE,1            SET A FLAG
EDEXALNX LR    R3,R0               POINT TO NEXT RECORD
         B     EDEXALLP            GO EXCLUDE IT
         SPACE
EDEXDONE CLI   DOUBLE,0            WAS SOMETHING DONE?
         BNE   EDFINDEX            YES
         MVI   MSG,116             LINE NOT LOCATED
         B     EDFINDEX
         SPACE
*                                  TRANSFER TO COMMON SEARCH ROUTINES
EDEXCOMN NI    FINDSW2,255-FNOT    DO EXCLUDE, NOT EXNOT
EDEXORXN MVI   FINDSW3,FEXC+FNX    SET EXCLUDE FOR UNEXCLUDED ONLY
         B     EDFOREX             GO PERFORM SEARCH
         SPACE
         DROP  R15,R10             EDEXCLD, EDFIND
         TITLE '  R F I N D   &&   F I N D N O T   &&   F I N D  '
         USING EDRFIND,R10
EDRFIND  LR    R10,R15             SET LOCAL BASE
         SPACE
         TM    OPD1+6,PRESENT      ANY OPERANDS?
         BZ    EDIFIND             NO
         OI    STATUS16,$16RF      YES, FLAG 'RFIND' QUEUED
         L     R15,EDKEYPRS        POINT TO KEYWORD PARSER
         SR    R1,R1               REQUEST 'FIND'/'CHANGE' TABLE
         BASR  R14,R15             DETECT LATENT 'FIND'/'CHANGE'
         CLI   OPD1+7,1            IS IT 'FIND'?
         BE    EDRFNEST            YES
         CLI   OPD1+7,2            IS IT 'CHANGE'?
         BE    EDRFNEST            YES
         NI    STATUS16,255-$16RF  NO, RESET 'RFIND'-QUEUED FLAG
         L     R15,OPD0            POINT TO THE COMMAND
         CLI   0(R15),C'R'         WAS IT 'RFIND'?
         LA    R15,OPD1            SET FOR ED2MANY
         BE    ED2MANY             YES, TOO MANY OPERANDS
         SPACE
EDIFIND  LA    R10,EDFIND          SET TARGET LOCAL BASE
         DROP  R10                 EDRFIND
         USING EDFIND,R10
         NI    FINDSW3,255-CHNGE   CURRENT OPERATION IS FIND
         B     EFNDSAME            BRANCH TO COMMON CODE
         DROP  R10                 EDFIND
         SPACE
         USING EDRFIND,R10
EDRFNEST MVC   OPD0(OPDLL-8),OPD1  ERASE 'RFIND' COMMAND TEXT
         XC    OPDL+OPDLL-8(8),OPDL+OPDLL-8
         CLI   REPLY,ENTERAID      WAS AID AS FOR ENTER?
         MVI   REPLY,ENTERAID      CHANGE PFK TO ENTER
         BNE   *+8                 NO, SO MAKE IT ENTER
         MVI   REPLY,NOAID         YES IT WAS, SO CLEAR IT
         LA    R15,EDFIND          POINT TO 'FIND' ROUTINE
         CLI   OPD0+7,1            IS IT 'FIND'?
         BER   R15                 YES, GO DO IT
         LA    R0,EDFIND-EDCHANGE  NO, GET ADDRESS DIFFERENCE
         SLR   R15,R0              POINT TO 'CHANGE' ROUTINE
         BR    R15                 GO DO IT
         DROP  R10                 EDRFIND
         SPACE
         USING EDFNDNOT,R15
EDFNDNOT LR    R0,R15              USE NON-ZERO TO FLAG 'FINDNOT'
         LA    R10,EDFIND          SET NEW LOCAL BASE
         B     EDFORNOT            BRANCH TO COMMON CODE
         DROP  R15                 EDFNDNOT
         SPACE
         USING EDFIND,R10
EDFIND   LR    R10,R15             SET LOCAL BASE
         SPACE
         SR    R0,R0               USE ZERO TO FLAG 'FIND'
EDFORNOT NI    STATUS16,255-$16RF  ABSORB ANY PENDING 'RFIND' REQUEST
         TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BZ    EDMISOP             NO, REQUIRED OPERAND IS MISSING
         MVI   FINDSW3,0           CLEAR FIND FLAGS
         NI    FINDSW2,255-FNOT    DO FIND, NOT FINDNOT
         LTR   R0,R0               CORRECT SETTING?
         BZ    EDFOREX             YES
         OI    FINDSW2,FNOT        NO, DO FINDNOT, NOT FIND
EDFOREX  EQU   EDFORC
EDFORC   MVI   FINDSW,0            CLEAR FIND FLAGS
         NI    FINDSW2,255-FWRD
         MVI   FINDSW4,0
         MVC   FINDCOL1,EDLBND     RESET COLUMN
         MVC   FINDCOL2,EDRBND     RESET COLUMN
         MVI   FINDCOL2,X'7F'      SET PARSING STATUS INDICATOR
         XC    RESWORK,RESWORK     CLEAR LABEL STATUS AREA
         SPACE
*
*         GET SEARCH ARGUMENT FROM FIRST OPERAND
*
         LH    R5,OPD1+4           GET LENGTH
         L     R14,OPD1            GET ADDRESS OF DATA
         TM    OPD1+6,QUOTED       QUOTED?
         BO    EFNDDIFF            YES, CAN'T BE 'FIND *'
         C     R5,EDFW1            FIRST OPERAND LENGTH OF ONE?
         BNE   EFNDDIFF            NO, CAN'T BE 'FIND *'
         CLI   0(R14),C'*'         YES, IS IT AN ASTERISK?
         BE    EFNDXLTD            YES, LEAVE THE STRING AS IS
EFNDDIFF XC    STRING,STRING       ERASE OLD STRING
         MVI   STRINGL,X'FF'       INVALIDATE SEARCH STRING
         MVI   STRING2L,X'F0'      INVALIDATE REPLACEMENT STRING
         LTR   R5,R5               IS IT NULL STRING?
         BNP   EFNDNULL            YES, ERROR
         NI    FINDSW2,FNOT        RESET ALL RELEVANT FLAGS
         CLI   OPD1+7,C'X'         IS IT A HEXADECIMAL STRING?
         BE    EFNDHEX             YES
         CLI   OPD1+7,C'P'         IS IT A PICTURE STRING?
         BNE   EFNDTEXT            NO, IT MUST BE A TEXT STRING
         OI    FINDSW2,FPIC+FUOL   YES, FLAG IT
         B     EFNDTEXT
EFNDHEX  LA    R0,OPD1             POINT TO FIRST OPERAND'S DESCRIPTOR
         ST    R0,16(,R13)         SAVE OPERAND ADDRESS FOR EDINVOP
         TM    OPD1+5,X'01'        IS THE LENGTH AN ODD NUMBER?
         BO    EDINVOP             YES, INVALID NUMBER OF HEX DIGITS
         LR    R1,R5               GET LENGTH
         BCTR  R1,0                GET LENGTH CODE
         L     R2,EDXTSTAD         ADDRESS HEX VERIFY TRANSLATE TABLE
         EX    R1,EFNDXTRT         IS STRING ALL VALID HEX CHARACTERS?
         BNZ   EDINVOP             NO, INVALID
         L     R2,EDXDATAD         ADDRESS HEX DATA TRANSLATE TABLE
         EX    R1,EFNDXTR          YES, CONVERT TO ZONED HEX
         LR    R1,R5               GET BACK LENGTH OF OPERAND
         SRL   R1,1                GET LENGTH OF FIND ARGUMENT
         LR    R0,R1               COPY HEX FIND TARGET LENGTH
         LA    R15,STRING          POINT TO FIND COMPARISON TARGET
EFNDXPAK PACK  0(2,R15),0(3,R14)   CONVERT TWO HEX DIGITS TO A BYTE
         LA    R15,1(,R15)         POINT TO NEXT TARGET BYTE
         LA    R14,2(,R14)         POINT TO NEXT HEX DIGIT PAIR
         BCT   R0,EFNDXPAK         PROCESS NEXT HEX DIGIT PAIR
         MVI   0(R15),0            TIDY UP FOR THE FUN OF IT
         BCTR  R1,0
         STH   R1,STRINGL          SAVE LENGTH CODE
         B     EFNDXLTD            SEARCH STRING NOW ALL SET
EFNDTEXT BCTR  R5,0
         STH   R5,STRINGL          SAVE LENGTH CODE
         EX    R5,EFNDMVC
         CLI   OPD1+7,C'C'         IS IT A CHARACTER STRING?
         BE    EFCHRSET            YES, HONOUR CASE TYPED IN
         L     R14,EDTABALF        ADDRESS ALPHABETIC TABLE
         EX    R5,EFNDALFT         ANY ALPABETICS IN STRING?
         BZ    EFCHRSET            NO, USE CASE SENSITIVE FOR SPEED
         OI    FINDSW2,FUOL        YES, SET CASE INSENSITIVE SEARCH
EFCHRSET TM    EPASCII,X'01'       MAKE 'FIND' ARGUMENT ASCII?
         BZ    EFNDXLTD            NO, NO TRANSLATION REQUIRED
         LA    R0,1(,R5)           YES, GET THE STRING LENGTH
         LA    R1,STRING           GET THE STRING ADDRESS
         XLATE (1),(0),TO=A        TRANSLATE CHARACTERS TO ASCII CODE
EFNDXLTD DS    0H
         SPACE
*
*         PROCESS OTHER OPERANDS
*
         LA    R15,OPD1            POINT TO FIRST OPERAND DESCRIPTOR
         TM    FINDSW3,CHNGE       CHANGE COMMAND?
         BNO   EFOPERLP            NO, CONTINUE
         TM    OPD3+6,PRESENT      ONLY TWO OPERANDS?
         BNO   ECHG2OF2            YES, 2ND MUST BE REPLACEMENT STRING
         SPACE
EFOPERLP LA    R15,8(,R15)         POINT TO NEXT OPERAND DESCRIPTOR
         TM    6(R15),PRESENT      IS THERE ANOTHER OPERAND?
         BZ    EDFOPEND            NO, PROCESSED ALL OPERANDS
         ST    R15,16(,R13)        SAVE OPERAND ADDRESS FOR EDINVOP
         TM    6(R15),QUOTED       IS OPERAND QUOTED?
         BO    ECHGSTR2            YES, INVALID UNLESS "TO" STRING
         LH    R1,4(,R15)          GET LENGTH
         LTR   R1,R1               IS IT NULL STRING?
         BNP   ECHGSTR2            YES, BUT THEN IT MUST BE QUOTED
         L     R14,0(,R15)         GET ADDRESS OF DATA
         BCTR  R1,0
         TM    6(R15),NUMERIC      IS IT NUMERIC?
         BNO   EFNONMOP            NO, BRANCH
         TM    FINDSW,FNUM         COLUMN SPECIFICATIONS ALL DONE?
         BO    EFINVOP             YES, ERROR
         EX    R1,EDNUMPAK
         CVB   R1,DOUBLE
         LTR   R1,R1               IS IT ZERO?
         BNP   EFCOLOP             YES, ERROR
         C     R1,MAXRECSZ         COLUMN PAST END OF RECORD?
         BH    EFCOLOP             YES, ERROR
         CLI   FINDCOL2,X'7F'      ALREADY USED?
         BNE   EFCOL2              YES
         LH    R7,STRINGL          GET SEARCH STRING LENGTH CODE
         AR    R7,R1               DETERMINE ENDING COLUMN OF DATA
         C     R7,MAXRECSZ         END OF STRING PAST END OF RECORD?
         BH    EFCOLOP             YES, ERROR
         ST    R7,FINDCOL2         SAVE ENDING COLUMN
         BCTR  R1,0                CONVERT COLUMN TO OFFSET
         ST    R1,FINDCOL1         SAVE STARTING OFFSET
         B     EFOPERLP            PROCESS ANY OTHER OPERAND(S)
EFCOL2   OI    FINDSW,FNUM         NO MORE NUMERIC OPERANDS ALLOWED
         C     R1,FINDCOL2         IS THE NEW NUMBER HIGHER?
         BNL   EFCOL2HI            YES, HIGHER NUMBER GOES IN FINDCOL2
         BCTR  R1,0                CONVERT COLUMN TO OFFSET
         ST    R1,FINDCOL1         SAVE LOWER START OFFSET
         B     *+8                 LEAVE FINDCOL2 UNCHANGED
EFCOL2HI ST    R1,FINDCOL2         SAVE NEW HIGHER END COLUMN
         L     R1,FINDCOL2         GET END COLUMN OF END
         S     R1,FINDCOL1         SUBTRACT START OFFSET
         CH    R1,STRINGL          ENOUGH COLUMNS FOR STRING TO FIT?
         BH    EFOPERLP            YES, PROCESS ANY OTHER OPERAND(S)
         B     EFCOLOP             NO, STRING CAN'T FIT BETWEEN COLUMNS
EFNONMOP LR    R2,R0               SAVE OPERAND COUNT
         BAS   R14,EDVLABEL        SET R0->LABEL AND DO SOME CHECKS
         LR    R14,R0              SAVE LINE LABEL RECORD ADDRESS
         LR    R0,R2               RESTORE OPERAND COUNT
         ST    R15,16(,R13)        RE-SAVE OPERAND ADDRESS FOR EDINVOP
         CLI   7(R15),C'L'         IS IT A LABEL SPECIFICATION?
         BE    EFNDLABL            YES
         CLI   7(R15),EDKEYFHI     IS IT A KEYWORD OPERAND?
         BH    ECHGSTR2            NO, INVALID UNLESS "TO" STRING
         SR    R14,R14             CLEAR FOR INSERT
         ICM   R14,1,7(R15)        LOAD THE KEYWORD CODE
         BZ    ECHGSTR2            NOT A KEYWORD OPERAND AFTER ALL
         SLL   R14,2               CONVERT CODE TO BRANCH TABLE INDEX
         B     *(R14)
         B     EFSCPF              KEYWORD IS 'FIRST'
         B     EFSCPX              KEYWORD IS 'NEXT'
         B     EFSCPB              KEYWORD IS 'PREV'
         B     EFSCPL              KEYWORD IS 'LAST'
         B     EFSCPA              KEYWORD IS 'ALL'
         B     EFPREFIX            KEYWORD IS 'PREFIX'
         B     EFSUFFIX            KEYWORD IS 'SUFFIX'
         B     EFWORD              KEYWORD IS 'WORD'
         B     EFEXONLY            KEYWORD IS 'EXCLUDED'
         B     EFNXONLY            KEYWORD IS 'NX'
         B     EFUPD               KEYWORD IS 'UPDATED'
         B     EFNOU               KEYWORD IS 'NOUPDATE'
EFNXONLY TM    FINDSW3,FEXC        EXCLUDE COMMAND?
         BO    EFINVOP             YES, SO OPERAND IS INVALID
         TM    FINDSW3,FEX+FNX     CONFLICTING OPERAND?
         BNZ   EFCONOP             YES, ERROR
         OI    FINDSW3,FNX         PROCESS 'NX' REQUEST
         B     EFOPERLP            PROCESS ANY OTHER OPERAND(S)
EFEXONLY TM    FINDSW3,FEXC        EXCLUDE COMMAND?
         BO    EFINVOP             YES, SO OPERAND IS INVALID
         TM    FINDSW3,FEX+FNX     CONFLICTING OPERAND?
         BNZ   EFCONOP             YES, ERROR
         OI    FINDSW3,FEX         PROCESS 'EX' REQUEST
         B     EFOPERLP            PROCESS ANY OTHER OPERAND(S)
EFUPD    TM    FINDSW4,FNOU        CONFLICTING OPERAND?
         BNZ   EFCONOP             YES, ERROR
         OI    FINDSW4,FUPD        PROCESS 'UPD' REQUEST
         B     EFOPERLP            PROCESS ANY OTHER OPERAND(S)
EFNOU    TM    FINDSW4,FUPD        CONFLICTING OPERAND?
         BNZ   EFCONOP             YES, ERROR
         OI    FINDSW4,FNOU        PROCESS 'NOU' REQUEST
         B     EFOPERLP            PROCESS ANY OTHER OPERAND(S)
EFSUFFIX TM    FINDSW2,FWRD        CONFLICTING OPERAND?
         BNZ   EFCONOP             YES, ERROR
         OI    FINDSW2,FSUF        PROCESS 'SUFFIX' REQUEST
         B     EFOPERLP            PROCESS ANY OTHER OPERAND(S)
EFPREFIX TM    FINDSW2,FWRD        CONFLICTING OPERAND?
         BNZ   EFCONOP             YES, ERROR
         OI    FINDSW2,FPRE        PROCESS 'PREFIX' REQUEST
         B     EFOPERLP            PROCESS ANY OTHER OPERAND(S)
EFWORD   TM    FINDSW2,FWRD        CONFLICTING OPERAND?
         BNZ   EFCONOP             YES, ERROR
         OI    FINDSW2,FWRD        PROCESS 'WORD' REQUEST
         B     EFOPERLP            PROCESS ANY OTHER OPERAND(S)
EFSCPB   OI    FINDSW,FBAK         PROCESS 'PREV' REQUEST
         B     EFSCPX
EFSCPL   OI    FINDSW,FEND+FBAK    PROCESS 'LAST' REQUEST
         MVC   FNDOFF,MAXRECSZ     SEARCH BACK FROM END OF RECORD
         B     EFSCPX
EFSCPA   OI    FINDSW2,FALL        PROCESS 'ALL' REQUEST
EFSCPF   OI    FINDSW,FTOP         PROCESS 'FIRST' REQUEST
         XC    FNDOFF,FNDOFF       SEARCH FORWARD FROM RECORD START
EFSCPX   TM    FINDSW,FSCP         SCOPE OPERAND ALREADY DONE?
         BO    EFCONOP             YES, ERROR
         OI    FINDSW,FSCP         NO, SCOPING OPERAND NOW DONE
         B     EFOPERLP            PROCESS ANY OTHER OPERAND(S)
         SPACE
*         PROCESS LABEL OPERAND
EFNDLABL L     R2,RESWORK+12       GET COUNT SO FAR
         SLA   R2,2                CONVERT INTO WORD INDEX
         ST    R14,RESWORK(R2)     SAVE LINE LABEL ADDRESS
         ST    R15,RESWORK+8       SAVE LABEL OPD ADDRESS FOR EDF1LABL
         LA    R2,1
         A     R2,RESWORK+12       INCREMENT LABEL COUNTER
         ST    R2,RESWORK+12       SAVE INCREMENTED COUNT
         CLI   RESWORK+15,2        TOO MANY LABELS?
         BH    EFINVOP             YES, INVALID
         CLC   RESWORK(4),RESWORK+4     SAME LABEL TWICE?
         BE    EFINVOP             YES, INVALID
         B     EFOPERLP            PROCESS ANY OTHER OPERAND(S)
         SPACE
*
*         EXTRACT REPLACEMENT STRING FOR CHANGE PROCESSING
*
ECHG2OF2 LA    R15,OPD2            POINT TO SECOND OPERAND DESCRIPTOR
ECHGSTR2 TM    FINDSW3,CHNGE       CHANGE COMMAND?
         BNO   EFINVOP             NO, SO OPERAND IS INVALID
         TM    FINDSW3,STR2OK      ALREADY EXTRACTED REPLACEMENT?
         BO    EFINVOP             YES, SO OPERAND IS INVALID
         LH    R5,4(,R15)          GET LENGTH
         L     R14,0(,R15)         GET ADDRESS OF DATA
         TM    6(R15),QUOTED       QUOTED?
         BO    ECHGDIFF            YES, CAN'T BE AN ASTERISK
         C     R5,EDFW1            FIRST OPERAND LENGTH OF ONE?
         BNE   ECHGDIFF            NO, CAN'T BE 'FIND *'
         CLI   0(R14),C'*'         YES, IS IT AN ASTERISK?
         BE    ECCHRSET            YES, LEAVE THE STRING AS IS
ECHGDIFF XC    STRING2,STRING2     ERASE OLD STRING
         LTR   R1,R5               IS IT NULL STRING?
         BZ    ECHGNUL2            YES, NOT MUCH MORE TO CHECK
         MVI   STRING2L,X'F0'      INVALIDATE REPLACEMENT STRING
         CLI   7(R15),C'X'         IS IT A HEXADECIMAL STRING?
         BE    ECHGHEX             YES
         CLI   7(R15),C'P'         IS IT A PICTURE STRING?
         BNE   ECHGTEXT            NO, IT MUST BE A TEXT STRING
         BCTR  R1,0                GET LENGTH CODE OF REPLACEMENT
         CH    R1,STRINGL          DOES IT MATCH SEARCH ARGUMENT'S?
         BE    ECHGPIC             YES, CONTINUE
         MVI   MSG,124             "FROM" AND "TO" LENGTHS DIFFER
         B     EFBADOP             NO, INVALID
ECHGHEX  TM    5(R15),X'01'        IS THE LENGTH AN ODD NUMBER?
         BO    EFINVOP             YES, INVALID NUMBER OF HEX DIGITS
         LR    R1,R5               GET LENGTH
         BCTR  R1,0                GET LENGTH CODE
         L     R2,EDXTSTAD         ADDRESS HEX VERIFY TRANSLATE TABLE
         EX    R1,EFNDXTRT         IS STRING ALL VALID HEX CHARACTERS?
         BNZ   EFINVOP             NO, INVALID
         L     R2,EDXDATAD         ADDRESS HEX DATA TRANSLATE TABLE
         EX    R1,EFNDXTR          YES, CONVERT TO ZONED HEX
         LR    R1,R5               GET BACK LENGTH OF OPERAND
         SRL   R1,1                GET LENGTH OF FIND ARGUMENT
         LR    R0,R1               COPY HEX FIND TARGET LENGTH
         LA    R5,STRING2          POINT TO FIND COMPARISON TARGET
ECHGXPAK PACK  0(2,R5),0(3,R14)    CONVERT TWO HEX DIGITS TO A BYTE
         LA    R5,1(,R5)           POINT TO NEXT TARGET BYTE
         LA    R14,2(,R14)         POINT TO NEXT HEX DIGIT PAIR
         BCT   R0,ECHGXPAK         PROCESS NEXT HEX DIGIT PAIR
         MVI   0(R5),0             TIDY UP FOR THE FUN OF IT
ECHGNUL2 BCTR  R1,0
         STH   R1,STRING2L         SAVE LENGTH CODE
         B     ECCHRSET            SEARCH STRING NOW ALL SET
ECHGPIC  OI    FINDSW3,CHGPIC      FLAG PICTURE STRING REPLACEMENT
ECHGTEXT BCTR  R5,0
         STH   R5,STRING2L         SAVE LENGTH CODE
         EX    R5,ECHGMVC
         TM    EPASCII,X'01'       MAKE 'FIND' ARGUMENT ASCII?
         BZ    ECCHRSET            NO, NO TRANSLATION REQUIRED
         LA    R0,1(,R5)           YES, GET THE STRING LENGTH
         LA    R1,STRING2          GET THE STRING ADDRESS
         XLATE (1),(0),TO=A        TRANSLATE CHARACTERS TO ASCII CODE
ECCHRSET TM    STRING2L,X'FF'      VALID REPLACEMENT STRING?
         BM    EFNDNULL            NO, ERROR
         OI    FINDSW3,STR2OK      YES, REPLACEMENT STRING NOW SET
         B     EFOPERLP            PROCESS ANY OTHER OPERAND(S)
         SPACE
*         HANDLE CASE WHERE ONLY ONE LABEL WAS SPECIFIED
EDF1LABL MVI   MSG,35              MISSING OPERAND
         MVC   16(4,R13),RESWORK+8 PUT CURSOR ON SUPPLIED LABEL
         NI    FINDSW2,255-FALL    RESET 'ALL' STATUS
         NI    FINDSW3,255-F1END   RESET "ONE END" STATUS
         B     EDSHOOP
         SPACE
*
*         PERFORM FINAL VALIDATION AFTER OPERAND PARSING
*
EDFOPEND CLI   RESWORK+15,1        A SINGLE LABEL SPECIFIED?
         BE    EDF1LABL            YES, INVALID
         BL    *+8                 NO, ZERO LABELS IS GOOD
         OI    FINDSW4,FRGE+FNOW   FLAG 2 LABELS SO IT'S A RANGE
         TM    FINDSW3,CHNGE+STR2OK
         BM    EFNDNULL            REPLACE STRING NOT SPECIFIED
         TM    FINDSW3,CHNGE       CHANGE COMMAND?
         BNO   EFNDSAME            NO, SUBCOMMAND PARSING NOW COMPLETE
         TM    STATUS16,$16RF      'RFIND' REQUESTED?
         BNO   EFNDSAME            NO, SUBCOMMAND PARSING NOW COMPLETE
         NI    FINDSW3,255-CHNGE   YES, CONVERT OPERATION TO A FIND
         NI    STATUS16,255-$16RF  ABSORB RFIND REQUEST
***      B     EFNDSAME            SUBCOMMAND PARSING NOW COMPLETE
         SPACE
*
*         OPERANDS PROCESSED - PERFORM FIND SET UP
*
EFNDSAME DS    0H
         CLI   STRINGL,0           HAS A STRING BEEN ENTERED?
         BNE   EFNDNULL            NO, ERROR
         MVI   FINDCOL2,0          RESET PARSING STATUS INDICATOR
         ICM   R0,15,FINDCOL2      VALID COLUMN PRESENT?
         BNZ   *+10                YES, GOOD
         MVC   FINDCOL2,EDRBND     NO, SO SET ONE
         LAM   A0,A15,EDZEROS      ZERO ACCESS REGISTERS
         LAM   A3,A3,DSPCALET      LOAD DATA SPACE ALET
         SAC   512                 SET AR MODE
         OI    FINDSW,FACT         FIND NOW ACTIVE AND THAT'S A FACT
         XC    COUNTER2,COUNTER2   NO ITEMS FOUND YET
         LM    R14,R1,EDRGEREX     SAVE PREVIOUS RANGE DETAILS
EFNDRGER MVC   EDRGEREX,TOPADDR    SET RANGE LIMITS TO TOP AND BOTTOM
         MVC   EDRGEFNM,EDZEROS    ALSO SET RELEVANT LINE NUMBERS
         LA    R4,1
         A     R4,RECLINES
         ST    R4,EDRGELNM
         TM    FINDSW4,FRGE+FNOW   ANY LABEL RANGE TO DEAL WITH?
         BZ    EFNDUSAL            NO, PERFORM THE USUAL SET UP
         ICM   R4,15,RECLINES      ANY RECORDS PRESENT?
         BZ    EDFNOREC            NO, NOTHING TO DO
         MVI   DOUBLE,0            CLEAR A FLAG BYTE
*   X'80' => FNDREC -> RECORD WHICH IS BEFORE OR IN THE SEARCH RANGE
*   X'40' => FNDREC -> RECORD WHICH IS ACTUALLY IN THE SEARCH RANGE
         L     R3,TOPADDR          POINT TO TOP OF DATA
         MVC   EDRGEREX,EDZEROS    RESET RANGE DETAILS
         SR    R4,R4               RESET LINE NUMBER
         TM    FINDSW4,FNOW        RANGE SPECIFIED ON THIS COMMAND?
         BO    EFNDRGL1            YES, START WITH TOP-OF-DATA
         STM   R14,R15,RESWORK     NO, PRIME FOR COMMAND SET UP
         STM   R15,R1,EDRGELST     ALSO RESTORE RANGE END DETAILS
         B     EFNDRGL1            LOOK AT THIS RECORD FIRST
*   FOR A SEARCH IN THE FORWARD DIRECTION, THE LINE NUMBER OF THE
*   END-OF-RANGE RECORD DOES NOT HAVE TO BE KNOWN, SO IF THIS IS
*   THE ONLY UNKNOWN RANGE DETAILS DATUM, THE PRE-SEARCH RANGE
*   DETAILS ACQUISITION PROCESS CAN BE ENDED EARLY.
EFNDRGLP L     R3,FWD(,R3)         POINT TO NEXT RECORD
         TM    FLG1(R3),LMSG       MESSAGE LINE?
         BO    EFNDRGLP            YES, IGNORE IT
         LA    R4,1(,R4)           INCREMENT LINE NUMBER
         C     R3,BTMADDR          POINT TO BOTTOM-OF-DATA LINE NOW?
         BE    EFNDBND2            YES, SO THIS MUST BE END OF RANGE
EFNDRGL1 C     R3,RESWORK          FOUND A RANGE BOUNDARY LABEL?
         BE    EFNDBND1            YES
         C     R3,RESWORK+4        FOUND A RANGE BOUNDARY LABEL?
         BE    EFNDBND1            YES
         C     R3,FNDREC           FOUND THE "CURRENT" RECORD?
         BNE   EFNDRGLP            NO, ON TO NEXT RECORD
         OI    DOUBLE,X'80'        YES, FLAG THIS
         ICM   R0,15,EDRGEFST      ALREADY FOUND START OF RANGE?
         BZ    EFNDRGLP            NO, NOT IN RECORD SEARCH RANGE YET
         OI    DOUBLE,X'40'        YES, FLAG THIS
         TM    FINDSW,FBAK         PERFORMING BACKWARD SEARCH?
         BO    EFNDRGLP            YES, ON TO NEXT RECORD
         TM    FINDSW4,FNOW        RANGE SET BY THIS COMMAND?
         BO    EFNDRGLP            YES, ON TO NEXT RECORD
         B     EFNDRGFW            NO, AVOID NEEDLESS OVERHEAD
EFNDBND1 ICM   R0,15,EDRGEFST      ALREADY FOUND START OF RANGE?
         BNZ   EFNDBND2            YES, MUST BE AT END OF RANGE
         ST    R3,EDRGEFST         SAVE START-OF-RANGE RECORD ADDRESS
         ST    R4,EDRGEFNM         SAVE START-OF-RANGE RECORD NUMBER
         C     R3,FNDREC           FOUND THE "CURRENT" RECORD?
         BNE   *+8                 NO
         OI    DOUBLE,X'C0'        YES, FLAG THIS
         TM    FINDSW,FBAK         PERFORMING BACKWARD SEARCH?
         BO    EFNDRGLP            YES, ON TO NEXT RECORD
         TM    DOUBLE,X'C0'        IS CURRENT RECORD BEFORE THE RANGE?
         BM    EFNDRG11            YES, SO IT IS EQUIVALENT TO 'FIRST'
         TM    FINDSW,FTOP         'FIRST' REQUEST?
         BNO   EFNDRG12            NO
EFNDRG11 ST    R3,FNDREC           YES, START SEARCH FROM THIS RECORD
         ST    R4,FNDNUM                AND THIS RECORD NUMBER
         OI    DOUBLE,X'80'        CURRENT RECORD'S SPOT NOW IRRELEVANT
         NI    FINDSW,255-FTOP     RESET 'FIRST' REQUEST FLAG
EFNDRG12 TM    FINDSW4,FNOW        RANGE SET BY THIS COMMAND?
         BO    EFNDRGLP            YES, ON TO NEXT RECORD
         TM    DOUBLE,X'80'        STILL NEED TO FIND CURRENT RECORD?
         BO    EFNDRGLP            YES, ON TO NEXT RECORD
         B     EFNDRGFW            NO, AVOID NEEDLESS OVERHEAD
EFNDBND2 ST    R3,EDRGELST         SAVE ADDRESS OF LAST RECORD IN RANGE
         ST    R4,EDRGELNM         SAVE NUMBER OF LAST RECORD IN RANGE
         NI    FINDSW4,255-FRGE-FNOW    CLEAR RANGE STATUS FLAGS
         ICM   R0,15,EDRGEFST      WAS THE RANGE START ASCERTAINED?
         BZ    EFNDRGER            NO, ERROR SO PROCEED AS IF NO RANGE
         OI    FINDSW4,FRGE        RECORD RANGE NOW SET UP
         C     R3,FNDREC           FOUND THE "CURRENT" RECORD?
         BNE   *+8                 NO
         OI    DOUBLE,X'C0'        YES, FLAG THIS
         TM    FINDSW,FBAK         PERFORMING BACKWARD SEARCH?
         BO    EFNDRGBK            YES, GO SET IT UP
         TM    DOUBLE,X'80'        CURRENT RECORD BEYOND RANGE?
         BO    EFNDRGFW            NO, IT HAS BEEN OBSERVED
         MVC   FNDREC,EDRGEFST     YES, SET UP INITIAL SEARCH LOCATION
         MVC   FNDNUM,EDRGEFNM
         MVC   FNDOFF,EDZEROS
EFNDRGFW L     R3,FNDREC           POINT TO FIRST RECORD TO SEARCH
         B     EFNDTOP             GO START THE SEARCH PHASE
EFNDRGBK TM    FINDSW,FEND         'LAST' REQUEST?
         BO    EFNDRGLS            YES, BRANCH
         TM    DOUBLE,X'40'        CURRENT LOCATION WITHIN THE RANGE?
         BO    EFNDRGBL            YES, NOW READY TO START SEARCH
EFNDRGLS NI    FINDSW,255-FEND     RESET 'LAST' REQUEST FLAG
         MVC   FNDREC,EDRGELST     SET UP INITIAL SEARCH LOCATION
         MVC   FNDNUM,EDRGELNM
         MVC   FNDOFF,MAXRECSZ
EFNDRGBL L     R3,FNDREC           POINT TO THE INITIAL RECORD
         B     EFNDLAST            GO CHECK FOR END OF DATA
         SPACE
EFNDUSAL L     R3,TOPADDR          POINT TO TOP OF DATA
         TM    FINDSW,FTOP         SEARCH FROM TOP OF DATA?
         BO    EFNDTOP             YES, BRANCH
         L     R3,BTMADDR          POINT TO END OF DATA
         TM    FINDSW,FEND         SEARCH FROM END OF DATA?
         BO    EFNDLAST            YES, BRANCH
         L     R3,FNDREC           POINT TO THE INITIAL RECORD
         TM    FINDSW,FBAK         PERFORMING BACKWARD SEARCH?
         BO    EFNDLAST            YES, CHECK FOR END OF DATA
         SPACE
*
*         SEARCH IN THE FORWARD DIRECTION
*
EFNDTOP  NI    FINDSW4,255-FUSETRT RESET TRT SEARCH FLAG
         TM    FINDSW2,FNOT        SEARCH FOR ARGUMENT MISMATCH?
         BO    EFNDFWD             YES, DO NOT USE TRT
         TM    EPASCII,X'01'       IN ASCII MODE?
         BO    EFNDFWD             YES, DO NOT USE TRT
         TM    FINDSW2,FPIC        SEARCHING FOR PICTURE STRING?
         BNO   EFNDFTRT            NO, USING TRT FOR FORWARD SEARCH
         CLI   STRING,C'A'         IS FIRST CHARACTER A PICTURE MASK?
         BL    EFNDFWD             PROBABLY, DO NOT USE TRT
EFNDFTRT XC    DYNTABLE,DYNTABLE   RESET TRANSLATE TABLE
         SR    R2,R2
         IC    R2,STRING           GET FIRST CHARACTER TO LOOK FOR
         LAE   R1,DYNTABLE(R2)
         MVI   0(R1),X'FF'         FLAG IT IN TRANSLATE TABLE
         OI    FINDSW4,FUSETRT     SET TRT SEARCH METHOD FLAG
         TM    FINDSW2,FUOL        CASE INSENSITIVE SEARCH?
         BNO   EFNDFWD             NO, ALL SET
         CLI   STRING,C'A'         IS FIRST CHARACTER AN ALPHABETIC?
         BL    EFNDFWD             NO, CASE NOT APPLICABLE TO IT
         CLI   STRING,C'Z'         IS FIRST CHARACTER AN ALPHABETIC?
         BH    EFNDFWD             NO, CASE NOT APPLICABLE TO IT
         TM    STRING,X'0F'        IS FIRST CHARACTER AN ALPHABETIC?
         BZ    EFNDFWD             NO, CASE NOT APPLICABLE TO IT
         LA    R0,64               YES
         SR    R1,R0               POINT TO LOWER CASE SPOT IN TABLE
         MVI   0(R1),X'FF'         FLAG IT IN TRANSLATE TABLE
EFNDFWD  CLC   EDCSRCOL,EDFW8      CURSOR IN DATA PART?
         BNH   EFNDOFST            NO, SEARCH CURRENT POSITION
         TM    FINDSW3,CHNGE       PERFORMING A CHANGE?
         BO    EFNDOFST            YES, CAN PROCESS CURRENT FIND
         LA    R0,1                NO
         A     R0,FNDOFF           POINT PAST CURRENT FIND
         ST    R0,FNDOFF
EFNDOFST ICM   R0,15,BAK(R3)       TOP OF DATA?
         BNZ   EFNDTHIS            NO
         NI    FINDSW,255-FTOP     YES, RESET 'FIRST' REQUEST FLAG
         OI    FINDSW3,F1END       FLAG STARTING FROM ONE END
         MVC   FNDOFF,MAXRECSZ     SET OFFSET TO FORCE NEW RECORD
         XC    FNDNUM,FNDNUM       SET RECORD NUMBER
EFNDTHIS ICM   R0,15,FWD(R3)       END OF DATA?
         BZ    EFNDEND             YES, BRANCH
         CLC   EDRGELST,BAK(R3)    WAS PREVIOUS RECORD END OF RANGE?
         BE    EFNDENDR            YES, BRANCH
         TM    FLG1(R3),LMSG       MESSAGE LINE?
         BO    EFNDMESG            YES, IGNORE IT
         LAE   R5,CTLLEN(,R3)      POINT TO DATA OF RECORD TO SEARCH
         A     R5,FNDOFF           GET RECORD'S SEARCH START ADDRESS
         TM    FINDSW4,FUPD+FNOU   IS UPDATE STATUS RELEVANT?
         BZ    EFNDUPOK            NO, SO SKIP A CHUNK OF LOGIC
         TM    FINDSW4,FUPD        ONLY FOR UPDATED LINES?
         BNO   EFNDNOUP            NO
         TM    FLG1(R3),CHGL       HAS RECORD CHANGED THIS SESSION?
         BZ    EFNDNEXT            NO, SO DO NOT SEARCH THIS LINE
         B     EFNDUPOK            YES, CHANGED LINE SO SEARCH IT
EFNDNOUP TM    FLG1(R3),CHGL       HAS RECORD CHANGED THIS SESSION?
         BO    EFNDNEXT            YES, SO DO NOT SEARCH THIS LINE
EFNDUPOK TM    FLG1(R3),XCLD       IS THIS RECORD EXCLUDED?
         BO    EFNDTHAT            YES
         TM    FINDSW3,FEX         ONLY SEARCHING EXCLUDED LINES?
         BNO   EFNDSTRG            NO
         B     EFNDNEXT            YES, DO NOT SEARCH THIS LINE
EFNDMESG LR    R3,R0               POINT TO NEXT RECORD
         XC    FNDOFF,FNDOFF       START FROM START OF NEXT RECORD
         B     EFNDTHIS            GO LOOK AT IT
EFNDTHAT TM    FINDSW3,FNX         ONLY SEARCHING UNEXCLUDED LINES?
         BO    EFNDNEXT            YES, DO NOT SEARCH THIS LINE
EFNDSTRG L     R0,FINDCOL2         GET LAST COLUMN NUMBER TO SEARCH
         LA    R1,CTLLEN(,R3)      GET ADDRESS OF RECORD
         AR    R0,R1               GET OFFSET PAST DATA TO SEARCH
         SH    R0,STRINGL          GET OFFSET PAST START CANDIDATES
         A     R1,FINDCOL1         POINT TO FIRST BYTE TO CHECK
         CR    R5,R1               BEGIN SEARCH AFTER FIRST POSSIBLE?
         BH    *+6                 YES, SKIP SOME CANDIDATES
         LR    R5,R1               NO, START AT FIRST COLUMN IN RANGE
         SR    R0,R5               GET NUMBER OF COMPARISONS
         BNP   EFNDNEXT            STRING TOO LONG FOR REMAINING TEXT
         TM    FINDSW4,FUSETRT     USING A TRT FOR INITIAL SEARCH?
         BNO   EFNDFSCN            NO, USE ORDINARY FORWARD SCAN
         LA    R1,256              GET TRANSLATE COVERAGE SIZE
         LR    R14,R0              GET DATA SIZE TO SEARCH
         CR    R0,R1               MORE THAN 256 BYTES?
         BNH   *+8                 NO
         LA    R14,256             YES, REDUCE LENGTH TO 256
         LA    R1,256(,R5)         PREPARE FOR NO MATCH IN FIRST 256
         LR    R15,R5              SAVE FIRST SEARCH ADDRESS
         BCTR  R14,0               DECREMENT FOR EXECUTE
         EX    R14,EFNDQUIK        DO A QUICK SCAN FOR FIRST CHARACTER
         LR    R5,R1               GET NEW FIRST POSSIBLE ADDRESS
         SR    R1,R15              GET NUMBER OF COLUMNS SCANNED
         SR    R0,R1               REDUCE SEARCH SIZE ACCORDINGLY
         BNP   EFNDNEXT            START OF STRING NOT IN THIS RECORD
EFNDFSCN L     R1,MAXRECSZ         GET RECORD DATA LENGTH FOR SEARCHIT
         LA    R2,CTLLEN(,R3)      POINT RECORD DATA FOR SEARCHIT
         TM    FINDSW2,FNOT        SEARCH FOR ARGUMENT MISMATCH?
         BO    EFNDNOTC            YES
EFNDCOMP L     R15,=A(SEARCHIT)    GET MATCHING SUBROUTINE ENTRY POINT
         BASR  R14,R15             COMPARE STRING TO DATA
         BE    EDFOUND             MATCH FOUND
         LA    R5,1(,R5)           INCREMENT DATA POINTER
         BCT   R0,EFNDCOMP         GO COMPARE AGAIN
         B     EFNDNEXT            JUMP OVER FINDNOT PROCESSING
EFNDQUIK TRT   0(0,R5),DYNTABLE    <<< EXECUTED >>>
EFNDNOTC L     R15,=A(SEARCHIT)    GET MATCHING SUBROUTINE ENTRY POINT
         BASR  R14,R15             COMPARE STRING TO DATA
         BNE   EDFOUND             MISMATCH FOUND
         LA    R5,1(,R5)           INCREMENT DATA POINTER
         BCT   R0,EFNDNOTC         GO COMPARE AGAIN
EFNDNEXT TM    STATUS4,$4ATTN      ATTENTION INTERRUPT?
         BO    EFNDATTN            YES
         L     R3,FWD(,R3)         POINT TO NEXT DATA RECORD
         XC    FNDOFF,FNDOFF       START FROM START OF NEXT RECORD
         LA    R0,1
         A     R0,FNDNUM           INCREMENT RECORD NUMBER
         ST    R0,FNDNUM
         B     EFNDTHIS
         SPACE
*
*         SEARCH IN THE BACKWARD DIRECTION
*
EFNDLAST ICM   R0,15,FWD(R3)       END OF DATA?
         BNZ   EFNDBACK            NO
         NI    FINDSW,255-FEND     YES, RESET 'LAST' REQUEST FLAG
         OI    FINDSW3,F1END       FLAG STARTING FROM ONE END
         XC    FNDOFF,FNDOFF       RESET LAST FOUND OFFSET
         LA    R0,1
         A     R0,RECLINES
         ST    R0,FNDNUM           SET RECORD NUMBER
EFNDBACK ICM   R0,15,BAK(R3)       AT TOP OF DATA?
         BNZ   EFBKSCH1            NO
         L     R3,BTMADDR          YES
         B     EFNDLAST            BEHAVE AS FOR 'LAST'
EFBKSCH1 TM    FINDSW3,CHNGE       PERFORMING A CHANGE?
         BNO   EFBKSRCH            NO, KEEP MOVING THE SEARCH ALONG
         LA    R0,1                YES, ALLOW CHANGE OF A FIND
         A     R0,FNDOFF           POINT PAST CURRENT FIND
         ST    R0,FNDOFF           REDO LAST FIND
EFBKSRCH ICM   R0,15,BAK(R3)       TOP OF DATA?
         BZ    EFNDBGN             YES
         CLC   EDRGEFST,FWD(R3)    JUST SEARCHED TOP OF RANGE?
         BE    EFNDBGNR            YES, BRANCH
         TM    FLG1(R3),LMSG       MESSAGE LINE?
         BO    EFBKMESG            YES, IGNORE IT
         LH    R14,STRINGL         GET SEARCH STRING LENGTH CODE
         L     R5,FINDCOL2         GET LAST COLUMN NUMBER TO SEARCH
         SH    R5,STRINGL          GET BIGGEST COLUMN TO SEARCH FIRST
         BNP   EFNDBAK1            NOT ENOUGH RECORD LEFT TO LOOK AT
         TM    FINDSW4,FUPD+FNOU   IS UPDATE STATUS RELEVANT?
         BZ    EFBKUPOK            NO, SO SKIP A CHUNK OF LOGIC
         TM    FINDSW4,FUPD        ONLY FOR UPDATED LINES?
         BNO   EFBKNOUP            NO
         TM    FLG1(R3),CHGL       HAS RECORD CHANGED THIS SESSION?
         BZ    EFNDBAK1            NO, SO DO NOT SEARCH THIS LINE
         B     EFBKUPOK            YES, CHANGED LINE SO SEARCH IT
EFBKNOUP TM    FLG1(R3),CHGL       HAS RECORD CHANGED THIS SESSION?
         BO    EFBKUPOK            NO, ORIGINAL LINE SO SEARCH IT
         B     EFNDBAK1            YES, SO DO NOT SEARCH THIS LINE
EFBKUPOK TM    FLG1(R3),XCLD       IS THIS RECORD EXCLUDED?
         BO    EFBKTHAT            YES
         TM    FINDSW3,FEX         ONLY SEARCHING EXCLUDED LINES?
         BNO   EFBKTHIS            NO
         B     EFNDBAK1            YES, DO NOT SEARCH THIS LINE
EFBKMESG LR    R3,R0               POINT TO PREVIOUS RECORD
         MVC   FNDOFF,MAXRECSZ     RESET LAST FOUND OFFSET
         B     EFBKSRCH            GO LOOK AT IT
EFBKTHAT TM    FINDSW3,FNX         ONLY SEARCHING UNEXCLUDED LINES?
         BO    EFNDBAK1            YES, DO NOT SEARCH THIS LINE
EFBKTHIS BCTR  R5,0                GET BIGGEST OFFSET TO SEARCH FIRST
         L     R0,FNDOFF           YES, GET LAST-FOUND OFFSET
         CR    R5,R0               GOING OVER OLD GROUND?
         BL    EFBKOFOK            NO
         LR    R5,R0               YES, GET LAST-FOUND OFFSET
         BCTR  R5,0                GET NEW STARTING OFFSET
         C     R5,FINDCOL1         BEFORE COLUMN RANGE START?
         BL    EFNDBAK1            YES, START FROM PREVIOUS RECORD
EFBKOFOK LAE   R5,CTLLEN(R5,R3)    POINT TO FIRST SEARCH ADDRESS
         LA    R0,CTLLEN(,R3)      POINT TO RECORD START
         LR    R1,R0               POINT TO RECORD START FOR SEARCHIT
         A     R0,FINDCOL1         ADJUST LOWER LIMIT WITH COLUMN RANGE
EFBKLOOP CR    R5,R0               GONE BEYOND START OF RECORD?
         BL    EFNDBAK1            YES, GO GET PREVIOUS RECORD
         L     R1,MAXRECSZ         GET RECORD DATA LENGTH FOR SEARCHIT
         LA    R2,CTLLEN(,R3)      POINT RECORD DATA FOR SEARCHIT
         L     R15,=A(SEARCHIT)    GET MATCHING SUBROUTINE ENTRY POINT
         TM    FINDSW2,FNOT        SEARCH FOR ARGUMENT MISMATCH?
         BO    EFNDBNOT            YES
         BASR  R14,R15             LOOK FOR STRING
         BE    EDFOUND             GUESS WHAT
         BCT   R5,EFBKLOOP         DECREMENT POINTER AND RECOMPARE
         B     EFNDBAK1            GET PREVIOUS RECORD
EFNDBNOT BASR  R14,R15             LOOK FOR STRING
         BNE   EDFOUND             GUESS WHAT
         BCT   R5,EFBKLOOP         DECREMENT POINTER AND RECOMPARE
EFNDBAK1 TM    STATUS4,$4ATTN      ATTENTION INTERRUPT?
         BO    EFNDATTN            YES
         MVC   FNDOFF,MAXRECSZ     RESET LAST FOUND OFFSET
         L     R3,BAK(,R3)         POINT TO PREVIOUS RECORD
         L     R0,FNDNUM
         BCTR  R0,0                DECREMENT RECORD NUMBER
         ST    R0,FNDNUM
         B     EFBKSRCH
         SPACE
ECHGMVC  MVC   STRING2(0),0(R14)   <<< EXECUTED >>>
EFNDMVC  MVC   STRING(0),0(R14)    <<< EXECUTED >>>
EFNDALFT TRT   STRING(0),0(R14)    <<< EXECUTED >>>
EFNDXTRT TRT   0(0,R14),0(R2)      <<< EXECUTED >>>
EFNDXTR  TR    0(0,R14),0(R2)      <<< EXECUTED >>>
         SPACE
EFNDENDR MVI   MSG,230             BOTTOM OF RANGE REACHED
         B     *+8
EFNDEND  MVI   MSG,32              BOTTOM OF DATA REACHED
         OI    FINDSW,FTOP         SEARCH FROM TOP OF DATA NEXT TIME
         TM    FINDSW2,FALL        DOING A COMPLETE SEARCH?
         BNO   EFND1END            NO, CHECK FOR NONE PRESENT
         NI    FINDSW,255-FTOP     YES, NEXT SEARCH NEEDN'T BE FROM TOP
         ICM   R0,15,COUNTER2      MUST BE IN FORWARD DIRECTION
         BZ    EFNDNORT            HANDLE NONE PRESENT
         MVC   FNDNUM(8),EDALLSAV  RESTORE FIRST MATCH RECORD DETAILS
         CVD   R0,DOUBLE           SHOW THE TOTAL NUMBER OF MATCHES
         MVC   MSG+2(12),EDED11Z
         EDMK  MSG+2(12),DOUBLE+2
         MVI   MSG+14,C' '
         LA    R0,MSG+2
         LR    R15,R1
         SR    R15,R0              GET LEADING BLANK COUNT
         MVC   MSG+2(12),0(R1)     SHUFFLE UP NUMBER AND BLANK
         LA    R2,MSG+15           POINT PAST WHERE BLANK WAS
         SR    R2,R15              POINT PAST WHERE BLANK IS
         B     EFDADMSG            GO MAKE THE MESSAGE
         SPACE
EFNDBGNR MVI   MSG,231             TOP OF RANGE REACHED
         B     *+8
EFNDBGN  MVI   MSG,44              TOP OF DATA REACHED
         OI    FINDSW,FEND         SEARCH FROM BOTTOM OF DATA NEXT TIME
EFND1END TM    FINDSW3,F1END       SEARCHED ALL DATA?
         BNO   EDFINDEX            NO
EFNDNORT OI    STATUS7,$7BELL      SOUND AUDIBLE ALARM
         LAE   R5,STRING           POINT TO FAILED SEARCH ARGUMENT
         TM    FINDSW2,FPIC        SEARCHING FOR PICTURE STRING?
         BNO   EDFDOMSG            NO, GO MAKE THE MESSAGE
         MVI   MSG+2,C'P'          YES, INDICATE THIS
         LA    R2,MSG+3            POINT TO TARGET FOR REST OF MESSAGE
         B     EFDADMSG            GO MAKE REST OF MESSAGE
         SPACE
EFNDNULL MVI   MSG,33              STRING NOT SPECIFIED
         B     EDFINDEX
EFCOLOP  MVI   MSG,114             INVALID COLUMN RANGE
         B     EFBADOP
EFCONOP  MVI   MSG,113             INCONSISTENT OPERANDS
         B     EFBADOP
EFINVOP  MVI   MSG,34              INVALID OPERAND
EFBADOP  XC    FINDCOL1,FINDCOL1   RESET COLUMN
         MVI   FINDCOL2,X'7F'      RESET COLUMN
         MVI   FINDSW,0            CLEAR FLAGS
         NI    FINDSW2,255-FWRD
         NI    FINDSW4,255-FUPD-FNOU-FRGE
         MVC   EDRGEREX,EDZEROS    CLEAR LINE RANGE POINTERS
         B     EDFINDEX
EFNDATTN MVI   MSG,85              SEARCH INTERRUPTED
         B     EDFINDEX
         SPACE
*
*         PROCESS SEARCH MATCH
*
EDFOUND  OI    FINDSW,FVRT         FLAG FIND RESULTS CONTROL LOCATION
         TM    FINDSW3,CHNGE       PERFORMING A CHANGE?
         BNO   EDCHNGOK            NO, PERFORMING A FIND
         NI    FLG1(R3),255-CHGE   YES, RESET LINE CHANGE ERROR FLAG
         SPACE
*         PERFORM DATA REPLACEMENT
         SPACE
         LA    R6,CTLLEN(,R3)      POINT TO START OF DATA
         A     R6,MAXRECSZ         POINT PAST END OF RECORD
         TM    EPNUM,1             SEQUENCE NUMBERS ACTIVE?
         BNO   *+8                 NO
         S     R6,EDFW8            YES, POINT TO SEQUENCE NUMBER
         ST    R6,DOUBLE           REMEMBER WHERE END OF DATA IS
         LA    R6,1
         AH    R6,STRING2L         GET THE REPLACEMENT STRING LENGTH
         AR    R6,R5               POINT PAST END OF REPLACEMENT
         C     R6,DOUBLE           WILL REPLACEMENT FIT IN RECORD?
         BNH   EDSHUFL1            YES, DO PRE-REPLACE SHUFFLE
EDCHGERR OI    FLG1(R3),CHGE       NO, FLAG LINE ERROR ==ERR>
         TM    FINDSW3,CHGERR      FIRST CHANGE ERROR?
         BO    EDCHNGOK            NO, CONTINUE SUBCOMMAND PROCESSING
         OI    FINDSW3,CHGERR      YES, FLAG CHANGE ERROR
         XC    COUNTER2,COUNTER2   SHOW THIS ERROR NEXT DISPLAY
         B     EDCHNGOK            CONTINUE SUBCOMMAND PROCESSING
         SPACE
*         PRE-REPLACE SHUFFLE - MAKE ROOM FOR REPLACEMENT STRING
         SPACE
EDSHUFL1 LH    R15,STRING2L        GET LENGTH OF REPLACEMENT
         SH    R15,STRINGL         GET EXTRA SPACE NEEDED
         BNP   EDRPLCIT            NEED NO EXTRA SPACE NOW
         LAE   R1,1(,R5)
         AH    R1,STRINGL          POINT PAST FOUND DATA
         LR    R14,R1              REMEMBER THIS ADDRESS
         L     R6,DOUBLE           POINT PAST END OF RECORD DATA
         BCTR  R6,0                POINT TO LAST DATA BYTE
EDSHFLP1 CR    R1,R6               REACHED END OF RECORD?
         BNL   EDCHGERR            YES, REPLACEMENT WON'T FIT
         CLC   0(2,R1),EDBLNKS     CAN WE SQUEEZE A BLANK OUT HERE?
         LA    R1,1(,R1)           POINT TO NEXT DATA BYTE
         BNE   EDSHFLP1            NO, KEEP LOOKING
EDSQEEZ1 BCT   R15,EDSHFLP1        YES, KEEP LOOKING IF NOT ENOUGH YET
         BCTR  R1,0                POINT TO FIRST POTENTIAL TARGET BYTE
         LAE   R15,0(,R1)          POINT TO LIMIT OF SHUNT
         BCTR  R15,0               POINT TO FIRST POTENTIAL SOURCE BYTE
EDSHFLP2 CLI   0(R15),C' '         IS THE SOURCE A BLANK?
         BNE   EDSHF1UP            NO, COPY IT
         CLI   1(R1),C' '          ALREADY HAVE A BLANK IN HAND?
         BE    EDSHF1OK            YES, DO NOT COPY IT
EDSHF1UP MVC   0(1,R1),0(R15)      COPY THE BYTE
         BCTR  R1,0                DECREMENT THE TARGET ADDRESS
EDSHF1OK BCTR  R15,0               DECREMENT THE SOURCE ADDRESS
         CR    R15,R14             BACKED UP INTO FOUND DATA YET?
         BNL   EDSHFLP2            NO, KEEP SHUFFLING
         SPACE
*         OVERLAY FOUND DATA WITH REPLACEMENT STRING
         SPACE
EDRPLCIT TM    STRING2L,X'80'      IS REPLACEMENT A NULL STRING?
         BO    EDREPDON            YES, DO THE "PAPERWORK"
         TM    FINDSW3,CHGPIC      IS REPLACEMENT A PICTURE STRING?
         BO    EDCHGPIC            YES, GO HANDLE IT
         LH    R1,STRING2L         GET REPLACEMENT STRING LENGTH CODE
         CH    R1,STRINGL          SAME LENGTH AS SEARCH ARGUMENT?
         BNE   EDREPON             NO, DO THE REPLACE
         EX    R1,EDREPCLC         CHANGING THE DATA?
         BE    EDNOCHNG            NO, DO NOT FLAG AS CHANGED
EDREPON  EX    R1,EDREPMVC         LOAD REPLACEMENT DATA
         LA    R5,1(R1,R5)         POINT PAST CHANGED DATA
EDREPDON OI    EDFLG1,SAVEY+SAVEZ  FLAG IN-CORE DATA HAS CHANGED
         OI    FLG1(R3),CHGL       MARK RECORD AS CHANGED
         TM    FINDSW2,FALL        DOING A COMPLETE SEARCH?
         BNO   EDSHUFL2            NO, GO DO POST-REPLACE SHUFFLE
         OI    FLG1(R3),CHGA       YES, MARK CHANGE ALL WITH ==CHG>
         B     EDSHUFL2            GO DO POST-REPLACE SHUFFLE
         SPACE
EDNOCHNG LA    R5,1(R1,R5)         POINT PAST UNCHANGED DATA
         B     EDCHNGOK            NO CHANGE THIS TIME
         SPACE
EDREPCLC CLC   0(0,R5),STRING2     <<< EXECUTED >>>
EDREPMVC MVC   0(0,R5),STRING2     <<< EXECUTED >>>
         SPACE
EFNDCHR  MVC   1(0,R2),0(R5)       <<< EXECUTED >>>
EFNDFIX  TR    1(0,R2),PERIODS     <<< EXECUTED >>>
EFNDTST  CLC   1(0,R2),0(R5)       <<< EXECUTED >>>
EFNDCPY  MVC   DYNTABLE(0),1(R2)   <<< EXECUTED IN ASCII MODE >>>
EFNDCMP  CLC   1(0,R2),DYNTABLE    <<< EXECUTED IN ASCII MODE >>>
         SPACE
EDCHGPIC LA    R6,1
         AH    R6,STRING2L         GET LENGTH OF STRING2 (AND STRING)
         LAE   R14,STRING2         POINT TO REPLACEMENT DATA
EDRPLOOP CLI   0(R14),C'='         LEAVING CHARACTER UNCHANGED?
         BE    EDRPNEXT            YES, THAT WAS EASY
         CLI   0(R14),C'<'         TRANSLATING TO LOWER CASE?
         BNE   EDRPTST1            NO
         TRT   0(1,R5),EDTUPPER    IS THIS CHARACTER UPPER CASE?
         BZ    EDRPNEXT            NO
         TR    0(1,R5),EDTUNKAP    YES, MAKE IT LOWER CASE
         B     EDREPCHG            GO SET CHANGE FLAGS
EDRPTST1 CLI   0(R14),C'>'         TRANSLATING TO UPPER CASE?
         BNE   EDRPTST2            NO
         TRT   0(1,R5),EDTLOWER    IS THIS CHARACTER LOWER CASE?
         BZ    EDRPNEXT            NO
         AIF   (&ENV390).EK5
         LA    R15,EDITKAPS        POINT TO UPPER CASE TRANSLATE TABLE
         AGO   .EK6
.EK5     ANOP
         LAM   A15,A15,EDZEROS     RESET FOR PRIMARY ASID REFERENCE
         LARL  R15,EDITKAPS        POINT TO UPPER CASE TRANSLATE TABLE
.EK6     ANOP
         TR    0(1,R5),0(R15)      YES, MAKE IT UPPER CASE
         B     EDREPCHG            GO SET CHANGE FLAGS
EDRPTST2 CLC   0(1,R5),0(R14)      IS REPLACEMENT DIFFERENT?
         BE    EDRPNEXT            NO
         MVC   0(1,R5),0(R14)      YES, MAKE THE CHANGE
EDREPCHG OI    EDFLG1,SAVEY+SAVEZ  FLAG IN-CORE DATA HAS CHANGED
         OI    FLG1(R3),CHGL       MARK RECORD AS CHANGED
         TM    FINDSW2,FALL        DOING A COMPLETE SEARCH?
         BNO   EDRPNEXT            NO
         OI    FLG1(R3),CHGA       YES, MARK CHANGE WITH SCOPE OF ALL
EDRPNEXT LA    R5,1(,R5)           POINT TO NEXT FOUND DATA BYTE
         LA    R14,1(,R14)         POINT TO NEXT REPLACEMENT BYTE
         BCT   R6,EDRPLOOP         PROCESS WHOLE STRING
         SPACE
*         POST-REPLACE SHUFFLE - MOVE DATA BACK TO ABUT REPLACEMENT
         SPACE
EDSHUFL2 LH    R15,STRINGL         GET LENGTH OF FOUND DATA
         SH    R15,STRING2L        GET SHRINKAGE
         BNP   EDCHNGDN            NEED NO EXTRA COVERAGE NOW
         LAE   R14,0(,R5)          POINT PAST REPLACEMENT
         LAE   R6,0(,R5)           POINT PAST REPLACEMENT
         AR    R6,R15              POINT TO DATA PAST REPLACEMENT
         L     R15,DOUBLE          POINT PAST RECORD'S DATA
         BCTR  R15,0               POINT TO RECORD'S LAST DATA BYTE
EDSHF2LP CLI   0(R6),X'FF'         UNPRINTABLE?
         BE    EDNDSHF2            YES, END THE SHUFFLING
         CLI   0(R6),C' '          UNPRINTABLE?
         BL    EDNDSHF2            YES, END THE SHUFFLING
         BH    EDSHF2MV            NON-BLANK SO SHUFFLE IT
         CR    R6,R15              IS THIS THE LAST BYTE TO SHUFFLE?
         BNL   EDSHF2MV            YES, GO SHUFFLE IT
         CLI   1(R6),C' '          NO, TWO CONSECUTIVE BLANKS?
         BE    EDNDSHF2            YES, END THE SHUFFLING
EDSHF2MV MVC   0(1,R14),0(R6)      SHUFFLE A BYTE TO THE LEFT
         LA    R14,1(,R14)         INCREMENT TARGET ADDRESS
         LA    R6,1(,R6)           INCREMENT SOURCE ADDRESS
         CR    R6,R15              EXHAUSTED SOURCE DATA?
         BNH   EDSHF2LP            NO, KEEP SHUFFLING
EDNDSHF2 MVI   0(R14),C' '         BLANK OUT SHUFFLED DATA
         LA    R14,1(,R14)         INCREMENT TARGET ADDRESS
         CR    R14,R6              BLANKED ALL SHUFFLED DATA?
         BL    EDNDSHF2            NO, KEEP BLANKING
         SPACE
*         UPDATE CHANGED LINE SYNTAX STATUS
         SPACE
EDCHNGDN LAE   R1,0(,R3)           POINT TO THE CHANGED LINE
         L     R15,EDITSNT@        POINT TO ROUTINE ENTRY POINT
         BASR  R14,R15             UPDATE LINE SYNTAX STATUS
         TM    FINDSW2,FALL        GOING TO RESUME A FORWARD SEARCH?
         BNO   EDCHNGOK            NO, DON'T NEED DYNTABLE AGAIN
         TM    FINDSW4,FUSETRT     USING DYNTABLE IN THE PROCESS?
         BNO   EDCHNGOK            NO, USE ORDINARY FORWARD SCAN
         XC    DYNTABLE,DYNTABLE   YES, REPAIR TRANSLATE TABLE
         SR    R2,R2
         IC    R2,STRING           GET FIRST CHARACTER TO LOOK FOR
         LAE   R1,DYNTABLE(R2)
         MVI   0(R1),X'FF'         FLAG IT IN TRANSLATE TABLE
         TM    FINDSW2,FUOL        CASE INSENSITIVE SEARCH?
         BNO   EDCHNGOK            NO, ALL SET
         CLI   STRING,C'A'         IS FIRST CHARACTER AN ALPHABETIC?
         BL    EDCHNGOK            NO, CASE NOT APPLICABLE TO IT
         CLI   STRING,C'Z'         IS FIRST CHARACTER AN ALPHABETIC?
         BH    EDCHNGOK            NO, CASE NOT APPLICABLE TO IT
         TM    STRING,X'0F'        IS FIRST CHARACTER AN ALPHABETIC?
         BZ    EDCHNGOK            NO, CASE NOT APPLICABLE TO IT
         LA    R14,64              YES
         SR    R1,R14              POINT TO LOWER CASE SPOT IN TABLE
         MVI   0(R1),X'FF'         FLAG IT IN TRANSLATE TABLE
         SPACE
         SPACE
*         ANY DATA REPLACEMENT PROCESSING HAS NOW BEEN DONE
         SPACE
EDCHNGOK LAM   A6,A2,EDZEROS       RESET ACCESS REGISTERS FOR SEARCHIT
         ICM   R14,15,COUNTER2     FIRST MATCH OF SEARCH?
         BNZ   EFMSGDN             NO, DO NOT CREATE MESSAGE NOW
         LA    R14,CTLLEN(,R3)     POINT TO START OF DATA
         LR    R2,R5               GET ADDRESS OF FOUND DATA
         SR    R2,R14              GET OFFSET TO DATA
         ST    R2,FNDOFF           SAVE THE FOUND DATA RECORD OFFSET
         ST    R3,FNDREC           SAVE THE FOUND DATA RECORD ADDRESS
         ST    R3,CSRRECAD         SAVE THE FOUND DATA RECORD ADDRESS
         MVC   EDALLSAV,FNDNUM     REMEMBER FIND RECORD DETAILS
         TM    EDFLG1,E1SHORT      IS DATA TOO SHORT FOR LINE?
         BO    EFSCROLX            YES, NO LEFT/RIGHT SCROLL NEEDED
         LR    R14,R2              GET OFFSET OF FOUND DATA (FNDOFF)
         TM    FINDSW3,CHNGE       PERFORMING A CHANGE?
         BNO   EDOFFCHK            NO, PERFORMING A FIND
         TM    FLG1(R3),CHGE       WAS THIS CHANGE SUCCESSFUL?
         BO    EDOFFCHK            NO, PREVENT NEGATIVE SCROLL OFFSET
         SH    R14,STRING2L        YES, NO CHANGE ERRORS SO FAR
         BCTR  R14,0               POINT BACK TO WHERE FOUND DATA WAS
EDOFFCHK C     R14,EDOFFSET        WAS IT FOUND BEFORE 1ST COL?
         BE    EFSCROLX            NO, AT FIRST COLUMN ALREADY
         BL    EFNDSCRL            YES, HAVE TO SCROLL LEFT
         AH    R14,STRINGL         FIND END OF FOUND STRING
         L     R15,EDATWDTH        GET EFFECTIVE SCREEN WIDTH
         A     R15,EDOFFSET        GET OFFSET OF RIGHT SIDE
         CR    R14,R15             WAS IT FOUND AFTER LAST COL?
         BL    EFSCROLX            NO, SO COMPLETELY VIEWABLE
EFNDSCRL LTR   R14,R14             CHECK REQUIRED OFFSET
         BZ    *+6                 ZERO SO HAVE NEW TARGET
         BCTR  R14,0               LEFT ONE COL FOR GOOD LUCK
         L     R15,EDATWDTH        GET EFFECTIVE SCREEN WIDTH
         ST    R14,EDOFFSET        PRELIMINARY NEW OFFSET
         AR    R14,R15             ADD SCREEN WIDTH
         C     R14,MAXRECSZ        LONGER THAN RECORD LENGTH?
         BNH   EFSCROLX            NO, SCROLLING CALC ALL DONE
         L     R14,MAXRECSZ        GET MAX RECORD SIZE
         SR    R14,R15             SUBTRACT SCREEN WIDTH
         BNM   *+6                 NON-NEGATIVE IS OKAY
         SR    R14,R14             MAKE NEGATIVE OFFSET ZERO
         ST    R14,EDOFFSET        THAT'S IT
EFSCROLX DS    0H                  END OF LEFT/RIGHT SCROLL FOR FIND
         TM    FINDSW2,FALL        DOING A COMPLETE SEARCH?
         BO    EFMSGDN             YES, DO NOT CREATE MESSAGE NOW
EDFDOMSG LA    R2,MSG+2            POINT TO MESSAGE TEXT AREA
         TM    FINDSW3,CHNGE       PERFORMING A CHANGE?
         BNO   EDFNDMSG            NO, PERFORMING A FIND
EFDADMSG LAE   R5,STRING           SHOW SEARCH ARGUMENT IN MESSAGE
EDFNDMSG LH    R14,STRINGL         GET LENGTH CODE OF FOUND DATA
         EX    R14,EFNDCHR         SHOW FOUND DATA
         MVI   0(R2),QUOTE         LOAD LEADING QUOTE
         TM    EPASCII,X'01'       IN ASCII MODE?
         BZ    EDFNDEBC            NO
         LA    R0,1(,R14)          YES, GET THE FOUND DATA LENGTH
         LAE   R15,1(,R2)          POINT TO THE MESSAGE DATA
*    A SINGLE TRT MAY HAVE BEEN MORE ELEGANT THAN THIS LOOP
*    WHICH CHECKS THAT ALL CHARACTERS TO BE SHOWN ARE IN
*    THE 7-BIT ASCII DISPLAYABLE CODE POINT RANGE, BUT THIS
*    CODE TAKES FEWER BYTES THAN THE TRT AND TRANSLATE TABLE.
EDFASCXT CLI   0(R15),X'20'        CODE POINT BELOW BLANK?
         BL    EDFNDHEX            YES, GO SHOW DATA IN HEXADECIMAL
         CLI   0(R15),X'7F'        CODE POINT OUTSIDE 7-BIT RANGE?
         BH    EDFNDHEX            YES, GO SHOW DATA IN HEXADECIMAL
         LA    R15,1(,R15)         POINT TO NEXT BYTE
         BCT   R0,EDFASCXT         CONTINUE ASCII HEX TEST
         SAC   0                   YES, SET PRIMARY MODE FOR SVC
         LA    R0,1(,R14)          GET THE FOUND DATA LENGTH
         LA    R1,1(,R2)           POINT TO THE MESSAGE DATA
         XLATE (1),(0),TO=E        TRANSLATE THE DATA FOR DISPLAY
         SAC   512                 SET AR MODE
         B     EFMSTROK            GO FINALIZE MESSAGE
EDFNDEBC EX    R14,EFNDFIX         FIX FOUND DATA FOR DISPLAY
         EX    R14,EFNDTST         ALL GOOD CHARACTERS?
         BE    EFMSTROK            YES, NONE HAD TO BE TRANSLATED
EDFNDHEX MVI   0(R2),C'X'          NO, SHOW DATA IN HEXADECIMAL
         MVI   1(R2),QUOTE         LOAD LEADING QUOTE
         LA    R14,1(,R14)         GET LENGTH OF STRING
         LAE   R15,0(,R5)          POINT TO THE DATA TO SHOW
EFNDAXLP UNPK  2(3,R2),0(2,R15)    UNPACK A BYTE
         TR    2(2,R2),EDHEX-C'0'
         LA    R2,2(,R2)           ADJUST TARGET
         LA    R15,1(,R15)         ADJUST SOURCE
         BCT   R14,EFNDAXLP
EFMSTROK LA    R2,2(R14,R2)        POINT PAST COPIED DATA
         MVI   0(R2),QUOTE         LOAD TRAILING QUOTE
         MVC   1(10,R2),=CL10' NOT FOUND'
         TM    STATUS7,$7BELL      ANY MATCH FOUND?
         BO    EFMSGOK             NO, HAVE CORRECT TEXT
         MVC   1(10,R2),=CL10' CHANGED  '
         TM    FINDSW3,CHNGE       CHANGE COMMAND?
         BO    EFMSGOK             YES, HAVE CORRECT TEXT
         MVC   1(10,R2),=CL10' FOUND    '
         TM    FINDSW3,FEXC        EXCLUDE REQUEST?
         BNO   EFMSGOK             NO
         MVC   1(10,R2),=CL10' EXCLUDED '
EFMSGOK  LA    R14,11(,R2)         POINT PAST MESSAGE TEXT
         LA    R15,MSG+2           POINT TO MESSAGE TEXT
         SR    R14,R15             GET THE MESSAGE LENGTH
         STH   R14,MSG             SET THE MESSAGE LENGTH
         TM    STATUS10,$10CAP     CAPS ON?
         BO    EFMSGRDY            YES
         TR    2(9,R2),EDTUNKAP    NO, SHOW SOME LOWER CASE
EFMSGRDY ICM   R14,15,FWD(R3)      END OF DATA?
         BZ    EDFINDEX            YES, FINISHED SEARCHING
         ICM   R15,15,BAK(R3)      TOP OF DATA?
         BZ    EDFINDEX            YES, FINISHED SEARCHING
         TM    FINDSW4,FRGE        LINE RANGE CURRENT?
         BZ    EFMSGDN             NO, SKIP RANGE EXTREMITY TESTS
         C     R15,EDRGELST        PREVIOUS LINE IS BOTTOM OF RANGE?
         BE    EDFINDEX            YES, FINISHED SEARCHING
         C     R14,EDRGEFST        NEXT LINE IS TOP OF RANGE?
         BE    EDFINDEX            YES, FINISHED SEARCHING
EFMSGDN  NI    FLG1(R3),255-XCLD   ENSURE LINE NOT EXCLUDED
         TM    FINDSW3,FEXC        EXCLUDE REQUEST?
         BNO   *+8                 NO
         OI    FLG1(R3),XCLD       YES, ENSURE LINE IS EXCLUDED
         LA    R14,1
         A     R14,COUNTER2        INCREMENT COUNT OF MATCHES FOUND
         ST    R14,COUNTER2
         TM    FINDSW2,FALL        WAS 'ALL' REQUESTED?
         BNO   EDFINDEX            NO, EXIT SUBCOMMAND ROUTINE
*    AN 'ALL' REQUEST IS ALWAYS IN THE FORWARD DIRECTION SO THE
*    'FBAK' FLAG NEED NOT BE TESTED.  FURTHER, SINCE THE SEARCH WILL
*    RESUME ON THE SAME RECORD, THE EXCLUSION STATUS OF THIS RECORD
*    NEED NOT BE (RE)CHECKED.  WE NEED TO BRANCH BACK TO THE POINT
*    IN THE LOGIC WHERE THE REMAINING COLUMNS TO BE SEARCHED WILL BE
*    CALCULATED AND LOADED INTO GPR0, GPR1 (RECORD DATA LENGTH) AND
*    GPR2 (RECORD DATA ADDRESS) WILL BE SET UP FOR THE 'SEARCHIT'
*    ROUTINE, AND 'FIND' VERSUS 'FINDNOT' WILL BE HANDLED.
*    THE SEARCH IS TO RESUME STRAIGHT AFTER THE REPLACED TEXT FOR
*    A 'CHANGE' OR FROM THE NEXT BYTE FOR A 'FIND(NOT)' MATCH.
         TM    FINDSW3,CHNGE       CHANGE COMMAND?
         BO    EFLNCHGD            YES
         LA    R5,1(,R5)           NO, ADVANCE A BYTE PAST THE MATCH
         B     EFNDSTRG            GO RESUME SEARCH
EFLNCHGD TM    FLG1(R3),CHGE       WAS THIS CHANGE SUCCESSFUL?
         BO    EFNDNEXT            NO, JUMP STRAIGHT TO NEXT LINE
         TM    STRING2L,X'80'      IS REPLACEMENT A NULL STRING?
         BNO   EFNDSTRG            NO, GO RESUME SEARCH
         LA    R15,1               YES
         AH    R15,STRINGL         GET THE SEARCH STRING LENGTH
         LA    R14,STRING          POINT TO THE SEARCH STRING
         LA    R1,C' '             GET THE PAD CHARACTER
         SLL   R1,24               PROMOTE IT AND ZERO THE LENGTH
         CLCL  R14,R0              SEARCHING ONLY FOR BLANK(S)?
         BE    EFNDNEXT            YES, JUMP STRAIGHT TO NEXT LINE
         B     EFNDSTRG            GO RESUME SEARCH
         SPACE
EDFNOREC MVI   MSG,174             NO RECORDS TO PROCESS
         SPACE
EDFINDEX SAC   0                   SET PRIMARY MODE
         NI    FINDSW2,255-FALL    RESET 'ALL' STATUS
         NI    FINDSW3,255-F1END   RESET "ONE END" STATUS
         OI    EDFLG2,E2CRU        SUPPRESS AUTO CURSOR MOVE
         CLI   MSG,34              INVALID OPERAND?
         BE    EDSHOOP             YES, GO SHOW WHICH OPERAND
         CLI   MSG,113             INCONSISTENT OPERANDS?
         BE    EDSHOOP             YES, GO SHOW WHICH OPERAND
         CLI   MSG,114             INVALID COLUMN RANGE?
         BE    EDSHOOP             YES, GO SHOW WHICH OPERAND
         TM    FINDSW3,CHGERR      ANY CHANGE DATA LENGTH PROBLEM?
         BNO   EDITCYCL            NO, RETURN TO MAINLINE
         MVI   MSG,128             CHANGE ERROR(S) OCCURRED
         B     EDITCYCL            RETURN TO MAINLINE
         DROP  R10                 EDFIND
         SPACE
         DC    0D'0'
         LTORG
         SPACE
         DC    0D'0'               END OF CSECT
         DROP  R11,R12             REVEDIT, @EDDATA
         TITLE '  R E V E D I T   -   D S E C T S  '
@EDDATA  DSECT
         DS    18F                 REGISTER SAVEAREA
@EDTMRKR DS    CL8                 STORAGE AREA MARKER
EDSAVE2  DS    18F                 REGISTER SAVEAREA
EDITDCB  DS    XL(SEQDCBL)         BSAM/BPAM DCB OF FILE BEING EDITED
         AIF   (NOT &ENVBIG).EDDCBE4
EDITDCBE DS    XL(EDDCBEL)         BSAM/BPAM DCBE OF FILE BEING EDITED
.EDDCBE4 ANOP
UNDODCB  DS    XL(SEQDCBL)         BPAM DCB OF UNDO FILE
UNDEODA  EQU   UNDODCB+DCBEODA-IHADCB,3
UNDRECFM EQU   UNDODCB+DCBRECFM-IHADCB,1
UNDEXLSA EQU   UNDODCB+DCBEXLSA-IHADCB,3
UNDDDNAM EQU   UNDODCB+DCBDDNAM-IHADCB,8
UNDOFLGS EQU   UNDODCB+DCBOFLGS-IHADCB,1
UNDBLKSI EQU   UNDODCB+DCBBLKSI-IHADCB,2
UNDLRECL EQU   UNDODCB+DCBLRECL-IHADCB,2
         AIF   (NOT &ENVESA).EDDYN1
DSPCTOKN DS    D                   DATA SPACE SPACE TOKEN
DSPCALET DS    F                   DATA SPACE ALET
DSPCORIG DS    F                   DATA SPACE ORIGIN ADDRESS
EDARSAVE DS    16F                 ACCESS REGISTER SAVE AREA
.EDDYN1  ANOP
EDALLSAV DS    D                   FIND/CHANGE ALL 1ST RECORD DETAILS
EDRETSV1 DS    F
EDRETSV2 DS    F
EDBUFSIZ DS    F                   I/O BUFFER STORAGE SIZE
EDBUFADR DS    A                   I/O BUFFER ADDRESS
COUNTER1 DS    F                   \________/ ONE
COUNTER2 DS    F                   /        \ DOUBLEWORD
LINEADDR DS    A                   ADDRESS OF TOP SCREEN LINE'S RECORD
LINENMBR DS    F                   NUMBER OF TOP SCREEN LINE'S RECORD
EDOFFSET DS    F                   SCROLL RIGHT DISTANCE FROM LEFT MAX
EDIOABND DS    F                   DCB ABEND DETAILS
EDRGEREX EQU   *,8                 POINTERS FOR RANGE OF RECORDS
EDRGEFST DS    A                   ADDRESS OF FIRST RECORD IN RANGE
EDRGELST DS    A                   ADDRESS OF LAST RECORD IN RANGE
EDRGEFNM DS    F                   NUMBER OF FIRST RECORD IN RANGE
EDRGELNM DS    F                   NUMBER OF LAST RECORD IN RANGE
EDSYNWRK DS    D                   SYNTAX COLOURING WORK AREA
EDSSTMTW DS    0D                  SYNTAX STATEMENT WORK AREA
EDSYNFLG DS    XL1                 EDIT SYNTAX HILIGHTLIGHTING FLAGS
EDSDIL   EQU   X'80'               DOT IN LABEL PRESENT
EDSRFB   EQU   X'40'               RECFM IS FB
EDDOTLOC DS    X
EDSVOL   DS    CL6
EDSLRECL DS    H
EDSBLKSI DS    H
EDLNSHDW DS    XL80                SYNTAX COLOURED SHADOW LINE DATA
$EDSAVE  DS    XL($DSVARSZ)        SAVE AREA FOR FILE DETAILS
$EDDSCB  DS    XL140               SAVE AREA FOR OBTAINED DSCB
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
EPSZ     EQU   32                  EDIT PROFILE MEMBER RECORD COUNT
EDITPROF DS    CL160               EDIT PROFILE DATA
         ORG   EDITPROF
EPDSN    DS    CL44                EDIT PROFILE DATA SET NAME
EPSEP01  DS    C
EPDATE   DS    CL7                 EDIT PROFILE ENTRY UPDATE DATE
EPSEP02  DS    C
EPLVL    DS    CL2                 EDIT PROFILE STRUCTURE LEVEL
EPSEP03  DS    C
EPCAPS   DS    CL1                 EDIT PROFILE CAPS SETTING
EPSEP04  DS    C
EPNUM    DS    CL1                 EDIT PROFILE NUMBER SETTING
EPSEP05  DS    C
EPHEX    DS    CL1                 EDIT PROFILE HEX SETTING
EPSEP06  DS    C
EPNULLS  DS    CL1                 EDIT PROFILE NULLS SETTING
EPSEP07  DS    C
EPZAP    DS    CL1                 EDIT PROFILE ZAP SETTING
EPSEP08  DS    C
EPDSNC   DS    CL1                 EDIT PROFILE DSNCHK SETTING
EPSEP09  DS    C
EPHI     DS    CL8                 EDIT PROFILE HILITE SETTING
EPSEP10  DS    C
EPCOLS   DS    CL1                 EDIT PROFILE COLS SETTING
EPSEP11  DS    C
EPAS     DS    CL1                 EDIT PROFILE AUTOSAVE SETTING
EPSEP12  DS    C
EPTAB1   DS    CL5                 EDIT PROFILE TAB COLUMN 1
EPSEP13  DS    C
EPTAB2   DS    CL5                 EDIT PROFILE TAB COLUMN 2
EPSEP14  DS    C
EPTAB3   DS    CL5                 EDIT PROFILE TAB COLUMN 3
EPSEP15  DS    C
EPTAB4   DS    CL5                 EDIT PROFILE TAB COLUMN 4
EPSEP16  DS    C
EPTAB5   DS    CL5                 EDIT PROFILE TAB COLUMN 5
EPSEP17  DS    C
EPTAB6   DS    CL5                 EDIT PROFILE TAB COLUMN 6
EPSEP18  DS    C
EPTAB7   DS    CL5                 EDIT PROFILE TAB COLUMN 7
EPSEP19  DS    C
EPTAB8   DS    CL5                 EDIT PROFILE TAB COLUMN 8
EPSEP20  DS    C
EPASCII  DS    CL1                 EDIT PROFILE ASCII SETTING
EPSEP21  DS    C
EPC#NX   DS    CL3                 EDIT PROFILE COMPARE X NX COUNT
EPSEP22  DS    C
EPHIDE   DS    CL1                 EDIT PROFILE HIDE SETTING
EPSEP23  DS    C
EPPRES   DS    CL1                 EDIT PROFILE PRESERVE LENGTH SETTING
EPPAD    DS    CL26
         ORG
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
EDBL     DS    CL80                BLDL RESULTS AREA
         ORG   EDBL
EDBLFF   DS    H                   COUNT OF MEMBERS IN BUILD LIST
EDBLLL   DS    H                   MAXIMUM ENTRY LENGTH
EDBLNAME DS    CL8                 MEMBER NAME
EDBLTTRP DS    XL3                 MEMBER START TTR
EDBLCNCT DS    XL1                 CONCATENATION NUMBER ("K")
EDBLLIBF DS    XL1                 LOCATION CODE ("Z")
EDBLINDC DS    XL1                 INDICATOR BYTE (ALIAS, ETC.)
EDBLVER  DS    XL1                 VERSION
EDBLLVL  DS    XL1                 MODIFICATION LEVEL
EDBLFLG  DS    XL1                 FLAGS
EDBLSCLM EQU   X'80'               SLCM-MANAGED
EDBLXSTA EQU   X'20'               EXTENDED STATISTICS
EDBLSEC  DS    XL1                 SAVE TIME - SECOND
EDBLCRE  DS    PL4                 CREATION DATE
EDBLUPD  DS    PL4                 SAVE DATE
EDBLHOUR DS    XL1                 SAVE TIME - HOUR
EDBLMIN  DS    XL1                 SAVE TIME - MINUTE
EDBLSIZE DS    XL2                 CURRENT RECORD COUNT
EDBLINIT DS    XL2                 INITIAL RECORD COUNT
EDBLMOD  DS    XL2                 MODIFIED RECORD COUNT
EDBLUID  DS    XL7                 MODIFYING USERID
EDBLBLNK DS    XL3                 BLANKS
         ORG   EDBLBLNK+1
EDBXSIZE DS    XL4                 CURRENT RECORD COUNT
EDBXINIT DS    XL4                 INITIAL RECORD COUNT
EDBXMOD  DS    XL4                 MODIFIED RECORD COUNT
         ORG
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
EDLBND   DS    F                   LEFT BOUND OFFSET
EDRBND   DS    F                   RIGHT BOUND COLUMN
EDENQPRM DS    XL16                FOUR WORDS FOR ENQ/RESERVE/DEQ
EDDSNMEM DS    CL52                ENQUEUE MINOR RESOURCE NAME
EDNEWVER DS    H                   STATISTICS VERSION AFTER CHANGE(S)
EDNEWLVL DS    H                   STATISTICS LEVEL AFTER CHANGE(S)
EDLVLIND DS    CL2                 RECORD LEVEL INDICATOR WHEN NUM ON
EDCMPCAT DS    H                   COMPARE CONCATENATION NUMBER
         AIF   (NOT &ENVESA).EDDYN2
         DS    0F
         DSPSERV PLISTVER=MAX,MF=(L,DSPCWORK)
ALESERVL ALESERV MF=L
         DS    0F
         AGO   .EDDYN3
.EDDYN2  ANOP
EDATORIG DS    A                   EDIT DATA STORAGE CHAIN ORIGIN
.EDDYN3  ANOP
EDSUBDSN DS    0XL46               TEMPORARY DATA SET NAME HOLD AREA
REPLSTOW DS    0XL(52+4)           REPLACE COMMAND STOW AND RC AREA
REPLNAME DS    CL8                 MEMBER NAME
REPLTTRP DS    XL3                 MEMBER START TTR
REPLINDC DS    XL1                 INDICATOR BYTE (ALIAS, ETC.)
REPLVER  DS    XL1                 VERSION
REPLLVL  DS    XL1                 MODIFICATION LEVEL
REPLFLG  DS    XL1                 FLAGS
*        EQU   X'80'               SLCM-MANAGED
*        EQU   X'20'               EXTENDED STATISTICS
REPLSEC  DS    XL1                 SAVE TIME - SECOND
REPLCRE  DS    PL4                 CREATION DATE
REPLUPD  DS    PL4                 SAVE DATE
REPLHOUR DS    XL1                 SAVE TIME - HOUR
REPLMIN  DS    XL1                 SAVE TIME - MINUTE
REPLSIZE DS    XL2                 CURRENT RECORD COUNT
REPLINIT DS    XL2                 INITIAL RECORD COUNT
REPLMOD  DS    XL2                 MODIFIED RECORD COUNT
REPLUID  DS    XL7                 MODIFYING USERID
REPLBLNK DS    XL3                 BLANKS
         ORG   REPLBLNK+1
REPXSIZE DS    XL4                 CURRENT RECORD COUNT
REPXINIT DS    XL4                 INITIAL RECORD COUNT
REPXMOD  DS    XL4                 MODIFIED RECORD COUNT
REPLRETC DS    F                   REPLACE STOW RETURN CODE
SUBREC   DS    CL80                SUBMIT FILE RECORD BUFFER
SUBDCB   DS    XL(SUBDCB_L)        QSAM DCB AREA FOR REVEDIT SUBCOMMAND
SUBRECFM EQU   SUBDCB+DCBRECFM-IHADCB,1
SUBEXLSA EQU   SUBDCB+DCBEXLSA-IHADCB,3
SUBDDNAM EQU   SUBDCB+DCBDDNAM-IHADCB,8
SUBBLKSI EQU   SUBDCB+DCBBLKSI-IHADCB,2
SUBLRECL EQU   SUBDCB+DCBLRECL-IHADCB,2
REPLBLK1 DS    F                   REPLACE OUTPUT BUFFER SIZE
REPLBLK2 DS    F                   REPLACE OUTPUT BLOCK SIZE
REPLOAIA DS    XL(OAIALEN)
EDLOCDSN DS    CL44                DATA SET NAME TO LOCATE
EDLOCBUF DS    XL16                USES NEXT 265 BYTES
DYNTABLE DS    CL256               RUN-TIME TRANSLATE TABLE
FREEAREA DS    A                   START OF UNUSED DATA AREA
FREESIZE DS    F                   SIZE OF UNUSED AREA
UNDOBLKF DS    F                   UNDO FILE BLOCKING FACTOR
MPTANKOR DS    A                   POINTER TO FREE ENTRY CHAIN
TRLBLNK# DS    F                   TRAILING BLANK RECORD COUNT
REDLINES DS    F                   INITIAL DATA RECORD COUNT
RECLINES DS    F                   CURRENT DATA RECORD COUNT
MSGLINES DS    F                   CURRENT MESSAGE LINE COUNT
MAXRECSZ DS    F                   MAXIMUM RECORD DATA LENGTH
RECSTGSZ DS    F                   INTERNAL RECORD STORAGE SIZE
EDDATASZ DS    F                   SIZE OF STORAGE BACKING EDIT DATA
TOPADDR  DS    A                   TOP-OF-DATA ENTRY ADDRESS
* /======= RECORD PREFIX ========\ FILE RECORD CONTROL PREFIX
FWD      EQU   0                   AL4 - FORWARD POINTER
BAK      EQU   4                   AL4 - BACKWARD POINTER
ECHO     EQU   8                   CL6 - LINE COMMAND TO ECHO BACK
FLG1     EQU   14                  XL1 - LINE FLAGS
CHGL     EQU   X'80'               LINE CHANGED IN THIS SESSION
LMSG     EQU   X'40'               LINE IS A MESSAGE AND NOT DATA
XCLD     EQU   X'20'               LINE IS EXCLUDED
LINS     EQU   X'10'               LINE IS BEING INSERTED
CHGA     EQU   X'08'               LINE CHANGED WITH 'ALL' OPERAND
CHGE     EQU   X'04'               LINE HAD ERROR WITH 'CHANGE ALL'
LNNB     EQU   X'02'               LINE HAS NO NON-COMMENT NON-BLANKS
LTOP     EQU   X'01'               LINE IS A "TOP" LINE
FLG2     EQU   15                  XL1 - LINE FLAGS
LCMT     EQU   X'80'               LINE ENDS INSIDE A COMMENT
LQOT     EQU   X'40'               LINE ENDS BEFORE QUOTED STRING ENDS
LCNT     EQU   X'20'               LINE IS CONTINUED
LLOG     EQU   X'10'               BLANKS ALLOWED IN LOGICAL EXPRESSION
LMAC     EQU   X'08'               LINE ENDS INSIDE A PL/I MACRO
LLBL     EQU   X'04'               LINE HAS A LABEL
DCAT     EQU   X'02'               DSNAME IS CATALOGED
NCAT     EQU   X'01'               DSNAME IS NOT CATALOGED
PRND     EQU   16                  XL1 - PARENTHESIS DEPTH
STYP     EQU   17                  XL1 - STATEMENT TYPE
LGCD     EQU   18                  XL1 - LOGIC DEPTH
FLG3     EQU   19                  XL1 - LINE FLAGS
LNEW     EQU   X'80'               LINE DID NOT MATCH COMPARE DATA
LFIX     EQU   X'40'               ALWAYS SHOW LINE AT LEFT MAX
LDEL     EQU   X'20'               THIS LINE HAS BEEN DELETED
OLEN     EQU   20                  XL2 - ORIGINAL RECORD LENGTH
LFIL     EQU   22                  XL2 - FILLER
CTLLEN   EQU   24                  RECORD CONTROL PREFIX LENGTH
* \======= RECORD PREFIX ========/ END OF PREFIX - RECORD DATA FOLLOWS
BTMADDR  DS    A                   BOTTOM-OF-DATA ENTRY ADDRESS
TOPADDR2 DS    A                   TOP-OF-COMPARE-DATA ENTRY ADDRESS
BTMADDR2 DS    A                   END-OF-COMPARE-DATA ENTRY ADDRESS
CSROUTLN DS    A                   POINTER TO LINE WITH CURSOR
TOPINSLN DS    A                   POINTER TO TOP INSERTION LINE
PENDADDR DS    A                   PENDING PRIMARY COMMAND ADDRESS
EDTAB#   DS    8F                  TABS COLUMN NUMBERS HOLD AREA
EDTABL   EQU   *-EDTAB#            TABS COLUMN NUMBERS HOLD AREA SIZE
EDTAB@   DS    F                   SOFTWARE TAB TO IMPLEMENT
EDTABMIN DS    F                   LEFT-MOST SOFTWARE TAB COLUMN
EDPLI1   DS    H                   COLUMN COUNT BEFORE SOURCE CODE
EDPLI2   DS    H                   LAST SOURCE CODE COLUMN NUMBER
EDFLG1   DS    XL1                 EDITOR LOGIC FLAGS
*        EQU   X'80'               SPARE
E1CNCL   EQU   X'40'               TERMINATE THE COMMAND
SAVEX    EQU   X'20'               END AFTER SAVING DATA
SAVEY    EQU   X'10'               SAVE NEEDED BECAUSE CHANGES MADE
SAVEZ    EQU   X'08'               DATA CHANGED SINCE INPUT
E1SHORT  EQU   X'04'               SCREEN WIDER THAN DATA
E1MT     EQU   X'02'               INITIAL DISPLAY OF EMPTY FILE
E1FREEZE EQU   X'01'               SCROLL LOCK
EDFLG2   DS    XL1                 EDITOR LOGIC FLAGS
E2CRU    EQU   X'80'               CSRRECAD HAS BEEN UPDATED
E2ALOC   EQU   X'40'               FILE ALLOCATED BY REVEDIT
E2ENQ    EQU   X'20'               FILE SERIALIZED BY REVEDIT
E2NUM    EQU   X'10'               SEQUENCE NUMBERS PRESENT
E2STAT   EQU   X'08'               MEMBER STATISTICS ARE PRESENT
E2SACE   EQU   X'04'               SLASH-ASTERISK COMMENT ENCOUNTERED
E2OPNI   EQU   X'02'               EDITDCB IS OPEN FOR INPUT
E2OPNO   EQU   X'01'               EDITDCB IS OPEN FOR OUTPUT
E2OPNU   EQU   E2OPNI+E2OPNO       EDITDCB IS OPEN FOR UPDATE
EDFLG3   DS    XL1                 DISPLAY FORMAT FLAGS
EDASM    EQU   3                   DATA RECOGNISED AS ASSEMBLER SOURCE
EDCLIST  EQU   4                   DATA RECOGNISED AS TSO CLIST
EDPLI    EQU   5                   DATA RECOGNISED AS PL/I SOURCE
EDCOBOL  EQU   6                   DATA RECOGNISED AS COBOL SOURCE
EDDATA   EQU   7                   DATA - NO SYNTAX TO COLOUR
EDFLG4   DS    XL1                 EDITOR LOGIC FLAGS
E4RT1    EQU   X'80'               PRIMARY COMMAND WAS 'RIGHT'
E4RT2    EQU   X'40'               SKIP AUTO-INSERT BECAUSE OF 'RIGHT'
E4UPTOK  EQU   X'20'               NO NEED TO FIDDLE WITH WTPMSG
E4RECOV  EQU   X'10'               INITIALIZING EDIT RECOVERY
E4OTHUP  EQU   X'08'               OTHER PROCESS UPDATED DATA SET
E4TBLN   EQU   X'04'               SHOW TABS COLUMNS ON THIS LINE
E4CTAB   EQU   X'02'               RESHOW WITH TABBED CURSOR
*        EQU   X'01'               SPARE
EDFLG5   DS    XL1                 EDITOR LOGIC FLAGS
E5COMP   EQU   X'80'               'COMPARE' SUBCOMMAND IS ACTIVE
E5SEQS   EQU   X'40'               SEQUENTIAL 'COMPARE SESSION/*'
E5XCLD   EQU   X'20'               'COMPARE EXCLUDE' REQUESTED
E5NEXT   EQU   X'10'               'COMPARE NEXT' REQUESTED
E5COB    EQU   X'08'               COBOL SEQUENCE NUMBERS PRESENT
*        EQU   X'04'               SPARE
E5ADD    EQU   X'02'               CLIPBOARD HAS NOT BEEN EMPTIED
E5CUT    EQU   X'01'               'CUT' / 'PASTE' SUBCOMMAND IS ACTIVE
         DS    0F
FINDSW3  DS    XL1                 EDIT-ONLY SEARCH FLAGS
FEXC     EQU   X'80'               CURRENT COMMAND IS EXCLUDE
FEX      EQU   X'40'               RESTRICT TO EXCLUDED LINES
FNX      EQU   X'20'               RESTRICT TO UNEXCLUDED LINES
F1END    EQU   X'10'               STARTING SEARCH FROM ONE END OF DATA
CHNGE    EQU   X'08'               CURRENT COMMAND IS CHANGE
STR2OK   EQU   X'04'               REPLACEMENT STRING NOW SET
CHGPIC   EQU   X'02'               REPLACEMENT IS PICTURE STRING
CHGERR   EQU   X'01'               ERROR IN CHANGE OCCURRED
FINDSW4  DS    XL1                 EDIT-ONLY SEARCH FLAGS
FUSETRT  EQU   X'80'               USE TRT FOR INITIAL SEARCH
FUPD     EQU   X'40'               RESTRICT TO UPDATED LINES
FNOU     EQU   X'20'               RESTRICT TO UNUPDATED LINES
FRGE     EQU   X'10'               RESTRICT TO LABELLED LINE RANGE
FNOW     EQU   X'08'               THIS COMMAND SPECIFIED FIND RANGE
EDHITYP  DS    XL1                 HILITE SETTING
EDJCL    EQU   1                   FORMAT JCL ONLY
EDAUTO   EQU   2                   PERFORM AUTOMATIC DETECTION
EDNAUTO  EQU   255-EDAUTO          SKIP AUTOMATIC DETECTION
EDFLGS   DS    XL1                 EDIT RECORD SORT FLAGS
EDSD     EQU   X'80'               SORT IN DESCENDING ORDER SPECIFIED
EDSA     EQU   X'40'               SORT IN ASCENDING ORDER SPECIFIED
EDSNX    EQU   X'20'               'NX' WAS SPECIFIED
EDSX     EQU   X'10'               'EX' (OR 'X') WAS SPECIFIED
EDSBUBL  EQU   X'08'               DATA MOVED IN THIS SORT PASS
EDSSWAP  EQU   X'04'               THIS COMPARE RESULTED IN A SWAP
EDS2N    EQU   X'02'               2 NUMERIC OPERANDS PROCESSED
EDS1N    EQU   X'01'               1 NUMERIC OPERAND PROCESSED
ED_MODE  DS    XL1                 COPY OF INITIAL MODE SETTINGS
EDSRTRNG DS    0F                  SORT COLUMN OFFSET RESET AREA
EDSRTCOL DS    H                   FIRST SORT RECORD COLUMN, THEN
*                                     SORT BEGIN RECORD OFFSET
EDSRTEND DS    H                   LAST SORT RECORD COLUMN, THEN
*                                     SORT FIELD LENGTH
EDYNAREA DS    A                   ADDRESS OF REVBUF VARIABLE
EDYNSIZE DS    F                   LENGTH OF REVBUF VARIABLE
EDYNCOPY DS    A                   ADDRESS OF SAVE BUFFER
VSBLPOSI DS    F                   VISIBLE DYNAMIC AREA POSITION COUNT
VIEWIDTH DS    F                   VIEWABLE DATA WIDTH OF SCREEN
EDATWDTH DS    F                   ACTUAL DATA WIDTH OF SCREEN
EDCSROUT DS    F                   CURSOR POSITION FOR NEXT DISPLAY
CSRRECAD DS    F                   CURSOR DATA RECORD ADDRESS
CSRDIRAD DS    A                   CURSOR DIRECTORY ENTRY ADDRESS
EDCSRROW DS    F                   CURSOR INPUT RELATIVE ROW NUMBER
EDCSRCOL DS    F                   CURSOR INPUT DATA COLUMN NUMBER
EDCSRPOS DS    F                   CURSOR INPUT POSITION
EDCSROFF DS    F                   CURSOR INPUT RECORD OFFSET
INSRECAD DS    A                   RECORD TO AUTOMATICALLY INSERT AFTER
FNDREC   DS    A                   FIND SEARCH START RECORD ADDRESS
EDDEVTYP DS    CL4                 VOL=SER DEVICE TYPE FROM UCB
INSANKOR DS    A                   INSERT COMMAND CHAIN ANCHOR
CMDANKOR DS    A                   LINE COMMAND CHAIN ANCHOR
LABANKOR DS    A                   LINE LABEL ELEMENT CHAIN ANCHOR
LBBANKOR DS    A                   LINE LABEL BLOCK CHAIN ANCHOR
EDDIREND DS    A                   ADDRESS OF LAST DIRECTORY ENTRY
EDDIRLEN DS    F      \__ONE_LM__/ LENGTH OF DIRECTORY STORAGE
EDITDIR@ DS    A      /          \ ADDRESS OF SCREEN LINE DIRECTORY
* /======= EDITDIR / CMDE =======\ SCREEN LINE DIRECTORY ENTRY
EDIR1ST  EQU   0                   FIRST RECORD SEQUENCE NUMBER
EDIRINS  EQU   X'80'               INSERTING THIS LINE
EDIRLST  EQU   4                   LAST RECORD SEQUENCE NUMBER
EDIRREC  EQU   8                   ADDRESS OF FIRST RECORD ENTRY
EDIRCOL  EQU   X'FF'               COLUMNS INDICATOR LINE
EDIRFIN  EQU   12                  ADDRESS OF LAST RECORD ENTRY
EDIRSIZ  EQU   16                  SIZE OF SCREEN LINE DIRECTORY ENTRY
* \========== EDITDIR ===========/ END OF SCREEN LINE DIRECTORY ENTRY
*         LINE COMMAND ELEMENT
*         - DATA COPIED FROM EDITDIR ENTRY - USE EDITDIR EQUATES
*         - ADDITIONAL DATA ITEM OFFSETS FOLLOW:
CMDENEXT EQU   EDIRSIZ             AL4 - FORWARD POINTER
CMDEREPL EQU   EDIRSIZ+4           FL4 - REPLICATION COEFFICIENT
CMDECODE EQU   EDIRSIZ+8           CL1 - COMMAND TYPE
CMDEFLAG EQU   EDIRSIZ+9           XL1 - FLAGS
CMDE1LTR EQU   1                   SINGLE LETTER COMMAND
CMDE2LTR EQU   2                   DOUBLE LETTER COMMAND
CMDECOEF EQU   4                   COEFFICIENT PRESENT
*                                  - IF OFF THEN CMDEREPL WILL BE 1
CMDEBLOK EQU   8                   REPRESENTS WHOLE BLOCK
CMDETE   EQU   16                  THIS ELEMENT IS FOR A 'TE' COMMAND
CMDESIZE EQU   ((EDIRSIZ+10+7)/8)*8 SIZE OF LINE COMMAND CHAIN ENTRY
* \============ CMDE ============/ END OF LINE COMMAND ELEMENT
UNDODIRE EQU   *,12                UNDO STOW AREA
UNDOMEMN DS    CL8                 UNDO MEMBER NAME
UNDOTTRC DS    XL4                 UNDO MEMBER TTR AND USERDATA COUNT
UNDOCRNT DS    A                   CURRENT UNDO MEMBER ENTRY ADDRESS
UNDOLATE DS    A                   LA(TE)ST UNDO MEMBER ENTRY ADDRESS
*                                  UNDO GENERATION DETAILS HOLD AREA
UNDOMEMS DS    31D                 EACH ENTRY IS TTRC AND LINENMBR
UNDOSIZE EQU   *-UNDOMEMS          AGING MOVE DATA LENGTH
UNDOLAST DS    D                   LAST (AND NEWEST) UNDO MEMBER ENTRY
         DS    0D                  END OF DSECT
$EDDATAL EQU   *-@EDDATA
         SPACE
@EDLBLHD DSECT
ELH_NEXT DS    A                   POINTER TO NEXT LABEL BLOCK
ELH_HWM  DS    A                   POINTER TO UNUSED PART OF BLOCK
ELH_LIM  DS    A                   POINTER TO LAST ELEMENT
ELH_FREE DS    A                   POINTER TO NEXT FREE ELEMENT
         DS    0D                  END OF DSECT
$ELH_LEN EQU   *-@EDLBLHD          SIZE OF LABEL BLOCK HEADER
         SPACE
@EDLABEL DSECT
EDL_NEXT DS    A                   POINTER TO NEXT LABEL ELEMENT
EDL_ADDR DS    A                   POINTER TO LABELLED LINE ELEMENT
EDL_NAME DS    CL6                 LINE'S LABEL
         DS    X                   UNPACK OVERFLOW
         DS    0D                  END OF DSECT
$EDL_LEN EQU   *-@EDLABEL          SIZE OF LABEL ELEMENT
         SPACE
@ECAREA  DSECT
         DS    4F                  REGISTER SAVE AREA LINKAGE
ECLTOPN  DS    A                   "NEW" LATEST SYNC POINT
ECLTOPO  DS    A                   "OLD" LATEST SYNC POINT
ECVLMTN  DS    A                   "NEW" VALIDITY LIMIT POINT
ECVLMTO  DS    A                   "OLD" VALIDITY LIMIT POINT
ECCKPTN  DS    A                   "NEW" MATCH CHECKPOINT ENTRY
ECCKPTO  DS    A                   "OLD" MATCH CHECKPOINT ENTRY
ECCUMCC  DS    F                   CUMULATIVE RECORD COMPARE COUNT
ECCUMMC  DS    F                   CUMULATIVE RECORD MATCH COUNT
ECLBLCT  DS    F                   UNMATCHED "NEW" LABEL COUNTER
ECVFLAG  DS    X                   VALIDITY LIMIT REACHED FLAG
         SPACE
