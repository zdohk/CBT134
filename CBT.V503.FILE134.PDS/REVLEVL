         TITLE '  D S L I S T   R O U T I N E S  '
**********************************************************************
*
*        CONTROL SECTIONS IN THIS SOURCE FILE:
*
*         REVLEVL - DISPLAY DATA SET LIST BY HIGH-LEVEL QUALIFIER.
*         REVCOND - CONDENSE A PDS TO RECLAIM UNUSED SPACE.
*        REVRENAM - RENAME A NON-VSAM DASD DATA SET.
*        REVINDSN - EXTRACT INPUT DATA SET NAME.
*        REVCREAT - CREATE A NEW DATA SET.
*        REVMERGE - MERGE SORT A FIXED-LENGTH RECORD ARRAY.
*
**********************************************************************
         EJECT
**********************************************************************
*
*        LOG OF CHANGES:
*
*         04APR09 - INITIAL WRITE.
*  R43.0  19MAR10 - INITIAL RELEASE.
*  R43.1  02APR10 - ADD ABORT MESSAGE FOR PRE-EXISTING CONDENSE FILE.
*  R43.4  16MAY10 - FIX S0C4 AFTER CAPTURED UCB LEVELVOL IS FREED.
*  R43.7  04DEC10 - ADD 'M' SELECTION CODE.
*  R43.9  01FEB12 - ADD LEFT/RIGHT SCROLLING.
*         04FEB12 - CHANGE TOTALS FORMATTING, SWAP USTRK AND ORG COLS.
*  R44.0  31AUG13 - SET COLOUR TO NEUTRAL (WHITE) FOR SPACE PLOT.
*         01SEP13 - CHECK FOR DATA SET LABEL BEFORE SKIPPING OBTAIN.
*         01NOV13 - IDENTIFY/DELETE REVLVTSK WITH ATTACH/DETACH.
*                 - CLEAR VOLMAP PICTURE STATUS FOR 'M' TO FIX S0C4.
*  R45.0  17APR14 - DO NOT TRY TO FREE FILE '*DSLIST*' AFTER 'L'.
*         03MAY14 - REMOVE CONDENSE ROUTINE TO NEW REVCOND CSECT.
*         14JUN14 - REMOVE RENAME ROUTINE TO NEW REVRENAM CSECT.
*                 - STREAMLINE POST-SELECTION CLEAN UP, WHICH
*                   REMOVES (THE NEED FOR) THE 17APR14 CHANGE.
*  R45.1  27SEP14 - FIX S0C4 BEFORE FREE OF VTOC FOR VOLUME DSLIST.
*  R45.2  14DEC14 - ADD SECURITY CHECK FOR DATA SET CREATION.
*  R45.4  06JAN15 - USE LOCAL PROFILE STATUS FLAG INSTEAD OF STPROF
*                   LEAVING STPROF TO CONTROL $$REVIEW UPDATES.
*                 - FIX PROFILE SAVE AVOIDANCE WHEN UNCHANGED.
*  R46.6  19AUG16 - USE DYNALLOC, RDJFCB AND OPEN TYPE=J TO ACCESS
*                   DATA SETS AFTER IKJDAIR "INVALID DATA SET NAME".
*  R46.8  17SEP16 - USE STATUS=ACCESS ON RACROUTE.
*  R47.0  14FEB17 - NAME THE LOGICAL SESSION AT RELEVANT TIMES.
*  R47.5  21SEP17 - FIX MULTIVOLUME ALLOCATED TRACKS EX SHELBY BEACH.
*         12OCT17 - SPECIFY LOC ON ALL SVC 120 GETMAINS.
*  R47.9  30NOV17 - REPORT FORMAT-5 DSCB FREE SPACE STATISTICS.
*         06DEC17 - FLAG VTOC ENTRY RACF INDICATOR SET.
*                 - SUPPORT 8-BYTE TSO USERID AND/OR PREFIX.
*         09DEC17 - PREVENT ANY LINE MODE TIME FOR 'L' SELECTIONS.
*  R48.2  25MAR18 - CHANGE CSECT STATEMENTS TO RSECT STATEMENTS.
*  R48.3  23MAY18 - FIX CREATING DATA SETS WITH CARRIAGE CONTROL.
*  R48.4  27AUG18 - FIX CROSS-CENTURY DATE SORT ORDER.
*         19SEP18 - ADD MEMBER NAME LIBRARY SCAN.
*  R48.5  20OCT18 - DROP ** AND *% MEMBER NAME MASK RESTRICTIONS.
*         17NOV18 - ADD DATA SET SEARCH SRCHFOR COMMAND.
*  R48.6  27FEB19 - FIX REVCREAT PANEL FORMAT GLITCH.
*  R49.0  30MAR19 - ADD AMODE SWITCHING FOR MVS/XA-LIKE SYSTEMS.
*  R49.7  11JUL20 - STABLIZE REPEATED SORT ORDER WITH LVSRTVEC FIDDLE.
*  R49.9  03OCT20 - FIX OCCASIONAL S0C4 AT END OF DATA SET SEARCH.
*  R50.1  13JUN21 - FIX 'MEMBER'/'MEM'/'M' FUNCTIONALITY.
*
**********************************************************************
         TITLE '  R E V L E V L  '
**********************************************************************
*                                                          *         *
*         DISPLAY DATA SET LIST BY HIGH-LEVEL QUALIFIER    *  R43.0  *
*                                                          * 2009APR *
**********************************************************************
         SPACE
**********************************************************************
*                                                                    *
*        THIS ROUTINE DISPLAYS AN ENTRY PANEL WHERE THE USER MAY     *
*        PROVIDE A DATA SET NAME PREFIX (THAT IS, A WHOLE NUMBER     *
*        OF DATA SET NAME QUALIFIERS JOINED BY PERIODS) WHICH        *
*        SPECIFIES THE LEVEL FOR A CATALOG SEARCH.  THE DATA SET     *
*        NAMES FOUND BY THIS SEARCH WILL BE DISPLAYED IN A LIST.     *
*                                                                    *
*        IF A SINGLE QUALIFIER IS SUPPLIED THEN A PERIOD MUST BE     *
*        APPENDED TO ENSURE THAT INFORMATION ABOUT SUCH AN ALIAS     *
*        IS NOT THE ONLY INFORMATION COLLECTED.                      *
*                                                                    *
*        IF THE RELEVANT CATALOG IS NOT AN OS CATALOG (CVOL) THEN    *
*        SEARCHES FOR PREFIXES WHICH DO NOT END ON A QUALIFIER       *
*        BOUNDARY WILL SUCCEED IN RETRIEVING MATCHING CATALOG        *
*        ENTRIES.                                                    *
*                                                                    *
*        IF THE USER PROVIDES A VOLUME SERIAL NUMBER IN THE          *
*        RELEVANT INPUT FIELD THEN A VTOC SEARCH OF THAT VOLUME      *
*        IS DONE INSTEAD OF THE CATALOG SEARCH.                      *
*                                                                    *
*        DATA SETS IN THE LIST CAN BE SELECTED FOR PROCESSING        *
*        BY ENTERING A SELECTION CODE CHARACTER ON THE LINE          *
*        CONTAINING THE NAME OF THE DATA SET TO BE PROCESSED.        *
*                                                                    *
**********************************************************************
         SPACE
**********************************************************************
*                                                                    *
* REGISTERS ON ENTRY: R9 -> @DATA                                    *
*                     R13-> SAVE AREA                                *
*                     R14-> RETURN ADDRESS                           *
*                     R15-> REVLEVL                                  *
*                                                                    *
* DURING PROCESSING:  R13-> @LVLWORK (LOCAL GETMAINED AREA)          *
*                     R11-> REVLEVL                                  *
*                     R10-> REVLEVL+4096                             *
*                     R8 -> REVLEVL+8192                             *
*                                                                    *
* RETURN CODES:       R15 = 0  PROCESSING COMPLETE                   *
*                                                                    *
**********************************************************************
         EJECT
REVLEVL  RSECT
REVLEVL  AMODE ANY
         ENTRY LEVLWRCS
         B     @LEVEL-*(,R15)
         DC    AL1(7),CL7'REVLEVL'
@LEVEL   STM   R14,R12,12(R13)
         LR    R11,R15             SET BASE
         LA    R8,1
         LA    R10,4095(R8,R11)
         LA    R8,4095(R8,R10)
         USING REVLEVL,R11,R10,R8
         LA    R0,@LVLWKLN
         MVI   GETMNTRC,40         TRACK GETMAIN IN CASE OF FAILURE
         GETMAIN RC,LV=(0),LOC=(24,64)
         LTR   R15,R15             GOT LOCAL WORKING STORAGE?
         BZ    @LEVELOK            YES
         MVI   MSG,123             REQUEST ABORTED - REGION FULL
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         LA    R15,16              SET NON-ZERO RETURN CODE
         BR    R14                 RETURN TO CALLER
@LEVELOK LA    R15,@LVLWKLN
         LR    R14,R1
         SR    R3,R3
         MVCL  R14,R2              CLEAR WORKING STORAGE
         ST    R1,8(,R13)          CHAIN SAVE AREAS
         ST    R13,4(,R1)
         LR    R13,R1              POINT TO GETMAINED AREA
         USING @LVLWORK,R13
         MVI   STATUS11,$11LV      ASSUME CONTROL
         MVI   LVSTRNG,X'FF'       INVALIDATE SEARCH STRING
         L     R15,=A(REVNAME)
         BASR  R14,R15             ATTEMPT TO NAME THE SESSION
         SPACE
************************************************************
*                                                          *
*         DISPLAY PROMPT FOR INDEX SPECIFICATION           *
*                                                          *
************************************************************
         SPACE
         LA    R0,LVPROFSZ         SET PROFILE MEMBER SIZE
         SR    R1,R1               REQUEST NEW STORAGE
         MVC   DOUBLE,LVPROFNM     SET PROFILE MEMBER NAME
         L     R15,=V(REVPROF)     POINT TO PROFILE I/O ROUTINE
         BASR  R14,R15
         LM    R0,R1,DOUBLE        GET PROFILE STORAGE SIZE AND ADDRESS
         LTR   R1,R1               ANY STORAGE ACQUIRED?
         BZ    DORELEVL            NO, NO USABLE PROFILE MEMBER
         MVC   LVOLDSAV,85(R1)     LOAD PREFIX
         MVC   LVOLDVOL,165(R1)    LOAD VOLUME
         FREEMAIN RU,LV=(0),A=(1)  FREE PROFILE STORAGE
         MVC   LEVELSAV(44+6),LVOLDSAV
DORELEVL B     RELEVEL             GET DSNAME PRFIX AND/OR VOLUME
LVPROFSZ EQU   240                 PROFILE MEMBER SIZE
         SPACE
************************************************************
*                                                          *
*         FORMAT LEVEL DATA SET ENTRIES FOR DISPLAY        *
*                                                          *
************************************************************
         SPACE
LVDYNCSR CLC   DYN_CSR,SCRNCOLS+2  CURSOR ON HEADING LINE (LINE 3)?
         BH    LEVLSAME            NO, NOT A SORT REQUEST
         CLI   DYN_CSR+1,4         CURSOR BEFORE FIRST COLUMN?
         BL    LEVLSAME            YES, NOT A SORT REQUEST
         LH    R14,DYN_CSR         NO, GET COLUMN NUMBER
         LA    R2,47
         SH    R2,LEVCREEP         GET LAST DSNAME COLUMN
         SR    R14,R2              GET NORMALIZED COLUMN NUMBER
         BNP   LEVSORTD            SORT BY DSNAME
         LA    R1,LEVSRTAB         POINT TO SORT TABLE
         AH    R14,LEVCRAWL        ADJUST IF SCROLLED RIGHT
LEVSRTLP CLM   R14,1,2(R1)         CURSOR BEFORE THIS COLUMN?
         BL    LEVLSAME            YES, NOT A SORT REQUEST
         CLM   R14,1,3(R1)         CURSOR AFTER THIS COLUMN?
         BNH   LEVSORTX            NO, GO SORT BY THIS COLUMN
         LA    R1,4(,R1)           YES, POINT TO NEXT COLUMN ENTRY
         B     LEVSRTLP            CONTINUE SORT BY COLUMN CHECKING
         SPACE
LEVLATTN NI    STATUS17,255-$17SCN DEACTIVATE DATA SET SCAN
         ICM   R0,3,MSG            ANY MESSAGE PENDING?
         BNZ   LEVLSAME            YES, DO NOT OVERLAY IT
         MVI   MSG,122             PROCESSING INTERRUPTED
         SPACE
LEVLSAME NI    STATUS4,255-$4REFR  RESET REFRESH FLAG
         NI    STATUS10,255-$10CAP SET CAPS OFF
         MVC   $DDNAME,LVDSLIST    LOAD PHONY DDNAME FOR SWAP LIST
         MVC   $DSNAME+2(44),LEVELSAV
         MVC   $VOLSER,LEVELVOL
         XC    $UCBAD,$UCBAD
         LA    R1,$DSNAME+45
LVPREFLP CLI   2(R1),C' '
         BNE   *+8
         BCT   R1,LVPREFLP
         LA    R0,$DSNAME-1
         SR    R1,R0
         STH   R1,$DSNAME          SAVE DSNAME PREFIX LENGTH
         MVI   HDCOLOR,X'04'       CLEAR SCREEN TO GREEN BLANKS
         L     R15,=A(REVHEAD)     POINT TO HEADING ROUTINE
         BASR  R14,R15             INITIALISE FIRST TWO SCREEN LINES
*        OI    STATUS10,$10CAP     SET CAPS ON
         L     R14,SCREENBF        POINT TO THE PRIMARY BUFFER
         A     R14,SCRNCOLS        POINT TO THE SECOND PRIMARY LINE
         LA    R0,12
         SLR   R14,R0              BACK UP TWELVE BYTES
         LA    R2,1                COUNT **END**
         A     R2,LEVLROWS         GET LIST ENTRY COUNT IN BINARY
         CVD   R2,DOUBLE           GET LIST ENTRY COUNT IN DECIMAL
         LA    R1,11(,R14)         POINT TO LAST DIGIT
         MVC   4(8,R14),ED7DASHL   LOAD EDIT MASK
         EDMK  4(8,R14),DOUBLE+4   SHOW UP TO 9999999 ENTRIES CORRECTLY
         LR    R14,R1
         SLR   R14,R0              BACK UP TWELVE BYTES BEFORE NUMBER
         L     R3,LVATOPAD         POINT TO FIRST ENTRY TO SHOW
         C     R3,LVAENDAD         EXTANT ENTRY?
         BNL   *+8                 NO, MUST BE END MARKER
         USING LVAENT,R3
         L     R2,LVASEQ           GET CURRENT ROW NUMBER IN BINARY
         DROP  R3                  LVAENT
         CVD   R2,DOUBLE           GET CURRENT ROW NUMBER IN DECIMAL
         LA    R1,7(,R14)          POINT TO LAST DIGIT
         MVC   8(4,R14),=X'40968640'     C' OF '
         MVC   0(8,R14),ED7DASHL   LOAD EDIT MASK
         EDMK  0(8,R14),DOUBLE+4   SHOW UP TO ROW 9999999 CORRECTLY
         SLR   R1,R0               BACK UP TWELVE BYTES BEFORE NUMBER
         MVC   7(5,R1),=X'40D996A640'    C' ROW '
         L     R1,SCRNCOLS         GET SCREEN WIDTH
         SRA   R1,1                HALVE IT
         LA    R0,L'LEVTITLE/2
         SR    R1,R0
         A     R1,SCREENBF
         MVC   0(L'LEVTITLE,R1),LEVTITLE
*  LINE 3
         L     R2,SCRNCOLS         GET SCREEN WIDTH
         AR    R2,R2               DOUBLE IT
         A     R2,SCREENBF         POINT TO THIRD SCREEN LINE
         LR    R4,R2               POINT TO PRIMARY BUFFER LINE
         A     R4,SCREENSZ         POINT TO SHADOW BUFFER LINE
         L     R5,SCRNCOLS         GET SCREEN WIDTH
         LR    R3,R5               GET SCREEN WIDTH
         LA    R15,X'06'           YELLOW FOR COLUMN HEADINGS
         SLL   R15,24              SET PAD AND ZERO SOURCE LENGTH
         DROP  R13                 @LVLWORK
         USING SAVER,R13
         STM   R14,R5,SAVGRS14     SAVE MVCL REGISTERS SOMEWHERE
         MVCL  R4,R14              MAKE THIRD SCREEN LINE YELLOW
         MVI   SAVGRS15,X'36'      CHANGE PAD TO YELLOW UNDERSCORE
         LM    R14,R5,SAVGRS14     RELOAD MVCL REGISTERS
         LA    R0,3
         AR    R4,R0               DO NOT CHANGE FIRST 3 COLUMNS
         SR    R5,R0
         LA    R0,LEVHDGL-2        GET LENGTH LIMIT
         CR    R5,R0               TARGET LENGTH OVER LIMIT?
         BNH   *+6                 NO
         LR    R5,R0               YES, REDUCE TO LIMIT
         MVCL  R4,R14              UNDERSCORE SORTABLE COLUMN TITLES
         L     R4,SAVGRS4          POINT TO LINE 3 SHADOW AGAIN
         DROP  R13                 SAVER
         USING @LVLWORK,R13
         LA    R4,47(,R4)
         SH    R4,LEVCREEP         POINT PAST DSNAME COLUMN
         SH    R4,LEVCRAWL         ADJUST IF SCROLLED RIGHT
         LH    R15,LITMTRNC
         SLA   R15,2               FORM INDEX
         CLI   LEVCRAWL+1,0        DOES INDEX APPLY?
         BE    LVUSCORE            NO, CURRENTLY SCROLLED LEFT
         B     LVUSCORE(R15)
LVUSCORE MVI   0(R4),X'06'         RESET UNDERSCORE BETWEEN COLUMNS
         MVI   7(R4),X'06'         (AFTER VOLUME)
         MVI   13(R4),X'06'        (AFTER ALTRK)
         MVI   19(R4),X'06'        (AFTER USTRK)
         MVI   23(R4),X'06'        (AFTER ORG)
         MVI   30(R4),X'06'        (AFTER %)
         MVI   33(R4),X'06'        (AFTER XT)
         MVC   28(1,R4),30(R4)     (AFTER FRMT)
         NI    39(R4),X'0F'        BY SIMPLY RESETTING HIGHLIGHTING
         NI    45(R4),X'0F'          NO CHECK IS NEEDED TO SEE IF
         NI    51(R4),X'0F'          THE SCREEN IS WIDE ENOUGH TO
         NI    57(R4),X'0F'          SHOW THESE COLUMNS
         NI    63(R4),X'0F'
         AR    R3,R2               POINT TO FOURTH SCREEN LINE
         MVI   0(R2),FLDOUTHI      HIGH INTENSITY FOR COLUMN HEADINGS
         MVC   1(46,R2),LEVHDG     LOAD DSNAME COLUMN HEADING
         LA    R2,47(,R2)          POINT PAST DSNAME COLUMN HEADING
         SH    R2,LEVCREEP         ACCOUNT FOR COLUMN CREEP
         SR    R3,R2               GET COLUMNS LEFT TO LOAD
         LA    R15,C' '            COLUMN HEADING PAD IS BLANK
         SLL   R15,24              PROMOTE PAD AND ZERO LENGTH
         LA    R14,LEVHDGL-46      GET MAXIMUM HEADING LENGTH
         OR    R15,R14             SET SOURCE LENGTH
         LA    R14,LEVHDG+46       POINT TO COLUMN HEADINGS
         AH    R14,LEVCRAWL        ADJUST IF SCROLLED RIGHT
         SH    R15,LEVCRAWL        YES
         MVCL  R2,R14              LOAD COLUMN HEADINGS
*      PRIMARY AND SHADOW POINTERS NOW POINTING TO FOURTH SCREEN LINE
         L     R3,LVATOPAD         POINT TO FIRST ENTRY TO SHOW
         C     R3,LVAENDAD         DISPLAY END MARKER ONLY?
         BNL   LVENDSHO            YES
*  LINE 4 ONWARDS
         USING LVAENT,R3
         LR    R4,R2               POINT TO LINE 4
         A     R4,SCREENSZ         POINT TO LINE 4 SHADOW
LVFMTLIN MVI   0(R2),FLDINHI       HIGH INTENSITY FOR SELECTION FIELD
         MVC   1(1,R2),LVAACT      SHOW PENDING ACTION CODE
         TM    LVAFLG,$DEL         DELETED DATA SET?
         BNO   LVFMTCLR            NO, DO NOT COLOUR DETAILS RED
         LR    R0,R4               YES, POINT TO THE SHADOW LINE
         L     R1,SCRNCOLS         GET THE SCREEN WIDTH
         LA    R15,X'02'           GET THE CODE FOR RED
         SLL   R15,24              SHIFT TO PAD AND ZERO LENGTH
         MVCL  R0,R14              COLOUR LINE RED FOR DELETED DATA SET
LVFMTCLR MVI   1(R4),X'01'         BLUE FOR SELECTION FIELD
         MVI   2(R2),FLDOUTLO      LOW INTENSITY FOR DATA SET DETAILS
         LA    R15,X'05'           TURQUOISE FOR DATA SET NAME
         TM    LVAFLG,$SCAN        DATA SET MATCHED IN A SCAN?
         BNO   LVFMTDSN            NO, TURQUOISE IT IS
         MVI   2(R2),FLDOUTHI      HIGH INTENSITY FOR DATA SET DETAILS
         LA    R15,X'07'           YES, WHITE FOR DATA SET NAME
LVFMTDSN SLL   R15,24              SET PAD AND ZERO LENGTH
         LA    R0,3(,R4)           POINT TO DSNAME SHADOW
         LA    R1,44
         SH    R1,LEVCREEP         GET DSNAME COLUMN WIDTH
         MVCL  R0,R14              COLOUR THE DSNAME COLUMN
         MVC   3(44,R2),LVADSN     SHOW DATA SET NAME
         C     R3,LVLSTACT         MOST RECENTLY PROCESSED ENTRY?
         BNE   LVFMTTST            NO
         LA    R1,2(,R2)           YES, POINT TO CURSOR POSITION
         L     R6,SCRNCOLS         GET SCREEN WIDTH
         S     R1,SCREENBF         GET CURSOR SCREEN POSITION
         AR    R6,R6               GET DYNAMIC AREA START OFFSET
         SR    R1,R6               GET CURSOR AREA POSITION
         ST    R1,REVPOS           SPECIFY CURSOR POSITION
         MVC   REVCSR,LVREVBUF     SPECIFY CURSOR FIELD
LVFMTTST TM    LVAFLG,$LFLOC       COMPLETED ENTRY?
         BO    *+8                 YES, PROCEED
         BAS   R14,LVDETACH        NO, WAIT FOR SUBTASK TO FINISH
         LR    R6,R2               POINT TO DISPLAY LINE
         SH    R6,LEVCREEP         ADJUST FOR COLUMN CREEP
         CLI   LVALST,0            ANY COMPLETED ACTION TO ECHO?
         BE    LVFALCHK            NO
         MVC   47(1,R6),LVALST     YES, ECHO IT
         A     R6,SCREENSZ         POINT TO SHADOW BUFFER
         MVI   47(R6),X'01'        ECHO IT IN BLUE
         TM    LVAFLG,$FAIL        DID IT FAIL?
         BNO   *+8                 NO
         MVI   47(R6),X'02'        YES, ECHO IT IN RED
         S     R6,SCREENSZ         POINT TO BACK TO PRIMARY BUFFER
LVFALCHK CLI   LVATYP,CTGTANM      ALIAS?
         BNE   LEVNOTAL            NO
         LA    R0,48(,R6)          POINT TO REAL NAME TARGET LOCATION
         LR    R1,R2               POINT TO SCREEN LINE
         A     R1,SCRNCOLS         POINT PAST THIS LINE
         SR    R1,R0               GET LENGTH OF AREA AVAILABLE
         LA    R14,C' '            GET PAD
         SLL   R14,24              PROMOTE PAD AND ZERO LENGTH
         LA    R15,44              GET REAL NAME LENGTH
         OR    R15,R14             SET PAD
         LA    R14,LVAREAL         POINT TO REAL NAME
         MVCL  R0,R14              SHOW REAL NAME
         B     LVNXTLIN
LEVNOTAL CLI   LVALOC,0            SUCCESSFUL LOCATE?
         BE    LVFMTVOL            YES
         MVC   55(8,R6),=CL8'GDG BASE'
         CLI   LVATYP,CTGTGBS      GDG BASE?
         BE    LVNXTLIN            YES
         MVC   55(10,R6),=CL10'LOCATE RC='
         UNPK  65(3,R6),LVALOC(2)
         TR    65(2,R6),LEVHEX-C'0'
         MVI   67(R6),C' '
         B     LVNXTLIN
LVFMTVOL SH    R6,LEVCRAWL
         CLI   LEVCRAWL+1,0        SCROLLED LEFT?
         BNE   LVDONVOL            NO, SO SKIP VOLUME
         MVC   48(6,R6),LVAVOL     YES, COPY VOLUME SERIAL
LVDONVOL TM    LVAFLG,$LFOBT       OBTAIN DONE?
         BNO   LVNXTLIN            NO, FORMAT COMPLETE
         CLI   LEVCRAWL+1,23       SKIP HIDDEN LEFT COLUMNS
         BH    LVFMTEXT
         CLI   LEVCRAWL+1,19
         BH    LVFMTRFM
         CLI   LEVCRAWL+1,13
         BH    LVFMTORG
         CLI   LEVCRAWL+1,7
         BH    LVFMTUSD
         L     R0,LVAALOC
         CVD   R0,DOUBLE
         MVC   54(6,R6),LEVEDZ
         ED    54(6,R6),DOUBLE+5   SHOW TRACKS ALLOCATED
         TM    LVAFLG,$UNCAT       UNCATALOGED DATA SET?
         BNO   *+8                 NO
         MVI   54(R6),C'¬'         YES, FLAG THIS
         CLI   LVAVOL#+1,1         MORE THAN ONE VOLUME
         BNH   *+8                 NO
         MVI   54(R6),C'+'         YES, FLAG THIS
LVFMTUSD L     R0,LVAUSED
         CVD   R0,DOUBLE
         MVC   60(6,R6),LEVEDZ
         ED    60(6,R6),DOUBLE+5   SHOW TRACKS USED
LVFMTORG MVC   67(3,R6),LVAORG     SHOW DATA SET ORGANIZATION
LVFMTRFM MVC   71(5,R6),LVARFM     SHOW RECORD FORMAT
LVFMTEXT SR    R0,R0
         IC    R0,LVAEXT
         CVD   R0,DOUBLE
         MVC   76(4,R6),LEVEDZ     SHOW EXTENT COUNT
         ED    76(4,R6),DOUBLE+6
         CLI   LVAPCT,0            ANY PERCENT TO SHOW?
         BE    LVPCDONE            NO
         CLI   77(R6),C' '         LESS THAN 100 EXTENTS?
         BNE   LVPCDONE            NO, NO ROOM FOR PERCENT
         CLI   74(R6),C' '         ROOM FOR PERCENT?
         BNE   LVPCDONE            NO
         CLI   LVAPCT,101          NEED 3 DIGITS?
         BL    LVPCOKAY            NO
         CLI   73(R6),C' '         ROOM FOR PERCENT?
         BNE   LVPCDONE            NO
LVPCOKAY IC    R0,LVAPCT
         BCTR  R0,0                REMOVE SORT FUDGE FIDDLE
         CVD   R0,DOUBLE
         MVC   DOUBLE(4),LEVEDZ    SHOW PERCENT FULL
         MVI   DOUBLE+2,X'21'      SHOW AT LEAST ONE DIGIT
         ED    DOUBLE(4),DOUBLE+6
         MVC   74(3,R6),DOUBLE+1
LVPCDONE LA    R1,86
         SH    R1,LEVCREEP
         SH    R1,LEVCRAWL
         C     R1,SCRNCOLS         DISPLAY WIDE ENOUGH TO SHOW ITEM?
         BH    LVNXTLIN            NO, DISPLAY LINE COMPLETE
         LA    R0,32
         SLL   R0,10
         CLM   R0,3,LVALRL         LRECL=32768?
         BNE   LVRECNTX            NO
         CLC   =C'VS',LVARFM       RECFM=VS?
         BE    LVRECISX            YES
         CLC   =C'VBS',LVARFM      RECFM=VBS?
         BNE   LVRECNTX            NO
LVRECISX MVI   85(R6),C'X'         LRECL=X
         B     LVRECDON
LVRECNTX ICM   R0,3,LVALRL
         CVD   R0,DOUBLE
         MVC   80(6,R6),LEVEDZ
         ED    80(6,R6),DOUBLE+5   SHOW LOGICAL RECORD LENGTH
LVRECDON LA    R1,6(,R1)
         C     R1,SCRNCOLS         DISPLAY WIDE ENOUGH TO SHOW ITEM?
         BH    LVNXTLIN            NO, DISPLAY LINE COMPLETE
         ICM   R0,3,LVABLK
         CVD   R0,DOUBLE
         MVC   86(6,R6),LEVEDZ
         ED    86(6,R6),DOUBLE+5   SHOW BLOCK SIZE
         LA    R1,6(,R1)
         C     R1,SCRNCOLS         DISPLAY WIDE ENOUGH TO SHOW ITEM?
         BH    LVNXTLIN            NO, DISPLAY LINE COMPLETE
         MVC   93(5,R6),LVAREF     SHOW REFERENCE DATE
         OI    93(R6),C' '         MAKE 20TH CENTURY NUMERIC
         LA    R1,6(,R1)
         C     R1,SCRNCOLS         DISPLAY WIDE ENOUGH TO SHOW ITEM?
         BH    LVNXTLIN            NO, DISPLAY LINE COMPLETE
         MVC   99(5,R6),LVACRE     SHOW CREATION DATE
         OI    99(R6),C' '         MAKE 20TH CENTURY NUMERIC
         LA    R1,1(,R1)
         C     R1,SCRNCOLS         DISPLAY WIDE ENOUGH TO SHOW ITEM?
         BH    LVNXTLIN            NO, DISPLAY LINE COMPLETE
         LA    R1,5(,R1)
         C     R1,SCRNCOLS         DISPLAY WIDE ENOUGH TO SHOW ITEM?
         BH    *+10                NO, JUST SHOW RACF INDICATION
         MVC   105(5,R6),LVAEXP    SHOW EXPIRATION DATE
         OI    105(R6),C' '        MAKE 20TH CENTURY NUMERIC
         TM    LVAFLG,$RACFDS      RACF INDICATOR BIT SET?
         BNO   LVNXTLIN            NO
         MVI   104(R6),C'R'        YES, FLAG THIS
         A     R6,SCREENSZ         POINT TO THE SHADOW
         MVI   104(R6),X'05'       CHANGE THE COLOUR
LVNXTLIN TR    3(77,R2),PERIODS    HANDLE BAD CHARACTERS
         A     R2,SCRNCOLS         POINT TO NEXT PRIMARY LINE
         A     R4,SCRNCOLS         POINT TO NEXT SHADOW LINE
         LA    R3,LVAEND           POINT TO NEXT ARRAY ENTRY
         C     R2,SHADOWBF         REACHED END OF SCREEN?
         BNL   LVFMTDON            YES, SCREEN NOW READY TO SHOW
         C     R3,LVAENDAD         REACH END OF ARRAY?
         BL    LVFMTLIN            NO, GO FORMAT NEXT ENTRY
*  END-OF-LIST LINE
LVENDSHO BAS   R14,LVDETACH        CLEAN UP SUBTASK - MUST HAVE ENDED
         LR    R0,R2               COPY BUFFER POINTER
         S     R0,SCREENBF         GET PRIMARY AREA OFFSET
         L     R1,SCREENSZ         GET SCREEN SIZE
         SR    R1,R0               GET SIZE AFTER THIS OFFSET
         A     R0,SHADOWBF         GET SHADOW AREA ADDRESS TO UPDATE
         LR    R6,R0               COPY IT
         LA    R15,X'01'           SET BLUE AS PAD
         SLL   R15,24              PROMOTE PAD AND ZERO LENGTH
         MVCL  R0,R14              PROPAGATE CODE TO END OF AREA
         MVI   0(R6),X'06'         MAKE FIRST 10 COLUMNS YELLOW
         MVC   1(9,R6),0(R6)
         MVI   0(R2),FLDOUTHI      HIGH INTENSITY FOR **END**
         MVC   3(7,R2),=CL7'**END**'
         MVI   10(R2),FLDOUTLO     LOW INTENSITY FOR TOTALS
         ICM   R0,15,LVTOTALC      GET TOTAL TRACKS ALLOCATED
         BZ    LVFRESPC            NO SPACE TO REPORT
         MVC   14(7,R2),=CL7'TOTALS:'
         CVD   R0,DOUBLE
         MVC   21(8,R2),LEVEDZ
         ED    21(8,R2),DOUBLE+4
         MVC   30(10,R2),=CL10'TRKS ALLOC'
         L     R0,LVTOTUSE
         CVD   R0,DOUBLE
         MVC   42(8,R2),LEVEDZ
         MVI   48(R2),X'21'        SHOW '0' IF ZERO TRACKS USED
         ED    42(8,R2),DOUBLE+4
         MVC   51(9,R2),=CL9'TRKS USED'
         L     R0,LVTOTEXT
         CVD   R0,DOUBLE
         MVC   62(6,R2),LEVEDZ
         ED    62(6,R2),DOUBLE+5
         MVC   69(7,R2),=CL7'EXTENTS'
         DROP  R3                  LVAENT
*  VOLUME FREE SPACE TOTALS
LVFRESPC ICM   R0,15,LVFREEXT      GET FREE EXTENT COUNT
         BZ    LVPLOTIT            NO FREE SPACE TO REPORT
         A     R2,SCRNCOLS         POINT TO THE NEXT LINE
         C     R2,SHADOWBF         PAST END OF SCREEN NOW?
         BNL   LVFMTDON            YES, CANNOT SHOW FREE SPACE STATS
         CVD   R0,DOUBLE
         MVC   62(6,R2),LEVEDZ
         ED    62(6,R2),DOUBLE+5
         MVC   69(7,R2),=CL7'EXTENTS'
         L     R0,LVFRECYL         GET FREE CYLINDER COUNT
         CVD   R0,DOUBLE
         MVC   42(8,R2),LEVEDZ
         MVI   48(R2),X'21'        SHOW '0' IF ZERO FREE CYLINDERS
         ED    42(8,R2),DOUBLE+4
         MVC   51(9,R2),=CL9'CYLINDERS'
         L     R0,LVFRETRK         GET FREE TRACK COUNT
         CVD   R0,DOUBLE
         MVC   21(8,R2),LEVEDZ
         ED    21(8,R2),DOUBLE+4
         MVC   30(14,R2),=CL14'TRKS INCLUDING'
         MVC   16(5,R2),=CL5'FREE:'
         CLI   SCRNCOLS+3,92       AT LEAST 92 COLUMNS?
         BL    LVPLOTIT            NO
         L     R0,LVFREVTC
         CVD   R0,DOUBLE
         MVC   79(6,R2),LEVEDZ
         MVI   83(R2),X'21'        SHOW '0' IF ZERO FREE DSCBS
         ED    79(6,R2),DOUBLE+5
         MVC   86(5,R2),=CL5'DSCBS'
*  VOLUME SPACE MAP PLOT
LVPLOTIT L     R0,SCRNCOLS         GET THE SCREEN WIDTH
         AR    R0,R0               DOUBLE IT
         AR    R2,R0               LEAVE A BLANK LINE
         AR    R2,R0               POINT TWO LINES AFTER THAT
         C     R2,SHADOWBF         PAST END OF SCREEN NOW?
         BNL   LVFMTDON            YES, CANNOT SHOW SPACE MAP
         SR    R2,R0               POINT BACK TO WHERE PLOT STARTS
         ICM   R0,15,LEVPLOT@      ANY PLOT AVAILABLE TO SHOW?
         BZ    LVFMTDON            NO
         MVC   HSEACTIV,LEVPLOT@   YES, RESTORE SPACE MAP PLOT DETAILS
         MVC   PICDTLS(PICDTLEN),LEVPLOT#
         MVI   PICFLAGS,0          RESET PICTURE STATUS
         CLI   SYMSTG3,0           TRIPLE-PLANE AVAILABLE?
         BE    *+8                 NO, MAKE DO WITH MONOCHROME
         OI    PICFLAGS,PICNBW     YES, ENSURE NO SHORTCUTS ON OUTPUT
         MVI   PICCOLOR,X'F7'      DISPLAY PICTURE IN NEUTRAL
         LR    R1,R2               POINT TO PRIMARY LINE
         S     R1,SCREENBF         GET OFFSET INTO SCREEN
         SR    R0,R0               CLEAR FOR DIVIDE
         D     R0,SCRNCOLS         GET RELATIVE SCREEN LINE NUMBER
         STH   R1,Y_OFFSET         SET PICTURE TOP LINE NUMBER
         STCM  R1,12,X_OFFSET      START FROM LEFT EDGE OF SCREEN
         L     R0,SCRNCOLS         GET SCREEN WIDTH
         SH    R0,X_BYTES          GET NON-PLOT COLUMN COUNT
         BNP   LVPLTOFF            PLOT USES ALL COLUMNS - HAVE OFFSET
         SRA   R0,1                GET HALF OF UNUSED COLUMN COUNT
         STH   R0,X_OFFSET         CENTRE THE SPACE MAP PLOT
LVPLTOFF L     R15,=A(REVIMAGE)    POINT TO SYMBOL ROUTINE
         BASR  R14,R15             GO LOAD SYMBOL DATA
         SPACE
************************************************************
*                                                          *
*         PERFORM TERMINAL OUTPUT/INPUT CYCLE              *
*                                                          *
************************************************************
         SPACE
LVFMTDON XC    LVLSTACT,LVLSTACT   CLEAR LAST PROCESSED ENTRY POINTER
         L     R2,SCREENBF         POINT TO PRIMARY SCREEN BUFFER
         ICM   R0,15,LVNUMACT      ANY ACTIONS PENDING?
         BNZ   LVACTNPT            YES, GO SHOW THE COUNT
         CLI   LEVSNSID,X'FF'      SENSE ID DATA PRESENT?
         BNE   LVACTNOK            NO
         MVC   1(6,R2),LEVELVOL    YES, SHOW DETAILS
         MVI   7(R2),C'='
         UNPK  9(7,R2),LEVSNSID+4(4)
         TR    9(6,R2),LEVHEX-C'0'
         MVC   8(4,R2),9(R2)
         MVI   12(R2),C'-'
         MVC   15(4,R2),=C' CU='
         UNPK  20(7,R2),LEVSNSID+1(4)
         TR    20(6,R2),LEVHEX-C'0'
         MVI   26(R2),C' '
         MVC   19(4,R2),20(R2)
         MVI   23(R2),C'-'
         B     LVACTNOK            NO
LVACTNPT CVD   R0,DOUBLE           YES
         OI    DOUBLE+7,X'0F'      SET SIGN FOR UNPACK
         UNPK  1(7,R2),DOUBLE      SHOW COUNT
         LA    R1,8(,R2)           POINT PAST NUMBER
LVACT#LP CLI   1(R2),C'0'          LEADING ZERO?
         BNE   LVACT#OK            NO
         MVC   1(7,R2),2(R2)       YES, SUPPRESS IT
         BCT   R1,LVACT#LP
LVACT#OK MVC   0(8,R1),=CL8' ACTIONS'
         XC    1(7,R1),LEVBLNKS
         LA    R1,8(,R1)
         LA    R14,1
         CR    R0,R14              SINGULAR?
         BNE   *+6                 NO
         BCTR  R1,0                YES
         MVC   0(9,R1),=CL9' PENDING '
         XC    1(7,R1),LEVBLNKS
LVACTNOK MVC   MSGDSN,1(R2)        SAVE TEXT FOR REVCOMM
         MVC   COMPON,=CL8'REVLEV' FLAG COMPONENT FOR HELP
         L     R15,=A(REVCOMM)     POINT TO TERMINAL I/O ROUTINE
         BASR  R14,R15             SHOW LEVEL ENTRY PANEL
         TM    STATUS17,$17SCN     DATA SET SCAN ACTIVE?
         BNZ   LEVSCNXT            YES, GO RESUME IT
         SPACE
************************************************************
*                                                          *
*         STORE SELECTION CODES                            *
*                                                          *
************************************************************
         SPACE
         TM    STATUS4,$4REFR      SCREEN CONTENTS OVERWRITTEN?
         BO    LEVPRMRY            YES, NO SELECTION CODES
         L     R0,SCRNCOLS         GET SCREEN WIDTH
         LR    R1,R0               COPY IT
         AR    R1,R0               DOUBLE IT
         AR    R1,R0               TRIPLE IT
         A     R1,SCREENBF         POINT TO FIRST DISPLAYED DATA SET
         LA    R1,1(,R1)           POINT TO ACTUAL SELECTION CODE BYTE
         L     R3,LVATOPAD         POINT TO PRE-SCROLL TOP ENTRY
         USING LVAENT,R3
         B     LEVCD1#1
LEVCDLP1 A     R1,SCRNCOLS         POINT TO NEXT LINE
         C     R1,SHADOWBF         GONE PAST PRIMARY SCREEN BUFFER?
         BNL   LEVPRMRY            YES, CHECK FOR CURSOR SORT SELECTION
         LA    R3,LVAEND           POINT TO NEXT INTERNAL ENTRY
LEVCD1#1 C     R3,LVAENDAD         REACHED END OF DIRECTORY?
         BNL   LEVPRMRY            YES
         OI    0(R1),C' '          FOLD SELECTION CODE TO UPPER CASE
         CLI   0(R1),C' '          BLANK CODE?
         BE    LEVCDRES            YES
         CLI   0(R1),QUOTE         NO-OP CODE?
         BE    LEVCDRES            YES
         CLI   0(R1),C'.'          PERIOD?
         BE    LEVCDRES            YES, TREAT IT AS NO-OP ALSO
         CLI   0(R1),C','          COMMA?
         BE    LEVCDRES            YES, TREAT IT AS NO-OP ALSO
         C     R3,LVTOPACT         EARLIER THAN PREVIOUS FIRST ACTION?
         BNL   *+8                 NO, GO CHECK NEXT CODE
         ST    R3,LVTOPACT         YES, SAVE ITS ADDRESS
         CLI   LVAACT,QUOTE        ACTION CODE STORED PREVIOUSLY?
         MVC   LVAACT,0(R1)        SAVE SELECTION CODE
         BNE   LEVCDLP1            YES, ALREADY COUNTED
         LA    R0,1                NO
         A     R0,LVNUMACT         INCREMENT PENDING ACTION COUNT
         ST    R0,LVNUMACT
         B     LEVCDLP1            GO CHECK NEXT CODE
LEVCDRES CLI   LVAACT,QUOTE        ACTION CODE STORED PREVIOUSLY?
         BE    LEVCDLP1            NO, NO ACTION
         MVI   LVAACT,QUOTE        YES, CLEAR IT
         L     R0,LVNUMACT
         BCTR  R0,0                DECREMENT PENDING ACTION COUNT
         ST    R0,LVNUMACT
         LTR   R0,R0
         BP    LEVCDLP1            SOME ACTIONS STILL PENDING
         MVC   LVTOPACT,LVAENDAD
         B     LEVCDLP1            SOME ACTIONS STILL PENDING
         DROP  R3                  LVAENT
         SPACE
************************************************************
*                                                          *
*         PROCESS LOCAL PRIMARY SUBCOMMAND                 *
*                                                          *
************************************************************
         SPACE
LEVPRMRY TM    OPD0+6,PRESENT      ANY SUBCOMMAND REQUESTED?
         BNO   LEVCDCHK            NO, GO CHECK FOR PENDING ACTIONS
**                                 UPPERCASING PERFORMED BY REVCOMM
**       L     R1,=A(KAPS)         YES, POINT TO TRANSLATE TABLE
**       TR    CMDAREA,0(R1)       UPPER CASE ALL PRIMARY INPUT
         L     R1,OPD0             POINT TO SUBCOMMAND NAME
         TM    STATUS13,$13RFE     RUNNING UNDER RFE MENU SYSTEM?
         BNO   LEVRFEOK            NO
         CLI   0(R1),C'='          JUMPING TO OTHER MENU ITEM?
         BE    LEVEXIT             YES, GO DO THAT
LEVRFEOK L     R15,=A(LEVCMDTB)    POINT TO SUBCOMMAND TABLE
         LH    R5,OPD0+4           GET SUBCOMMAND LENGTH CODE PLUS 1
         LA    R0,7
         CLR   R5,R0               LARGER THAN MAXIMUM?
         BNH   LEVCMDLP            NO
         LR    R5,R0               YES, REDUCE TO MAXIMUM
LEVCMDLP EX    R5,LVCMDTST         FOUND THE SUBCOMMAND?
         BL    NOTLVCMD            NO, HANDLE NON-COMMAND PRIMARY INPUT
         BE    8(,R15)             YES, PERFORM IT
         LA    R15,12(,R15)        NOT YET, POINT TO NEXT ENTRY
         B     LEVCMDLP            CONTINUE SUBCOMMAND TABLE SCAN
LVCMDTST CLC   0(0,R1),0(R15)      <<< EXECUTED >>>
NOTLVCMD MVI   MSG,20              INVALID COMMAND
         B     LVFMTDON            GO DISPLAY THIS MESSAGE
LEVBADOP MVI   MSG,34              INVALID OPERAND
         B     LVFMTDON            GO DISPLAY THIS MESSAGE
LEVMISOP MVI   MSG,35              MISSING OPERAND
         B     LVFMTDON            GO DISPLAY THIS MESSAGE
LEV2MANY MVI   MSG,51              TOO MANY OPERANDS
         B     LVFMTDON            GO DISPLAY THIS MESSAGE
         SPACE
************************************************************
*                                                          *
*         TERMINATION PROCESSING                           *
*                                                          *
************************************************************
         SPACE
LEVCANBK NI    LEVFLG1,255-$LVPROF TURN OFF PROFILE REWRITE FLAG
LEVENDBK XC    LVAENDAD,LVAENDAD   TELL SUBTASK TO FINISH NOW
         BAS   R14,LVDETACH        CLEAN UP SUBTASK
         BAS   R14,LVFREPLT        CLEAN UP VOLUME SPACE MAP PLOT
         LM    R0,R1,LVARAYSZ      GET ARRAY STORAGE DETAILS
         FREEMAIN RU,LV=(0),A=(1)  FREE THE ARRAY STORAGE
         XC    LVARAYSZ(12),LVARAYSZ
         B     DORELEVL            GO BACK AND PROMPT FOR NEW INDEX
         SPACE
LEVEXIT  OI    LEVFLG1,$LVPROF     TURN ON PROFILE REWRITE FLAG
         CLC   LEVELSAV(44+6),LVOLDSAV
         BNE   LEVEXIT2            NEED TO UPDATE PROFILE MEMBERK
LEVCAN   NI    LEVFLG1,255-$LVPROF TURN OFF PROFILE REWRITE FLAG
LEVEXIT2 XC    LVAENDAD,LVAENDAD   TELL SUBTASK TO FINISH NOW
         BAS   R14,LVDETACH        CLEAN UP SUBTASK
         LM    R0,R1,LVARAYSZ      GET ARRAY STORAGE DETAILS
         LTR   R0,R0               ANY ARRAY TO FREE?
         BZ    LEVEXIT3            NO
         FREEMAIN RU,LV=(0),A=(1)  FREE THE ARRAY STORAGE
         XC    LVARAYSZ(12),LVARAYSZ
LEVEXIT3 TM    LEVFLG1,$LVPROF     NEED TO REWRITE PROFILE?
         BNO   LEVEXIT4            NO
         NI    LEVFLG1,255-$LVPROF YES, RESET FLAG
         LA    R0,LVPROFSZ         SET STORAGE SIZE
         GETSTOR RC,LV=(0),LOC=(31,64)
         LTR   R15,R15             SUCCESS?
         BNZ   LEVEXIT4            NO, SKIP PROFILE REWRITE
         LR    R2,R1               YES, POINT TO NEW STORAGE
         LA    R3,LVPROFSZ         GET ITS SIZE
         LA    R15,C' '
         SLL   R15,24              SET PAD AND ZERO LENGTH
         MVCL  R2,R14              BLANK OUT NEW STORAGE
         MVC   80(5,R1),=C'DSM1='  INDICATE DATA SET MASK 1
         MVC   85(44,R1),LEVELSAV  LOAD LATEST PREFIX
         MVC   160(5,R1),=C'VOL1=' INDICATE VOLUME 1
         MVC   165(6,R1),LEVELVOL  LOAD LATEST VOLUME
         LA    R0,LVPROFSZ         SET STORAGE SIZE
         LNR   R0,R0               INDICATE WRITE WITH NEGATIVE
         MVC   DOUBLE,LVPROFNM     SET PROFILE MEMBER NAME
         L     R15,=V(REVPROF)     POINT TO PROFILE I/O ROUTINE
         BASR  R14,R15
         LA    R0,LVPROFSZ         SET STORAGE SIZE
         FREEMAIN RU,LV=(0),A=(1)  FREE PROFILE STORAGE
LEVEXIT4 NI    MODE,255-MD_OFFLD   ENSURE SEARCH FLAGS ARE RESET
         NI    FINDSW2,255-FALL
         LA    R0,@LVLWKLN         GET LENGTH OF DYNAMIC AREA
         LR    R1,R13              POINT TO DYNAMIC AREA TO BE FREED
         L     R13,4(,R13)         POINT TO PREVIOUS SAVE AREA
         FREEMAIN R,LV=(0),A=(1)   FREE @LVLWORK
         MVI   STATUS11,0          RESET $11LV FLAG
         L     R14,12(,R13)        LOAD RETURN ADDRESS
         LM    R0,R12,20(R13)      RESTORE OTHER REGISTERS
         BR    R14                 RETURN WITH FREEMAIN RETURN CODE
         SPACE
************************************************************
*                                                          *
*         DETACH SUBTASK                                   *
*                                                          *
************************************************************
         SPACE
LVDETACH ICM   R0,15,LVSUBTSK      ANY SUBTASK TO CLEAN UP?
         BZR   R14                 NO, RETURN WITHOUT ACTION
         ST    R14,READR           SAVE RETURN ADDRESS
         WAIT  ECB=LVSUBECB        WAIT FOR SUBTASK TO COMPLETE
         DETACH LVSUBTSK           REMOVE SUBTASK TCB
         XC    LVSUBTSK,LVSUBTSK   CLEAR TCB ADDRESS
         LA    R0,LEVTSKNM         POINT TO ENTRY POINT NAME
         DELETE EPLOC=(0)          REMOVE IDENTIFIED ENTRY POINT
         L     R14,READR           RESTORE RETURN ADDRESS
         BR    R14                 RETURN TO CALLER
         SPACE
************************************************************
*                                                          *
*         FREE VOLUME SPACE MAP PLOT PIXEL ARRAY           *
*                                                          *
************************************************************
         SPACE
LVFREPLT ICM   R1,15,LEVPLOT@      ANY SPACE MAP PLOT TO FREE?
         BZR   R14                 NO, RETURN WITHOUT ACTION
         MVC   PICDTLS(PICDTLEN),LEVPLOT#
         L     R0,PICSTGSZ         GET PICTURE ARRAY STORAGE SIZE
         FREEMAIN RU,LV=(0),A=(1),SP=17
         XC    LEVPLOT@,LEVPLOT@   RESET STORAGE POINTER
         XC    HSEACTIV,HSEACTIV
         XC    LEVPLOT#,LEVPLOT#   AND PICTURE STATISTICS
         XC    PICDTLS(PICDTLEN),PICDTLS
         BR    R14                 RETURN TO CALLER
         SPACE
************************************************************
*                                                          *
*         SUBTRACT AN ENTRY'S SPACE FROM TOTALS            *
*                                                          *
************************************************************
         SPACE
         USING LVAENT,R3
         SPACE
LVSBTRCT TM    LVAFLG,$DEL         DATA SET ALREADY DELETED?
         BOR   R14                 YES, NOTHING TO SUBTRACT
         SR    R15,R15             CLEAR FOR INSERT
         IC    R15,LVAEXT          GET THE EXTENT COUNT
         L     R0,LVTOTEXT         GET THE PREVIOUS TOTAL
         SR    R0,R15              GET THE NEW TOTAL
         ST    R0,LVTOTEXT         SAVE IT
         L     R0,LVTOTALC         GET THE PREVIOUS TOTAL
         S     R0,LVAALOC          GET THE NEW TOTAL
         ST    R0,LVTOTALC         SAVE IT
         L     R0,LVTOTUSE         GET THE PREVIOUS TOTAL
         S     R0,LVAUSED          GET THE NEW TOTAL
         ST    R0,LVTOTUSE         SAVE IT
         BR    R14                 RETURN TO CALLER
         SPACE
************************************************************
*                                                          *
*         SCROLLING PROCESSING                             *
*                                                          *
************************************************************
         SPACE
LEVTOP   L     R3,LVARAYAD         POINT TO FIRST ENTRY
         ST    R3,LVATOPAD         SAVE NEW TOP ENTRY POINTER
         B     LEVLSAME            GO DISPLAY REPOSITIONED DATA
         SPACE
LEVBOTOM L     R3,LVAENDAD         POINT TO **END**
         L     R1,ISPFPAGE         GET NUMBER OF SCREEN DATA LINES
         BCTR  R1,0                SHOW **END**
         ICM   R0,15,LEVPLOT@      ANY VOLUME SPACE MAP PLOT DATA?
         BZ    LEVCLIMB            NO, SCROLL UP ALMOST ONE PAGE
         SH    R1,=H'3'            YES, LEAVE ROOM FOR IT
         B     LEVCLIMB            SCROLL UP ALMOST ONE PAGE
         SPACE
LEVUPCMD L     R15,=A(DIRSCROL)    POINT TO ROUTINE ENTRY POINT
         BASR  R14,R15             DETERMINE SCROLL AMOUNT
         LTR   R15,R15             TEST RETURN CODE
         BM    LEVBADOP            INVALID OPERAND
         BP    LEVTOP              SCROLL AMOUNT IS MAXIMUM
         L     R3,LVATOPAD         POINT TO CURRENT TOP ENTRY
         LA    R15,LVASEQ          POINT TO ROW NUMBER IF EXTANT
         C     R3,LVAENDAD         DOWN THE BOTTOM?
         BL    *+8                 NO
         LA    R15,LEVLROWS        YES, POINT TO EXTANT ROW COUNT
         C     R1,0(,R15)          REQUEST TO SCROLL UP BEYOND TOP?
         BNL   LEVTOP              YES, SCROLL UP BUT STOP AT TOP
LEVCLIMB LA    R0,LVASIZ           GET ARRAY ENTRY SIZE
         MR    R0,R0               GET SIZE OF ENTRIES TO SCROLL PAST
         SR    R3,R1               GET NEW TOP-OF-SCREEN ENTRY
         C     R3,LVARAYAD         SCROLLED ABOVE TOP?
         BL    LEVTOP              YES, JUST GO TO THE TOP
         ST    R3,LVATOPAD         SAVE ITS ADDRESS
         B     LEVLSAME            GO DISPLAY REPOSITIONED DATA
         SPACE
LEVDNCMD L     R15,=A(DIRSCROL)    POINT TO ROUTINE ENTRY POINT
         BASR  R14,R15             DETERMINE SCROLL AMOUNT
         LTR   R15,R15             TEST RETURN CODE
         BM    LEVBADOP            INVALID OPERAND
         BP    LEVBOTOM            SCROLL AMOUNT IS MAXIMUM
         L     R3,LVATOPAD         POINT TO CURRENT TOP ENTRY
LEVLIST# LA    R0,LVASIZ           GET ARRAY ENTRY SIZE
         MR    R0,R0               GET SIZE OF ENTRIES TO SCROLL PAST
         AR    R3,R1               GET NEW TOP-OF-SCREEN ENTRY
         C     R3,LVAENDAD         GONE PAST END OF ARRAY?
         BNH   *+8                 NO
         L     R3,LVAENDAD         YES, JUST SHOW END MARKER
LEVLIST1 ST    R3,LVATOPAD         SAVE NEW TOP ENTRY ADDRESS
         B     LEVLSAME            GO DISPLAY REPOSITIONED DATA
         SPACE
LEVLEFT  MVI   LEVCRAWL+1,0        SCROLL LEFT
         B     LEVLSAME            GO REDISPLAY DATA
         SPACE
LEVRIGHT MVC   LEVCRAWL,LVCROUCH   SCROLL RIGHT
         B     LEVLSAME            GO REDISPLAY DATA
         SPACE
************************************************************
*                                                          *
*         SELECTION CODE PROCESSING                        *
*                                                          *
************************************************************
         SPACE
LEVCDCHK L     R3,LVTOPACT         POINT TO FIRST PENDING ACTION ENTRY
         C     R3,LVAENDAD         ANY PENDING ACTIONS?
         BL    LEVCD1#2            YES, SKIP INCREMENT FIRST TIME
         B     LVDYNCSR            NONE, SO CHECK FOR CURSOR SORT
LEVCDLP2 LA    R3,LVAEND           POINT TO NEXT INTERNAL ENTRY
         ST    R3,LVTOPACT         NO CODES BEFORE THIS
LEVCD1#2 MVC   $DDNAME,LVDSLIST    RESET DDNAME (FOR SWAP LIST)
         C     R3,LVAENDAD         REACHED END OF DIRECTORY?
         BNL   LVDYNCSR            YES, GO DISPLAY THE LATEST
         CLI   LVAACT,QUOTE        NO-OP CODE?
         BE    LEVCDLP2            YES, GO CHECK NEXT
         ST    R3,LVLSTACT         SAVE PROCESSED ENTRY ADDRESS
         TM    STATUS4,$4ATTN      ATTENTION INTERRUPT?
         BO    LEVLATTN            YES, REQUEST CANCELLED
         MVC   $DSNAME(2),LVADSNL  SET ACTIVE DATA SET
         MVC   $DSNAME+2(44),LVADSN
         XC    $UCBAD,$UCBAD
         MVC   LVALST,LVAACT       SAVE ACTION SELECTION CODE
         MVI   LVAACT,QUOTE        RESET STORED ACTION CODE
         NI    LVAFLG,255-$FAIL    RESET ACTION FAILURE FLAG
         L     R0,LVNUMACT         GET PENDING ACTION COUNT
         BCTR  R0,0                DECREMENT IT
         ST    R0,LVNUMACT         SAVE NEW VALUE
         TM    LVAFLG,$UNCAT       UNCATALOGED DATA SET?
         BNO   *+8                 NO
         MVI   $DDNAME,C'¬'        YES, FLAG THIS
         SPACE
         XC    DOUBLE,DOUBLE       RESET SOME STORAGE
         CLI   LVALST,C'U'         CORRECT SELECTION CODE FOR UNCATLG?
         BE    LVDSCTLG            YES
         CLI   LVALST,C'C'         CORRECT SELECTION CODE FOR CATLG?
         BE    LVDSCTLG            YES
         CLI   LVALST,C'L'         CORRECT SELECTION CODE FOR LISTCAT?
         BE    LVLSTCAT            YES
         CLI   LVALST,C'S'         CORRECT SELECTION CODE FOR DSINFO?
         BE    LVDSALNM            YES
         CLI   LVALST,C'D'         CORRECT SELECTION CODE FOR DELETE?
         BE    LVDSACHK            YES
         CLI   LVALST,C'R'         CORRECT SELECTION CODE FOR RENAME?
         BE    LVDSACHK            YES
         CLI   LVALST,C'I'         CORRECT SELECTION CODE FOR DSINFO?
         BE    LVDSALOC            YES
         CLI   LVALST,C'B'         CORRECT SELECTION CODE FOR BROWSE?
         BE    LVDSALOC            YES
         CLI   LVALST,C'/'         CORRECT SELECTION CODE FOR BROWSE?
         BE    LVDSALOC            YES
         CLI   LVALST,C'E'         CORRECT SELECTION CODE FOR EDIT?
         BE    LVDSALOC            YES
         CLI   LVALST,C'V'         CORRECT SELECTION CODE FOR VIEW?
         BE    LVDSALOC            YES
         CLI   LVALST,C'A'         CORRECT SELECTION CODE FOR CREATE?
         BE    LEVALCDS            YES
         CLI   LVALST,C'Z'         CORRECT SELECTION CODE FOR COMPRESS?
         BE    LVDSALOC            YES
         CLI   LVALST,C'M'         CORRECT SELECTION CODE FOR MEMBERS?
         BE    LVDSALOC            YES
LEVCDBAD MVI   MSG,24              INVALID SELECTION CODE
         MVI   LVALST,0            RESET LATEST ACTION
         B     *+8                 BAD CODE NOT ECHOED
LEVCFAIL OI    LVAFLG,$FAIL        MARK THE REQUEST AS FAILED
         LR    R1,R3               POINT TO ENTRY WITH BAD CODE
         S     R1,LVATOPAD         GET ENTRY DISTANCE FROM TOP ENTRY
         BM    LEVCDTOP            ENTRY ABOVE PAGE SO SCROLL
         SR    R0,R0               CLEAR FOR DIVIDE
         LA    R14,LVASIZ          GET ENTRY SIZE
         DR    R0,R14              GET ENTRY COUNT BELOW TOP
         C     R1,ISPFPAGE         IS IT ON VIEW?
         BL    LEVLSAME            YES
LEVCDTOP ST    R3,LVATOPAD         NO, SHOW IT ON THE TOP LINE
         B     LEVLSAME
         SPACE
************************************************************
*                                                          *
*         TEST FOR NON-VSAM                                *
*                                                          *
************************************************************
         SPACE
LVDSACHK CLI   LVATYP,CTGTALIN     NON-VSAM DATA SET?
         BE    LVDSQALC            YES, GO CHECK IF ALLOCATED
         CLC   =C'VS',LVAORG       VSAM DATA SET?
         BE    LVDSNNVS            YES, NOT NON-VSAM
         CLI   LVATYP,C'@'         VTOC ENTRY?
         BE    LVDSQALC            YES, GO CHECK IF ALLOCATED
LVDSNNVS MVI   MSG,163             NOT A NON-VSAM DATA SET
         B     LEVCFAIL            GO REPORT THE BAD NEWS
         SPACE
************************************************************
*                                                          *
*         DEALLOCATE DATA SET FOR SUBSEQUENT ACTION        *
*                                                          *
************************************************************
         SPACE
LVDSCLAG MVI   MSG,167             CANNOT DEALLOCATE DATA SET
         B     LEVCFAIL
         SPACE
LVDSDALC CLI   DOUBLE,0            FIRST TIME HERE?
         BNE   LVDSCLAG            NO, DATA SET IS CLAGGED
         MVI   DOUBLE,3            YES, FLAG FOR SECOND TIME
         XC    MYDAPB,MYDAPB
         MVI   DA18CD+1,X'18'
         LA    R0,$DSNAME
         ST    R0,DA18PDSN
         MVC   DA18MNM,LEVBLNKS    MEMBER NAME
         MVC   DA18SCLS,LEVBLNKS   SYSOUT CLASS IS 2-BYTE FIELD
         MVI   DA18CTL,DA18PERM    FREE EVEN IF PERMANENT ALLOCATION
         XC    MYECB,MYECB
         XASAM24
         LA    R1,MYDAPL
         L     R15,CVTPTR(,0)      CVT
         L     R15,CVTDAIR-CVT(,R15)
         BASR  R14,R15             CALL IKJDAIR TO FREE FILE
         XASAM31
         SPACE
************************************************************
*                                                          *
*         DETERMINE IF A DATA SET IS ALLOCATED             *
*                                                          *
************************************************************
         SPACE
         USING DAPB00,MYDAPB
LVDSQALC XC    MYDAPB,MYDAPB       ISSUE ALLOCATION QUERY
*        MVI   DA00CD+1,X'00'
         LA    R0,$DSNAME
         ST    R0,DA00PDSN
         XC    MYECB,MYECB
         XASAM24
         LA    R1,MYDAPL
         L     R15,CVTPTR(,0)      CVT
         L     R15,CVTDAIR-CVT(,R15)
         BASR  R14,R15             CALL IKJDAIR
         XASAM31
         TM    DA00FLG,DA00DSE     IS THE DATA SET ALLOCATED?
         BO    LVDSDALC            YES, GO ATTEMPT TO FREE IT
         SPACE
************************************************************
*                                                          *
*         ALLOCATE DATA SET FOR SUBSEQUENT ACTION          *
*                                                          *
************************************************************
         SPACE
LVDSALOC SR    R0,R0
         NI    LEVFLG1,255-$LVOL99 TURN OFF VOLUME DYNALLOC FLAG
         STCM  R0,7,DSORG          CLEAR ORGANIZATION INDICATORS
         ST    R0,TTR              CLEAR NEWTOP SETTING
         XC    MYDAPB,MYDAPB       ISSUE ALLOCATION REQUEST
         MVI   DA08CD+1,X'08'
         LA    R0,$DSNAME          POINT TO DSNAME TO ALLOCATE
         ST    R0,DA08PDSN
         MVC   DA08DDN,LEVBLNKS
         MVC   DA08UNIT,LEVBLNKS
         MVC   DA08SER,LEVBLNKS
         MVC   DA08MNM,LEVBLNKS
         MVC   DA08PSWD,LEVBLNKS
         MVI   DA08DSP1,DA08SHR
         CLI   LVALST,C'Z'         COMPRESS REQUEST?
         BE    LVDSOLD             YES
         CLI   LVALST,C'D'         DELETE REQUEST?
         BE    LVDSOLD             YES
         CLI   LVALST,C'R'         RENAME REQUEST?
         BNE   *+8                 NO
LVDSOLD  MVI   DA08DSP1,DA08OLD
         MVI   DA08DPS2,DA08KEEP
         MVI   DA08DPS3,DA08KEP
         CLI   $DSNAME+17,C' '     POSSIBLE CVOL ENTRY?
         BNE   LVDSCVOK            NO
         CLC   =C'SYSCTLG.',$DSNAME+2
         BNE   LVDSCVOK            NOT A CVOL
         MVC   $DSNAME+9(8),$DSNAME+17
         MVC   DA08UNIT,LEVALLDA
         MVC   DA08SER(6),LVAVOL
LVDSCVOK TM    LVAFLG,$UNCAT       UNCATALOGED DATA SET?
         BNO   LVDSVLOK            NO, ALLOCATE VIA CATALOG ENTRY
         MVC   DA08SER(6),LVAVOL   YES, SUPPLY THE VOLUME SERIAL
         MVC   DA08UNIT,LEVALLDA   ALSO SUPPLY THE UNIT NAME
LVDSVLOK XC    MYECB,MYECB
         XASAM24
         LA    R1,MYDAPL
         L     R15,CVTPTR(,0)      CVT
         L     R15,CVTDAIR-CVT(,R15)
         BASR  R14,R15             CALL IKJDAIR
         XASAM31
         LTR   R15,R15
         BZ    LVDSALCD            FILE SUCCESSFULLY ALLOCATED
         SPACE
         CLC   =X'0320',DA08DARC   INVALID DATA SET NAME?
         BE    LVDSVC99            YES, GO TRY DYNALLOC
         CLI   LVALST,C'*'         ATTEMPTING A SCAN?
         BNH   LVDSFAIL            YES, SKIP MESSAGE PROCESSING
LVDSDAER CLC   =X'0210',DA08DARC   DATA SET IN USE?
         BE    LVDSINUS            YES, DO NOT SHOW CODES
         CLC   =X'020C',DA08DARC   SHARED DATA SET IN USE BY OTHERS?
         BE    LVDSINUS            YES, DO NOT SHOW CODES
         CLC   =X'6708',DA08DARC   DATA SET NOT ON VOLUME?
         BE    LVDSNOV             YES, DO NOT SHOW CODES
         LA    R0,25
         STH   R0,MSG              SET MESSAGE LENGTH
         STC   R15,DOUBLE+4        REPORT ERROR CODES IN MESSAGE
         MVC   MSG+2(21),=CL21'RC=XX DARC=XXXX CTRC='
         UNPK  MSG+5(3),DOUBLE+4(2)
         TR    MSG+5(2),LEVHEX-C'0'
         MVI   MSG+7,C' '
         UNPK  MSG+13(5),DA08DARC(3)
         TR    MSG+13(4),LEVHEX-C'0'
         MVI   MSG+17,C' '
         UNPK  MSG+23(5),DA08CTRC(3)
         TR    MSG+23(4),LEVHEX-C'0'
         MVI   MSG+27,C' '
         OI    STATUS7,$7BELL      REQUEST AUDIBLE ALARM
         SPACE
         LA    R1,MYDFPARM         PUTLINE DAIRFAIL ERROR MESSAGE
         USING DFDSECTD,R1         MAPPED BY IKJEFFDF DFDSECT=YES MACRO
         ST    R15,MYDFRC          IKJDAIR RETURN CODE
         LA    R15,MYDFRC
         ST    R15,DFRCP
         LA    R15,MYDAPL
         ST    R15,DFDAPLP
*        SR    R15,R15             INITIALLY ZERO - BUT LEAVE EP THERE
*        ST    R15,MYJEFF02               IF THE SYSTEM ALREADY SET IT
         LA    R15,MYJEFF02
         ST    R15,DFJEFF02
*        MVI   MYDFID,0            REQUEST PUTLINE OF MESSAGE
         MVI   MYDFID+1,DFDAIR
         LA    R15,MYDFID
         ST    R15,DFIDP
         MVC   DFCPPLP,CPPLPTR
         SR    R15,R15
         ST    R15,DFBUFP
         DROP  R1                  DFDSECTD
         LINK  EPLOC=LEVEFF18,SF=(E,LINKAREA)
         B     LEVCFAIL
LVDSINUS MVI   MSG,120             DATA SET IN USE
         B     LEVCFAIL
LVDSNOV  MVI   MSG,166             DATA SET NOT ON VOLUME
         B     LEVCFAIL
         SPACE
LVDSVC99 L     R1,SCREENBF         POINT TO DYNALLOC PARAMETER LIST
         XC    0(256,R1),0(R1)     ERASE SOME RESIDUAL DATA
         USING S99RBPTR,R1
         LA    R15,4(,R1)          POINT TO DYNALLOC REQUEST BLOCK
         USING S99RB,R15
         ST    R15,S99RBPTR        INITIALIZE PARAMETER LIST
         OI    S99RBPTR,S99RBPND   INDICATE END OF PARAMETER LIST
         MVI   S99RBLN,20          SUPPLY REQUEST BLOCK LENGTH
         MVI   S99VERB,S99VRBAL    VERB=X'01' - DSNAME ALLOCATION
         MVI   S99FLG11,S99NOCNV+S99NOMNT   NEW ALLOC AND NOMOUNT
*        MVI   S99FLG12,0
*        SR    R0,R0               ALREADY ZEROED BY XC ABOVE
*        STH   R0,S99ERROR         ZERO ERROR REASON CODE
*        STH   R0,S99INFO          ZERO INFORMATION REASON CODE
*        ST    R0,S99FLAG2         ZERO AUTHORIZED FLAGS
         LA    R14,64(,R1)         GET TEXT POINTERS AREA ADDRESS
         ST    R14,S99TXTPP        SAVE IT
         AIF   (NOT &ENV390).LDRBXOK
         TM    OSBITS,X'93'        MVS/XA OR LATER?
         BNO   LDSRBXOK            NO, LEAVE RB EXTENSION POINTER ZERO
         LA    R0,20(,R15)         GET REQUEST BLOCK EXTENSION ADDR
         ST    R0,S99S99X          SAVE IT
         DROP  R15                 S99RB
         LR    R15,R0
         USING S99RBX,R15
         MVC   S99EID,=C'S99RBX'   SUPPLY CONTROL BLOCK ID
         MVI   S99EVER,S99RBXVR    SUPPLY VERSION NUMBER (X'01')
         MVI   S99EOPTS,S99EIMSG   LET SYSTEM USE PUTLINE FOR MSG(S)
         MVI   S99EMGSV,S99XINFO   SHOW EVEN INFO-LEVEL MESSAGES
         MVC   S99ECPPL,CPPLPTR    SUPPLY CPPL ADDRESS FOR PUTLINE
*        SR    R0,R0               ALREADY ZEROED BY XC ABOVE
*        ST    R0,S99EMRC          ZERO RESERVED BYTES
*        STH   R0,S99EERR          ZERO ERROR REASON CODE
*        STH   R0,S99EINFO         ZERO INFORMATION REASON CODE
*        ST    R0,S99ERSN          ZERO SMS REASON CODE (WAS S99ERSV2)
.LDRBXOK ANOP
         DROP  R15                 S99RB(X)
         USING S99TUPL,R14
LDSRBXOK LA    R15,32(,R14)        POINT TO AREA FOR TEXT UNITS
         USING S99TUNIT,R15
         ST    R15,S99TUPTR        SAVE FIRST TEXT UNIT ADDRESS
         LA    R0,DALVLSER         KEY = X'0010' - VOLUME SERIAL
         STH   R0,S99TUKEY
         LA    R0,1
         STH   R0,S99TUNUM         1 PARAMETER IN THIS TEXT UNIT
         LA    R0,6
         STH   R0,S99TULNG         MAXIMUM LENGTH IS 6
         MVC   S99TUPAR(6),LVAVOL  LOAD VOLUME SERIAL NUMBER
         LA    R14,4(,R14)         POINT TO NEXT TEXT UNIT POINTER
         LA    R15,16(,R15)        POINT TO NEXT TEXT UNIT
         ST    R15,S99TUPTR        SAVE SECOND TEXT UNIT ADDRESS
         LA    R0,DALUNIT          KEY = X'0015' - UNIT DESCRIPTION
         STH   R0,S99TUKEY
         LA    R0,1
         STH   R0,S99TUNUM         1 PARAMETER IN THIS TEXT UNIT
         LA    R0,8
         STH   R0,S99TULNG         LENGTH IS 8
         MVC   S99TUPAR(8),LEVALLDA
         LA    R14,4(,R14)         POINT TO NEXT TEXT UNIT POINTER
         LA    R15,16(,R15)        POINT TO NEXT TEXT UNIT
         ST    R15,S99TUPTR        SAVE THIRD TEXT UNIT ADDRESS
         LA    R0,DALSTATS         KEY = X'0004' - DATA SET STATUS
         STH   R0,S99TUKEY
         LA    R0,1
         STH   R0,S99TUNUM         1 PARAMETER IN THIS TEXT UNIT
*        LA    R0,1
         STH   R0,S99TULNG         LENGTH IS 1
         MVC   S99TUPAR(1),DA08DSP1   COPY SHR OR OLD FROM DAPB
         LA    R14,4(,R14)         POINT TO NEXT TEXT UNIT POINTER
         LA    R15,8(,R15)         POINT TO NEXT TEXT UNIT
**              THE DATA SET NAME IS INVALID SO DO NOT SPECIFY IT
**       ST    R15,S99TUPTR        SAVE FOURTH TEXT UNIT ADDRESS
**       LA    R0,DALDSNAM         KEY = X'0002' - DATA SET NAME
**       STH   R0,S99TUKEY
**       LA    R0,1
**       STH   R0,S99TUNUM         1 PARAMETER IN THIS TEXT UNIT
**       MVC   S99TULNG(46),$DSNAME
**       LA    R14,4(,R14)         POINT TO NEXT TEXT UNIT POINTER
**       LA    R15,64(,R15)        POINT TO NEXT TEXT UNIT
         ST    R15,S99TUPTR        SAVE LAST TEXT UNIT ADDRESS
         OI    S99TUPTR,S99TUPLN   INDICATE THAT IT IS THE LAST
         LA    R0,DALRTDDN         KEY = X'0055' - RETURN DDNAME
         STH   R0,S99TUKEY
         LA    R0,1
         STH   R0,S99TUNUM         1 PARAMETER IN THIS TEXT UNIT
         LA    R0,8
         STH   R0,S99TULNG         MAXIMUM LENGTH IS 8
         MVC   S99TUPAR(8),LEVBLNKS
         LA    R0,S99TUPAR
         ST    R0,DOUBLE+4         REMEMBER THIS DDNAME LOCATION
         DROP  R1,R14,R15          S99RBPTR, S99TUPL, S99TUNIT
         DYNALLOC
         L     R2,DOUBLE+4         POINT TO RETURNED DDNAME
         MVC   DA08DDN,0(R2)       COPY IT TO EXPECTED PLACE
         L     R1,SCREENBF         POINT TO DYNALLOC PARAMETER LIST
         USING S99RBPTR,R1
         L     R1,S99RBPTR         POINT TO DYNALLOC REQUEST BLOCK
         DROP  R1                  S99RBPTR
         USING S99RB,R1
         MVC   DA08DARC,S99ERROR   COPY TO FEEDBACK EXPECTED PLACE
         MVC   DA08CTRC,S99INFO    COPY TO FEEDBACK EXPECTED PLACE
         DROP  R1                  S99RB
         LTR   R15,R15             SUCCESS?
         BNZ   LVDSDAER            NO, GO REPORT ERROR
         OI    LEVFLG1,$LVOL99     TURN ON VOLUME DYNALLOC FLAG
         SPACE
************************************************************
*                                                          *
*         DETERMINE PROCESS FOR ALLOCATED DATA SET         *
*                                                          *
************************************************************
         SPACE
LVDSALCD MVC   $DDNAME,DA08DDN     COPY GENERATED DD NAME
LVDSALNM CLI   LVATYP,CTGTANM      ALIAS ENTRY?
         BNE   LVDSALFX            NO, PERFORM ACTION ON DATA SET
         MVC   $DSNAME+2(44),LVAREAL
         XC    LOCBUF(256),LOCBUF  CLEAR A TRANSLATE TABLE
         MVI   LOCBUF+C' ',C' '    PREPARE BLANK SEARCH TABLE
         LA    R1,$DSNAME+46       PREPARE FOR FULL-LENGTH NAME
         TRT   $DSNAME+2(44),LOCBUF
         LA    R0,$DSNAME+2
         SR    R1,R0               SAVE THE DATA SET NAME LENGTH
         STH   R1,$DSNAME          SAVE IT
LVDSALFX XC    MYDSCB,MYDSCB       INVALIDATE VTOC ENTRY COPY
         MVC   DS1VOLSQ,LVADSQ     LOAD DATA SET SEQUENCE NUMBER
         XC    DSORG,DSORG         CLEAR DSORG INDICATORS
         XC    AMKEY(20),AMKEY     CLEAR KEY AND VSAM DETAILS
         CLI   LVALST,C'S'         DSINFO REQUEST?
         BE    LVDSINFO            YES
         SPACE
************************************************************
*                                                          *
*         DUPLICATE REVIEW PHASE 1 PROCESSING              *
*                                                          *
************************************************************
         SPACE
         MVC   DSNAIM(46),$DSNAME  PRIME DATA SET NAME FOR HEADING ETC.
         LA    R1,$DDNAME          POINT TO THE DDNAME
         L     R15,=A(REVDDLOC)    POINT TO TIOT ENTRY LOCATE ROUTINE
         BASR  R14,R15             LOCATE THE TIOT ENTRY
         LTR   R15,R15             FOUND IT, RIGHT?
         BZ    LVDSOBOK            NO, VERY STRANGE...
         ICM   R1,7,17(R15)        POINT TO THE UCB
         ST    R1,$UCBAD           SAVE THE ADDRESS
         BZ    LVDSOBOK            NO UCB, A LITTLE WEIRD...
         MVC   $VOLSER,28(R1)      COPY THE VOLUME SERIAL NUMBER
         CLI   18(R1),X'20'        DASD DEVICE CLASS?
         BNE   LVDSOBOK            NO, SKIP OBTAIN
         CLI   LVALST,C'Z'         COMPRESS REQUEST?
         BNE   *+8                 NO
         OI    STATUS13,$13COMP    FLAG COMPRESS - NEED UPDATE ACCESS
         CLI   LVALST,C'D'         DELETE REQUEST?
         BE    LVDSALTR            YES
         CLI   LVALST,C'R'         RENAME REQUEST?
         BNE   *+8                 NO
LVDSALTR OI    STATUS14,$14ALT     FLAG ALTER ACCESS REQUIRED
         L     R15,=A(REVDASD)     POINT TO DASD DATA SET INIT. ROUTINE
         BASR  R14,R15             CALL IT - ONLY R9 TO R13 PRESERVED
         L     R3,LVLSTACT         RESTORE PROCESSED ENTRY ADDRESS
         NI    STATUS13,255-$13COMP
         NI    STATUS14,255-$14ALT RESET SECURITY ACCESS LEVEL FLAGS
         LTR   R15,R15             SUCCESS?
         BNZ   LVDSFAIL            NO, FAIL THE REQUEST
         MVC   DSORG,DS1DSORG      YES, HAVE THE VTOC ENTRY
         SPACE
         TM    LEVFLG1,$LVOL99     GENERAL VOLUME ALLOCATION?
         BNO   LJFCBRDY            NO, DSNAME CORRECTLY SET IN JFCB
         L     R15,=A(SEQDCB)      POINT TO DCB TEMPLATE
         CLI   LVAORG+1,C'O'       DSORG=PO?
         BNO   *+8                 NO, USE BSAM DCB
         L     R15,=A(PDSDCB)      YES, MAY AS WELL SAY SO IN JFCB
         MVC   DYNDCBW,0(R15)      LOAD DCB TEMPLATE
         LA    R4,DYNDCBW
         USING IHADCB,R4
         LA    R0,DYNEXLST         SET UP DCB EXIT LIST FOR RDJFCB
         STCM  R0,7,DCBEXLSA
         LA    R0,JFCB
         ST    R0,DYNEXLST
         MVI   DYNEXLST,128+X'07'  READ JFCB EXIT
         MVC   DCBDDNAM,$DDNAME    LOAD DD NAME
         MVI   OPEND,X'80'         ONLY 1 DCB IN DCB LIST
         RDJFCB ((R4)),MF=(E,OPEND)
         MVC   JFCBDSNM,$DSNAME+2  PUT RIGHT DSNAME INTO JFCB
         MVI   OPEND,X'80'         UPDATE JFCB IN SWA WITH DSNAME
         OPEN  ((R4),INPUT),TYPE=J,MF=(E,OPEND)
         MVI   CLOSED,X'80'
         CLOSE ((R4)),MF=(E,CLOSED)
LJFCBRDY EQU   *                   HAVE RIGHT DSNAME IN JFCB TO OPEN
         SPACE
         CLI   LVALST,C'D'         DELETE REQUEST?
         BE    LVDSKILL            YES
         CLI   LVALST,C'R'         RENAME REQUEST?
         BE    LVDSRENM            YES
         CLI   LVALST,C'Z'         COMPRESS REQUEST?
         BE    LVDSCOND            YES
         SPACE
LVDSOBOK CLI   LVALST,C'I'         DSINFO REQUEST?
         BE    LVDSINFO            YES
         CLI   LVALST,C'B'         BROWSE REQUEST?
         BE    LVDSBRWS            YES, NO SUBSTITUTION NEEDED
         CLI   LVALST,C'/'         BROWSE REQUEST WITH 'DATA'?
         BE    LVDSLASH            YES, NO SUBSTITUTION NEEDED
         CLI   DSORGTYP,X'FF'      CVOL?
         BE    LVDSSUBS            YES, NOT SUITABLE FOR REVEDIT
         CLI   DS1KEYL,0           ANY HARDWARE KEYS?
         BNE   LVDSSUBS            YES, NOT SUITABLE FOR REVEDIT
         TM    DS1RECFM,X'C0'      RECORD FORMAT GOOD FOR REVEDIT?
         BNM   LVDSSUBS            NO, MIGHT EVEN BE VSAM
         TM    DS1RECFM,X'48'      VARIABLE-LENGTH SPANNED RECORDS?
         BO    LVDSSUBS            YES, NOT SUITABLE FOR REVEDIT
         CLI   LVALST,C'E'         EDIT?
         BE    LVDSEDIT            YES
         CLI   LVALST,C'M'         MEMBERS?
         BE    LVDSEDIT            YES
         CLI   LVALST,C'V'         VIEW?
         BE    LVDSVIEW            YES
         B     LVDSBRWS            MUST BE BROWSE
         SPACE
LVDSSUBS CLI   LVALST,C'M'         MEMBERS?
         BE    LVDSBRWS            YES, SKIP SUBSTITUTED MESSAGE
         MVI   MSG,133             BROWSE SUBSTITUTED
         B     LVDSBRWS            DO NOT SET DATA KEYWORD
LVDSLASH MVI   DATAKV+1,1          PRETEND 'DATA' SPECIFIED
LVDSBRWS L     R15,=A(REVIEW2)     LOAD ROUTINE ENTRY POINT
         MVC   LVDSCB,MYDSCB       SAVE DSCB FOR LOCOBTN
         B     LVDSCALL            GO TO CALL
LVDSVIEW OI    STATUS11,$11VIEW    REQUEST VIEW
         B     *+8                 DO NOT SET EDIT-AS-DEFAULT FLAG
LVDSEDIT OI    STATUS11,$11ED      REQUEST EDIT
         L     R15,=A(REVEDIT)     LOAD ROUTINE ENTRY POINT
         XC    LVDSCB,LVDSCB       DSCB MAY BE ALTERED BY EDIT
LVDSCALL TM    DSORG,DS1DSGPO      PARTITIONED DATA SET?
         BO    LVDSMEMS            YES, SHOW MEMBER LIST
         CLI   LVALST,C'M'         MEMBERS REQUEST?
         BNE   LVDSFAS2            NO, PROCEED
LVDSNOPO MVI   MSG,173             ORGANIZATION IS NOT PO
         B     LVDSFAIL            FAIL THE REQUEST
LVDSMEMS L     R15,=A(REVPDS)      LOAD ROUTINE ENTRY POINT
         MVI   DATAKV+1,0          CLEAR 'DATA' OPERAND
         XC    LVDSCB,LVDSCB       DSCB MAY BE ALTERED BY EDIT
LVDSFAS2 XC    HSEACTIV,HSEACTIV   CLEAR ALL PICTURE INFORMATION
         XC    PICDTLS(PICDTLEN),PICDTLS
         NI    STATUS11,255-$11LV  RELINQUISH CONTROL
         BASR  R14,R15             CALL PROCESSOR
         SPACE
         LR    R1,R15              SAVE RETURN CODE
         L     R15,=A(REVNAME)
         BASR  R14,R15             ATTEMPT TO NAME THE SESSION
         TM    STATUS7,$7SAVE      WAS DATA CHANGED THIS SESSION?
         BNO   LVDSSVOK            NO
         NI    STATUS7,255-$7SAVE  YES, RESET FLAG
         MVI   MSG,75              DATA SAVED
LVDSSVOK LA    R0,8
         CR    R1,R0               SUCCESS?
         BNH   LVDSBACK            YES
LVDSFAIL OI    LVAFLG,$FAIL        MARK THE REQUEST AS FAILED
         OI    STATUS7,$7BELL      REQUEST AUDIBLE ALARM
LVDSBACK MVI   STATUS11,$11LV      BACK IN CONTROL
         MVI   STATUS3,0           RESET MEMBER SORT FLAGS
         MVI   DATAKV+1,0          CLEAR 'DATA' OPERAND
         MVC   $MEMBER,LEVBLNKS    CLEAR MEMBER NAME
*        B     LVDSDONE            NO, DEALLOCATE IT
         SPACE
************************************************************
*                                                          *
*         DEALLOCATE DATA SET AFTER PROCESSING             *
*                                                          *
************************************************************
         SPACE
LVDSDONE XC    MYDAPB,MYDAPB       NEED TO ZERO DA18DPS2 EVEN IF NO DD
         NI    LEVFLG1,255-$LVOL99 TURN OFF VOLUME DYNALLOC FLAG
*   ASSUMPTION:  NO FILE NAMES BEGINNING WITH '$' NEED TO BE FREED.
*   WITH THIS ASSUMPTION, A SINGLE TEST CAN BE USED TO DETERMINE
*   IF '$DDNAME' CONTAINS A FILE NAME WHICH SHOULD NOW BE FREED.
*   THE EXPECTATION IS THAT THE FILE NAMES ARE ALL SYSTEM GENERATED.
*   BLANKS, ASTERISKS AND THE NOT SIGN WILL COMPARE LOW IN THIS TEST:
         CLI   $DDNAME,C'#'        ANY FILE TO FREE?
         BL    LVDSDDGN            NO, EITHER FREED OR NOT ALLOCATED
         MVI   DA18CD+1,X'18'
         MVC   DA18DDN,$DDNAME     DDNAME
         MVC   DA18MNM,LEVBLNKS    MEMBER NAME
         MVC   DA18SCLS,LEVBLNKS   SYSOUT CLASS IS 2-BYTE FIELD
         CLI   STATUS11,X'FF'      FINALITY FLAG SET?
         BNE   LVKILLOK            NO, DO NOT DELETE THE DATA SET
         MVI   DA18DPS2,DA18DEL    SET DISPOSITION TO DELETE
         MVI   DA18CTL,DA18PERM    JUST IN CASE IT HELPS
         MVI   STATUS11,$11LV      RESET FINALITY FLAG
LVKILLOK XC    MYECB,MYECB
         XASAM24
         LA    R1,MYDAPL
         L     R15,CVTPTR(,0)      CVT
         L     R15,CVTDAIR-CVT(,R15)
         BASR  R14,R15             CALL IKJDAIR TO FREE FILE
         XASAM31
         CLI   LVALST,C'*'         ATTEMPTING A SCAN?
         BNH   LVDSDDGN            YES, SKIP ERROR HANDLING
         LTR   R15,R15             SUCCESS?
         BNZ   LVDSDAER            NO, GO REPORT FAILURE
         ST    R15,$UCBAD          YES, CLEAR UCB ADDRESS
LVDSDDGN MVC   $DDNAME,LEVBLNKS    CLEAR DDNAME
         SPACE
         CLI   LVALST,C'*'         ATTEMPTING A SCAN?
         BNH   LEVSCNDN            YES, SKIP MESSAGE PROCESSING
         TM    STATUS13,$13RFE     RUNNING UNDER RFE MENU SYSTEM?
         BNO   LVNOJUMP            NO, CANNOT JUMP ELSEWHERE
         TM    OPD0+6,PRESENT      ANY RESIDUAL SUBCOMMAND?
         BNO   LVNOJUMP            NO, NOT JUMPING NOW
         L     R1,OPD0             YES, POINT TO SUBCOMMAND NAME
         CLI   0(R1),C'='          JUMPING TO OTHER MENU ITEM?
         BE    LEVEXIT             YES, GO DO THAT
LVNOJUMP EQU   *
         SPACE
         BAS   R14,LVSBTRCT        REMOVE ENTRY'S SPACE FROM TOTALS
         CLI   DA18DPS2,DA18DEL    DELETED THE DATA SET?
         BNE   LVDLCHKD            NO
         OI    LVAFLG,$DEL         YES, FLAG IT AS SUCH
         NI    LVAFLG,255-$SCAN    ANY SCAN MATCH DOES NOT APPLY NOW
LVDLCHKD MVI   LVDSCB,0            INVALIDATE DSCB TO FORCE NEW OBTAIN
         LR    R1,R13              POINT TO WORKING STORAGE
         L     R15,=A(LOCOBTN)     POINT TO ROUTINE
         BASR  R14,R15             UPDATE DATA SET DETAILS
         CLI   DA18DPS2,DA18DEL    DELETED THE DATA SET?
         BE    LEVDSDEL            YES, GO REPORT THE RESULT
         TM    LVAFLG,$FAIL        DID THE REQUEST FAIL?
         BNO   LEVCDLP2            NO, CONTINUE PROCESSING SELECTIONS
         B     LEVCFAIL            YES, BETTER PAUSE FOR USER REACTION
         SPACE
LEVDSDEL IC    R0,MSG              SAVE MESSAGE STATUS
         MVI   MSG,171             DATA SET DELETED
         TM    LVAFLG,$DEL         REALLY?
         BO    LEVCDLP2            YES, CONTINUE PROCESSING SELECTIONS
         STC   R0,MSG              NO, RESTORE MESSAGE STATUS
         OI    STATUS7,$7BELL      REQUEST AUDIBLE ALARM FOR FAILURE
         B     LEVCFAIL            BETTER PAUSE FOR USER REACTION
         SPACE
************************************************************
*                                                          *
*         DISPLAY DATA SET ATTRIBUTES                      *
*                                                          *
************************************************************
         SPACE
LVDSINFO CLI   LVATYP,CTGTALIN     NON-VSAM?
         BH    LVDSINF2            NO
         CLC   =C'VS',LVAORG       VSAM DATA SET?
         BE    LVDSINF2            YES
         ST    R3,LVLSTINF         SAVE LAST INFO ENTRY ADDRESS
LVDSINF2 L     R15,=A(REVDSCB)     GET ROUTINE ENTRY POINT
         BASR  R14,R15             INVOKE IT
         B     LVDSDONE            FREE IF NECESSARY AND CONTINUE
         SPACE
************************************************************
*                                                          *
*         DELETE A DATA SET AFTER CONFIRMATION             *
*                                                          *
************************************************************
         SPACE
LVDSKILL MVI   STATUS11,X'FF'      SET FINALITY FLAG
         L     R15,=A(REVDSCB)     GET ROUTINE ENTRY POINT
         BASR  R14,R15             INVOKE IT
         TM    STATUS4,$4ATTN      ATTENTION INTERRUPT?
         BO    LVDSKEEP            YES, REQUEST CANCELLED
         CLI   REPLY,ENTERAID      ENTER AID PRESENT?
         BE    LVDSDONE            YES, PROCEED WITH DELETION
LVDSKEEP MVI   STATUS11,$11LV      RESET FINALITY FLAG
         MVI   LVALST,0            CLEAR LAST ACTION CODE
         MVI   MSG,29              REQUEST CANCELLED
         B     LVDSDONE            GO DEALLOCATE DATA SET
         SPACE
************************************************************
*                                                          *
*         CREATE/DELETE NON-VSAM CATALOG ENTRY             *
*                                                          *
************************************************************
         SPACE
LVDSCTLG CLI   LVATYP,CTGTALIN     NON-VSAM DATA SET?
         BE    LVDSCTGD            YES
         CLC   =C'VS',LVAORG       VSAM DATA SET?
         BE    LVDSNNVS            YES, NOT NON-VSAM
         CLI   LVATYP,C'@'         VTOC ENTRY?
         BNE   LVDSNNVS            NO, NOT NON-VSAM
LVDSCTGD L     R14,LVCMLOC         GET LOCATE CAM LIST SETTINGS
         LA    R15,$DSNAME+2       POINT TO THE DATA SET NAME
         SR    R0,R0
         LA    R1,LOCBUF           POINT TO THE OUTPUT AREA
         STM   R14,R1,LOCATEW      LOAD LOCATE CAM LIST
         LOCATE LOCATEW
         XC    MSG,MSG             CLEAR THE MESSAGE AREA
         OI    LVAFLG,$UNCAT       ASSUME IT IS UNCATALOGED
         LTR   R15,R15             CATALOG ENTRY FOUND?
         BNZ   LVDSCTOK            NO, IT IS UNCATALOGED
         CLC   LVALOC,LOCBUF       DOES THE ENTRY MATCH?
         BNE   LVDSCTOK            NO, IT IS UNCATALOGED
         NI    LVAFLG,255-$UNCAT   YES, THE DATA SET IS CATALOGED
LVDSCTOK CLI   LVALST,C'U'         UNCATALOG REQUEST?
         BE    LVDSUNCT            YES
         SPACE
         MVI   MSG,164             DATA SET ALREADY CATALOGED
         TM    LVAFLG,$UNCAT       UNCATALOGED DATA SET?
         BZ    LVDSFAIL            NO, ALREADY CATALOGED
         MVI   MSG,168             DUPLICATE CATALOG ENTRY
         LTR   R15,R15             CATALOG ENTRY FOUND?
         BZ    LVDSFAIL            YES, DUPLICATE ENTRY
         LA    R0,1
         STH   R0,LVAVOL#          SET THE VOLUME COUNT TO ONE
         L     R14,LVCMCAT         GET CATLG CAM LIST SETTINGS
         LA    R15,$DSNAME+2       POINT TO THE DATA SET NAME
         SR    R0,R0
         LA    R1,LVALOC           POINT TO CATALOG ENTRY DETAILS
         STM   R14,R1,CATALOGW     LOAD CATALOG CAM LIST
         CATALOG CATALOGW          CATALOG THE DATA SET
         MVI   MSG,169             DATA SET CATALOGED
         LTR   R15,R15             SUCCESS?
         BZ    LVDSDONE            YES
         STC   R15,DOUBLE          SAVE RETURN CODE
         MVC   MSG+2(20),=CL20'CATALOG RETURN CODE='
         UNPK  MSG+22(3),DOUBLE(2)
         TR    MSG+22(2),LEVHEX-C'0'
         OI    STATUS7,$7BELL      REQUEST AUDIBLE ALARM
         ST    R0,DOUBLE           YES, SAVE REASON CODE
         MVC   MSG+24(8),=CL8' REASON='
         UNPK  MSG+32(3),DOUBLE(2)
         TR    MSG+32(2),LEVHEX-C'0'
         MVI   MSG+34,C' '
         LA    R14,32
         STH   R14,MSG             SET MESSAGE LENGTH
         B     LVDSFAIL
         SPACE
LVDSUNCT MVI   MSG,165             DATA SET NOT CATALOGED
         TM    LVAFLG,$UNCAT       UNCATALOGED DATA SET?
         BO    LVDSFAIL            YES, ALREADY UNCATALOGED
         L     R14,LVCMUNCT        GET UNCATLG CAM LIST SETTINGS
         LA    R15,$DSNAME+2       POINT TO THE DATA SET NAME
         SR    R0,R0
         SR    R1,R1
         STM   R14,R1,CATALOGW     LOAD CATALOG CAM LIST
         CATALOG CATALOGW          UNCATALOG THE DATA SET
         MVI   MSG,170             DATA SET UNCATALOGED
         LTR   R15,R15             SUCCESS?
         BZ    LVDSDONE            YES, CONTINUE PROCESSING SELECTIONS
         STC   R15,DOUBLE          SAVE RETURN CODE
         MVC   MSG+2(20),=CL20'CATALOG RETURN CODE='
         UNPK  MSG+22(3),DOUBLE(2)
         TR    MSG+22(2),LEVHEX-C'0'
         OI    STATUS7,$7BELL      REQUEST AUDIBLE ALARM
         ST    R0,DOUBLE           YES, SAVE REASON CODE
         MVC   MSG+24(8),=CL8' REASON='
         UNPK  MSG+32(3),DOUBLE(2)
         TR    MSG+32(2),LEVHEX-C'0'
         MVI   MSG+34,C' '
         LA    R14,32
         STH   R14,MSG             SET MESSAGE LENGTH
         B     LVDSFAIL
         SPACE
************************************************************
*                                                          *
*         ALLOCATE (CREATE) A NEW DATA SET                 *
*                                                          *
************************************************************
         SPACE
LEVALCDS CLI   LVATYP,CTGTALIN     NON-VSAM DATA SET?
         BE    LEVDOALC            YES
         CLI   LVATYP,C'@'         VTOC ENTRY?
         BNE   LVDSNNVS            NO, DON'T LIKE IT
         CLC   =C'VS',LVAORG       VSAM DATA SET?
         BE    LVDSNNVS            YES, DON'T LIKE IT
LEVDOALC TM    LVAFLG,$LFOBT       GOT VTOC ENTRY?
         BZ    LVDSNOV             NO, CAN'T COPY ATTRIBUTES
         MVC   LEVDSATR,0(R3)      COPY THE ENTRY TO MODEL
         LA    R1,LEVDSATR         POINT TO MODEL DATA
         L     R15,=A(REVCREAT)    POINT TO ROUTINE ENTRY POINT
         BASR  R14,R15             PERFORM DATA SET CREATION
         XC    LVLSTINF,LVLSTINF   RETAIN UPDATED ATTRIBUTES
         CLI   MSG,172             DATA SET CREATED?
         BE    LEVCDLP2            YES, CONTINUE PROCESSING SELECTIONS
         MVI   LVALST,0            CLEAR LAST ACTION CODE
         B     LEVCDLP2            CONTINUE PROCESSING SELECTIONS
         SPACE
************************************************************
*                                                          *
*         PERFORM COMPRESS BY CONDENSE                     *
*                                                          *
************************************************************
*                                                          *
*        CONDENSE - A COPY-OUT AND COPY-BACK COMPRESS      *
*        AS OPPOSED TO A COMPRESS-IN-PLACE.  THE           *
*        ADVANTAGE OF SUCH A PROCESS IS THAT IF THE        *
*        COPY-BACK PROCESS FAILS THE CONTENTS OF THE       *
*        PDS ARE PRESERVED IN THE CONDENSE HOLDING FILE.   *
*        THE MAIN DISADVANTAGES ARE THAT MORE DISK SPACE   *
*        IS USED BY THE PROCESS, AND IT TAKES LONGER.      *
*        THE CONDENSE METHOD WAS CHOSEN BECAUSE USING      *
*        IEBCOPY REQUIRES APF AUTHORIZATION, AND IT IS     *
*        SIMPLER TO IMPLEMENT THAN COMPRESS-IN-PLACE.      *
*                                                          *
************************************************************
         SPACE
*         BUILD CONDENSE HOLD FILE DATA SET NAME
         SPACE
LVDSCOND TM    DS1DSORG,DS1DSGPO   PARTITIONED DATA SET?
         BNO   LVDSNOPO            NO, CANNOT COMPRESS
         TM    DS1SMSFG,DS1PDSE    PDSE?
         BO    LVDSNOPO            YES, CANNOT COMPRESS
         NI    STATUS11,255-$11LV  RELINQUISH CONTROL
         L     R15,=A(REVCOND)     POINT TO CONDENSE ROUTINE
         BASR  R14,R15             INVOKE IT
         MVI   STATUS11,$11LV      BACK IN CONTROL
         LTR   R15,R15             SUCCESS?
         BZ    LVDSBACK            YES, GO DEALLOCATE COMPRESSED PDS
         B     LVDSFAIL            NO, GO DEALLOCATE THE PDS ANYWAY
         SPACE
         DROP  R3                  LVAENT
         SPACE
************************************************************
*                                                          *
*         LOCATE A DISPLAY LINE                            *
*                                                          *
************************************************************
         SPACE
LEVELIST TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BZ    LEVMISOP            NO, MISSING OPERAND
         TM    OPD1+6,QUOTED       IS OPERAND QUOTED?
         BO    LEVBADOP            YES, INVALID
         TM    OPD2+6,PRESENT      ARE THERE TOO MANY OPERANDS?
         BO    LEV2MANY            YES, INVALID
         LH    R1,OPD1+4           GET LENGTH
         BCTR  R1,0                GET LENGTH CODE
         L     R14,OPD1            GET ADDRESS OF DATA
         L     R3,LVARAYAD         POINT TO FIRST ENTRY
         TM    OPD1+6,NUMERIC      IS FIRST OPERAND NUMERIC?
         BNO   LVLOCCMD            YES, NOT A RECORD NUMBER
         SPACE
         CH    R1,=H'9'            IS LENGTH MORE THAN 9?
         BNL   LEVBADOP            YES, ERROR
         EX    R1,LEVELPAK
         CVB   R1,DOUBLE           GET RECORD NUMBER TO LOCATE TO
         LTR   R1,R1               IS THE NUMBER ZERO?
         BZ    LEVLIST#            YES, LET IT MEAN "TOP"
         BCTR  R1,0                MAKE NUMBER RELATIVE TO ZERO
         B     LEVLIST#            GO SHOW THE REQUESTED LINE
         SPACE
LEVELPAK PACK  DOUBLE,0(0,R14)     <<< EXECUTED >>>
         USING LVAENT,R3
LEVELCLC CLC   0(0,R2),0(R14)      <<< EXECUTED >>>
         SPACE
LVLOCCMD LA    R15,LVLOCTBL        POINT TO "OPERAND MEANING" TABLE
LVLOCLP1 CLI   0(R15),X'FF'        REACHED END OF TABLE?
         BE    LEVBADOP            YES, ERROR
         CLC   LEVORDER,0(R15)     FOUND ENTRY FOR CURRENT SORT ORDER?
         BE    LVLORDOK            YES
         LA    R15,4(,R15)         NO, POINT TO NEXT ENTRY
         B     LVLOCLP1            GO CHECK IT
         SPACE
LVLORDOK CLM   R1,1,1(R15)         IS LOCATE STRING TOO LONG?
         BNL   LEVBADOP            YES, ERROR
         LH    R15,2(,R15)         NO, GET THE LOCATE FIELD OFFSET
         SPACE
         TM    STATUS13,$13DESC    IN DESCENDING ORDER?
         BO    LEVLOCDN            YES
         SPACE
LEVLOCUP C     R3,LVAENDAD         REACHED END OF ARRAY?
         BNL   LEVLIST1            YES, SO SHOW THAT
         LA    R2,0(R15,R3)        NO, POINT TO LOCATE FIELD
         EX    R1,LEVELCLC         DOWN TO REQUESTED DATA?
         BNL   LEVLIST1            YES, LIST THIS ONE
         LA    R3,LVAEND           NO, POINT TO NEXT ENTRY
         B     LEVLOCUP            GO SEE IF AT REQUESTED LOCATION
         SPACE
LEVLOCDN C     R3,LVAENDAD         REACHED END OF ARRAY?
         BNL   LEVLIST1            YES, SO SHOW THAT
         LA    R2,0(R15,R3)        NO, POINT TO LOCATE FIELD
         EX    R1,LEVELCLC         DOWN TO REQUESTED DATA?
         BNH   LEVLIST1            YES, LIST THIS ONE
         LA    R3,LVAEND           NO, POINT TO NEXT ENTRY
         B     LEVLOCDN            GO SEE IF AT REQUESTED LOCATION
         SPACE
LVLOCTBL DC    C'D',AL1(L'LVADSN),Y(LVADSN-LVAENT)
         DC    C'O',AL1(L'LVAORG),Y(LVAORG-LVAENT)
         DC    C'F',AL1(L'LVARFM),Y(LVARFM-LVAENT)
         DC    C'V',AL1(L'LVAVOL),Y(LVAVOL-LVAENT)
         DC    H'-1'               END OF TABLE
         SPACE
************************************************************
*                                                          *
*         FIND A DISPLAY LINE BY DSNAME STRING             *
*                                                          *
************************************************************
         SPACE
LEVRFIND TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BO    LEV2MANY            YES, TOO MANY
         B     LEVIFIND            NO, GO PERFORM A REPEAT FIND
         SPACE
LEVFIND  TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BZ    LEVMISOP            NO, MISSING OPERAND
         TM    OPD1+6,QUOTED       IS FIRST OPERAND QUOTED?
         BO    LEVBADOP            YES, INVALID
         TM    OPD3+6,PRESENT      ARE THERE TOO MANY OPERANDS?
         BO    LEV2MANY            YES, INVALID
         CLI   OPD1+5,44           IS THE SEARCH TEXT TOO LONG?
         BH    LEVBADOP            YES, INVALID
         TM    OPD2+6,PRESENT      IS THERE A SECOND OPERAND?
         BNO   LEVFIND0            NO, SEARCH FORWARD FROM HERE
         SPACE
         TM    OPD2+6,QUOTED       IS SECOND OPERAND QUOTED?
         BO    LEVBADOP            YES, INVALID
         L     R14,OPD2            POINT TO THE SECOND OPERAND
         CLI   OPD2+5,4            DOES IT HAVE 4 CHARACERS?
         BE    LEVFIND4            YES
         CLI   OPD2+5,5            DOES IT HAVE 5 CHARACERS?
         BNE   LEVBADOP            NO, INVALID
         CLC   =C'FIRST',0(R14)    IS IT 'FIRST'?
         BNE   LEVBADOP            NO, INVALID
         MVI   LVFNDSW,FTOP        YES
         B     LEVFIND1            GO DEAL WITH THE FIRST OPERAND
LEVFIND4 CLC   =C'NEXT',0(R14)     IS IT 'NEXT'?
         BNE   LEVFINDP            NO
LEVFIND0 MVI   LVFNDSW,0           YES
         B     LEVFIND1            GO DEAL WITH THE FIRST OPERAND
LEVFINDP CLC   =C'PREV',0(R14)     IS IT 'PREV'?
         BNE   LEVFINDL            NO
         MVI   LVFNDSW,FBAK        YES
         B     LEVFIND1            GO DEAL WITH THE FIRST OPERAND
LEVFINDL CLC   =C'LAST',0(R14)     IS IT 'LAST'?
         BNE   LEVBADOP            NO, INVALID
         MVI   LVFNDSW,FEND+FBAK   YES
*        B     LEVFIND1            GO DEAL WITH THE FIRST OPERAND
         SPACE
LEVFIND1 L     R14,OPD1            POINT TO THE FIRST OPERAND
         CLI   OPD1+5,1            SINGLE-CHARACTER OPERAND?
         BNE   LEVFNDIT            NO
         CLI   0(R14),C'*'         IS IT AN ASTERISK?
         BE    LEVIFIND            YES, SEARCH FOR SAME STRING AGAIN
LEVFNDIT LH    R1,OPD1+4           GET LENGTH
         BCTR  R1,0                GET LENGTH CODE
         STH   R1,LVSTRNG          SAVE STRING LENGTH CODE
         EX    R1,LEVFNDLD         LOAD STRING TO SEARCH FOR
         B     LVDOFIND            GO PERFORM SEARCH
         SPACE
LEVIFIND LH    R1,LVSTRNG          GET STRING LENGTH CODE
         LTR   R1,R1               SEARCHED BEFORE?
         BNM   LVDOFIND            YES, SEARCH FOR SAME THING AGAIN
         ICM   R0,15,LEVSCNGD      ANY MATCHED LIBRARIES?
         BNZ   LVDOFIND            YES, SEARCH FOR THE NEXT ONE
         MVI   MSG,33              NO, STRING NOT SPECIFIED
         B     LVFMTDON            GO SHOW ERROR MESSAGE
         SPACE
LVDOFIND L     R3,LVATOPAD         POINT TO TOP ENTRY ON SHOW
         LH    R15,CSRLOCN         GET CURSOR SCREEN ADDRESS
         LTR   R15,R15             IN DATA PART OF SCREEN?
         BZ    LVFNDCNT            NO, CONTINUE
         SR    R14,R14             YES, PREPARE FOR DIVIDE
         D     R14,SCRNCOLS        GET CURSOR X AND Y COORDINATES
         SH    R15,=H'3'           TAKE HEADINGS INTO ACCOUNT
         LA    R0,LVASIZ           GET ENTRY SIZE
         MR    R14,R0              GET SIZE OF ENTRIES TO SKIP
         AR    R3,R15              POINT TO "CURRENT" ENTRY
         C     R3,LVAENDAD         BEYOND END OF ARRAY?
         BNH   LVFNDCNT            NO, CONTINUE
         L     R3,LVAENDAD         YES, BACK UP TO ARRAY END
         SPACE
LVFNDCNT TM    LVFNDSW,FEND        SEARCHING FROM THE BOTTOM?
         BO    LVFNDLST            YES
         TM    LVFNDSW,FBAK        SEARCHING IN BACKWARDS DIRECTION?
         BO    LVFNDBAK            YES
         TM    LVFNDSW,FTOP        SEARCHING FROM THE TOP?
         BO    LVFDOTOP            YES
         L     R14,OPD0            NO, POINT TO COMMAND NAME
         CLI   0(R14),C'F'         REPEAT FIND?
         BNE   LVFTOPOK            YES, SKIP CURRENT TOP LINE
         B     LVFCHECK            NO, INCLUDE CURRENT TOP IN SEARCH
LVFDOTOP L     R3,LVARAYAD         POINT TO TOP ENTRY
         SH    R3,LVASIZHW         POINT TO BEFORE TOP ENTRY
         NI    LVFNDSW,255-FTOP    RESET 'FIRST' FLAG
LVFTOPOK AH    R3,LVASIZHW         POINT TO THE NEXT ENTRY TO SEARCH
LVFCHECK C     R3,LVAENDAD         GONE BEYOND END OF ARRAY?
         BL    LVFNDSCH            NO, CONTINUE SEARCH
         MVI   MSG,32              BOTTOM OF DATA REACHED
         OI    LVFNDSW,FTOP        SEARCH FROM TOP OF DATA NEXT TIME
         B     LVFMTDON            GO SHOW ERROR MESSAGE
         SPACE
LVFNDSCH LA    R14,LVADSN          POINT TO THE DATA SET NAME
         LA    R0,L'LVADSN         GET ITS LENGTH
         SR    R0,R1               GET THE SEARCH COUNT PER ENTRY
         LTR   R1,R1               LOOKING FOR A STRING?
         BNM   LVFINDLP            YES, CONTINUE
         TM    LVAFLG,$SCAN        DATA SET MATCHED IN A SCAN?
         BO    LEVFOUND            YES, LOCATE TO IT
         B     LVFTOPOK            NO, CONTINUE FORWARDS
LVFINDLP EX    R1,LEVFCMPR         FOUND THE STRING?
         BE    LEVFOUND            YES
         LA    R14,1(,R14)         NO, POINT TO THE NEXT BYTE
         BCT   R0,LVFINDLP         SEARCH THE WHOLE FIELD
         TM    LVFNDSW,FBAK        SEARCHING IN BACKWARDS DIRECTION?
         BNO   LVFTOPOK            NO, CONTINUE FORWARDS
         SPACE
LVFNDBAK SH    R3,LVASIZHW         POINT TO THE PREVIOUS ENTRY
         C     R3,LVARAYAD         GONE BEYOND START OF ARRAY?
         BNL   LVFNDSCH            NO, CONTINUE SEARCH
         MVI   MSG,44              TOP OF DATA REACHED
         OI    LVFNDSW,FEND        SEARCH FROM BOTTOM OF DATA NEXT TIME
         B     LVFMTDON            GO SHOW ERROR MESSAGE
         SPACE
LVFNDLST L     R3,LVAENDAD         POINT PAST LAST ARRAY ENTRY
         NI    LVFNDSW,255-FEND    RESET 'LAST' FLAG
         B     LVFNDBAK            BEGIN SEARCH
         SPACE
LEVFOUND ST    R3,LVATOPAD         SAVE NEW TOP ENTRY ADDRESS
         B     LEVLSAME            GO DISPLAY NEW LOCATION
         SPACE
LEVFNDLD MVC   LVSTRNG+2(0),0(R14) <<< EXECUTED >>>
LEVFCMPR CLC   LVSTRNG+2(0),0(R14) <<< EXECUTED >>>
         SPACE
************************************************************
*                                                          *
*         LIST A CATALOG ENTRY                             *
*                                                          *
************************************************************
         SPACE
LVLSTCAT MVI   CMDAREA,C' '        INITIALIZE COMMAND BUFFER
         MVC   CMDAREA+1(L'CMDAREA-1),CMDAREA
         MVC   CMDAREA(14),=CL14'TSO %REVLISTC '
         MVC   CMDAREA+14(44),LVADSN
         LH    R1,LVADSNL
         STH   R1,DSNAIM           PREPARE DISPLAY HEADING
         MVC   DSNAIM+2(44),LVADSN
         MVC   $DSNAME(46),DSNAIM
         LA    R1,13(,R1)
         CLI   LVATYP,CTGTUCAT     USERCATALOG?
         BNE   LEVLCRDY            NO
         LA    R15,CMDAREA+1(R1)   YES
         MVC   0(8,R15),=CL8' USERCAT'
         LA    R1,8(,R1)
LEVLCRDY ST    R1,CMDLEN           SET COMMAND LENGTH CODE
         OI    STATUS4,$4CMD       TELL REVCOMM TO SKIP TERMINAL I/O
         OI    STATUS11,$11ST      STAY IN FULLSCREEN MODE THROUGHOUT
         L     R15,=A(REVCOMM)     NO PARAMETER LIST PASSED
         BASR  R14,R15             PROCESS COMMAND STRING
         NI    STATUS11,255-$11ST  RESET FLAG
         ICM   R0,15,DIVORG        IS DIV AREA PRESENT?
         BZ    LEVCFAIL            NO, PROCESS FAILURE
         SR    R1,R1               REGISTER "FILE" DATA COMPLETE
         BCTR  R1,0                FLAG EOF WITH -1
         SR    R2,R2
         ST    R2,SAVKEYLE         PROCESS AS IF KEYLEN=0
         LA    R0,4                GET ENTRY CODE (RECORD STORE)
         L     R15,=A(REVDIV)      LOAD REVDIV ENTRY POINT
         BASR  R14,R15             CALL IT
         MVC   MAXPOINT,COUNT      REMEMBER READ RECORD COUNT
         ST    R2,COUNT            SHOW FROM FIRST RECORD
         OI    STATUS13,$13_L      FLAG NO FILE I/O - RESET BY REVIEW2
         L     R15,=A(SEQDCB)      POINT TO DCB TEMPLATE
         MVC   DYNDCBW,0(R15)      LOAD DCB TEMPLATE
         LA    R4,DYNDCBW
         USING IHADCB,R4
         MVC   DSORG,DCBDSORG      PROCESS AS IF DSORG=PS
         MVI   DCBRECFM,DCBRECU    PROCESS AS IF RECFM=U
         LA    R0,120
         STH   R0,DCBBLKSI         PROCESS AS IF BLKSIZE=120
         ST    R0,SAVBLKSI         PROCESS AS IF BLKSIZE=120
         B     LVDSBRWS            GO BROWSE THE LISTCAT OUTPUT
         DROP  R4                  IHADCB
         SPACE
************************************************************
*                                                          *
*         RENAME A NON-VSAM DATA SET                       *
*                                                          *
************************************************************
         SPACE
LVDSRENM LA    R1,$DDNAME          POINT TO THE DDNAME
         L     R15,=A(REVDDLOC)    POINT TO TIOT ENTRY LOCATE ROUTINE
         BASR  R14,R15             LOCATE THE TIOT ENTRY
         ICM   R15,7,17(R15)       GET THE UCB ADDRESS
         ST    R15,$UCBAD          SAVE IT
         MVC   $VOLSER,28(R15)     ACQUIRE THE VOLUME SERIAL NUMBER
         L     R15,=A(REVRENAM)    POINT TO RENAME ROUTINE
         BASR  R14,R15             INVOKE IT
         CLI   MSG,29              REQUEST CANCELLED?
         BNE   *+8                 NO, RETAIN LAST ACTION CODE
         MVI   LVALST,0            YES, CLEAR LAST ACTION CODE
         LTR   R15,R15             SUCCESS?
         BNZ   LVDSFAIL            NO, FLAG FAILURE AND FREE THE FILE
         MVC   LVADSN,$DSNAME+2    UPDATE THE DATA SET NAME
         MVC   LVADSNL,$DSNAME     UPDATE THE DATA SET NAME LENGTH
         B     LVDSDONE            FREE IF NECESSARY AND CONTINUE
         SPACE
         DROP  R3                  LVAENT
         SPACE
************************************************************
*                                                          *
*         SORT DATA SET LIST                               *
*                                                          *
************************************************************
         SPACE
LEVSORT  BAS   R14,LVDETACH        ENSURE ALL DATA IS IN
LEVSORTD MVI   DOUBLE,C'D'         PREPARE FOR DEFAULT SORT
         MVI   DOUBLE+2,C'D'       PREPARE FOR DEFAULT SORT
         MVI   MSG,62              SORTED BY NAME
         TM    OPD1+6,PRESENT      ANY OPERAND SPECIFIED?
         BNO   LVSORTIT            NO, GO SORT BY NAME
         TM    OPD3+6,PRESENT      ARE THERE TOO MANY OPERANDS?
         BO    LEV2MANY            YES, INVALID
         MVI   MSG,0               NO, CLEAR MESSAGE
         L     R1,OPD1             POINT TO IT
         CLI   0(R1),C'N'          'N' FOR NAME?
         BNE   *+8                 NO
         MVI   0(R1),C'D'          YES, CHANGE IT TO 'D'
         CLI   0(R1),C'%'          PERCENTAGE?
         BNE   *+8                 NO
         MVI   0(R1),C'P'          YES, CHANGE IT TO 'P'
LEVSORTX MVC   DOUBLE(1),0(R1)     COPY IT
         MVC   DOUBLE+2(1),DOUBLE  COPY IT
         CLI   0(R1),X'C0'         CHARACTER IN TRANSLATE TABLE RANGE?
         BL    LEVBADOP            NO
LVSORTIT TR    DOUBLE(1),LVSRTTBL-X'C0'
         SR    R14,R14             CLEAR FOR INSERT
         ICM   R14,1,DOUBLE        LOAD THE CODE
         BZ    LEVBADOP            UNRECOGNIZED CODE
         SLA   R14,2               CONVERT INDEX TO OFFSET
         LA    R14,LVSRTVEC-4(R14) POINT TO SORT ENTRY
         SPACE
         MVC   DOUBLE+1(1),3(R14)  SET DEFAULT SORT ORDER
         TM    OPD2+6,PRESENT      ANY SORT ORDER SPECIFIED?
         BNO   LVORDROK            NO, USE DEFAULT ORDER FOR TYPE
         MVI   DOUBLE+1,0          YES, CLEAR A FLAG BYTE
         L     R15,OPD2            POINT TO IT OPERAND
         CLI   0(R15),C'A'         ASCENDING ORDER?
         BE    LVORDROK            YES
         CLI   0(R15),C'D'         DESCENDING ORDER?
         BNE   LEVBADOP            NO, INVALID OPERAND
         OI    DOUBLE+1,$13DESC    YES, SET FLAG
LVORDROK SR    R0,R0               CLEAR FOR INSERT
         IC    R0,2(,R14)          GET SORT KEY LENGTH
         ST    R0,#MG_KLEN         SET SORT KEY LENGTH
         LH    R0,0(,R14)          GET SORT KEY OFFSET
         ST    R0,#MG_KOFF         SET SORT KEY OFFSET
         LA    R0,LVASIZ           GET RECORD LENGTH
         ST    R0,#MG_RLEN         SET RECORD LENGTH
         LM    R0,R1,LVARAYSZ      GET ARRAY DETAILS
         AR    R0,R1               POINT PAST ARRAY
         ST    R1,CALLPARM         POINT TO DATA TO SORT
         ST    R0,CALLPARM+4       POINT PAST DATA TO SORT
         L     R0,LVARAYSZ         GET THE ARRAY SIZE AGAIN
         MVI   GETMNTRC,41         TRACK GETMAIN IN CASE OF FAILURE
         GETMAIN RC,LV=(0),LOC=(31,64)
         LTR   R15,R15             GOT STORAGE FOR THE ARRAY?
         BZ    LVDOSORT            YES, PROCEED WITHN SORT
         MVI   MSG,123             REQUEST ABORTED - REGION FULL
         B     LEVLSAME            GO SHOW THE MESSAGE
LVDOSORT NI    STATUS13,255-$13DESC
         OC    STATUS13,DOUBLE+1   SET ASCENDING/DESCENDING STATUS
         MVC   LEVORDER,DOUBLE+2   REMEMBER NEW SORT ORDER
         ST    R1,CALLPARM+8       SAVE ARRAY COPY AREA ADDRESS
         ST    R1,0(R13)           SAVE ADDRESS FOR FREEMAIN LATER
         A     R1,LVARAYSZ         POINT PAST IT
         ST    R1,CALLPARM+12      SAVE THIS ADDRESS AS WELL
         L     R15,=A(REVMERGE)    POINT TO SORT ROUTINE
         BASR  R14,R15             PERFORM SORT
         L     R1,0(,R13)          POINT TO ARRAY COPY AREA
         L     R0,LVARAYSZ         GET ITS SIZE
         FREEMAIN RU,LV=(0),A=(1)  FREE IT
         XC    0(4,R13),0(R13)     CLEAR THE SAVED ADDRESS
         L     R0,LEVLROWS         GET THE ARRAY ENTRY COUNT
         L     R3,LVAENDAD         POINT PAST ARRAY
         USING LVAENT,R3
LVSRTREN SH    R3,LVASIZHW         POINT TO PREVIOUS ROW
         ST    R0,LVASEQ           SET NEW ROW SEQUENCE NUMBER
         BCT   R0,LVSRTREN         RENUMBER ALL ARRAY ROWS
         CLC   LVTOPACT,LVAENDAD   ANY ACTIONS PENDING?
         BL    LEVTOP              NO, GO SHOW THE LIST FROM THE TOP
         ST    R3,LVTOPACT         YES, RESCAN ARRAY FOR ACTIONS
         B     LEVTOP              GO SHOW THE LIST FROM THE TOP
         DROP  R3                  LVAENT
         SPACE
LVSRTTBL DC    0F'0'               SORT TABLE
         DC    X'00,01,02,03,04,05,06,00'      X'C0' - X'C7'
         DC    X'00,00,00,00,00,00,00,00'      X'C8' - X'CF'
         DC    X'00,00,00,07,00,00,08,09'      X'D0' - X'D7'
         DC    X'00,0A,00,00,00,00,00,00'      X'D8' - X'DF'
         DC    X'00,00,00,00,0B,0C,00,0D'      X'E0' - X'E7'
         DC    X'00,00,00,00,00,00,00,00'      X'E8' - X'EF'
         DC    X'00,00,00,00,00,00,00,00'      X'F0' - X'F7'
         DC    X'00,00,00,00,00,00,00,00'      X'F8' - X'FF'
LVSRTVEC DC    0F'0'               SORT VECTORS
*  THE LENGTH OF THE FIELD BEING SORTED IS EXTENDED WHERE
*  FEASIBLE FOR NON-UNIQUE ITEMS TO STABLIZE THE ORDER
*  PRODUCED BY REPEATED ISSUINGS OF THE SAME SORT COMMAND.
 DC Y(LVAALOC-LVAENT),AL1(LVA0L),AL1($13DESC)                 1 - A
 DC Y(LVABLK-LVAENT),AL1(L'LVABLK+LVA0L),AL1(0)               2 - B
 DC Y(LVACRE-LVAENT),AL1(L'LVACRE*3),AL1($13DESC)             3 - C
 DC Y(LVADSN-LVAENT),AL1(L'LVADSN+L'LVALOC),AL1(0)            4 - D
 DC Y(LVAEXP-LVAENT),AL1(L'LVAEXP+1+1),AL1($13DESC)           5 - E
 DC Y(LVARFM-LVAENT),AL1(L'LVARFM+L'LVALRL+L'LVABLK),AL1(0)   6 - F
 DC Y(LVALRL-LVAENT),AL1(L'LVALRL+L'LVABLK+LVA0L),AL1(0)      7 - L
 DC Y(LVAORG-LVAENT),AL1(L'LVAORG+5+2+2),AL1(0)               8 - O
 DC Y(LVAPCT-LVAENT),AL1(L'LVAPCT),AL1($13DESC)               9 - P
 DC Y(LVAREF-LVAENT),AL1(L'LVAREF),AL1($13DESC)               A - R
 DC Y(LVAUSED-LVAENT),AL1(LVA0L-L'LVAALOC),AL1($13DESC)       B - U
 DC Y(LVAVOL-LVAENT),AL1(L'LVAVOL),AL1(0)                     C - V
 DC Y(LVAEXT-LVAENT),AL1(L'LVAEXT+5+5),AL1($13DESC)           D - X
         SPACE
**********************************************************************
*                                                          *         *
*         DATA SET SEARCH REQUEST INITIALIZATION           *  R48.5  *
*                                                          * NOV2018 *
**********************************************************************
         SPACE
LEVDSRCH OI    STATUS17,$17SCH     REQUEST SEARCH SET UP
         XC    OPD1(OPDLL-8),OPD1  CLEAR ALL COMMAND OPERANDS
         NI    MODE,255-MD_ASCII   ENSURE ASCII IS OFF
         MVC   LEVFSTAT,FINDSW     SAVE FIND STATUS
         L     R15,=A(REVSRCH)     POINT TO SEARCH SET UP ROUTINE
         BASR  R14,R15             INVOKE IT
         NI    STATUS17,255-$17SCH RESET SEARCH SET UP REQUEST FLAG
         OI    STATUS17,$17S34     FLAG DATA SERACH NOW ACTIVE
         CLI   REPLY,ENTERAID      ENTER AID PRESENT?
         BE    LEVRESET            YES, PROCEED WITH SEARCH
         NI    STATUS17,255-$17SCN NO, CLEAR ALL DATA SET SCAN FLAGS
         MVI   MSG,86              SEARCH CANCELLED
         MVC   FINDSW(L'LEVFSTAT),LEVFSTAT
         B     LEVLSAME            READY FOR TERMINAL I/O CYCLE
         SPACE
**********************************************************************
*                                                          *         *
*         MEMBER NAME PATTERN SCAN REQUEST VALIDATION      *  R48.4  *
*                                                          * SEP2018 *
**********************************************************************
         SPACE
LEVPATEN TM    OPD1+6,PRESENT      ANY OPERAND SPECIFIED?
         BNO   LEVMISOP            NO, REQUIRED OPERAND MISSING
         TM    OPD2+6,PRESENT      TOO MANY OPERANDS?
         BO    LEV2MANY            YES
         CLI   OPD1+5,0            NULL STRING OPERAND?
         BE    LEVBADOP            YES, INVALID
         LH    R2,OPD1+4           GET THE OPERAND LENGTH
         LA    R0,8
         CLR   R0,R2               OPERAND LENGTH MORE THAN 8?
         BL    LEVBADOP            YES, INVALID
         L     R1,OPD1             POINT TO MASK NAME OPERAND
         MVC   LEVMEMSK,0(R1)      COPY MASK TO HOLD AREA
         OI    STATUS17,$17P34     FLAG MEMBER SEARCH NOW ACTIVE
         SPACE
************************************************************
*                                                          *
*         RESET DATA SET LIST ENTRIES                      *
*                                                          *
************************************************************
         SPACE
         USING LVAENT,R3
LEVRESET L     R3,LVARAYAD         POINT TO THE DATA SET ENTRY ARRAY
LEVRESLP MVI   LVAACT,QUOTE        CLEAR COMMAND CODE PENDING
         MVI   LVALST,0            CLEAR COMMAND CODE COMPLETE
         NI    LVAFLG,255-$FAIL-$SCAN    RESET PROCESS STATUS
         LA    R3,LVAEND           POINT TO THE NEXT ENTRY
         C     R3,LVAENDAD         REACHED THE ARRAY END?
         BL    LEVRESLP            NO, GO RESET NEXT ENTRY
         ST    R3,LVTOPACT         YES
         SR    R0,R0
         ST    R0,LVNUMACT         RESET PENDING ACTION COUNT
         TM    STATUS17,$17SCN     PART OF DATA SET SCAN SET UP?
         BZ    LEVLSAME            NO, RESET COMMAND SO REDISPLAY DATA
         DROP  R3                  LVAENT
         SPACE
**********************************************************************
*                                                          *         *
*         SCAN MEMBER NAMES FOR PATTERN MATCHES            *  R48.4  *
*                                                          * SEP2018 *
**********************************************************************
         SPACE
         ST    R0,LEVSCNCT         RESET DATA SET SCAN COUNT
         ST    R0,LEVSCNGD         RESET DATA SET MATCH COUNT
         ST    R0,LVSCNERR         RESET DATA SET ERROR COUNT
         L     R3,LVARAYAD         POINT TO THE DATA SET ENTRY ARRAY
         MVC   LEVFSTAT,FINDSW     SAVE INPUT TO REVSRCH IF SRCHFOR
         USING LVAENT,R3
LEVSCNLP ST    R3,LVSCNCSR         SAVE CURRENT ENTRY ADDRESS
         NI    STATUS17,255-$17PAT RESET STATUS FOR NEXT LIBRARY
         TM    STATUS4,$4ATTN      ATTENTION INTERRUPT?
         BO    LEVLATTN            YES, REQUEST CANCELLED
         TM    STATUS17,$17P34     SCANNING FOR MEMBER NAMES?
         BO    LEVLPATN            YES, GO SELECT LIBRARIES TO SCAN
         CLI   LVAORG,C'V'         DSORG=VS?
         BE    LEVSCNVS            YES, DIVERGE
         ICM   R0,3,LVABLK         GOT A BLOCK SIZE?
         BZ    LEVSCNXT            NO, DON'T SCAN IT
         CLI   LVARFM,C'*'         GOT A RECORD FORMAT?
         BNH   LEVSCNXT            NO, DON'T SCAN IT
         MVI   LVALST,C'$'         FLAG SCANNING ACTION
         CLI   LVAORG,C'P'         DSORG=PS/PO/PSU/POU?
         BE    LEVSCNDS            YES, SEARCH IT
         CLI   LVAORG+1,C'A'       DSORG=DA/DAU/CAT?
         BE    LEVSCNDS            YES, SEARCH IT
         CLI   LVATYP,C'C'         VSAM CLUSTER?
         BE    LEVSCNDS            YES, SEARCH IT
LEVSCNNT MVI   LVALST,0            RESET ACTION INDICATOR
         LA    R3,LVAEND           POINT TO THE NEXT ENTRY
         C     R3,LVAENDAD         REACHED THE ARRAY END?
         BL    LEVSCNLP            NO, GO PROCESS NEXT ENTRY
         L     R0,LEVSCNGD         YES, GET DATA SET MATCH COUNT
         B     LEVSCND1            ENSURE FINAL RESULTS ON SHOW
LEVSCNVS CLI   LVARFM,C'*'         GOT A RECORD FORMAT?
         BNE   LEVSCNNT            YES, DO NOT PHYSICAL COMPONENT
         MVI   LVALST,C'$'         NO, FLAG SCANNING ACTION
         B     LEVSCNDS            PROBABLY CLUSTER SO SEARCH IT
LEVLPATN CLI   LVAORG+1,C'O'       DSORG=PO?
         BNE   LEVSCNXT            NO
         MVC   PUTLINS+4(8),LEVMEMSK
         OI    STATUS17,$17PAT     FLAG MEMBER NAME MASK SET
         MVI   LVALST,C'*'         FLAG SCANNING ACTION
LEVSCNDS ST    R3,LVLSTACT         SAVE ENTRY-BEING-SCANNED ADDRESS
         LA    R0,1
         A     R0,LEVSCNCT         INCREMENT DATA SET SCAN COUNT
         ST    R0,LEVSCNCT         SAVE UPDATED COUNTER
         MVC   $DSNAME(2),LVADSNL  SET ACTIVE DATA SET
         MVC   $DSNAME+2(44),LVADSN
         XC    $UCBAD,$UCBAD
         TM    STATUS17,$17S34     PERFORMING A DATA SEARCH?
         BNO   LVDSALOC            NO, GO ALLOCATE THE DATA SET
         OI    MODE,MD_OFFLD       YES, SET OFFLOAD MODE
         OI    FINDSW2,FALL        EMPLOY "FIND ALL" LOGIC
         B     LVDSALOC            GO ALLOCATE THE DATA SET
*   $17P34 OR $17S34 IS SET SO CONTROL
*   RETURNS HERE AFTER DATA SET PROCESSING
LEVSCNDN NI    MODE,255-MD_OFFLD   ENSURE SEARCH FLAGS ARE RESET
         MVC   FINDSW(L'LEVFSTAT),LEVFSTAT
         NI    FINDSW2,255-FALL    RESTORE FIND STATUS
         L     R0,LEVSCNGD         GET DATA SET MATCH COUNT
         TM    LVAFLG,$FAIL        ANY PROBLEMS ENCOUNTERED?
         BO    LEVSCND1            YES, SO IT WAS NOT MATCHED
         TM    STATUS17,$17PAT     ANY MEMBER NAME MATCH?
         BNO   LEVSCND1            NO, BUT STILL DONE ONE
         OI    LVAFLG,$SCAN        YES, SET MATCHED DATA SET FLAG
         A     R0,=F'1'            INCREMENT DATA SET FOUND COUNT
         ST    R0,LEVSCNGD         SAVE UPDATED COUNTER
LEVSCND1 CVD   R0,DOUBLE           GET DECIMAL DATA SET MATCH COUNT
         MVC   MSG+2(9),ED7DASHL   LOAD EDIT MASK PLUS BLANK
         ED    MSG+2(8),DOUBLE+4   FORMAT NUMBER
         L     R3,LVSCNCSR         RESTORE CURRENT ENTRY POINTER
         LA    R1,MSG+2+9          POINT PAST TRAILING BLANK
         TM    LVAFLG,$FAIL        ANY PROBLEMS ENCOUNTERED?
         BNO   LEVSCN#1            NO, CONTINUE
         LA    R0,1                YES
         A     R0,LVSCNERR         AS GOOD A PLACE AS ANY TO
         ST    R0,LVSCNERR         INCREMENT THE ERROR COUNT
LEVSCN#1 CLI   MSG+2,C'-'          LEADING DASH?
         BNE   LEVSCN$1            NO, FIRST NUMBER NOW READY
         MVC   MSG+2(8),MSG+3      YES, SHUFFLE LEFT 1
         BCTR  R1,0                BACK UP 1
         B     LEVSCN#1            CONTINUE FORMATTING LOOP
LEVSCN$1 MVC   0(7,R1),=C'OUT OF '
         XC    0(6,R1),LEVBLNKS
         MVI   3(R1),C' '
         L     R0,LEVSCNCT         GET DATA SET SCAN COUNT
         CVD   R0,DOUBLE
         MVC   7(9,R1),ED7DASHL    LOAD EDIT MASK PLUS BLANK
         ED    7(8,R1),DOUBLE+4    FORMAT NUMBER
         LA    R2,7+9(,R1)         POINT PAST TRAILING BLANK
LEVSCN#2 CLI   7(R1),C'-'          LEADING DASH?
         BNE   LEVSCN$2            NO, SECOND NUMBER NOW READY
         MVC   7(8,R1),8(R1)       YES, SHUFFLE LEFT 1
         BCTR  R2,0                BACK UP 1
         B     LEVSCN#2            CONTINUE FORMATTING LOOP
LEVSCN$2 MVC   0(18,R2),=C'LIBRARIES MATCHED '
         TM    STATUS17,$17P34     SCANNING FOR MEMBER NAMES?
         BO    LEVSCN2A            YES, SO "LIBRARIES" IS CORRECT
         MVC   0(9,R2),=C'DATA SETS'
LEVSCN2A XC    0(8,R2),LEVBLNKS
         XI    8(R2),C' '
         XC    10(7,R2),LEVBLNKS
         LA    R2,17(,R2)          POINT PAST MESSAGE TEXT
         LA    R0,MSG+2            POINT TO MESSAGE TEXT
         SR    R2,R0               GET MESSAGE LENGTH
         STH   R2,MSG              SAVE IT
         MVC   PUTLINS+12(4),MSG   SAVE IT FOR LATER
         XC    LVLSTACT,LVLSTACT   CLEAR LAST PROCESSED ENTRY POINTER
         L     R2,LVATOPAD         POINT TO FIRST ENTRY ON SHOW
         C     R2,LVAENDAD         ANY ENTRIES ON SHOW?
         BNL   LEVSCNFS            NO, FULL UPDATE IS VERY ECONOMICAL
         TM    STATUS4,$4REFR      SCREEN CONTENTS OVERWRITTEN?
         BO    LEVSCNFS            YES, REPAINT SCREEN AFTER REVSRCH
         CLC   LEVSCNCT,=F'1'      FIRST STATUS UPDATE OF THIS SCAN?
         BE    LEVSCNFS            YES, UPDATE THE WHOLE SCREEN
         L     R2,LVASEQ-LVAENT(,R2)   GET TOP ROW NUMBER
         C     R2,LVASEQ           BEFORE TOP OF SCREEN?
         BH    LEVSCN2L            YES, SO ONLY UPDATE MESSAGE
         A     R2,SCRNLNES         ADD SCREEN LINES
         SH    R2,=H'4'            GET BOTTOM LINE ROW NUMBER
         C     R2,LVASEQ           AFTER BOTTOM OF SCREEN?
         BNL   LEVSCNFS            NO, ON SCREEN SO UPDATE IT ALL
LEVSCN2L OI    STATUS10,$102LN     REDUCE DATA STREAM TO TOP 2 LINES
LEVSCNFS OI    STATUS10,$10CDL     CONTROL DISPLAY LOCK FOR OUTPUT ONLY
         B     LEVLSAME            GO UPDATE THE SCREEN
*   $17P34 OR $17S34 IS SET SO CONTROL
*   RETURNS HERE AFTER UPDATING THE SCREEN
LEVSCNXT L     R3,LVSCNCSR         RESTORE CURRENT ENTRY POINTER
         LA    R3,LVAEND           POINT TO THE NEXT ENTRY
         C     R3,LVAENDAD         REACHED THE ARRAY END?
         BL    LEVSCNLP            NO, GO PROCESS NEXT ENTRY
         NI    STATUS17,255-$17SCN RESET PROCESS FLAGS
         MVC   MSG(4),PUTLINS+12   SHOW MOST RECENT STATUS AGAIN
         ICM   R0,15,LVSCNERR      ANY ERRORS ENCOUNTERED?
         BZ    LEVSCNEX            NO
         CVD   R0,DOUBLE           GET DECIMAL DATA SET MATCH COUNT
         MVC   MSG+2(9),ED7DASHL   LOAD EDIT MASK PLUS BLANK
         ED    MSG+2(8),DOUBLE+4   FORMAT NUMBER
         LA    R1,MSG+2+9          POINT PAST TRAILING BLANK
LEVSCN#3 CLI   MSG+2,C'-'          LEADING DASH?
         BNE   LEVSCN$3            NO, FIRST NUMBER NOW READY
         MVC   MSG+2(8),MSG+3      YES, SHUFFLE LEFT 1
         BCTR  R1,0                BACK UP 1
         B     LEVSCN#3            CONTINUE FORMATTING LOOP
LEVSCN$3 MVC   0(11,R1),=C'SCAN ERRORS'
         XC    0(4,R1),LEVBLNKS
         XC    5(6,R1),LEVBLNKS
         LA    R1,11(,R1)          POINT PAST MESSAGE TEXT
         LA    R0,MSG+2            POINT TO MESSAGE TEXT
         SR    R1,R0               GET MESSAGE TEXT LENGTH
         STH   R1,MSG              SET MESSAGE TEXT LENGTH
         OI    STATUS7,$7BELL      REQUEST AUDIBLE ALARM
LEVSCNEX ICM   R0,15,LEVSCNGD      ANY MATCHED LIBRARIES?
         BZ    LEVLSAME            NO, GO SHOW THE RESULTS
         MVI   LVFNDSW,0           YES, RESET SEARCH DIRECTION
         MVI   LVSTRNG,X'FF'       INVALIDATE SEARCH STRING
         B     LEVLSAME            GO SHOW RESULTS LOCATABLE BY RFIND
         DROP  R3                  LVAENT
         SPACE
         SPACE
         DROP  R13                 @LVLWORK
         TITLE '  R E V L E V L   -   S T A T I C   A R E A  '
         DC    0F'0'
         SPACE
*         ONLY NEED FIRST WORD OF EACH CAMLST
LVCMLOC  CAMLST NAME,2,,4          CAMLST FOR LOCATE
         ORG   LVCMLOC+4
LVCMCAT  CAMLST CAT,2,,4           CAMLST FOR CAT
         ORG   LVCMCAT+4
LVCMUNCT CAMLST UNCAT,2            CAMLST FOR UNCAT
         ORG   LVCMUNCT+4
         SPACE
         DC    0D'0'
LEVBLNKS DC    CL8' '
LEVALLDA DC    CL8'SYSALLDA'
LEVVIO   DC    CL8'VIO     '
LEVEFF18 DC    CL8'IKJEFF18'
LVDSLIST DC    CL8'*DSLIST*'
LEVTSKNM DC    CL8'REVLVTSK'
LVPROFNM DC    CL8'$$REVDSL'
LVREVBUF DC    CL8'REVBUF  '
ED7DASHL DC    XL8'6020202020202120'
LEVEDZ   DC    XL8'4020202020202020'
LEVHEX   DC    CL16'0123456789ABCDEF'
         LTORG
         SPACE
LEVTITLE DC    CL14'  RFE DSLIST  '
LEVHDG   DC    CL46'S DATA-SET-NAME-------------------------------'
         DC    CL33' VOLUME ALTRK USTRK ORG FRMT % XT'
         DC    CL30' LRECL BLKSZ REFDT CREDT EXPDT'
LEVHDGL  EQU   *-LEVHDG
         SPACE
LVASIZHW DC    Y(LVASIZ)          ARRAY ENTRY SIZE
         DC    0F'0'
         SPACE
LEVSRTAB DC    0F'0'              CURSOR SORT TABLE
         DC    C'V',AL1(0,02,07)
         DC    C'A',AL1(0,09,13)
         DC    C'U',AL1(0,15,19)
         DC    C'O',AL1(0,21,23)
         DC    C'F',AL1(0,25,28)
         DC    C'P',AL1(0,30,30)
         DC    C'X',AL1(0,32,33)
         DC    C'L',AL1(0,35,39)
         DC    C'B',AL1(0,41,45)
         DC    C'R',AL1(0,47,51)
         DC    C'C',AL1(0,53,57)
         DC    C'E',AL1(0,59,63)
         DC    A(-1)
         EJECT
************************************************************
*                                                          *
*         DATA SET LIST DISPLAY SUBCOMMAND TABLES          *
*                                                          *
************************************************************
         SPACE
LEVCMDTB DC    0F'0'              ENTRIES MUST BE IN COLLATING SEQUENCE
         DC    CL8'<       '
         B     LEVLEFT
         DC    CL8'+       '
         B     LEVDNCMD
         DC    CL8'-       '
         B     LEVUPCMD
         DC    CL8'>       '
         B     LEVRIGHT
         DC    CL8'=X      '
         B     LEVEXIT
         DC    CL8'BOT     '
         B     LEVBOTOM
         DC    CL8'BOTTOM  '
         B     LEVBOTOM
         DC    CL8'CAN     '
         B     LEVCANBK
         DC    CL8'CANCEL  '
         B     LEVCANBK
         DC    CL8'DOWN    '
         B     LEVDNCMD
         DC    CL8'END     '
         B     LEVENDBK
         DC    CL8'EXIT    '
         B     LEVEXIT
         DC    CL8'F       '
         B     LEVFIND
         DC    CL8'FIND    '
         B     LEVFIND
         DC    CL8'IFIND   '
         B     LEVRFIND
         DC    CL8'L       '
         B     LEVELIST
         DC    CL8'LEFT    '
         B     LEVLEFT
         DC    CL8'LIST    '
         B     LEVELIST
         DC    CL8'LOC     '
         B     LEVELIST
         DC    CL8'LOCATE  '
         B     LEVELIST
         DC    CL8'M       '
         B     LEVPATEN
         DC    CL8'MEM     '
         B     LEVPATEN
         DC    CL8'MEMBER  '
         B     LEVPATEN
         DC    CL8'RES     '
         B     LEVRESET
         DC    CL8'RESET   '
         B     LEVRESET
         DC    CL8'RETURN  '
         B     LEVEXIT
         DC    CL8'RFIND   '
         B     LEVRFIND
         DC    CL8'RIGHT   '
         B     LEVRIGHT
         DC    CL8'SEARCH  '
         B     LEVDSRCH
         DC    CL8'SORT    '
         B     LEVSORT
         DC    CL8'SRCHFOR '
         B     LEVDSRCH
         DC    CL8'TOP     '
         B     LEVTOP
         DC    CL8'UP      '
         B     LEVUPCMD
         DC    H'-1'               END OF TABLE
         SPACE
************************************************************
*                                                          *
*         DISPLAY PROMPT FOR INDEX SPECIFICATION           *
*                                                          *
************************************************************
         SPACE
         USING @LVLWORK,R13
         SPACE
RELEVEL  NI    STATUS4,255-$4REFR  RESET REFRESH FLAG
         MVC   $DDNAME,LVDSLIST    LOAD PHONY DDNAME FOR SWAP LIST
         MVC   $VOLSER,LEVBLNKS    CLEAR VOLUME SERIAL
         XC    LEVSNSID,LEVSNSID   CLEAR SENSE ID DATA
         XC    LVLSTINF,LVLSTINF   CLEAR POINTER TO FREED STORAGE
         XC    $DSNAME(2),$DSNAME  CLEAR DATA SET NAME
         MVI   $DSNAME+2,C' '
         MVC   $DSNAME+3(43),$DSNAME+2
*  LINE 1
         NI    STATUS10,255-$10CAP SET CAPS OFF
         MVI   HDCOLOR,X'81'       BLUE BLANKS AND NO SCROLL FIELD
         L     R15,=A(REVHEAD)     POINT TO HEADING ROUTINE
         BASR  R14,R15             INITIALISE FIRST TWO SCREEN LINES
*        OI    STATUS10,$10CAP     SET CAPS ON
         L     R4,SCREENBF         POINT TO PRIMARY SCREEN BUFFER
         L     R3,SHADOWBF         POINT TO THE SHADOW BUFFER
         L     R1,SCRNCOLS         GET SCREEN WIDTH
         SRA   R1,1                HALVE IT
         LA    R0,L'LEVTITLE/2
         SR    R1,R0
         AR    R1,R4
         MVC   0(L'LEVTITLE,R1),LEVTITLE
*  LINE 4
         L     R15,SCRNCOLS
         LR    R14,R15
         LA    R0,80
         SR    R14,R0
         SRA   R14,1
         AR    R4,R14              CENTRE THE DATA ON A WIDE SCREEN
         AR    R3,R14
         AR    R15,R15
         A     R15,SCRNCOLS
         AR    R4,R15
         AR    R3,R15
         LR    R14,R3              POINT TO SHADOW OF LINE 4
         LA    R1,X'01'            SET LINES 4 AND 5 TO BLUE
         SLL   R1,24               SET PAD AND ZERO SOURCE LENGTH
         MVCL  R14,R0
         MVI   0(R4),FLDOUTHI      COMMAND IN HIGH INTENSITY
         MVI   0(R3),X'07'         COMMAND IN WHITE
         MVC   1(10,R3),0(R3)
         MVC   6(5,R4),=C'BLANK'
         MVI   11(R4),FLDOUTLO     MEANING IN LOW INTENSITY
         MVC   12(23,R4),=CL23'- DISPLAY DATA SET LIST'
         TR    6(29,R4),LEVLWRCS
*  LINE 5
         L     R0,SCRNCOLS
         AR    R4,R0
         AR    R3,R0
         MVI   0(R4),FLDOUTHI      COMMAND IN HIGH INTENSITY
         MVI   0(R3),X'07'         COMMAND IN WHITE
         MVC   1(10,R3),0(R3)
         MVC   6(5,R4),=C'ALLOC'
         MVI   11(R4),FLDOUTLO      MEANING IN LOW INTENSITY
         MVC   12(25,R4),=CL25'- ALLOCATE A NEW DATA SET'
         TR    12(25,R4),LEVLWRCS
*  LINE 9
         SLA   R0,2                MULTIPLY SCREEN WIDTH BY FOUR
         AR    R4,R0
         AR    R3,R0
         MVI   0(R4),FLDOUTLO      PROMPT IN LOW INTENSITY
         MVI   0(R3),X'05'         PROMPT IN TURQUOISE
         MVC   1(26,R3),0(R3)
         MVC   6(24,R4),=CL24'DATA SET NAME PREFIX ==>'
         TR    7(19,R4),LEVLWRCS
         MVI   26(R4),FLDOUTHI     ARROW IN HIGH INTENSITY
         MVI   27(R3),X'07'        ARROW IN WHITE
         MVC   28(2,R3),27(R3)
         MVI   30(R4),FLDINHI
         MVI   30(R3),X'32'        RED UNDERSCORE FOR INPUT
         MVC   31(44,R3),30(R3)
         MVC   31(44,R4),LEVELSAV
         MVI   31+44(R4),FLDOUTLO
         LA    R5,31(,R4)          POINT TO INPUT FIELD
         LA    R1,31+43(,R4)       POINT TO LAST POSSIBLE INPUT BYTE
LVLOOP01 CLI   0(R1),C' '          TRAILING BLANK?
         BNE   HAVELVL             NO
         MVI   0(R1),NULL          YES, MAKE IT A NULL
         BCT   R1,LVLOOP01         TURN TRAILING BLANKS INTO NULLS
*  LINE 11
HAVELVL  L     R0,SCRNCOLS         GET SCREEN WIDTH
         AR    R0,R0               DOUBLE IT
         AR    R4,R0               POINT TO TWO LINES LATER
         AR    R3,R0
         MVI   0(R3),X'05'         PROMPT IN TURQUOISE
         MVC   1(26,R3),0(R3)
         MVC   6(24,R4),=CL24'VOLUME SERIAL NUMBER ==>'
         TR    7(19,R4),LEVLWRCS
         MVI   26(R4),FLDOUTHI     ARROW IN HIGH INTENSITY
         MVI   27(R3),X'07'        ARROW IN WHITE
         MVC   28(2,R3),27(R3)
         MVI   30(R4),FLDINHI
         MVI   30(R3),X'32'        RED UNDERSCORE FOR INPUT
         MVC   31(6,R3),30(R3)
         MVC   31(6,R4),LEVELVOL
         MVI   31+6(R4),FLDOUTLO
         LA    R1,31+5(,R4)        POINT TO LAST POSSIBLE INPUT BYTE
LVLOOP02 CLI   0(R1),C' '          TRAILING BLANK?
         BNE   HAVEVOL             NO
         MVI   0(R1),NULL          YES, MAKE IT A NULL
         BCT   R1,LVLOOP02         TURN TRAILING BLANKS INTO NULLS
*  LINE 15
HAVEVOL  AR    R0,R0               GET SCREEN WIDTH TIMES 4
         AR    R4,R0
         AR    R3,R0
         L     R15,SCREENWK        POINT PAST END OF SHADOW BUFFER
         LR    R14,R3
         SR    R15,R3
         LA    R1,X'01'            MAKE REST OF SCREEN BLUE
         SLL   R1,24
         MVCL  R14,R0
**       MVI   0(R3),X'07'         MAKE THE HEADING WHITE
**       MVC   1(29,R3),0(R3)      REALLY LEAVE IT BLUE
         MVC   6(24,R4),LVLEGHDG
         TR    7(23,R4),LEVLWRCS
*  LINES 17 AND ONWARDS
         A     R4,SCRNCOLS         POINT TO NEXT LINE
         A     R3,SCRNCOLS
         LA    R1,LVLEGDTL-1       POINT TO LEGEND LABELS
LVLBLLP  A     R4,SCRNCOLS         POINT TO NEXT LINE
         A     R3,SCRNCOLS
         LA    R1,1(,R1)           POINT PAST NEW LINE CODE
         LA    R14,10(,R4)         POINT TO FIRST DISPLAY SLOT
         LA    R15,10(,R3)
LVSLTLP  CLI   0(R1),X'FF'         FINAL FINISH?
         BE    LEGENDOK            YES, LEGEND COMPLETE
         CLI   0(R1),X'FE'         FINAL ENTRY FOR LINE?
         BE    LVLBLLP             YES, GO LOAD A NEW LINE
         MVC   1(20,R14),0(R1)     LOAD LEGEND TEXT
         TR    6(15,R14),LEVLWRCS
         MVI   0(R14),FLDOUTHI     HIGH INTENSITY FOR CODE
         MVI   2(R14),FLDOUTLO     LOW INTENSITY FOR MEANING
         MVI   1(R15),X'07'        SHOW CODE IN WHITE
         LA    R1,20(,R1)          POINT TO NEXT LEGEND LABEL
         LA    R14,20(,R14)        POINT TO NEXT DISPLAY SLOT
         LA    R15,20(,R15)
         B     LVSLTLP
         SPACE
LEGENDOK L     R2,SCREENBF         POINT TO PRIMARY SCREEN BUFFER
         MVC   MSGDSN,1(R2)        SAVE TEXT FOR REVCOMM
         LR    R1,R5               POINT TO INPUT FIELD
         SR    R1,R2               GET ITS SCREEN OFFSET
         LA    R1,1(,R1)           GET ITS SCREEN POSITION
         S     R1,SCRNCOLS
         S     R1,SCRNCOLS
         ST    R1,REVPOS           SPECIFY CURSOR POSITION
         MVC   REVCSR,LVREVBUF     SPECIFY CURSOR FIELD
         MVC   COMPON,=CL8'REVLEV' FLAG COMPONENT FOR HELP
         L     R15,=A(REVCOMM)     POINT TO TERMINAL I/O ROUTINE
         BASR  R14,R15             SHOW LEVEL ENTRY PANEL
         TM    STATUS4,$4ATTN      ATTENTION INTERRUPT?
         BO    RELEVEL             YES, LET'S TRY THAT AGAIN
         TM    STATUS4,$4REFR      SCREEN CONTENTS OVERWRITTEN?
         BO    RELEVEL             YES, LET'S TRY THAT AGAIN
         SPACE
************************************************************
*                                                          *
*         PROCESS PRIMARY COMMAND FROM INITIAL PROMPT      *
*                                                          *
************************************************************
         SPACE
         TM    OPD0+6,PRESENT      ANY SUBCOMMAND REQUESTED?
         BNO   LEVELCHK            NO, GO CHECK FOR INPUT INDEX LEVEL
**                                 UPPERCASING PERFORMED BY REVCOMM
**       L     R1,=A(KAPS)         YES, POINT TO TRANSLATE TABLE
**       TR    CMDAREA,0(R1)       UPPER CASE ALL PRIMARY INPUT
         L     R1,OPD0             POINT TO SUBCOMMAND NAME
         TM    STATUS13,$13RFE     RUNNING UNDER RFE MENU SYSTEM?
         BNO   LVINCMOK            NO
         CLI   0(R1),C'='          JUMPING TO OTHER MENU ITEM?
         BE    LEVEXIT             YES, GO DO THAT
LVINCMOK LA    R15,LEVINTAB        POINT TO SUBCOMMAND TABLE
         LH    R2,OPD0+4           GET SUBCOMMAND LENGTH CODE PLUS 1
         LA    R0,7
         CLR   R5,R0               LARGER THAN MAXIMUM?
         BNH   LVINCMLP            NO
         LR    R2,R0               YES, REDUCE TO MAXIMUM
LVINCMLP EX    R2,LVCMDTST         FOUND THE SUBCOMMAND?
         BL    LVINBDCM            NO, HANDLE NON-COMMAND PRIMARY INPUT
         BE    8(,R15)             YES, PERFORM IT
         LA    R15,12(,R15)        NOT YET, POINT TO NEXT ENTRY
         B     LVINCMLP            CONTINUE SUBCOMMAND TABLE SCAN
LVINBDCM MVI   MSG,20              INVALID COMMAND
         MVC   LEVELSAV,0(R5)      SAVE LATEST INDEX DATA
         B     RELEVEL             GO DISPLAY THIS MESSAGE
         SPACE
************************************************************
*                                                          *
*         PROCESS SPECIFIED CATALOG INDEX LEVEL            *
*                                                          *
************************************************************
         SPACE
LEVELCHK MVC   LEVELSAV,0(R5)      SAVE IT
         L     R0,SCRNCOLS         GET SCREEN WIDTH
         AR    R0,R0               DOUBLE
         AR    R5,R0               POINT TO VOLUME INPUT
         MVC   LEVELVOL,0(R5)      SAVE IT
         L     R1,=A(KAPS)         POINT TO TRANSLATE TABLE
         TR    LEVELSAV(50),0(R1)  CONVERT INPUT NULLS TO BLANKS
         LA    R0,44               GET INPUT FIELD LENGTH
LVLOOP03 CLI   LEVELSAV,C' '       LEADING BLANK?
         BNE   GETLVLLN            NO
         MVC   LEVELSAV(43),LEVELSAV+1
         MVI   LEVELSAV+43,C' '    YES, LEFT JUSTIFY DATA
         BCT   R0,LVLOOP03
GETLVLLN XC    LOCBUF(256),LOCBUF  CLEAR A TRANSLATE TABLE
         MVI   LOCBUF+C' ',C' '    PREPARE BLANK SEARCH TABLE
         LA    R1,LEVELSAV+44      PREPARE FOR FULL-LENGTH NAME
         TRT   LEVELSAV,LOCBUF     SEARCH FOR BLANK
         LA    R0,LEVELSAV         POINT TO INDEX START
         SR    R1,R0               GET INDEX LENGTH
         ST    R1,INDEXLEN         SAVE IT
         LA    R14,INDEXCTG        POINT TO TARGET
         LA    R15,44              GET ITS LENGTH
         ICM   R1,8,LEVBLNKS       SET PAD CHARACTER
         MVCL  R14,R0              COPY INPUT FROM USER
         LA    R0,6                GET INPUT FIELD LENGTH
LVLOOP04 CLI   LEVELVOL,C' '       LEADING BLANK?
         BNE   LVVFYVOL            NO, SEE IF VOLUME IS ONLINE
         MVC   LEVELVOL(5),LEVELVOL+1
         MVI   LEVELVOL+5,C' '     YES, LEFT JUSTIFY DATA
         BCT   R0,LVLOOP04
         XC    LEVELTYP,LEVELTYP   CLEAR DEVICE TYPE OF BLANK VOLUME
         CLI   LEVELSAV,C' '       BLANK VOLUME AND DSNAME PREFIX?
         BE    RELEVEL             YES, BLANK INPUT SO NOTHING TO DO
         CLI   INDEXLEN+3,8        INDEX LENGTH GREATER THAN 8?
         BH    LEVELCAT            YES, MUST HAVE A PERIOD IN IT
         L     R0,INDEXLEN         NO, GET ITS LENGTH
         LR    R1,R0               NO, GET ITS LENGTH
         LA    R14,INDEXCTG        POINT TO IT
LVLOOP05 CLI   0(R14),C'.'         FOUND A PERIOD?
         BE    LEVELCAT            YES, NOT A SINGLE QUALIFIER
         LA    R14,1(,R14)         NO, POINT TO NEXT BYTE
         BCT   R0,LVLOOP05         KEEP LOOKING
         MVI   0(R14),C'.'         APPEND A PERIOD - PREVENT ALIAS ONLY
         LA    R1,1(,R1)           GET THE NEW LENGTH
         ST    R1,INDEXLEN         SAVE IT
         SPACE
LEVELCAT XC    CTGPL(CTGPLLEN),CTGPL
         MVI   CTGOPTN1,CTGNAME+CTGGENLD
         MVI   CTGOPTN2,CTGRCATN
         MVI   CTGOPTN3,CTGSUPLT+CTGAM0
         LA    R0,INDEXCTG-1       POINT TO INDEX LENGTH BYTE
         ST    R0,CTGENT           SET ADDRESS INTO CTGPL
         L     R0,=A(X'10000')     GET 64K
         MVI   GETMNTRC,42         TRACK GETMAIN IN CASE OF FAILURE
         GETSTOR RC,LV=(0),LOC=(31,64)
         LTR   R15,R15
         BNZ   LVLNOSTG            COULD NOT GET IT
         BCTR  R15,0               GET HIGH VALUES
         LA    R0,4                GET FOUR
         STH   R15,0(,R1)          SET WORK AREA SIZE
         STH   R0,2(,R1)           SET WORK AREA USED
         STCM  R0,12,MSG           CLEAR MESSAGE
         ST    R1,CTGWKA           SET WORK AREA ADDRESS
         LA    R1,CTGPL            POINT TO CATALOG PARAMETER LIST
         CATALOG (1)               ISSUE CATALOG SVC
         LTR   R15,R15             SUCCESS?
         BZ    CATALOG0            YES
         STC   R15,DOUBLE          NO, SAVE RETURN CODE
         MVC   MSG+2(20),=CL20'CATALOG RETURN CODE='
         UNPK  MSG+22(3),DOUBLE(2)
         TR    MSG+22(2),LEVHEX-C'0'
         LA    R14,22
         STH   R14,MSG             SET MESSAGE LENGTH
         OI    STATUS7,$7BELL      REQUEST AUDIBLE ALARM
         SPACE
CATALOG0 L     R3,CTGWKA           POINT TO THE CATALOG WORK AREA
         SR    R5,R5
         ICM   R5,3,2(R3)          GET USED AREA LENGTH
         LR    R15,R5              COPY THIS
         LA    R4,4(,R3)           POINT TO FIRST RETURNED ENTRY
         AR    R5,R3               POINT PAST RETURNED DATA
         SR    R14,R14             CLEAR FOR DIVIDE
         LA    R0,45               GET THE ENTRY LENGTH
         DR    R14,R0              GET THE ENTRY COUNT
         CLI   0(R4),C'0'          CONTAINING CATALOG ENTRY FIRST?
         BNE   CATIS1ST            NO
         BCTR  R15,0               YES, DON'T COUNT IT
         LA    R4,45(,R4)          POINT TO SECOND RETURNED ENTRY
CATIS1ST LTR   R15,R15             ANYTHING WORTH REPORTING?
         BP    LEVLSHOW            YES, SEEMS LIKE IT
         ICM   R0,3,MSG            ANY MESSAGE ALREADY PRIMED?
         BNZ   LEVLNULL            YES, DO NOT OVERLAY MESSAGE
         MVI   MSG,161             NO DATA SETS FOUND
LEVLNULL L     R0,=A(X'10000')     GET 64K
         L     R1,CTGWKA           GET ACQUIRED WORK AREA ADDRESS
         FREEMAIN RU,LV=(0),A=(1)  FREE THE CATALOG WORK AREA
         B     RELEVEL             REPORT THE BAD NEWS
LVLNOSTG MVI   MSG,123             REQUEST ABORTED - REGION FULL
         B     RELEVEL             REPORT THE BAD NEWS
         SPACE
LEVLSHOW LA    R1,LVASIZ           GET INTERNAL ENTRY LENGTH
         MR    R0,R15              GET TOTAL ARRAY SIZE
         ST    R1,LVARAYSZ         SAVE IT
         LR    R0,R1               COPY THE SIZE
         MVI   GETMNTRC,43         TRACK GETMAIN IN CASE OF FAILURE
         GETMAIN RC,LV=(0),LOC=(31,64)
         LTR   R15,R15             GOT STORAGE FOR THE ARRAY?
         BZ    LVARAYOK            YES
         MVI   MSG,123             REQUEST ABORTED - REGION FULL
         B     LEVLNULL            GO FREE THE WORK AREA
         SPACE
LVARAYOK ST    R1,LVARAYAD         SAVE THE ADDRESS OF THE ARRAY
         ST    R1,LVATOPAD         START WITH FIRST AT THE TOP
         LR    R14,R1              POINT TO THE NEW AREA
         L     R15,LVARAYSZ        GET ITS SIZE
         SR    R3,R3               ZERO PAD AND LENGTH
         MVCL  R14,R2              ZERO THE NEW AREA
         XC    LVTOTALS,LVTOTALS   ZERO DATA SET TOTALS
         XC    LVFRETOT,LVFRETOT   ZERO FREE TRACK TOTALS
         LA    R0,LEVHDGL+1        GET COLUMNS THAT COULD BE SHOWN
         S     R0,SCRNCOLS         GET UPPER LIMIT TO COLUMN CREEP
         BNM   LEVSVCRP            ENSURE CREEP NOT NEGATIVE
         SR    R0,R0
LEVSVCRP STH   R0,LEVCREEP         SAVE IT
         A     R0,SCRNCOLS         GET EFFECTIVE DISPLAY COVERAGE
         LA    R15,LEVHDGL+1       GET MAXIMUM COVERAGE POSSIBLE
         SR    R15,R0              GET MISSING COVERAGE
         XC    LOCBUF(256),LOCBUF  CLEAR A TRANSLATE TABLE
         MVI   LOCBUF+C' ',C' '    PREPARE BLANK SEARCH TABLE
         LR    R3,R1               POINT TO ARRAY START
         SR    R6,R6               RESET SEQUENCE NUMBER
         USING LVAENT,R3
LDARAYLP LA    R6,1(,R6)           INCREMENT SEQUENCE NUMBER
         ST    R6,LVASEQ           STORE IT IN ENTRY
         MVC   LVA26,0(R4)         LOAD CATALOG ENTRY TYPE AND NAME
         LA    R1,45(,R4)          PREPARE FOR FULL-LENGTH NAME
         TRT   1(44,R4),LOCBUF     SEARCH FOR BLANK
         SR    R1,R4
         BCTR  R1,0                GET CATALOG ENTRY NAME LENGTH
         STH   R1,LVADSNL          SAVE IT
         LA    R0,44               GET TRAILING BLANK COUNT
         SR    R0,R1               IT IS ALSO THE LENGTH TO CREEP LEFT
         CH    R0,LEVCREEP         WILL NAME FIT?
         BNL   *+8                 YES
         STH   R0,LEVCREEP         WELL, IT WILL NOW
         C     R6,ISPFPAGE         GOT ENOUGH FOR FIRST PAGE?
         BH    LDARAYNX            YES, LEAVE IT FOR SUBTASK
         LR    R1,R13              POINT TO WORKING STORAGE
         L     R15,=A(LOCOBTN)     POINT TO ROUTINE
         BASR  R14,R15             LOAD REST OF DATA SET DETAILS
LDARAYNX LA    R3,LVAEND           POINT TO NEXT ARRAY ENTRY
         LA    R4,45(,R4)          POINT TO NEXT RETURNED ENTRY
         CR    R4,R5               LOADED ALL ENTRIES?
         BL    LDARAYLP            NO
         ST    R3,LVAENDAD         YES, SAVE ADDRESS PAST ARRAY
         ST    R3,LVTOPACT         NO ACTION CODES EARLIER THAN THIS
         DROP  R3                  LVAENT
         ST    R6,LEVLROWS         SAVE THE NUMBER OF ARRAY ROWS
         L     R0,=A(X'10000')     GET 64K
         L     R1,CTGWKA           GET ACQUIRED WORK AREA ADDRESS
         FREEMAIN RU,LV=(0),A=(1)  FREE THE CATALOG WORK AREA
         BAS   R14,LEVALIGN        ALIGN DISPLAY COLUMN TO RIGHT EDGE
         SPACE
************************************************************
*                                                          *
*         ATTACH SUBTASK TO COMPLETE ARRAY                 *
*                                                          *
************************************************************
         SPACE
         C     R2,ISPFPAGE         ANY ENTRIES LEFT INCOMPLETE?
         BNH   LEVATTOK            NO, DO NOT START SUBTASK
         LA    R0,LEVTSKNM         POINT TO ENTRY POINT NAME
         L     R1,=A(REVLVTSK)     POINT TO SUBTASK ENTRY POINT
         IDENTIFY EPLOC=(0),ENTRY=(1)    MAKE IT KNOWN TO THE SYSTEM
         MVC   LVATTCHD,LVATTCHS
         XC    LVSUBECB,LVSUBECB   RESET ECB
         LR    R1,R13              POINT TO WORKING STORAGE
         ATTACH ECB=LVSUBECB,SF=(E,LVATTCHD)
         ST    R1,LVSUBTSK         SAVE TCB ADDRESS
LEVATTOK EQU   *
         B     LEVLSAME            GO DISPLAY THE DATA SET LIST
         SPACE
************************************************************
*                                                          *
*         ALIGN RIGHT DISPLAY EDGE WITH END OF ITEM        *
*                                                          *
************************************************************
         SPACE
LEVALIGN STM   R14,R12,12(R13)     SAVE REGISTERS
         LH    R0,LEVCREEP         GET CURRENT EXTRA COVERAGE
         LR    R2,R0               COPY IT
         A     R0,SCRNCOLS         GET EFFECTIVE DISPLAY COVERAGE
         LA    R15,LEVHDGL+1       GET MAXIMUM COVERAGE POSSIBLE
         SR    R14,R14             CLEAR FOR DIVIDE
         STH   R14,LEVCRAWL        CLEAR SCROLL RIGHT LIMITATION
         STH   R14,LVCROUCH
         STH   R14,LITMTRNC
         SR    R15,R0              GET MISSING COVERAGE
         BNP   LVCOVROK            ALL ON SHOW SO NO PROBLEM
         LA    R0,6                GET WIDTH OF LAST 5 ITEMS
         DR    R14,R0              GET MISSING COLUMNS OF LAST ON SHOW
         LTR   R14,R14             ALIGNMENT ALREADY AT END OF ITEM?
         BZ    LEVRTCHK            YES, NO ADJUSTMENT NEEDED
         SR    R0,R14              GET LAST ITEM PARTIAL COLUMN COUNT
         SR    R2,R0               REDUCE TO ALIGN ON ITEM BOUNDARY
         BM    LEVRTCHK            SHOULD NOT HAPPEN
         STH   R2,LEVCREEP         SET NEW EXTRA COLUMN COVERAGE
         LA    R15,1(,R15)         ROUND DISPLAY ITEM COUNT UP
LEVRTCHK STH   R15,LITMTRNC        SAVE THE ITEM TRUNCATION COUNT
         IC    R15,CRAWLTAB(R15)   GET SCROLL RIGHT LEFT LOSS
         STC   R15,LVCROUCH+1      SAVE IT
LVCOVROK MVI   LEVORDER,C'D'       NEXT LIST WILL BE IN DSNAME ORDER
         NI    STATUS13,255-$13DESC
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER
         SPACE
*  TABLE OF POST-DSNAME LEFT SCREEN COLUMNS HIDDEN WHEN SCROLLED RIGHT
*  ORDERED BY NUMBER OF DISPLAY ITEMS HIDDEN WHEN SCROLLED LEFT, WHICH
*  IS SIMPLY THE NUMBER OF SCREEN COLUMNS OF THE ITEMS "SHIFTED OUT"
*  TO THE LEFT TO MAKE ENOUGH ROOM TO SHOW THE ITEMS ON THE RIGHT OF
*  THE DISPLAY WHEN SCROLLED RIGHT.
*
*        ITEMS HIDDEN SCROLLED LEFT   ITEMS HIDDEN SCROLLED RIGHT
*     -----------------------------   -----------------------------
*  0                           NONE - NONE
*  1                          EXPDT - VOLUME
*  2                    CREDT+EXPDT - VOLUME+ALTRK
*  3              REFDT+CREDT+EXPDT - VOLUME+ALTRK+USTRK
*  4        BLKSZ+REFDT+CREDT+EXPDT - VOLUME+ALTRK+USTRK+ORG
*  5  LRECL+BLKSZ+REFDT+CREDT+EXPDT - VOLUME+ALTRK+USTRK+ORG+FRMT+%
*
CRAWLTAB DC    AL1(0,7,13,19,23,30)
         SPACE
************************************************************
*                                                          *
*         DETERMINE IF NOMINATED VOLUME IS ONLINE          *
*                                                          *
************************************************************
         SPACE
LVBADVOL MVI   MSG,162             VOLUME CANNOT BE ACCESSED
         B     RELEVEL             REPORT THE BAD NEWS
         SPACE
LVVFYVOL MVI   LEVLOCDS,X'04'      SET VTOC KEY
         MVC   LEVLOCDS+1(43),LEVLOCDS
         LA    R0,LEVLOCDS         VTOC SEARCH KEY ADDRESS
         LA    R1,LEVELVOL         VOLUME SERIAL NUMBER TO SEARCH
         LA    R2,MYDSCB           ANSWER AREA FOR OBTAIN
         L     R15,=A(LOCOBTN)
         LA    R15,LEVOBT1-LOCOBTN(,R15)
         MVC   LEVLOCOB,0(R15)     SET SVC REQUEST CODE
         STM   R0,R2,LEVLOCOB+4    SET INTO OBTAIN PARAMETER LIST
         OBTAIN LEVLOCOB           RETRIEVE VTOC ENTRY
         LTR   R15,R15             SUCCESS?
         BNZ   LVBADVOL            NO, NO DATA TO PROCESS
         CLI   MYDSCB+96+4,1       IS R OF DSCB CCHHR 1?
         BNE   LVBADVOL            NO, NOT AN OS VOLUME - PROBABLY VM
         MVC   LEVELTPC,DS4DEVSZ+2 COPY TRACKS PER CYLINDER
         SPACE
************************************************************
*                                                          *
*         ALLOCATE THE NOMINATED VOLUME                    *
*                                                          *
************************************************************
         SPACE
         MVC   $VOLSER,LEVELVOL    SET VOLUME TO PROCESS
         L     R1,SCREENBF         POINT DYNALLOC PARAMETER LIST
         XC    0(256,R1),0(R1)     ERASE SOME RESIDUAL DATA
         USING S99RBPTR,R1
         LA    R15,4(,R1)          POINT TO DYNALLOC REQUEST BLOCK
         USING S99RB,R15
         ST    R15,S99RBPTR        INITIALIZE PARAMETER LIST
         OI    S99RBPTR,S99RBPND   INDICATE END OF PARAMETER LIST
         MVI   S99RBLN,20          SUPPLY REQUEST BLOCK LENGTH
         MVI   S99VERB,S99VRBAL    VERB=X'01' - DSNAME ALLOCATION
         MVI   S99FLG11,S99NOCNV   REQUEST A NEW ALLOCATION
*        OI    S99FLG11,S99NOMNT   OBTAIN WORKED SO WON'T CAUSE MOUNT
*        MVI   S99FLG12,0          CLEAR FLAGS - DONE BY XC ABOVE
*        SR    R0,R0               ALREADY ZEROED BY XC ABOVE
*        STH   R0,S99ERROR         ZERO ERROR REASON CODE
*        STH   R0,S99INFO          ZERO INFORMATION REASON CODE
*        ST    R0,S99FLAG2         ZERO AUTHORIZED FLAGS
         LA    R14,64(,R1)         GET TEXT POINTERS AREA ADDRESS
         ST    R14,S99TXTPP        SAVE IT
         AIF   (NOT &ENV390).LVRBXOK
         TM    OSBITS,X'93'        MVS/XA OR LATER?
         BNO   LEVRBXOK            NO, LEAVE RB EXTENSION POINTER ZERO
         LA    R0,20(,R15)         GET REQUEST BLOCK EXTENSION ADDR
         ST    R0,S99S99X          SAVE IT
         DROP  R15                 S99RB
         LR    R15,R0
         USING S99RBX,R15
         MVC   S99EID,=C'S99RBX'   SUPPLY CONTROL BLOCK ID
         MVI   S99EVER,S99RBXVR    SUPPLY VERSION NUMBER (X'01')
         MVI   S99EOPTS,S99EIMSG   LET SYSTEM USE PUTLINE FOR MSG(S)
         MVI   S99EMGSV,S99XINFO   SHOW EVEN INFO-LEVEL MESSAGES
         MVC   S99ECPPL,CPPLPTR    SUPPLY CPPL ADDRESS FOR PUTLINE
*        SR    R0,R0               ALREADY ZEROED BY XC ABOVE
*        ST    R0,S99EMRC          ZERO RESERVED BYTES
*        STH   R0,S99EERR          ZERO ERROR REASON CODE
*        STH   R0,S99EINFO         ZERO INFORMATION REASON CODE
*        ST    R0,S99ERSN          ZERO SMS REASON CODE (WAS S99ERSV2)
.LVRBXOK ANOP
         DROP  R15                 S99RB(X)
         USING S99TUPL,R14
LEVRBXOK LA    R15,32(,R14)        POINT TO AREA FOR TEXT UNITS
         USING S99TUNIT,R15
         ST    R15,S99TUPTR        SAVE FIRST TEXT UNIT ADDRESS
         LA    R0,DALVLSER         KEY = X'0010' - VOLUME SERIAL
         STH   R0,S99TUKEY
         LA    R0,1
         STH   R0,S99TUNUM         1 PARAMETER IN THIS TEXT UNIT
         LA    R0,6
         STH   R0,S99TULNG         MAXIMUM LENGTH IS 6
         MVC   S99TUPAR(6),$VOLSER LOAD VOLUME SERIAL NUMBER
         LA    R14,4(,R14)         POINT TO NEXT TEXT UNIT POINTER
         LA    R15,16(,R15)        POINT TO NEXT TEXT UNIT
         ST    R15,S99TUPTR        SAVE SECOND TEXT UNIT ADDRESS
         LA    R0,DALUNIT          KEY = X'0015' - UNIT DESCRIPTION
         STH   R0,S99TUKEY
         LA    R0,1
         STH   R0,S99TUNUM         1 PARAMETER IN THIS TEXT UNIT
         LA    R0,8
         STH   R0,S99TULNG         LENGTH IS 8
         MVC   S99TUPAR(8),LEVALLDA
         LA    R14,4(,R14)         POINT TO NEXT TEXT UNIT POINTER
         LA    R15,16(,R15)        POINT TO NEXT TEXT UNIT
         ST    R15,S99TUPTR        SAVE THIRD TEXT UNIT ADDRESS
         LA    R0,DALSTATS         KEY = X'0004' - DATA SET STATUS
         STH   R0,S99TUKEY
         LA    R0,1
         STH   R0,S99TUNUM         1 PARAMETER IN THIS TEXT UNIT
*        LA    R0,1
         STH   R0,S99TULNG         LENGTH IS 1
         MVI   S99TUPAR,DA08SHR    USE SHARED ENQUEUE
         LA    R14,4(,R14)         POINT TO NEXT TEXT UNIT POINTER
         LA    R15,16(,R15)        POINT TO NEXT TEXT UNIT
         ST    R15,S99TUPTR        SAVE LAST TEXT UNIT ADDRESS
         OI    S99TUPTR,S99TUPLN   INDICATE THAT IT IS THE LAST
         LA    R0,DALRTDDN         KEY = X'0055' - RETURN DDNAME
         STH   R0,S99TUKEY
         LA    R0,1
         STH   R0,S99TUNUM         1 PARAMETER IN THIS TEXT UNIT
         LA    R0,8
         STH   R0,S99TULNG         MAXIMUM LENGTH IS 8
         MVC   S99TUPAR(8),LEVBLNKS
         LA    R2,S99TULNG         REMEMBER THIS DDNAME LOCATION
         DROP  R1,R14,R15          S99RBPTR, S99TUPL, S99TUNIT
         DYNALLOC
         LTR   R15,R15             SUCCESS?
         BNZ   LVBADVOL            NO, GO REPORT THE BAD NEWS
         MVC   $DDNAML(10),0(R2)   COPY DDNAME LENGTH AND DDNAME
         LA    R1,$DDNAME          POINT TO THE DDNAME
         L     R15,=A(REVDDLOC)    POINT TO TIOT ENTRY LOCATE ROUTINE
         BASR  R14,R15             LOCATE THE TIOT ENTRY
         ICM   R1,7,17(R15)        POINT TO THE UCB
         MVC   LEVELTYP,16(R1)     SAVE THE DEVICE TYPE
         SPACE
************************************************************
*                                                          *
*         OPEN THE VTOC                                    *
*                                                          *
************************************************************
         SPACE
         LA    R0,=CL8'REVTOCRD'   POINT TO VTOC PROCESSOR NAME
         LOAD  EPLOC=(0),ERRET=LVBADVTC
         ST    R0,LVVTOCEP         SAVE ITS ADDRESS
         LR    R15,R0              GET VTOC READ ENTRY POINT
         LA    R1,$DDNAME          POINT TO THE VTOC DDNAME
         LA    R0,1                LOAD ENTRY CODE FOR OPEN
         BASR  R14,R15             OPEN THE VTOC
         ST    R15,KOUNT           RESET DATA SET COUNTER
         LTR   R15,R15             DID THE OPEN WORK?
         BZ    LVSAVSNS            YES, PROCEED TO READ VTOC
LVBADVTC MVI   MSG,162             VOLUME CANNOT BE ACCESSED
         B     LVVTCFRE            GO DEALLOCATE THE VOLUME
LVSAVSNS MVC   LEVSNSID,0(R1)      COPY SENSE ID DATA
         XC    LVFRETOT,LVFRETOT   ZERO FREE TRACK TOTALS
         SPACE
************************************************************
*                                                          *
*         READ THE VTOC                                    *
*                                                          *
************************************************************
         SPACE
LVTCRDLP XASAM24
         SLR   R0,R0               LOAD ENTRY CODE FOR READ
         L     R15,LVVTOCEP        GET VTOC READ ENTRY POINT
         BASR  R14,R15             GET A DSCB
         XASAM31
         LA    R0,4
         CLR   R15,R0              END-OF-FILE?
         BE    LVTCCLOS            YES, GO CLOSE THE VTOC
         BH    LVTCRDLP            IF I/O ERROR GET NEXT VTOC TRACK
         CLI   8+44(R1),C'1'       FORMAT-1 DSCB?
         BE    LEVFMT1             YES
         CLI   8+44(R1),C'3'       FORMAT-3 DSCB?
         BE    LEVFMT3             YES
         CLI   8+44(R1),C'4'       FORMAT-4 DSCB?
         BE    LEVFMT4             YES
         CLI   8+44(R1),C'5'       FORMAT-5 DSCB?
         BE    LEVFMT5             YES
         CLI   8+44(R1),C'8'       FORMAT-8 DSCB?
         BE    LEVFMT1             YES
         CLI   8+44(R1),0          FORMAT-0 DSCB?
         BNE   LVTCRDLP            NO, DISCARD - GET NEXT DSCB
         LA    R0,1
         A     R0,LVFREVTC         GET NEW FREE VTOC ENTRY COUNT
         ST    R0,LVFREVTC         SAVE IT
         B     LVTCRDLP            DISCARD - GET NEXT DSCB
         SPACE
************************************************************
*                                                          *
*         CLOSE THE VTOC                                   *
*                                                          *
************************************************************
         SPACE
LVTCCLOS XASAM24
         LA    R0,2                LOAD ENTRY CODE FOR CLOSE
         L     R15,LVVTOCEP        GET VTOC READ ENTRY POINT
         BASR  R14,R15             CLOSE THE VTOC
         XASAM31
         MVC   LEVPLOT#,PICDTLS    SAVE SPACE MAP DETAILS MASTER COPY
         SPACE
************************************************************
*                                                          *
*         DEALLOCATE THE NOMINATED VOLUME                  *
*                                                          *
************************************************************
         SPACE
LVVTCFRE XC    MYDAPB,MYDAPB       ISSUE DEALLOCATION REQUEST
         MVI   DA18CD+1,X'18'
         MVC   DA18DDN,$DDNAME     DDNAME
         MVC   DA18MNM,LEVBLNKS    MEMBER NAME
         MVC   DA18SCLS,LEVBLNKS   SYSOUT CLASS IS 2-BYTE FIELD
         XC    MYECB,MYECB
         XASAM24
         LA    R1,MYDAPL
         L     R15,CVTPTR(,0)      CVT
         L     R15,CVTDAIR-CVT(,R15)
         BASR  R14,R15             CALL IKJDAIR TO FREE FILE
         XASAM31
         MVC   $DDNAME,LEVBLNKS    CLEAR DDNAME
         CLI   MSG,0               ANY TROUBLE YET?
         BE    LVTCDSNS            NO, GO CREATE A DATA SET LIST
         ICM   R0,15,LVVTOCEP      WAS REVTOCRD LOADED?
         BZ    RELEVEL             NO, GO REPROMPT USER
         LA    R0,=CL8'REVTOCRD'   YES, POINT TO ITS NAME
         DELETE EPLOC=(0)          DELETE IT FROM STORAGE
         XC    LVVTOCEP,LVVTOCEP   INDICATE NO LONGER LOADED
         B     RELEVEL             GO REPROMPT USER
         SPACE
************************************************************
*                                                          *
*         PROCESS VTOC ENTRIES                             *
*                                                          *
************************************************************
         SPACE
LEVFMT1  LR    R2,R1               POINT TO RETURNED DATA
         MVI   DOUBLE,0            CLEAR PLOT COLOUR
         ICM   R1,15,INDEXLEN      GET THE DATA SET NAME MASK LENGTH
         BNP   LBLCHAIN            NO DATA SET NAME MASKING
         BCTR  R1,0                DECREMENT FOR EXECUTE
         EX    R1,LVPRFCHK         SHOWING THIS DATA SET?
         BNE   LEVFMT1X            NO, GO LOOK AT NEXT DSCB
         MVI   DOUBLE,X'02'        YES, PLOT ITS SPACE IN RED
LBLCHAIN LA    R0,144              GET REQUIRED SIZE
         MVI   GETMNTRC,44         TRACK GETMAIN IN CASE OF FAILURE
         GETMAIN RC,LV=(0),LOC=(31,64)
         LTR   R15,R15             STORAGE AVAILABLE?
         BNZ   LEVTOCLN            NO, GO FREE CHAINED LABEL ELEMENTS
         MVC   4(140,R1),8(R2)     COPY DSCB KEY AND DATA
         LA    R15,LVLBLCHN        POINT TO CHAIN ANCHOR
LBLCHNLP LR    R14,R15             COPY ELEMENT POINTER
         ICM   R15,15,0(R15)       POINT TO NEXT ELEMENT
         BZ    LBLCHNND            END OF CHAIN SO GO ADD ON END
         CLC   4(44,R1),4(R15)     REACHED INSERTION POINT?
         BH    LBLCHNLP            NO, KEEP FOLLOWING CHAIN
LBLCHNND ST    R15,0(,R1)          NEW KEY POINTS TO HIGH KEY
         ST    R1,0(,R14)          LOW KEY POINTS TO NEW KEY
         LA    R0,1
         A     R0,KOUNT            INCREMENT DATA SET COUNT
         ST    R0,KOUNT
LEVFMT1X LR    R1,R2               POINT TO RETURNED DATA
LEVFMT3  EQU   *
         ICM   R0,15,LEVPLOT@      ANY DISK MAP PLOT IN PROGRESS?
         BZ    LVTCRDLP            NO, GO READ NEXT DSCB
LEVFMT5  EQU   *
LEVFMT4  EQU   *
         L     R15,=A(LEVOLPLT)    GET PLOT ROUTINE ADDRESS
         BASR  R14,R15             INVOKE IT
         B     LVTCRDLP            GO READ NEXT DSCB
         SPACE
LVPRFCHK CLC   8(0,R2),LEVELSAV    <<< EXECUTED >>>
         SPACE
************************************************************
*                                                          *
*         FREE DATA SET LABEL CHAINS BEFORE REPROMPT       *
*                                                          *
************************************************************
         SPACE
LEVTOCLN MVI   MSG,123             REQUEST ABORTED - REGION FULL
LEVTOCNL BAS   R14,LVFREPLT        CLEAN UP VOLUME SPACE MAP PLOT
LEVTOCLP ICM   R1,15,LVLBLCHN      POINT TO FIRST CHAINED ELEMENT
         BZ    LEVDS3LP            CHAIN FREED - GO LOOK AT NEXT CHAIN
         LA    R0,144              GET ELEMENT SIZE
         MVC   LVLBLCHN,0(R1)      SAVE NEXT ELEMENT ADDRESS
         FREEMAIN RU,LV=(0),A=(1)  FREE THIS ELEMENT
         B     LEVTOCLP            GO FREE NEXT ELEMENT
LEVDS3LP ICM   R1,15,LVLF3CHN      POINT TO FIRST CHAINED ELEMENT
         BZ    RELEVEL             CHAIN FREED - BACK TO SQUARE ONE
         LA    R0,4+8+140          GET ELEMENT SIZE
         MVC   LVLF3CHN,0(R1)      SAVE NEXT ELEMENT ADDRESS
         FREEMAIN RU,LV=(0),A=(1)  FREE THIS ELEMENT
         B     LEVDS3LP            GO FREE NEXT ELEMENT
         SPACE
************************************************************
*                                                          *
*         ALLOCATE (CREATE) A NEW DATA SET                 *
*                                                          *
************************************************************
         SPACE
LEVALLOC L     R3,LVLSTINF         POINT TO PRIMING ATTRIBUTES MODEL
         LTR   R3,R3               POINTING TO AN ENTRY?
         BNZ   *+8                 YES, GOOD
         LA    R3,LEVDSATR         NO, RENDER COPY A NO-OP
         MVC   LEVDSATR,0(R3)      YES, COPY THE ENTRY TO MODEL
         LA    R1,LEVDSATR         POINT TO MODEL DATA
         L     R15,=A(REVCREAT)    POINT TO ROUTINE ENTRY POINT
         BASR  R14,R15             PERFORM DATA SET CREATION
         XC    LVLSTINF,LVLSTINF   RETAIN UPDATED ATTRIBUTES
         B     RELEVEL             GO REQUEST NEXT INPUT
         SPACE
************************************************************
*                                                          *
*         CREATE DATA SET LIST ARRAY FROM VTOC ENTRIES     *
*                                                          *
************************************************************
         SPACE
LVTCDSNS MVI   MSG,161             NO DATA SETS FOUND
         ICM   R15,15,KOUNT        GET THE LABEL ELEMENT COUNT
         BZ    LEVTOCNL            NONE FOUND SO REPROMPT
         MVI   MSG,0               CLEAR ERROR MESSAGE
         LA    R1,LVASIZ           GET INTERNAL ENTRY LENGTH
         MR    R0,R15              GET TOTAL ARRAY SIZE
         ST    R1,LVARAYSZ         SAVE IT
         LR    R0,R1               COPY THE SIZE
         MVI   GETMNTRC,45         TRACK GETMAIN IN CASE OF FAILURE
         GETMAIN RC,LV=(0),LOC=(31,64)
         LTR   R15,R15             ACQUIRED STORAGE FOR THE ARRAY?
         BNZ   LEVTOCLN            NO, CLEANUP STORAGE USED SO FAR
         ST    R1,LVARAYAD         SAVE THE ADDRESS OF THE ARRAY
         ST    R1,LVATOPAD         START WITH FIRST AT THE TOP
         LR    R14,R1              POINT TO THE NEW AREA
         L     R15,LVARAYSZ        GET ITS SIZE
         SR    R3,R3               ZERO PAD AND LENGTH
         MVCL  R14,R2              ZERO THE NEW AREA
         XC    LVTOTALS,LVTOTALS   ZERO DATA SET TOTALS
         LA    R0,LEVHDGL+1        GET COLUMNS THAT COULD BE SHOWN
         S     R0,SCRNCOLS         GET UPPER LIMIT TO COLUMN CREEP
         BNM   LEVTOCRP            ENSURE CREEP NOT NEGATIVE
         SR    R0,R0
LEVTOCRP STH   R0,LEVCREEP         SAVE IT
         A     R0,SCRNCOLS         GET EFFECTIVE DISPLAY COVERAGE
         LA    R15,LEVHDGL+1       GET MAXIMUM COVERAGE POSSIBLE
         SR    R15,R0              GET MISSING COVERAGE
         XC    LOCBUF(256),LOCBUF  CLEAR A TRANSLATE TABLE
         MVI   LOCBUF+C' ',C' '    PREPARE BLANK SEARCH TABLE
         LR    R3,R1               POINT TO ARRAY START
         SR    R6,R6               RESET SEQUENCE NUMBER
         L     R4,LVLBLCHN         POINT TO FIRST CHAINED LABEL
         USING LVAENT,R3
LVARAYLP LA    R6,1(,R6)           INCREMENT SEQUENCE NUMBER
         ST    R6,LVASEQ           STORE IT IN ENTRY
         MVI   LVATYP,C'@'         FLAG ENTRY DIRECT FROM VTOC
         MVC   LVADSN,4(R4)        LOAD DATA SET NAME
         MVC   LVDSCB(96),48(R4)   COPY DATA PART OF DSCB
         LA    R1,LVADSN+44        PREPARE FOR FULL-LENGTH NAME
         TRT   LVADSN,LOCBUF       SEARCH FOR BLANK
         LA    R0,LVADSN
         SR    R1,R0
         STH   R1,LVADSNL          SAVE IT
         LA    R0,44               GET TRAILING BLANK COUNT
         SR    R0,R1               IT IS ALSO THE LENGTH TO CREEP LEFT
         CH    R0,LEVCREEP         WILL NAME FIT?
         BNL   *+8                 YES
         STH   R0,LEVCREEP         WELL, IT WILL NOW
         LR    R1,R13              POINT TO WORKING STORAGE
         L     R15,=A(LOCOBTN)     POINT TO ROUTINE
         BASR  R14,R15             LOAD REST OF DATA SET DETAILS
         LA    R3,LVAEND           POINT TO NEXT ARRAY ENTRY
         LR    R1,R4               POINT TO THIS LABEL ELEMENT
         L     R4,0(,R4)           POINT TO NEXT LABEL ELEMENT
         ST    R4,LVLBLCHN         MAKE IT THE NEW CHAIN ORIGIN
         LA    R0,144              GET THE CHAINED ELEMENT SIZE
         FREEMAIN RU,LV=(0),A=(1)  FREE THIS ELEMENT
         LTR   R4,R4               LOADED ALL ENTRIES?
         BNZ   LVARAYLP            NO
         ST    R3,LVAENDAD         YES, SAVE ADDRESS PAST ARRAY
         ST    R3,LVTOPACT         NO ACTION CODES EARLIER THAN THIS
         DROP  R3                  LVAENT
         ST    R6,LEVLROWS         SAVE THE NUMBER OF ARRAY ROWS
         BAS   R14,LEVALIGN        ALIGN DISPLAY COLUMN TO RIGHT EDGE
         SPACE
************************************************************
*                                                          *
*         REDDEN SELECTED DATA SETS IN SPACE MAP PLOT      *
*                                                          *
************************************************************
         SPACE
*  FOR A VTOC DATA SET LIST, WHEN A DATA SET NAME PREFIX HAS
*  ALSO BEEN SPECIFIED AND A VOLUME SPACE MAP PLOT IS BEING
*  CONSTRUCTED, EACH FORMAT-3 DSCB OBTAINED BY THE LOCOBTN
*  ROUTINE HAS BEEN STORED ON A CHAIN ANCHORED FROM LVLF3CHN.
*
*  LOCOBTN ONLY PROCESSES DSCBS RELATING TO SELECTED DATA SETS.
*
*  SO, BY PASSING THESE SAVED FORMAT-3 DSCBS TO LEVOLPLT
*  AGAIN, THEIR EXTENTS WILL BE DEEMED OVERLAPS AND WILL BE
*  COLOURED RED.  BY THIS MECHANISM, *ALL* DISK SPACE (WITHIN
*  THE AREA COVERED BY THE PLOT) ALLOCATED TO DATA SETS PASSING
*  THE PREFIX FILTER WILL BE SHOWN IN RED.
*
         SPACE
LEVREDLP ICM   R6,15,LVLF3CHN      POINT TO SAVED FORMAT-3 ELEMENT
         BZ    LEVLSAME            NONE, SO GO SHOW THE DATA SET LIST
         LA    R1,4(,R6)           POINT TO DSCB COUNT-KEY-DATA
         L     R15,=A(LEVOLPLT)    GET PLOT ROUTINE ADDRESS
         BASR  R14,R15             INVOKE IT
         LR    R1,R6               POINT TO PROCESSED ELEMENT
         MVC   LVLF3CHN,0(R6)      SAVE NEXT ELEMENT ADDRESS
         LA    R0,4+8+140          GET ELEMENT SIZE
         FREEMAIN RU,LV=(0),A=(1)  FREE THIS ELEMENT
         B     LEVREDLP            GO FREE NEXT ELEMENT
         EJECT
************************************************************
*                                                          *
*         DATA SET PREFIX PROMPT SUBCOMMAND TABLE          *
*                                                          *
************************************************************
         SPACE
LEVINTAB DC    0F'0'              ENTRIES MUST BE IN COLLATING SEQUENCE
         DC    CL8'=X      '
         B     LEVEXIT
         DC    CL8'A       '
         B     LEVALLOC
         DC    CL8'ALLOC   '
         B     LEVALLOC
         DC    CL8'CAN     '
         B     LEVCAN
         DC    CL8'CANCEL  '
         B     LEVCAN
         DC    CL8'END     '
         B     LEVEXIT
         DC    CL8'EXIT    '
         B     LEVEXIT
         DC    CL8'RETURN  '
         B     LEVEXIT
         DC    F'-1'               END OF TABLE
         SPACE
LVATTCHS ATTACH EP=REVLVTSK,LPMOD=1,ECB=,SZERO=NO,SF=L
LVATTCHL EQU   *-LVATTCHS
         SPACE
LVLEGHDG DC    CL24'DATA SET SELECTION CODES'
LVLEGDTL DC    CL20'A - ALLOCATE LIKE   '
         DC    CL20'B - BROWSE          '
         DC    CL20'C - CATALOG         ',X'FE'
         DC    CL20'D - DELETE          '
         DC    CL20'E - EDIT            '
         DC    CL20'I - INFO            ',X'FE'
         DC    CL20'L - LISTCAT         '
         DC    CL20'R - RENAME          '
         DC    CL20'S - SHORT INFO      ',X'FE'
         DC    CL20'U - UNCATALOG       '
         DC    CL20'V - VIEW            '
         DC    CL20'Z - COMPRESS        ',X'FF'
         SPACE
         DC    0D'0'
         LTORG
         SPACE
         DC    0D'0'
         SPACE
LEVLWRCS DC    193AL1(*-LEVLWRCS)
         DC    9AL1(*-LEVLWRCS-64) A-I
         DC    7AL1(*-LEVLWRCS)
         DC    9AL1(*-LEVLWRCS-64) J-R
         DC    8AL1(*-LEVLWRCS)
         DC    8AL1(*-LEVLWRCS-64) S-Z
         DC    22AL1(*-LEVLWRCS)
         SPACE
         DROP  R11,R10,R8          REVLEVL
         DROP  R13                 @LVLWORK
         EJECT
         TITLE '  R E V L E V L   -   S P A C E   M A P   P L O T  '
**********************************************************************
*                                                          *         *
*         PLOT DASD VOLUME SPACE MAP                       *  R43.0  *
*                                                          * 2010FEB *
**********************************************************************
         SPACE
**********************************************************************
*                                                                    *
*        THIS ROUTINE CREATES A RECTANGULAR PIXEL ARRAY TO           *
*        REPRESENT THE SPACE USAGE OF A DASD VOLUME.                 *
*                                                                    *
*        IT IS PASSED EACH RELEVANT DSCB IN TURN, FILLING IN         *
*        THE ARRAY PIXELS THAT ARE USED BY THE EXTENTS DESCRIBED     *
*        BY THE DSCB.                                                *
*                                                                    *
*        ARRAY FEASIBILITY AND INITIALIZATION IS PERFORMED WHEN      *
*        THE FORMAT-4 DSCB IS SUPPLIED, WHICH SHOULD BE THE FIRST    *
*        DSCB IN THE VTOC.                                           *
*                                                                    *
*        720 PIXELS CAN BE PLOTTED ACROSS THE SCREEN.  THIS          *
*        ROUTINE LIMITS THE DISPLAY TO DATA FOR TWO SCREEN LINES.    *
*                                                                    *
*        HENCE, A MAXIMUM OF 32 TRACKS PER CYLINDER IS SUPPORTED.    *
*                                                                    *
*        IF THERE ARE FEWER THAN 16 TRACKS PER CYLINDER THEN THE     *
*        ALLOWED CYLINDER COUNT IS DOUBLED, AND THE EXTRA WIDTH      *
*        IS WRAPPED AROUND TO THE SECOND LINE, GIVING AT LEAST       *
*        ONE ROW OF DARK PIXELS TO SEPARATE THE PLOTTED DATA OF      *
*        THE TWO LINES.                                              *
*                                                                    *
**********************************************************************
         SPACE
**********************************************************************
*                                                                    *
* REGISTERS ON ENTRY: R9 -> @DATA                                    *
*                     R13-> LEVLSAVE                                 *
*                     R14-> RETURN ADDRESS                           *
*                     R15-> LEVOLPLT                                 *
*                     R1 -> DSCB COUNT, KEY AND DATA                 *
*                                                                    *
* DURING PROCESSING:  R7 -> LEVOLPLT                                 *
*                     R13-> LEVLSAV2                                 *
*                                                                    *
* ALL REGISTERS ARE RESTORED ON EXIT.                                *
*                                                                    *
**********************************************************************
         SPACE
         USING LEVOLPLT,R7
LEVOLPLT STM   R14,R12,12(R13)     SAVE REGISTERS
         LR    R7,R15              SET LOCAL BASE
         LA    R2,72(,R13)         POINT TO LEVLSAV2
         ST    R13,4(,R2)          CHAIN SAVE AREAS
         ST    R2,8(,R13)
         LR    R13,R2              POINT TO NEW SAVE AREA
         USING LEVLSAV2,R13
         SPACE
         CLI   8+44(R1),C'3'       FORMAT-3 DSCB?
         BE    LEVPLOT3            YES
         CLI   8+44(R1),C'4'       FORMAT-4 DSCB?
         BE    LEVPLOT4            YES
         CLI   8+44(R1),C'5'       FORMAT-5 DSCB?
         BE    LEVPLOT5            YES
         SPACE
*         FORMAT-1 DSCB (AND FORMAT-8 DSCB)
         MVC   MYDSCB(96),8+44(R1) ALLOW EASY ACCESS TO DS1 FIELDS
         CLI   DOUBLE,X'02'        PASSED PREFIX SELECTION?
         BE    LEVOLMON            YES, ALREADY COLOURED RED
         LA    R0,X'0000FF'
         CLM   R0,7,DS1LSTAR       OS CATALOG?
         BNE   LEVOLGRN            NO
         CLC   =CL8'SYSCTLG',8(R1)
         BE    LEVOLPNK            YES, SHOW AS PINK
LEVOLGRN MVI   DOUBLE,X'04'        GREEN FOR NON-VSAM
         TM    DS1DSORG,DS1DSGIS+DS1DSGDA+DS1DSGU
         BZ    *+8                 NOT DIRECT, ISAM OR UNMOVABLE
LEVOLPNK MVI   DOUBLE,X'03'        PINK IF IT IS
         TM    DS1DSORG+1,DS1ACBM  VSAM?
         BZ    LEVOLMON            NO
         MVI   DOUBLE,X'05'        TURQUOISE IF IT IS
LEVOLMON CLI   PICOLRES+3,1        MONOCHROME?
         BNE   *+8                 NO
         MVI   DOUBLE,X'01'        YES
         LA    R0,3                GET MAXIMUM EXTENT COUNT
         LA    R1,DS1EXT1          POINT TO FIRST EXTENT
LVOLXLP1 CLI   0(R1),0             OCCUPIED EXTENT DESCRIPTOR?
         BE    LEVOLPLX            NO, DSCB NOW PROCESSED
         BAS   R14,LEVOLEXT        YES, GO PLOT IT
         LA    R1,10(,R1)          POINT TO NEXT EXTENT DESCRIPTOR
         BCT   R0,LVOLXLP1         GO PROCESS IT
         B     LEVOLPLX            DSCB NOW PROCESSED
         SPACE
*         FORMAT-3 DSCB
LEVPLOT3 MVI   DOUBLE,X'06'        YELLOW FOR FORMAT-3 SECONDARIES
         CLI   PICOLRES+3,1        MONOCHROME?
         BNE   *+8                 NO
         MVI   DOUBLE,X'01'        YES
         LA    R0,4                GET MAXIMUM EXTENT COUNT IN KEY
         LA    R1,8+4(,R1)         POINT TO FIRST EXTENT DESCRIPTOR
LVOLXLP2 CLI   0(R1),0             OCCUPIED EXTENT DESCRIPTOR?
         BE    LEVOLPLX            NO, DSCB NOW PROCESSED
         BAS   R14,LEVOLEXT        YES, GO PLOT IT
         LA    R1,10(,R1)          POINT TO NEXT EXTENT DESCRIPTOR
         BCT   R0,LVOLXLP2         GO PROCESS IT
         LA    R0,13               GET MAXIMUM EXTENT COUNT IN DATA
         LA    R1,1(,R1)           SKIP OVER DS3FMTID (WHICH IS A '3')
LVOLXLP3 CLI   0(R1),0             OCCUPIED EXTENT DESCRIPTOR?
         BE    LEVOLPLX            NO, DSCB NOW PROCESSED
         BAS   R14,LEVOLEXT        YES, GO PLOT IT
         LA    R1,10(,R1)          POINT TO NEXT EXTENT DESCRIPTOR
         BCT   R0,LVOLXLP3         GO PROCESS IT
         B     LEVOLPLX            DSCB NOW PROCESSED
         SPACE
*         FORMAT-4 DSCB
LEVPLOT4 MVC   MYDSCB(96),8+44(R1) ALLOW EASY ACCESS TO DS4 FIELDS
         SR    R15,R15
         ICM   R15,3,DS4DEVSZ+2    GET TRACKS PER CYLINDER
         BNP   LEVOLPLX            SKIP PLOT IF NOT SENSIBLE
         STH   R15,LVLTRKPC        NO SUBTASK CLASH SO SET FOR FMT5S
         CLI   SYMSTGF,0           LOADABLE SYMBOLS SUPPORTED?
         BE    LEVOLPLX            NO, SKIP PLOT
         CLI   DS4DEVSZ+2,0        MORE THAN 255 TRACKS PER CYLINDER?
         BNE   LEVOLPLX            YES, SKIP PLOT
         CLI   DS4DEVSZ+3,32       MORE THAN 32 TRACKS PER CYLINDER?
         BE    LEVOLPLX            YES, SKIP PLOT
         SR    R14,R14
         ICM   R14,3,DS4HCCHH      GET CYLINDER OF NEXT ALT TRACK
         ICM   R0,3,DS4NOATK       ANY ALTERNATES?
         BNZ   *+8                 YES
         ICM   R14,3,DS4DEVSZ      NO, GET VOLUME CYLINDER COUNT
         LA    R0,9*80             GET PLOT CYLINDER MAXIMUM
         CLI   DS4DEVSZ+3,15       MORE THAN 15 TRACKS PER CYLINDER?
         BH    *+6                 YES, HAVE CYLINDER LIMIT
         AR    R0,R0               NO, CAN HAVE TWO SCREEN LINES
         CR    R15,R0              TOO MANY CYLINDERS?
         BNH   *+6                 NO, GOOD
         LR    R15,R0              YES, JUST SHOW UP TO 2 LINES
         STM   R14,R15,X_Y_PELS    SAVE PIXEL DIMENSIONS
         MR    R14,R14             GET PIXEL COUNT
         ST    R15,PICPELCT        SAVE IT
         LA    R0,7(,R15)
         SRL   R0,3
         SLL   R0,3                ROUND UP TO DOUBLEWORD BOUNDARY
         ST    R0,PICSTGSZ         SAVE ARRAY STORAGE SIZE
         MVI   GETMNTRC,46         TRACK GETMAIN IN CASE OF FAILURE
         GETMAIN RC,LV=(0),SP=17,LOC=(31,64)
         LTR   R15,R15             STORAGE ACQUIRED?
         BNZ   LEVOLPLZ            NO, SKIP PLOT
         ST    R1,LEVPLOT@         YES, SAVE ITS ADDRESS
         A     R1,PICPELCT         POINT PAST ARRAY
         ST    R1,PICENDAD         SAVE THIS ADDRESS
         MVI   PICOLRES+3,1        INDICATE MONOCHROME
         CLI   SYMSTG3,0           TRIPLE-PLANE AVAILABLE?
         BE    LEVRWSOK            NO, MAKE DO WITH MONOCHROME
         MVI   PICOLRES+3,3        YES, FLAG THIS
         OI    PICFLAGS,PICNBW     ENSURE NO SHORTCUTS ON OUTPUT
LEVRWSOK L     R15,X_PELS          GET PICTURE PIXEL WIDTH
         SR    R14,R14             CLEAR FOR DIVIDE
         LA    R15,8(,R15)         ROUND UP TO CHARACTER CELL
         LA    R0,9                GET CHARACTER CELL PIXEL WIDTH
         DR    R14,R0              GET WIDTH IN CHARACTERS
         STH   R15,X_BYTES         SAVE IT
         L     R14,Y_PELS          GET HEIGHT IN PIXELS
         LA    R14,15(,R14)        ROUND UP TO CHARACTER CELL
         SRA   R14,4               GET HEIGHT IN CHARACTERS
         STH   R14,Y_BYTES         SAVE IT
         MR    R14,R14             GET MAXIMUM SYMBOL COUNT
         ST    R15,X_Y_SYMS        SAVE IT
         MVI   DOUBLE,X'07'        WHITE FOR VTOC
         CLI   PICOLRES+3,1        MONOCHROME?
         BNE   *+8                 NO
         MVI   DOUBLE,X'01'        YES
         L     R1,LEVPLOT@         POINT TO PIXEL ARRAY
         MVC   0(1,R1),DOUBLE      COLOUR VOLUME LABEL TRACK 0 AS VTOC
         LA    R1,DS4VTOCE         POINT TO FIRST EXTENT
         BAS   R14,LEVOLEXT        PROCESS AN EXTENT
         B     LEVOLPLX            DSCB NOW PROCESSED
         SPACE
*         FORMAT-5 DSCB
LEVPLOT5 MVI   DOUBLE,X'01'        BLUE FOR FREE SPACE
         LA    R0,8                GET MAXIMUM EXTENT COUNT IN KEY
         LA    R1,8+4(,R1)         POINT TO FIRST EXTENT DESCRIPTOR
LVOLXLP4 OC    0(5,R1),0(R1)       OCCUPIED EXTENT DESCRIPTOR?
         BZ    LEVOLPLX            NO, DSCB NOW PROCESSED
         BAS   R14,LEVOLFRE        YES, GO PLOT IT
         LA    R1,5(,R1)           POINT TO NEXT EXTENT DESCRIPTOR
         BCT   R0,LVOLXLP4         GO PROCESS IT
         LA    R0,18               GET MAXIMUM EXTENT COUNT IN DATA
         LA    R1,1(,R1)           SKIP OVER DS5FMTID (WHICH IS A '5')
LVOLXLP5 OC    0(5,R1),0(R1)       OCCUPIED EXTENT DESCRIPTOR?
         BZ    LEVOLPLX            NO, DSCB NOW PROCESSED
         BAS   R14,LEVOLFRE        YES, GO PLOT IT
         LA    R1,5(,R1)           POINT TO NEXT EXTENT DESCRIPTOR
         BCT   R0,LVOLXLP5         GO PROCESS IT
         B     LEVOLPLX            DSCB NOW PROCESSED
         SPACE
*         SPACE MAP PLOT OF DSCB NOW COMPLETE
LEVOLPLZ XC    PICDTLS(PICDTLEN),PICDTLS
LEVOLPLX MVI   MYDSCB,X'FF'        INVALIDATE ANY STORED DSCB IMAGE
         L     R13,4(,R13)         POINT BACK TO LEVLSAVE
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER
         SPACE
*
*         PROCESS EXTENT TO DETERMINE PLOT PIXELS
*
         SPACE
LEVOLEXT CLI   4(R1),0             CHECK START HHHH FOR EAS
         BNER  R14                 EAS WAY BEYOND PLOTABLE AREA
         CLI   LVLTRKPC+1,15       POSSIBLE EAV?
         BNE   LVNOTEAV            NO, DO NOT PLOT THIS EXTENT
         CLI   5(R1),15            VALID START HEAD?
         BNLR  R14                 NO, DO NOT PLOT THIS EXTENT
LVNOTEAV CLC   2(4,R1),6(R1)       IS START CCHH AFTER END CCHH?
         BHR   R14                 YES, LOOKS INVALID SO EXIT
         SPACE
         STM   R14,R12,12(R13)     GO FOR PLOT - SAVE REGISTERS
         ICM   R2,15,2(R1)         LOAD EXTENT START
         ICM   R4,15,6(R1)         LOAD EXTENT END
         SRDL  R2,16               GET START CC
         SRDL  R4,16               GET END CC
         SRL   R3,16               GET START HH
         SRL   R5,16               GET END HH
         LR    R6,R3               COPY START HH
         MH    R6,X_PELS+2         MULTIPLY BY PLOT WIDTH
         AR    R6,R2               ADD START CC TO GET FIRST PLOT POINT
         SR    R4,R2               GET NUMBER OF CYLS
         SR    R5,R3               GET DIFF. OF TRACKS
         MH    R4,LVLTRKPC         CONVERT CYL TO TRK
         AR    R4,R5               GET TOTAL (LESS 1)
         LA    R0,1(,R4)           GET NUMBER OF TRACKS IN EXTENT
         SPACE
*
*         PLOT AN EXTENT           PLOT PIXEL CODE STORED IN 'DOUBLE'
*
         SPACE
LVPLTPEL A     R6,LEVPLOT@         GET FIRST PLOT ARRAY ELEMENT ADDRESS
         C     R6,PICENDAD         START BEYOND PLOTABLE AREA?
         BNLR  R14                 YES, PLOT OF EXTENT FINISHED
         IC    R3,DOUBLE           NO, LOAD PLOT CODE
LVPLTLP1 CLI   0(R6),0             BLACK PIXEL?
         BE    LVPLT1ST            YES, FIRST USE OF THIS PIXEL
         CLI   PICOLRES+3,1        MONOCHROME?
         BE    LVPLT1ST            YES, CANNOT SHOW RED
         MVI   0(R6),X'02'         NO, SHOW RED FOR EXTENT OVERLAP
         B     *+8                 DO NOT OVERLAY THE RED SETTING
LVPLT1ST STC   R3,0(,R6)           PLOT A TRACK
         A     R6,X_PELS           POINT TO NEXT TRACK
         C     R6,PICENDAD         GONE BEYOND PICTURE?
         BL    LVPLTNX1            NO, CONTINUE
         S     R6,PICPELCT         YES, BACK TO CYLINDER START
         LA    R6,1(,R6)           NOW POINT TO NEXT CYLINDER
         C     R6,PICENDAD         STILL BEYOND PICTURE?
         BNL   *+8                 YES, PLOT OF EXTENT FINISHED
LVPLTNX1 BCT   R0,LVPLTLP1         GO PLOT NEXT TRACK
LVPLTXIT LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 PLOT OF EXTENT FINISHED
         SPACE
*
*         PROCESS FREE EXTENT TO DETERMINE PLOT PIXELS
*
         SPACE
*        IF PROCESSING A REAL FORMAT-5 DSCB THEN
*           (1) THE VTOC IS NOT INDEXED.
*           (2) EAS CANNOT BE IN THE EXTENT BEING PROCESSED.
*           (3) THE EXTENT CANNOT BE BEYOND THE FIRST 64K
*               TRACKS, LET ALONE THE FIRST 64K CYLINDERS.
         SPACE
LEVOLFRE STM   R14,R12,12(R13)     GO FOR PLOT - SAVE REGISTERS
         SR    R3,R3               CLEAR FOR INSERT
         ICM   R3,3,0(R1)          LOAD START RELATIVE TRACK
         SR    R2,R2               CLEAR FOR DIVIDE
         LH    R0,LVLTRKPC         LOAD TRACKS PER CYLINDER
         DR    R2,R0               GET START CYLINDER AND HEAD
         LR    R6,R2               COPY START HH
         MH    R6,X_PELS+2         MULTIPLY BY PLOT WIDTH
         AR    R6,R3               ADD START CC TO GET FIRST PLOT POINT
         ICM   R3,3,2(R1)          LOAD UNUSED CYLINDER COUNT
         L     R15,LVFRECYL        LOAD FREE CYLINDER TOTAL
         AR    R15,R3              GET THE NEW TOTAL
         ST    R15,LVFRECYL        SAVE IT
         MR    R2,R0               CONVERT THIS TO TRACKS
         IC    R0,4(R1)            LOAD EXTRA UNUSED TRACK COUNT
         AR    R0,R3               GET TRACK COUNT IN FREE EXTENT
         L     R15,LVFRETRK        LOAD FREE CYLINDER TOTAL
         AR    R15,R0              GET THE NEW TOTAL
         ST    R15,LVFRETRK        SAVE IT
         LA    R15,1
         A     R15,LVFREEXT        GET NEW FREE EXTENT COUNT
         ST    R15,LVFREEXT        SAVE IT
         ICM   R15,15,LEVPLOT@     ANY DISK MAP PLOT IN PROGRESS?
         BZ    LVPLTXIT            NO, RETURN
         CLI   PICOLRES+3,1        MONOCHROME?
         BE    LVPLTXIT            YES, LEAVE BLACK SO DO NOT PLOT
         B     LVPLTPEL            GO PLOT FREE TRACKS
         SPACE
         DC    0D'0'
         SPACE
         DROP  R7                  LEVOLPLT
         DROP  R9                  @DATA
         DROP  R13                 LEVLSAV2
         TITLE '  R E V L V T S K  '
**********************************************************************
*                                                          *         *
*         SUBTASK TO COMPLETE DATA SET DETAILS ARRAY       *  R43.0  *
*                                                          * 2009APR *
**********************************************************************
         SPACE
**********************************************************************
*                                                                    *
*        REVLVTSK RUNS AS AN ASYNCHRONOUS SUBTASK OF THE MAIN        *
*        TASK TO USE USER THINK TIME TO COMPLETE ENTRIES IN          *
*        THE DATA SET INFORMATION ARRAY.                             *
*                                                                    *
*        IT SCANS THE ARRAY, CALLING THE LOCOBTN ROUTINE TO          *
*        PROCESS ENTRIES NOT YET COMPLETE.  IT STOPS AT THE          *
*        END OF THE ARRAY.                                           *
*                                                                    *
*        ENTRIES SHOWN ON THE FIRST PAGE ARE COMPLETED BY THE        *
*        MAIN TASK (WHICH ALSO CALLS LOCOBTN ROUTINE) BEFORE         *
*        ATTACHING THIS SUBTASK SO IT IS IMMEDIATELY ABLE TO         *
*        DISPLAY THE FIRST PAGE AND RECEIVE USER INPUT.              *
*                                                                    *
*        THE MAIN TASK CAN MAKE THE SUBTASK TERMINATE BEFORE         *
*        ALL ARRAY ENTRIES HAVE BEEN PROCESSED BY LOWERING           *
*        (ZEROING IS SIMPLEST) THE END-OF-ARRAY ADDRESS.             *
*                                                                    *
*        NO (NON-SYSTEM) GETMAIN (OR FREEMAIN) REQUESTS ARE          *
*        MADE BY THIS SUBTASK, SO THE MAIN TASK WORKING STORAGE      *
*        ADDRESS IS PASSED TO THIS SUBTASK SO THAT THE LOCOBTN       *
*        ROUTINE CAN ACCESS ITS WORK AREA.                           *
*                                                                    *
*        THIS SUBTASK RUNS AT A LOWER DISPATCHING PRIORITY           *
*        THAN THE MAIN TASK SO THAT THE MAIN TASK REMAINS            *
*        RESPONSIVE TO USER INPUT.                                   *
*                                                                    *
*        REVLEVL MUST DETACH THIS SUBTASK BEFORE EXITING.            *
*                                                                    *
**********************************************************************
         SPACE
**********************************************************************
*                                                                    *
* REGISTERS ON ENTRY: R1 -> @LVLWORK                                 *
*                     R13-> TASK FIRST SAVE AREA                     *
*                     R15-> REVLVTSK                                 *
*                                                                    *
* DURING PROCESSING:  R3 -> LVAENT                                   *
*                     R13-> TASK FIRST SAVE AREA                     *
*                                                                    *
* RETURN CODES:       R15 = 0  PROCESSING COMPLETE                   *
*                                                                    *
**********************************************************************
         SPACE
REVLVTSK B     @LEVTASK-*(,R15)
         DC    AL1(9),CL9'REVLVTSK'
@LEVTASK LR    R11,R15             SET BASE
         USING REVLVTSK,R11
         USING @LVLWORK,R1
         AIF   (&ENV390).NOTXA3
         TM    LVARAYAD,X'7F'      IS THE ARRAY ABOVE THE LINE?
         BZ    LTSKAMOK            NO, AMODE IS SUFFICIENT
         LA    R0,1                YES
         SLL   R0,31               GET AMODE BIT
         LA    R14,LTSKAMOK
         OR    R14,R0              SET AMODE BIT
*        BSM   0,R14               SWITCH TO AMODE=31
         DC    Y(X'0B0E')
LTSKAMOK DS    0H
.NOTXA3  ANOP
         L     R3,LVARAYAD         POINT TO DATA SET LIST ARRAY
         USING LVAENT,R3
         SPACE
LTSKLOOP TM    LVAFLG,$LFLOC       THIS ENTRY ALREADY COMPLETE?
         BO    LTSKNEXT            YES
         LA    R15,LOCOBTN         POINT TO LOCATE/OBTAIN ROUTINE
         BASR  R14,R15             GET DETAILS
LTSKNEXT LA    R3,LVAEND           POINT TO NEXT ARRAY ENTRY
         C     R3,LVAENDAD         PROCESSED LAST ENTRY YET
         BL    LTSKLOOP            NO, KEEP GOING
         DROP  R3                  LVAENT
         SPACE
LTSKEXIT SR    R15,R15             ALWAYS SUCCESSFUL
         SVC   3                   TERMINATE TASK
         SPACE
         DROP  R1                  @LVLWORK
         DROP  R11                 @LEVTASK
         TITLE '  L O C O B T N  '
**********************************************************************
*                                                          *         *
*         PERFORM LOCATE AND OBTAIN FOR ARRAY DATA SETS    *  R43.0  *
*                                                          * 2009APR *
**********************************************************************
         SPACE
**********************************************************************
*                                                                    *
*        THIS ROUTINE CAN BE CALLED FROM REVLEVL IN THE MAIN         *
*        TASK, OR FROM REVLVTSK RUNNING AS A SUBTASK, BUT NEVER      *
*        MORE THAN ONE INSTANCE OF THIS ROUTINE WILL EVER BE         *
*        RUNNING AT ONCE FOR A GIVEN REVLEV LOGICAL SESSION,         *
*        SO MULTITASKING SERIALIZATION IS NOT REQUIRED.              *
*                                                                    *
**********************************************************************
         SPACE
**********************************************************************
*                                                                    *
* REGISTERS ON ENTRY: R1 -> @LVLWORK                                 *
*                     R3 -> LVAENT                                   *
*                     R13-> SAVE AREA                                *
*                     R14-> RETURN ADDRESS                           *
*                     R15-> LOCOBTN                                  *
*                                                                    *
* DURING PROCESSING:  R3 -> LVAENT                                   *
*                     R4 -> @LVLWORK                                 *
*                     R7 -> VOLSER+UCBTYP                            *
*                     R11-> LOCOBTN                                  *
*                                                                    *
* ALL REGISTERS ARE RESTORED ON EXIT.                                *
*                                                                    *
**********************************************************************
         SPACE
         USING LOCOBTN,R11
         USING @LVLWORK,R4
         USING LVAENT,R3
LOCOBTN  STM   R14,R12,12(R13)     SAVE REGISTERS
         LR    R11,R15             SET PROGRAM BASE
         LR    R4,R1               SET WORKING STORAGE BASE
         MVC   LEVLOCOB,LEVLOCS    SET SVC REQUEST CODE
         MVC   LEVLOCDS,LVADSN     SET NAME TO LOCATE
         XC    LVLOCBF(12),LVLOCBF CLEAR RESIDUAL DATA
         LA    R0,LEVLOCDS         SET ADDRESS OF NAME TO LOCATE
         ST    R0,LEVLOCOB+4
         LA    R0,LVLOCBF          SET ANSWER AREA ADDRESS FOR LOCATE
         ST    R0,LEVLOCOB+12
         LOCATE LEVLOCOB           RETRIEVE CATALOG ENTRY
         MVC   LVALOC,LVLOCBF      COPY RETRIEVED DATA
         STC   R15,LVALOC          SAVE LOCATE RETURN CODE
         CLI   LVATYP,CTGTANM      ALIAS ENTRY?
         BNE   LOCOBTN2            NO, LOCATE SUCCESSFULLY PROCESSED
         MVC   LVAREAL,LEVLOCDS    YES, COPY REAL NAME
         B     LOCOBTNX            ENTRY PROCESSED
         SPACE
LOCOBTN2 CLI   LVATYP,C'@'         DATA SET LIST FROM VTOC?
         BNE   LOCOBTN3            NO, GO PROCESS CATALOG ENTRY
         CLI   LVALOC,0            SUCCESSFUL LOCATE?
         BNE   LOCUNCAT            NO, UNCATALOGED DATA SET
         LH    R1,LVLOCBF          GET THE VOLUME COUNT
         LTR   R1,R1
         BNP   LOCUNCAT            SILLY VALUE SO AS IF NOT CATALOGED
         LA    R0,20               GET THE MAXIMUM COUNT TO PROCESS
         CR    R1,R0               TOO BIG TO HANDLE?
         BNH   *+8                 NO
         LA    R1,20               YES, REDUCE TO MAXIMUM
         LA    R7,LVLOCBF+2        POINT TO THE FIRST ENTRY
LOCVCKLP CLC   LEVELVOL,4(R7)      CATALOGED ON THIS VOLUME?
         BNE   LOCVCKNX            NO VOLUME MATCH YET
         CLC   2(2,R7),LEVELTYP+2  CORRECT TYPE OF DASD?
         BE    LOCOBTN3            YES, DATA SET IS CATALOGED HERE
         TM    2(R7),X'20'+X'80'   CATALOGED ON DASD OR TAPE?
         BNZ   LOCUNCAT            YES, WRONG TYPE SO IGNORE CATALOG
         B     LOCOBTN3            ON ESOTERIC SO ASSUME THIS IS IT
LOCVCKNX LA    R7,12(,R7)          POINT TO NEXT ENTRY FROM LOCATE
         BCT   R1,LOCVCKLP         CONTINUE VOLUME CHECK
         SPACE
LOCUNCAT OI    LVAFLG,$UNCAT       THIS DATA SET IS UNCATALOGED
         LA    R0,1
         STH   R0,LVAVOL#          SAY SINGLE VOLUME DATA SET
         MVC   LVADEV,LEVELTYP     LOAD UCB DEVICE TYPE
         MVC   LVAVOL,LEVELVOL     LOAD VOLUME SERIAL NUMBER
         MVC   LVLOCBF(12),LVALOC  COPY CONSTRUCTED DATA
         B     LOCOBTN4            LVALOC ZEROED WHEN LVAVOL# SET
         SPACE
LOCOBTN3 CLI   LVALOC,0            SUCCESSFUL LOCATE?
         BNE   LOCOBTNX            NO, SKIP OBTAIN
         NI    LVAFLG,255-$UNCAT   YES, RESET UNCATALOGED FLAG
         SPACE
*         LIMIT VTOC SEARCHES TO THE UP TO 20 VOLUMES IN LVLOCBF.
         SPACE
LOCOBTN4 XC    LVA0(LVA0L),LVA0    RESET VTOC SPACE ACCUMULATORS
         NI    LVAFLG,255-$LFOBT   RESET OBTAIN DONE FLAG
         LA    R7,LVLOCBF+2        POINT TO THE FIRST ENTRY
         LH    R1,LVLOCBF          GET THE VOLUME COUNT
         LTR   R1,R1
         BNP   LOCOBTNX            SILLY VALUE SO SKIP OBTAIN
         LA    R0,20               GET THE MAXIMUM COUNT TO PROCESS
         CH    R0,LVLOCBF          IS IT MORE THAN TWENTY?
         BNL   LOCVOLLP            NO, PROCEED
         LR    R1,R0               YES, ONLY LOOK AT TWENTY VTOCS
LOCVOLLP STH   R1,LVLVOLS#         SAVE REMAINING DATA SET VOLUME COUNT
         CLI   2(R7),X'20'         DASD DEVICE CLASS?
         BNE   LOCOBTF4            NO, NEED TO OBTAIN FORMAT-4 DSCB
         CLI   3(R7),X'00'         YES, SOMETHING KNOWN?
         BE    LOCOBTF4            NO, NEED TO OBTAIN FORMAT-4 DSCB
         CLI   3(R7),X'0F'         IN KNOWN RANGE?
         BH    LOCOBTF4            NO, NEED TO OBTAIN FORMAT-4 DSCB
         MVC   LVLTRKPC+1(1),3(R7) YES, COPY DEVICE TYPE BYTE
         TR    LVLTRKPC+1(1),LOCTPCTB
         SPACE
*         IF THE DATA SET LIST IS FROM A VTOC SEARCH
*            AND IF THE CATALOG ENTRY WAS FOUND AND DID NOT
*                   REPLACE THE DASD DEVICE TYPE WITH AN ESOTERIC ONE
*                OR THE DATA SET IS UNCATALOGED
*            AND IF THE VTOC SEARCH VOLUME IS THE DATA SET'S 1ST VOLUME
*         THEN THE DATA SET LABEL PROVIDED TO LOCOBTN IN LVDSCB
*              HAS NOT BEEN OVERLAID BY THE OBTAIN OF A FORMAT-4 DSCB
*              OR THE OBTAIN OF A DATA SET LABEL FROM AN EARLIER VOLUME
*         SO THE OBTAIN OF THE DATA SET LABEL CAN BE SKIPPED.
*
*         FOR VTOC SEARCHES, CHANCES ARE THAT MOST DATA SETS WILL FALL
*         INTO THIS CATEGORY, SO THE INDIVIDUAL OBTAINS FOR THE DATA
*         SET LABELS (FORMAT-1 AND FORMAT-8 DSCBS) WHICH WERE ALREADY
*         READ BY THE SEQUENTIAL VTOC READ ROUTINE REVTOCRD WILL NOT
*         HAVE TO BE REDONE.  SINCE FORMAT-3 DSCBS RETURNED BY REVTOCRD
*         ARE NOT RETAINED THESE WILL ALWAYS HAVE TO BE OBTAINED AGAIN
*         HERE - BUT THEY ONLY EXIST IF THE DATA SET HAS MORE THAN
*         THREE EXTENTS.
         SPACE
         CLI   LVATYP,C'@'         DATA SET LABEL ALREADY PROCURED?
         BNE   LOCTPCOK            NO, BUT NOW KNOW TRACKS PER CYLINDER
         CLC   LVLVOLS#,LVLOCBF    PROCESSING THE FIRST VOLUME?
         BNE   LOCTPCOK            NO, BUT NOW KNOW TRACKS PER CYLINDER
         CLC   LVAVOL,LEVELVOL     YES, BUT IS SUBJECT VOLUME FIRST?
         BNE   LOCTPCOK            NO, BUT NOW KNOW TRACKS PER CYLINDER
         TM    LVDSCB,9            FORMAT-1 OR FORMAT-8 DSCB PRESENT?
         BM    LOCOBORG            YES, LABEL NOT OVERLAID BY FORMAT-4
         B     LOCTPCOK            NO, GO OBTAIN DATA SET LABEL
LOCOBTF4 MVI   LEVLOCDS,X'04'      SET VTOC KEY
         MVC   LEVLOCDS+1(43),LEVLOCDS
         MVC   LEVLOCOB,LEVOBT1    SET SVC REQUEST CODE
         LA    R0,LEVLOCDS         SET VTOC SEARCH KEY ADDRESS
         ST    R0,LEVLOCOB+4
         LA    R0,4(R7)            SET VOLUME SERIAL NUMBER TO SEARCH
         ST    R0,LEVLOCOB+8
         LA    R0,LVDSCB           SET ANSWER AREA ADDRESS FOR OBTAIN
         ST    R0,LEVLOCOB+12
         OBTAIN LEVLOCOB           RETRIEVE VTOC ENTRY
         LTR   R15,R15             SUCCESS?
         BNZ   LOCOBTNX            NO, NO DATA TO PROCESS
         USING DS4IDFMT,LVDSCB
         MVC   LVLTRKPC,DS4DEVSZ+2 COPY TRACKS PER CYLINDER
         SPACE
LOCTPCOK MVC   LVATPC,LVLTRKPC+1   COPY TRACKS PER CYLINDER
         CLI   LEVLOCDS+15,C' '    POSSIBLE CVOL ENTRY?
         BNE   LOCOBTF1            NO
         CLC   =C'SYSCTLG.',LEVLOCDS
         BNE   LOCOBTF1            NOT A CVOL
         MVC   LEVLOCDS+7(8),LVBLANKS
LOCOBTF1 MVC   LEVLOCOB,LEVOBT1    SET SVC REQUEST CODE
         LA    R0,LEVLOCDS         SET VTOC SEARCH KEY ADDRESS
         ST    R0,LEVLOCOB+4
         LA    R0,4(R7)            SET VOLUME SERIAL NUMBER TO SEARCH
         ST    R0,LEVLOCOB+8
         LA    R0,LVDSCB           SET ANSWER AREA ADDRESS FOR OBTAIN
         ST    R0,LEVLOCOB+12
         OBTAIN LEVLOCOB           RETRIEVE FORMAT-1 OR FORMAT-8 DSCB
         LTR   R15,R15             SUCCESS?
         BNZ   LOCOBTNX            NO, NO DATA TO PROCESS
**       USING DS1FMTID,LVDSCB     SET BY USING DS4IDFMT ABOVE
         LA    R0,LVLOCBF+2        POINT TO THE FIRST ENTRY
         CR    R7,R0               PROCESSING THE FIRST VOLUME?
         BH    LOCGETXT            NO, SKIP STUFF ALREADY DONE
         NI    LVAFLG,255-$DEL     OBVIOUSLY NOT DELETED
         SPACE
LOCOBORG OI    LVAFLG,$LFOBT       GOT FIRST DSCB AT LEAST
         MVC   LVAORG,LVBLANKS     EXTRACT DATA SET ORGANIZATION
         ICM   R1,8,DS1DSORG       GET FIRST DSORG BYTE
         LA    R0,7                TEST UP TO 7 DSORG BITS
         LA    R15,LEVORGS
         TM    DS1DSIND,DS1IND40   RACF BIT SET?
         BNO   LOCORGLP            NO
         OI    LVAFLG,$RACFDS      YES, FLAG THIS
LOCORGLP LTR   R1,R1
         BM    LOCGTORG
         SLL   R1,1
         LA    R15,2(,R15)
         BCT   R0,LOCORGLP
LOCGTORG MVC   LVAORG(2),0(R15)
         TM    DS1DSORG,DS1DSGU
         BNO   LOCUMVOK
         MVI   LVAORG+2,C'U'       UNMOVABLE DATA SET
LOCUMVOK TM    DS1DSORG+1,DS1ACBM  VSAM?
         BNO   LOCVSOK             NO
         MVC   LVAORG(2),=C'VS'    YES
LOCVSOK  TM    DS1FLAG1,X'08'      LARGE DATA SET?
         BZ    LOCLRGOK            NO
         MVI   LVAORG+2,C'L'       DENOTE LARGE SEQUENTIAL
LOCLRGOK TM    DS1SMSFG,X'0C'      PDSE OR STRIPED SEQUENTIAL?
         BZ    LOCHFSOK            NO
         MVI   LVAORG+2,C'E'       DENOTE PDSE OR EXTENDED FORMAT
         TM    DS1SMSFG,X'02'      HFS?
         BZ    LOCHFSOK            NO
         MVC   LVAORG,=CL3'HFS'
LOCHFSOK LA    R0,X'0000FF'
         CLM   R0,7,DS1LSTAR       OS CATALOG?
         BNE   LOCCATOK            NO
         MVC   LVAORG,=CL3'CAT'
LOCCATOK MVC   LVASCALO,DS1SCALO   COPY ALLOCATION TYPE AND 2NDARY QTY
         MVC   LVARFM,LEVSTARS     EXTRACT RECORD FORMAT
         LA    R1,LVARFM+1
         TM    DS1RECFM,X'C0'
         BNZ   LOCRFM0
         TM    DS1RECFM,X'20'
         BZ    LOCRFM1
         MVI   LVARFM,C'D'
         B     LOCRFM2
LOCRFM0  MVI   LVARFM,C'U'
         BO    LOCRFM2
         MVI   LVARFM,C'F'
         TM    DS1RECFM,X'80'
         BO    LOCRFM2
         MVI   LVARFM,C'V'
LOCRFM2  MVI   0(R1),C' '
LOCRFM1  TM    DS1RECFM,X'10'
         BNO   LOCRFM3
         MVI   0(R1),C'B'
         LA    R1,1(,R1)
LOCRFM3  TM    DS1RECFM,X'08'
         BNO   LOCRFM4
         MVI   0(R1),C'S'
         LA    R1,1(,R1)
LOCRFM4  TM    DS1RECFM,X'20'
         BNO   LOCRFM5
         CLI   LVARFM,C'D'
         BE    LOCRFM5
         MVI   0(R1),C'T'
         LA    R1,1(,R1)
LOCRFM5  TM    DS1RECFM,X'04'
         BNO   LOCRFM6
         MVI   0(R1),C'A'
         LA    R1,1(,R1)
LOCRFM6  TM    DS1RECFM,X'02'
         BNO   LOCRFM7
         MVI   0(R1),C'M'
LOCRFM7  EQU   *
         MVC   LVALRL,DS1LRECL     EXTRACT LOGICAL RECORD LENGTH
         MVC   LVABLK,DS1BLKL      EXTRACT BLOCK SIZE
         LA    R1,DS1CREDT         POINT TO DATE
         LA    R15,LVACRE          POINT TO OUTPUT AREA
         BAS   R14,LOCDATE
         LA    R1,DS1REFD          POINT TO DATE
         BAS   R14,LOCDATE
         LA    R1,DS1EXPDT         POINT TO DATE
         BAS   R14,LOCDATE
         SPACE
         MVC   LVASCALO,DS1SCALO   COPY ALLOCATION DETAILS
         SPACE
LOCGETXT SR    R1,R1               EXTRACT EXTENT COUNT
         IC    R1,DS1NOEPV         GET EXTENTS FOR DATA
         STC   R1,LVLNOEPV         SAVE IT IN CASE OVERLAID BY FORMAT-3
         CLI   DS1EXT1,X'40'       USER LABEL EXTENT?
         BNE   *+8                 NO
         LA    R1,1(,R1)           YES, COUNT IT
         LTR   R1,R1               ANY EXTENTS?
         BZ    LOCOBTOK            NO, ZERO TRACKS ALLOCATED AND USED
         IC    R5,LVAEXT           YES, GET TOTAL SO FAR
         AR    R5,R1               ADD EXTENTS ON THIS VOLUME
         STC   R5,LVAEXT           SAVE NEW DATA SET TOTAL EXTENTS
         A     R1,LVTOTEXT         ACCUMULATE EXTENT COUNT
         ST    R1,LVTOTEXT
         SR    R1,R1               EXTRACT USED TRACK COUNT
         CLM   R0,7,DS1LSTAR       OS CATALOG?
         BE    LOCUSTRK            SEEMS LIKE IT
         ICM   R1,3,DS1LSTAR       GET LAST USED TRACK
         CLI   DS1LSTAR+2,0        IS R OF TTR ZERO?
         BE    *+8                 YES
         LA    R1,1(,R1)           NO, COUNT ANOTHER TRACK
         AIF   (NOT &ENVBIG).LCUSTRK
         TM    DS1FLAG1,DS1LARGE   DSNTYPE=LARGE?
         BNO   LOCUSTRK            NO, HAVE TRACKS USED ALREADY
         ICM   R1,4,DS1TTTHI       YES, GET TRACKS USED HIGH-ORDER
.LCUSTRK ANOP
LOCUSTRK LR    R0,R1               COPY USED TRACK COUNT
         A     R1,LVAUSED          ACCUMULATE DATA SET USED TRACKS
         ST    R1,LVAUSED
         A     R0,LVTOTUSE         ACCUMULATE TOTAL USED TRACKS
         ST    R0,LVTOTUSE
         SPACE
         MVC   LVNXTPTR,DS1PTRDS   SAVE POINTER TO NEXT DSCB
         SR    R6,R6               RESET TRACK ACCUMULATOR
         LA    R1,DS1EXT1          POINT TO FIRST EXTENT
         LA    R5,1                SET EXTENT NUMBER
         MVI   LVLNEWF3+1,4        EXTENT NUMBER FOR NEW FORMAT 3 DSCB
         MVI   LVLJMPF3+1,8        EXTENT NUMBER TO SKIP F3 ID
LOCTRKLP CLC   LVLTRKPC,LOCOBT15+2 FIFTEEN TRACKS PER CYLINDER?
         BNE   LOCOLDAL            NO, ASSUME PRE-EAV WITH FORMAT-1
*
*  CATER FOR EXTENT DESCRIPTORS WHICH CAN DESCRIBE EAS ON EAV WHICH
*  CAN ONLY OCCUR ON Z/OS WHICH MEANS IT CAN ONLY OCCUR WHEN THERE
*  ARE 15 TRACKS PER CYLINDER BECAUSE THE ONLY DASD DEVICE TYPES
*  SUPPORTED BY Z/OS ARE 3380, 3390 AND 9345.  (THIS WAY THE EAV
*  ALGORITHM CAN BE TESTED ON SYSTEMS WITHOUT EAV.)
*
*  EXTENT START AND END TRACK ADDRESSES ARE GIVEN BY WXYZTUVH WHERE
*  H IS THE HEAD-WITHIN-CYLINDER AND HEXADECIMAL TUVWXYZ IS CYLINDER.
*  THIS BECOMES WXYZ000H FOR NON-EAV WHICH OLDER SYSTEMS CAN SAFELY
*  TREAT AS PER WXYZHHHH
*
         ICM   R14,12,8(R1)        GET END TUVH....
         SRL   R14,4               GET END 0TUVH...
         ICM   R14,3,6(R1)         GET END 0TUVWXYZ
         IC    R15,9(,R1)          GET END ......VH
         N     R15,LOCOBT15        GET END 0000000H
         ICM   R0,12,4(R1)         GET START TUVH....
         SRL   R0,4                GET START 0TUVH...
         ICM   R0,3,2(R1)          GET START 0TUVWXYZ
         SR    R14,R0              GET NUMBER OF CYLS
         IC    R0,5(,R1)           GET START ......VH
         N     R0,LOCOBT15         GET START 0000000H
         B     LOCCMNAL            BRANCH TO COMMON CODE
LOCOLDAL SR    R14,R14
         ICM   R14,3,6(R1)         LOAD END CC
         SR    R15,R15
         ICM   R15,3,8(R1)         LOAD END HH
         SR    R0,R0
         ICM   R0,3,2(R1)          LOAD START CC
         SR    R14,R0              GET NUMBER OF CYLS
         ICM   R0,3,4(R1)          LOAD START HH
LOCCMNAL SR    R15,R0              GET DIFF. OF TRACKS
         MH    R14,LVLTRKPC        CONVERT CYL TO TRK
         AR    R14,R15             GET TOTAL (LESS 1)
         LA    R6,1(R14,R6)        ACCUMULATE TOTAL
         CLM   R5,1,LVLNOEPV       LAST EXTENT?
         BNL   LOCGOTAL            YES, FINISHED
         LA    R5,1(,R5)           INCREMENT EXTENT COUNTER
         CH    R5,LVLNEWF3         END OF EXTENTS FOR THIS DSCB?
         BE    LOCTRKF3            YES, READ FORMAT-3
         CH    R5,LVLJMPF3         UP TO THE FORMAT-3 ID?
         BE    LOCTRKE8            YES, POINT PAST IT
         LA    R1,10(,R1)          POINT TO NEXT EXTENT
         B     LOCTRKLP            CONTINUE WITH NEXT EXTENT
         SPACE
         USING IECSDSL3,LVDSCB
LOCTRKF3 LA    R1,13(,R5)          GET EXTENT NUMBER FOR NEXT F3 DSCB
         STH   R1,LVLNEWF3         SAVE IT FOR LATER
LOC3SEEK MVC   LEVLOCOB,LEVOBT3    SET SVC REQUEST CODE
         LA    R0,LVNXTPTR
         ST    R0,LEVLOCOB+4
         LA    R0,4(R7)            SET VOLUME SERIAL NUMBER TO SEEK ON
         ST    R0,LEVLOCOB+8
         LA    R0,LVDSCB           SET ANSWER AREA ADDRESS FOR OBTAIN
         ST    R0,LEVLOCOB+12
         OBTAIN LEVLOCOB           RETRIEVE VTOC ENTRY
         LTR   R15,R15
         BNZ   LOCOBTOK            STOP IF ERROR OBTAINING FORMAT-3
         MVC   LVLDBL,LVNXTPTR     SAVE SEEK CCHHR
         MVC   LVNXTPTR,DS3PTRDS   DS2PTRDS OR DS3PTRDS OR DS9PTRDS
         CLI   DS3FMTID,C'3'       IS IT A FORMAT-3 DSCB?
         BNE   LOC3SEEK            NO, SKIP FORMAT-2 AND FORMAT-9 DSCBS
         LA    R1,DS3EXTNT         POINT TO FIRST EXTENT IN FORMAT-3
         CLI   LVATYP,C'@'         LISTING FROM A SPECIFIC VOLUME?
         BNE   LOCTRKLP            NO, NO VOLUME SPACE MAP EXISTS
         ICM   R0,15,INDEXLEN      ANY DATA SET NAME MASKING?
         BNP   LOCTRKLP            NO, DO NOT NEED TO ADD RED COLOUR
         ICM   R0,15,LEVPLOT@      ANY VOLUME MAP PIXEL ARRAY?
         BZ    LOCTRKLP            NO, NO VOLUME SPACE MAP EXISTS
         LA    R1,LVLF3CHN         POINT TO CHAIN ORIGIN
LOC3INLP LR    R14,R1              SAVE PREVIOUS ADDRESS
         ICM   R1,15,0(R14)        POINT TO NEXT ELEMENT ON CHAIN
         BNZ   LOC3INLP            KEEP FOLLOWING CHAIN
         LA    R0,4+8+140          GET SIZE OF STORAGE REQUIRED
         GETMAIN RC,LV=(0),LOC=(31,64)
         LTR   R15,R15             STORAGE AVAILABLE?
         BNZ   LOC3BAIL            NO, SKIP THIS ONE
         ST    R1,0(,R14)          ADD THIS ELEMENT TO THE CHAIN
         ST    R15,0(,R1)          ZERO FORWARD POINTER
         MVI   LVLDBL+5,44         SET KEY LENGTH
         MVI   LVLDBL+6,0          SET DATA LENGTH
         MVI   LVLDBL+7,96
         MVC   4(8,R1),LVLDBL      LOAD RECONSTRUCTED COUNT
         MVC   12(140,R1),LVDSCB   LOAD DSCB IMAGE
LOC3BAIL LA    R1,DS3EXTNT         POINT TO FIRST EXTENT IN FORMAT-3
         B     LOCTRKLP
         SPACE
LOCTRKE8 LA    R1,13(,R5)          GET EXTENT NUMBER FOR NEXT F3 ID
         STH   R1,LVLJMPF3         SAVE IT FOR LATER
         LA    R1,DS3ADEXT         POINT TO NINE ADDITIONAL EXTENTS
         B     LOCTRKLP
         SPACE
LOCGOTAL LR    R0,R6               COPY DATA SET TRACKS ON VOLUME
         A     R6,LVAALOC          ACCUMULATE DATA SET TRACK COUNT
         ST    R6,LVAALOC
         A     R0,LVTOTALC         ACCUMULATE TOTAL TRACK COUNT
         ST    R0,LVTOTALC
         LA    R7,12(,R7)          POINT TO NEXT VOLUME ENTRY
         LH    R1,LVLVOLS#         GET DATA SET VOLUMES TO GO
         BCT   R1,LOCVOLLP         PROCESS NEXT VOLUME IF ANY
         SPACE
LOCOBTOK ICM   R0,15,LVAUSED       ANY USED TRACKS?
         BNZ   LOCOBTPC            YES, FINE
         CLI   LVAORG,C'*'         NULL DSORG?
         BE    LOCOBTPC            YES, FINE
         CLC   LVAORG(2),LEVORGS+2 SEQUENTIAL?
         BE    LOCOBTPC            YES, FINE
         L     R0,LVAALOC          GET ALLOCATED TRACK COUNT
         ST    R0,LVAUSED          SAY IT IS ALL USED
         A     R0,LVTOTUSE         ACCUMULATE TOTAL USED TRACKS
         ST    R0,LVTOTUSE
         SPACE
LOCOBTPC ICM   R15,15,LVAALOC      GET ALLOCATED TRACK COUNT
         BZ    LOCOBTNX            NONE, SO LEAVE PERCENT AT ZERO
         CLC   =CL3'CAT',LVAORG    OS CATALOG?
         BNE   LOCOBTNC            NO
         MVC   LVAUSED,LVAALOC     YES
         MVI   LVAPCT,100+1        SAY IT HAS NO UNUSED SPACE
         B     LOCOBTNX
LOCOBTNC L     R1,LVAUSED          GET USED TRACKS
         M     R0,=F'100'          PREPARE FOR PERCENT
         DR    R0,R15              GET PERCENT FULL
         LA    R1,1(,R1)           ADD ONE FOR SORT PURPOSES
         STC   R1,LVAPCT           SAVE IT
         SPACE
LOCOBTNX OI    LVAFLG,$LFLOC       LOCATE DONE
         MVI   LVAACT,QUOTE        CLEAR ACTION CODE
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER
         SPACE
LOCDATE  SR    R0,R0
         MVC   0(5,R15),LVBLANKS   CLEAR DISPLAY FIELD
         ICM   R0,7,0(R1)          IS 3-BYTE DATE ZERO?
         BZ    LOCDATEX            YES, LEAVE DISPLAY FIELD BLANK
         SRL   R0,16               GET YEAR
         CVD   R0,LVLDBL
         OI    LVLDBL+7,X'0F'
         UNPK  0(2,R15),LVLDBL
         ICM   R0,3,1(R1)          GET JULIAN DAY
         CVD   R0,LVLDBL
         OI    LVLDBL+7,X'0F'
         UNPK  2(3,R15),LVLDBL
         CLI   0(R15),C'7'         20TH CENTURY?
         BL    LOCDATEX            NO
         NI    0(R15),255-C' '     YES, MAKE LESS THAN 21ST CENTURY
LOCDATEX LA    R15,5(,R15)         POINT TO NEXT OUTPUT AREA
         BR    R14                 RETURN TO CALLER
         SPACE
         DROP  R4                  @LVLWORK DS1FMTID IECSDSL3 DS4IDFMT
         DROP  R3                  LVAENT
         DROP  R11                 LOCOBTN
         SPACE
LOCTPCTB DC    AL1(000)            TRACKS PER CYLINDER TABLE
         DC    AL1(010)            1 - 2311
         DC    AL1(200)            2 - 2301
         DC    AL1(010)            3 - 2303
*        DC    AL1(046)            4 - 2302
         DC    AL1(015)            4 - 9345
         DC    AL1(010)            5 - 2321
         DC    AL1(008)            6 - 2305-1
         DC    AL1(008)            7 - 2305-2
         DC    AL1(020)            8 - 2314
         DC    AL1(019)            9 - 3330
         DC    AL1(012)            A - 3340
         DC    AL1(030)            B - 3350
         DC    AL1(012)            C - 3375
         DC    AL1(019)            D - 3330-1
         DC    AL1(015)            E - 3380
         DC    AL1(015)            F - 3390
         SPACE
LOCOBT15 DC    F'15'
         SPACE
         DC    0D'0'
LEVLOCS  CAMLST NAME,2,,4
LEVOBT1  CAMLST SEARCH,2,3,4
         ORG   LEVOBT1+2
         DC    AL1(8)              EADSCB=OK AS FROM Z/OS 1.10
         ORG
LEVOBT3  CAMLST SEEK,2,3,4
         ORG   LEVOBT3+2
         DC    AL1(8)              EADSCB=OK AS FROM Z/OS 1.10
         ORG
         SPACE
LEVORGS  DC    CL16'ISPSDACX****PO**'
LEVSTARS EQU   *-2,2
LVBLANKS DC    CL8' '              KEEP AFTER LEVSTARS
         LTORG
         SPACE
         DC    0D'0'               END OF CSECT
         TITLE '  R E V L E V L   -   D Y N A M I C   A R E A  '
@LVLWORK DSECT
LEVLSAVE DS    18F
LEVLSAV2 DS    18F
LEVSNSID DS    XL8                 SENSE ID DATA SAVE AREA
LEVMEMSK DS    CL8                 MEMBER NAME MASK PATTERN
LEVSCNCT DS    F                   COUNT OF DATA SETS SCANNED
LEVSCNGD DS    F                   COUNT OF DATA SETS MATCHED
LVSCNERR DS    F                   COUNT OF DATA SET SCAN ERRORS
LVSCNCSR DS    A                   DATA SET SCAN ENTRY CURSOR
LVARAYSZ DS    F     \____ONE____/ INTERNAL DATA SET ARRAY SIZE
LVARAYAD DS    A     /    LM     \ INTERNAL DATA SET ARRAY ADDRESS
LVNUMACT DS    F     \__ONE_XC___/ NUMBER OF PENDING ACTIONS CODES
LVAENDAD DS    A                   ADDRESS PAST END OF ARRAY
LVATOPAD DS    A                   TOP OF SCREEN ARRAY ENTRY ADDRESS
LVTOPACT DS    A                   FIRST PENDING ACTION CODE ADDRESS
LVLSTACT DS    A                   MOST RECENT ENTRY PROCESSED
LVSUBTSK DS    A                   ADDRESS OF SUBTASK TCB
LVTOTALS EQU   *,12                TOTAL RESET AREA
LVTOTALC DS    F                   TOTAL TRACKS ALLOCATED
LVTOTUSE DS    F                   TOTAL TRACKS USED
LVTOTEXT DS    F                   TOTAL NUMBER OF EXTENTS
LVFRETOT EQU   *,16                FREE TOTAL RESET AREA
LVFRECYL DS    F                   TOTAL FREE CYLINDER COUNT
LVFRETRK DS    F                   TOTAL FREE TRACK COUNT
LVFREEXT DS    F                   TOTAL FREE TRACK EXTENT COUNT
LVFREVTC DS    F                   TOTAL FREE VTOC ENTRY COUNT
LVLBLCHN DS    A                   VTOC LABEL ELEMENT CHAIN ANCHOR
LVLF3CHN DS    A                   VTOC LABEL ELEMENT CHAIN ANCHOR
LEVCREEP DS    H                   MINIMUM DSNAME TRAILING BLANK COUNT
LEVCRAWL DS    H                   SCROLL RIGHT COLUMNS FOR DISPLAY
LVCROUCH DS    H                   LEVCRAWL VALUE WHEN SCROLLED RIGHT
LITMTRNC DS    H                   SCROLLED LEFT TRUNCATED ITEM COUNT
LVVTOCEP DS    A                   REVTOCRD ENTRY POINT ADDRESS
LVSUBECB DS    F                   SUBTASK EVENT CONTROL BLOCK
LVLSTINF DS    A                   LAST INFO DISPLAY ENTRY ADDRESS
LEVPROF@ DS    A                   ADDRESS OF PROFILE STORAGE
INDEXLEN DS    F                   CATALOG SEARCH INDEX LENGTH
INDEXCTG DS    CL44                INDEX FOR CATALOG SEARCH
LEVELSAV DS    CL44  \____ONE____/ USER DSNAME SEARCH PREFIX
LEVELVOL DS    CL6   /    TR     \ USER VOLUME SERIAL SPECIFICATION
LVOLDSAV DS    CL44  \____ONE____/ ORIGINAL PROFILE PREFIX
LVOLDVOL DS    CL6   /    MVC    \ ORIGINAL PROFILE VOLUME
         DS    H                   SPARE
LEVELTPC DS    H                   TRACKS PER CYLINDER
LEVELTYP DS    XL4                 LEVELVOL UCB DEVICE TYPE
LEVORDER DS    C                   CURRENT ARRAY SORT ORDER
LEVFLG1  DS    X                   FLAG BYTE
$LVPROF  EQU   X'80'               PROFILE MEMBER $$REVDSL SAVE PENDING
$LVOL99  EQU   X'40'               ALLOCATED USING DYNALLOC TO VOLUME
LVFNDSW  DS    X                   FIND SWITCHES
*FTOP    EQU   X'40'               SEARCH FROM TOP OF DATA
*FEND    EQU   X'20'               SEARCH FROM BOTTOM OF DATA
*FBAK    EQU   X'10'               SEARCH DIRECTION IS BACKWARD
LVSTRNG  DS    H,CL44              SEARCH STRING
CONDUCB  DS    A                   CONDENSE RESERVE UCB ADDRESS
LEVFSTAT DS    XL76                COPY OF FINDSW, FINDSW2, STRINGL,
*                                  STRING, FINDCOL1 AND FINDCOL2
* =====================================================================
*         DISK MAP PLOT DATA
* --------------------------------------------------------------------
LEVPLOT@ DS    A                   SPACE MAP PIXEL AREA ADDRESS
LEVPLOT# DS    XL(PICDTLEN)        PICDTLS DATA SAVE AREA
* =====================================================================
*         DATA SET ALLOCATION ATTRIBUTES AREA
* --------------------------------------------------------------------
         DS    0F                  SECONDARY ALLOCATION DATA
LEVDSATR DS    XL(LVASIZ)          COPY OF INTERNAL ENTRY
* =====================================================================
*         WORK AREA FOR LOCOBTN ROUTINE
* --------------------------------------------------------------------
*
*        LOCOBTN MAY BE CALLED FROM THE MAIN TASK OR THE
*        REVLVTSK ASYNCHRONOUS SUBTASK, SO IT NEEDS ITS OWN
*        DEDICATED WORK AREAS.  ONE TIME THAT THE LOCOBTN
*        ROUTINE WILL NOT BE RUNNING IS WHEN THE MAIN TASK
*        IS ATTACHING THE SUBTASK, SO IT IS SAFE TO USE
*        LOCOBTN WORKING STORAGE FOR THE ATTACH PARAMETER
*        LIST.  NOTE THAT NEITHER REVLVTSK NOR LOCOBTN
*        ISSUE ANY GETMAIN (OR FREEMAIN) REQUESTS WHEN
*        RUNNING AS A SUBTASK.
*
* --------------------------------------------------------------------
LEVLROWS DS    F                   ARRAY ROW COUNT
LEVLOCDS DS    CL44                NAME TO LOCATE
LEVLOCOB DS    XL(LOCATEL)         LOCATE/OBTAIN PARAMETER LIST
LVATTCHD DS    0XL(LVATTCHL)       ATTACH CONTROL PARAMETER LIST
LVDSCB   DS    XL140               96 BYTES OF DSCB, 5 BYTES CCHHR
LVLOCBF  DS    XL265               USES NEXT 265 BYTES
LVNXTPTR DS    XL5                 CCHHR OF NEXT DSCB TO OBTAIN
LVLNEWF3 DS    H                   NEXT FORMAT-3 DSCB TRIGGER
LVLJMPF3 DS    H                   JUMP OVER FORMAT-3 ID TRIGGER
LVLTRKPC DS    H                   TRACKS PER CYLINDER
LVLVOLS# DS    H                   REMAINING DATA SET VOLUME COUNT
LVLNOEPV DS    X                   DS1NOEPV SAVE AREA
LVLDBL   DS    D                   WORK AREA
* =====================================================================
*         CATALOG PARAMETER LIST
* --------------------------------------------------------------------
CTGPL    DS    0D
* --------------------------------------------------------------------
CTGOPTN1 DS    XL1                 FIRST OPTION INDICATOR
CTGBYPSS EQU   X'80'               BYPASS
CTGMAST  EQU   X'40'               VERIFY MASTER PASSWORD
CTGCI    EQU   X'20'               VERIFY CONTROL INDICATOR
CTGUPD   EQU   X'10'               VERIFY UPDATE
CTGREAD  EQU   X'08'               VERIFY READ
CTGNAME  EQU   X'04'               1 - 44-BYTE NAME OR VOLSER
*                                  0 - ENTRY ID NUMBER
CTGCNAME EQU   X'02'               1 - 44-BYTE NAME
*                                  0 - ACB ADDRESS
CTGGENLD EQU   X'01'               GENERIC LOCATE REQUEST
* --------------------------------------------------------------------
CTGOPTN2 DS    XL1                 SECOND OPTION INDICATOR
CTGEXT   EQU   X'80'               EXTEND (UPDATE)
CTGERASE EQU   X'40'               ERASE (DELETE)
CTGSMF   EQU   X'40'               WRITE SMF (LSPACE)
CTGREL   EQU   X'40'               RELEASE (UPDATE)
CTGGTALL EQU   X'40'               CONCAT SEARCH (LISTCAT)
CTGPURG  EQU   X'20'               PURGE (DELETE)
CTGVMNT  EQU   X'20'               VOLUME MOUNT CALLER
CTGRCATN EQU   X'20'               RTN CAT NAME (GLOC)
CTGGTNXT EQU   X'10'               GET NEXT (LIST CTLG)
CTGDISC  EQU   X'08'               DISCONNECT (DELETE)
CTGOVRID EQU   X'04'               ERASE OVERRIDE (DELETE)
CTGSCR   EQU   X'02'               SCRATCH SPACE (DELETE)
*    X'01' - RESERVED
* --------------------------------------------------------------------
CTGOPTN3 DS    XL1                 THIRD OPTION INDICATOR
CTGFUNC  EQU   X'E0'               HIGH ORDER THREE BITS DEFINE
*                                  FUNCTION
*   LOCATE     -   001* ****
CTGLOC   EQU   X'20'               LOCATE - BITS ON
*   LSPACE     -   010* ****
CTGLSP   EQU   X'40'               LSPACE - BITS ON
*   UPDATE     -   011* ****
CTGUPDAT EQU   X'60'               UPDATE - BITS ON
*   CMS FUNCTION - 100* ****
CTGCMS   EQU   X'80'               CMS FUNCTION - BITS ON
*
CTGSUPLT EQU   X'10'               SUPER LOCATE
CTGGDGL  EQU   X'08'               GDG LOCATE FUNCTION (CTGWAGB IN
*                                       CTGWA)
CTGSRH   EQU   X'04'               0 - SEARCH MASTER CAT ONLY
*                                  1 - SEARCH OS CAT FIRST
CTGNUM   EQU   X'02'               0 - SEARCH BOTH CATALOGS
*                                  1 - SEARCH ONE CATALOG
CTGAM0   EQU   X'01'               VSAM REQ VERSUS NONVSAM
* --------------------------------------------------------------------
CTGOPTN4 DS    XL1                 FOURTH OPTION INDICATOR
CTGLBASE EQU   X'80'               LOCATE GDG BASE ONLY
CTGDOCAT EQU   X'40'               DO NOT OPEN NEEDED CATLG
CTGNPROF EQU   X'20'               NO (RAC) PROFILE SHOULD BE
*                                  DEFINED OR DELETED
CTGCOIN  EQU   X'10'               CONTROLLER INTERCEPT REQUESTED
CTGBYPMT EQU   X'08'               BYPASS SECURITY PROMPTING TO
*                                       SYSTEM OPERATOR
CTGTIOT  EQU   X'04'               CALLER OWNS SYSZTIOT EXCLUSIVE
*        BITS 6-7 RESERVED
* --------------------------------------------------------------------
CTGENT   DS    0A                  USER ENTRY ADDRESS OR POINTER
*                                  TO VOLUME SERIAL NUMBER(LSPACE)
* --------------------------------------------------------------------
CTGFVT   DS    A                   FVT ADDRESS (DEFINE, ALTER)
* --------------------------------------------------------------------
CTGCAT   DS    0A                  CATALOG POINTER
* --------------------------------------------------------------------
CTGCVOL  DS    A                   CVOL PTR (SUPER LOCATE)
* --------------------------------------------------------------------
CTGWKA   DS    A                   WORKAREA ADDRESS
* --------------------------------------------------------------------
CTGDSORG DS    CL2                 DATA SET ORG (SUPER LOCATE)
*   BITS 0-4 DEFINE ORGANIZATION
CTGOPTNS EQU   X'FC'               TOP 6 BITS
*   DEFINE          - 0000 1*** **** ****
CTGDEFIN EQU   X'08'               DEFINE
*   ALTER           - 0001 0*** **** ****
CTGALTER EQU   X'10'               ALTER
*   DELETE          - 0001 1*** **** ****
CTGDELET EQU   X'18'               DELETE
*   LIST CATALOG    - 0010 0*** **** ****
CTGLTCAT EQU   X'20'               LIST CATALOG
*   CONVERTV        - 0011 0*** **** ****
CTGCNVTV EQU   X'30'               CONVERTV
*
CTGF2WKA EQU   X'04'               FORMAT-2 WORK AREA (FULLWORD LENGTH)
*                                  - ADDED WITH MVS/ESA
*   BITS 6-15 RESERVED
* --------------------------------------------------------------------
CTGTYPE  DS    CL1                 ENTRY TYPE-LISTCAT,DELETE
CTGTDATA EQU   C'D'                DATA - D
CTGTINDX EQU   C'I'                INDEX - I
CTGTALIN EQU   C'A'                ALIEN - A
CTGTUCAT EQU   C'U'                USER CATALOG - U
CTGTVOL  EQU   C'V'                VOLUME - V
CTGTCL   EQU   C'C'                CLUSTER - C
CTGTMCAT EQU   C'M'                MASTER CATALOG - M
CTGTGBS  EQU   C'B'                GDG BASE - B
CTGTANM  EQU   C'X'                ALIAS BASE - X
CTGTPGSP EQU   C'P'                PAGE SPACE - P
* --------------------------------------------------------------------
CTGNOFLD DS    XL1                 NUMBER FIELD POINTERS
CTGDDNM  DS    0A                  DD NAME ADDRESS
CTGNEWNM DS    0A                  NEWNAME ADDRESS - ALTER
CTGFDBK  DS    XL2                 SUPER LOCATE FEEDBACK
CTGFBFLG DS    XL2                 SUPER LOCATE FLAGS
CTGPAR   EQU   X'80'               PARALLEL MOUNT - SUPER LOC
CTGKEEP  EQU   X'40'               FORCED KEEP = SUPER LOCATE
CTGGDGB  EQU   X'20'               GDG BASE LOCATED
CTGNGDSN EQU   X'10'               GDG NAME GENERATED
*   BITS 4-15 RESERVED
* --------------------------------------------------------------------
CTGJSCB  DS    0A                  JSCB ADDRESS
CTGPSWD  DS    A                   PASSWORD ADDRESS
CTGWALEN DS    0F                  WORK AREA LENGTH (FORMAT 2)
CTGFIELD DS    A                   FIELD POINTERS - MAY BE MORE THAN 1
CTGPLLEN EQU   *-CTGPL             LENGTH OF CTG WITH ONE FIELD POINTER
* =====================================================================
         SPACE
         DS    0D                  END OF DSECT
@LVLWKLN EQU   *-@LVLWORK
         SPACE
         TITLE '  R E V L E V L   -   A R R A Y   E N T R Y  '
LVAENT   DSECT
LVASEQ   DS    F                   ENTRY SEQUENCE NUMBER
LVADSNL  DS    H                   DATA SET NAME LENGTH
LVAFLG   DS    X                   FLAGS
$LFLOC   EQU   X'80'               ENTRY FINISHED - LOCATE DONE
$LFOBT   EQU   X'40'               ENTRY FINISHED - OBTAIN DONE
$UNCAT   EQU   X'20'               ENTRY IS NOT CATALOGED
$FAIL    EQU   X'10'               MOST RECENT REQUEST FAILED
$DEL     EQU   X'08'               DATA SET DELETED
$NEWNM   EQU   X'04'               NEW DATA SET NAME SUPPLIED
$RACFDS  EQU   X'02'               DS1IND40 SET IN VTOC ENTRY
$SCAN    EQU   X'01'               DATA SET SUPPOSEDLY SCANNED
LVA26    DS    0CL45               ORIGINAL SUPERLOCATE ENTRY
LVATYP   DS    CL1                 CATALOG ENTRY TYPE
LVADSN   DS    CL44                DATA SET NAME
LVAREAL  DS    CL44                REAL NAME IF ALIAS
         ORG   LVAREAL
LVALOC   DS    0XL14               DATA FROM LOCATE
LVAVOL#  DS    H                   NUMBER OF VOLUMES OF DATA SET
*                                  (LOCATE RETURN CODE IN FIRST BYTE)
LVADEV   DS    XL4                 DEVICE TYPE OF FIRST VOLUME
LVAVOL   DS    CL6                 FIRST OR ONLY VOLUME SERIAL NUMBER
LVADSQ   DS    H                   DATA SET SEQUENCE NUMBER
LVAORG   DS    CL3                 DATA SET ORGANIZATION
LVARFM   DS    CL5                 RECORD FORMAT
LVALRL   DS    H                   LOGICAL RECORD LENGTH
LVABLK   DS    H                   MAXIMUM BLOCK SIZE
LVA0     EQU   *                   PRE-OBTAIN RESET AREA
LVAALOC  DS    F                   ALLOCATED TRACK COUNT
LVAUSED  DS    F                   USED TRACK COUNT
LVASCALO DS    F                   ALLOCATION TYPE
LVAEXT   DS    XL1                 NUMBER OF EXTENTS
LVA0L    EQU   *-LVA0              PRE-OBTAIN RESET AREA LENGTH
LVACRE   DS    CL5                 CREATION DATE
LVAREF   DS    CL5                 REFERENCE DATE
LVAEXP   DS    CL5                 EXPIRATION DATE
LVATPC   DS    XL1                 TRACKS PER CYLINDER
LVAPCT   DS    XL1
         ORG
LVAACT   DS    CL1                 PENDING ACTION CODE
LVALST   DS    CL1                 MOST RECENT ACTION CODE
LVAEND   DS    0D
LVASIZ   EQU   *-LVAENT            ARRAY ENTRY SIZE
         SPACE
         USING @DATA,R9
         SPACE
         TITLE '  R E V C O N D  '
************************************************************
*                                                          *
*         PERFORM A PDS COMPRESS USING CONDENSE            *
*                                                          *
************************************************************
*                                                          *
*        CONDENSE IS A COPY-OUT AND COPY-BACK COMPRESS     *
*        AS OPPOSED TO A COMPRESS-IN-PLACE.  THE           *
*        ADVANTAGE OF SUCH A PROCESS IS THAT IF THE        *
*        COPY-BACK PROCESS FAILS THE CONTENTS OF THE       *
*        PDS ARE PRESERVED IN THE CONDENSE HOLDING FILE.   *
*        THE MAIN DISADVANTAGES ARE THAT MORE DISK SPACE   *
*        IS USED BY THE PROCESS, AND IT TAKES LONGER.      *
*        THE CONDENSE METHOD WAS CHOSEN BECAUSE USING      *
*        IEBCOPY REQUIRES APF AUTHORIZATION, AND IT IS     *
*        SIMPLER TO IMPLEMENT THAN COMPRESS-IN-PLACE.      *
*                                                          *
*        THE CALLER HAS EXCLUSIVELY ALLOCATED THE DASD     *
*        DATA SET WHICH IS A PDS AND NOT A PDSE THAT       *
*        IS TO BE COMPRESSED BY THIS ROUTINE.              *
*                                                          *
************************************************************
         SPACE
**********************************************************************
*                                                                    *
* REGISTERS ON ENTRY: R9 -> @DATA                                    *
*                     R13-> SAVE AREA                                *
*                     R14-> RETURN ADDRESS                           *
*                     R15-> REVCOND                                  *
*                                                                    *
* DATA ON ENTRY:  $DDNAME = FILE NAME OF EXCLUSIVELY ALLOCATED PDS   *
*                 $DSNAME = NAME OF DATA SET TO BE COMPRESSED        *
*                 $VOLSER = VOLUME SERIAL OF $DSNAME                 *
*                  $UCBAD = ADDRESS OF UCB OF $VOLSER                *
*                                                                    *
* DURING PROCESSING:  R11-> REVCOND                                  *
*                     R13-> @CONDWK  (LOCAL GETMAINED AREA)          *
*                                                                    *
* RETURN CODES:       R15 = 0  CONDENSE SUCCEEDED                    *
*                     R15 > 0  CONDENSE FAILED - 'MSG' LOADED        *
*                                                                    *
**********************************************************************
         EJECT
REVCOND  RSECT
REVCOND  AMODE 31
         B     @COND-*(,R15)
         DC    AL1(7),CL7'REVCOND'
@COND    STM   R14,R12,12(R13)
         LR    R11,R15             SET BASE
         USING REVCOND,R11
         LA    R0,$CONDWKL
         STCM  R0,12,RC            RESET RETURN CODE
         SPACE
*    IT IS LIKELY THAT A USER WILL NOT WAIT THE NECESSARY TIME
*    FOR THE COMDENSE OF THESE DATA SETS TO COMPLETE (AT LEAST I
*    DIDN'T, AS THE TIME REQUIRED TO RELOAD EACH N MEMBERS GREW
*    EXPONENTIALLY LONGER), SO FAIL THE REQUEST STRAIGHT AWAY.
         CLC   =C'SYS1.SMPCDS ',$DSNAME+2
         BE    @COND29
         CLC   =C'SYS1.SMPACDS ',$DSNAME+2
         BE    @COND29
         SPACE
*    ALSO FAIL A REQUEST TO COMPRESS SYS1.LINKLIB ON THE IPL VOLUME.
*    THE SYSTEM WOULD LIKELY BECOME UNSTABLE DURING THE WRITE-BACK
*    PHASE AND COULD CRASH, LEAVING THE SYSTEM UNIPLABLE.
*    OF COURSE A COMPRESS OF SYS1.LINKLIB WILL PROBABLY NOT PROGRESS
*    - EXCEPT PERHAPS FOR RECENT Z/OS SYSTEMS - DUE TO THE PRESENCE OF
*    SEGMENT OVERLAY PROGRAMS SUCH AS IEBCOPY AND THE LINKAGE EDITOR.
*    HOWEVER, FROM R47.1 THIS "SAVING GRACE" HAS DISAPPEARED BECAUSE
*    SUPPORT FOR SEGMENT OVERLAY PROGRAM OFFLOAD/RELOAD WAS ADDED.
         L     R15,CVTPTR(,0)
         L     R15,CVTSYSAD-CVT(,R15)
         C     R15,$UCBAD          LIBRARY ON SYSRES?
         BNE   @CONDTRY            NO, GO TRY TO COMPRESS IT
         CLC   =C'SYS1.LINKLIB ',$DSNAME+2
         BNE   @CONDTRY            NO, GO TRY TO COMPRESS IT
@COND29  MVI   MSG,29              REQUEST CANCELLED
         B     @CONDBAD            FAIL REQUEST IMMEDIATELY
         SPACE
@CONDTRY GETMAIN RC,LV=(0),LOC=(24,64)
         LTR   R15,R15             GOT LOCAL WORKING STORAGE?
         BZ    @CONDOK             YES
         MVI   MSG,123             REQUEST ABORTED - REGION FULL
@CONDBAD LM    R14,R12,12(R13)     RESTORE REGISTERS
         LA    R15,16              SET NON-ZERO RETURN CODE
         BR    R14                 RETURN TO CALLER
@CONDOK  LA    R15,$CONDWKL
         LR    R14,R1
         SR    R3,R3
         MVCL  R14,R2              CLEAR WORKING STORAGE
         ST    R1,8(,R13)          CHAIN SAVE AREAS
         ST    R13,4(,R1)
         LR    R13,R1              POINT TO GETMAINED AREA
         USING @CONDWK,R13
         SPACE
************************************************************
*                                                          *
*         BUILD CONDENSE HOLD FILE DATA SET NAME           *
*                                                          *
************************************************************
         SPACE
         MVI   DSNAIM+2,C' '       BLANK OUT DATA SET NAME
         MVC   DSNAIM+3(43),DSNAIM+2
         L     R1,REVPSCB          POINT TO PSCB
         USING PSCB,R1
*                                  START THE DSNAME WITH THE USERID
         MVC   DSNAIM+2(7),PSCBUSER
         SR    R15,R15             NO PREFIX ADDED
         IC    R15,PSCBUSRL        GET THE USERID LENGTH
         CLI   PSCBUSER,C'>'       '>7BYTES'?
         BNE   CONDUID1            NO
         MVC   DSNAIM+2(8),PSCB+84 YES, LOAD PSCBUID8
         LA    R15,8               GET THE USERID LENGTH
CONDUID1 LA    R14,DSNAIM+2(R15)   POINT PAST PREFIX
         MVC   0(9,R14),=CL9'.CONDENSE'
         LA    R15,9(,R15)         GET TOTAL DSNAME LENGTH
         STH   R15,DSNAIM          SAVE DATA SET NAME LENGTH
         SPACE
************************************************************
*                                                          *
*         VERIFY CONDENSE DATA SET DOES NOT YET EXIST      *
*                                                          *
************************************************************
         SPACE
         USING DAPB04,MYDAPB
         USING DAPB08,MYDAPB
         USING DAPB18,MYDAPB
         XC    MYDAPB,MYDAPB
         MVI   DA04CD+1,X'04'
         LA    R0,DSNAIM
         ST    R0,DA04PDSN
         L     R14,REVUPT          POINT TO USER PROFILE TABLE
         USING UPT,R14
         CLI   PSCBUSER,C'>'       '>7BYTES'?
         BNE   CONDPREF            NO
         CLC   PSCB+84(8),UPT+33   PREFIX EQUALS USERID?
         B     CONDUID2            NO, SO REQUEST USE OF PREFIX
CONDPREF CLC   PSCBUSER,UPTPREFX   PREFIX EQUALS USERID?
CONDUID2 BE    CONDDAIR            YES, DO NOT ASK SYSTEM TO USE IT
         OI    DA04CTL,DA04UID     NO, GET SYSTEM TO USE PREFIX
         DROP  R1,R14              PSCB, UPT
CONDDAIR XC    MYECB,MYECB
         XASAM24
         LA    R1,MYDAPL
         L     R15,CVTPTR(,0)      CVT
         L     R15,CVTDAIR-CVT(,R15)
         BASR  R14,R15             CALL IKJDAIR
         XASAM31
         LTR   R15,R15             DOES FILE EXIST?
         BNZ   CONDISON            NO, CONDENSE OPERATION IS ON
         MVI   MSG,181             ABORTED - CONDENSE FILE EXISTS
         MVI   RC+1,8              SET NON-ZERO RETURN CODE
         B     CONDEXIT            GO RETURN TO CALLER
         SPACE
**********************************************************************
*                                                                    *
*         PERFORM ALLOCATION OF NEW DATA SET FOR CONDENSE DATA       *
*                                                                    *
**********************************************************************
         SPACE
CONDISON XC    MYDAPB,MYDAPB
         MVI   DA08CD+1,X'08'
         LA    R0,DSNAIM
         ST    R0,DA08PDSN
         MVC   DA08DDN,CONDBLNK
         MVC   DA08UNIT,CNDALLDA
         MVC   DA08SER,CONDBLNK
         MVC   DA08MNM,CONDBLNK
         MVC   DA08PSWD,CONDBLNK
         MVI   DA08DSP1,DA08NEW
         MVI   DA08DPS2,DA08CAT    CATALOG IT AT CREATION TIME
         MVI   DA08DPS3,DA08CATL
         SR    R15,R15
         ICM   R15,3,DS1LSTAR
         LA    R15,1(,R15)         GET USED TRACK COUNT
         CLI   OSBITS,X'9B'        MVS/ESA OR LATER?
         BE    CNDTRKOK            YES, SDB AND NO OLD DEVICE TYPES
         L     R14,$UCBAD          NO, POINT TO THE UCB
         TM    19(R14),X'0E'       PDS ON 3380 OR 3390?
         BNO   CNDTRKOK            NO
         LR    R14,R15             YES
         AR    R15,R15             DOUBLE THE SIZE REQUEST
         AR    R15,R14             TRIPLE THE SIZE REQUEST
CNDTRKOK ST    R15,DA08PQTY        SET PRIMARY SPACE
         SRA   R15,2
         LA    R15,1(,R15)         ENSURE SOME SECONDARY SPACE
         ST    R15,DA08SQTY        SET SECONDARY SPACE
         MVI   DA08CTL,DA08TRKS    SET ALLOCATON SPACE UNIT
         L     R1,REVPSCB          POINT TO PSCB
         USING PSCB,R1
         L     R14,REVUPT          POINT TO USER PROFILE TABLE
         USING UPT,R14
         CLI   PSCBUSER,C'>'       '>7BYTES'?
         BNE   CNDPREF             NO
         CLC   PSCB+84(8),UPT+33   PREFIX EQUALS USERID?
         B     CNDUID3             NO, SO REQUEST USE OF PREFIX
CNDPREF  CLC   PSCBUSER,UPTPREFX   PREFIX EQUALS USERID?
CNDUID3  BE    CNDDAIR             YES, DO NOT ASK SYSTEM TO USE IT
         OI    DA08CTL,DA08UID     NO, GET SYSTEM TO USE PREFIX
         DROP  R1,R14              PSCB, UPT
CNDDAIR  XC    MYECB,MYECB
         XASAM24
         LA    R1,MYDAPL
         L     R15,CVTPTR(,0)      CVT
         L     R15,CVTDAIR-CVT(,R15)
         BASR  R14,R15             CALL IKJDAIR
         XASAM31
         MVC   CONDNSDD,DA08DDN    COPY GENERATED DDNAME
         LTR   R15,R15
         BZ    CONDDSOK            FILE SUCCESSFULLY ALLOCATED
         STH   R15,RC              SAVE RETURN CODE
         MVC   MSG+2(21),=CL21'RC=XX DARC=XXXX CTRC='
         UNPK  MSG+5(3),RC+1(2)
         TR    MSG+5(2),CONDHEX-C'0'
         MVI   MSG+7,C' '
         UNPK  MSG+13(5),DA08DARC(3)
         TR    MSG+13(4),CONDHEX-C'0'
         MVI   MSG+17,C' '
         UNPK  MSG+23(5),DA08CTRC(3)
         TR    MSG+23(4),CONDHEX-C'0'
         MVI   MSG+27,C' '
         MVC   MSG+28(10),=CL10'*CONDENSE*'
         LA    R0,25+11
         STH   R0,MSG              SET MESSAGE LENGTH
         OI    STATUS7,$7BELL      REQUEST AUDIBLE ALARM
         B     CONDEXIT            GO RETURN TO CALLER
         SPACE
************************************************************
*                                                          *
*         SERIALIZE DATA SET FOR CONDENSE                  *
*                                                          *
************************************************************
         SPACE
CONDDSOK OI    STATUS13,$13COMP    SET COMPRESS FLAG
         XC    CONDQUAD,CONDQUAD
         MVI   CONDQUAD,X'C0'      USE ORIGINAL PARAMETER LIST FORMAT
         RESERVE (CNDSPFED,$DSNAME+2,E,44,SYSTEMS),                    +
               RET=NONE,UCB=$UCBAD,MF=(E,CONDQUAD)
         SPACE
************************************************************
*                                                          *
*         PERFORM COPY OUT OPERATION                       *
*                                                          *
************************************************************
         SPACE
*    IF THE COPY OUT PHASE FAILS, REVPDS WILL HAVE LOADED
*    A MESSAGE INTO 'MSG', AND SET 'RC' AND GPR15 TO 4.
         SPACE
         L     R15,=A(REVPDS)      LOAD ROUTINE ENTRY POINT
         BASR  R14,R15             CALL PROCESSOR
         LTR   R15,R15             SUCCESSFUL COPY OUT PHASE?
         BNZ   CONDFREE            NO, GO FREE DATA SETS
         TM    STATUS4,$4ATTN      ATTENTION INTERRUPT?
         BO    CONDATTN            YES, NO PROBLEM STOPPING NOW
         SPACE
************************************************************
*                                                          *
*         PERFORM COPY BACK OPERATION                      *
*                                                          *
************************************************************
         SPACE
         MVC   CNDATCHD,CNDATCHS
         XC    CNDATECB,CNDATECB   RESET ECB
         LA    R0,16
         STH   R0,CONDDBL+4        PASS DDNAMES TO REVLPDS
         MVC   CONDDBL+6(8),CONDNSDD
         MVC   CONDDBL+14(8),$DDNAME
         CLI   MSG,60              PDS WITH NO MEMBERS?
         BNE   CONDRELD            NO, PROCEED AS NORMAL
         MVI   CONDDBL+6,0         YES, FLAG THIS IN DDNAME FOR REVLPDS
         MVI   MSG,0               CLEAR PENDING MESSAGE
CONDRELD LA    R1,CONDDBL+4        POINT TO REVLPDS PROGRAM PARAMETER
         ST    R1,CONDDBL          SAVE INTO PLIST
         OI    CONDDBL,X'80'       FLAG LAST PARAMETER
         LA    R1,CONDDBL          POINT TO PROGRAM PLIST
         ATTACH ECB=CNDATECB,SF=(E,CNDATCHD)
         ST    R1,CNDATTCB         SAVE TCB ADDRESS
         WAIT  ECB=CNDATECB        WAIT FOR SUBTASK TO COMPLETE
         DETACH CNDATTCB           REMOVE SUBTASK TCB
         XC    CNDATTCB,CNDATTCB   CLEAR TCB ADDRESS
         ICM   R1,14,CNDATECB+1    LOAD COMPLETION CODE
         BNZ   CONDFAIL            GO REPORT NON-ZERO CODE
         MVC   MSG(MSGCNDL),MSGCND COMPRESS SUCCESSFUL
         L     R1,=A(LEVLWRCS)
         TR    MSG+3(MSGCNDL-3),0(R1)
         B     CONDFREE            GO CLAIM SUCCESS
         SPACE
************************************************************
*                                                          *
*         HANDLE COPY BACK FAILURE                         *
*                                                          *
************************************************************
         SPACE
CONDFAIL SR    R0,R0               CLEAR FOR SHIFT
         SLDL  R0,12               GET SYSTEM ABEND CODE
         LTR   R0,R0               DID IT ABEND?
         BZ    CONDBDRC            NO, MUST BE NON-ZERO RETURN CODE
         SLL   R0,4                YES, MAKE ROOM FOR "SIGN"
         STH   R0,DOUBLE           SAVE SYSTEM ABEND CODE
         OI    DOUBLE+1,X'0F'      SUPPLY "PACKED SIGN"
         MVC   MSG+2(7),=C'ABEND S'
         UNPK  MSG+9(3),DOUBLE(2)  SHOW ABEND CODE IN MESSAGE
         TR    MSG+9(3),CONDHEX-C'0'
         LA    R1,MSG+12           POINT PAST MESSAGE SO FAR
         B     CONDBKBD            GO COMPLETE MESSAGE
CONDBDRC SLDL  R0,12               GET RETURN CODE
         CVD   R0,DOUBLE
         OI    DOUBLE+7,X'0F'
         MVC   MSG+2(3),=C'RC='
         UNPK  MSG+5(4),DOUBLE     SHOW DECIMAL RETURN CODE
         LA    R1,MSG+9            POINT PAST MESSAGE SO FAR
CONDBKBD MVC   0(16,R1),=C' - HOLD FILE IS '
         MVC   16(8,R1),CONDNSDD
         LA    R1,24(,R1)          POINT PAST WHOLE MESSAGE
         LA    R0,MSG+2            POINT TO MESSAGE START
         SR    R1,R0               GET MESSAGE LENGTH
         STH   R1,MSG              SET MESSAGE LENGTH
         B     CONDOVER            PDS PROBABLY DESTROYED SO
*                                  LEAVE HOLD FILE ALLOCATED
         SPACE
************************************************************
*                                                          *
*         FREE CONDENSE HOLDING DATA SET                   *
*                                                          *
************************************************************
         SPACE
CONDATTN MVI   MSG,122             PROCESSING INTERRUPTED
         MVI   RC+1,4              SET NON-ZERO RETURN CODE
         SPACE
CONDFREE XC    MYDAPB,MYDAPB       ISSUE DEALLOCATION REQUEST
         MVI   DA18CD+1,X'18'
         MVC   DA18DDN,CONDNSDD    DDNAME
         MVC   DA18MNM,CONDBLNK    MEMBER NAME
         MVC   DA18SCLS,CONDBLNK   SYSOUT CLASS IS 2-BYTE FIELD
         MVI   DA18DPS2,DA18DEL    SET DISPOSITION TO DELETE
         MVI   DA18CTL,DA18PERM    JUST IN CASE IT HELPS
         XC    MYECB,MYECB
         XASAM24
         LA    R1,MYDAPL
         L     R15,CVTPTR(,0)      CVT
         L     R15,CVTDAIR-CVT(,R15)
         BASR  R14,R15             CALL IKJDAIR TO FREE FILE
         XASAM31
         SPACE
**********************************************************************
*                                                                    *
*         UPDATE DATA SET STATUS AND RELEASE SERIALIZATION           *
*                                                                    *
**********************************************************************
         SPACE
CONDOVER NI    STATUS13,255-$13COMP
         XC    CONDQUAD,CONDQUAD
         MVI   CONDQUAD,X'C0'      USE ORIGINAL PARAMETER LIST FORMAT
         DEQ   (CNDSPFED,$DSNAME+2,44,SYSTEMS),                        +
               RET=NONE,UCB=$UCBAD,MF=(E,CONDQUAD)
         SPACE
************************************************************
*                                                          *
*         TERMINATE                                        *
*                                                          *
************************************************************
         SPACE
CONDEXIT MVI   STATUS3,0           RESET MEMBER SORT ORDER TO DEFAULT
         LR    R1,R13              POINT TO LOCAL WORKING STORAGE
         L     R13,4(,R13)         POINT TO CALLER'S SAVE AREA
         LA    R0,$CONDWKL         GET LOCAL WORKING STORAGE LENGTH
         FREEMAIN RU,LV=(0),A=(1)  FREE LOCAL WORKING STORAGE
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         LH    R15,RC              SET LOCAL RETURN CODE
         XC    RC,RC               CLEAR FIELD FOR CALLER
         BR    R14                 RETURN TO CALLER
         SPACE
         TITLE '  R E V C O N D   -   S T A T I C   A R E A  '
         DC    0D'0'
CNDALLDA DC    CL8'SYSALLDA'
CNDSPFED DC    CL8'SPFEDIT '
CONDHEX  DC    CL16'0123456789ABCDEF'
CONDBLNK DC    CL8' '
CNDATCHS ATTACH EP=REVLPDS,ECB=,SZERO=NO,SF=L
CNDATCHL EQU   *-CNDATCHS
MSGCND   MESG  'COMPRESS SUCCESSFUL'
         DC    0D'0'
         LTORG
         SPACE
         DROP  R11                 REVCOND
         SPACE
         DC    0D'0'               END OF CSECT
         SPACE
         TITLE '  R E V C O N D   -   D Y N A M I C   A R E A  '
@CONDWK  DSECT
         DS    18F
CONDDBL  DS    D                   DOUBLEWORD
CONDQUAD DS    XL16                DOUBLEWORD ALIGNED QUADWORD
CNDATECB DS    F                   SUBTASK EVENT CONTROL BLOCK
CNDATTCB DS    F                   SUBTASK TCB ADDRESS
CNDATCHD DS    XL(CNDATCHL)        ATTACH CONTROL PARAMETER LIST
         DS    0D                  END OF DSECT
$CONDWKL EQU   *-@CONDWK
         SPACE
         TITLE '  R E V R E N A M '
************************************************************
*                                                          *
*         RENAME A NON-VSAM DATA SET                       *
*                                                          *
************************************************************
         SPACE
**********************************************************************
*                                                                    *
*        THIS ROUTINE RENAMES A NON-VSAM DASD DATA SET:              *
*                                                                    *
*        - THE CALLER MUST HAVE EXCLUSIVELY ALLOCATED THE            *
*          SUBJECT DATA SET AND HAVE VERIFIED THAT IT IS             *
*          A DASD NON-VSAM DATA SET.                                 *
*                                                                    *
*        - THE USER IS PROMPTED FOR A NEW DATA SET NAME.             *
*                                                                    *
*        - IF THE SUBJECT DATA SET IS CATALOGED THEN THE NEW         *
*          DATA SET NAME IS REJECTED IF ALREADY CATALOGED.           *
*                                                                    *
*        - IF THE DATA SET IS CATALOGED THEN THE TSO 'RENAME'        *
*          COMMAND IS EMPLOYED TO PERFORM THE RENAME.                *
*                                                                    *
*        - THE TSO 'RENAME' COMMAND FREES THE DATA SET IT HAS        *
*          RENAMED.                                                  *
*                                                                    *
*        - IF THE DATA SET IS NOT CATALOGED THEN THE 'RENAME'        *
*          DADSM MACRO IS USED TO RENAME THE VTOC ENTRY ON           *
*          THE RELEVANT DASD VOLUME.                                 *
*                                                                    *
*        - IT IS LEFT TO THE CALLER TO FREE THE DATA SET IF          *
*          IT REMAINS ALLOCATED.                                     *
*                                                                    *
*        - THE CALLER SHOULD NOT OVERLAY THE 'MSG' VARIABLE          *
*          UNTIL IT HAS BEEN DISPLAYED BY REVCOMM.                   *
*                                                                    *
**********************************************************************
         SPACE
**********************************************************************
*                                                                    *
* REGISTERS ON ENTRY: R9 -> @DATA                                    *
*                     R13-> SAVE AREA                                *
*                     R14-> RETURN ADDRESS                           *
*                     R15-> REVRENAM                                 *
*                                                                    *
* DATA ON ENTRY:  $DDNAME = FILE NAME OF EXCLUSIVE ALLOCATION        *
*                 $DSNAME = NAME OF DATA SET TO BE RENAMED           *
*                 $VOLSER = VOLUME SERIAL OF $DSNAME                 *
*                  $UCBAD = ADDRESS OF UCB OF $VOLSER                *
*                                                                    *
* DURING PROCESSING:  R13-> @RENMWK  (LOCAL GETMAINED AREA)          *
*                                                                    *
* DATA ON EXIT:   $DDNAME = BLANKED IF FREED                         *
*                 $DSNAME = RESULTANT DATA SET NAME                  *
*                 $VOLSER = BLANKED IF FREED                         *
*                  $UCBAD = ZEROED IF FREED                          *
*                     MSG = MESSAGE FOR REVCOMM                      *
*                                                                    *
* RETURN CODES:       R15 = RENAME RETURN CODE                       *
*                                                                    *
**********************************************************************
         EJECT
REVRENAM RSECT
REVRENAM AMODE ANY
         B     @RENM-*(,R15)
         DC    AL1(8),CL9'REVRENAM'
@RENM    STM   R14,R12,12(R13)
         LR    R11,R15             SET BASE
         USING REVRENAM,R11
         LA    R0,$RENMWKL         GET LOCAL WORKING STORAGE
         GETMAIN RC,LV=(0),LOC=(24,64)
         STH   R15,RC              SAVE RETURN CODE
         LTR   R15,R15             SUCCESS?
         BZ    @RENMOK             YES
         MVI   MSG,123             REQUEST ABORTED - STORAGE FULL
         B     @RENMXIT            RETURN TO CALLER
         USING @RENMWK,R13
         SPACE
************************************************************
*                                                          *
*         RENAME A NON-VSAM DATA SET                       *
*                                                          *
************************************************************
         SPACE
*  INITIALIZE WORKING STORAGE
@RENMOK  LA    R15,$RENMWKL
         LR    R14,R1
         SR    R3,R3
         MVCL  R14,R2              CLEAR WORKING STORAGE
         ST    R13,4(,R1)          CHAIN SAVE AREAS
         ST    R1,8(,R13)
         LR    R13,R1              POINT TO GETMAINED AREA
         MVC   RENDSNAM,$DSNAME    COPY DSNAME TO BE RENAMED
         SPACE
*  CLEAR SCREEN BUFFER
         L     R0,SCREENBF         POINT TO PRIMARY SCREEN BUFFER
         L     R1,SCREENSZ         GET THE SCREEN SIZE
         LA    R15,C' '            GET PAD CHARACTER
         SLL   R15,24              PROMOTE PAD AND ZERO LENGTH
         MVCL  R0,R14              BLANK OUT PRIMARY BUFFER
*        L     R0,SHADOWBF         POINT TO THE SHADOW BUFFER
         L     R1,SCREENSZ         GET THE SCREEN SIZE
         SR    R15,R15             ZERO SOURCE LENGTH AND PAD
         MVCL  R0,R14              ZERO OUT SHADOW BUFFER
         SPACE
*  LINE 1       HEADING
         L     R2,SCREENBF         POINT TO PRIMARY SCREEN BUFFER
         L     R4,SHADOWBF         POINT TO THE SHADOW BUFFER
         MVI   1(R4),X'07'         SHOW HEADING IN WHITE
         MVC   0(4,R2),RNLN01P1
         L     R1,SCRNCOLS
         SRA   R1,1
         LA    R0,L'RNLN01P2/2
         SR    R1,R0
         AR    R1,R2
         MVC   0(L'RNLN01P2,R1),RNLN01P2
         A     R2,SCRNCOLS         POINT TO LINE 2
         A     R4,SCRNCOLS
         LR    R1,R2
         LA    R0,L'RNLN01P3
         SR    R1,R0
         MVC   0(L'RNLN01P3,R1),RNLN01P3
         SPACE
*  LINE 8       DATA SET NAME
         LA    R1,6
         M     R0,SCRNCOLS
         AR    R2,R1               POINT TO LINE 8
         AR    R4,R1
         MVC   0(RNLN08L,R2),RNLN08
         MVI   1(R4),X'05'
         MVI   RNLN08L-5(R4),X'06'
         LA    R2,RNLN08L-1(,R2)   POINT TO INPUT AREA (LEADING QUOTE)
         LA    R4,RNLN08L-1(,R4)   POINT TO INPUT AREA SHADOW
         MVI   0(R4),X'32'         UNDERSCORE RED
         MVC   1(45,R4),0(R4)
         XC    1(45,R2),1(R2)      SET INPUT AREA AFTER QUOTE TO NULLS
         LA    R14,1(,R2)          POINT PAST LEADING QUOTE
         LH    R15,RENDSNAM        GET DATA SET NAME LENGTH
         LA    R0,RENDSNAM+2       POINT TO ORIGINAL DATA SET NAME
         LR    R1,R15              GET ITS LENGTH
         MVCL  R14,R0              COPY ORIGINAL DATA SET NAME
         MVI   0(R14),QUOTE        SUPPLY TRAILING QUOTE
         MVI   46(R2),FLDOUTLO     SUPPLY LAST ATTRIBYTE BYTE
         ST    R2,RENDBL           SAVE FIELD ADDRESS IN REVINDSN PLIST
         B     RENMREDO
         SPACE
*  RESPOND TO INVALID NEW DATA SET NAME TERMINAL INPUT
RNINPTBD L     R4,=A(LOADFIXM)     POINT TO ERROR MESSAGE
RNINPTER L     R14,SCRNCOLS        GET SCREEN WIDTH
         LR    R1,R14              COPY IT
         AR    R14,R14             DOUBLE IT
         SRA   R1,1                HALVE IT
         LA    R0,(LOADFIXL/2)+1   GET LENGTH NEEDED BACK FROM HALFWAY
         SR    R1,R0               GET OFFSET INTO THIRD LINE
         AR    R1,R14              GET OFFSET INTO SCREEN
         A     R1,SCREENBF         POINT TO SCREEN LOCATION
         MVC   1(LOADFIXL,R1),0(R4)
         A     R1,SCREENSZ         POINT TO SHADOW LOCATION
         MVI   0(R1),X'22'         REVERSE RED FOR ERROR MESSAGE
         MVC   1(LOADFIXL+1,R1),0(R1)
         OI    STATUS7,$7BELL      REQUEST AUDIBLE ALARM
         SPACE
*  DISPLAY PROMPTING PANEL
RENMREDO L     R1,RENDBL           POINT TO DSNAME FIELD START
         S     R1,SCREENBF         GET ITS OFFSET INTO THE SCREEN
         L     R15,=A(CALCPOSI)    GET CONVERSION ROUTINE ENTRY POINT
         BASR  R14,R15             CONVERT FOR 3270 DATA STREAM
         MVI   REVPOS,SBA          CREATE ORDER TO PLACE CURSOR
         STCM  R1,3,REVPOS+1
         MVI   REVPOS+3,IC
         OI    STATUS10,$10ASP     FLAG PROMPTING PANEL ACTIVE
         OI    STATUS11,$11OUT     ADJUST MESSAGE PLACEMENT
         L     R15,=A(REVCOMM)     POINT TO TERMINAL I/O ROUTINE
         BASR  R14,R15             WRITE SCREEN AND READ REPLY
         NI    STATUS11,255-$11OUT RESET MESSAGE PLACEMENT SIGNAL
         NI    STATUS10,255-$10ASP PROMPTING PANEL NO LONGER ACTIVE
         TM    STATUS4,$4ATTN      ATTENTION INTERRUPT?
         BO    RENCNCLD            YES, ABORT THIS REQUEST
         CLI   REPLY,ENTERAID      ENTER KEY?
         BNE   RENCNCLD            NO, ABORT RENAME IF PF KEY
         SPACE
*  DETERMINE FULLY QUALIFIED NEW DATA SET NAME
         LA    R14,$DSNAME         POINT TO THE OUTPUT AREA
         ST    R14,RENDBL+4        COMPLETE THE PARAMETER LIST
         LA    R1,RENDBL           POINT TO THE PARAMETER LIST
         L     R15,=A(REVINDSN)    POINT TO DSNAME EXTRACTION ROUTINE
         BASR  R14,R15             CALL IT
         LTR   R15,R15             SUCCESS?
         BNZ   RNINPTBD            NO, GO LOAD ERROR MESSAGE
         SPACE
*  VERIFY NEW DATA SET DOES NOT YET EXIST
         CLC   RENDSNAM,$DSNAME    UNCHANGED NAME?
         BE    RENMREDO            YES, SKIP CATALOG LOOK UP
         XC    MYDAPB,MYDAPB
         MVI   DA04CD+1,X'04'
         LA    R0,$DSNAME
         ST    R0,DA04PDSN
         XC    MYECB,MYECB
         XASAM24
         LA    R1,MYDAPL
         L     R15,CVTPTR(,0)      CVT
         L     R15,CVTDAIR-CVT(,R15)
         BASR  R14,R15             CALL IKJDAIR
         XASAM31
         LA    R4,RENMNEWM         POINT TO ERROR MESSAGE
         LTR   R15,R15             DOES FILE EXIST?
         BZ    RNINPTER            YES, GO REPROMPT
         SPACE
*  REVALIDATE DATA SET - HANDLES STATUS CHANGE DURING USER THINK TIME
         XC    RENCAMPL,RENCAMPL   RESET CAMLST AREA
         MVI   RENCAMPL,X'44'      INDICATE LOCATE CAMLST
         LA    R0,RENDSNAM+2       GET DSNAME ADDRESS
         ST    R0,RENCAMPL+4       SET DSNAME ADDRESS
         LA    R0,RENCAMWA         GET OUTPUT BUFFER ADDRESS
         ST    R0,RENCAMPL+12      SET OUTPUT BUFFER ADDRESS
         LOCATE RENCAMPL
         L     R2,$UCBAD           POINT TO THE VOLUME'S UCB
         LTR   R15,R15             CATALOG ENTRY FOUND?
         BNZ   RENMACRO            NO, IT IS UNCATALOGED
         LH    R1,RENCAMWA         YES, GET THE VOLUME COUNT
         LTR   R1,R1
         BNP   RENMACRO            SILLY VALUE SO AS IF NOT CATALOGED
         LA    R0,20               GET THE MAXIMUM COUNT TO PROCESS
         CR    R1,R0               TOO BIG TO HANDLE?
         BNH   *+8                 NO
         LA    R1,20               YES, REDUCE TO MAXIMUM
         LA    R7,RENCAMWA+2       POINT TO THE FIRST ENTRY
RENVCKLP CLC   $VOLSER,4(R7)       CATALOGED ON THIS VOLUME?
         BNE   RENVCKNX            NO VOLUME MATCH YET
         CLC   2(2,R7),18(R2)      CORRECT TYPE OF DASD?
         BE    RENCOMND            YES, DATA SET IS CATALOGED HERE
         TM    2(R7),X'20'+X'80'   CATALOGED ON DASD OR TAPE?
         BNZ   RENMACRO            YES, WRONG TYPE SO IGNORE CATALOG
         B     RENCOMND            ON ESOTERIC SO ASSUME THIS IS IT
RENVCKNX LA    R7,12(,R7)          POINT TO NEXT ENTRY FROM LOCATE
         BCT   R1,RENVCKLP         CONTINUE VOLUME CHECK
         SPACE
*  GENERATE THE PARAMETERS FOR A RENAME MACRO
RENMACRO L     R14,RENAME          GET CAMLST RENAME SETTINGS
         LA    R15,RENDSNAM+2      POINT TO OLD DATA SET NAME
         LA    R0,$DSNAME+2        POINT TO NEW DATA SET NAME
         LA    R1,RENCAMWA         POINT TO THE VOLUME LIST
         STM   R14,R1,RENQUAD      SET THE RENAME CAMLST
         LA    R0,1                GET THE VOLUME COUNT
         STH   R0,0(,R1)           SET INTO VOLUME LIST
         MVC   2(4,R1),16(R2)      SET DEVICE TYPE
         MVC   6(6,R1),$VOLSER     SET VOLUME SERIAL
         STCM  R0,12,12(R1)        RESET VOLUME ENTRY STATUS AREA
         SPACE
*  ISSUE RENAME MACRO AND PROCESS RESULT
         SR    R0,R0               NO UCB ADDRESS IS BEING PASSED
         RENAME RENQUAD            PERFORM RENAME
         STH   R15,RC              SAVE RETURN CODE
         LTR   R15,R15             SUCCESS?
         BZ    RENMDONE            YES
         MVI   MSG,0               NO, CONSTRUCT AN ERROR MESSAGE
         OI    STATUS7,$7BELL      REQUEST AUDIBLE ALARM
         MVC   MSG+2(10),=CL10'RENAME RC='
         UNPK  MSG+12(3),RC+1(2)
         TR    MSG+12(2),RENHEX-C'0'
         MVI   MSG+1,12            SET MESSAGE LENGTH
         CLI   RC+1,8              IS RC 0, 4 OR 8?
         BH    RENMEXIT            NO, MESSAGE COMPLETE
         MVI   MSG+14,C'-'         YES, SHOW STATUS CODE
         MVC   MSG+15(1),RENCAMWA+2+11
         NI    MSG+15,X'0F'        THIS SHOULD BE A NO-OP
         TR    MSG+15(1),RENHEX
         MVI   MSG+1,14            SET MESSAGE LENGTH
         B     RENMEXIT            NO, MESSAGE COMPLETE
         SPACE
*  GENERATE THE TSO RENAME COMMAND
RENCOMND MVI   CMDAREA,C' '        INITIALIZE COMMAND BUFFER
         MVC   CMDAREA+1(L'CMDAREA-1),CMDAREA
         LA    R15,CMDAREA
         MVC   0(12,R15),=CL12'TSO RENAME '''
         MVC   12(44,R15),RENDSNAM+2
         LA    R1,12(,R15)
         AH    R1,RENDSNAM         POINT PAST OLD NAME
         MVC   0(3,R1),=CL3''' '''
         MVC   3(44,R1),$DSNAME+2
         AH    R1,$DSNAME
         MVI   3(R1),QUOTE         COMPLETE NEW NAME
         LA    R1,3(,R1)           POINT PAST COMMAND
         SR    R1,R15              GET THE COMMAND LENGTH
         ST    R1,CMDLEN           SET COMMAND LENGTH CODE
         SPACE
*  PERFORM THE RENAME TSO COMMAND - IT WILL FREE THE FILE
         OI    STATUS4,$4CMD       TELL REVCOMM TO SKIP TERMINAL I/O
         L     R15,=A(REVCOMM)     NO PARAMETER LIST PASSED
         BASR  R14,R15             PROCESS COMMAND STRING
         TM    STATUS7,$7BELL      SUCCESS?
         BNO   RENMGOOD            YES
         MVI   RC+1,8              NO, FLAG ERROR
         MVC   $DSNAME(46),RENDSNAM RESTORE ORIGINAL DATA SET NAME
         B     RENMEXIT            USE MESSAGE FROM REVCOMM
RENMGOOD MVI   RC+1,0              YES, ZERO RETURN CODE
         MVC   $DDNAME,RENBLNKS    CLEAR FREED DDNAME
         MVC   $VOLSER,RENBLNKS    CLEAR VOLUME
         XC    $UCBAD,$UCBAD       CLEAR UCB ADDRESS
RENMDONE MVI   MSG,207             DATA SET RENAMED
         SPACE
************************************************************
*                                                          *
*         TERMINATE                                        *
*                                                          *
************************************************************
         SPACE
RENMEXIT LR    R1,R13              POINT TO LOCAL WORKING STORAGE
         L     R13,4(,R13)         POINT TO CALLER'S SAVE AREA
         LA    R0,$RENMWKL         GET LOCAL WORKING STORAGE LENGTH
         FREEMAIN RU,LV=(0),A=(1)  FREE LOCAL WORKING STORAGE
@RENMXIT LM    R14,R12,12(R13)     RESTORE REGISTERS
         LH    R15,RC              SET RETURN CODE FOR CALLER
         XC    RC,RC               ZERO RETURN CODE TO EXTERNALIZE
         BR    R14                 RETURN TO CALLER
         SPACE
RENCNCLD MVI   RC+1,2              FLAG RENAME NOT DONE
         MVI   MSG,29              REQUEST CANCELLED
         B     RENMEXIT            TIME TO LEAVE
         SPACE
         DROP  R11                 REVRENAM
         TITLE '  R E V R E N A M   -   S T A T I C   A R E A  '
         SPACE
RNLN01P1 DC    AL1(FLDOUTHI),C'RFE'
RNLN01P2 DC    C'RENAME DATA SET'
RNLN01P3 DC    C'R&REL'
RNLN08   DC    AL1(FLDOUTLO),C'NEW NAME OF DATA SET'
         DC    AL1(FLDOUTHI),C'==>',AL1(FLDINHI),AL1(QUOTE)
RNLN08L  EQU   *-RNLN08
RENMNEWM DC    C'>>> DATA SET NAME ALREADY EXISTS - SPECIFY A NEW ONE <+
               <<'                 (HAS SAME LENGTH AS LOADFIXM)
         DC    0D'0'
RENHEX   DC    CL16'0123456789ABCDEF'
RENBLNKS DC    CL8' '
RENAME   CAMLST RENAME,2,3,4       CAMLST FOR RENAME
RENAMEL  EQU   *-RENAME
         LTORG
         SPACE
         DC    0D'0'               END OF CSECT
         TITLE '  R E V R E N A M   -   D Y N A M I C   A R E A  '
@RENMWK  DSECT
         DS    18F
RENQUAD  EQU   *,16
RENDBL   DS    D
         DS    D
RENCAMPL DS    XL16                CAMLST AREA
RENCAMWA DS    XL265
         DS    0H
RENDSNAM DS    CL46                OLD DSNAME HOLD AREA
         SPACE
         DS    0D                  END OF DSECT
$RENMWKL EQU   *-@RENMWK
         SPACE
         TITLE '  R E V I N D S N  '
**********************************************************************
*                                                          *         *
*         EXTRACT INPUT DATA SET NAME                      *  R43.0  *
*                                                          * 2009DEC *
**********************************************************************
         SPACE
**********************************************************************
*                                                                    *
*        THIS ROUTINE FORMS A NEW DATA SET NAME FROM THE             *
*        SUPPLIED TERMINAL INPUT DATA.                               *
*                                                                    *
**********************************************************************
         SPACE
**********************************************************************
*                                                                    *
* REGISTERS ON ENTRY: R1 -> +0 -> 46-BYTE TYPED INPUT AREA           *
*                           +4 -> 46-BYTE OUTPUT AREA:               *
*                                 H/W LENGTH || 44-BYTE NAME         *
*                     R9 -> @DATA                                    *
*                     R13-> SAVE AREA                                *
*                     R14-> RETURN ADDRESS                           *
*                     R15-> REVINDSN                                 *
*                                                                    *
* DURING PROCESSING:  NO STORAGE IS ACQUIRED OR FREED.               *
*                     BYTE AT DOUBLE+4 USED AS FLAG BYTE.            *
*                     R11-> REVINDSN                                 *
*                                                                    *
* RETURN CODES:       R15 = 0  PROCESSING COMPLETE                   *
*                     R15 = 4  INVALID DATA SET NAME DETECTED        *
*                                                                    *
**********************************************************************
         SPACE
REVINDSN RSECT
REVINDSN AMODE ANY
         B     @INDSN-*(,R15)
         DC    AL1(9),CL9'REVINDSN'
@INDSN   STM   R14,R12,12(R13)
         LR    R11,R15             SET BASE
         USING REVINDSN,R11
         SPACE
         LM    R2,R3,0(R1)         POINT TO INPUT AND OUTPUT AREAS
         SPACE
         L     R6,INDSNKP@         POINT TO TRANSLATE TABLE
         MVC   MYTRTBL,0(R6)       COPY TRANSLATE TABLE
         MVI   MYTRTBL+C',',C'.'   ALSO TURN COMMAS INTO PERIODS
         TR    0(46,R2),MYTRTBL    UPPER CASE AND BLANK NULLS
         SPACE
         LA    R0,45               GET LENGTH MINUS ONE
         LA    R15,45(,R2)         POINT TO LAST INPUT BYTE
INLEFTLP CLI   0(R2),C' '          LEADING BLANK?
         BNE   INLEFTOK            NO, DATA IS LEFT JUSTIFIED
         MVC   0(45,R2),1(R2)      YES, DISCARD LEADING BLANK
         MVI   45(R2),C' '         SUPPLY TRAILING BLANK
         BCT   R0,INLEFTLP         CONTINUE LEADING BLANK CHECK
         SPACE
INLEFTOK CLI   0(R15),C' '         TRAILING BLANK?
         BNE   INNULLOK            NO
         MVI   0(R15),NULL         YES, CONVERT TO NULL FOR REPROMPT
         BCT   R15,INLEFTOK        BACK UP AND CHECK AGAIN
         SPACE
INNULLOK LA    R14,1(,R15)         POINT PAST NON-BLANK DATA
         SR    R14,R2              GET NON-BLANK DATA LENGTH
         MVI   2(R3),C' '          BLANK OUT DATA SET NAME
         MVC   3(43,R3),2(R3)
         SR    R15,R15             NO PREFIX ADDED
         STH   R15,0(,R3)          FLAG NO DATA YET
         CLI   0(R2),QUOTE         QUOTED DATA SET NAME?
         BE    INDSQUOT            YES
         MVI   DOUBLE+4,0          NO, FLAG NOT QUOTED
         L     R1,REVUPT           POINT TO USER PROFILE TABLE
         USING UPT,R1
         MVC   2(7,R3),UPTPREFX    COPY THE PREFIX
         ICM   R15,1,UPTPREFL      GET THE PREFIX LENGTH
         CLI   UPTPREFX,C'>'       '>7BYTES'?
         BNE   INDSPREF            NO
         MVC   2(8,R3),UPT+33      COPY UPTPREF8
         LA    R15,8               GET THE PREFIX LENGTH
         DROP  R1                  UPT
INDSPREF LA    R1,2(R15,R3)        POINT PAST PREFIX
         BZ    INDSREST            HANDLE PROFILE NOPREFIX
         MVI   0(R1),C'.'          SUPPLY PERIOD
         LA    R1,1(,R1)           POINT PAST PERIOD
         LA    R15,1(,R15)         COUNT LENGTH SO FAR
         B     INDSREST            TIME TO FINISH LOADING THE DSNAME
INDSQUOT MVI   DOUBLE+4,1          FLAG QUOTED
         AR    R14,R2              POINT PAST INPUT DATA
         BCTR  R14,0               BACK UP A BYTE
         CLI   0(R14),QUOTE        TRAILING QUOTE PRESENT?
         BE    *+8                 YES
         LA    R14,1(,R14)         NO, POINT PAST NON-QUOTE AGAIN
         SR    R14,R2              GET DATA LENGTH
         BNP   INDSNBAD            NO NON-QUOTES INPUT
         LA    R2,1(,R2)           POINT PAST THE LEADING QUOTE
         LA    R1,2(,R3)           POINT TO TARGET DATA SET NAME FIELD
         BCT   R14,INDSREST        DECREASE LENGTH
         B     INDSNBAD            NO NON-QUOTES INPUT
INDSREST AR    R15,R14             GET TOTAL DATA SET NAME LENGTH
         CH    R15,INHW44          STILL HAVE A VALID LENGTH?
         BH    INDSNBAD            NO, TOO LONG
         BCTR  R14,0               DECREMENT FOR EXECUTE
         L     R6,INDSNTB@         POINT TO TRANSLATE TABLE
         EX    R14,INDSNMVC        COPY THE DATA SET NAME
         LR    R2,R1               POINT TO FIELD TO TEST
         EX    R14,INDSNTRT        ONLY VALID CHARACTERS IN DSNAME?
         BNZ   INDSNBAD            NO
         STH   R15,0(,R3)          SAVE DATA SET NAME LENGTH
         SPACE
         LA    R1,2(,R3)           POINT TO START OF DATA SET NAME
INNEWQAL CLI   0(R1),C'$'          VALID START OF QUALIFIER?
         BL    INDSNBAD            NO
         CLI   0(R1),C'-'
         BE    INDSNBAD            NO
         CLI   0(R1),C'Z'
         BH    INDSNBAD            NO
         LA    R0,9                GET BYTE COUNT REQUIRING A PERIOD
INQUALLP CLI   0(R1),C'.'          END OF QUALIFIER?
         LA    R1,1(,R1)           POINT TO NEXT CHARACTER IN NAME
         BE    INNXTQAL            YES
         BCT   R15,INQALCHR        DECREMENT LENGTH REMAINING
         B     INDSNXIT            END OF DSNAME - HAVE ZERO FOR RC
INQALCHR BCT   R0,INQUALLP         KEEP SCANNING FOR PERIOD
         B     INDSNBAD            QUALIFIER LONGER THAN 8 CHARACTERS
INNXTQAL BCT   R15,INNEWQAL        DISCOUNT . AND BEGIN NEW QUALIFIER
*                                  ENDING WITH PERIOD IS INVALID
         SPACE
INDSNBAD LA    R15,4               INVALID DATA SET NAME
         SPACE
INDSNXIT L     R14,12(,R13)        RESTORE RETURN ADDRESS
         LM    R0,R12,20(R13)      RESTORE OTHER REGISTERS
         BR    R14                 RETURN TO CALLER
         SPACE
INDSNMVC MVC   0(0,R1),0(R2)       <<< EXECUTED >>>
INDSNTRT TRT   0(0,R2),0(R6)       <<< EXECUTED >>>
         SPACE
         DROP  R11                 REVINDSN
         SPACE
INHW44   DC    H'44'
INDSNKP@ DC    A(KAPS)
INDSNTB@ DC    A(DSNCHARS)
         SPACE
         DC    0D'0'               END OF CSECT
         TITLE '  R E V C R E A T  '
**********************************************************************
*                                                          *         *
*         CREATE A NEW DATA SET                            *  R43.0  *
*                                                          * 2009APR *
**********************************************************************
         SPACE
**********************************************************************
*                                                                    *
*        THIS ROUTINE DISPLAYS AN ENTRY PANEL WHERE THE USER         *
*        MAY PROVIDE A DATA SET NAME AND ATTRIBUTES FOR A NEW        *
*        NON-VSAM SEQUENTIAL OR PARTITIONED DATA SET.                *
*                                                                    *
**********************************************************************
         SPACE
**********************************************************************
*                                                                    *
* REGISTERS ON ENTRY: R9 -> @DATA                                    *
*                     R13-> SAVE AREA                                *
*                     R14-> RETURN ADDRESS                           *
*                     R15-> REVCREAT                                 *
*                     R1 -> LVAENT STRUCTURE                         *
*                                                                    *
* DURING PROCESSING:  R11-> REVCREAT                                 *
*                     R13-> @CREATWK (LOCAL GETMAINED AREA)          *
*                                                                    *
* RETURN CODES:       MSG = 172 - DATA SET CREATED                   *
*                     MSG = 019 - ACCESS DENIED                      *
*                     MSG = 029 - REQUEST CANCELLED                  *
*                     MSG = 123 - REQUEST ABORTED - STORAGE FULL     *
*                                                                    *
**********************************************************************
         SPACE
REVCREAT RSECT
REVCREAT AMODE ANY
         B     @CREATE-*(,R15)
         DC    AL1(9),CL9'REVCREATE'
@CREATE  STM   R14,R12,12(R13)
         LR    R11,R15             SET BASE
         USING REVCREAT,R11
         LR    R3,R1               COPY PARAMETER POINTER
         LA    R0,@CREATLN
         STCM  R0,12,RC            CLEAR RETURN CODE
         MVI   GETMNTRC,47         TRACK GETMAIN IN CASE OF FAILURE
         GETMAIN RC,LV=(0),LOC=(24,64)
         LTR   R15,R15             GOT LOCAL WORKING STORAGE?
         BZ    DOCREATE            YES
         MVI   MSG,123             REQUEST ABORTED - STORAGE FULL
         LM    R14,R12,12(R13)
         BR    R14
         SPACE
DOCREATE LA    R15,@CREATLN
         LR    R14,R1
         SR    R5,R5
         MVCL  R14,R4              CLEAR WORKING STORAGE
         ST    R1,8(,R13)          CHAIN SAVE AREAS
         ST    R13,4(,R1)
         LR    R13,R1              POINT TO GETMAINED AREA
         USING @CREATWK,R13
         SPACE
*         HARVEST PRE-EXISTING ATTRIBUTES FOR ITEM PRIMING
         USING LVAENT,CREDSATR
         ST    R3,CREPARM@         SAVE PARAMETER ADDRESS
         MVC   LVAALOC,CREALCSZ    COPY ANY SAVED VALUES FROM LAST TIME
         MVC   LVASCALO,CRE2NDRY
         MVC   CRDIR#,CREDIR
         MVC   LVALRL,CRELRECL
         MVC   LVABLK,CREBLKSI
         MVC   LVATPC,CRETPC
         MVC   LVAVOL,CREVOL
         MVC   LVARFM,CRERECFM
CREPRIM1 EQU   *
         LTR   R3,R3               PARAMETER SUPPLIED?
         BZ    CREPRIM2            NO
         MVC   CREDSATR,0(R3)      YES, COPY PARAMETER
CREPRIM2 EQU   *
         SPACE
*         COMMENCE SCREEN BUFFER PREPARATION
         L     R0,SCREENBF         POINT TO PRIMARY SCREEN BUFFER
         L     R1,SCREENSZ         GET THE SCREEN SIZE
         LA    R15,C' '            GET PAD CHARACTER
         SLL   R15,24              PROMOTE PAD AND ZERO LENGTH
         MVCL  R0,R14              BLANK OUT PRIMARY BUFFER
*        L     R0,SHADOWBF         POINT TO THE SHADOW BUFFER
         L     R1,SCREENSZ         GET THE SCREEN SIZE
         SR    R15,R15             ZERO SOURCE LENGTH AND PAD
         MVCL  R0,R14              ZERO OUT SHADOW BUFFER
         SPACE
         MVI   CRTYPE,C'T'         ALLOCATE SPACE IN TRACKS
         L     R1,LVAALOC          GET ALLOCATED TRACK COUNT
         TM    LVASCALO,DA08CYLS   ALLOCATED IN CYLINDERS?
         BNO   CRPRMINT            NO
         SR    R15,R15             YES, CLEAR FOR INSERT
         ICM   R15,1,LVATPC        GET TRACKS PER CYLINDER
         BZ    CRPRMINT            AVOID DIVIDE BY ZERO
         SR    R0,R0               CLEAR FOR DIVIDE
         AR    R1,R15              ROUND UP TO NEXT CYLINDER BOUNDARY
         BCTR  R1,0
         DR    R0,R15              CONVERT TRACKS TO CYLINDERS
         MVI   CRTYPE,C'C'         ALLOCATE SPACE IN CYLINDERS
CRPRMINT ST    R1,CRPRIM#          SAVE NUMBER TO USE
         SPACE
         MVC   CREATRNM,=CL8'REVATTR0'
         OC    CREATRNM+7,RECURS#+3
         TR    CREATRNM+7(1),CRHEX-C'0'
         SPACE
*  LINE 1       HEADING
         L     R2,SCREENBF         POINT TO PRIMARY SCREEN BUFFER
         L     R3,SHADOWBF         POINT TO THE SHADOW BUFFER
         MVI   1(R3),X'07'         SHOW HEADING IN WHITE
         MVC   0(4,R2),CRLN01P1
         L     R1,SCRNCOLS
         SRA   R1,1
         LA    R0,L'CRLN01P2/2
         SR    R1,R0
         AR    R1,R2
         MVC   0(L'CRLN01P2,R1),CRLN01P2
         A     R2,SCRNCOLS         POINT TO LINE 2
         A     R3,SCRNCOLS
         LR    R1,R2
         LA    R0,L'CRLN01P3
         SR    R1,R0
         MVC   0(L'CRLN01P3,R1),CRLN01P3
         SPACE
*  LINE 8       DATA SET NAME
         LA    R1,6
         M     R0,SCRNCOLS
         AR    R2,R1               POINT TO LINE 8
         AR    R3,R1
         MVI   0(R2),FLDOUTLO
         MVI   1(R3),X'05'
         MVC   27-L'CRLN08(L'CRLN08,R2),CRLN08
         MVI   28(R3),X'06'
         MVC   27(5,R2),CRPNTR
         XC    32(46,R2),32(R2)
         MVI   78(R2),FLDOUTLO
         LH    R1,LVADSNL          GET SUPPLIED DATA SET NAME LENGTH
         LA    R0,LVADSN           POINT TO SUPPLIED DATA SET NAME
         TM    LVAFLG,$NEWNM       IS DATA SET NAME REALLY SUPPLIED?
         BO    CREDSNIN            YES, CONTINUE
         LH    R1,$DSNAME          GET PRIMED DATA SET NAME LENGTH
         LTR   R1,R1               ANY DATA SET NAME SPECIFIED?
         BZ    CREDSRDY            NO
         LA    R0,$DSNAME+2        YES, POINT TO IT
CREDSNIN LA    R14,33(,R2)         POINT TO TARGET
         LR    R15,R1              SET LENGTH
         MVCL  R14,R0              PRIME THE DATA SET NAME
         MVI   32(R2),QUOTE
         MVI   0(R14),QUOTE
CREDSRDY LA    R1,32(,R2)          POINT TO DSNAME FIELD START
         S     R1,SCREENBF         GET ITS OFFSET INTO THE SCREEN
         TM    LVAFLG,$NEWNM       IS DATA SET NAME SUPPLIED?
         BNO   CREPUTCS            NO, PLACE CURSOR AT THIS FIELD
         A     R1,SCRNCOLS         YES, MOVE CURSOR TO NEXT FIELD
         A     R1,SCRNCOLS
         MVI   31(R2),FLDOUTHI     DATA SET NAME IS AN OUTPUT FIELD
CREPUTCS L     R15,=A(CALCPOSI)    GET CONVERSION ROUTINE ENTRY POINT
         BASR  R14,R15             CONVERT FOR 3270 DATA STREAM
         STH   R1,CRCSRADR         SET CURSOR POSITION
         TM    LVAFLG,$NEWNM       IS DATA SET NAME SUPPLIED?
         BO    CREDSNOK            YES, SO IT IS NOT AN INPUT FIELD
         MVI   32(R3),X'32'
         MVC   33(45,R3),32(R3)
CREDSNOK EQU   *
         SPACE
*  LINE 10      RECORD FORMAT
         L     R0,SCRNCOLS
         AR    R0,R0
         AR    R2,R0               POINT TO LINE 10
         AR    R3,R0
         MVI   1(R3),X'05'
         MVC   27-L'CRLN10(L'CRLN10,R2),CRLN10
         MVI   28(R3),X'06'
         MVC   27(5,R2),CRPNTR
         MVC   32(5,R2),LVARFM
         MVI   32(R3),X'32'
         MVC   33(4,R3),32(R3)
         MVI   37(R2),FLDOUTLO
         SPACE
*  LINE 11      RECORD LENGTH
         A     R2,SCRNCOLS         POINT TO LINE 11
         A     R3,SCRNCOLS
         MVI   1(R3),X'05'
         MVC   27-L'CRLN11(L'CRLN11,R2),CRLN11
         MVI   28(R3),X'06'
         MVC   27(5,R2),CRPNTR
         ICM   R0,3,LVALRL
         CVD   R0,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  32(5,R2),DOUBLE
         LA    R0,4
CRL11LP  CLI   32(R2),C'0'         LEADING 0?
         BNE   CRL110OK            NO
         MVC   32(4,R2),33(R2)
         MVI   36(R2),NULL
         BCT   R0,CRL11LP
CRL110OK MVI   32(R3),X'32'
         MVC   33(4,R3),32(R3)
         MVI   37(R2),FLDOUTLO
         SPACE
*  LINE 12      BLOCK SIZE
         A     R2,SCRNCOLS         POINT TO LINE 12
         A     R3,SCRNCOLS
         MVI   1(R3),X'05'
         MVC   27-L'CRLN12(L'CRLN12,R2),CRLN12
         MVI   28(R3),X'06'
         MVC   27(5,R2),CRPNTR
         ICM   R0,3,LVABLK
         CVD   R0,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  32(5,R2),DOUBLE
         LA    R0,4
CRL12LP  CLI   32(R2),C'0'         LEADING 0?
         BNE   CRL120OK            NO
         MVC   32(4,R2),33(R2)
         MVI   36(R2),NULL
         BCT   R0,CRL12LP
CRL120OK MVI   32(R3),X'32'
         MVC   33(4,R3),32(R3)
         MVI   37(R2),FLDOUTLO
         SPACE
*  LINE 14      VOLUME
         L     R0,SCRNCOLS
         AR    R0,R0
         AR    R2,R0               POINT TO LINE 14
         AR    R3,R0
         MVI   1(R3),X'05'
         MVC   27-L'CRLN14(L'CRLN14,R2),CRLN14
         MVI   28(R3),X'06'
         MVC   27(5,R2),CRPNTR
         MVC   32(6,R2),LVAVOL
         CLI   $VOLSER,C' '        VOLUME SERIAL SPECIFIED?
         BNH   CREDARDY            NO
         MVC   32(6,R2),$VOLSER    YES, PRIME FIELD WITH IT
CREDARDY MVI   32(R3),X'32'
         MVC   33(5,R3),32(R3)
         MVI   38(R2),FLDOUTLO
         SPACE
*  LINE 15      UNIT
         A     R2,SCRNCOLS         POINT TO LINE 15
         A     R3,SCRNCOLS
         MVI   1(R3),X'05'
         MVC   27-L'CRLN15(L'CRLN15,R2),CRLN15
         MVI   28(R3),X'06'
         MVC   27(5,R2),CRPNTR
         MVC   32(8,R2),CRUNIT
         MVI   32(R3),X'32'
         MVC   33(7,R3),32(R3)
         MVI   40(R2),FLDOUTLO
         SPACE
*  LINE 17      SPACE UNIT
         L     R0,SCRNCOLS
         AR    R0,R0
         AR    R2,R0               POINT TO LINE 17
         AR    R3,R0
         MVI   1(R3),X'05'
         MVC   27-L'CRLN17(L'CRLN17,R2),CRLN17
         MVI   28(R3),X'06'
         MVC   27(5,R2),CRPNTR
         MVC   32(1,R2),CRTYPE
         MVI   32(R3),X'32'
         MVI   33(R2),FLDOUTLO
         MVC   40(LN17P2LN,R2),CRLN17P2
         MVI   40(R3),X'05'
         MVI   42(R3),X'06'
         MVI   44(R3),X'05'
         MVI   47(R3),X'06'
         MVI   49(R3),X'05'
         MVI   52(R3),X'06'
         MVI   54(R3),X'05'
         SPACE
*  LINE 18      PRIMARY SPACE
         A     R2,SCRNCOLS         POINT TO LINE 18
         A     R3,SCRNCOLS
         MVI   1(R3),X'05'
         MVC   27-L'CRLN18(L'CRLN18,R2),CRLN18
         MVI   28(R3),X'06'
         MVC   27(5,R2),CRPNTR
         L     R0,CRPRIM#
         CVD   R0,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  32(5,R2),DOUBLE
         LA    R0,4
CRL18LP  CLI   32(R2),C'0'         LEADING 0?
         BNE   CRL180OK            NO
         MVC   32(4,R2),33(R2)
         MVI   36(R2),NULL
         BCT   R0,CRL18LP
CRL180OK MVI   32(R3),X'32'
         MVC   33(4,R3),32(R3)
         MVI   37(R2),FLDOUTLO
         SPACE
*  LINE 19      SECONDARY SPACE
         A     R2,SCRNCOLS         POINT TO LINE 19
         A     R3,SCRNCOLS
         MVI   1(R3),X'05'
         MVC   27-L'CRLN19(L'CRLN19,R2),CRLN19
         MVI   28(R3),X'06'
         MVC   27(5,R2),CRPNTR
         ICM   R0,7,LVASCALO+1
         CVD   R0,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  32(5,R2),DOUBLE
         LA    R0,4
CRL19LP  CLI   32(R2),C'0'         LEADING 0?
         BNE   CRL190OK            NO
         MVC   32(4,R2),33(R2)
         MVI   36(R2),NULL
         BCT   R0,CRL19LP
CRL190OK MVI   32(R3),X'32'
         MVC   33(4,R3),32(R3)
         MVI   37(R2),FLDOUTLO
         SPACE
*  LINE 20      DIRECTORY BLOCKS
         TM    LVAFLG,$NEWNM       IS DATA SET NAME REALLY SUPPLIED?
         BO    CREDIRDN            YES, SET DIRECTORY FROM DSORG
         A     R2,SCRNCOLS         POINT TO LINE 20
         A     R3,SCRNCOLS
         MVI   1(R3),X'05'
         MVC   27-L'CRLN20(L'CRLN20,R2),CRLN20
         MVI   28(R3),X'06'
         MVC   27(5,R2),CRPNTR
         L     R0,CRDIR#
         CVD   R0,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  32(5,R2),DOUBLE
         LA    R0,4
CRL20LP  CLI   32(R2),C'0'         LEADING 0?
         BNE   CRL200OK            NO
         MVC   32(4,R2),33(R2)
         MVI   36(R2),NULL
         BCT   R0,CRL20LP
CRL200OK MVI   32(R3),X'32'
         MVC   33(4,R3),32(R3)
         MVI   37(R2),FLDOUTLO
         SPACE
CREDIRDN OI    STATUS10,$10ASP     FLAG PROMPTING PANEL ACTIVE
         SPACE
CREAREDO MVI   REVPOS,SBA          CREATE ORDER TO PLACE CURSOR
         MVC   REVPOS+1(2),CRCSRADR
         MVI   REVPOS+3,IC
         OI    STATUS11,$11OUT     ADJUST MESSAGE PLACEMENT
         L     R15,=A(REVCOMM)     POINT TO TERMINAL I/O ROUTINE
         BASR  R14,R15             WRITE SCREEN AND READ REPLY
         NI    STATUS11,255-$11OUT RESET MESSAGE PLACEMENT SIGNAL
         LA    R15,4               NO PLACE FOR OPTIMISM
         ST    R15,DOUBLE          PREPARE FOR FAILURE
         TM    STATUS4,$4ATTN      ATTENTION INTERRUPT?
         BO    CREATCAN            YES, ABORT THIS REQUEST
         CLI   REPLY,ENTERAID      ENTER KEY?
         BNE   CREATCAN            NO, TERMINATE UPDATE IF PF KEY
         SPACE
*         CLEAR LEVEL 1 AND LEVEL 2 MESSAGES
         SPACE
         LA    R0,3
         MH    R0,SCRNCOLS+2
         A     R0,SCREENBF
         L     R1,SCRNCOLS
         AR    R1,R1
         AR    R1,R1
         LA    R15,C' '
         SLL   R15,24
         MVCL  R0,R14
         SPACE
*         PROCESS LINE 08 INPUT - DATA SET NAME
         SPACE
         LA    R2,8-1              INDICATE SCREEN LINE
         LA    R1,46               SUPPLY LENGTH OF INPUT FIELD
         BAS   R14,CRGETIN@        GO POINT TO INPUT DATA
         LTR   R14,R1              ANY DATA SET NAME SUPPLIED?
         BNP   CRINPTBD            NO, REPROMPT FOR DATA SET NAME
         MVC   CRDSNADR,CRCSRADR   SAVE CURSOR LOCATION FOR LATER
         LA    R3,CREADSNL         POINT TO DATA SET NAME AREA
         STM   R2,R3,CRINPLST      COMPLETE THE PARAMETER LIST
         LA    R1,CRINPLST         POINT TO THE PARAMETER LIST
         L     R15,=A(REVINDSN)    POINT TO DSNAME EXTRACTION ROUTINE
         BASR  R14,R15             CALL IT
         LTR   R15,R15             SUCCESS?
         BNZ   CRINPTBD            NO, BAD DSNAME INPUT
         SPACE
*         PROCESS LINE 10 INPUT - RECORD FORMAT
         SPACE
         LA    R2,10-1             INDICATE SCREEN LINE
         LA    R1,5                SUPPLY LENGTH OF INPUT FIELD
         BAS   R14,CRGETIN@        GO POINT TO INPUT DATA
         LTR   R14,R1              ANY RECORD FORMAT SUPPLIED?
         BNP   CRINPTBD            NO, REPROMPT FOR SOME INPUT
         MVC   DOUBLE+3(5),0(R2)   YES, SAVE IT FOR LATER
         MVI   CRRECFM,DCBRECF
         CLI   0(R2),C'F'          FIXED-LENGTH?
         BE    CRRFFORV            YES
         MVI   CRRECFM,DCBRECV
         CLI   0(R2),C'V'          VARIABLE-LENGTH?
         BE    CRRFFORV            YES
         CLI   0(R2),C'U'          UNDEFINED?
         BNE   CRINPTBD            NO, INVALID
         SH    R14,=H'1'           ANY OTHER CODES?
         BNZ   CRINPTBD            YES, INVALID
         MVI   CRRECFM,DCBRECU     NO, RECFM=U
         B     CRRFDONE
CRRFFORV SH    R14,=H'1'           SUBTRACT LENGTH PROCESSED
         BNP   CRRFDONE            THAT WAS ALL
         LA    R2,1(,R2)           POINT PAST PROCESSED CODE
         CLI   0(R2),C'B'          BLOCKED?
         BNE   CRRFBLKD            NO
         OI    CRRECFM,DCBRECBR    YES
         SH    R14,=H'1'           DECREMENT LENGTH REMAINING
         BNP   CRRFDONE            THAT WAS ALL
         LA    R2,1(,R2)           POINT PAST PROCESSED CODE
CRRFBLKD CLI   0(R2),C'S'          STANDARD/SPANNED?
         BNE   CRRFCCCK            NO, DO CARRIAGE CONTROL CHECK
         OI    CRRECFM,DCBRECSB    YES
         SH    R14,=H'1'           DECREMENT LENGTH REMAINING
         BNP   CRRFDONE            THAT WAS ALL
         LA    R2,1(,R2)           POINT PAST PROCESSED CODE
CRRFCCCK SH    R14,=H'1'           IS THIS THE LAST CODE?
         BNZ   CRINPTBD            NO, INVALID
         MVI   DOUBLE,DCBRECCA
         CLI   0(R2),C'A'          ANSI CARRIAGE CONTROL?
         BE    CRRFCCOK            YES
         CLI   0(R2),C'M'          MACHINE CODE CARRIAGE CONTROL?
         BNZ   CRINPTBD            NO, INVALID
         MVI   DOUBLE,DCBRECCM     YES
CRRFCCOK OC    CRRECFM,DOUBLE      SET CARRIAGE CONTROL
CRRFDONE MVC   LVARFM,DOUBLE+3     RECORD FORMAT PROCESSED
         SPACE
*         PROCESS LINE 11 INPUT - LOGICAL RECORD LENGTH
         SPACE
         LA    R2,11-1             INDICATE SCREEN LINE
         LA    R1,5                SUPPLY LENGTH OF INPUT FIELD
         BAS   R14,CRGETIN@        GO POINT TO INPUT DATA
         LTR   R1,R1               ANY RECORD LENGTH SUPPLIED?
         BNP   CRINPTBD            NO, REPROMPT FOR SOME INPUT
         BAS   R14,CRGETIN#        GO GET INPUT NUMBER
         CH    R1,=H'32756'        TOO LARGE?
         BH    CRINPTBD            YES
         LTR   R1,R1               NUMERIC VALUE INPUT?
         BM    CRINPTBD            NO, INVALID
         BP    CRRECLOK            YES, POSITIVE NUMBER IN RANGE
         CLI   LVARFM,C'U'         RECFM=U?
         BNE   CRINPTBD            NO, LRECL=0 NOT ALLOWED
CRRECLOK STH   R1,LVALRL           SAVE SPECIFIED RECORD LENGTH
         CLI   LVARFM,C'V'         VARIABLE-LENGTH RECORDS?
         BNE   CRBLKSZ             NO
         CH    R1,=H'4'            ROOM FOR RDW PLUS DATA?
         BNH   CRINPTBD            NO, INVALID
         SPACE
*         PROCESS LINE 12 INPUT - PHYSICAL BLOCK SIZE
         SPACE
CRBLKSZ  LA    R2,12-1             INDICATE SCREEN LINE
         LA    R1,5                SUPPLY LENGTH OF INPUT FIELD
         BAS   R14,CRGETIN@        GO POINT TO INPUT DATA
         LTR   R1,R1               ANY BLOCK SIZE SUPPLIED?
         BNP   CRINPTBD            NO, REPROMPT FOR SOME INPUT
         BAS   R14,CRGETIN#        GO GET INPUT NUMBER
         LTR   R1,R1               POSITIVE NUMBER SUPPLIED?
         BNP   CRINPTBD            NO, INVALID
         CH    R1,=H'32760'        TOO LARGE?
         BH    CRINPTBD            YES
         CH    R1,=H'8'            TOO SMALL?
         BL    CRINPTBD            YES
         STH   R1,LVABLK           SAVE SPECIFIED RECORD LENGTH
         CLI   LVARFM,C'U'         RECFM=U?
         BE    CRBLKU              YES
         CLI   LVARFM,C'V'         VARIABLE-LENGTH RECORDS?
         BE    CRBLKV              YES
         LH    R15,LVALRL          GET FIXED RECORD LENGTH
         SR    R0,R0               CLEAR FOR DIVIDE
         DR    R0,R15              GET BLOCKING FACTOR
         LTR   R0,R0               ANY REMAINDER?
         BNZ   CRINPTBD            YES, INVALID
         CLI   LVARFM+1,C'B'       BLOCKING ALLOWED?
         BE    CRBLKOK             YES
         CH    R1,=H'1'            LRECL=BLKSIZE?
         BNE   CRINPTBD            NO, INVALID
         B     CRBLKOK             YES
CRBLKV   LA    R0,4
         AH    R0,LVALRL           GET BDW + MAX RECORD SIZE
         CR    R0,R1               IS BLOCK SIZE BIG ENOUGH?
         BNH   CRBLKOK             YES
         TM    CRRECFM,DCBRECSB    SPANNED RECORDS?
         BNO   CRINPTBD            NO, INVALID
         B     CRBLKOK             YES
CRBLKU   CH    R1,LVALRL           BLKSIZE SMALLER THAN LRECL?
         BL    CRINPTBD            YES, INVALID
CRBLKOK  EQU   *
         SPACE
*         PROCESS LINE 14 INPUT - VOLUME SERIAL NUMBER
         SPACE
         LA    R2,14-1             INDICATE SCREEN LINE
         LA    R1,6                SUPPLY LENGTH OF INPUT FIELD
         BAS   R14,CRGETIN@        GO POINT TO INPUT DATA
         LTR   R1,R1               ANY VOLUME SPECIFIED?
         BNP   CRVOLOK             NO
         BCTR  R1,0                YES, DECREMENT FOR EXECUTE
         L     R6,=A(DSNCHARS)     POINT TO TRANSLATE TABLE
         EX    R1,CRTRTFLD         ANY OBVIOUS BAD CHARACTERS?
         BNZ   CRINPTBD            YES
CRVOLOK  MVC   LVAVOL,0(R2)        SAVE SPECIFIED VOLUME
         SPACE
*         PROCESS LINE 15 INPUT - UNIT NAME
         SPACE
         LA    R2,15-1             INDICATE SCREEN LINE
         LA    R1,8                SUPPLY LENGTH OF INPUT FIELD
         BAS   R14,CRGETIN@        GO POINT TO INPUT DATA
         LTR   R1,R1               ANY UNIT SPECIFIED?
         BNP   CRUNITOK            NO
         BCTR  R1,0                YES, DECREMENT FOR EXECUTE
         L     R6,=A(DSNCHARS)     POINT TO TRANSLATE TABLE
         EX    R1,CRTRTFLD         ANY OBVIOUS BAD CHARACTERS?
         BNZ   CRINPTBD            YES
CRUNITOK MVC   CRUNIT,0(R2)        SAVE SPECIFIED UNIT
         OC    LVAVOL,=CL8' '      CONVERT NULLS TO BLANKS
         OC    CRUNIT,=CL8' '      CONVERT NULLS TO BLANKS
         SPACE
*         PROCESS LINE 17 INPUT - SPACE UNIT
         SPACE
         LA    R2,17-1             INDICATE SCREEN LINE
         LA    R1,1                SUPPLY LENGTH OF INPUT FIELD
         BAS   R14,CRGETIN@        GO POINT TO INPUT DATA
         LA    R0,DA08TRKS
         CLI   0(R2),C'T'          TRACKS?
         BE    CRSPACOK
         LA    R0,DA08CYLS
         CLI   0(R2),C'C'          CYLINDERS?
         BE    CRSPACOK
         ICM   R0,3,LVABLK         IS BLOCK SIZE ZERO?
         BZ    CRINPTBD            YES, CANNOT USE IT AS SPACE UNIT
         LA    R0,DA08ABKL
         CLI   0(R2),C'B'          BLOCKS?
         BNE   CRINPTBD
CRSPACOK MVC   CRTYPE,0(R2)        SAVE SPECIFIED SPACE UNIT TYPE
         STC   R0,LVASCALO         SAVE FOR POSSIBLE REUSE
         SPACE
*         PROCESS LINE 18 INPUT - PRIMARY SPACE
         SPACE
         LA    R2,18-1             INDICATE SCREEN LINE
         LA    R1,5                SUPPLY LENGTH OF INPUT FIELD
         BAS   R14,CRGETIN@        GO POINT TO INPUT DATA
         LTR   R1,R1               ANY AMOUNT SUPPLIED?
         BNP   CRINPTBD            NO, REPROMPT FOR SOME INPUT
         BAS   R14,CRGETIN#        GO GET INPUT NUMBER
         LTR   R1,R1               ANY NUMBER SUPPLIED?
         BM    CRINPTBD            NO, INVALID
         ST    R1,CRPRIM#          YES, SAVE IT
         CLI   CRTYPE,C'C'         USING CYLINDERS?
         BNE   CRPRIMOK            NO
         IC    R0,LVATPC           YES, GET TRACKS PER CYLINDER
         MR    R0,R0               CONVERT CYLINDERS TO TRACKS
CRPRIMOK ST    R1,LVAALOC          YES, SAVE IT
         SPACE
*         PROCESS LINE 19 INPUT - SECONDARY SPACE
         SPACE
         LA    R2,19-1             INDICATE SCREEN LINE
         LA    R1,5                SUPPLY LENGTH OF INPUT FIELD
         BAS   R14,CRGETIN@        GO POINT TO INPUT DATA
         LTR   R1,R1               ANY AMOUNT SUPPLIED?
         BNP   CRINPTBD            NO, REPROMPT FOR SOME INPUT
         BAS   R14,CRGETIN#        GO GET INPUT NUMBER
         LTR   R1,R1               ANY NUMBER SUPPLIED?
         BM    CRINPTBD            NO, INVALID
         STCM  R1,7,LVASCALO+1     YES, SAVE IT
         SPACE
*         PROCESS LINE 20 INPUT - DIRECTORY BLOCKS
         SPACE
         TM    LVAFLG,$NEWNM       IS DATA SET NAME SUPPLIED?
         BNO   CREGTDIR            NO, GET DIRECTORY SIZE FROM INPUT
         SR    R1,R1               ASSUME SEQUENTIAL
         CLI   LVAORG+1,C'O'       DSORG=PO?
         BNE   CREDIROK            NO
         LA    R1,20               YES, REQUEST 20 DIRECTORY BLOCKS
         B     CREDIROK
CREGTDIR LA    R2,20-1             INDICATE SCREEN LINE
         LA    R1,5                SUPPLY LENGTH OF INPUT FIELD
         BAS   R14,CRGETIN@        GO POINT TO INPUT DATA
         LTR   R1,R1               ANY AMOUNT SUPPLIED?
         BNP   CRINPTBD            NO, REPROMPT FOR SOME INPUT
         BAS   R14,CRGETIN#        GO GET INPUT NUMBER
         LTR   R1,R1               ANY NUMBER SUPPLIED?
         BM    CRINPTBD            NO, INVALID
CREDIROK ST    R1,CRDIR#           YES, SAVE IT
         SPACE
*         VERIFY SECURITY ACCESS
         SPACE
         TM    OSBITS,X'13'        SOME FLAVOUR OF MVS?
         BNO   CREATTRS            NO, FORGET RACROUTE
         L     R14,CVTPTR(,0)      POINT TO THE CVT
         USING CVT,R14
         ICM   R14,15,CVTRAC       POINT TO THE ACCESS CONTROL CVT
         BZ    CREATTRS            NO SECURITY SO FORGET RACROUTE
         DROP  R14                 CVT
         L     R1,SCREENWK
         MVC   0(CRRL,R1),CRR      COPY MACRO LIST FORM
         AIF   (&ENV390).RRT6
         RACHECK ENTITY=(CREADSN), SPECIFY DATA SET NAME               +
               VOLSER=LVAVOL,      SPECIFY VOLUME                      +
               ATTR=ALTER,         SPECIFY REQUESTED ACCESS LEVEL      +
               DSTYPE=N,           CHECK IS FOR A NON-VSAM DATA SET    +
               MF=(E,(1))
         LA    R0,4                GET MAXIMUM "GOOD" RETURN CODE
         CLR   R15,R0              ACCESS ALLOWED?
         BNH   CREATTRS            YES, PROCEED
         AGO   .RRT7               OLD ESM MAY NOT HANDLE RACROUTE
.RRT6    ANOP
         RACROUTE REQUEST=AUTH,    PERFORM A SAF RACHECK               +
               ENTITY=(CREADSN),   SPECIFY DATA SET NAME               +
               VOLSER=LVAVOL,      SPECIFY VOLUME                      +
               DSTYPE=N,           CHECK IS FOR A NON-VSAM DATA SET    +
               STATUS=ACCESS,      REQUEST ACCESS LEVEL FEEDBACK       +
               WORKA=256(R1),      SPECIFY 512-BYTE WORK AREA          +
               RELEASE=1.9,        SPECIFY RELEASE FOR ACCESS=STATUS   +
               MF=(E,(1))
         CHI   R15,4               UNPROTECTED RESOURCE?
         BE    CREATTRS            YES, PROCEED
         LTR   R15,R15             SAF CALL OF RACF SUCCEEDED?
         BNZ   LVBADSAF            NO, GO HANDLE IT
         L     R1,SCREENWK         YES, POINT TO FEEDBACK
         LM    R15,R0,0(R1)        LOAD RACF RETURN AND REASON CODES
         CHI   R15,20              HAVE RACF ACCESS LEVEL?
         BNE   LVBADSAF            NO, GO HANDLE IT
         CHI   R0,16               HAVE ALTER ACCESS?
         BE    CREATTRS            YES, PROCEED
LVBADSAF DC    0H
.RRT7    ANOP
         SPACE
*         HANDLE SECURITY ACCESS DENIAL
         SPACE
         LA    R1,3
         MH    R1,SCRNCOLS+2
         A     R1,SCREENBF         POINT TO LEVEL 1 MESSAGE SHOW AREA
         L     R4,=A(REVMSGS)      POINT TO ERROR MESSAGE ROUTINE
         USING REVMSGS,R4
         MVC   0(MS019L-2,R1),MS019+2 LOAD ERROR MESSAGE
         DROP  R4                  REVMSGS
         LA    R1,8-1              GET RELATIVE SCREEN LINE
         MH    R1,SCRNCOLS+2       GET SCREEN OFFSET OF LINE
         LA    R1,32(,R1)          GET SCREEN OFFSET OF INPUT DATA
         L     R15,=A(CALCPOSI)    GET CONVERSION ROUTINE ENTRY POINT
         BASR  R14,R15             CONVERT FOR 3270 DATA STREAM
         STH   R1,CRCSRADR         SAVE 3270 LOCATION CODE
         TM    LVAFLG,$NEWNM       SUPPLIED DATA SET NAME?
         BNO   CRINPTBD            NO, SHOW MESSAGE IN REPROMPT
         MVI   MSG,19              ACCESS DENIED
         B     CREATXIT            TERMINATE REQUEST
         SPACE
*         CREATE DCB ATTRIBUTE LIST
         SPACE
         USING DAIRACB,CRDFBUFS
CREATTRS XC    CRDFBUFS(256),CRDFBUFS
         MVC   DAIRECFM,CRRECFM    SET RECORD FORMAT
         MVC   DAILRECL,LVALRL     SET RECORD LENGTH
         MVC   DAIBLKSI,LVABLK     SET BLOCK SIZE
         SPACE
         BAS   R4,CRDELATR         DELETE ANY UNNEEDED ATTRIBUTES
         USING DAPB34,MYDAPB
         XC    MYDAPB,MYDAPB
         MVI   DA34CD+1,X'34'
         MVI   DA34CTRL,DA34CHN    ADD NEW ATTRIBUTE LIST
         MVC   DA34NAME,CREATRNM   SET ATTRIBUTES NAME
         LA    R0,DAIRACB
         ST    R0,DA34ADDR         SET ATTRIBUTES ADDRESS
         XC    MYECB,MYECB
         XASAM24
         LA    R1,MYDAPL
         L     R15,CVTPTR(,0)      CVT
         L     R15,CVTDAIR-CVT(,R15)
         BASR  R14,R15             CALL IKJDAIR
         XASAM31
         LTR   R15,R15
         BNZ   CREATEBD            ATTRIBUTES CREATION FAILED
         SPACE
*         PERFORM ALLOCATION OF NEW DATA SET
         SPACE
         MVC   CRCSRADR,CRDSNADR   MOVE CURSOR BACK TO DSNAME FIELD
         XC    MYDAPB,MYDAPB
         MVI   DA08CD+1,X'08'
         LA    R0,CREADSNL
         ST    R0,DA08PDSN
         MVC   DA08DDN,=CL8' '
         MVC   DA08UNIT,CRUNIT
         MVC   DA08SER,=CL8' '
         MVC   DA08SER(6),LVAVOL
         CLI   DA08SER,C' '        BLANK VOLUME?
         BE    CREDEVOK            YES, DO NOT NEED A UNIT
         CLI   DA08UNIT,C' '       BLANK UNIT?
         BNE   CREDEVOK            NO, DO NOT OVERLAY USER INPUT
         MVC   DA08UNIT,=CL8'SYSALLDA'
CREDEVOK MVC   DA08MNM,=CL8' '
         MVC   DA08PSWD,=CL8' '
         MVI   DA08DSP1,DA08NEW
         MVI   DA08DPS2,DA08CAT    CATALOG IT AT CREATION TIME
         MVI   DA08DPS3,DA08CATL
         MVC   DA08PQTY,CRPRIM#
         MVC   DA08SQTY+1(3),LVASCALO+1
         MVC   DA08DQTY,CRDIR#
         MVC   DA08CTL,LVASCALO    SET ALLOCATON SPACE UNIT
         MVC   DA08BLK+2(2),LVABLK SET BLOCK SIZE INDICATOR
         MVC   DA08ALN,CREATRNM    SET DCB ATTRIBUTES TO USE
         OI    DA08CTL,DA08ATRL    FLAG ATTRIBUTE LIST SUPPLIED
         XC    MYECB,MYECB
         XASAM24
         LA    R1,MYDAPL
         L     R15,CVTPTR(,0)      CVT
         L     R15,CVTDAIR-CVT(,R15)
         BASR  R14,R15             CALL IKJDAIR
         XASAM31
         MVC   CREDDNAM,DA08DDN    COPY GENERATED DD NAME
         LTR   R15,R15
         BZ    CREATEDN            FILE SUCCESSFULLY ALLOCATED
         SPACE
*         HANDLE DYNAMIC ALLOCATION FAILURE
         SPACE
CREATEBD LA    R1,MYDFPARM
         USING DFDSECTD,R1         MAPPED BY IKJEFFDF DFDSECT=YES MACRO
         ST    R15,MYDFRC          IKJDAIR RETURN CODE
         LA    R15,MYDFRC
         ST    R15,DFRCP
         LA    R15,MYDAPL
         ST    R15,DFDAPLP
*        SR    R15,R15             INITIALLY ZERO - BUT LEAVE EP THERE
*        ST    R15,MYJEFF02               IF THE SYSTEM ALREADY SET IT
         LA    R15,MYJEFF02
         ST    R15,DFJEFF02
         MVI   MYDFID,DFBUFSW
         MVI   MYDFID+1,DFDAIR
         LA    R15,MYDFID
         ST    R15,DFIDP
         MVC   DFCPPLP,CPPLPTR
         LA    R15,CRDFBUFS
         ST    R15,DFBUFP
         DROP  R1                  DFDSECTD
         LINK  EP=IKJEFF18,SF=(E,LINKAREA)
         L     R2,SCREENBF         POINT TO PRIMARY SCREEN BUFFER
         LA    R4,CRDFBUFS         POINT TO EXTRACTED MESSAGES
         USING DFDSECT2,R4
         LA    R0,5
         LH    R14,DFBUFL1         GET LENGTH OF LEVEL 1 MESSAGE AREA
         SR    R14,R0              GET LENGTH CODE OF MESSAGE TEXT
         BM    CRINPTBD            NO MESSAGE TO LOAD
         LA    R1,3
         MH    R1,SCRNCOLS+2
         A     R1,SCREENBF         POINT TO LEVEL 1 MESSAGE SHOW AREA
         LA    R2,DFBUFT1          POINT TO LEVEL 1 MESSAGE TEXT
         EX    R14,CRSETDSN        LOAD LEVEL 1 MESSAGE
         LH    R14,DFBUFL2         GET LENGTH OF LEVEL 2 MESSAGE AREA
         SR    R14,R0              GET LENGTH CODE OF MESSAGE TEXT
         BM    CRINPTBD            NO MESSAGE TO LOAD
         L     R0,SCRNCOLS
         AR    R0,R0               GET MAXIMUM SUPPORTED LENGTH
         CR    R14,R0              MESSAGE TOO LONG TO FIT?
         BL    CRM2LNOK            NO
         LR    R14,R0              YES
         BCTR  R14,0               TRUNCATE AT MAXIMUM LENGTH
CRM2LNOK AR    R1,R0               POINT TO LEVEL 2 MESSAGE SHOW AREA
         LA    R2,DFBUFT2          POINT TO LEVEL 2 MESSAGE TEXT
         EX    R14,CRSETDSN        LOAD LEVEL 2 MESSAGE
         DROP  R4                  DFDSECT2
         SPACE
*         SET UP ERROR CONDITION PRIOR TO SCREEN RESHOW
         SPACE
CRINPTBD L     R4,=A(LOADFIXM)     POINT TO ERROR MESSAGE
         L     R2,SCRNCOLS         GET SCREEN WIDTH
         LR    R1,R2               COPY IT
         AR    R2,R2               DOUBLE IT
         SRA   R1,1                HALVE IT
         LA    R0,(LOADFIXL/2)+1   GET LENGTH NEEDED BACK FROM HALFWAY
         SR    R1,R0               GET OFFSET INTO THIRD LINE
         AR    R1,R2               GET OFFSET INTO SCREEN
         A     R1,SCREENBF         POINT TO SCREEN LOCATION
         MVC   1(LOADFIXL,R1),0(R4)
         A     R1,SCREENSZ         POINT TO SHADOW LOCATION
         MVI   0(R1),X'22'         REVERSE RED FOR ERROR MESSAGE
         MVC   1(LOADFIXL+1,R1),0(R1)
         OI    STATUS7,$7BELL      REQUEST AUDIBLE ALARM
         B     CREAREDO            ISSUE NEW PROMPT
         SPACE
*         GET THE ACTUAL VOLUME USED FOR THE NEW DATA SET
         SPACE
CREATEDN MVC   $DSNAME(46),CREADSNL COPY DATA SET NAME
         LA    R1,CREDDNAM         POINT TO THE DDNAME
         L     R15,=A(REVDDLOC)    POINT TO TIOT ENTRY LOCATE ROUTINE
         BASR  R14,R15             LOCATE THE TIOT ENTRY
         LTR   R15,R15             FOUND IT, RIGHT?
         BZ    CREVOLOK            NO, VERY STRANGE...
         ICM   R15,7,17(R15)       TIOEFSRT
         LTR   R15,R15             ANY UCB?
         BZ    CREVOLOK            NO, SOMETHING'S UP...
         MVC   LVADEV,16(R15)      UCBTYP
         MVC   LVAVOL,28(R15)      UCBVOLI
         SPACE
*         OPEN AND CLOSE DATA SET TO SET DCB ATTRIBUTES
         SPACE
CREVOLOK ICM   R0,15,CRDIR#        CREATING A SEQUENTIAL DATA SET?
         BNZ   CRFRENEW            NO, GO FREE NEW DATA SET
         MVC   CREDCB,CRSEQDCB     LOAD DCB TEMPLATE
         USING IHADCB,CREDCB
         MVC   DCBDDNAM,CREDDNAM   SET DDNAME
*        MVC   DCBRECFM,CRRECFM    SET RECFM
*        MVC   DCBLRECL,LVALRL     SET LRECL
*        MVC   DCBBLKSI,LVABLK     SET BLKSIZE
         MVI   OPEND,X'80'
         OPEN  (CREDCB,OUTPUT),MF=(E,OPEND)
         MVI   CLOSED,X'80'
         CLOSE CREDCB,MF=(E,CLOSED)
         SPACE
*         DEALLOCATE THE NEWLY CREATED DATA SET
         SPACE
CRFRENEW XC    MYDAPB,MYDAPB       ISSUE DEALLOCATION REQUEST
         MVI   DA18CD+1,X'18'
         MVC   DA18DDN,CREDDNAM    SET DDNAME TO FREE
         MVC   DA18MNM,=CL8' '     MEMBER NAME
         MVC   DA18SCLS,=CL8' '    SYSOUT CLASS IS 2-BYTE FIELD
         XC    MYECB,MYECB
         XASAM24
         LA    R1,MYDAPL
         L     R15,CVTPTR(,0)      CVT
         L     R15,CVTDAIR-CVT(,R15)
         BASR  R14,R15             CALL IKJDAIR TO FREE FILE
         XASAM31
         SPACE
*         PASS BACK ATTRIBUTES USED FOR POSSIBLE REUSE
         SPACE
         ICM   R3,15,CREPARM@      POINT TO CALLER'S DATA AREA
         BZ    CREPASDN            NONE WAS SUPPLIED
         MVC   0(LVASIZ,R3),CREDSATR
CREPASDN MVC   CREALCSZ,LVAALOC    SAVE ATTRIBUTES IN @DATA
         MVC   CRE2NDRY,LVASCALO
         MVC   CREDIR,CRDIR#
         MVC   CRELRECL,LVALRL
         MVC   CREBLKSI,LVABLK
         MVC   CRETPC,LVATPC
         MVC   CREVOL,LVAVOL
         MVC   CRERECFM,LVARFM
         MVI   MSG,172             DATA SET CREATED
         B     CREATXIT            DO NOT OVERLAY SUCCESS MESSAGE
         SPACE
*         TERMINATE
         SPACE
CREATCAN MVI   MSG,29              REQUEST CANCELLED
CREATXIT BAS   R4,CRDELATR         DELETE ANY UNNEEDED ATTRIBUTES
         NI    STATUS10,255-$10ASP PROMPTING PANEL NO LONGER ACTIVE
         LR    R1,R13              POINT TO DYNAMIC AREA TO BE FREED
         L     R13,4(,R13)         POINT TO PREVIOUS SAVE AREA
         LA    R0,@CREATLN
         FREEMAIN R,LV=(0),A=(1)   FREE @CREATWK
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         LH    R15,RC              SET RETURN CODE
         BR    R14                 RETURN TO CALLER
         SPACE
************************************************************
*                                                          *
*         FREE ATTRIBUTES IF ALLOCATED                     *
*                                                          *
************************************************************
         SPACE
*          INPUT:   R4 = RETURN ADDRESS
         SPACE
CRDELATR XC    MYDAPB,MYDAPB
         MVI   DA34CD+1,X'34'
         MVI   DA34CTRL,DA34SRCH   SEARCH FOR ATTRIBUTES
         MVC   DA34NAME,CREATRNM   SET ATTRIBUTES NAME
         XC    MYECB,MYECB
         XASAM24
         LA    R1,MYDAPL
         L     R15,CVTPTR(,0)      CVT
         L     R15,CVTDAIR-CVT(,R15)
         BASR  R14,R15             CALL IKJDAIR
         XASAM31
         TM    DA34FLG,DA34FIND    ATTRIBUTES EXIST?
         BNOR  R4                  NO, RETURN TO CALLER
         SPACE
         XC    MYDAPB,MYDAPB
         MVI   DA34CD+1,X'34'
         MVI   DA34CTRL,DA34UNCH   REMOVE ATTRIBUTE LIST
         MVC   DA34NAME,CREATRNM   SET ATTRIBUTES NAME
         XC    MYECB,MYECB
         XASAM24
         LA    R1,MYDAPL
         L     R15,CVTPTR(,0)      CVT
         L     R15,CVTDAIR-CVT(,R15)
         BASR  R14,R15             CALL IKJDAIR
         XASAM31
         BR    R4                  RETURN TO CALLER
         SPACE
         DROP  R9                  @DATA, DAPB MAPPINGS
         USING @DATA,R9
         SPACE
************************************************************
*                                                          *
*         PREPARE INPUT FIELD DATA FOR PROCESSING          *
*                                                          *
************************************************************
         SPACE
*          INPUTS:  R1 = INPUT FIELD LENGTH
*                   R2 = RELATIVE SCREEN LINE NUMBER
*                  R13 = REGISTER SAVE AREA ADDRESS
*                  R14 = RETURN ADDRESS
*
*          OUTPUTS: R1 = LENGTH OF NON-BLANK INPUT DATA
*                   R2 = ADDRESS OF INPUT FIELD
*                        WITH DATA LEFT JUSTIFIED
*                        AND TRAILING BLANKS NULLED
*             CRCSRADR = 3270 BUFFER ADDRESS OF INPUT FIELD
         SPACE
         SPACE
*         ACQUIRE LINE'S INPUT DATA STORAGE AND BUFFER ADDRESSES
         SPACE
         USING SAVER,@CREATWK
CRGETIN@ STM   R14,R12,12(R13)     SAVE REGISTERS
         MH    R2,SCRNCOLS+2       GET SCREEN OFFSET OF LINE
         LA    R2,32(,R2)          GET SCREEN OFFSET OF INPUT DATA
         LR    R1,R2               COPY IT
         L     R15,=A(CALCPOSI)    GET CONVERSION ROUTINE ENTRY POINT
         BASR  R14,R15             CONVERT FOR 3270 DATA STREAM
         STH   R1,CRCSRADR         SAVE 3270 LOCATION CODE
         A     R2,SCREENBF         POINT TO INPUT DATA
         ST    R2,SAVGRS2          SAVE FOR CALLER
         SPACE
*         LEFT JUSTIFY INPUT DATA AND MAKE TRAILING NULLS FOR RESHOW
         SPACE
         L     R1,SAVGRS1          GET FIELD LENGTH
         LR    R14,R1              COPY IT
         BCTR  R1,0                DECREMENT FOR EXECUTE
         LR    R15,R1              COPY THIS LENGTH CODE
         L     R6,=A(KAPS)         POINT TO TRANSLATE TABLE
         EX    R1,CRTRNSLT         UPPER CASE ALL INPUT TEXT
         AR    R15,R2              POINT TO LAST INPUT BYTE
         BCTR  R1,0                DECREMENT FOR EXECUTE
CRLEFTLP CLI   0(R2),C' '          LEADING BLANK?
         BNE   CRLEFTOK            NO, DATA IS LEFT JUSTIFIED
         LTR   R1,R1               MULTI-BYTE FIELD?
         BM    *+8                 NO, SKIP FIELD SHUFFLE
         EX    R1,CRLEFTIT         YES, DISCARD LEADING BLANK
         MVI   0(R15),C' '         SUPPLY TRAILING BLANK
         BCT   R14,CRLEFTLP        CONTINUE LEADING BLANK CHECK
CRLEFTOK CLI   0(R15),C' '         TRAILING BLANK?
         BNE   CRNULLOK            NO
         MVI   0(R15),NULL         YES, CONVERT TO NULL FOR REPROMPT
         BCT   R15,CRLEFTOK        BACK UP AND CHECK AGAIN
CRNULLOK LA    R15,1(,R15)         POINT PAST NON-BLANK DATA
         SR    R15,R2              GET NON-BLANK DATA LENGTH
         ST    R15,SAVGRS1         SAVE FOR CALLER
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER
         SPACE
************************************************************
*                                                          *
*         EXTRACT NUMBER SPECIFIED IN INPUT FIELD          *
*                                                          *
************************************************************
         SPACE
*          INPUTS:  R1 = NON-BLANK INPUT DATA LENGTH
*                   R2 = ADDRESS OF INPUT DATA
*                  R13 = REGISTER SAVE AREA ADDRESS
*                  R14 = RETURN ADDRESS
*
*          OUTPUT:  R1 = INPUT NUMBER - NEGATIVE IF NON-NUMERIC
         SPACE
CRGETIN# STM   R14,R12,12(R13)     SAVE REGISTERS
         L     R6,=A(TABNUMER)     POINT TO TRANSLATE TABLE
         LR    R14,R1              COPY DATA LENGTH
         BCTR  R14,0               DECREMENT FOR EXECUTE
         SR    R0,R0
         BCTR  R0,0                PREPARE FOR NON-NUMERIC
         EX    R14,CRTRTFLD        IS DATA ALL NUMERIC?
         BNZ   CRGOTIN#            NO, GO RETURN TO CALLER
         EX    R14,CRPAKNUM        YES
         CVB   R0,DOUBLE
CRGOTIN# ST    R0,SAVGRS1          SAVE FOR CALLER
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER
         SPACE
         DROP  R13                 @CREATWK, SAVER, IHADCB
         SPACE
CRSETDSN MVC   0(0,R1),0(R2)       <<< EXECUTED >>>
CRTRTFLD TRT   0(0,R2),0(R6)       <<< EXECUTED >>>
CRPAKNUM PACK  DOUBLE,0(0,R2)      <<< EXECUTED >>>
CRTRNSLT TR    0(0,R2),0(R6)       <<< EXECUTED >>>
CRLEFTIT MVC   0(0,R2),1(R2)       <<< EXECUTED >>>
         SPACE
         DROP  R11                 REVCREAT
         SPACE
         TITLE '  R E V C R E A T   -   S T A T I C   A R E A  '
         AIF   (&ENV390).RRT8
CRR      RACHECK CLASS='DATASET',MF=L
         AGO   .RRT9               OLD ESM MAY NOT HANDLE RACROUTE
.RRT8    ANOP
CRR      RACROUTE REQUEST=AUTH,CLASS='DATASET',RELEASE=1.9,MF=L
.RRT9    ANOP
CRRL     EQU   *-CRR
         SPACE
CRLN01P1 DC    AL1(FLDOUTHI),C'RFE'
CRLN01P2 DC    C'ALLOCATE NEW DATA SET'
CRLN01P3 DC    CL5'R&REL'
CRPNTR   DC    AL1(FLDOUTHI),C'==>',AL1(FLDINHI)
CRLN08   DC    C'NAME OF NEW DATA SET'
CRLN10   DC    C'RECORD FORMAT'
CRLN11   DC    C'LOGICAL RECORD LENGTH'
CRLN12   DC    C'PHYSICAL BLOCK SIZE'
CRLN14   DC    C'VOLUME'
CRLN15   DC    C'UNIT'
CRLN17   DC    C'ALLOCATION SPACE UNIT'
CRLN18   DC    C'PRIMARY SPACE QUANTITY'
CRLN19   DC    C'SECONDARY SPACE QUANTITY'
CRLN20   DC    C'NUMBER OF DIRECTORY BLOCKS'
         SPACE
CRLN17P2 DC    C'(',AL1(FLDOUTHI),C'T',AL1(FLDOUTLO)
         DC    C'OR',AL1(FLDOUTHI),C'C',AL1(FLDOUTLO)
         DC    C'OR',AL1(FLDOUTHI),C'B',AL1(FLDOUTLO),C')'
LN17P2LN EQU   *-CRLN17P2
         DC    0D'0'
         LTORG
         SPACE
         PRINT NOGEN
CRSEQDCB DCB   DSORG=PS,DDNAME=-CREATE-,MACRF=W
         PRINT GEN
         SPACE
         DC    0D'0'
CRHEX    DC    CL16'0123456789ABCDEF'
         DC    0D'0'               END OF CSECT
         TITLE '  R E V C R E A T   -   D Y N A M I C   A R E A  '
@CREATWK DSECT
         DS    18F
CRINPLST DS    2F                  REVINDSN PARAMETER LIST
CREATRNM DS    CL8                 ALLOCATED ATTRIBUTES NAME
CREDDNAM DS    CL8                 ALLOCATED DDNAME
CRUNIT   DS    CL8
CREDSATR DS    XL(LVASIZ)          COPY OF INTERNAL ENTRY
CREDCB   DS    XL(SEQDCBL)         DCB AREA
CREPARM@ DS    A                   PARAMETER ADDRESS
CRPRIM#  DS    F
CRDIR#   DS    F
CRCSRADR DS    H                   CURSOR LOCATION ADDRESS
CREADSNL DS    H                   NEW DSNAME LENGTH
CREADSN  DS    CL44                NEW DSNAME
CRDSNADR DS    H                   CURSOR LOCATION ADDRESS
CRFLGS   DS    X                   LOCAL FLAGS
$CRATR   EQU   X'80'               ATTRIBUTES ALLOCATED
CRTYPE   DS    C                   SPACE UNIT TYPE
CRRECFM  DS    X                   NEW RECORD FORMAT
CRDFBUFS DS    64D                 512 BYTES FOR DAIRFAIL DFBUFS
         DS    0D                  END OF DSECT
@CREATLN EQU   *-@CREATWK
         TITLE '  R E V M E R G E  '
**********************************************************************
*                                                          *         *
*         FIXED-LENGTH RECORD ARRAY MERGE SORT ROUTINE     *  R43.0  *
*                                                          * NOV2009 *
**********************************************************************
         SPACE
**********************************************************************
*                                                                    *
*         A MERGE SORT IS ACHIEVED BY MERGING TWO SORTED             *
*         HALF ARRAYS TO FORM A SORTED ARRAY.  THE NUMBER            *
*         OF RECORDS IN AN ARRAY IS DOUBLED EVERY CYCLE              *
*         UNTIL ALL DATA FITS INTO ONE HALF ARRAY                    *
*         WHEREUPON ALL RECORDS MUST BE IN SORT ORDER.               *
*         THE INITIAL HALF ARRAY RECORD COUNT IS ONE (AND            *
*         SO IS SORTED).                                             *
*                                                                    *
*         SPACE FOR TWO COPIES OF THE DATA IS USED.  BOTH            *
*         ARE SUPPLIED BY THE CALLER WITH THE FIRST                  *
*         CONTAINING THE INITIAL DATA.                               *
*                                                                    *
*         NO STORAGE IS DYNAMICALLY ACQUIRED OR FREED BY             *
*         REVMERGE.                                                  *
*                                                                    *
**********************************************************************
         EJECT
**********************************************************************
*                                                                    *
* ON ENTRY:    R9 -> @DATA                                           *
*              R13-> SAVE AREA                                       *
*              R14-> RETURN ADDRESS                                  *
*              R15-> REVMERGE                                        *
*                                                                    *
*         $13DESC STATUS FLAG                                        *
*                0 - SORT INTO ASCENDING ORDER                       *
*                1 - SORT INTO DESCENDING ORDER                      *
*                                                                    *
*         CALLPARM CONTAINS:   (OFFSETS SHOWN IN DECIMAL)            *
*               +0 - SOURCE LIST START                               *
*               +4 - SOURCE LIST END                                 *
*               +8 - TARGET LIST START                               *
*              +12 - TARGET LIST END                                 *
*                                                                    *
*         CALLSAVE CONTAINS:                                         *
#MG_RLEN EQU   CALLSAVE+16,4       SORT RECORD LENGTH                *
#MG_KOFF EQU   CALLSAVE+20,4       SORT KEY OFFSET WITHIN RECORD     *
#MG_KLEN EQU   CALLSAVE+24,4       SORT KEY LENGTH                   *
*                                                                    *
*                                                                    *
* DURING PROCESSING:                                                 *
*                                                                    *
*         R11 IS THE LOCAL BASE                                      *
*         R14 CONTAINS RECORD LENGTH CODE                            *
*         R15 CONTAINS SORT KEY LENGTH CODE                          *
*         KOUNT CONTAINS CURRENT ARRAY RECORD COUNT                  *
*                                                                    *
*         CALLSAVE CONTAINS:                                         *
#MG_ORIG EQU   CALLSAVE+28,8       ORIGINAL AREA START AND END       *
*                                                                    *
*                                                                    *
* ON EXIT:                                                           *
*         SORTED DATA IS IN ORIGINAL INPUT AREA.                     *
*         ALL GENERAL PURPOSE REGISTERS EXCEPT R15 ARE RESTORED.     *
*                                                                    *
* RETURN CODE: R15 = 0 - PROCESSING COMPLETE                         *
*                                                                    *
*                                                                    *
**********************************************************************
         EJECT
REVMERGE RSECT
REVMERGE AMODE ANY
         B     @MERGE-*(,R15)
         DC    AL1(8),CL9'REVMERGE'
@MERGE   STM   R14,R12,12(R13)
         LR    R11,R15
         USING REVMERGE,R11
         MVC   #MG_ORIG,CALLPARM   SAVE ORIGINAL DATA START END END
         L     R14,#MG_RLEN        GET RECORD LENGTH
         L     R15,#MG_KLEN        GET SORT KEY LENGTH
         BCTR  R14,0               GET RECORD LENGTH CODE
         BCTR  R15,0               GET SORT KEY LENGTH CODE
         LA    R0,1                GET INITIAL HALF ARRAY ENTRY COUNT
         B     *+8                 SKIP OVER SUBSEQUENT CYCLE CODE
MERGCYCL L     R0,KOUNT            GET OLD ARRAY ENTRY COUNT
         AR    R0,R0               DOUBLE IT
         ST    R0,KOUNT            SAVE FOR USE THROUGHOUT CYCLE
         LM    R4,R7,CALLPARM      GET OLD ARRAY BOUNDARIES
         STM   R4,R5,CALLPARM+8    SET NEW "SOURCE" BOUNDARIES
         STM   R6,R7,CALLPARM      SET NEW "TARGET" BOUNDARIES
         SPACE
*         START PROCESSING AN ARRAY - MERGING TWO SORTED HALF ARRAYS
MERGNEXT C     R4,CALLPARM+12      GONE BEYOND END OF DATA?
         BNL   MERGCYCL            YES, TIME FOR A BIGGER ARRAY
         L     R1,KOUNT            GET ARRAY ENTRY COUNT
         LR    R2,R4               POINT TO ARRAY START
         SRA   R1,1                GET HALF ARRAY ENTRY COUNT
         M     R0,#MG_RLEN         GET HALF ARRAY STORAGE SIZE
         AR    R2,R1               POINT PAST FIRST HALF ARRAY
         C     R2,CALLPARM+12      REACHED THE END OF THE DATA?
         BNL   MERGORDE            YES, ARRAY IN ORDER
         ST    R2,DOUBLE           SAVE ADDRESS
         AR    R2,R1               POINT PAST SECOND HALF ARRAY
         C     R2,CALLPARM+12      GONE PAST THE END OF THE DATA?
         BNH   *+8                 NO, SECOND HALF ARRAY IS FULL SIZE
         L     R2,CALLPARM+12      YES, SHORT SECOND HALF ARRAY
         ST    R2,DOUBLE+4         SAVE ADDRESS
*         DOUBLE CONTAINS:
*               +0 ADDRESS PAST END OF FIRST HALF ARRAY
*                    (WHICH IS THE START OF THE SECOND HALF ARRAY)
*               +4 ADDRESS PAST END OF SECOND HALF ARRAY
*                    (WHICH IS THE START OF THE NEXT ARRAY
*                     UNLESS THIS IS THE LAST ARRAY)
         SPACE
*         COMPARE ENTRIES ACROSS HALF ARRAY BOUNDARY
*         TO DETERMINE IF WHOLE ARRAY IS ALREADY SORTED
*         - THIS IS WHERE SAVINGS FOR THE BEST CASE OCCUR
         L     R2,DOUBLE           POINT TO SECOND HALF ARRAY
         LR    R1,R2               POINT TO SECOND HALF ARRAY
         S     R1,#MG_RLEN         BACK UP TO LAST ENTRY IN FIRST HALF
         A     R1,#MG_KOFF         POINT TO SORT KEY
         LR    R3,R2               COPY RECORD ADDRESS
         A     R3,#MG_KOFF         POINT TO SORT KEY
         EX    R15,MERGEC13        RECORDS IN ORDER?
         BNH   MERGORDR            YES, NO SORTING REQUIRED
         SPACE
MERG_LP1 C     R2,DOUBLE+4         END OF SECOND HALF ARRAY?
         BNL   MERGFLS1            YES, FLUSH THE FIRST HALF THROUGH
MERG_LP2 C     R4,DOUBLE           END OF FIRST HALF ARRAY?
         BNL   MERGFLS2            YES, FLUSH SECOND HALF THROUGH
         LR    R1,R4               COPY 1ST HALF ARRAY RECORD ADDRESS
         LR    R3,R2               COPY 2ND HALF ARRAY RECORD ADDRESS
         A     R1,#MG_KOFF         POINT TO SORT KEY
         A     R3,#MG_KOFF         POINT TO SORT KEY
         EX    R15,MERGEC13        WHICH ENTRY SHOULD BE COPIED FIRST?
         BL    MERG_1ST            THE FIRST
         BH    MERG_2ND            THE SECOND
         CLC   0(4,R4),0(R2)       CHECK LVASEQ AT OFFSET ZERO
         BH    MERG_2ND            PRESERVE ORDER ON KEY MATCH
MERG_1ST EX    R14,MERGL1ST        LOAD FIRST HALF ENTRY
         LA    R4,1(R14,R4)        POINT PAST ENTRY JUST COPIED
         LA    R6,1(R14,R6)        POINT PAST ENTRY JUST LOADED
         B     MERG_LP2            R2 UNCHANGED SO DON'T RECHECK IT
MERG_2ND EX    R14,MERGL2ND        LOAD FIRST HALF ENTRY
         LA    R2,1(R14,R2)        POINT PAST ENTRY JUST COPIED
         LA    R6,1(R14,R6)        POINT PAST ENTRY JUST LOADED
         B     MERG_LP1            CONTINUE HALF ARRAY MERGE
         SPACE
*         COMPARE SORT KEYS
MERGEC13 CLC   0(0,R1),0(R3)       <<< EXECUTED >>>
         SPACE
*         LOAD FIRST HALF ARRAY ENTRY TO TARGET
MERGL1ST MVC   0(0,R6),0(R4)       <<< EXECUTED >>>
         SPACE
*         LOAD SECOND HALF ARRAY ENTRY TO TARGET
MERGL2ND MVC   0(0,R6),0(R2)       <<< EXECUTED >>>
         SPACE
*         SWAP DATA OF TWO RECORDS
MERGEX45 XC    0(0,R4),0(R5)       <<< EXECUTED >>>
MERGEX54 XC    0(0,R5),0(R4)       <<< EXECUTED >>>
         SPACE
*         FLUSH WHOLE ARRAY THROUGH TO TARGET
*         - BRANCH HERE WHEN WHOLE ARRAY IS IN FIRST HALF ARRAY
*           WHICH ONLY HAPPENS FOR THE LAST ARRAY
*         - A SPECIAL CASE OF THIS IS WHEN THE LAST ARRAY
*           IS THE ONLY ARRAY WHEREUPON THE SORT IS COMPLETE
MERGORDE L     R2,CALLPARM+12      POINT PAST END OF DATA
         ST    R2,DOUBLE+4         SAVE END-OF-ARRAY ADDRESS
         C     R4,CALLPARM+8       DOES THIS ARRAY INCLUDE ALL DATA?
         BE    MERGOVER            YES, ARRAY SORT NOW COMPLETE
MERGORDR L     R5,DOUBLE+4         POINT PAST SECOND HALF ARRAY
         B     *+8                 COPY WHOLE ARRAY
         SPACE
*         FLUSH REST OF FIRST HALF ARRAY THROUGH TO TARGET
MERGFLS1 L     R5,DOUBLE           POINT PAST FIRST HALF ARRAY
         SR    R5,R4               GET LENGTH OF REST OF 1ST HALF ARRAY
         LR    R7,R5               SET TARGET LENGTH FROM SOURCE
         MVCL  R6,R4               COPY REST OF FIRST HALF ARRAY
         L     R4,DOUBLE+4         POINT TO NEXT ARRAY
         B     MERGNEXT            GO PROCESS NEXT ARRAY
         SPACE
*         FLUSH REST OF SECOND HALF ARRAY THROUGH TO TARGET
MERGFLS2 LR    R4,R2               POINT TO REST OF SECOND HALF ARRAY
         L     R5,DOUBLE+4         POINT PAST SECOND HALF ARRAY
         SR    R5,R4               GET LENGTH OF REST OF 2ST HALF ARRAY
         LR    R7,R5               SET TARGET LENGTH FROM SOURCE
         MVCL  R6,R4               COPY REST OF SECOND HALF ARRAY
         B     MERGNEXT            GO PROCESS NEXT ARRAY
         SPACE
*         ARRAY SORT COMPLETE - DETERMINE IF DATA NEEDS TO BE RELOADED
MERGOVER LM    R6,R7,#MG_ORIG      GET ORIGINAL DATA AREA DETAILS
         CR    R4,R6               DID SORTED DATA LAND BACK THERE?
         BE    MERGBACK            YES, DATA PROCESSING COMPLETE
         SR    R7,R6               GET LENGTH OF ALL ENTRIES TO RESTORE
         LR    R5,R7               GET LENGTH OF ALL ENTRIES TO RESTORE
         MVCL  R6,R4               COPY ALL ENTRIES
         SPACE
*         SORTED DATA NOW IN RIGHT AREA - CHECK FOR ORDER REVERSAL
MERGBACK TM    STATUS13,$13DESC    WAS DESCENDING ORDER REQUESTED?
         BNO   MERGDONE            NO, SO SORT NOW COMPLETE
         LM    R4,R5,#MG_ORIG      YES, GET DATA BOUNDARIES
         S     R5,#MG_RLEN         POINT TO LAST RECORD
MERGSWAP CR    R4,R5               FINISHED REVERSAL?
         BNL   MERGDONE            YES, SO SORT NOW COMPLETE
         EX    R14,MERGEX45        NO
         EX    R14,MERGEX54        SO SWAP RECORDS
         EX    R14,MERGEX45
         A     R4,#MG_RLEN         GO ONE RECORD FORWARDS
         S     R5,#MG_RLEN         GO ONE RECORD BACKWARDS
         B     MERGSWAP            CONTINUE THE PROCESS
         SPACE
*         EXIT TO CALLER
MERGDONE LM    R14,R12,12(R13)     RESTORE REGISTERS
         SR    R15,R15             ZERO RETURN CODE
         BR    R14                 RETURN TO CALLER
         SPACE
         DROP  R11                 REVMERGE
         SPACE
         DC    0D'0'
         LTORG
         SPACE
         DC    0D'0'               END OF CSECT
