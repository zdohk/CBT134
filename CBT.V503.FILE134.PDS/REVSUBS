         TITLE '  R E V S U B S  '
**********************************************************************
*
*        CONTROL SECTIONS IN THIS SOURCE FILE:
*
*          REVPDS - FORMAT, DISPLAY AND NAVIGATE PDS DIRECTORIES.
*         REVALCO - ALLOCATE AND SERIALIZE SEQUENTIAL OUTPUT FILE.
*         REVDALO - FREE AND DEQ SEQUENTIAL OUTPUT FILE.
*        REVOFFLD - SEQUENTIALIZE PDS MEMBERS.
*         REVSRCH - SEARCH PDS MEMBERS FOR DATA.
*         REVLOAD - INVOKE PDSLOAD OR REVLMOD TO LOAD NEW PDS MEMBERS.
*         REVDLNK - INVOKE DELINKI TO DELINK LOAD MODULES.
*          REVDIV - CACHE REVIEWED DATA IN VIRTUAL STORAGE.
*          REVPNS - DETERMINE POINT-AND-SHOOT DATA SET NAME.
*        REVIMAGE - SHOW PICTURE USING RASTER GRAPHICS.
*         REVNATV - SHOW PICTURE USING NATIVE 3270 VECTOR GRAPHICS.
*         REVGDDM - SHOW PICTURE USING GDDM CALLS.
*         REVPQRY - DETERMINE IF ISPF IS TO PERFORM SCREEN I/O.
*         REVHEAD - CLEAR SCREEN BUFFER AND LOAD COMMON FIRST 2 LINES.
*         REVCOMM - PERFORM ALL TSO TERMINAL COMMUNICATION.
*        REVOUTPT - JOB STATUS AND HELD SYSOUT INTERFACE.
*         REVDSCB - SHOW DATA SET ATTRIBUTES.
*          REVTSO - TSO COMMAND HISTORY AND INVOCATION.
*
**********************************************************************
         EJECT
**********************************************************************
*
*  R32.0  10JAN00 - CREATE REVSUBS SOURCE MEMBER TO REDUCE THE
*                   SIZE OF THE REVIEW SOURCE MEMBER.           GP@P6
*  R32.1  15FEB00 - FIX IMS ACBLIB OFFSET BITROT.
*                 - ADD IMS ACBLIB Y2K WINDOWING.               GP@P6
*  R32.2  27APR00 - DO NOT OVERLAY RMODE24 SIZE WITH 'PDSE'.    GP@P6
*
*           CHANGES MADE BY GREG PRICE, HANSEN CORPORATION      GP@HC
*  R32.3  08SEP00 - REPLACE SPINIT WITH FSINIT, REMOVE SPIB.
*  R33.0  15SEP00 - ADD REVHIST AND 'H' MEMBER SELECTION CODE.
*  R34.0  12OCT00 - EXTERNALISE SHOWHELP ROUTINE.
*                 - INCLUDE ISPF SECONDS IN DATE SORT CRITERIA.
*                 - SKIP AUTO PDSE REFRESH IF ANY MEMBER TAGGED.
*                 - ADD REVHFDIR CSECT FOR HFS DIRECTORIES.
*         15DEC00 - ADD HFS REGULAR FILE SEARCH.
*                 - ADD '/' SELECTION CODE FOR PDS(E) AND HFS.
*  R35.0  11JAN01 - ADD REVPDSE CSECT FOR PROGRAM OBJECTS.
*                 - ADD PARAMETER LIST FOR REVSRCH.
*  R35.1  19JAN01 - FIX SCROLL UP OF HFS PROGRAM HISTORY.
*  R35.3  19MAR01 - CORRECT LOGIC TO AVOID S0C1 ON PRE-XA OS.
*         03APR01 - AVOID READ BUFFER ATTEMPT UNDER MVS/370.
*         05APR01 - ALLOW POINT AND SHOOT OF HEADING DSNAME.
*         10APR01 - AVOID S0C1 ON PRE-XA 'H' MEMBER SELECTION.
*  R35.4  31AUG01 - FIX S0C4-4 FOR PDSE WITH ALTERNATE PRIMARY.
*                 - CHANGE ALTERNATE PRIMARY SIGN FROM '@' TO '*'.
*                 - DO NOT BROWSE FOR =EDITMEM IF NAME STARTS WITH B.
*                 - ALLOW EDIT AND BROWSE WITH NO MEMBER NAME.
*                 - CHANGE MSG MACRO TO MESG DUE TO NEW OPCODE.
*                 - RENAME 'REVEDIT' CSECT TO 'REVISPF'.
*         20SEP01 - FIX PLACEMENT OF 'MODIFIED' FOR PDSE.
*  R35.5  19NOV01 - FREEPOOL QSAM BUFFERS AFTER CLOSE.
*                 - ADD SZERO=NO TO ATTACH LIST FORMS.
*         22NOV01 - ADD REVPQRY CSECT TO VERIFY DIALOG ENVIRONMENT.
*         27NOV01 - ADD SCREEN SIZE RESTORE ON RESHOW.
*                 - CHANGE INTERRUPT (PA1) FROM EXIT TO RESHOW.
*         04JAN02 - ADD ISPF DIALOG FOR DATA PRESENTATION.
*                   THIS INCLUDES AN ISPF PANEL MEMBER (REVPANEL)
*                   AND AN ISPF KEYLIST MEMBER (REVPROF).
*                   ADD 'XISPMODE' OPERAND TO PREVENT ISPF DIALOG.
*  R36.0  11JAN02 - ACTIVATE KEYLIST DURING REVPANEL DISPLAY IF OFF.
*                 - DISCARD PRE-36.0 PFK VALUE PROFILE OVERRIDES.
*                 - PREVENT ISPF SCREEN I/O IF REVPROF NOT IN ISPPROF.
*                 - FOR OS/390 2.10 AND LATER, USE ISPF VARIABLES FOR
*                   POINT-AND-SHOOT AND TO SKIP QUERY PROCESSING.
*         15JAN02 - ADD BPX1LST AND BPX1RDL CALLS FOR EXTERNAL LINKS.
*  R36.5  27JUL02 - ADD 'A' UNIX SELECTION CODE.
*                                                    CHANGES BY GP@P6
*  R36.7  21DEC02 - FIX WIDE-SCREEN AFTER ISPF PRIMARY SIZE.
*  R37.0  01OCT03 - LARGE INTERAL REORGANISATION.
*                 - REVHFDIR RENAMED TO REVUNIX.
*                 - REVPODIR RENAMED TO REVPDS.
*                 - REVCOMM, REVHEAD, REVALCO, REVDALO, REVMSGS ADDED.
*                 - REVMSGS REMOVED TO SEPARATE SOURCE MEMBER.
*                 - SEE LOG IN REVIEW SOURCE MEMBER FOR MORE DETAILS.
*  R37.1  29OCT03 - AVOID ALL ISPF CALLS BY FULLSCREEN HELP.
*                 - ADD ISPQRY CALL TO VERIFY ISPF IS ACTIVE UNDER
*                   OS/390 2.10 AND LATER BEFORE ANY OTHER ISPF CALL.
*  R37.2  04NOV03 - ADD IMPLICIT EXEC SUPPORT TO 'TSO' SUBCOMMAND.
*  R37.4  10NOV03 - FIX SUBMIT.
*  R37.5  20NOV03 - FIX LOCATE OF SORTED COMPLETE MEMBER NAME.
*                 - FIX PROGRAMMED SYMBOL PICTURE RENDERING.
*                 - USE TPUT NOEDIT WHEN 14-BIT ADDRESSING IS NEEDED.
*  R38.0  15JAN04 - REMOVE PRECODED DIRECTORY DISPLAY HELP PANELS.
*                 - ADD COMPON AND REVHELP VARIABLES TO NOMINATE
*                   HELP TO BE SHOWN IN ISPF AND TSO MODES.
*                 - 'HELP' NOW CALLS FS HELP INSTEAD OF TSO HELP.
*         09MAR04 - ADD 'U' SELECTION CODE AND REVEDIT HOOKS.
*                 - MULTIPLY IMS PSB SIZE BY 64 INSTEAD OF 8.
*         30APR04 - CHANGE SLASH TO DASH IN DATE DISPLAY FORMAT.
*         22MAY04 - FIX ASSEMBLE UNDER MVS 3.8J.
*  R38.1  30JUN04 - RESET ATTENTION FLAG IN ISPF TERMINAL I/O PATH.
*                 - FIX POINT-AND-SHOOT FOR REVEDIT SESSION.
*         02JUL04 - REMOVE BLUE AREAS FROM USER DATA HALFWORD MESSAGE.
*         09JUL04 - ADD THE REVEDIT CALL FUNCTION TO REVLOAD.
*         13JUL04 - NEVER USE ISPF I/O IF ATTACHED BY STARTOOL DIRECT.
*  R38.2  02SEP04 - FIX CURSOR HOME LOCATION FOR OTHER THAN 80 COLUMNS.
*                 - ADD CURSOR SORT COLUMN HEADING SELECT TO REVPDS.
*                 - FIX S0C4 INITIALIZING ISPMODE UNDER SDSF.
*         10SEP04 - ALLOW BPX.SUPERUSERS TO REVIEW ANY FILE.
*  R38.3  14SEP04 - FIX CURSOR SORT WHEN **END** IS SHOWING.
*         23SEP04 - SHOW HISTORY FROM TOP EVEN AFTER ERROR.
*  R38.6  08NOV04 - FIDDLE WITH BINDER API ERROR REPORT MESSAGE.
*                 - DO NOT USE HISTORY FORMATTING IF NO HISTORY DATA.
*                 - RESET FORMATTING AFTER UNIX HISTORY DISPLAY.
*  R39.0  30DEC04 - FIX NULLS/BLANKS INPUT HANDLING.
*  R39.2  29JAN05 - CORRECT DMB SIZE DISPLAY FOR IMS V8R1.
*                 - ALLOW PDS SEARCH FOR LOWER CASE.
*                 - RESET "FIND PICTURE" FLAG FOR SEARCH.
*  R39.3  24AUG05 - MAKE DS1CREDT 1900-1970 RANGE 2000-2070.
*                 - FIX FLAKEY USER DATA DISPLAY OF NUMERICS.
*                 - ADD 'M' SELECTION CODE TO MAP PROGRAM OBJECTS.
*  R40.0  20SEP05 - UPDATE 'S' INTERPRETATION FOR 'REVED' COMMAND.
*         06MAR06 - ADD OFFLOAD DCB ABEND PROCESSING.
*         31MAR06 - ADD 'REVOUT' COMMAND AND REVOUTPT CSECT.
*                 - ALLOW REVALCO TO CREATE DATA SETS.
*                 - ADD '$10LIKE' FLAG FOR REVALCO NEW DATA SETS.
*                 - DO NOT ZERO PRIMARY INPUT FOR '$10PSP' CALLERS.
*                 - CHANGE V-CONS TO AD-CONS WHERE POSSIBLE.
*                 - REMOVE REVHIST, REVUNIX AND REVPDSE TO REVSUBS2.
*         08APR06 - FIX RECURSIVE REVOUT WITHOUT OPERANDS.
*                 - FIX POINT-AND-SHOOT OF DSNAME ON TOP LINE.
*  R40.1  14APR06 - CORRECT IMS DMB SIZE DISPLAY FOR VERSION 6.
*                 - AVOID S0C4 WHEN REVOUTJB CLIST NOT INSTALLED.
*  R40.2  30JUN06 - FIX HANDLING OF UNDISPLAYABLES FROM DSCB-1.
*  R40.3  02DEC06 - TREAT 'SELECT' AS 'UPDATE' FOR 'REVED'.
*                 - USE FIXED SESSION IDS, NOT RELATIVE TO CURRENT.
*         18JAN07 - CURSOR AUTO-SELECT 'S' ONLY IF NO PRIMARY COMMAND.
*                 - SHOW STEP NAMES AND CPU TIME FOR EXECUTING JOBS.
*         24JAN07 - FIX DISPLAY OF MSGS 80 AND 82 WHILE OFFLOADING.
*  R40.4  10MAR07 - ADD CREATE/REPLACE CHECKING TO REVALCO.  REQUEST
*                   DIRECTORY BLOCKS FOR NEW PDS EVEN WITHOUT $10LIKE.
*                 - REMOVE BUFNO=16 FROM DIRDCB BECAUSE OF S80A ABEND
*                   WHEN REVEDIT BPAM OPEN GOT 16 BUFFERS EVERY TIME.
*  R41.0  18NOV07 - ADD REVNATV CSECT.
*                 - DISPLAY SCREEN NUMBER WHEN MORE THAN ONE CURRENT.
*                 - SAVE/RESTORE CURSOR LOCATION ACROSS SESSION SWAP.
*                 - SUPPRESS SCREEN SIZE CHANGE IF ALREADY 80 COLUMNS
*                   TO AVOID SOME TN3270 CLIENT WINDOW RESIZINGS.
*         28NOV07 - FIX DIV CHAIN METHOD RECORD STORE.
*  R41.2  03JAN08 - UNPACK 5 MORE BYTES PER LINE WITH PICDATA.
*         07JAN08 - LEAVE CURSOR BESIDE LAST JOB VIEWED IF LISTED.
*         16FEB08 - SHOW NEW MEMBERS AFTER PDSLOAD INTO EMPTY PDS.
*                 - FIX S0C4 WHEN REVALCO LOADING DAIRFAIL MESSAGE.
*         26FEB08 - OVERPAINT OLD STATUS DISPLAY AFTER TSO AND SWAP.
*         08MAR08 - LET 'V' SELECT VIEW PROCESSING BY REVEDIT.
*  R41.4  15MAR08 - SKIP ISPF PANEL DYNAMIC AREA SIZE CHECK.
*  R41.6  06APR08 - RESET ASSEMBLER LISTING FLAG IN REVOUT.
*                 - LET REVPANEL SIZE OVERLAY GTSIZE RESULTS.
*         21APR08 - ADD REVDSCB CSECT.
*                 - REMOVE OLD PDS SORT ALIASES LIKE SD, SN AND STTR.
*  R41.7  26APR08 - LET REVPANEL RENEW SCREEN SIZE DEPENDENT AREAS.
*                 - ADD 'CDE'/'JPA' COMMAND.
*  R41.8  28APR08 - FIX PRIMARY-SIZED PROMPT SIZE SWITCHING.
*  R42.1  30DEC08 - ADD 'TCB'/'RB' COMMAND.
*         01JAN09 - REPLACE THE POCONCAT CODE BLOCK IN REVPDS (WHERE
*                   EACH CONCATENATED PDS WAS ALLOCATED IN TURN TO
*                   HAVE ITS DIRECTORY READ) WITH AN FEOV MACRO.
*         07JAN09 - ADD 'D' SELECTION CODE TO REVPDS TO DELETE A
*                   MEMBER - 'R' CAN BE USED TO RESTORE IT.
*  R42.2  24JAN09 - ALLOW REVOUT TO RUN AS AN ISPF DIALOG.
*  R42.3  28MAR09 - ADD SCRNAME AND SWAP ENAHANCEMENTS.
*                 - ADD 'N' SELECTION CODE TO RENAME A PDS MEMBER.
*                 - FIX REVPDS MEMBER OPERATION SERIALIZATION DSNAME.
*  R43.0  12APR09 - IMPROVE REVDSCB MULTI-VOLUME SUPPORT.
*         19APR09 - NORMALIZE REVIEW2 SAVE AREA CHAINING.
*         25APR09 - ADD MERGE SORT TO REVSORTE FOR NAME AND TTR SORTS.
*         02MAY09 - ADD EADSCB=OK TO OBTAIN.
*         08JUN09 - ADD ALTERNATE SIZE DISPLAY SUPPORT TO REVDSCB.
*         12JUL09 - ADD COMPRESS-BY-CONDENSE SUPPORT.
*         17OCT09 - OFFLOAD ISPF MODIFICATION SECONDS IN STATS.
*         07NOV09 - HANDLE SCREEN SIZE CHANGE.
*         22NOV09 - ADD "REVCATCH" FACILITY AS USED BY REVLISTC CLIST.
*         31JAN10 - IMPLEMENT STAX OWNER ADMIN LOGIC.
*         26FEB10 - ADD COLOUR REPEATED SYMBOL OPTIMIZATION.
*         08MAR10 - ADD REVTSO CSECT.
*                 - ADD 'SPLIT' COMMAND.
*         18MAR20 - UPGRADE 'N' SELECTION CODE SCREEN I/O.
*  R43.1  26MAR10 - ALLOW MINUS SIGN IN DSNCHARS TABLE.
*         28MAR10 - HANDLE REVCATCH OVERFLOW.
*  R43.2  30APR10 - $UCBAD DIV TIDY UP.
*  R43.3  07MAY10 - RESTORE TPUT/TGET SCREEN I/O FOR PROMPT PANELS.
*  R43.4  16MAY10 - INVALIDATE DSCB ID WITH LOW VALUES, NOT HIGH.
*                 - SHOW DSCB-9 HEX IN REVDSCB EVEN IF DS1NOEPV < 4.
*  R43.5  30JUN10 - DO NOT USE RBCDE, USE RBCDE1 INSTEAD.
*         13AUG10 - ADD OPEN DATA SET NAME TO 'TCB'/'RB' DISPLAY.
*  R43.7  31OCT10 - ADD "MAGIC" SVC 'TSO' APF SUPPORT FOR MVS/370.
*         14NOV10 - ADD INTERNAL CODES FOR AUTOSKIP FIELDS.
*         04DEC10 - SKIP INFO ACQUISITION FOR UNASSIGNED VOLUMES.
*                 - ADD DSDELMSG.
*  R43.9  20JAN12 - HANDLE PDS DIRECTORY I/O ERRORS. (THNX "HALFMEG")
*         25MAR12 - FIX REVDALO DEQ S230 ABEND.
*  R44.B  09DEC12 - MORE "POSPFSEL" WORK.
*  R44.0  19JUL13 - DISPLAY SMS CLASSES IN REVDSCB.
*         14DEC13 - ADD THE 'PICNBW' FLAG WHICH IS ONLY SET IF A 3270
*                   COLOUR OTHER THAN BLACK OR WHITE IS ACTUALLY
*                   USED.  THIS HELPS OPTIMIZE LPS AND IMAGE RENDERING
*                   TPUTS AND CAN SIMPLIFY 'PICDATA' COMMAND OUTPUT.
*                 - ADD THE 'PICBIG' FLAG TO INDICATE THAT THE PICTURE
*                   IS WIDER THAN THE SCREEN CAN DISPLAY.  REVIMAGE
*                   USES THIS TO DECIDE IF THE PICTURE IS TO BE LOADED
*                   INTO THE PRIMARY AND SHADOW BUFFERS, OR IF A 3270
*                   DATA STREAM IS TO BE CONSTRUCTED.  USE OF THE
*                   REVIEW SCREEN BUFFERS ALLOWS REVCMPBF TO PERFORM
*                   3270 COMPRESSION ON THE IMAGE DATA, AND ALLOWS
*                   REVCOMM TO PAINT THE WHOLE SCREEN WITH A SINGLE
*                   TPUT.
*         27JAN14 - ADD Z/OS REGION SIZE DETAILS TO 'TASK' DISPLAY.
*  R44.1  31JAN14 - UPPER CASE SELECTION CODES - FIX FOR ISPF MODE.
*  R44.2  05FEB14 - FIX VS 'UP' LOOP (2ND 1/2 OF PAGE 0 PROTECTED).
*  R45.0  24APR14 - REVHEAD USES 'HDCOLOR' INSTEAD OF STATUS FLAGS.
*         01MAY14 - ADD 'START' AS AN ALIAS OF 'SPLIT' BECAUSE RFE'S
*                   'SPLIT' FUNCTIONS LIKE ISPF'S 'START'.
*         15JUN14 - SUPPORT OPTION 3.1 'D' AND 'N' SELECTIONS.
*         21JUN14 - ALLOW SAVE OF SINGLE CHARACTER COMMANDS TO
*                   RECALL STACK - BUT DO NOT SAVE INPUT LESS THAN
*                   5 CHARACTERS LONG UNLESS INPUT BY ENTER (NOT PFK).
*                 - ADD LEADING AMPERSAND PRIMARY COMMAND PERSISTENCE.
*         10AUG14 - CHANGE REVPDS INTERNAL DIRECTORY ENTRIES FROM
*                   VARIABLE-LENGTH TO A FIXED-LENGTH BASE SECTION
*                   (PO_SECT) WHICH POINTS TO A VARIABLE-LENGTH
*                   EXTENSION (PX_SECT) - ONLY NEED TO SORT THE BASES.
*                 - DELETE CSECT REVSORTE - CALL REVMERGE INSTEAD.
*         19AUG14 - REVPDS TOP LINE - 'DSN ON VOL' AND 'ROW # OF ##'.
*         22AUG14 - SAVE ALLOCATION DSNAME FOR REUSE.
*                 - ADD "REVMSG" FACILITY AS USED BY REVSB CLIST.
*  R45.1  04OCT14 - REVALCO NOW CALLS REVCREAT FOR NEW DATA SET.
*                 - REVALCO DOES NOT FORCE 80-COLUMN DISPLAY.
*                 - SHOW FREE REGION STORAGE SIZE FOR MVS/370.
*         04NOV14 - SUPPORT OPTION 3.3 MEMBER COPYING.
*  R45.2  16NOV14 - SUPPORT OPTION 3.5 STATISTICS OVERTYPING.
*         22NOV14 - SUPPORT OPTION 3.5 MEMBER SELECTION CODES.
*         16DEC14 - REVALCO ALWAYS SETS 'MSG' IF RC NOT ZERO.
*  R45.4  31DEC14 - READ MVS 3.8 JES2 CHECKPOINT IN REVOUTPT.
*                 - FIX AOTRTDSN TO CHECK NEW NAME.
*         06JAN15 - DO NOT USE VIO TO HOLD SYSOUT DATA TO BROWSE.
*                 - PERFORM I/O DIRECTLY TO MVS 3.8J JES2 CKPT/SPOOL
*                   SO SYS1.HASPSRC NOW REQUIRED FOR MVS/370 ASSEMBLE.
*  R45.5  09JAN15 - FIX REVOUT FOR MVS/370 WITHOUT JES SSCTSSID=X'02'.
*  R46.0  13JUN15 - ADD MEMBER GENERATION SUPPORT.
*  R46.1  01AUG15 - MAKE REVPNS & REVPQRY MVS RELEASE INDEPENDENT.
*  R46.2  03JAN16 - REVSRCH CLEAR FINDCOL2 LOW BYTES FOR REVEDIT RFIND.
*         21JAN16 - DO NOT CHECK FOR REVPROF MEMBER UNDER MVS/370.
*         27FEB16 - USE REVPANL2 IF NO SCROLL FIELD.
*  R46.3  06MAR16 - FIX SCROLL FIELD DETECTION FOR WIDE SCREEN.
*                 - VERIFY REVPANL2 AVAILABILITY BEFORE USING IT.
*  R46.4  15APR16 - FIX ATTENTION S0C4 AFTER RECURSIVE REVIEW ENDS.
*  R46.5  16APR16 - PREVENT 370 ISPF BROWSE/EDIT/VIEW SERVICE CALLS.
*                 - MOVE REVISPF TO REVSUBS2.
*         11MAY16 - POSITION CURSOR TO REVPDS COMMAND'S BAD OPERAND.
*         14MAY16 - ALLOW PFK VALUE UPDATES FROM 'KEYS' DISPLAY.
*                 - SET 'RFIND' AND 'RCHANGE' PFK FLAGS FOR REVEDIT.
*  R46.6  23JUN16 - FIX OPT 3.3 "TO" OAIA OVERLAY BY TPUT NOEDIT PLIST.
*         27AUG16 - EXTEND MVS 3.8 JES2 I/O TO REPLACE FIB COMMAND USE.
*                 - ADD 'FIB' SUBCOMMAND TO REVOUT.
*         31AUG16 - ADD 'INPUT' SUBCOMMAND TO REVOUT.
*  R46.7  09SEP16 - CHANGE DESERV AREA SIZE FROM 32K TO 512K.
*                 - PASS MEMBER ABSOLUTE GENERATION NUMBER TO REVISPF.
*  R46.8  20SEP16 - STAGE STOW DATA B-T-L TO FIX RESTORE STOW.
*         15JAN17 - ADD 2KB TO 3270 DATA STREAM BUILD AREA.
*         03FEB17 - ALLOW 8-CHARACTER USERID OVERTYPE IN OPTION 3.5.
*  R47.0  14FEB17 - REPORT SYSOUT RECORD COUNT TOTALS FROM PDDB CHAIN.
*                 - NAME THE LOGICAL SESSION AT RELEVANT POINTS.
*  R47.1  04MAR17 - REPLACE '*ALIAS' WITH GREEN ASTERISK - CAN SEE TTR.
*                 - FIX RFE PDS SEARCH SKIPPED MEMBERS - REV WAS OK.
*                 - PREVENT REPLACE OF TAPE DATA SET.
*                 - IMPROVE TAPE DATA SET INFORMATION DISPLAY.
*         13MAR17 - FULLY SUPPORT SEGMENT OVERLAY PROGRAMS.
*  R47.2  06MAY17 - CHECK STABEND AFTER PUT OF ./ STATEMENTS.
*         01JUL17 - REVLOAD FIXES: SAVE MEMBER NAME IN BLDLNAME AND
*                   REBUILD SCREEN BUFFER AFTER MEMBER LIST SELECTION.
*         04JUL17 - CREATE NEW I/O STACK FOR TSO COMMAND IF NECESSARY.
*         09JUL17 - GET EXTENT COUNT FROM DEB INSTEAD OF DSCB.
*                 - DISPENSE WITH EARLY DIV TRIMMING UNLESS MVS/370.
*  R47.4  20AUG17 - ENLARGE TPUT BUFFER TO FIX LARGE SCREEN HEXX S0C4.
*  R47.5  12OCT17 - SPECIFY LOC= ON ALL SVC 120 GETMAINS.
*  R47.6  24OCT17 - FIX $14RCL PROCESSING FOR FSHELP EX JOHN KALINICH.
*  R47.7  08NOV17 - FIX SESSION SWAP SCREEN SIZE CHANGE DETECTION.
*                 - PRESERVE I/O STACK STATUS ACROSS SESSION SWAP.
*                 - SKIP GETLINE CALL WHEN ENDING A PARALLEL SESSION.
*         11NOV17 - ALLOW POINT-AND-SHOOT FROM DSCB8 VTOC ENTRY.
*  R47.8  22NOV17 - EXTEND COMMAND INPUT AREA FOR WIDE SCREEN.
*                 - DELAY CLEARING RECALL TEXT IN CASE NEED TO RESHOW,
*                   AND NO LONGER RELY ON FIXED COMMAND AREA SIZE.
*                 - CHANGE REVHEAD TO SUPPORT WIDE COMMAND INPUT.
*                 - SUPPORT RECALL INTO ANY COMMAND AREA SIZE.
*  R47.9  29NOV17 - FIX PANEL SELECTION AFTER MOVABLE SCROLL PROMPT.
*         06DEC17 - SUPPORT 8-BYTE TSO USER ID AND PREFIX.
*         09DEC17 - RESTORE REVOUTJB CLIST FUNCTIONALITY.
*  R48.0  09JAN18 - FLAG UNTYPED STRING AS TEXT STRING.
*                 - IF CAPS OFF LEAVE TEXT STRING AS-IS UNLESS OPD1.
*         20JAN18 - SUPPORT TILDE (~) AS HOME DIRECTORY REQUEST.
*  R48.1  12MAR18 - ADJUST REVOUT DATA SET DYNALLOC UNIT AND SPACE.
*                 - ADD TERMGET=(,NOWAIT) TO GETLINE - SO DON'T NEED
*                   TO AVOID GETLINE AT PARALLEL SESSION END.
*                   THANKS TO WALLY MCLAUGHLIN FOR THE SUGGESTION.
*  R48.2  25MAR18 - CHANGE CSECT STATEMENTS TO RSECT STATEMENTS.
*                 - SHOW RMODE=64 PROGRAM MEMBERS IN YELLOW.
*  R48.3  26MAR18 - FIX DSINFO ABEND FOR UNVERSIONED TYPED PDSE.
*         02MAY18 - REWRITE REVDIV STORAGE MGMT TO MAKE IT EXPANDABLE.
*         07MAY18 - MAINTAIN ECTRTCD FOR CLIST &LASTCC PURPOSES.
*         15MAY18 - KEEP REVSRCH COLUMNS THE SAME AS REVIEW2 FOR RDWS.
*         27MAY18 - FIX CHECK FOR SWAP FROM LATEST TO SECOND-LATEST.
*         05AUG18 - REMOVE 'RFIND' AND 'RCHANGE' PFK FLAGS PROCESSING.
*         17AUG18 - OBTAIN DSCB-4 IN REVDSCB IFF PRE-ESA AND NOT VIO.
*                 - DETERMINE RECURSION FROM PARALLEL SESSION COUNT.
*  R48.4  09SEP18 - ADD MEMBER NAME PATTERN MATCHING COMMAND/ALIASES.
*         19SEP18 - CATER FOR OPTION 3.4 LIBRARY SCAN.
*                 - MAKE OPTION 6 COMMAND HISTORY TAB-SELECTABLE.
*         06OCT18 - FIX PROGRAM PDSE SEARCH PROGRESS BAR DISPLAY.
*  R48.5  20OCT18 - DROP ** AND *% MEMBER NAME MASK RESTRICTIONS.
*         17NOV18 - ADD SUPPORT FOR DATA SET LIST SRCHFOR COMMAND.
*  R48.6  04MAR19 - MAKE DIRVLEGC ALLOW FOR ISPF SWAPBAR ETC.
*  R49.0  26MAR19 - DATA SET FOR CDE/JPA IF CVTH77B0 AND WIDE SCREEN.
*         30MAR19 - ADD AMODE SWITCHING FOR MVS/XA-LIKE SYSTEMS.
*         05APR19 - FIX S0C4 USING 'SWAP' WITHOUT OPERANDS UNDER ISPF
*                   ON Z/OS WHEN NOT RUNNING AS AN ISPF DIALOG AND
*                   WITH NO RECURSIVE/PARALLEL REVIEW SESSIONS.  THIS
*                   IS PROBABLY WHAT PREVIOUS UPDATES SUCH AS AT R48.3
*                   WERE TRYING TO FIX.  REPORTED BY PETER GLANZMANN.
*         20MAR19 - ADD PARTIAL SCREEN WRITE AND TGET NOWAIT SUPPORT.
*         30JUN19 - ENHANCE WIDE SCREEN CDE DISPLAY FOR Z/OS 2.3+.
*  R49.1  03AUG19 - SHOW CORRECT RB ADDRESS INSTEAD OF ALWAYS TCBRBP.
*                 - FIX S0C4 ABEND IN CDE/JPA DISPLAY GENERATION.
*  R49.2  17AUG19 - FIX FIELD ATTRIBUTES FOR PARTIAL SCREEN UPDATES.
*  R49.3  12OCT19 - MODAL DISPLAY IMPROVEMENTS FOR ISPF VISIBLE AREA
*                   HANDLING AND LINKLIST PROGRAM DATA SET NAME.
*  R49.4  12OCT19 - FIX 'TCB'/'RB' OPEN SEQUENTIAL DCB DATA SET SET.
*         01JAN20 - HANDLE TEXT LINES FROM SPOOL UP TO 254 BYTES LONG.
*  R49.6  15MAY20 - ADD COMP AND ENCRYPTED INDICATORS TO DSINFO.
*                 - DO NOT SHOW DSINFO OBTAIN ERROR IF IT OCCURS AFTER
*                   THE LAST USED VOLUME - REPORT BY ANGELO SOMASCHINI.
*                 - ADD ADDITIONAL STAX FOR PROTECTION FROM TSO COMMAND
*                   - PA1 WILL CAUSE TSO COMMAND SUBTASK TO S13E ABEND.
*                 - AVOID S306 ABEND WHEN TSO COMMAND ISSUED UNDER 3.8
*                   WHEN REVIEW/RFE IS RUNNING APF AUTHORIZED.
*                 - ADOPT CURRENT SCREEN ALWAYS OWNS STAX SCHEME.
*                 - PROTECT TSO COMMAND SUBTASK WITH ESTAI.
*                 - SHOW SUMDUMP DATA FOR TSO COMMAND SUBTASK ABEND.
*                 - FIX RECONNECT SCREEN SIZE CHANGE AM31 STORAGE MGMT.
*  R49.7  12JUL20 - ENHANCE DIV PIXEL RETRIEVAL.
*                 - FIX LOAD MODULE SSI DISPLAY.
*         09AUG20 - REVLOAD TO SKIP REVEDIT PROMPT IF D/S FROM USER.
*  R49.9  28SEP20 - SUPPRESS MESSAGE 60 IF SCANNING DATA SETS FOR 3.4.
*         12DEC20 - AM31 LOGIC FIX: MOVE LABEL HASPHDOK BEFORE XASAM24.
*                 - ADD XASAM24 AFTER REVDASD CALL IN REVOUTPT.
*  R50.0  06JAN21 - DEFAULT TO SAME MEMBER NAME IN REVLOAD EDIT PROMPT.
*         29MAR21 - FIX CVB S0C7 WHEN LVLINE IS ABSENT - EX WALLY M.
*         02APR21 - ADD ZSCREEN TO LIST OF VCOPIED ISPF VARIABLES.
*         18APR21 - SHOW ZSCREEN AS SCREEN NUMBER IN COLUMN 1 LINE 2.
*         27APR21 - FIX S0C4 ON SWAP TO ABSENT SCREEN - EX SHAWN BRAUNE
*                 - SUPPRESS PROGRESS BAR RELIC FOR REVLEV SEARCH.
*                 - DO NOT RESET ATTN FLAG WHEN KEYBOARD IS LOCKED.
*  R50.1  14JUN21 - FIX KILL OF GENERATION MEMBERS AND SUPPORT ORPHANS.
*         07AUG21 - HIDE GENERATIONS FROM EDIT COPY - NOT SEEN BY QSAM.
*                 - ADD 'SM' COMMAND TO CONTROL TSO/E SESSION MANAGER.
*
**********************************************************************
         TITLE '  R E V P D S  '
**********************************************************************
*                                                          *         *
*         PARTITIONED ORGANIZATION DIRECTORY HANDLER       * GP@SECV *
*                                                          *  03/86  *
**********************************************************************
         SPACE
REVPDS   RSECT
REVPDS   AMODE 31
REVPDS   RMODE 24
         ENTRY IDRDATE
         ENTRY DIRSCROL
         ENTRY STDIRDCB
         B     @PDS-*(,R15)
@PDSLBL  EQU   *+1,8
         DC    AL1(6),CL9'REVPDS'
@PDS     STM   R14,R12,12(R13)
         LR    R10,R15
         LA    R15,1
         LA    R11,4095(R15,R10)
         LA    R12,4095(R15,R11)
         USING REVPDS,R10,R11,R12
         MVI   READR,X'80'         RESET UTILITY PROGRAM INDICATOR
         CLC   =C'3.1D',PUTLINS    HERE TO DELETE A MEMBER?
         BE    DIR3PT1             YES
         CLC   =C'3.1N',PUTLINS    HERE TO RENAME A MEMBER?
         BE    DIR3PT1             YES
DIREFRSH LA    R2,DIRGMLIM         POINT TO BOUNDS OF GETMAIN LENGTH
         LA    R3,DOUBLE           POINT TO RESULTS AREA
         MVC   GMVUW(GMVCL),GMVC
         MVI   GETMNTRC,51         TRACK GETMAIN IN CASE OF FAILURE
         GETMAIN VC,LA=(R2),A=(R3),MF=(E,GMVUW)
         LTR   R15,R15             DID GETMAIN WORK?
         BZ    USEDYN              YES, PROCEED
         MVI   MSG,123             REQUEST ABORTED - STORAGE FULL
         L     R15,=A(REVMSGS)
         BASR  R14,R15             FETCH MESSAGE TEXT
         LA    R1,MSG+2            POINT TO ERROR MESSAGE
         LH    R0,MSG              GET ERROR MESSAGE LENGTH
         TPUT  (1),(0),R           DISPLAY MESSAGE
         NI    STATUS11,255-$11VIEW
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         LA    R15,20              SET RETURN CODE
         BR    R14                 RETURN
USEDYN   L     R4,DOUBLE           GET ADDRESS OF GETMAINED AREA
         LA    R5,DIRENTS-@PDSAREA GET LENGTH TO CLEAR
         MVCL  R4,R14              R15=0 - CLEAR FIXED PART OF AREA
         L     R4,DOUBLE+4         GET LENGTH OF GETMAINED AREA
         L     R5,DOUBLE           GET ADDRESS OF GETMAINED AREA
         ST    R13,4(,R5)          CHAIN SAVE AREAS
         ST    R5,8(,R13)
         LR    R13,R5              POINT TO NEW SAVE AREA
         USING @PDSAREA,R13
         USING OAIAREA,PO_OAIA
         MVC   @PDSMRKR,@PDSLBL    MARK USE OF THIS STORAGE AREA
         UNPK  @PDSMRKR+6(3),RECURS#+3(2)
         TR    @PDSMRKR+6(2),POHEX-240
         MVI   @PDSMRKR+8,0
         STM   R4,R5,FREEMRGS      SAVE FREEMAIN VALUES
         ALR   R4,R5               GET ADDRESS ABOVE GETMAINED AREA
         ST    R4,DIRLIMAD         SAVE ADDRESS BEYOND NEW STORAGE
         L     R15,=A(REVNAME)
         BASR  R14,R15             ATTEMPT TO NAME THE SESSION
         MVC   DIRMEMCT(MEMVOLLN),POMEMVOL LOAD EDIT MASK AND VIO FLAG
         CLI   $VOLSER,C' '        IS IT A VIO FILE?
         BE    VIOPDSOK            YES
         MVC   POVOLUME,$VOLSER    NO, DISPLAY VOLUME OF FIRST PDS
         TM    STATUS8,$8_34       WAS VOLUME FROM ZDLVOL?
         BNO   VIOPDSOK            NO, CONTINUE
         MVI   POVOLUME-1,C':'     YES, LEAVE A SUBTLE HINT
VIOPDSOK L     R7,=A(READDIR)      POINT TO DIRECTORY PROCESSOR
         TM    STATUS11,$11VIEW    INVOKED AS A VIEW COMMAND?
         BNOR  R7                  NO, PROCESS DIRECTORY INFORMATION
         OI    POFLAG,PFVIEW       YES, REMEMBER THIS
         NI    STATUS11,255-$11VIEW
         BR    R7                  PROCESS DIRECTORY INFORMATION
         SPACE
FORCETOP OI    STATUS,STPODIR      FLAG MEMBER LIST MODE
         TM    STATUS13,$13COMP    COMPRESS REQUESTED?
         BO    SORTTTR             YES, PERFORM INITIAL SORT FIRST
         TM    STATUS15,$15COPY+$15STAR
         BO    SORTTTR             DO THE SAME IF COPYING ALL MEMBERS
         TM    STATUS17,$17S34
         BO    SORTTTR             DO THE SAME IF SEARCHING FOR DATA
         TM    STATUS4,$4ATTN      ATTENTION INTERRUPT?
         BO    FINDMEM             YES, DON'T PERFORM SORT
         TM    STATUS3,$3DATE
         BO    SORTDATE
         TM    STATUS3,$3SIZE
         BO    SORTSIZE
         TM    STATUS3,$3SSI
         BO    SORTSSI
         TM    STATUS3,$3TTR
         BO    SORTTTR
         TM    STATUS3,$3USER
         BO    SORTUSER
         ICM   R0,3,ARLRTRVD       ANY CONCATENATED JFCBS FETCHED?
         BNZ   SORTNAME            YES, SORT INTO COLLATING SEQUENCE
         USING PO_SECT,R3
FINDMEM  LA    R3,DIRENTS          POINT TO FIRST ENTRY
         SR    R4,R4               FIRST ENTRY IS NUMBER ZERO
         TM    STATUS7,$7SAVE      SPF EDITED AND SAVED A MEMBER?
         BZ    TRYUPDTD            NO, SEE IF PDS UPDATED
         MVI   MSG,55              MEMBER SAVED
         NI    STATUS7,255-$7SAVE  RESET EDITED AND SAVED FLAG
         B     TRYNOMEM
TRYUPDTD TM    READR,X'80'         PDS UPDATED?
         BO    TRYNOMEM            NO
DELINKOK L     R0,READR            GET COMPLETION CODE
         SRA   R0,12               DID THE UTILITY PROGRAM ABEND?
         BNZ   UPDTABND            YES
         L     R0,READR            NO
         CVD   R0,DOUBLE           GET CONDITION CODE
         OI    DOUBLE+7,X'0F'
         MVC   MSG(UTCCMSGL),UTCCMSG
         UNPK  UTCCNUM,DOUBLE
         B     WASUPDTD
UPDTABND MVC   MSG(UTABMSGL),UTABMSG
         UNPK  UTABNUM,READR+1(2)
         OI    UTABNUM+2,X'F0'
         TR    UTABNUM,POHEX-240
         OI    STATUS7,$7BELL      REQUEST AUDIBLE ALARM AFTER ABEND
WASUPDTD MVI   READR,X'80'         RESET UTILITY PROGRAM INDICATOR
         LTR   R3,R3               PROCESSING DELINK COMPLETION?
         BZ    SAMEMEMS            YES, DO NOT SCROLL
TRYNOMEM OC    SELMEMNM,SELMEMNM   NON-ZERO MEMBER NAME TO LOCATE?
         BZ    THISMEM             NO, GO TO TOP
TRYMEMNM CLC   SELMEMNM,PO_MEM     UP TO REQUIRED MEMBER?
         BE    THISMEM             YES, FOUND IT
         BH    NEXTMEM             NO, TRY NEXT ENTRY
         TM    STATUS3,$3SORT      ENTRIES IN COLLATING SEQUENCE?
         BZ    PREVMEMN            YES, PASSED IT, SO BACKUP ONE
         C     R3,LSTMEMAD         NO, REACHED END OF ENTRIES?
         BNL   NOTEXIST            YES, EXACT MEMBER NAME NOT THERE
NEXTMEM  LA    R3,PO_NXT           NOT YET, POINT TO NEXT ENTRY
         LA    R4,1(,R4)           INCREMENT ENTRY NUMBER
         B     TRYMEMNM
NOTEXIST NI    POFLAG,255-PFREV    RESET FLAG MEMBER PROCESSED FLAG
         XC    CURMEM@#,CURMEM@#   CLEAR ANY RESIDUAL CURSOR PLACEMENT
         CLI   STATUS3,$3USER      SORTED IN UPDATE USERID SEQUENCE?
         BNE   PUTNEMSG            NO, SHOW "NOT EXIST" MESSAGE
         LA    R3,DIRENTS          YES, POINT TO FIRST ENTRY
         SR    R4,R4               FIRST ENTRY IS NUMBER ZERO
TRYUSRID EQU   *
         AIF   (NOT &ENVZV2).TRYUSER
         TM    STATUS15,$15GEN     SHOWING MEMBER GENERATIONS?
         BO    USRIDTRY            YES, USERID IS PRESENT
.TRYUSER ANOP
         TM    PO_FLG,$POSPF       SPFD STATISTICS ENTRY?
         BNO   PREVMEM             NO, SHOW PREVIOUS MEMBER AT TOP
USRIDTRY ICM   R5,15,PO_PTR        POINT TO EXTENSION
         BZ    PREVMEM             JUST IN CASE
         USING PX_SECT,R5
         CLC   SELMEMNM(8),PX_USER UP TO REQUIRED MEMBER?
         BE    THISMEM             YES, FOUND IT
         BL    PREVMEM             NO, PAST IT SO SHOW PREVIOUS MEMBER
         LA    R3,PO_NXT           NOT YET, POINT TO NEXT ENTRY
         LA    R4,1(,R4)           INCREMENT ENTRY NUMBER
         B     TRYUSRID
         DROP  R5                  PX_SECT
SAMEMEMP LM    R3,R4,CURMEM@#      GET CURRENT MEMBER DETAILS
         LTR   R3,R3               KNOWN ENTRY?
         BZ    FINDMEM             NO, GO FIND IT
         C     R3,TOPMEMAD         IS ENTRY ON SHOW?
         BL    SHOWMEMP            NO, GO SCROLL TO IT
         C     R3,BOTMEMAD         IS ENTRY ON SHOW?
         BNH   THISMEM             YES, GO SHOW IT
SHOWMEMP STM   R3,R4,TOPMEMAD      SCROLL TO PROCESSED MEMBER
         B     THISMEM             GO SHOW IT
PUTNEMSG MVI   MSG,76              EXACT NAME NOT FOUND
SAMEMEMS NI    POFLAG,255-PFREV    RESET MEMBER PROCESSED FLAG
         LM    R3,R4,TOPMEMAD      RESTORE TOP ENTRY DETAILS
         B     THISMEM             RESHOW WITHOUT MOVEMENT
PREVMEMN TM    PO_FLG,$PODEL       DELETED MEMBER?
         BO    THISMEM             YES, CONSIDER IT A MATCH
PREVMEM  LA    R2,DIRENTS          GET FIRST ENTRY ADDRESS
         CR    R2,R3               AT FIRST ENTRY?
         BE    THISMEM             YES, CAN'T GO BACK ONE
         SH    R3,POSIZE           POINT TO PREVIOUS ENTRY
         BCTR  R4,0                DECREMENT ENTRY NUMBER
THISMEM  XC    SELMEMNM,SELMEMNM   CLEAR MEMBER NAME TO BE LOCATED
         NI    STATUS4,255-$4REFR  RESET REFRESH FLAG
         NI    STATUS10,255-$10CAP SET CAPS OFF
         CLI   MSG,55              MEMBER SAVED?
         BE    POINTMEM            YES
         TM    POFLAG,PFREV        JUST PROCESSED A MEMBER?
         BNO   THATMEM             NO
POINTMEM STM   R3,R4,CURMEM@#      SAVE PROCESSED MEMBER DETAILS
         LM    R3,R4,TOPMEMAD      RESTORE TOP ENTRY DETAILS
         LTR   R3,R3               APPLY SENSIBLENESS CHECK
         BNP   FIRSTMEM            JUST IN CASE
THATMEM  CLC   ISPFPAGE,MEMBRCNT   CAN ALL MEMBERS BE SHOWN AT ONCE?
         BNH   DIRHEAD             NO, SO DO NOT ADJUST BEHAVIOUR
         ICM   R0,15,TAGCOUNT      ANY TAGGED MEMBERS?
         BNZ   DIRHEAD             YES, SO DO NOT ADJUST BEHAVIOUR
FIRSTMEM LA    R3,DIRENTS          POINT TO FIRST ENTRY
         SR    R4,R4               FIRST ENTRY IS NUMBER ZERO
DIRHEAD  STM   R3,R4,TOPMEMAD      SAVE TOP MEMBER ENTRY DETAILS
         NI    POFLAG,255-PFREV    RESET MEMBER PROCESSED FLAG
         MVI   HDCOLOR,X'05'       CLEAR SCREEN TO TURQUOISE BLANKS
         L     R15,=A(REVHEAD)     POINT TO HEADING ROUTINE
         BASR  R14,R15             INITIALISE FIRST TWO SCREEN LINES
         OI    STATUS10,$10CAP     SET CAPS ON
         L     R2,SCREENBF         POINT TO THE PRIMARY BUFFER
         A     R2,SCRNCOLS         POINT TO THE SECOND PRIMARY LINE
         LR    R14,R2
         LA    R0,12
         SLR   R14,R0              BACK UP TWELVE BYTES
         LA    R1,1                COUNT **END**
         A     R1,MEMBRCNT         GET LIST ENTRY COUNT IN BINARY
         CVD   R1,DOUBLE           GET LIST ENTRY COUNT IN DECIMAL
         LA    R1,11(,R14)         POINT TO LAST DIGIT
         MVC   4(8,R14),ED7DASHP   LOAD EDIT MASK
         EDMK  4(8,R14),DOUBLE+4   SHOW UP TO 9999999 ENTRIES CORRECTLY
         LR    R14,R1
         SLR   R14,R0              BACK UP TWELVE BYTES BEFORE NUMBER
         LA    R1,1
         A     R1,TOPMEMNO         GET CURRENT ROW NUMBER IN BINARY
         CVD   R1,DOUBLE           GET CURRENT ROW NUMBER IN DECIMAL
         LA    R1,7(,R14)          POINT TO LAST DIGIT
         MVC   8(4,R14),=X'40968640'    C' OF '
         MVC   0(8,R14),ED7DASHP   LOAD EDIT MASK
         EDMK  0(8,R14),DOUBLE+4   SHOW UP TO ROW 9999999 CORRECTLY
         SLR   R1,R0               BACK UP TWELVE BYTES BEFORE NUMBER
         MVC   7(5,R1),=X'40D996A640'   C' ROW '
**       LA    R0,26
**       SLR   R2,R0               BACK UP TWENTY-SIX BYTES
**       MVC   0(26,R2),DIRMEMCT   SHOW MEMBER COUNT AND VOLUME
**       ALR   R2,R0               POINT TO THE SECOND SCREEN LINE
         A     R2,SCRNCOLS         POINT TO THE THIRD PRIMARY LINE
         LR    R1,R2               POINT TO THE THIRD PRIMARY LINE
         A     R1,SCREENSZ         POINT TO THE THIRD SHADOW LINE
         MVI   0(R2),FLDOUTHI      COLUMN HEADINGS IN HIGH INTENSITY
         MVI   1(R1),X'06'         COLUMN HEADINGS IN YELLOW
         MVC   2(78,R1),1(R1)
         MVC   4(4,R2),NAMENAME    LABEL THE MEMBER NAME COLUMN
         USING POFMTSPF,R1
         MVC   POF_NAME,POTRGRHD   SHOW SORT TRIGGERS WITH UNDERSCORES
         TM    DS1RECFM,DCBRECU    IS IT UNDEFINED RECORD FORMAT?
         BO    POHDRRFU            YES, IT MIGHT BE A LOAD LIBRARY
         MVC   POF_TTR,POTRGRHD    SHOW SORT TRIGGERS WITH UNDERSCORES
         MVC   POF_VVMM,POTRGRHD
         MVC   POF_DATE,POTRGRHD
         MVC   POF_SPDT,POTRGRHD
         MVC   POF_TIME,POTRGRHD
         MVC   POF_SIZE+1(5),POTRGRHD
         MVC   POF_USER(7),POTRGRHD
         DROP  R1                  POFMTSPF
         USING POFMTSPF,R2
         MVC   POF_TTR(SPFHDLEN),SPFHDR    LABEL THE SPF STATS COLUMNS
         AIF   (NOT &ENVZV2).GENHEAD
         TM    STATUS15,$15GEN     SHOWING MEMBER GENERATIONS?
         BZ    GENHDGOK            NO
         MVC   POF_CREA+1(7),=C'GEN-NUM'
         MVC   POF_INIT+2(4),POF_INIT+1
         MVC   POF_MOD+3(3),POF_MOD+2
GENHDGOK EQU   *
.GENHEAD ANOP
         ICM   R0,3,CONCTOPN       ANY CONCATENATED DIRECTORIES READ?
         BZ    PDSHDROK            NO
         MVC   POF_CNCT+1,=C'K+'   YES, MIGHT SHOW CONCATENATION
         B     PDSHDROK            NO, SO CANNOT BE A LOAD LIBRARY
         DROP  R2                  POFMTSPF
POHDRRFU MVC   14(RFUHDLEN,R2),RECFMUHD   LABEL THE PROGRAM COLUMNS
         MVC   13(8,R1),POTRGRHD   SHOW SORT TRIGGERS WITH UNDERSCORES
         MVC   23(6,R1),POTRGRHD
         MVC   30(6,R1),POTRGRHD
PDSHDROK A     R2,SCRNCOLS         POINT TO THE FOURTH SCREEN LINE
         L     R1,SCRNLNES         GET NUMBER OF LINES ON SCREEN
         SH    R1,=H'3'            LESS THREE LINES FOR HEADINGS
         XC    SELMEMNM,SELMEMNM   CLEAR MEMBER NAME IN READINESS
         SR    R0,R0               CLEAR FOR INSERT CHARACTERS
         NI    POFLAG,255-PFSELCD  FLAG NOT PROCESSING SELECTION CODES
         L     R7,=A(DIRFRMAT)     POINT TO LINE FORMATTING ROUTINE
         MVC   BOTMEMNO,TOPMEMNO   RESET BOTTOM ENTRY NUMBER
LODMEMNM CLC   LASTNAME(14),PO_MEM END OF MEMBER LIST?
         BNER  R7                  NO, FORMAT A MEMBER DIRECTORY ENTRY
         DROP  R3                  PO_SECT
         MVI   0(R2),FLDOUTHI      HIGH INTENSITY
         LR    R0,R2               POINT TO PRIMARY BUFFER LINE
         S     R0,SCREENBF         GET OFFSET INTO SCREEN
         L     R1,SCREENSZ         GET SIZE OF SCREEN
         SR    R1,R0               GET SIZE OF THE REST OF SCREEN
         A     R0,SHADOWBF         POINT TO SHADOW BUFFER LINE
         LA    R15,X'06'           GET INTERNAL CODE FOR YELLOW
         SLL   R15,24              SET AS PAD AND ZERO SOURCE LENGTH
         MVCL  R0,R14              SET REST OF SCREEN TO YELLOW
         MVC   3(7,R2),EODIRFLG    INDICATE END OF DIRECTORY ENTRIES
         TM    DS1RECFM,DCBRECU    IS IT UNDEFINED RECORD FORMAT?
         BNO   SPFDEND             NO, SO CANNOT BE A LOAD LIBRARY
         ICM   R1,15,TOTPGMSZ      GET TOTAL OF REAL LOAD MODULE SIZES
         BZ    ZEROSIZE            ZERO SO LEAVE IT BLANK
         LA    R0,1023
         ALR   R1,R0               ROUND UP TO NEXT KILOBYTE
         SRL   R1,10               DIVIDE BY 1024
         CVD   R1,DOUBLE
         MVC   11(10,R2),ED9
         ED    11(10,R2),DOUBLE+3
         MVI   21(R2),C'K'         DENOTE KILOBYTES
         UNPK  23(7,R2),TOTPGMSZ+1 SHOW SIZE IN HEX
         TR    23(6,R2),POHEX-240
         MVI   29(R2),C' '         ERASE RUBBISH
         ICM   R0,15,EXTPGMSZ      GET PGM SIZE TOTAL WITH RMODE=ANY
         BZ    ZEROSIZE            ZERO SO LEAVE IT BLANK
         L     R1,TOTPGMSZ         GET TOTAL OF REAL LOAD MODULE SIZES
         SR    R1,R0               GET PGM SIZE TOTAL WITH RMODE=24
         LA    R0,1023
         ALR   R1,R0               ROUND UP TO NEXT KILOBYTE
         SRL   R1,10               DIVIDE BY 1024
         CVD   R1,DOUBLE
         MVC   36(6,R2),ED5
         ED    36(6,R2),DOUBLE+5
         MVC   42(6,R2),=CL6'K:R=24'
ZEROSIZE ICM   R0,3,ARLRTRVD       ANY CONCATENATED JFCBS FETCHED?
         BNZ   DSPLYDIR            YES, SUPPRESS DSCB DETAILS
         UNPK  30(7,R2),DS1LSTAR(4)
         TR    30(6,R2),POHEX-240
         MVI   36(R2),C' '         ERASE RUBBISH
         TM    DS1DSIND,DS1IND02   IS THE DATA SET MODIFIED BIT ON?
         BZ    OKMODBIT            NO, DISPLAY IS CORRECT
         MVC   49(8,R2),MODIFIED   YES, INDICATE THIS
OKMODBIT TM    DS1SMSFG,DS1PDSE    IS MEMBER LIST FOR A PDSE?
         BZ    PDSEUOK             NO
         MVC   59(4,R2),=C'PDSE'   YES, FLAG THIS
         B     DSPLYDIR            ASSUME PDSE CAN'T BE UNMOVEABLE
PDSEUOK  TM    DS1DSORG,DS1DSGU    IS THE DATA SET UNMOVEABLE?
         BZ    DSPLYDIR            NO, DISPLAY IS CORRECT
         MVC   59(10,R2),UNMOVABL  YES, INDICATE THIS
         B     DSPLYDIR
         USING POFMTSPF,R2
SPFDEND  TM    STATUS15,$153PT5    OPTION 3.5 MEMBER LIST DISPLAY?
         BO    ZEROEDIT            YES, DO NOT REPORT TOTAL LINES
         ICM   R1,15,TOTSPFSZ      GET TOTAL OF REAL SPF EDIT LINES
         BZ    ZEROEDIT            ZERO SO LEAVE IT BLANK
         CVD   R1,DOUBLE
         MVC   POF_SIZE-4(10),ED9
         ED    POF_SIZE-4(10),DOUBLE+3
ZEROEDIT ICM   R0,3,ARLRTRVD       ANY CONCATENATED JFCBS FETCHED?
         BNZ   DSPLYDIR            YES, SUPPRESS DSCB DETAILS
         UNPK  POF_TTR(7),DS1LSTAR(4)
         TR    POF_TTR,POHEX-240
         MVI   POF_TTR+6,C' '      ERASE RUBBISH
         SR    R4,R4               DISPLAY CREATION DATE
         IC    R4,DS1CREDT         GET THE CREATION YEAR IN BINARY
         CLI   DS1CREDT,70         CREATED BEFORE 1971?
         BH    *+8                 NO, GOOD
         LA    R4,100(,R4)         YES, MUST BE WRONG CENTURY
         LA    R4,1900(,R4)        ADD ORIGIN FOR 1900-2155 SUPPORT
         CVD   R4,DOUBLE           LAST 2 YEAR DIGITS OVERWRITTEN LATER
         UNPK  POF_CREA-2(4),DOUBLE     DISPLAY 4-DIGIT CREATION YEAR
         L     R0,DOUBLE+4         GET THE DECIMAL YEAR
         SRL   R0,4                SHIFT OUT SIGN
         SLL   R0,16               PUT INTO TOP HALFWORD
         ICM   R4,3,DS1CREDT+1     GET BINARY CREATION JULIAN DAY
         CVD   R4,DOUBLE
         L     R4,DOUBLE+4         GET DECIMAL CREATION JULIAN DAY
         OR    R4,R0               GET YYYYDDD+
         BAS   R14,SPFDATE         CONVERT TO YY-MM-DD
         MVC   POF_CREA,DOUBLE     DISPLAY CREATION YYYY-MM-DD
         SR    R4,R4
         ICM   R4,3,DS1DSSN+4      ASM2 OR DMS UPDATE DATE?
         BNP   NOTASM2             NO
         CH    R4,=H'366'          ASM2 OR DMS UPDATE DATE?
         BH    NOTASM2             NO
         CVD   R4,DOUBLE
         L     R4,DOUBLE+4         GET DECIMAL UPDATE JULIAN DAY
         SR    R0,R0               DISPLAY ASM2-MAINTAINED UPDATE DATE
         IC    R0,DS1DSSN+3        GET THE UPDATE YEAR IN BINARY
         CVD   R0,DOUBLE
         L     R0,DOUBLE+4         GET THE DECIMAL YEAR
         SRL   R0,4                SHIFT OUT SIGN
         SLL   R0,16               PUT INTO TOP HALFWORD
         OR    R4,R0               GET 00YYDDD+
         BAS   R14,SPFDATE         CONVERT TO YY-MM-DD
         MVC   POF_DATE,DOUBLE     DISPLAY UPDATE YY-MM-DD
         B     SHOWOSCD            SHOW SYSCODE OR ASM2/DMS UPDATE JOB
NOTASM2  MVI   38(R2),C'_'         INDICATE NEXT DATUM IS RELATED
         MVC   POF_DATE(6),DS1DSSN SHOW CREATION VOLUME SERIAL
         TR    POF_DATE(6),PERIODS HANDLE UNDISPLAYABLE CHARACTERS
*                                  SHOW CREATION SYSTEM/COMPONENT
SHOWOSCD MVC   POF_MOD+1(13),DS1SYSCD
         TR    POF_MOD+1(13),PERIODS
         TM    DS1DSIND,DS1IND02   IS THE DATA SET MODIFIED BIT ON?
         BZ    DONENDST            NO, DISPLAY IS CORRECT
         MVC   POF_TIME-1(3),MODIFIED
DONENDST TM    DS1SMSFG,DS1PDSE    IS MEMBER LIST FOR A PDSE?
         BZ    DSPLYDIR            NO, DONE **END** STATISTICS
         MVC   POF_TIME+4(4),=C'PDSE'
         DROP  R2                  POFMTSPF
DSPLYDIR L     R15,=A(DIRVBAR)     POINT TO BAR DISPLAY ROUTINE
         BASR  R14,R15             SHOW VISIBLE VERTICAL WINDOW BAR
DIRDSPLY BAS   R14,POSHOWNM        PUT DIRECTORY NAME INTO HEADING
         TM    STATUS10,$10CDL     OUTPUT ONLY?  PRE-OFFLOAD MESSAGE?
         BO    OFFLDMSG            YES, SCREEN REPAINTED SO GO DO WORK
         MVC   COMPON,@PDSLBL      FLAG COMPONENT FOR HELP
         MVC   REVHELP,REVHP00     FLAG HELP PANEL TO ISPF
         SR    R3,R3               NO ENTRY UNDER CONSIDERATION YET
         ST    R3,CURMEMAD         CLEAR SELECTED ENTRY ADDRESS
         L     R15,=A(REVCOMM)     NO PARAMETER LIST PASSED
         BASR  R14,R15             DISPLAY SCREEN AND RECEIVE INPUT
         MVC   POTOPOLD,TOPMEMAD   SAVE PRE-SCROLL TOP MEMBER ADDRESS
         SPACE
*  AS FROM R45.2, WHEN RFE OPTION '3.5' IS ACTIVE, THE FIRST PHASE
*  OF TERMINAL INPUT PROCESSING IS TO MERGE OVERTYPED MEMBER STATISTICS
*  INTO (A) THE IN-CORE MEMBER ATTRIBUTES, AND (B) THE DASD DIRECTORY
*  ENTRY.  AFTER THAT, PRIMARY COMMANDS AND EXPLICIT MEMBER SELECTION
*  CODES ARE PROCESSED AS PER USUAL.
         TM    STATUS15,$153PT5    OPTION 3.5 MEMBER LIST DISPLAY?
         BNO   DIRMRGEX            NO, SKIP THIS PHASE
         LA    R2,3
         MH    R2,SCRNCOLS+2
         AL    R2,SCREENBF         POINT TO FOURTH SCREEN LINE
         L     R3,TOPMEMAD         POINT TO TOP MEMBER'S ENTRY
         SPACE
         USING POFMTSPF,R2
         USING PO_SECT,R3
DIRMRGLN C     R2,SHADOWBF         GONE PAST END OF SCREEN?
         BNL   DIRMRGEX            YES, WHOLE SCREEN NOW MERGED
         C     R3,LSTMEMAD         REACHED END OF DIRECTORY?
         BNL   DIRMRGEX            YES, WHOLE SCREEN NOW MERGED
         NI    POFLG2,255-P2STAT   RESET UPDATE-REQUIRED FLAG
         TM    PO_FLG,$POSPF       DOES MEMBER HAVE SPFD STATISTICS?
         BNO   DIRMRGNX            NO, THIS MEMBER NOW PROCESSED
         ICM   R4,15,PO_PTR        POINT TO EXTENSION
         USING PX_SECT,R4
         L     R6,=A(TABNUMER)     POINT TO TRANSLATE TABLE
         LR    R0,R2               COPY SCREEN LINE ADDRESS
         TRT   POF_VVMM(2),0(R6)   IS VV NUMERIC?
         LR    R2,R0               RESTORE SCREEN LINE ADDRESS
         BNZ   DIRMRGVX            NO
         PACK  DOUBLE,POF_VVMM(2)  YES
         CVB   R1,DOUBLE
         CLM   R1,1,PX_VER         DIFFERENT VERSION?
         BE    DIRMRGVX            NO, VERSION IS UNCHANGED
         STC   R1,PX_VER           YES, SAVE IT
         OI    POFLG2,P2STAT       FLAG UPDATE NOW REQUIRED
DIRMRGVX EQU   *                   VERSION PROCESSED
         TRT   POF_VVMM+3(2),0(R6) IS MM NUMERIC?
         LR    R2,R0               RESTORE SCREEN LINE ADDRESS
         BNZ   DIRMRGLX            NO
         PACK  DOUBLE,POF_VVMM+3(2)
         CVB   R0,DOUBLE
         CLM   R0,1,PX_LVL         DIFFERENT LEVEL?
         BE    DIRMRGLX            NO, LEVEL IS UNCHANGED
         STC   R0,PX_LVL           YES, SAVE IT
         OI    POFLG2,P2STAT       FLAG UPDATE NOW REQUIRED
DIRMRGLX EQU   *                   LEVEL PROCESSED
         CLC   POF_USER,PDBLANKS   ANY USER ID PRESENT?
         BNH   DIRMRGUX            NO
DIRMRGUL CLI   POF_USER,C' '       LEADING BLANK?
         BH    DIRMRGUS            NO
         MVC   POF_USER(7),POF_USER+1
         MVI   POF_USER+7,C' '     YES, SHUFFLE ONE TO THE LEFT
         B     DIRMRGUL            GO CHECK AGAIN
DIRMRGUS L     R6,=A(KAPS)         POINT TO UPPER CASE TRANSLATE TABLE
         TR    POF_USER,0(R6)      MAKE USER ID UPPER CASE
         CLC   POF_USER,PX_USER    DIFFERENT USER?
         BE    DIRMRGUX            NO, USER IS UNCHANGED
         MVC   PX_USER,POF_USER    YES, SAVE IT
         OI    POFLG2,P2STAT       FLAG UPDATE NOW REQUIRED
DIRMRGUX EQU   *                   USER PROCESSED
         TM    POFLG2,P2STAT       ANY NEED TO UPDATE THIS MEMBER?
         BNO   DIRMRGNX            NO, THIS MEMBER NOW PROCESSED
         BO    DELDOPDS            YES, GO DO IT
DIRMRGNX EQU   *                   LINE PROCESSED - LOOK AT NEXT LINE
         A     R2,SCRNCOLS         POINT TO NEXT SCREEN LINE
         LA    R3,PO_NXT           POINT TO NEXT MEMBER ENTRY
         B     DIRMRGLN            GO PROCESS NEXT LINE
         DROP  R2,R3,R4            POFMTSPF, PO_SECT, PX_SECT
DIRMRGEX EQU   *                   OVERTYPED STATS MERGE COMPLETE
         SPACE
*  THE 3270 DATA STREAM NO LONGER HAS TO BE INTERPRETED HERE BECAUSE
*  REVCOMM WILL SUPPLY AN 'S' SELECTION CODE IMPLIED BY THE CURSOR
*  LOCATION IF APPROPRIATE, AND WILL ALSO STRIP OFF ANY NON-PRIMARY
*  INPUT FIELDS.  FURTHER, PRIMARY INPUT HAS HAD ANY PFK COMMAND
*  PREFIXING AND COMMAND STRING PARSING PERFORMED BY REVCOMM.
*  IMPLICIT AND EXPLICIT SELECTION CODES ARE STORED DIRECTLY IN REVBUF.
         TM    OPD0+6,PRESENT      ANY SUBCOMMAND REQUESTED?
         BNO   SELCDCHK            NO, GO CHECK FOR SELECTION CODES
**                                 UPPERCASING PERFORMED BY REVCOMM
**       L     R1,=A(KAPS)         YES, POINT TO TRANSLATE TABLE
**       TR    CMDAREA,0(R1)       UPPER CASE ALL PRIMARY INPUT
         L     R1,OPD0             POINT TO SUBCOMMAND NAME
         TM    STATUS13,$13RFE     RUNNING UNDER RFE MENU SYSTEM?
         BNO   DIRRFEOK            NO
         CLI   0(R1),C'='          JUMPING TO OTHER MENU ITEM?
         BE    DIREXIT             YES, GO DO THAT
DIRRFEOK L     R15,=A(DIRCMDTB)    POINT TO SUBCOMMAND TABLE
         LH    R5,OPD0+4           GET SUBCOMMAND LENGTH CODE PLUS 1
         LA    R0,7
         CLR   R5,R0               LARGER THAN MAXIMUM?
         BNH   DIRCMDLP            NO
         LR    R5,R0               YES, REDUCE TO MAXIMUM
DIRCMDLP EX    R5,POCMDTST         FOUND THE SUBCOMMAND?
         BL    NOTPOCMD            NO, HANDLE NON-COMMAND PRIMARY INPUT
         BE    8(,R15)             YES, PERFORM IT
         LA    R15,12(,R15)        NOT YET, POINT TO NEXT ENTRY
         B     DIRCMDLP            CONTINUE SUBCOMMAND TABLE SCAN
POCMDTST CLC   0(0,R1),0(R15)      <<< EXECUTED >>>
NOTPOCMD MVI   MSG,20              INVALID COMMAND
         B     DIRDSPLY            GO DISPLAY THIS MESSAGE
         SPACE
DIRRFRSH EQU   *
         AIF   (NOT &ENVZV2).PORFRSH
         TM    OPD1+6,PRESENT      ANY OPERANDS?
         BZ    RDYRFRSH            NO
         L     R1,OPD1             YES, POINT TO IT
         CLI   0(R1),C'N'          'NOGEN' REQUESTED?
         BE    DIRNOGEN            YES
         CLI   0(R1),C'G'          'GEN' REQUESTED?
         BNE   DIRBADOP            NO, INVALID OPERAND
DIREFGEN TM    POFLG2,P2MGEN       MEMBER GENERATIONS ALLOWED?
         BZ    DIRBADOP            NO, INVALID OPERAND
         TM    STATUS13,$13MSEL    HERE FOR MEMBER SELECTION?
         BO    DIRBADOP            YES, THEY CAN'T BE ALLOCATED
         OI    STATUS15,$15GEN     SET GENERATIONS FLAG
         B     RDYRFRSH
DIRNOGEN NI    STATUS15,255-$15GEN RESET GENERATIONS FLAG
.PORFRSH ANOP
RDYRFRSH L     R1,TOPMEMAD         POINT TO CURRENT TOP MEMBER
         MVC   $MEMBER(9),0(R1)    REMEMBER IT
         B     RFRSHOBT            PERFORM DIRECTORY REFRESH
         SPACE
PUTBCNTR ICM   R0,15,TAGCOUNT      ANY TAGGED MEMBERS?
         BNZ   FINDTAG             YES, FIND ONE
         MVC   MSG+2(L'ED5+L'BLKSREAD),ED5 + BLKSREAD
         L     R1,BLKREADS         GET READ (OR READ GET) COUNTER
         CVD   R1,DOUBLE
         ED    MSG+2(L'ED5),DOUBLE+5
         LA    R1,L'ED5+L'BLKSREAD
         STH   R1,MSG
DIRMSGLP CLI   MSG+2,C' '          LEADING BLANK?
         BNE   SAMEMEMS            NO, DISPLAY READY
         MVC   MSG+2(L'ED5+L'BLKSREAD),MSG+3
         BCTR  R1,0                DECREMENT LENGTH
         STH   R1,MSG
         CLC   =C'1 ',MSG+2        JUST ONE DIRECTORY BLOCK?
         BNE   DIRMSGLP            WELL, CHECK IF MORE EDITING NEEDED
         MVC   MSG+19(5),MSG+20    YES, MAKE SINGULAR
         BCTR  R1,0                DECREMENT LENGTH
         STH   R1,MSG
         B     SAMEMEMS            DISPLAY READY
         SPACE
DIRTOP   LA    R3,DIRENTS          POINT TO FIRST ENTRY
         SR    R4,R4               FIRST ENTRY IS NUMBER ZERO
         STM   R3,R4,TOPMEMAD      SAVE NEW TOP ENTRY DETAILS
         B     SELCDCHK            PROCESS OTHER INPUT
         SPACE
DIRBOTOM L     R3,LSTMEMAD         POINT TO **END**
         LA    R4,1
         A     R4,MEMBRCNT         GET ITS ENTRY NUMBER PLUS ONE
         LA    R3,$POSIZ(,R3)      POINT PAST IT
         L     R1,ISPFPAGE         GET NUMBER OF SCREEN DATA LINES
         B     DIRCLIMB                AND SCROLL UP ONE PAGE
         SPACE
DIRUPCMD L     R15,=A(DIRSCROL)    POINT TO ROUTINE ENTRY POINT
         BASR  R14,R15             DETERMINE SCROLL AMOUNT
         LTR   R15,R15             TEST RETURN CODE
         BM    DIRBADOP            INVALID OPERAND
         BP    DIRTOP              SCROLL AMOUNT IS MAXIMUM
         LM    R3,R4,TOPMEMAD      GET TOP ENTRY DETAILS
         LTR   R1,R1               ANYTHING TO SCROLL?
         BNP   FNDUPMEM            NO
DIRCLIMB LA    R2,DIRENTS          POINT TO FIRST ENTRY
UPONEMEM CR    R3,R2               POINTING TO BEFORE FIRST ENTRY?
         BNH   FNDUPMEM            YES, USE FIRST ENTRY
         SH    R3,POSIZE           NO, BACK UP ONE ENTRY
         BCTR  R4,0                DECREMENT ENTRY NUMBER
         BCT   R1,UPONEMEM
FNDUPMEM STM   R3,R4,TOPMEMAD      SAVE NEW TOP ENTRY DETAILS
         B     SELCDCHK            CHECK FOR SELECTION CODES
         SPACE
DIRDNCMD L     R15,=A(DIRSCROL)    POINT TO ROUTINE ENTRY POINT
         BASR  R14,R15             DETERMINE SCROLL AMOUNT
         LTR   R15,R15             TEST RETURN CODE
         BM    DIRBADOP            INVALID OPERAND
         BP    DIRBOTOM            SCROLL AMOUNT IS MAXIMUM
         LM    R3,R4,TOPMEMAD      GET TOP ENTRY DETAILS
         LTR   R1,R1               ANYTHING TO SCROLL?
         BNP   DOWNDONE            NO
DOWN1MEM C     R3,LSTMEMAD         POINTING TO LAST ENTRY?
         BNL   DOWNDONE            YES, USE LAST ENTRY
         LA    R3,$POSIZ(,R3)      NO, POINT TO NEXT ENTRY
         LA    R4,1(,R4)           INCREMENT ENTRY NUMBER
         BCT   R1,DOWN1MEM
DOWNDONE STM   R3,R4,TOPMEMAD      SAVE NEW TOP ENTRY DETAILS
         B     SELCDCHK            CHECK FOR SELECTION CODES
         SPACE
DIRCAN   TM    STATUS13,$13MSEL    HERE FOR MEMBER SELECTION?
         BO    DIREXIT             YES, CANCEL MEANS CANCEL SELECTION
         NI    STATUS,255-STPROF   TURN OFF PROFILE REWRITE FLAG
DIREXIT  MVI   STATUS3,0           RESET SORT STATUS
         TM    STATUS15,$15COPY    INVOKED TO COPY PDS MEMBERS?
         BNO   DIRCOPYX            NO
         ICM   R2,15,CUTWORK@      YES, ANY CUT WORK AREA TO FREE?
         BZ    DIRCOPYX            NO
         USING @CUTWORK,R2
         MVI   CLOSED,X'80'        CLOSE THE OUTPUT DCB
         CLOSE (CUTDW),MF=(E,CLOSED)
         LM    R0,R1,CUTBUFSZ      GET WRITE BUFFER DETAILS
         LTR   R1,R1               DOES IT EXIST?
         BZ    DIRCOPYZ            NO
         FREEMAIN RU,LV=(0),A=(1)  YES, SO FREE IT
         DROP  R2                  @CUTWORK
DIRCOPYZ LR    R1,R2               POINT TO CUT WORK AREA
         LA    R0,$CUTSIZE         GET ITS SIZE
         FREEMAIN R,LV=(0),A=(1)   FREE IT
         XC    CUTWORK@,CUTWORK@   CLEAR SAVED ADDRESS
DIRCOPYX NI    STATUS,255-STOPEN   RESET OPEN FLAG
         TM    DCBOFLGS-IHADCB+DYNDCBW,X'10'
         BZ    DIREXITX            MEMBER DATA DCB NOT OPEN
         MVI   CLOSED,X'80'        CLOSE BPAM DCB
         CLOSE (DYNDCBW),MF=(E,CLOSED)
DIREXITX BAS   R4,PODELFRE         FREE THE DELETE CHAIN
         LA    R0,16               GET "DIV" ENTRY CODE (FREEMAIN)
         L     R15,=A(REVDIV)      LOAD REVDIV ENTRY POINT
         BASR  R14,R15             CALL IT TO FREE ANY "DIV" STORAGE
         LM    R0,R1,FREEMRGS      PREPARE FOR FREEMAIN
         L     R13,4(,R13)         POINT TO CALLER'S SAVE AREA
         OI    11(R13),X'01'       INVALIDATE FORWARD POINTER
         FREEMAIN R,LV=(0),A=(1)   FREE @PDSAREA
         NI    STATUS,255-STPODIR  RESET MEMBER LIST FLAG
         AIF   (NOT &ENVZV2).GENX
         NI    STATUS15,255-$15GEN RESET MEMBER GENERATIONS FLAG
.GENX    ANOP
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         LH    R15,RC              GET THE RETURN CODE
         TM    STATUS13,$13COMP    PROCESSING A COMPRESS REQUEST?
         BOR   R14                 YES, RETURN WITH SUCCESS INDICATOR
         SR    R15,R15             NO
         STH   R15,RC              OVERWRITE PREVIOUS NON-ZERO RC
         TM    STATUS,STABEND      DCB ABEND TERMINATED PROCEEDINGS?
         BNOR  R14                 NO, RETURN
         LA    R15,12              YES, SET ERROR RETURN CODE
         NI    STATUS,255-STABEND  RESET DCB ABEND FLAG
         STH   R15,RC              SAVE RETURN CODE
         BR    R14                 RETURN
         SPACE
DIRMISOP MVI   MSG,35              MISSING OPERAND
         B     DIRDSPLY            GO DISPLAY THIS MESSAGE
         SPACE
DIRLOC   TM    OPD1+6,PRESENT      ANY OPERAND SPECIFIED?
         BNO   DIRMISOP            NO, REQUIRED OPERAND MISSING
         XC    SELMEMNM,SELMEMNM   RESET SELECTION AREA
         L     R1,OPD1             POINT TO IT
         MVC   SELMEMNM(8),0(R1)   COPY IT
         B     FINDMEM             LOCATE TO THAT MEMBER IN THE LIST
         SPACE
************************************************************
*                                                          *
*         SORT DIRECTORY ENTRIES                           *
*                                                          *
************************************************************
         SPACE
DIRSORT  TM    OPD1+6,PRESENT      ANY OPERAND SPECIFIED?
         BNO   DIRMISOP            NO, SO SORT REQUEST TYPE UNKNOWN
         L     R1,OPD1             YES, POINT TO IT
         CLC   =C'SS',0(R1)        SSI?
         BE    SORTSSI             YES
         CLI   0(R1),C'C'          CHANGED?
         BE    SORTDATE            YES
         CLI   0(R1),C'D'          DATE?
         BE    SORTDATE            YES
         CLI   0(R1),C'I'          ID?
         BE    SORTUSER            YES
         CLI   0(R1),C'N'          NAME?
         BE    SORTNAME            YES
         CLI   0(R1),C'S'          SIZE?
         BE    SORTSIZE            YES
         CLI   0(R1),C'T'          TTR?
         BE    SORTTTR             YES
         CLI   0(R1),C'U'          USERID?
         BE    SORTUSER            YES
         CLI   0(R1),C'V'          VERSION?
         BE    SORTSSI             YES
DIRBADOP MVI   MSG,34              INVALID OPERAND
         CLI   REPLY,ENTERAID      ENTER AID PRESENT?
         BNE   DIRDSPLY            NO, WHOLE COMMAND NOT RECALLABLE
         L     R15,OPD1            YES, ONLY EVER FIRST OPERAND
         S     R15,OPD0            GET OPERAND OFFSET IN COMMAND STRING
         BNP   DIRDSPLY            JUST IN CASE
         LA    R15,1(,R15)         CONVERT OFFSET TO POSITION
         ST    R15,REVPOS          SET CURSOR POSITION
         OI    STATUS14,$14RCL     REDISPLAY THE COMMAND
         B     DIRDSPLY            GO DISPLAY THIS MESSAGE
DIR2MANY MVI   MSG,51              TOO MANY OPERANDS
         B     DIRDSPLY            GO DISPLAY THIS MESSAGE
         SPACE
*
*         ACQUIRE STORAGE FOR MERGE SORT
*
DIRMERGI L     R0,LSTMEMAD         POINT PAST ENTRIES TO SORT
         LA    R1,DIRENTS          POINT TO ENTRIES TO SORT
         ST    R1,CALLPARM         SAVE START ADDRESS FOR REVMERGE
         ST    R0,CALLPARM+4       SAVE END ADDRESS FOR REVMERGE
         NI    STATUS13,255-$13DESC
         SR    R0,R1               GET THE ARRAY SIZE
         ST    R0,DOUBLE           SAVE SIZE FOR FREEMAIN
         GETMAIN RC,LV=(0),LOC=(31,64)
         LTR   R15,R15             STORAGE ACQUIRED?
         BNZR  R2                  NO, RETURN TO CALLER
         ST    R1,DOUBLE+4         YES, SAVE ADDRESS FOR FREEMAIN
         ST    R1,CALLPARM+8       SAVE START ADDRESS FOR REVMERGE
         A     R1,DOUBLE           POINT PAST NEW STORAGE
         ST    R1,CALLPARM+12      SAVE END ADDRESS FOR REVMERGE
         LA    R0,$POSIZ           GET DIRECTORY ENTRY SIZE
         ST    R0,CALLSAVE+16      SAVE IT FOR REVMERGE
         BR    R2                  RETURN TO CALLER
         SPACE
*
*         EXECUTE THE MERGE SORT
*
DIRMERGX LM    R0,R1,DOUBLE        PRESERVE FREEMAIN VALUES
         L     R15,=V(REVMERGE)    POINT TO SORT ROUTINE
         BASR  R14,R15             PERFORM SORT
         FREEMAIN RU,LV=(0),A=(1)  FREE THE EXTRA ARRAY STORAGE
         BR    R2                  RETURN TO CALLER
         SPACE
*
*         SORT BY DATE
*
SORTDATE CLC   MEMBRCNT,=F'10'     FEWER THAN TEN MEMBERS?
         BL    NOTTTRED            YES, AVOID THE GETMAIN/FREEMAIN
         BAS   R2,DIRMERGI         SET UP FOR MERGE SORT
         LTR   R15,R15             STORAGE AVAILABLE?
         BNZ   NOTTTRED            NO, JUST USE BUBBLE SORT
         LA    R0,PO_CON-PO_SECT   GET SORT KEY OFFSET
         LA    R1,5                GET SORT KEY SIZE (REAL AFTER ALIAS)
         STM   R0,R1,CALLSAVE+20   SAVE FOR REVMERGE
         OI    STATUS13,$13DESC    REQUEST DESCENDING ORDER
         BAS   R2,DIRMERGX         GO EXECUTE THE MERGE SORT
NOTTTRED MVC   DOUBLE(4),LSTMEMAD  LOAD FIRST BUBBLE PASS LIMIT
BUBLDATE MVI   STATUS3,$3DATE      RESET SORT SWAP FLAG
         LA    R2,DIRENTS          POINT TO FIRST ENTRY
         C     R2,DOUBLE           ANY MEMBERS IN THIS PDS?
         BE    NULLSORT            NO
         MVC   DOUBLE+4(4),DOUBLE  UPDATE END OF BUBBLE PASS LIMIT
NEXTDATE LR    R1,R2
         LA    R2,$POSIZ(,R1)      POINT TO SECOND ENTRY FOR COMPARE
         C     R2,DOUBLE+4         REACHED END OF PASS?
         BE    FINALDAT            YES, CHECK FOR FINAL PASS
         AIF   (NOT &ENVZV2).GENDATE
         TM    STATUS15,$15GEN     SHOWING MEMBER GENERATIONS?
         BO    HAVEDATE            YES, FORGET LAST STCK BYTE
.GENDATE ANOP
         TM    PO_FLG-PO_SECT(R2),$POSPF
         BNO   NEXTDATE            NO STATS SO DO NOT PROMOTE IT
         TM    PO_FLG-PO_SECT(R1),$POSPF
         BNO   SWAPDATE            NO STATS SO DEMOTE IT
HAVEDATE ICM   R4,15,PO_PTR-PO_SECT(R2)
         ICM   R3,15,PO_PTR-PO_SECT(R1)
         CLC   PX_CHA-PX_SECT(7,R3),PX_CHA-PX_SECT(R4)
         BH    NEXTDATE            THESE TWO ARE IN ORDER
         BL    SWAPDATE            THESE TWO ARE OUT OF ORDER
*                                  ASSUME THAT PO_CON-PO_SECT = 8
         CLC   8(5,R1),8(R2)       COMPARE CONCAT#, TTR AND ALIAS FLAG
         BNL   NEXTDATE            THESE TWO ARE IN ORDER
*        B     SWAPDATE            ASSUME LATER MEMBER HAS HIGHER TTR
SWAPDATE BAS   R14,SWAPMEMS        OUT OF ORDER SO BUBBLE DOWN ONE
         B     NEXTDATE            PROCESS NEXT ENTRY
FINALDAT TM    STATUS3,$3BUBL      ANY MEMBERS BUBBLED IN THIS PASS?
         BO    BUBLDATE            YES, DO ANOTHER PASS
         MVI   MSG,61              SORTED BY MODIFICATION DATE/TIME
         B     FINDMEM             RESHOW FROM REVIEWED MEMBER OR TOP
         SPACE
*
*         SORT BY NAME
*
SORTNAME MVI   STATUS3,0           SORT INTO NAME COLLATING SEQUENCE
         AIF   (NOT &ENVZV2).NCOND1
         BAS   R14,CONDNAME        PRE-CONDITION FOR NAME SORT
.NCOND1  ANOP
         CLC   MEMBRCNT,=F'10'     FEWER THAN TEN MEMBERS?
         BL    SORTEDNM            YES, AVOID THE GETMAIN/FREEMAIN
         BAS   R2,DIRMERGI         SET UP FOR MERGE SORT
         LTR   R15,R15             STORAGE AVAILABLE?
         BNZ   SORTEDNM            NO, JUST USE BUBBLE SORT
         LA    R0,PO_MEM-PO_SECT   GET SORT KEY OFFSET
         LA    R1,12               GET SORT KEY SIZE
         STM   R0,R1,CALLSAVE+20   SAVE FOR REVMERGE
         BAS   R2,DIRMERGX         GO EXECUTE THE MERGE SORT
         B     EXITNAME            SHOULD BE ALL SORTED
SORTEDNM MVC   DOUBLE(4),LSTMEMAD  LOAD FIRST BUBBLE PASS LIMIT
         LA    R2,DIRENTS          POINT TO FIRST ENTRY
         C     R2,DOUBLE           ANY MEMBERS IN THIS PDS?
         BE    NULLSORT            NO
         ST    R2,DOUBLE+4         SAVE ADDRESS OF FIRST ENTRY TO SORT
BUBLNAME MVI   STATUS3,0           RESET SORT SWAP FLAG
         MVC   OPEND,DOUBLE+4      UPDATE START OF BUBBLE PASS LIMIT
         L     R2,OPEND            POINT TO FIRST ENTRY TO SORT
         MVC   DOUBLE+4(4),DOUBLE  UPDATE END OF BUBBLE PASS LIMIT
NEXTNAME LR    R1,R2
         LA    R2,$POSIZ(,R1)      POINT TO SECOND ENTRY FOR COMPARE
         C     R2,DOUBLE+4         REACHED END OF PASS?
         BE    FINALNAM            YES, CHECK FOR FINAL PASS
*                                  ASSUME THAT PO_MEM-PO_SECT = 0
         CLC   0(12,R1),0(R2)      COMPARE MEMBER NAMES (+ CONCAT NO.)
         BNH   NEXTNAME            THESE TWO ARE IN ORDER
         BAS   R14,SWAPMEMS        OUT OF ORDER SO BUBBLE DOWN ONE
         B     NEXTNAME            PROCESS NEXT ENTRY
FINALNAM TM    STATUS3,$3BUBL      ANY MEMBERS BUBBLED IN THIS PASS?
         BNO   EXITNAME            NO, EXIT FROM SORT BY NAME
         MVI   STATUS3,0           YES, RESET SORT SWAP FLAG
         L     R1,DOUBLE           POINT PAST ENTRIES TO SORT
         LA    R2,OPEND            POINT TO FIRST ENTRY TO SORT
         CR    R1,R2               BACKED UP TOO FAR?
         BNH   EXITNAME            YES, MUST BE ALL SORTED NOW
         SH    R1,POSIZE           POINT TO LAST UNSORTED ENTRY
BACKNAME LR    R2,R1
         SH    R1,POSIZE           POINT TO PREVIOUS ENTRY FOR COMPARE
         CLC   0(12,R1),0(R2)      COMPARE MEMBER NAMES (+ CONCAT NO.)
         BNH   BAKUPNAM            THESE TWO ARE IN ORDER
         BAS   R14,SWPBKMEM        OUT OF ORDER SO BUBBLE UP ONE
BAKUPNAM C     R1,OPEND            BACK TO START OF ENTRIES TO SORT?
         BH    BACKNAME            NO, PROCESS PREVIOUS ENTRY
         TM    STATUS3,$3BUBL      ANY MEMBERS BUBBLED IN THIS PASS?
         BO    BUBLNAME            YES, DO ANOTHER PASS
EXITNAME EQU   *                   SORT BY NAME COMPLETE
         AIF   (NOT &ENVZV2).NCOND2
         BAS   R14,CONDNAME        POST-CONDITION FOR NAME SORT
.NCOND2  ANOP
         ICM   R1,15,OPD0          POINT TO COMMAND
         BZ    FINDMEM             NONE, PREVIOUS MESSAGE POSSIBLE
         CLC   =C'SORT',0(R1)      CAME HERE FROM SORT COMMAND?
         BNE   FINDMEM             NO, LEAVE POSSIBLE PREVIOUS MESSAGE
         MVI   MSG,62              SORTED BY NAME
         B     FINDMEM             RESHOW FROM REVIEWED MEMBER OR TOP
         AIF   (NOT &ENVZV2).NCOND3
CONDNAME TM    STATUS15,$15GEN     SHOWING MEMBER GENERATIONS?
         BNOR  R14                 NO, RETURN WITHOUT ACTION
         LA    R2,DIRENTS          POINT TO FIRST ENTRY
         USING PO_SECT,R2
CONDNMLP C     R2,LSTMEMAD         POINTING TO LAST ENTRY?
         BNLR  R14                 YES, CONDITIONING COMPLETE
         XC    PO_TTR,LASTNAME     FLIP TTR BIT PATTERN
         LA    R2,$POSIZ(,R2)      POINT TO NEXT ENTRY
         B     CONDNMLP
         DROP  R2                  PO_SECT
.NCOND3  ANOP
         SPACE
*
*         SORT BY SIZE
*
SORTSIZE MVC   DOUBLE(4),LSTMEMAD  LOAD FIRST BUBBLE PASS LIMIT
BUBLSIZE MVI   STATUS3,$3SIZE      RESET SORT SWAP FLAG
         LA    R2,DIRENTS          POINT TO FIRST ENTRY
         C     R2,DOUBLE           ANY MEMBERS IN THIS PDS?
         BE    NULLSORT            NO
         MVC   DOUBLE+4(4),DOUBLE  UPDATE END OF BUBBLE PASS LIMIT
NEXTSIZE LR    R1,R2
         LA    R2,$POSIZ(,R1)      POINT TO SECOND ENTRY FOR COMPARE
         C     R2,DOUBLE+4         REACHED END OF PASS?
         BE    FINALSIZ            YES, CHECK FOR FINAL PASS
         TM    PO_FLG-PO_SECT(R2),$POSSI1
         BO    NEXTSIZE            NO SIZE SO DO NOT PROMOTE IT
         ICM   R4,15,PO_PTR-PO_SECT(R2)
         BZ    NEXTSIZE            NO SIZE SO DO NOT PROMOTE IT
         TM    PO_FLG-PO_SECT(R1),$POSSI1
         BO    SWAPSIZE            NO SIZE SO DEMOTE IT
         ICM   R3,15,PO_PTR-PO_SECT(R1)
         BZ    SWAPSIZE            NO SIZE SO DEMOTE IT
         TM    DS1RECFM,DCBRECU    IS IT UNDEFINED RECORD FORMAT?
         BO    PGMSIZE             YES, CHECK LOAD MODULE SIZES
         CLC   PX_SIZE-PX_SECT(4,R3),PX_SIZE-PX_SECT(R4)
         B     PGMSIZED            GO RESPOND TO THE RESULT
PGMSIZE  CLC   PX_STOR-PX_SECT(3,R3),PX_STOR-PX_SECT(R4)
PGMSIZED BNL   NEXTSIZE            THESE TWO ARE IN ORDER
SWAPSIZE BAS   R14,SWAPMEMS        OUT OF ORDER SO BUBBLE DOWN ONE
         B     NEXTSIZE            PROCESS NEXT ENTRY
FINALSIZ TM    STATUS3,$3BUBL      ANY MEMBERS BUBBLED IN THIS PASS?
         BO    BUBLSIZE            YES, DO ANOTHER PASS
         MVI   MSG,63              SORTED BY SIZE
         B     FINDMEM             RESHOW FROM REVIEWED MEMBER OR TOP
         SPACE
*
*         SORT BY TTR OR MLT
*
SORTTTR  CLC   MEMBRCNT,=F'10'     FEWER THAN TEN MEMBERS?
         BL    SRTEDTTR            YES, AVOID THE GETMAIN/FREEMAIN
         MVI   STATUS3,$3TTR       SORT INTO PHYSICAL LOCATION ORDER
         BAS   R2,DIRMERGI         SET UP FOR MERGE SORT
         LTR   R15,R15             STORAGE AVAILABLE?
         BNZ   SRTEDTTR            NO, JUST USE BUBBLE SORT
         LA    R0,PO_CON-PO_SECT   GET SORT KEY OFFSET
         LA    R1,5                GET SORT KEY SIZE (ALIAS AFTER REAL)
         STM   R0,R1,CALLSAVE+20   SAVE FOR REVMERGE
         BAS   R2,DIRMERGX         GO EXECUTE THE MERGE SORT
         B     EXITTTR             SHOULD BE ALL SORTED
SRTEDTTR MVC   DOUBLE(4),LSTMEMAD  LOAD FIRST BUBBLE PASS LIMIT
         LA    R2,DIRENTS          POINT TO FIRST ENTRY
         C     R2,DOUBLE           ANY MEMBERS IN THIS PDS?
         BE    NULLSORT            NO
         ST    R2,DOUBLE+4         SAVE ADDRESS OF FIRST ENTRY TO SORT
BUBLTTR  MVI   STATUS3,$3TTR       RESET SORT SWAP FLAG
         MVC   OPEND,DOUBLE+4      UPDATE START OF BUBBLE PASS LIMIT
         L     R2,OPEND            POINT TO FIRST ENTRY TO SORT
         MVC   DOUBLE+4(4),DOUBLE  UPDATE END OF BUBBLE PASS LIMIT
NEXTTTR  LR    R1,R2
         LA    R2,$POSIZ(,R1)      POINT TO SECOND ENTRY FOR COMPARE
         C     R2,DOUBLE+4         REACHED END OF PASS?
         BE    FINALTTR            YES, CHECK FOR FINAL PASS
*                                  COMPARE CONCAT#, TTR AND ALIAS FLAG
         CLC   8(5,R1),PO_CON-PO_SECT(R2)
         BNH   NEXTTTR             THESE TWO ARE IN ORDER
         BAS   R14,SWAPMEMS        OUT OF ORDER SO BUBBLE DOWN ONE
         B     NEXTTTR             PROCESS NEXT ENTRY
FINALTTR TM    STATUS3,$3BUBL      ANY MEMBERS BUBBLED IN THIS PASS?
         BNO   EXITTTR             NO, EXIT FROM SORT BY TTR
         MVI   STATUS3,$3TTR       YES, RESET SORT SWAP FLAG
         L     R1,DOUBLE           POINT PAST ENTRIES TO SORT
         LA    R2,OPEND            POINT TO FIRST ENTRY TO SORT
         CR    R1,R2               BACKED UP TOO FAR?
         BNH   EXITTTR             YES, MUST BE ALL SORTED NOW
         SH    R1,POSIZE           POINT TO LAST UNSORTED ENTRY
BACKTTR  LR    R2,R1
         SH    R1,POSIZE           POINT TO PREVIOUS ENTRY FOR COMPARE
         CLC   8(5,R1),8(R2)       COMPARE CONCAT#, TTR AND ALIAS FLAG
         BNH   BAKUPTTR            THESE TWO ARE IN ORDER
         BAS   R14,SWPBKMEM        OUT OF ORDER SO BUBBLE UP ONE
BAKUPTTR C     R1,OPEND            BACK TO START OF ENTRIES TO SORT?
         BH    BACKTTR             NO, PROCESS PREVIOUS ENTRY
         TM    STATUS3,$3BUBL      ANY MEMBERS BUBBLED IN THIS PASS?
         BO    BUBLTTR             YES, DO ANOTHER PASS
EXITTTR  TM    STATUS13,$13COMP    COMPRESS REQUESTED?
         BO    CONDSAVE            YES, CREATE HOLD DATA SET
         TM    STATUS15,$15COPY+$15STAR
         BO    STARCOPY            GO COPY ALL MEMBERS
         TM    STATUS17,$17S34     HERE TO SCAN FOR SEARCH DATA?
         BO    POSEARCH            YES, GO DO IT
         MVI   MSG,65              SORTED BY TTR
         B     FINDMEM             RESHOW FROM REVIEWED MEMBER OR TOP
         SPACE
*
*         SORT BY USER ID
*
SORTUSER MVC   DOUBLE(4),LSTMEMAD  LOAD FIRST BUBBLE PASS LIMIT
BUBLUSER MVI   STATUS3,$3USER      RESET SORT MODE AND SWAP FLAGS
         LA    R2,DIRENTS          POINT TO FIRST ENTRY
         C     R2,DOUBLE           ANY MEMBERS IN THIS PDS?
         BE    NULLSORT            NO
         MVC   DOUBLE+4(4),DOUBLE  UPDATE END OF BUBBLE PASS LIMIT
NEXTUSER LR    R1,R2
         LA    R2,$POSIZ(,R1)      POINT TO SECOND ENTRY FOR COMPARE
         C     R2,DOUBLE+4         REACHED END OF PASS?
         BE    FINALUSR            YES, CHECK FOR FINAL PASS
         AIF   (NOT &ENVZV2).GENUSER
         TM    STATUS15,$15GEN     SHOWING MEMBER GENERATIONS?
         BO    HAVEUSER            YES
.GENUSER ANOP
         TM    PO_FLG-PO_SECT(R2),$POSPF
         BNO   NEXTUSER            NO STATS SO DO NOT PROMOTE IT
         TM    PO_FLG-PO_SECT(R1),$POSPF
         BNO   SWAPUSER            NO STATS SO DEMOTE IT
HAVEUSER ICM   R4,15,PO_PTR-PO_SECT(R2)
         ICM   R3,15,PO_PTR-PO_SECT(R1)
         CLC   PX_USER-PX_SECT(8,R3),PX_USER-PX_SECT(R4)
         BNH   NEXTUSER            THESE TWO ARE IN ORDER
SWAPUSER BAS   R14,SWAPMEMS        OUT OF ORDER SO BUBBLE DOWN ONE
         B     NEXTUSER            PROCESS NEXT ENTRY
FINALUSR TM    STATUS3,$3BUBL      ANY MEMBERS BUBBLED IN THIS PASS?
         BO    BUBLUSER            YES, DO ANOTHER PASS
         MVI   MSG,66              SORTED BY USERID
         B     FINDMEM             RESHOW FROM REVIEWED MEMBER OR TOP
         SPACE
*
*         SORT BY SSI
*
SORTSSI  MVC   DOUBLE(4),LSTMEMAD  LOAD FIRST BUBBLE PASS LIMIT
BUBLSSI  MVI   STATUS3,$3SSI       RESET SORT MODE AND SWAP FLAGS
         LA    R2,DIRENTS          POINT TO FIRST ENTRY
         C     R2,DOUBLE           ANY MEMBERS IN THIS PDS?
         BE    NULLSORT            NO
         MVC   DOUBLE+4(4),DOUBLE  UPDATE END OF BUBBLE PASS LIMIT
NEXTSSI  LR    R1,R2
         LA    R2,$POSIZ(,R1)      POINT TO SECOND ENTRY FOR COMPARE
         C     R2,DOUBLE+4         REACHED END OF PASS?
         BE    FINALSSI            YES, CHECK FOR FINAL PASS
         LA    R4,PO_PTR-PO_SECT-1(,R2)  POINT TO POTENTIAL SSI
         TM    PO_FLG-PO_SECT(R2),$POSSI1
         BO    SSIENTY1            NOW POINTING TO SSI
         ICM   R4,15,PO_PTR-PO_SECT(R2)
         BZ    NEXTSSI             NO USER DATA SO DO NOT PROMOTE IT
         TM    PO_FLG-PO_SECT(R2),$POSSI2+$POPGM
         BM    NEXTSSI             PROGRAM WITHOUT SSI
         BZ    SSIENTY1            HAVE NON-PROGRAM USER DATA
         LA    R4,PX_SSI-PX_SECT-1(,R4)
SSIENTY1 LA    R3,PO_PTR-PO_SECT-1(,R1)  POINT TO POTENTIAL SSI
         TM    PO_FLG-PO_SECT(R1),$POSSI1
         BO    SSIENTY2            NOW POINTING TO SSI
         ICM   R3,15,PO_PTR-PO_SECT(R1)
         BZ    SWAPSSI             NO USER DATA SO DEMOTE IT
         TM    PO_FLG-PO_SECT(R1),$POSSI2+$POPGM
         BM    SWAPSSI             PROGRAM WITHOUT SSI SO DEMOTE IT
         BZ    SSIENTY2            HAVE NON-PROGRAM USER DATA
         LA    R3,PX_SSI-PX_SECT-1(,R3)
SSIENTY2 CLC   1(4,R3),1(R4)       COMPARE FIRST 2 USER DATA HALFWORDS
         BNH   NEXTSSI             THESE TWO ARE IN ORDER
SWAPSSI  BAS   R14,SWAPMEMS        OUT OF ORDER SO BUBBLE DOWN ONE
         B     NEXTSSI             PROCESS NEXT ENTRY
FINALSSI TM    STATUS3,$3BUBL      ANY MEMBERS BUBBLED IN THIS PASS?
         BO    BUBLSSI             YES, DO ANOTHER PASS
         MVI   MSG,64              SORTED BY SSI/VV.MM
         B     FINDMEM             RESHOW FROM REVIEWED MEMBER OR TOP
         SPACE
*
*         HANDLE EMPTY PDS
*
NULLSORT MVI   MSG,60              NO ENTRIES TO SORT
         TM    STATUS17,$17P34+$17S34
         BNZ   DIREXIT             DO NOT PAUSE IF DATA SET SCAN
         TM    STATUS13,$13COMP    COMPRESS REQUESTED?
         BO    DIREXIT             YES, NO MEMBERS TO OFFLOAD
         B     SAMEMEMS            NO, GO SHOW THE MESSAGE
         SPACE
*
*         EXCHANGE THE POSITION OF TWO ENTRIES
*
SWAPMEMS TM    STATUS4,$4ATTN      ATTENTION INTERRUPT?
         BO    SORTATTN            YES, TERMINATE SORT
         MVC   CALLSAVE+16($POSIZ),0(R1)
         MVC   0($POSIZ,R1),0(R2)  HOPE 3*MVC IS FASTER THAN 3*XC
         MVC   0($POSIZ,R2),CALLSAVE+16
         OI    STATUS3,$3BUBL      INDICATE MOVEMENT IN THIS PASS
         ST    R2,DOUBLE           UPDATE END OF BUBBLE PASS LIMIT
         BR    R14                 RETURN TO BUBBLE SORT MAINLINE
SWPBKMEM TM    STATUS4,$4ATTN      ATTENTION INTERRUPT?
         BO    SORTATTN            YES, TERMINATE SORT
         MVC   CALLSAVE+16($POSIZ),0(R1)
         MVC   0($POSIZ,R1),0(R2)  HOPE 3*MVC IS FASTER THAN 3*XC
         MVC   0($POSIZ,R2),CALLSAVE+16
         OI    STATUS3,$3BUBL      INDICATE MOVEMENT IN THIS PASS
         ST    R2,DOUBLE+4         UPDATE START OF BUBBLE PASS LIMIT
         BR    R14                 RETURN TO BUBBLE SORT MAINLINE
SORTATTN MVI   MSG,59              INTERRUPT - SORT TERMINATED
         B     DIRTOP              ATTENTION HIT SO STOP SORTING
         SPACE
************************************************************
*                                                          *
*         FORMAT DIRECTORY NAME FOR TOP LINE               *
*                                                          *
************************************************************
         SPACE
POSHOWNM L     R2,SCREENBF         POINT TO PRIMARY/TEXT SCREEN BUFFER
         MVI   1(R2),C'-'          RE-INITIALIZE HEADING MESSAGE TEXT
         MVC   2(52,R2),1(R2)      SET MESSAGE AREA TO DASHES
         LA    R1,$DSNAME          POINT TO DATA SET NAME
         ICM   R0,3,CONCTOPN       ANY CONCATENATED DIRECTORIES READ?
         BZ    POSHOWDS            NO, SUPPLY DATA SET IN HEADING
         MVC   1(L'REVDDMSG,R2),REVDDMSG
         LA    R2,L'REVDDMSG(,R2)  POINT PAST DD-FLAGGING LABEL
         LA    R1,$DDNAML          POINT TO DATA DEFINITION NAME
POSHOWDS LH    R15,0(,R1)          GET NAME LENGTH
         EX    R15,GTPDSNAM        LOAD NAME INTO HEADING
         TR    1(44,R2),PERIODS    HANDLE BAD CODE POINTS IN NAME
         L     R1,SCREENBF         POINT TO PRIMARY/TEXT SCREEN BUFFER
         AR    R2,R15              POINT PAST NAME
         MVI   1(R2),C' '          SUPPLY BLANK AFTER DATA SET NAME
         ICM   R0,3,CONCTOPN       ANY CONCATENATED DIRECTORIES READ?
         BNZ   POSHOWDN            YES, HEADING NOW READY
         CLI   POVOLUME,C' '       KNOWN VOLUME SERIAL?
         BNH   POSHOWDN            NO, HEADING NOW READY
         MVC   2(2,R2),=X'9695'    C'ON'
         MVC   4(7,R2),POVOLUME-1  SHOW VOLOME SERIAL
         MVI   11(R2),C' '         SUPPLY BLANK AFTER VOLUME SERIAL
         TR    5(6,R2),PERIODS     HANDLE BAD CODE POINTS
POSHOWLP CLI   10(R2),C' '         TRAILING BLANK IN VOLUME SERIAL?
         BNE   POSHOWDN            NO, HEADING NOW READY
         MVI   11(R2),C'-'         YES, ADD A DASH
         BCT   R2,POSHOWLP         GO CHECK AGAIN
POSHOWDN MVC   MSGDSN,1(R1)        SAVE TEXT FOR REVCOMM
         MVC   $MEMBER,PDBLANKS    CLEAN UP FOR SESSION SWAP LIST
         BR    R14                 RETURN TO CALLER
GTPDSNAM MVC   1(0,R2),2(R1)       <<< EXECUTED >>>
         SPACE
************************************************************
*                                                          *
*         PROCESS MEMBER SELECTION CODES                   *
*                                                          *
************************************************************
         SPACE
         USING PO_SECT,R3
SELCDCHK TM    STATUS4,$4REFR      SCREEN CONTENTS OVERWRITTEN?
         BO    SAMEMEMS            YES, NO SELECTION CODES
         L     R0,SCRNCOLS         GET SCREEN WIDTH
         LR    R2,R0               COPY IT
         AR    R2,R0               DOUBLE IT
         AR    R2,R0               TRIPLE IT
         A     R2,SCREENBF         POINT TO FIRST DISPLAYED MEMBER
         LM    R3,R4,POTOPOLD      POINT TO PRE-SCROLL TOP ENTRY
         OI    POFLAG,PFSELCD      FLAG NOW PROCESSING SELECTION CODES
         B     SELCD1ST
SELCODLP NI    POFLG2,255-P2DEL-P2KIL   RESET 'D'/'¬' FLAGS
         C     R3,CURMEMAD         JUST PROCESSED A MEMBER?
         BNE   SELCODNX            NO
         XC    CURMEMAD,CURMEMAD   YES, CLEAR CURSOR PLACEMENT
*  AFTER STATISTICS OVERTYPE MERGING, A CALL TO DIRFRMAT TO
*  UPDATE THE SCREEN LINE IS REQUIRED.  SINCE THE NECESSARY
*  INSTRUCTIONS EXIST HERE, THEY ARE REUSED FOR THIS PURPOSE.
DIRMRGRT EQU   *                   RETURN FROM OVERTYPE STOW UPDATE
         L     R7,=A(DIRFRMAT)     POINT TO LINE FORMATTING ROUTINE
         BR    R7                  FORMAT UPDATED DIRECTORY ENTRY
SELCODNX A     R2,SCRNCOLS         POINT TO NEXT LINE
         C     R2,SHADOWBF         GONE PAST PRIMARY SCREEN BUFFER?
         BNL   PODYNCSR            YES, CHECK FOR CURSOR SORT SELECTION
         LA    R3,PO_NXT           POINT TO NEXT INTERNAL ENTRY
         L     R4,CURMEMNO         GET MEMBER NUMBER
         LA    R4,1(,R4)           INCREMENT IT
SELCD1ST ST    R4,CURMEMNO         SAVE MEMBER NUMBER
         C     R3,LSTMEMAD         REACHED END OF DIRECTORY?
         BNL   PODYNCSR            YES
         CLI   1(R2),C' '          BLANK CODE?
         BNH   SELCODNX            YES
         CLI   1(R2),C'.'          NO-OP CODE?
         BE    SELCODNX            YES
         ST    R3,CURMEMAD         REMEMBER MEMBER OF INTEREST
         L     R14,=A(KAPS)        POINT TO UPPER CASE TRANSLATE TABLE
         TR    1(1,R2),0(R14)      UPPER CASE INPUT SELECTION CODE
         CLI   1(R2),C'T'          CORRECT SELECTION CODE FOR TAG?
         BE    TAGMEMBR            YES
         CLI   1(R2),C'R'          CORRECT SELECTION CODE FOR RESET?
         BE    RESETMEM            YES
         MVC   $MEMBER(9),PO_MEM   MOVE IN SELECTED MEMBER NAME+CONCAT
         TM    STATUS15,$153PT5    OPTION 3.5 MEMBER LIST DISPLAY?
         BNO   SELCDNRM            NO, BUSINESS AS USUAL
         CLI   1(R2),C'B'          CORRECT SELECTION CODE FOR BROWSE?
         BE    SLASHMEM            YES
         CLI   1(R2),C'D'          CORRECT SELECTION CODE FOR DELSTATS?
         BE    DELDOPDS            YES
         CLI   1(R2),C'N'          CORRECT SELECTION CODE FOR NEWSTATS?
         BE    NEWSTATS            YES
         B     SELCDBAD            INVALID SELECTION FOR OPTION '3.5'
SELCDNRM CLI   1(R2),C'S'          CORRECT SELECTION CODE FOR REVIEW?
         BE    REVOREDT            YES
         CLI   1(R2),C'/'          CORRECT SELECTION CODE FOR REVIEW?
         BE    SLASHMEM            YES
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    SELCDBAD            YES, SELECTION CODE NOT ALLOWED
         TM    STATUS13,$13MSEL    HERE FOR MEMBER SELECTION?
         BO    SELCDBAD            YES, SELECTION CODE NOT ALLOWED
         CLI   1(R2),C'D'          CORRECT SELECTION CODE FOR DELETE?
         BE    DELMEMBR            YES
         CLI   1(R2),C'¬'          CORRECT SELECTION CODE FOR DELETE?
         BE    KILMEMBR            YES
         CLI   1(R2),C'N'          CORRECT SELECTION CODE FOR RENAME?
         BE    RENMEMBR            YES
         CLI   1(R2),C'B'          CORRECT SELECTION CODE FOR BROWSE?
         BE    POBRWSIT            YES
         TM    STATUS15,$15COPY    HERE FOR COPY MEMBER SELECTION?
         BO    SELCDBAD            YES, SELECTION CODE NOT ALLOWED
         CLI   1(R2),C'E'          CORRECT SELECTION CODE FOR EDIT?
         BE    POSPFSEL            YES
         CLI   1(R2),C'U'          CORRECT SELECTION CODE FOR UPDATE?
         BE    UPDATMEM            YES
         CLI   1(R2),C'V'          CORRECT SELECTION CODE FOR VIEW?
         BE    POSPFSEL            YES
         L     R7,=A(HANDLHST)
         CLI   1(R2),C'H'          CORRECT SELECTION CODE FOR HISTORY?
         BER   R7                  YES
         CLI   1(R2),C'M'          CORRECT SELECTION CODE FOR MAP?
         BER   R7                  YES
SELCDBAD MVI   MSG,24              INVALID SELECTION CODE
SELCFAIL MVC   TOPMEMAD(8),POTOPOLD CANCEL ANY SCROLLING
         NI    POFLG2,255-P2DEL-P2KIL   RESET 'D'/'¬' FLAGS
         TM    STATUS4,$4ATTN      ATTENTION INTERRUPT?
         BO    SAMEMEMS            YES, FLUSH PENDING ACTIVITY
         S     R2,SCREENBF         GET OFFSET OF PROBLEM LINE
         LA    R2,2(,R2)           GET POSITION OF PROBLEM CODE
         S     R2,SCRNCOLS
         S     R2,SCRNCOLS
         ST    R2,REVPOS           SPECIFY CURSOR POSITION
         MVC   REVCSR,=CL8'REVBUF' SPECIFY CURSOR FIELD
         B     DIRDSPLY            SHOW PENDING ACTIVITY
         SPACE
PODYNCSR LA    R1,SPFSRTAB         POINT TO CURSOR SELECT SORT TABLE
         TM    DS1RECFM,DCBRECU    IS IT UNDEFINED RECORD FORMAT?
         BNO   POSORTLP            NO, HAVE THE RIGHT TABLE
         LA    R1,RFUSRTAB         YES, USE THE LOAD LIBRARY TABLE
POSORTLP CLC   DYN_CSR,0(R1)       CURSOR BEFORE TRIGGER AREA?
         BL    SAMEMEMS            YES, DO NOT TRIGGER A SORT
         CLC   DYN_CSR,2(R1)       CURSOR AFTER TRIGGER AREA?
         BNH   PODOSORT            NO, GO TRIGGER A SORT
         LA    R1,8(,R1)           YES, POINT TO NEXT ENTRY
         B     POSORTLP            CONTINUE TABLE SCAN
PODOSORT L     R15,4(,R1)          LOAD ROUTINE ADDRESS
         XC    CURMEMAD,CURMEMAD   CLEAR ANY RESIDUAL CURSOR PLACEMENT
         LA    R0,=C'SORT'
         ST    R0,OPD0             EXPLICIT REQUEST SO SHOW MESSAGE
         BR    R15                 GO BRANCH TO IT
         SPACE
COPYMEM1 ICM   R0,3,MSG            ANY MESSAGE PENDING?
         BZ    SLASHMEM            NO, PROCEED
         LR    R14,R2              YES, POINT TO CURRENT LINE
COPYMEM2 A     R14,SCRNCOLS        POINT TO THE NEXT LINE
         C     R14,SHADOWBF        GONE BEYOND LAST LINE?
         BNL   SLASHMEM            YES, HAVE THE LAST REQUEST ON SCREEN
         CLI   1(R14),C'.'         FOUND ANOTHER REQUEST?
         BNH   COPYMEM2            NO,  PROCEED
         OI    STATUS10,$10CDL     YES, SHOW IT WITHOUT TERMINAL INPUT
         L     R15,=A(REVCOMM)     POINT TO TERMINAL I/O ROUTINE
         BASR  R14,R15             SHOW MEMBERS WITH STATUS MESSAGE
         B     SLASHMEM            GO PROCESS THIS REQUEST
         SPACE
POBRWSIT TM    STATUS15,$15COPY    HERE FOR COPY MEMBER SELECTION?
         BNO   POSPFSEL            NO, GO CHECK FOR ISPF BROWSE
         NI    STATUS15,255-$15COPY YES, PREVENT COPY IN BROWSE REQUEST
SLASHMEM TM    STATUS13,$13MSEL    HERE FOR MEMBER SELECTION?
         BO    DIREXIT             YES
         MVI   DATAKV+1,1          NO, SPECIFY 'DATA' OPERAND
         TM    STATUS15,$15COPY    HERE FOR COPY MEMBER SELECTION?
         BNO   DOXTRACT            NO
         MVC   MSG+64+OAIAMEM-OAIAREA(8),$MEMBER
         OI    STATUS12,$12ENQ     CUTALC TO REQUEST SERIALIZATION ONLY
         TM    PO_IND,X'80'        IS THIS MEMBER AN ALIAS?
         BNO   DOXTRACT            NO
         MVC   REALNAME,LASTNAME   YES, INDICATE NO REAL NAME FOUND
         LR    R1,R3               POINT TO CURRENT INTERNAL ENTRY
         LA    R0,$POSIZ           GET INTERNAL ENTRY SIZE
         ICM   R14,7,PO_TTR        LOAD MEMBER'S TTR
         LA    R15,DIRENTS         POINT TO THE FIRST INTERNAL ENTRY
         DROP  R3                  PO_SECT
         USING PO_SECT,R1
MEMCPLP1 SR    R1,R0               POINT TO PREVIOUS INTERNAL ENTRY
         CR    R1,R15              BEFORE START OF INTERNAL ENTRIES?
         BL    MEMCPFWD            YES, REAL MEMBER NOT BEFORE ALIAS
         TM    PO_IND,X'80'        IS THIS ENTRY FOR A REAL MEMBER?
         BO    MEMCPLP1            NO, IT IS FOR AN ALIAS
         CLM   R14,7,PO_TTR        FOUND THE REAL MEMBER?
         BNE   MEMCPLP1            NO
         B     MEMCREAL            YES
MEMCPFWD LR    R1,R3               POINT TO CURRENT INTERNAL ENTRY
MEMCPLP2 AR    R1,R0               POINT TO NEXT INTERNAL ENTRY
         C     R1,LSTMEMAD         REACHED END OF MEMBER LIST?
         BNL   DOXTRACT            YES, NO REAL MEMBER FOUND
         TM    PO_IND,X'80'        IS THIS ENTRY FOR A REAL MEMBER?
         BO    MEMCPLP2            NO, IT IS FOR AN ALIAS
         CLM   R14,7,PO_TTR        FOUND THE REAL MEMBER?
         BNE   MEMCPLP2            NO
MEMCREAL TM    PO_FLG,$POADD+$POREP  HAS IT BEEN COPIED?
         BZ    DOXTRACT            NO, HAVE TO COPY ALIAS CONTENTS
         MVC   REALNAME,PO_MEM     YES, SAVE THE REAL NAME
         B     DOXTRACT            NOW ONLY NEED A DIRECTORY UPDATE
         DROP  R1                  PO_SECT
         SPACE
         USING PO_SECT,R3
PONTFORV MVI   MSG,133             BROWSE SUBSTITUTED FOR RECFM U
         NI    STATUS11,255-$11VIEW
         B     DOXTRACT
         SPACE
DIRSEL   TM    STATUS15,$153PT5    OPTION 3.5 MEMBER LIST DISPLAY?
         BO    NOTPOCMD            YES, COMMAND NOT ALLOWED
         TM    OPD1+6,PRESENT      ANY OPERAND SPECIFIED?
         BNO   DIRMISOP            NO, REQUIRED OPERAND MISSING
         TM    OPD2+6,PRESENT      TOO MANY OPERANDS?
         BO    DIR2MANY            YES
         CLI   OPD1+5,8            OPERAND TOO LONG?
         BH    DIRBADOP            YES
         L     R3,OPD1             NO, POINT TO IT
         MVC   $MEMBER,0(R3)       TREAT 8 TEXT BYTES AS MEMBER NAME
         MVI   $CONCAT,0           COMMAND CAN ONLY ACCESS FIRST PDS
         SR    R3,R3               NO INTERNAL ENTRY ADDRESS YET
         LR    R2,R1
         BCTR  R2,0
         SPACE
REVOREDT TM    STATUS13,$13MSEL    HERE FOR MEMBER SELECTION?
         BO    DIREXIT             YES
         TM    STATUS15,$15COPY    HERE FOR COPY MEMBER SELECTION?
         BO    COPYMEM1            YES, GO SPECIFY 'DATA' OPERAND
         AIF   (NOT &ENVZV2).GENOK1
         TM    STATUS15,$15GEN     SHOWING MEMBER GENERATIONS?
         BO    DOXTRACT            YES, BROWSE IT WITH REVIEW
.GENOK1  ANOP
         MVI   1(R2),C'V'
         TM    POFLAG,PFVIEW       REALLY A VIEW REQUEST?
         BO    POSPFCHK            YES
         MVI   1(R2),C'E'
         TM    STATUS11,$11ED      REALLY AN EDIT REQUEST?
         BO    POSPFCHK            YES
         MVI   1(R2),C'S'
DOXTRACT L     R15,=A(POXTRACT)    GET ROUTINE ADDRESS
         BASR  R14,R15             EXTRACT DIRECTORY ENTRY FOR REVIEW2
         BAS   R14,PDSUPCLS        IF UPDATE FILE OPEN THEN CLOSE IT
         XC    RC,RC               CLEAR ANY PREVIOUS RETURN CODE
         NI    STATUS8,255-$8ZIPA  RESET ALL ZIP ARCHIVE STATUS FLAGS
         L     R15,=A(REVIEW2)     GET ADDRESS OF PHASE 2
         BASR  R14,R15             CALL REVIEW PHASE 2
         TM    STATUS,STPODIR      STILL IN MEMBER SELECT MODE?
         BZ    DIREXIT             NO, EXIT WAS REQUESTED
         OI    POFLAG,PFREV        FLAG JUST PROCESSED A MEMBER
         MVI   DATAKV+1,0          YES, CLEAR 'DATA' OPERAND
         MVC   SELMEMNM,$MEMBER    LOAD MEMBER NAME TO SEARCH FOR
         MVI   READR,X'80'         RESET UTILITY PROGRAM INDICATOR
         ICM   R1,15,FMTAREA       ANY FORMAT LOADED?
         BZ    REVMEMOK            NO, REDISPLAY MEMBER LIST
         USING @FMTAREA,R1
         CLC   =C'*OBJ',FMTNAME
         BNE   REVMEMOK
         DROP  R1                  @FMTAREA
         NI    MODE,255-MD_FMT     TURN OFF HISTORY FORMAT
REVMEMOK TM    STATUS15,$15COPY    HERE FOR COPY MEMBER SELECTION?
         BNO   REVCPYOK            NO
         CLI   BLDLNAME+1,8        WAS THE MEMBER ADDED?
         BNE   REVADDOK            NO
         OI    PO_FLG,$POADD       YES
REVADDOK CLI   BLDLNAME+1,0        WAS THE MEMBER REPLACED?
         BNE   REVREPOK            NO
         OI    PO_FLG,$POREP       YES
REVREPOK TM    STATUS15,$15MOVE    HERE TO MOVE MEMBERS?
         BNO   REVMOVOK            NO, PROBABLY HERE TO COPY MEMBERS
         NI    POFLAG,255-PFRESTOR NOT RESTORING A MEMBER
         TM    PO_FLG,$POADD+$POREP    WAS THIS MEMBER'S DATA COPIED?
         BNZ   DELDOPDS            YES, DELETE THE COPIED MEMBER
REVMOVOK TM    STATUS15,$15COPY    HERE TO COPY MEMBERS?
         BO    SELCODLP            YES, CHECK FOR MORE SELECTIONS
REVCPYOK TM    STATUS15,$15PDS     OPERATING UNDER RFE OPTION 3.3?
         BNO   *+8                 NO
         OI    STATUS15,$15COPY    YES, FLAG SELECTION PROCESSING
         TM    STATUS7,$7SAVE      SPF EDITED AND SAVED A MEMBER?
         BO    RFRSHOBT            YES, UPDATE MEMBER LIST
         ST    R3,CURMEMAD         NO, POINT TO PROCESSED ENTRY
         CLI   RC+1,4              MEMBER NOT FOUND?
         BE    SAMEMEMS            YES
         CLI   RC+1,8              BLDL FAILED?
         BE    SAMEMEMS            YES
         LTR   R3,R3               KNOW WHICH ENTRY WAS SELECTED?
         BZ    BROWSEOK            NO
         CLC   $MEMBER,PO_MEM      RIGHT MEMBER NAME?
         BNE   BROWSEOK            NO, LOOK FOR LAST BROWSED NAME
         MVC   SELMEMNM,PO_MEM     YES, SUPPLY PRECISE SEARCH ARGUMENT
         B     BROWSEOK            REDISPLAY MEMBER LIST
         SPACE
VIEWMEM  OI    STATUS11,$11VIEW    FLAG VIEW REQUEST
UPDATMEM TM    DS1RECFM,DCBRECF+DCBRECV
         BNM   PONTFORV            UNSUITABLE RECORD FORMAT
         LH    R4,$DSNAME          GET DATA SET NAME LENGTH
         LA    R1,$DSNAME-2        POINT 4 BYTES BEHIND DSN START
         SR    R0,R0
         ICM   R0,1,$CONCAT        LOAD CONCATENATION NUMBER
         BZ    GETUPDSN            ZERO SO USE $DSNAME
         L     R1,ARLAREA          POINT TO FIRST RETRIEVED JFCB
UPDTJFCB BCT   R0,UPJFLOOP         CHAIN THROUGH JFCBS
         B     GOTUJFCB            NOW POINTING TO CORRECT JFCB
UPJFLOOP AH    R1,0(,R1)           POINT TO NEXT JFCB
         B     UPDTJFCB            PROCESS IT
GOTUJFCB LA    R4,44               GET MAXIMUM DSN LENGTH
         LA    R15,47(,R1)         POINT TO LAST DSN CHARACTER
CNCTUPLP CLI   0(R15),C' '         TRAILING BLANK?
         BNE   GETUPDSN            NO, NOW HAVE DSNAME LENGTH
         BCTR  R15,0               YES, POINT TO PREVIOUS CHARACTER
         BCT   R4,CNCTUPLP         DECREMENT LENGTH AND TEST PREVIOUS
GETUPDSN STH   R4,DSNAIM           SET DATA SET NAME LENGTH
         MVI   DSNAIM+2,C' '       CLEAR RESIDUAL DATA
         MVC   DSNAIM+3(43),DSNAIM+2
         BCTR  R4,0                DECREMENT FOR EXECUTE
         EX    R4,UPDTNAIM         SET DATA SET NAME CONTAINING MEMBER
         MVC   SELMEMNM,$MEMBER    SET MEMBER NAME TO LOCATE AFTERWARDS
         L     R15,=A(REVEDIT)     POINT TO THE EDIT MODULE
         BASR  R14,R15             CALL REVEDIT
         ST    R15,DOUBLE          PLACE RETURN CODE WHERE REVISPF DOES
         TM    STATUS,STPODIR      STILL IN MEMBER SELECT MODE?
         BZ    DIREXIT             NO, EXIT WAS REQUESTED
         OI    POFLAG,PFREV        FLAG JUST PROCESSED A MEMBER
         LTR   R15,R15             ANYTHING SAVED?
         BNZ   MEMEDTED            NO
         LTR   R3,R3               KNOWN ENTRY ADDRESS?
         BZ    MEMEDTED            NO
         CLC   BLDLNAME,$MEMBER    GOT THE LATEST DETAILS?
         BNE   MEMEDTED            NO
         CLI   $OTHUP,0            DID ANYTHING ELSE UPDATE THE PDS?
         BNE   MEMEDTED            YES, BETTER GO GET THE LATEST
OLDSTATS MVC   PO_TTR,BLDLTTRP     NO, EDIT WAS THE ONLY CHANGE
         TM    PO_FLG,$POSPF       OLD SPF STATS AROUND?
         BNO   OLDSTAOK            NO
         ICM   R1,15,PO_PTR        YES, POINT TO EXTENSION
         USING PX_SECT,R1
         ICM   R1,15,PX_SIZE       GET THE OLD SIZE
         DROP  R1                  PX_SECT
         L     R0,TOTSPFSZ         GET OLD TOTAL
         SR    R0,R1               GET NEW TOTAL
         ST    R0,TOTSPFSZ         SAVE IT
OLDSTAOK TM    PO_FLG,$POSSI1      WAS SSI DATA ERASED?
         BNO   OLDSSIOK            NO
         STCM  R15,15,PO_PTR       YES, CLEAR IT
OLDSSIOK MVC   PO_IND,BLDLINDC     UPDATE MEMBER INDICATOR BYTE
         NI    PO_FLG,$POTAG       RESET SSI AND STATS FLAGS
         MVI   MSG,55              MEMBER SAVED
         NI    STATUS7,255-$7SAVE  RESET EDITED AND SAVED FLAG
         TM    BLDLINDC,31         STATS OFF?
         BZ    BROWSEOK            YES, UPDATE COMPLETE
         L     R1,PSATOLD          POINT TO THE CURRENT TCB
         L     R1,TCBTIO-TCB(,R1)  POINT TO THE TIOT
         CLC   BLDLUSID,0(R1)      SPF STATS HAS RIGHT USER ID?
         BNE   BROWSEOK            NO, ASSUME NOT VALID SPF STATS
         ICM   R1,15,PO_PTR        POINT TO THE EXTENSION
         BZ    DYNSTATS            THERE IS NONE SO MAKE ONE
         USING PX_SECT,R1
         CLI   PX_LEN,$PXSPFL      LONG ENOUGH FOR SPF STATS?
         BNL   STATSEDT            YES
DYNSTATS LA    R0,$PXDYNL          GET GETMAIN SIZE
         GETMAIN RC,LV=(0),SP=1,LOC=(31,64)
         OI    STATUS7,$7SAVE      SET EDITED AND SAVED FLAG
         LTR   R15,R15             GOT THE STORAGE?
         BNZ   MEMEDTED            NO, GO REFRESH THE WHOLE LOT
         NI    STATUS7,255-$7SAVE  RESET EDITED AND SAVED FLAG
         XC    0($PXDYNL,R1),0(R1) CLEAR THE NEW STORAGE
         MVI   PX_LEN,$PXSPFL      SET NEW EXTENSION LENGTH
         STCM  R1,15,PO_PTR        SAVE EXTENSTION ADDRESS
         MVC   PX_CHN,STACHAIN     POINT TO PREVIOUS ELEMENT
         ST    R1,STACHAIN         SAVE NEWEST ELEMENT'S ADDRESS
STATSEDT OI    PO_FLG,$POSPF       FLAG ISPF STATISTICS PRESENT
         XC    PX_SIZE(19),PX_SIZE ZERO COUNTER HIGH HALVES
         MVC   PX_VER(3),BLDLVVMM  SAVE VERSION AND LEVEL AND FLAGS
         MVC   PX_CHA(6),BLDLCHGD  SAVE CHANGE DATE AND TIME
         MVC   PX_CHA+6(1),BLDLSECS AND CHANGE SECONDS
         MVC   PX_CRE(4),BLDLCRED  SAVE CREATION DATE
         MVC   PX_SIZE+2(2),BLDLCCNT
         MVC   PX_INIT+2(2),BLDLICNT
         MVC   PX_MODS+2(2),BLDLMOD
         MVC   PX_USER,BLDLUSID
         TM    BLDLFLGS,BLDLXSTA   EXTENDED STATISTICS?
         BNO   STATSEDX            NO
         MVC   PX_SIZE,BLDLXCCT
         MVC   PX_INIT(8),BLDLXICT
STATSEDX ICM   R0,15,PX_SIZE       GET NEW MEMBER LINE COUNT
         A     R0,TOTSPFSZ         ADD OLD LINE COUNT TOTAL
         ST    R0,TOTSPFSZ         UPDATE THE TOTAL
         TM    POFLG2,P2NEW        PERFORMING NEWSTATS?
         BNO   BROWSEOK            NO, MEMBER DETAILS NOW UPDATED
         B     DELDOPDS            YES, GO OPEN DCB FOR UPDATE
         DROP  R1                  PX_SECT
UPDTNAIM MVC   DSNAIM+2(0),4(R1)   <<< EXECUTED >>>
         SPACE
*OVIOSPF MVC   MSG,78              ISPF REQUEST NOT ALLOWED FOR VIO
*        B     SAMEMEMS            GO SHOW THE MESSAGE
POSPFCHK LTR   R3,R3               INTERNAL ENTRY KNOWN?
         BNZ   POSPFSEL            YES, SKIP SOME WORK
POSPFCMD TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    NOTPOCMD            YES, COMMAND NOT ALLOWED
         TM    STATUS13,$13MSEL    HERE FOR MEMBER SELECTION?
         BO    NOTPOCMD            YES, COMMAND NOT ALLOWED
         TM    STATUS15,$15COPY    HERE TO COPY MEMBERS?
         BO    NOTPOCMD            YES, COMMAND NOT ALLOWED
         TM    STATUS15,$153PT5    OPTION 3.5 MEMBER LIST DISPLAY?
         BO    NOTPOCMD            YES, COMMAND NOT ALLOWED
         TM    OPD1+6,PRESENT      ANY OPERAND SPECIFIED?
         BNO   DIRMISOP            NO, REQUIRED MEMBER HINT MISSING
         TM    OPD2+6,PRESENT      TOO MANY OPERANDS?
         BO    DIR2MANY            YES
         CLI   OPD1+5,8            OPERAND TOO LONG?
         BH    DIRBADOP            YES
         L     R5,OPD1             YES, POINT TO IT
         MVC   $MEMBER,0(R5)       TREAT 8 TEXT BYTES AS MEMBER NAME
         MVI   $CONCAT,0           COMMAND CAN ONLY ACCESS FIRST PDS
         LR    R2,R1               POINT TO SELECTION COMMAND
         BCTR  R2,0                POINT TO THE BYTE BEFORE
         LA    R3,DIRENTS          POINT TO FIRST ENTRY
         SR    R4,R4               FIRST ENTRY IS NUMBER ZERO
PONXTMEM C     R3,LSTMEMAD         END OF INTERNAL DIRECTORY ENTRIES?
         BNL   POSPFNEW            YES, DO NOT KNOW SELECTED ENTRY
         CLC   PO_MEM(9),$MEMBER   FOUND THE MEMBER?
         BE    POFNDMEM            YES
         LA    R3,$POSIZ(,R3)      NO, POINT TO THE NEXT ENTRY
         LA    R4,1(,R4)           INCREMENT MEMBER NUMBER
         B     PONXTMEM            GO LOOK AT IT
POSPFNEW SR    R3,R3               NO EXISTING MEMBER ENTRY
         B     POSPFSEL
POFNDMEM STM   R3,R4,CURMEM@#      NOW KNOW THE SELECTED ENTRY
POSPFSEL CLI   1(R2),C'U'          NON-ISPF EDIT REQUEST?
         BE    UPDATMEM            YES, REVEDIT MEMBER
         AIF   (NOT &ENV390).NOISPF8
         TM    STATUS8,$8ISPF      ISPF SERVICES AVAILABLE?
         BO    POISPFOK            YES
.NOISPF8 ANOP
POSPFLES CLI   1(R2),C'E'          EDIT REQUEST?
         BE    UPDATMEM            YES, REVEDIT MEMBER
         CLI   1(R2),C'V'          VIEW REQUEST?
         BNE   DOXTRACT            NO, REVIEW MEMBER
         OI    STATUS11,$11VIEW    YES
         B     UPDATMEM
         AIF   (NOT &ENV390).NOISPF9
POISPFOK CLI   $VOLSER,C' '        IS THE PDS ON VIO?
*        BE    NOVIOSPF            YES, NO CAN DO
         BE    POSPFLES            YES, USE REVIEW FACILITIES INSTEAD
         MVC   SELMEMNM,$MEMBER    SET MEMBER NAME TO LOCATE AFTERWARDS
         AIF   (NOT &ENVZV2).GENOK5
         SR    R4,R4               RESET GENERATION NUMBER
         LTR   R3,R3               HAVE THE MEMBER'S ENTRY?
         BZ    SPFGENOK            NO
         TM    STATUS15,$15GEN     SHOWING MEMBER GENERATIONS?
         BZ    SPFGENOK            NO
         ICM   R1,15,PO_PTR        POINT TO EXTENSION
         USING PX_SECT,R1
         ICM   R4,15,PX_GNUM       LOAD GENERATION NUMBER
         BZ    SPFGENOK            NOT A MEMBER GENERATION
         DROP  R1                  PX_SECT
         CLI   1(R2),C'E'          EDIT REQUEST?
         BE    GENNOTOK            YES, NOT ALLOWED
SPFGENOK EQU   *
.GENOK5  ANOP
         LA    R1,1(,R2)           POINT TO THE ACTION TEXT
         L     R15,=A(REVISPF)     EDIT IS A VALID SELECTION
         BASR  R14,R15             CALL REVISPF
         OI    POFLAG,PFREV        FLAG JUST PROCESSED A MEMBER
         CLI   1(R2),C'E'          WAS MEMBER EDIT REQUESTED?
         BNE   EOBROWSE            NO
.NOISPF9 ANOP
MEMEDTED LTR   R15,R15             WAS THE MEMBER SAVED?
         BNZ   MEMNTSAV            NO
         OI    STATUS7,$7SAVE      YES, FLAG THIS
RFRSHOBT ICM   R5,8,DS1NOEPV       SAVE PREVIOUS EXTENT COUNT
         LA    R1,OBTAINW          GET THE LATEST DSCB DETAILS
         OBTAIN (1)                    FROM THE VTOC
         CLM   R5,8,DS1NOEPV       HAS THE NUMBER OF EXTENTS CHANGED?
         BE    REREFRSH            NO
         TM    STATUS,STOPEN       IS THE MEMBER DATA DCB OPEN?
         BZ    REREFRSH            NO, NO DEB TO DELETE WITH A CLOSE
         TM    DCBOFLGS-IHADCB+DYNDCBW,X'10'
         BZ    REREFRSH            NO, NO DEB TO DELETE WITH A CLOSE
         MVI   CLOSED,X'80'        YES, SO CLOSE IT
         CLOSE (DYNDCBW),MF=(E,CLOSED)
         NI    STATUS,255-STOPEN   CLOSED - OPEN WILL FIND NEW EXTENTS
         NI    POFLAG,255-PFUPDT   NOT OPEN FOR UPDATE
REREFRSH BAS   R4,PODELFRE         FREE THE DELETE CHAIN
         TM    POFLAG,PFVIEW       INVOKED AS A VIEW COMMAND?
         BNO   *+8                 NO
         OI    STATUS11,$11VIEW    YES
         MVC   DOUBLE,TOPMEMAD     SAVE TOP MEMBER NUMBER
         TM    POFLAG,PFPAT        USING NAME PATTERN FILTERING?
         BNO   DIRFILTX            NO, CONTINUE
         MVC   PUTLINS+4(8),MEMFILTR  YES, COPY THE MEMBER NAME MASK
         OI    STATUS17,$17PAT     FLAG USING NAME PATTERN FILTERING
DIRFILTX LM    R0,R1,FREEMRGS      PREPARE FOR FREEMAIN
         L     R13,4(,R13)         POINT TO CALLER'S SAVE AREA
         OI    11(R13),X'01'       INVALIDATE FORWARD POINTER
         FREEMAIN R,LV=(0),A=(1)   FREE @PDSAREA
         MVI   READR,X'80'         RESET UTILITY PROGRAM INDICATOR
         B     DIREFRSH            GET CURRENT DIRECTORY INFORMATION
MEMNTSAV CLI   $OTHUP,0            DID ANYTHING ELSE UPDATE THE PDS?
         BNE   RFRSHOBT            YES, BETTER GO REFRESH DIRECTORY
*
*         CHECK THE VTOC AFTER BROWSING A MEMBER
*
*   IF THE NUMBER OF EXTENTS HAS CHANGED THEN CLOSE THE BPAM DCB
*   SO THAT IT WILL HAVE TO BE OPENED AGAIN IF NEEDED, AND WILL
*   THEREFORE HAVE ACCESS TO THE NEW EXTENT(S).  ALSO, IF DS1LSTAR
*   HAS CHANGED THEN REFRESH THE DIRECTORY DATA FROM DISK.  IF
*   DS1LSTAR HAS NOT CHANGED BUT AN UNCONCATENATED PDSE IS BEING
*   PROCESSED WITH THE MEMBER LIST IN MEMBER NAME COLLATING
*   SEQUENCE, THEN PERFORM A REFRESH ANYWAY BECAUSE DS1LSTAR HAS
*   THE MAXIMUM TTR OR ZERO (DEPENDING UPON SYSTEM SOFTWARE LEVEL)
*   VALUE REGARDLESS OF DATA SET FULLNESS.  IF A PDSE HAS GONE TO
*   A NEW EXTENT THEN ITS DS1LSTAR WILL ALSO BE UPDATED IF
*   NON-ZERO.  IN THE ABSENCE OF PROOF OF ANY DATA SET UPDATE, DO
*   NOT DO A REFRESH WHICH WOULD CAUSE A MEMBER SORT PROCESS,
*   BECAUSE THIS WOULD (NEEDLESSLY) DEGRADE RESPONSE TIME.
*
EOBROWSE LTR   R15,R15             WAS THE BROWSE SUCCESSFUL?
         BZ    BROWSEOK            YES, RE-DISPLAY MEMBER LIST QUICKLY
         CLI   DOUBLE+3,4          WAS THERE AN ERROR?
         BNE   ISPFFAIL            YES
BROWSEOK ICM   R5,7,DS1LSTAR       SAVE PREVIOUS DS1LSTAR VALUE
         ICM   R5,8,DS1NOEPV       SAVE PREVIOUS EXTENT COUNT
         LA    R1,OBTAINW          GET THE LATEST DSCB DETAILS
         OBTAIN (1)                    FROM THE VTOC
         CLM   R5,8,DS1NOEPV       HAS THE NUMBER OF EXTENTS CHANGED?
         BE    PDSEXTOK            NO
         TM    STATUS,STOPEN       IS THE MEMBER DATA DCB OPEN?
         BZ    PDSEXTOK            NO, NO DEB TO DELETE WITH A CLOSE
         TM    DCBOFLGS-IHADCB+DYNDCBW,X'10'
         BZ    PDSEXTOK            NO, NO DEB TO DELETE WITH A CLOSE
         MVI   CLOSED,X'80'        YES, SO CLOSE IT
         CLOSE (DYNDCBW),MF=(E,CLOSED)
         NI    STATUS,255-STOPEN   CLOSED - OPEN WILL FIND NEW EXTENTS
         NI    POFLAG,255-PFUPDT   NO LONGER OPEN FOR UPDATE
PDSEXTOK ICM   R0,15,DELCHAIN      REMEMBERING DELETED MEMBER DETAILS?
         BNZ   SAMEMEMP            YES, BETTER KEEP DATA AS NOW IS
         CLI   MSG,55              MEMBER SAVED?
         BE    SAMEMEMP            YES, CHANGED DS1LSTAR IS EXPECTED
         ICM   R0,15,TAGCOUNT      ARE ANY MEMBERS TAGGED?
         BNZ   SAMEMEMP            YES, BETTER KEEP TAG DATA
         CLM   R5,7,DS1LSTAR       HAS DS1LSTAR CHANGED?
         BNE   REREFRSH            YES, REFRESH ENTIRE DIRECTORY
**       ICM   R0,3,CONCTOPN       ANY CONCATENATED DIRECTORIES READ?
**       BNZ   SAMEMEMP            YES, SKIP DIRECTORY REFRESH
**       TM    DS1SMSFG,DS1PDSE    LOOKING AT A SINGLE PDSE?
**       BZ    SAMEMEMP            NO, SKIP DIRECTORY REFRESH
**       TM    STATUS3,$3SORT      ENTRIES IN COLLATING SEQUENCE?
**       BZ    REREFRSH            YES, SNEAK IN A REFRESH FOR A PDSE
         B     SAMEMEMP            RESHOW LIST FROM REQUESTED MEMBER
ISPFFAIL CLI   DOUBLE+3,16         WAS THE MEMBER LIST EMPTY?
         BE    RFRSHOBT            YES, MAGICALLY REFRESH MEMBER LIST
         CLI   DOUBLE+3,14         WAS THE MEMBER IN USE OR NOT FOUND?
         BNE   NOTSPF14            NO
         MVI   MSG,36              MEMBER NOT FOUND
         MVC   BLDLNAME,$MEMBER    SAVE MEMBER NAME FOR REVMSGS
         CLI   1(R2),C'B'          WAS MEMBER BROWSE REQUESTED?
         BE    SAMEMEMP            YES, HAVE CORRECT MESSAGE
         MVI   MSG,54              MEMBER IN USE
         B     SAMEMEMP            RESHOW LIST FROM THE MEMBER
NOTSPF14 CLI   DOUBLE+3,12         WAS THE MEMBER EMPTY?
         BNE   SAMEMEMP            NO, USE ERROR MESSAGE SET BY REVISPF
         MVI   MSG,53              EMPTY MEMBER
         B     SAMEMEMP            RESHOW LIST FROM THE MEMBER
         SPACE
         SPACE
**********************************************************************
*                                                          *         *
*         PROCESS OFFLOAD REQUEST                          *  GP@P6  *
*                                                          *  02/90  *
**********************************************************************
         SPACE
SEQLDCHK TM    STATUS13,$13MSEL    HERE FOR MEMBER SELECTION?
         BO    NOTPOCMD            YES, COMMAND NOT ALLOWED
         TM    STATUS15,$15COPY    HERE TO COPY MEMBERS?
         BO    NOTPOCMD            YES, COMMAND NOT ALLOWED
         TM    STATUS15,$153PT5    OPTION 3.5 MEMBER LIST DISPLAY?
         BO    NOTPOCMD            YES, COMMAND NOT ALLOWED
         NI    STATUS3,255-$3UPDTE CLEAN UP STATUS3
*                                  IS IT FIXED OR VARIABLE FORMAT?
SEQFVCHK TM    DS1RECFM,DCBRECF+DCBRECV
         BM    OFFLFORV            YES, CHECK LOGICAL RECORD LENGTH
         MVI   MSG,77              REQUEST ABORTED - RECFM NOT F OR V
         B     SAMEMEMS            GO SHOW THE MESSAGE
OFFLDCHK TM    STATUS13,$13MSEL    HERE FOR MEMBER SELECTION?
         BO    NOTPOCMD            YES, COMMAND NOT ALLOWED
         TM    STATUS15,$15COPY    HERE TO COPY MEMBERS?
         BO    NOTPOCMD            YES, COMMAND NOT ALLOWED
         TM    STATUS15,$153PT5    OPTION 3.5 MEMBER LIST DISPLAY?
         BO    NOTPOCMD            YES, COMMAND NOT ALLOWED
         OI    STATUS3,$3UPDTE     REMEMBER TO MAKE CONTROL CARDS
         TM    DS1SMSFG,DS1PDSE    PDSE?
         BNZ   SEQFVCHK            YES, CANNOT OFFLOAD PROGRAM OBJECTS
OFFLFORV TM    OPD1+6,PRESENT      ANY OPERAND(S) PRESENT?
         BO    DIRBADOP            YES, BETTER REJECT THE COMMAND
         LA    R15,DIRENTS         POINT TO FIRST ENTRY
         C     R15,LSTMEMAD        ANY MEMBERS IN THIS PDS?
         BL    OFFSMTHG            YES, SOMETHING IS THERE TO OFFLOAD
PONOMEMS MVI   MSG,56              NO MEMBERS TO PROCESS
         B     SAMEMEMS            GO SHOW THE MESSAGE
*
*  AN OUTPUT SEQUENTIAL DATA SET IS REQUIRED TO HOLD SOME DATA FROM
*  THIS PDS (OR PDSE).  TO BEST ENSURE SUFFICIENT SPACE IS ALLOCATED
*  (IF REVALCO HAPPENS TO CREATE A DATA SET) THE $10LIKE FLAG SHOULD
*  BE SET SO THAT THE REQUESTED SPACE IS DERIVED FROM DS1LSTAR.
*
*  THIS FLAG WILL ALSO CAUSE THE NEW DATA SET TO HAVE THIS PDS'S BLOCK
*  SIZE (FOR F OR V RECFM) SO $10LIKE SHOULD NOT BE SET WHEN THE
*  RECORDS WRITTEN WILL BE EXTENDED TO 80 BYTES.
*
OFFSMTHG OI    STATUS10,$10LIKE    CAN COPY DATA SET ATTRIBUTES
         TM    STATUS3,$3UPDTE     WRITING CONTROL CARDS?
         BNO   PODOALCO            NO, LRECL IS NOT A PROBLEM
         TM    DS1RECFM,DCBRECF+DCBRECV
         BNM   PODOALCO            REVALCO KNOWS TO LOOK AT RECFM
         LA    R0,80
         CH    R0,DS1LRECL         IS LRECL AT LEAST 80?
         BNH   PODOALCO            YES, OUTPUT DCB WILL BE SIMILAR
         NI    STATUS10,255-$10LIKE
PODOALCO LA    R1,PO_OAIA          POINT ALLOCATION COMMUNICATION AREA
         L     R15,=A(REVALCO)     POINT TO ALLOCATION ROUTINE
         BASR  R14,R15             ALLOCATE OUTPUT FILE
         LTR   R15,R15             PROCEED WITH OUTPUT?
         BNZ   SAMEMEMS            NO, REQUEST CANCELLED
         BAS   R14,PDSUPCLS        IF UPDATE FILE OPEN THEN CLOSE IT
         ICM   R0,15,TAGCOUNT      FULL OR PARTIAL OFFLOAD?
         BZ    OFFLDALL            FULL
         MVI   MSG,81              OFFLOADING SELECTED REAL MEMBERS
*                                  ALIASES BY ./ ALIAS STATEMENT?
         CLI   STATUS3,$3UPDTE+$3TTR
         BNE   OFFLDCAL            NO, CALL THE OFFLOADER
         MVI   MSG,82              OFFLOADING SELECTED REAL AND ALIASES
         B     OFFLDCAL            CALL THE OFFLOADER
OFFLDALL MVI   MSG,79              OFFLOADING ALL REAL MEMBERS
*                                  ALIASES BY ./ ALIAS STATEMENT?
         CLI   STATUS3,$3UPDTE+$3TTR
         BNE   OFFLDCAL            NO, CALL THE OFFLOADER
         MVI   MSG,80              OFFLOADING ALL REAL AND ALIASES
OFFLDCAL OI    STATUS10,$10CDL     PREPARE FOR OUTPUT-ONLY TERMINAL I/O
         B     SAMEMEMS            REPAINT FOR PRE-OFFLOAD MESSAGE
OFFLDMSG L     R15,=A(REVCOMM)     POINT TO TERMINAL I/O ROUTINE
         BASR  R14,R15             SHOW MEMBERS WITH STATUS MESSAGE
         L     R15,=A(REVOFFLD)    POINT TO OFFLOAD PROCESSOR ROUTINE
         BASR  R14,R15             CALL OFFLOAD PROCESSOR
         LA    R1,PO_OAIA          POINT ALLOCATION COMMUNICATION AREA
         L     R15,=A(REVDALO)     POINT TO DEALLOCATION ROUTINE
         BASR  R14,R15             DEALLOCATE OUTPUT FILE
         XC    SELMEMNM,SELMEMNM   CLEAR LOCATE MEMBER NAME
         MVI   READR,X'80'         RESET UTILITY PROGRAM INDICATOR
         CLI   MSG,123             SHORT OF STORAGE?
         BE    SAMEMEMS            YES, GO TELL IT LIKE IT IS
         TM    STATUS,STABEND      DCB ABEND OCCURRED?
         BO    OFFLDERR            YES
         MVI   MSG,83              OFFLOAD COMPLETE
         TM    STATUS4,$4ATTN      ATTENTION INTERRUPT?
         BZ    SAMEMEMS            NO, PDS NOW OFFLOADED
         MVI   MSG,84              OFFLOAD INTERRUPTED
         B     SAMEMEMS            SHOW OFFLOAD TERMINATION MESSAGE
OFFLDERR MVC   MSG(OFABMSGL),OFABMSG
         NI    STATUS,255-STABEND  RESET DCB ABEND FLAG
         UNPK  OFABNUM,ABENDWRD(2)
         TR    OFABNUM,POHEX-240
         UNPK  OFABRET(3),ABENDWRD+2(2)
         TR    OFABRET,POHEX-240
         MVI   OFABRET+2,C' '      JUST IN CASE
         OI    STATUS7,$7BELL      REQUEST AUDIBLE ALARM AFTER ABEND
         TM    STATUS13,$13COMP    COMPRESS REQUESTED?
         BO    DIREXIT             YES, GO REPORT BAD NEWS
         B     SAMEMEMS            SHOW OFFLOAD TERMINATION MESSAGE
         SPACE
         SPACE
**********************************************************************
*                                                          *         *
*         PROCESS COMPRESS REQUEST - SAVE MEMBERS          *  GP@P6  *
*                                                          * JUL2009 *
**********************************************************************
         SPACE
*  THIS POINT IS REACHED ONLY IF THE SUBJECT DATA SET IS A PDS AND
*  NOT A PDSE WITH DSORG=PO AND NOT DSORG=POU AND NO MEMBERS ARE
*  SEGMENT OVERLAY PROGRAMS.  OVERLAY PROGRAMS ALLOWED FROM R47.1.
         SPACE
CONDSAVE MVC   OAIADDN,CONDNSDD    LOAD CONDENSE HOLD FILE DDNAME
         OI    STATUS3,$3UPDTE     REMEMBER TO MAKE CONTROL CARDS
         L     R15,=A(REVOFFLD)    POINT TO OFFLOAD PROCESSOR ROUTINE
         BASR  R14,R15             CALL OFFLOAD PROCESSOR
         TM    STATUS,STABEND      DCB ABEND OCCURRED?
         BNO   DIREXIT             NO, CONDENSE OUTPUT COMPLETE
         MVI   RC+1,4              YES, SET NON-ZERO RETURN CODE
         B     OFFLDERR            GO CREATE MESSAGE
         SPACE
         SPACE
**********************************************************************
*                                                          *         *
*         COPY ALL MEMBERS                                 *  R45.2  *
*                                                          * NOV2014 *
**********************************************************************
         SPACE
STARCOPY LA    R3,DIRENTS          POINT TO THE FIRST MEMBER
         XC    REALTTR,REALTTR     NO REAL TTR YET
         C     R3,LSTMEMAD         ANY MEMBERS IN PDS?
         BL    STARLOOP            YES, GO COPY THEM
         MVI   MSG,56              NO MEMBERS TO PROCESS
         B     DIREXIT
STARLOOP MVC   $MEMBER,PO_MEM      SUPPLY MEMBER NAME
         MVC   MSG+64+OAIAMEM-OAIAREA(8),PO_MEM
         XC    MSGDSN,MSGDSN       NO DIRECTORY INFORMATION FOR REVIEW2
         MVI   DATAKV+1,1          SPECIFY 'DATA' OPERAND
         OI    STATUS12,$12ENQ     CUTALC TO REQUEST SERIALIZATION ONLY
         TM    PO_IND,X'80'        IS THIS MEMBER AN ALIAS?
         BNO   STARREAL            NO
         CLC   REALTTR,PO_TTR      SAME TTR AS PREVIOUS REAL MEMBER?
         BE    STARCALL            YES, PROCEED
         MVC   REALNAME,LASTNAME   NO, INDICATE NO REAL NAME FOUND
         B     STARCALL
STARREAL MVC   REALNAME,PO_MEM     SAVE REAL MEMBER NAME
         MVC   REALTTR,PO_TTR      SAVE REAL MEMBER TTR
STARCALL L     R15,=A(REVIEW2)     GET ADDRESS OF PHASE 2
         BASR  R14,R15             CALL REVIEW PHASE 2
         MVC   $MEMBER,PDBLANKS    RESET CURRENT MEMBER NAME
         ICM   R0,15,CUTWORK@      ABLE TO CONTINUE PROCESSING?
         BZ    DIREXIT             NO, RESOURCES HAVE BEEN FREED
         LA    R3,$POSIZ(,R3)      POINT TO NEXT ENTRY
         C     R3,LSTMEMAD         REACHED END OF DIRECTORY?
         BL    STARLOOP            NO, GO COPY NEXT MEMBER
         MVI   DATAKV+1,0          YES, CLEAR 'DATA' OPERAND
         TM    STATUS7,$7BELL      AUDIBLE ALARM REQUESTED?
         BO    DIREXIT             YES, DO NOT EDIT MESSAGE
         CLI   MSG,19              MESSAGE NUMBER SET?
         BNL   DIREXIT             YES, DO NOT EDIT MESSAGE
         LH    R1,MSG              GET THE MESSAGE TEXT LENGTH
         LA    R0,6                GET LENGTH OF 'COPIED'
         SR    R1,R0               REDUCE APPARENT LENGTH
         BM    DIREXIT             MESSAGE TOO SHORT - DO NOT EDIT IT
         LA    R1,MSG+2(R1)        POINT PAST RETAINED TEXT
         MVI   0(R1),C'/'
         L     R0,MEMBRCNT         GET MEMBER COUNT
         CVD   R0,DOUBLE
         MVC   1(10,R1),ED9
         ED    1(10,R1),DOUBLE+3   SHOW MEMBER COUNT
         MVC   11(15,R1),=CL15' MEMBERS COPIED'
         LA    R14,11+15(,R1)      POINT PAST EDITED MESSAGE TEXT
         LA    R0,MSG+2            POINT TO MESSAGE TEXT START
         SR    R14,R0              GET MESSAGE TEXT LENGTH
STAREDLP CLI   2(R1),C' '          LEADING BLANK?
         BH    STAREDOK            NO, GO TERMINATE COPY
         MVC   2(8+15,R1),3(R1)    YES, BACK TEXT OVER IT
         BCT   R14,STAREDLP        DECREMENT LENGTH AND RECHECK
STAREDOK STH   R14,MSG             SET NEW MESSAGE TEXT LENGTH
         B     DIREXIT             GO TERMINATE COPY
         SPACE
         SPACE
************************************************************
*                                                          *
*         PROCESS SYNCHRONOUS SELECTION CODES              *
*                                                          *
************************************************************
         SPACE
*               R2 -> PRIMARY BUFFER SCREEN LINE
*               R3 -> INTERNAL MEMBER ENTRY
         SPACE
TAGMEMBR TM    PO_FLG,$POTAG       ALREADY SELECTED?
         BO    SELCODLP            YES, TAKE NO ACTION
         TM    PO_FLG,$PODEL       DELETED MEMBER?
         BO    SELCODLP            YES, TAKE NO ACTION
         OI    PO_FLG,$POTAG       NO, FLAG OFFLOAD SELECTION
         LA    R0,1
         A     R0,TAGCOUNT         INCREMENT OFFLOAD SELECTION COUNTER
         ST    R0,TAGCOUNT
         B     SELCODLP
         SPACE
         SPACE
************************************************************
*                                                          *
*         PROCESS DIRECTORY UPDATES                        *
*                                                          *
************************************************************
         SPACE
RENMEMBR EQU   *
         AIF   (NOT &ENVZV2).GENOK6
         TM    STATUS15,$15GEN     SHOWING MEMBER GENERATIONS?
         BNO   RENMEMOK            NO, PROCEED AS USUAL
         ICM   R1,15,PO_PTR        YES, POINT TO EXTENSION
         USING PX_SECT,R1
         ICM   R0,15,PX_GNUM       IS THIS A MEMBER GENERATION?
         BZ    RENMEMOK            NO, PROCEED AS USUAL
GENNOTOK MVI   MSG,222             MEMBER GENERATIONS NOT ALLOWED
         B     SELCFAIL            SPECIAL RENAME GEN STOW NOT PRESENT
         DROP  R1                  PX_SECT
.GENOK6  ANOP
RENMEMOK MVI   MSG,177             ENTER NEW MEMBER NAME
         L     R14,SCRNCOLS        GET THE SCREEN WIDTH
         L     R15,SCREENBF        POINT TO THE PRIMARY SCREEN BUFFER
         AR    R15,R14             POINT TO SECOND LINE
         MVI   13(R15),FLDOUTLO    BLOCK PRIMARY INPUT
         MVI   76(R15),FLDOUTLO    BLOCK SCROLL AMOUNT UPDATE
         AR    R15,R14             POINT TO THIRD LINE
         MVI   0(R15),FLDOUTLO     TONE DOWN THE COLUMN HEADINGS
         AR    R15,R14             POINT TO FOURTH LINE
RENLOOP1 CLI   2(R15),C' '         MEMBER DISPLAY LINE?
         BNL   RENDONE1            NO
         MVI   0(R15),FLDOUTLO     YES, MAKE LOW INTENSITY OUTPUT ONLY
         MVI   2(R15),FLDOUTLO
         AR    R15,R14             POINT TO THE NEXT LINE
         C     R15,SHADOWBF        PAST END OF SCREEN?
         BL    RENLOOP1            NO
RENDONE1 MVC   11(11,R2),RENNEWIN  SUPPLY INPUT FIELD AREA
         MVI   0(R2),FLDOUTHI      HIGHLIGHT CODE BEING PERFORMED
         MVI   2(R2),FLDOUTHI      HIGHLIGHT MEMBER LINE
RENRETRY L     R15,SHADOWBF        POINT TO THE SHADOW BUFFER
         LA    R1,12(,R2)          POINT TO START OF INPUT AREA
         S     R1,SCREENBF         GET SCREEN OFFSET
         AR    R15,R1              POINT TO ITS SHADOW
         MVI   0(R15),X'32'        SET CODE FOR UNDERSCORE RED
         MVC   1(7,R15),0(R15)     UNDERSCORE RED FOR INPUT AREA
         L     R15,=A(CALCPOSI)    GET CONVERSION ROUTINE ENTRY POINT
         BASR  R14,R15             CONVERT FOR 3270 DATA STREAM
         STCM  R1,3,REVPOS+1       SET BUFFER ADDRESS FOR CURSOR
         MVI   REVPOS,SBA          SUPPLY ORDER
         MVI   REVPOS+3,IC         SUPPLY ORDER
         OI    STATUS10,$10ASP     ALTERNATE SCREEN SIZE PROMPT PANEL
         L     R15,=A(REVCOMM)     POINT TO SCREEN I/O ROUTINE
         BASR  R14,R15             DISPLAY SCREEN AND RECEIVE INPUT
         NI    STATUS10,255-$10ASP RESET PROMPTING PANEL FLAG
         OI    STATUS10,$10CDR     TELL ISPF TO RESEND WHOLE SCREEN
         MVI   MSG,29              REQUEST CANCELLED
         TM    STATUS4,$4ATTN      ATTENTION INTERRUPT?
         BO    SELCFAIL            YES, CANCEL REQUEST
         CLI   REPLY,ENTERAID      ENTER AID PRESENT?
         BNE   SELCODLP            NO, DISCARD THIS MEMBER ACTION
         L     R14,=A(KAPS)        POINT TO UPPER CASE TRANSLATE TABLE
         TR    12(8,R2),0(R14)     UPPER CASE INPUT NEW MEMBER NAME
         MVI   MSG,178             INVALID NAME
         MVC   RENMEMSV,12(R2)     SAVE NEW MEMBER NAME
         CLI   RENMEMSV,C' '       LEADING BLANK?
         BNH   RENRETRY            YES, GO REPROMPT
         LA    R14,RENMEMSV+7      POINT TO LAST MEMBER NAME CHARACTER
RENMNLP1 CLI   0(R14),C' '         TRAILING BLANK?
         BH    *+8                 NO, FOUND END OF MEMBER NAME
         BCT   R14,RENMNLP1        YES, BACK UP ONE
         LA    R0,RENMEMSV-1
         SR    R14,R0              GET NEW MEMBER NAME LENGTH
         LA    R15,RENMEMSV        POINT TO MEMBER NAME START
RENMNLP2 CLI   0(R15),C' '         IMBEDDED DELIMITER?
         BNH   RENRETRY            YES, GO REPROMPT
         CLI   0(R15),C','         IMBEDDED DELIMITER?
         BE    RENRETRY            YES, GO REPROMPT
         LA    R15,1(,R15)         POINT TO NEXT MEMBER NAME BYTE
         BCT   R14,RENMNLP2        VALIDATE WHOLE NEW MEMBER NAME
RENM3PT1 XC    CALLPARM(16),CALLPARM
         MVI   CALLPARM,X'C0'      USE ORIGINAL PARAMETER LIST FORMAT
         MVC   CALLSAVE(44),$DSNAME+2
         MVC   CALLSAVE+44(8),RENMEMSV
         ENQ   (POENQMAJ,CALLSAVE,E,52,SYSTEMS),RET=USE,MF=(E,CALLPARM)
         MVI   PUTLINS+12,2        FLAG EVENT RELATED TO NEW NAME
         LTR   R15,R15             SUCCESS?
         BNZ   RENMBUSY            NO, MEMBER ALREADY IN USE
         MVI   PUTLINS+12,0        FLAG EVENT RELATED TO OLD NAME
         OI    POFLAG,PFNEWNM      YES, FLAG EXTRA ENQ HELD
         NI    POFLAG,255-PFRESTOR NOT RESTORING A MEMBER
         B     DELDOPDS            GO DO OPEN AND RESERVE
         SPACE
RESETMEM TM    PO_FLG,$PODEL       IS THE MEMBER DELETED?
         BO    RSTORMEM            YES, TRY TO RESTORE IT
         TM    PO_FLG,$POTAG       IS THE MEMBER FLAGGED FOR OFFLOAD?
         BZ    RESTSTAT            NO, GO CHECK FOR RESTORE USERDATA
         NI    PO_FLG,255-$POTAG   RESET OFFLOAD SELECTION FLAG
         ICM   R0,15,TAGCOUNT      GET CURRENT TAGGED MEMBER COUNT
         BZ    SELCODLP            ALREADY ZERO SO SKIP DECREMENT
         BCTR  R0,0                DECREMENT TAGGED MEMBER COUNTER
         ST    R0,TAGCOUNT
         B     SELCODLP
RESTSTAT TM    STATUS15,$153PT5    OPTION 3.5 MEMBER LIST DISPLAY?
         BNO   SELCODLP            NO, TAKE NO ACTION
         TM    PO_IND,X'7F'        DOES MEMBER HAVE ANY USERDATA?
         BNZ   SELCODLP            YES, TAKE NO ACTION
*        B     RSTORMEM            NO, GO TRY TO RESTORE IT
         SPACE
RSTORMEM LA    R4,DELCHAIN         POINT TO THE CHAIN ORIGIN
RSTOLOOP LR    R5,R4               SAVE FOR ELEMENT REMOVAL
         ICM   R4,15,0(R4)         POINT TO THE NEXT ELEMENT
         BZ    RSTOFAIL            ELEMENT NOT FOUND ON CHAIN
         CLC   PO_MEM,4(R4)        FOUND THE REQUIRED ELEMENT?
         BNE   RSTOLOOP            NO, KEEP LOOKING
         OI    POFLAG,PFRESTOR     RESTORING, NOT DELETING A MEMBER
         B     DELDOPDS            CAN'T BE A PDSE TO GET HERE
RSTOFAIL TM    STATUS15,$153PT5    OPTION 3.5 MEMBER LIST DISPLAY?
         BO    SELCODLP            PRETEND IT WAS REDUNDANT RESET
         MVI   MSG,36              MEMBER NOT FOUND
         MVC   BLDLNAME,PO_MEM     SAVE MEMBER NAME FOR REVMSGS
         B     SELCFAIL            COULD NOT UNDELETE A MEMBER
         SPACE
*  NOTE THAT REVIEW2 COULD BE COUNTING THE MEMBER'S RECORDS USING
*  THE DCB OPENED FOR UPDATE IN REVPDS BECAUSE (IN ORDER TO REDUCE
*  OPEN/CLOSE OVERHEAD) PDSUPCLS WAS NOT CALLED BEFORE REVIEW2 WAS.
*  HOWEVER, SINCE THE DCB TEMPLATE WAS COPIED FROM REVIEW2, THE
*  CORRECT EODAD AND SYNAD EXIT ADDRESSES WILL BE SET IN THE DCB.
*
NEWSTATS OI    MODE,MD_OFFLD       NOW IN OFFLOAD MODE
         XC    MSGDSN,MSGDSN       CLEAR DIRECTORY ENTRY DETAILS
         L     R15,=A(REVIEW2)     GET ADDRESS OF PHASE 2
         BASR  R14,R15             CALL REVIEW PHASE 2
         NI    MODE,255-MD_OFFLD   NO LONGER IN OFFLOAD MODE
         CLI   MSG,36              MEMBER NOT FOUND?
         BE    SELCFAIL            YES
         CLI   MSG,112             I/O ERROR?
         BE    SELCFAIL            YES
         NI    BLDLINDC,X'80'      CLEAR PREVIOUS USERDATA
         XC    BLDLUSER(40),BLDLUSER
         MVC   BLDLBLNK,PDBLANKS
         L     R0,COUNT
         ICM   R1,3,COUNT          COUNT OVER 64K?
         BZ    NEWSTA15            NO
         OI    BLDLINDC,20         SET USERDATA HALFWORD COUNT
         STCM  R0,15,BLDLXCCT      YES
         STCM  R0,15,BLDLXICT
         MVI   BLDLFLGS,BLDLXSTA   FLAG EXTENDED STATISTICS
         SR    R1,R1
         BCTR  R1,0
         STCM  R1,15,BLDLCCNT      SET HALFWORD COUNTS TO HIGH VALUES
         B     NEWSTATM
NEWSTA15 OI    BLDLINDC,15         SET USERDATA HALFWORD COUNT
         STH   R0,BLDLCCNT
         STH   R0,BLDLICNT
NEWSTATM TIME  DEC
         STCM  R0,2,BLDLSECS
         STCM  R0,12,BLDLHHMM
         STCM  R1,15,BLDLCHGD
         STCM  R1,15,BLDLCRED
         MVI   BLDLVVMM,1
         L     R1,PSATOLD
         L     R1,TCBTIO-TCB(,R1)
         MVC   BLDLUSID,0(R1)
         OI    POFLG2,P2NEW        FLAG CREATING NEW STATISTICS
         SR    R15,R15             GET ZERO IN READINESS FOR RESET
         B     OLDSTATS            BRANCH TO EDIT SAVE STATS UPDATE
         SPACE
KILMEMBR OI    POFLG2,P2KIL        FLAG '¬' SELECTION CODE
         NI    POFLAG,255-PFRESTOR DELETING, NOT RESTORING A MEMBER
         B     DELDOPDS
DELMEMBR OI    POFLG2,P2DEL        FLAG 'D' SELECTION CODE
         NI    POFLAG,255-PFRESTOR DELETING, NOT RESTORING A MEMBER
         TM    DS1SMSFG,DS1PDSE    PROCESSING A PDSE?
         BZ    DELDOPDS            NO
         MVI   MSG,160             USE '¬' FOR PERMANENT MEMBER DELETE
         B     SELCFAIL            GO HANDLE FAILURE
         SPACE
DIR3PT1  LA    R0,DIRENTS-@PDSAREA GET WORKING STORAGE SIZE
         GETMAIN RC,LV=(0),LOC=(24,64)
         LTR   R15,R15             SUCCESS?
         BZ    DIR3PT1A            YES
         MVI   MSG,123             REQUEST ABORTED - STORAGE FULL
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         LA    R15,20              SET NON-ZERO RETURN CODE
         BR    R14                 RETURN TO CALLER
DIR3PT1A LR    R2,R1               POINT TO NEW STORAGE
         LA    R3,DIRENTS-@PDSAREA GET LENGTH TO CLEAR
         MVCL  R2,R14              R15=0 - ZERO NEW STORAGE
         ST    R13,4(,R1)
         ST    R1,8(,R13)          CHAIN SAVE AREAS
         LR    R13,R1              POINT TO WORKING STORAGE
         LA    R0,DIRENTS-@PDSAREA GET WORKING STORAGE SIZE
         STM   R0,R1,FREEMRGS      SAVE FREEMAIN VALUES
         LA    R0,DIRENTS          POINT PAST WORKING STORAGE
         ST    R0,LSTMEMAD         SAVE ADDRESS - JUST IN CASE
         MVI   POFLAG,PF3PT1       JUST HERE FOR OPTION 3.1 MENU ACTION
         LA    R3,PUTLINS+4        POINT TO SUBJECT MEMBER NAME
         MVC   RENMEMSV,PUTLINS+12 COPY NEW MEMBER NAME
         CLI   PUTLINS+3,C'D'      HERE TO RENAME A MEMBER?
         BNE   RENM3PT1            YES, DETOUR TO ENQ NEW NAME FIRST
         SPACE
DELDOPDS XC    MSG(2),MSG          RESET FAILURE INDICATOR
         TM    POFLAG,PFUPDT       DCB ALREADY OPEN FOR UPDATE?
         BO    DELOPNOK            YES
         TM    STATUS,STOPEN       IS THE DCB OPEN?
         BZ    DELOPNUP            NO, READY TO TRY OPEN
         MVI   CLOSED,X'80'        YES, SO CLOSE IT
         CLOSE (DYNDCBW),MF=(E,CLOSED)
         NI    STATUS,255-STOPEN   CLOSED
DELOPNUP L     R1,=A(PDSDCB)       LOAD BPAM DCB
         MVC   DYNDCBW(PDSDCBL),0(R1)
         AIF   (NOT &ENVBIG).DELINIT
         NI    STATUS14,255-$14BIG
         CLI   OSBITS,X'9B'        MVS/ESA OR LATER?
         BNE   DELSETDD            NO, SO CANNOT BE Z/OS
         L     R15,CVTPTR(,0)      POINT TO THE CVT
         USING CVT,R15
         TM    CVTOSLV6,X'80'      CVTH7790 - Z/OS VERSION 2 OR LATER?
         BNO   DELSETDD            NO, THIS IS BEFORE HBB7790
         DROP  R15                 CVT
         TM    DS1SMSFG,DS1PDSE    PDSE?
         BNO   DELSETDD            NO, USE TTR0 NOTE/POINT VALUES
         L     R15,=A(SEQDCBE)     POINT TO RELEVANT DCBE
         L     R14,=A(PDSDCB2)     POINT TO MODEL DCB
         MVC   DYNDCBW(PDSDCBL),0(R14)
         MVC   DYNDCBEW,0(R15)     LOAD APPROPRIATE DCBE
         LA    R0,DYNDCBEW         SET THE DCBE ADDRESS
         ST    R0,DCBDCBE-IHADCB+DYNDCBW
         OI    STATUS14,$14BIG     FLAG USING TTTR INSTEAD OF TTR0
.DELINIT ANOP
DELSETDD MVC   DCBDDNAM-IHADCB+DYNDCBW,$DDNAME
         MVI   DCBMACR2-IHADCB+DYNDCBW,DCBMRWRT+DCBMRPT2
         LA    R0,PDSDCB3X         SET DCB EXIT LIST
         STCM  R0,7,DCBEXLSA-IHADCB+DYNDCBW
         MVI   OPEND,X'80'
         OPEN  (DYNDCBW,UPDAT),MF=(E,OPEND)
         TM    STATUS,STABEND      DID OPEN ABEND?
         BNO   DELOPNCK            NO, CHECK IF THE FILE IS OPEN
         NI    STATUS,255-STABEND  YES, RESET THE FLAG
         B     DELOPNBD            SHOW THE ABEND CODE IN THE MESSAGE
*                                       LOADED BY THE DCB ABEND EXIT
DELOPNCK TM    DCBOFLGS-IHADCB+DYNDCBW,X'10'
         BO    DELOPNOK            OPEN FOR UPDATE SUCCESSFUL
         MVI   MSG,159             OPEN FAILED
         B     DELOPNBD
DELOPNOK OI    STATUS,STOPEN       FILE IS NOW OPEN
         OI    POFLAG,PFUPDT               FOR UPDATE
         MVC   OAIADDN,$DDNAME     SET DATA DEFINITION NAME
         MVC   OAIADSN,$DSNAME+2   SET DATA SET NAME
         MVC   OAIAMEM,PO_MEM      SET MEMBER NAME
         MVC   OAIAUCB,$UCBAD      SET UCB ADDRESS
         OI    STATUS12,$12ENQ     REQUEST SERIALIZATION ONLY
         LA    R1,PO_OAIA          POINT ALLOCATION COMMUNICATION AREA
         L     R15,=A(REVALCO)     POINT TO ALLOCATION ROUTINE
         BASR  R14,R15             SERIALIZE OUTPUT FILE
         LTR   R15,R15             PROCEED WITH UPDATE?
         BZ    DELBLDL             YES
         NI    STATUS12,255-$12ENQ NO, RESET FLAG
RENMBUSY MVI   MSG,54              MEMBER IN USE
DELOPNBD TM    POFLAG,PFNEWNM      REALLY HERE TO RENAME?
         BNO   DELDEQOK            NO, READY TO RETURN
         XC    CALLPARM(16),CALLPARM
         MVI   CALLPARM,X'C0'      USE ORIGINAL PARAMETER LIST FORMAT
         MVC   CALLSAVE(44),$DSNAME+2
         MVC   CALLSAVE+44(8),RENMEMSV
         DEQ   (POENQMAJ,CALLSAVE,52,SYSTEMS),RET=NONE,MF=(E,CALLPARM)
         NI    POFLAG,255-PFNEWNM  EXTRA ENQUEUE NOW RELEASED
DELDEQOK TM    POFLAG,PF3PT1       JUST HERE FOR OPTION 3.1?
         BNO   SELCFAIL            NO, SELECTION CODE ACTION FAILED
         B     DIREXIT             YES, RETURN TO IT
DELBLDL  TM    POFLAG,PFRESTOR     REALLY HERE TO RESTORE?
         BO    RSTOSTAT            YES, GO DO IT
         TM    POFLG2,P2NEW        REALLY HERE TO MAKE NEW STATS?
         BO    SETNSTAT            YES, GO DO IT
         MVC   BLDLNAME,PO_MEM     LOAD MEMBER NAME
         TM    POFLAG,PFNEWNM      REALLY HERE TO RENAME?
         BO    RENSTOW             YES, GO DO IT
         BLDL  DYNDCBW,BLDL        SEARCH FOR MEMBER TO BE DELETED
         IC    R0,MSG              PRESERVE MESSAGE INDICATOR
         MVI   MSG,36              MEMBER NOT FOUND
         LTR   R15,R15             FOUND IT?
         BZ    DELDOSTG            YES, PROCEED
         AIF   (NOT &ENVZV2).GENOK9
         TM    STATUS15,$15GEN     SHOWING GENERATION DATA?
         BNO   DELDODEQ            NO, IT SEEMS IT IS ALREADY GONE
         ICM   R1,15,PO_PTR
         USING PX_SECT,R1
         ICM   R0,15,PX_GNUM       IS THIS A MEMBER GENERATION?
         BNZ   DELDOSTG            YES, BUT IT HAS NO CURRENT MEMBER
         DROP  R1                  PX_SECT
.GENOK9  ANOP
         B     DELDODEQ            IT SEEMS IT IS ALREADY GONE
DELDOSTG STC   R0,MSG              CLEAR NOT FOUND MESSAGE
         TM    POFLAG,PF3PT1       JUST HERE FOR OPTION 3.1?
         BO    DELDELDO            YES, NO RESTORE (NAME WAS TYPED)
         TM    DS1SMSFG,DS1PDSE    PDSE?
         AIF   (NOT &ENVZV2).GENOK7
         BNO   DELBAKUP            NO, GET STORAGE FOR RESTORE DATA
         TM    STATUS15,$15GEN     SHOWING GENERATION DATA?
         BNO   DELDELDO            NO, GO DELETE PDSE MEMBER
         ICM   R1,15,PO_PTR
         USING PX_SECT,R1
         ICM   R0,15,PX_GNUM       IS THIS A MEMBER GENERATION?
         BZ    DELDELDO            NO, GO DELETE PDSE MEMBER
         DROP  R1                  PX_SECT
         LA    R14,BLDL+40         POINT TO PARAMETER AREA
         XC    0(20,R14),0(R14)    CLEAR IT
         MVI   1(R14),20           SET LENGTH INDICATOR
         MVC   8(8,R14),PO_MEM     SET MEMBER NAME
         ST    R0,16(,R14)         SET GENERATION NUMBER
         STOW  DYNDCBW,(R14),DG    DELETE THE GENERATION
         B     DELDELCK            GO CHECK FOR SUCCESS
         AGO   .GENOK8
.GENOK7  ANOP
         BO    DELDELDO            YES, NO RESTORE FOR PDSE
.GENOK8  ANOP
DELBAKUP TM    POFLG2,P2STAT       HERE TO MERGE OVERTYPED STATS?
         BO    MRGSTATS            YES, GO DO IT
         LA    R0,80               GET SIZE OF STORAGE TO ACQUIRE
         MVI   GETMNTRC,52         TRACK GETMAIN IN CASE OF FAILURE
         GETMAIN RC,LV=(0),SP=1,LOC=(31,64)
         LTR   R15,R15             ACQUIRED DIRECTORY ENTRY SAVE AREA?
         BZ    DELDODEL            YES, PROCEED
         TM    POFLG2,P2DEL        'D' SELECTION CODE?
         BZ    DELDODEL            NO, PROCEED
         MVI   MSG,123             REQUEST ABORTED - STORAGE FULL
         B     SELCFAIL            GO HANDLE FAILURE
         USING PX_SECT,R4
MRGSTATS ICM   R0,7,BLDLTTRP       GET THE TTR
         STCM  R0,7,BLDLTTRP+2     MOVE IT ALONG BEFORE BLDLINDC
         MVC   BLDLNAME+2,PO_MEM   PUT MEMBER NAME INTO STOW FORMAT
         MVC   BLDLVVMM,PX_VER     UPDATE VERSION AND LEVEL
         MVC   BLDLUSID,PX_USER    UPDATE USER ID
         TIME  DEC                 GET THE CURRENT TIME AND DATE
         STCM  R0,2,BLDLSECS       UPDATE STOW DATA
         STCM  R0,12,BLDLHHMM
         STCM  R1,15,BLDLCHGD
         STCM  R1,15,PX_CHA        UPDATE INTERNAL ENTRY
         STCM  R0,14,PX_CHA+4
         STOW  DYNDCBW,BLDLNAME+2,R
         LTR   R15,R15             SUCCESSFUL STATISTICS CHANGE?
         BZ    DELDODEQ            YES
         MVC   BLDLNAME,BLDLNAME+2 NO, SAVE MEMBER NAME FOR REVMSGS
         B     STORSTOW            SHOW THE RETURN CODE
         DROP  R4                  PX_SECT
RENSTOW  MVC   BLDLNAME+8(8),RENMEMSV
         STOW  DYNDCBW,BLDLNAME,C  CHANGE THE MEMBER NAME
         LR    R5,R15              SAVE THE STOW RETURN CODE
         XC    CALLPARM(16),CALLPARM
         MVI   CALLPARM,X'C0'      USE ORIGINAL PARAMETER LIST FORMAT
         MVC   CALLSAVE(44),$DSNAME+2
         MVC   CALLSAVE+44(8),RENMEMSV
         DEQ   (POENQMAJ,CALLSAVE,52,SYSTEMS),RET=NONE,MF=(E,CALLPARM)
         NI    POFLAG,255-PFNEWNM  EXTRA ENQUEUE NOW RELEASED
         LTR   R15,R5              RESTORE THE STOW RETURN CODE
         BZ    RENOWNEW            MEMBER NOW HAS A NEW NAME
         STC   R15,POSTOWRC        STORE STOW RETURN CODE
         CLI   POSTOWRC,4          NEW NAME ALREADY EXISTS?
         BNE   SHOWSTOW            NO, GO SHOW THE RETURN CODE
         MVI   MSG,142             MEMBER NAME ALREADY EXISTS
         MVI   PUTLINS+12,2        FLAG EVENT RELATED TO NEW NAME
         B     DELDODEQ            NOW FREE OTHER RESOURCES
RENOWNEW MVC   PO_MEM,RENMEMSV     UPDATE INCORE MEMBER ENTRY
         ICM   R0,3,MSG            ANY MESSAGE PENDING?
         BNZ   DELDODEQ            YES, DO NOT OVERLAY IT
         MVI   MSG,208             MEMBER RENAMED
         B     DELDODEQ            NOW FREE OTHER RESOURCES
DELDODEL XC    0(80,R1),0(R1)      CLEAR THE STORAGE
         MVC   0(4,R1),DELCHAIN    ADD THIS ELEMENT TO THE CHAIN
         ST    R1,DELCHAIN         UPDATE CHAIN ORIGIN
         MVC   4(8+3,R1),BLDLNAME  COPY MEMBER NAME AND START TTR
         MVC   15(63,R1),BLDLINDC  COPY MEMBER'S USER DATA
         MVC   79(1,R1),PO_FLG     SAVE PRE-DELETE INTERNAL FLAG BYTE
         TM    STATUS15,$153PT5    OPTION 3.5 MEMBER LIST DISPLAY?
         BNO   DELDELDO            NO, REALLY DELETING THE MEMBER
         MVC   BLDLTTRP+3(1),BLDLINDC
         NI    BLDLTTRP+3,X'80'    CLEAR USERDATA FOR STOW
         STOW  DYNDCBW,BLDLNAME,R  REMOVE MEMBER'S USERDATA
         LTR   R15,R15             SUCCESS?
         BNZ   STORSTOW            NO
         TM    PO_FLG,$POSSI1      DOES PO_PTR CONTAIN SSI?
         BNO   *+8                 NO
         STCM  R15,15,PO_PTR       YES, CLEAR IT
         NI    PO_IND,X'80'        RESET INTERNAL USERDATA INDICATORS
         NI    PO_FLG,255-$POSSI1-$POSPF
         B     DELDODEQ            YES
DELDELDO STOW  DYNDCBW,BLDLNAME,D  DELETE THE MEMBER
DELDELCK LTR   R15,R15             SUCCESS?
         BZ    DELDELOK            YES
STORSTOW STC   R15,POSTOWRC        NO, SHOW STOW RETURN CODE
SHOWSTOW CLI   POSTOWRC,8          OLD NAME GONE?
         BNE   STOWSHOW            NO, GO SHOW THE RETURN CODE
         MVI   MSG,36              MEMBER NOT FOUND
         B     DELDODEQ            NOW FREE OTHER RESOURCES
STOWSHOW MVC   MSG+2(8),=CL8'STOW RC='
         UNPK  MSG+10(3),POSTOWRC(2)
         TR    MSG+10(2),POHEX-240
         MVI   MSG+12,C' '
         LA    R0,10
         STH   R0,MSG              SET MESSAGE LENGTH
         OI    STATUS7,$7BELL      REQUEST AUDIBLE ALARM
         B     DELDODEQ
DELDELOK OI    PO_FLG,$PODEL       FLAG DELETED
         NI    PO_FLG,255-$POTAG   ENSURE DELETED MEMBER NOT TAGGED
         ICM   R1,3,MSG            ANY MESSAGE SET?
         BNZ   DELDODEQ            YES, DO NOT OVERLAY
         MVI   MSG,209             MEMBER DELETED
         ICM   R1,15,DELCHAIN      POINT TO DELETED MEMBER SAVE DETAILS
         BZ    DELDODEQ            NO SUCH DETAILS HAVE BEEN SAVED
         CLC   PO_MEM,4(R1)        THIS MEMBER SAVED MOST RECENTLY?
         BNE   DELDODEQ            NO, CANNOT RESTORE THIS MEMBER
         MVI   MSG,184             MEMBER DELETED - USE 'R' TO RESTORE
DELDODEQ LA    R1,PO_OAIA          POINT ALLOCATION COMMUNICATION AREA
         L     R15,=A(REVDALO)     POINT TO ALLOCATION ROUTINE
         BASR  R14,R15             RELEASE SERIALIZATION
         TM    POFLAG,PF3PT1       JUST HERE FOR OPTION 3.1?
         BO    DIREXIT             YES, RETURN TO IT
         TM    POFLG2,P2STAT       MERGED OVERTYPED STATISTICS?
         BO    DIRMRGNX            YES, GO LOOK AT NEXT SCREEN LINE
         CLI   MSG,142             MEMBER NAME ALREADY EXISTS?
         BE    RENRETRY            YES, GO REPROMPT
         ICM   R0,3,MSG            SUCCESS?
         BZ    SELCODLP            YES, MEMBER PROCESSED
         CLI   MSG,184             MEMBER DELETED?
         BE    SELCODLP            YES, MEMBER PROCESSED
         CLI   MSG,208             MEMBER RENAMED?
         BE    SELCODLP            YES, MEMBER PROCESSED
         CLI   MSG,209             MEMBER DELETED?
         BE    SELCODLP            YES, MEMBER PROCESSED
         TM    STATUS15,$153PT5    OPTION 3.5 MEMBER LIST DISPLAY?
         BO    SELCODLP            YES, MEMBER PROCESSED
         B     SELCFAIL            NO, GO HANDLE FAILURE
         SPACE
RSTOSTAT MVC   BLDLNAME(76),4(R4)  MOVE STOW DATA BELOW THE LINE
         TM    STATUS15,$153PT5    JUST RESTORING THE USERDATA?
         BNO   RSTOSTOW            NO, RESTORING THE MEMBER
         STOW  DYNDCBW,BLDLNAME,R  RESTORE THE MEMBER'S USERDATA
         LTR   R15,R15             SUCCESS?
         BNZ   STORSTOW            NO, SHOW THE RETURN CODE
         MVC   PO_IND,15(R4)       RESTORE COPY OF MEMBER INDICATOR
         MVC   PO_FLG,79(R4)       RESTORE INTERNAL FLAG BYTE
         TM    PO_FLG,$POSSI1      SHOULD PO_PTR CONTAIN SSI?
         BNO   RSTOFREE            NO
         MVC   PO_PTR,16(R4)       YES, COPY RESTORED SSI VALUE
         B     RSTOFREE
RSTOSTOW MVC   DCBRELAD-IHADCB+DYNDCBW(3),BLDLTTRP
         STOW  DYNDCBW,BLDLNAME,A  RESTORE THE MEMBER
         LTR   R15,R15             SUCCESS?
         BNZ   STORSTOW            NO, SHOW THE RETURN CODE
RSTOFREE MVC   PO_TTR,4+8(R4)      YES, SHOW THE CORRECT TTR
         NI    PO_FLG,255-$PODEL   RESET DELETED MEMBER FLAG
         MVC   0(4,R5),0(R4)       REMOVE THIS ELEMENT FROM THE CHAIN
         FREEMAIN RU,LV=80,A=(R4),SP=1
         B     DELDODEQ
         SPACE
SETNSTAT MVC   BLDLNAME+2,PO_MEM   COMPLETE FORMAT OF STOW DATA
         MVC   BLDLTTRP+2,PO_TTR
         NI    POFLG2,255-P2NEW    ABOUT TO COMPLETE NEWSTATS REQUEST
         STOW  DYNDCBW,BLDLNAME+2,R
         MVC   BLDLNAME,BLDLNAME+2 SAVE MEMBER NAME FOR REVMSGS
         LTR   R15,R15             SUCCESS?
         BNZ   STORSTOW            NO, SHOW THE RETURN CODE
         B     DELDODEQ
         SPACE
PDSUPCLS TM    POFLAG,PFUPDT       DCB OPEN FOR UPDATE?
         BNOR  R14                 NO, NO NEED TO CLOSE IT
         ST    R14,DOWNR           YES, SAVE THE RETURN ADDRESS
         MVI   CLOSED,X'80'        SO CLOSE IT
         CLOSE (DYNDCBW),MF=(E,CLOSED)
         NI    STATUS,255-STOPEN   CLOSED
         NI    POFLAG,255-PFUPDT
         L     R14,DOWNR           RESTORE RETURN ADDRESS
         BR    R14                 RETURN TO CALLER
         DROP  R3                  PO_SECT
         SPACE
PDSDCB3A TM    3(R1),X'04'         OKAY TO IGNORE?
         BZR   R14                 NO
         OI    STATUS,STABEND      INDICATE OPEN ABENDED
         MVC   MSG+2(16),=CL16'OPEN ABENDED - S'
         UNPK  MSG+18(7),0(4,R1)
         TR    MSG+18(6),POHEX-240
         MVI   MSG+21,C'-'
         MVI   MSG+24,C' '
         LA    R0,22
         STH   R0,MSG
         OI    STATUS7,$7BELL      REQUEST AUDIBLE ALARM
         MVI   3(R1),4             IGNORE THE ABEND
         BR    R14
         SPACE
**********************************************************************
*                                                          *         *
*         FREE THE DELETE AND NEW USER DATA CHAINS         *  R42.1  *
*                                                          * JAN2009 *
**********************************************************************
         SPACE
PODELFRE ICM   R1,15,DELCHAIN      POINT TO THE ELEMENT TO FREE
         BZ    POSTAFRE            THE CHAIN IS NOW EMPTY
         MVC   DELCHAIN,0(R1)      SAVE ADDRESS OF NEXT ELEMENT
         FREEMAIN RU,LV=80,A=(1),SP=1
         B     PODELFRE
         SPACE
         USING PX_SECT,R1
POSTAFRE ICM   R1,15,STACHAIN      POINT TO THE ELEMENT TO FREE
         BZR   R4                  THE CHAIN IS NOW EMPTY
         MVC   STACHAIN,PX_CHN     SAVE ADDRESS OF NEXT ELEMENT
         FREEMAIN RU,LV=$PXDYNL,A=(1),SP=1
         B     POSTAFRE
         DROP  R1                  PX_SECT
         SPACE
         SPACE
**********************************************************************
*                                                          *         *
*         PROCESS SEARCH REQUEST                           *  GP@FT  *
*                                                          *  08/96  *
**********************************************************************
         SPACE
POSEARCH NI    STATUS8,255-$8_S    NO CLUES PRESENT IN MSGDSN
         TM    STATUS13,$13MSEL    HERE FOR MEMBER SELECTION?
         BO    NOTPOCMD            YES, COMMAND NOT ALLOWED
         LA    R15,DIRENTS         POINT TO FIRST ENTRY
         C     R15,LSTMEMAD        ANY MEMBERS IN THIS PDS?
         BNL   PONOMEMS            NO, NOTHING TO DO
         BAS   R14,PDSUPCLS        IF UPDATE FILE OPEN THEN CLOSE IT
         TM    OPD1+6,PRESENT      ANY OPERAND(S) PRESENT?
         BNO   PODOSRCH            NO
         LH    R1,OPD1+4           YES, GET OPERAND LENGTH
         LTR   R0,R1               NULL STRING?
         BNP   PODOSRCH            YES, AS IF NO OPERAND
         BCTR  R0,0                GET LENGTH CODE
         STH   R0,STRINGL          SAVE IT
         L     R0,OPD1             POINT TO OPERAND
         LA    R14,STRING          POINT TO TARGET
         LA    R15,L'STRING        GET ITS LENGTH
         MVCL  R14,R0              LOAD SEARCH STRING
         ST    R15,FINDCOL1        RESET COLUMNS
         MVI   FINDCOL2,X'7F'
         MVI   FINDSW,0            RESET FIND OPTIONS
         MVI   FINDSW2,FUOL
PODOSRCH L     R15,=A(REVSRCH)     POINT TO SEARCH PROCESSOR ROUTINE
         NI    STATUS10,255-$10CAP ALLOW SEARCH FOR LOWER CASE
         CALL  (15),               CALL SEARCH PROCESSOR               +
               (DIRENTS,           ADDRESS OF FIRST ENTRY              +
               LSTMEMAD,           ADDRESS OF LAST ENTRY POINTER       +
               PO_FLG-PO_SECT,     OFFSET OF TAG FLAG                  +
               255,                FLAG ENTRY LENGTH AS BEING $POSIZ   +
               PO_MEM-PO_SECT),    OFFSET OF MEMBER NAME               +
               MF=(E,MYPPL)
         TM    STATUS17,$17S34     DATA SEARCH SCAN ACTIVE?
         BO    DIREXIT             YES, EXIT BACK TO REVLEVL
         OI    STATUS10,$10CAP     SET CAPS ON
         MVI   READR,X'80'         RESET UTILITY PROGRAM INDICATOR
         MVI   MSG,85              SEARCH INTERRUPTED
         TM    STATUS4,$4ATTN      ATTENTION INTERRUPT?
         BO    SAMEMEMS            YES, NOTIFY USER
         MVI   MSG,86              SEARCH CANCELLED
         CLI   REPLY,ENTERAID      ENTER AID PRESENT?
         BNE   SAMEMEMS            NO, SEARCH HAS BEEN CANCELLED
SHOTAGCT MVI   MSG,87              SEARCH COMPLETE
         L     R15,=A(REVMSGS)
         BASR  R14,R15             FETCH MESSAGE TEXT
         L     R0,TAGCOUNT         GET MATCHED MEMBER COUNT
         CVD   R0,DOUBLE
         MVC   MSG+2+17(10),ED9
         ED    MSG+2+17(10),DOUBLE+3
         LH    R0,MSG              GET THE LENGTH OF MSG87
SRCHDMLP CLI   MSG+18+2,C' '       LEADING BLANK?
         BNE   SAMEMEMS            NO, MESSAGE FORMATTED
         MVC   MSG+2+18(25),MSG+2+19
         BCTR  R0,0
         STH   R0,MSG              DECREMENT MESSAGE LENGTH
         B     SRCHDMLP            REPEAT LEADING BLANK CHECK
         SPACE
         SPACE
**********************************************************************
*                                                          *         *
*         PROCESS PDS UPDATE REQUEST                       *  GP@P6  *
*                                                          *  03/99  *
**********************************************************************
         SPACE
PDSUPDTE TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    NOTPOCMD            YES, COMMAND NOT ALLOWED
         TM    STATUS13,$13MSEL    HERE FOR MEMBER SELECTION?
         BO    NOTPOCMD            YES, COMMAND NOT ALLOWED
         TM    STATUS15,$15COPY    HERE TO COPY MEMBERS?
         BO    NOTPOCMD            YES, COMMAND NOT ALLOWED
         TM    STATUS15,$153PT5    OPTION 3.5 MEMBER LIST DISPLAY?
         BO    NOTPOCMD            YES, COMMAND NOT ALLOWED
         BAS   R14,PDSUPCLS        IF UPDATE FILE OPEN THEN CLOSE IT
         L     R15,=A(REVLOAD)     POINT TO UPDATE PROCESSOR ROUTINE
         BASR  R14,R15             CALL UPDATE PROCESSOR
         TM    READR,X'80'         WAS UPDATE UTILITY INVOKED?
         BO    SAMEMEMS            NO, DO NOT REFRESH FROM DISK
         LA    R1,DIRENTS          YES, POINT TO PREVIOUS FIRST MEMBER
         C     R1,TOPMEMAD         SHOWING TOP OF LIST?
         BNE   *+8                 NO, TRY TO SHOW SAME MEMBER AT TOP
         OI    STATUS,STNOMEM      YES, SHOW NEW LIST FROM TOP ALSO
         B     RDYRFRSH            REVLOAD SHOULD PUT CODE INTO READR
         SPACE
         SPACE
**********************************************************************
*                                                          *         *
*         PROCESS DELINK REQUEST                           *  GP@P6  *
*                                                          *  05/99  *
**********************************************************************
         SPACE
PODELINK TM    STATUS13,$13MSEL    HERE FOR MEMBER SELECTION?
         BO    NOTPOCMD            YES, COMMAND NOT ALLOWED
         TM    STATUS15,$15COPY    HERE TO COPY MEMBERS?
         BO    NOTPOCMD            YES, COMMAND NOT ALLOWED
         TM    DS1RECFM,DCBRECU    RECFM=U?
         BNO   DLORGBAD            NO, CAN'T BE LOAD MODULE PDS
         TM    DS1SMSFG,DS1PDSE    PDSE?
         BNZ   DLORGBAD            YES, CAN'T BE LOAD MODULE PDS
         TM    OPD1+6,PRESENT      ANY OPERAND(S) PRESENT?
         BO    DIRBADOP            YES, BETTER REJECT THE COMMAND
         LA    R15,DIRENTS         POINT TO FIRST ENTRY
         C     R15,LSTMEMAD        ANY MEMBERS IN THIS PDS?
         BNL   PONOMEMS            NO, NOTHING TO DO
         LA    R1,PO_OAIA          POINT ALLOCATION COMMUNICATION AREA
         L     R15,=A(REVALCO)     POINT TO ALLOCATION ROUTINE
         BASR  R14,R15             ALLOCATE OUTPUT FILE
         LTR   R15,R15             PROCEED WITH OUTPUT?
         BNZ   SAMEMEMS            NO, REQUEST CANCELLED
         L     R15,=A(REVDLNK)     POINT TO DELINK PROCESSOR ROUTINE
         BASR  R14,R15             CALL DELINK PROCESSOR
         LA    R1,PO_OAIA          POINT ALLOCATION COMMUNICATION AREA
         L     R15,=A(REVDALO)     POINT TO ALLOCATION ROUTINE
         BASR  R14,R15             DEALLOCATE OUTPUT FILE
         SR    R3,R3               FLAG DELINK COMPLETION PROCESSING
         TM    READR,X'80'         WAS DELINK UTILITY INVOKED?
         BZ    DELINKOK            YES, SHOW TASK COMPLETION CODE
         MVI   MSG,100             REQUEST ABORTED - ALLOCATION FAILED
         B     SAMEMEMS            DELINK WAS NOT RUN
DLORGBAD MVI   MSG,91              NEEDS NON-PDSE PDS WITH RECFM=U
         B     SAMEMEMS            NO DELINK DONE SO SHOW THE MESSAGE
         SPACE
         SPACE
**********************************************************************
*                                                          *         *
*         TOGGLE TAG FLAG FOR ALL MEMBERS                  *  GP@FT  *
*                                                          *  10/96  *
**********************************************************************
         SPACE
TAGFLIP  SR    R14,R14             FLIP ALL TAG BITS
         ST    R14,TAGCOUNT        RESET TAGGED MEMBER COUNTER
         LA    R15,DIRENTS         POINT TO FIRST ENTRY
         USING PO_SECT,R15
TAGLOOP  C     R15,LSTMEMAD        REACHED END OF MEMBER LIST?
         BNL   SELCDCHK            YES, NOW LOOK AT MEMBER SELECTION(S)
         TM    PO_FLG,$PODEL       IS THE MEMBER DELETED?
         BO    TAGCNTOK            YES, DO NOT ALTER IT
         XI    PO_FLG,$POTAG       NO, TOGGLE TAG FLAG
         TM    PO_FLG,$POTAG       IS THE MEMBER NOW TAGGED?
         BZ    TAGCNTOK            NO, NOW UNTAGGED SO DO NOT COUNT
         LA    R14,1(,R14)         YES, INCREMENT COUNTER
         ST    R14,TAGCOUNT        UPDATE COUNTER IN CASE LAST TAG
TAGCNTOK LA    R15,$POSIZ(,R15)    POINT TO NEXT MEMBER
         B     TAGLOOP             PROCESS NEXT MEMBER
         DROP  R15                 PO_SECT
         SPACE
         SPACE
**********************************************************************
*                                                          *         *
*         DISPLAY FROM THE NEXT TAGGED MEMBER              *  GP@FT  *
*                                                          *  10/96  *
**********************************************************************
         SPACE
         USING PO_SECT,R3
FINDTAG  LM    R3,R4,TOPMEMAD      GET CURRENT TOP ENTRY DETAILS
         C     R3,LSTMEMAD         IS IT END-OF-DIRECTORY?
         BL    FNDTAGLP            NO
         LA    R3,DIRENTS          YES, POINT TO THE FIRST ENTRY
         SR    R4,R4               FIRST ENTRY IS NUMBER ZERO
         B     FINDTAG1            HANDLE IF FIRST MEMBER TAGGED
FNDTAGLP LA    R3,$POSIZ(,R3)      POINT TO NEXT ENTRY
         LA    R4,1(,R4)           INCREMENT ENTRY NUMBER
FINDTAG1 C     R3,LSTMEMAD         REACHED END OF DIRECTORY?
         BNL   THISMEM             YES, END CURRENT SCAN
         TM    PO_FLG,$POTAG       IS THIS MEMBER TAGGED?
         BO    THISMEM             YES, TAGGED MEMBER FOUND
         B     FNDTAGLP            CONTINUE SCAN
         SPACE
         SPACE
**********************************************************************
*                                                          *         *
*         UNTAG ALL MEMBERS WITHOUT REFRESH FROM FILE      *  GP@FT  *
*                                                          *  10/96  *
**********************************************************************
         SPACE
TAGRESET SR    R0,R0               RESET ALL TAG FLAGS
         ST    R0,TAGCOUNT         NO MEMBERS WILL BE TAGGED
         LA    R3,DIRENTS          POINT TO THE FIRST ENTRY
TAGRESLP C     R3,LSTMEMAD         END OF MEMBER LIST?
         BNL   SAMEMEMS            YES
         NI    PO_FLG,255-$POTAG   RESET MEMBER TAG FLAG
         LA    R3,$POSIZ(,R3)      NO, POINT TO NEXT ENTRY
         B     TAGRESLP            CONTINUE PASS THROUGH MEMBER LIST
         DROP  R3                  PO_SECT
         SPACE
         SPACE
**********************************************************************
*                                                          *         *
*         DISPLAY DATA SET ATTRIBUTES                      *  GP@P6  *
*                                                          * APR2008 *
**********************************************************************
         SPACE
PDSINFO  L     R15,=A(REVDSCB)     GET ROUTINE ENTRY POINT
         BASR  R14,R15             INVOKE IT
         B     SAMEMEMS            REFRESH DISPLAY
         SPACE
         SPACE
**********************************************************************
*                                                          *         *
*         FIND MEMBER NAME PATTERN MATCHES                 *  GP@P6  *
*                                                          * SEP2018 *
**********************************************************************
         SPACE
DIRPATEN TM    OPD1+6,PRESENT      ANY OPERAND SPECIFIED?
         BNO   DIRMISOP            NO, REQUIRED OPERAND MISSING
         TM    OPD2+6,PRESENT      TOO MANY OPERANDS?
         BO    DIR2MANY            YES
         CLI   OPD1+5,0            NULL STRING OPERAND?
         BE    DIRBADOP            YES, INVALID
         LH    R2,OPD1+4           GET THE OPERAND LENGTH
         LA    R0,8
         CLR   R0,R2               OPERAND LENGTH MORE THAN 8?
         BL    DIRBADOP            YES, INVALID
         L     R1,OPD1             POINT TO THE OPERAND
         MVC   MEMPATEN,0(R1)      COPY MASK TO HOLD AREA
         MVC   RENMEMSV,PDBLANKS   BLANK BYTES AFTER MASK HOLD AREA
         BE    DIRPATA3            SKIP A BIT IF LENGTH IS 8
         L     R3,OPD0             POINT TO THE COMMAND
         CLI   0(R3),C'P'          IS THIS A 'PATTERN' COMMAND?
         BNE   DIRPATA3            NO
         LA    R15,MEMPATEN+7      POINT TO 8TH BYTE IN MASK PATTERN
         CLI   0(R1),C'*'          LEADING ASTERISK IN PATTERN?
         BE    DIRPATA1            YES, SO SAME AS 'MEMBER' COMMAND
         CLI   0(R1),C'%'          LEADING PERCENT IN PATTERN?
         BE    DIRPATA1            YES, SO SAME AS 'MEMBER' COMMAND
         MVI   MEMPATEN,C'*'       INSERT LEADING ASTERISK
         MVC   MEMPATEN+1(7),0(R1) APPEND SUPPLIED MASK
DIRPATA1 CLI   0(R15),C'*'         TRAILING ASTERISK?
         BE    DIRPATA3            YES, NO ADJUSTMENT NECESSARY
         CLI   0(R15),C' '         TRAILING BLANK?
         BNE   DIRPATA2            NO
         BCT   R15,DIRPATA1        YES, BACK UP 1 AND RECHECK
DIRPATA2 MVI   1(R15),C'*'         APPEND TRAILING ASTERISK
DIRPATA3 LA    R15,PATNPREP        POINT TO PREPARATION ROUTINE
         BASR  R14,R15             PREPARE THE MASK FOR MATCHING
         LA    R3,DIRENTS          POINT TO THE FIRST ENTRY
         USING PO_SECT,R3
         SR    R0,R0
         ST    R0,TAGCOUNT         RESET TAG COUNTER
DIRPATLP C     R3,LSTMEMAD         END OF MEMBER LIST?
         BNL   SHOTAGCT            YES, GO SHOW TAGGED COUNT
         TM    PO_FLG,$PODEL       DELETED MEMBER?
         BO    DIRPATNX            YES, DO NOT TRY TO TAG IT
         LA    R15,PATNCOMP        POINT TO PATTERN MATCHING ROUTINE
         BASR  R14,R15             PERFORM THE PATTERN MATCHING
DIRPATNX LA    R3,$POSIZ(,R3)      NO, POINT TO NEXT ENTRY
         B     DIRPATLP            CONTINUE PASS THROUGH MEMBER LIST
         DROP  R3                  PO_SECT
         SPACE
         DROP  R10,R11,R12         REVPDS
         EJECT
**********************************************************************
*                                                          *         *
*         PREPARE MEMBER NAME MASK FOR MATCHING            *  GP@P6  *
*                                                          * SEP2018 *
**********************************************************************
*                                                                    *
*    ON ENTRY:                                                       *
*        R13 -> REGISTER SAVE AREA                                   *
*        R14 -> RETURN POINT                                         *
*        R15 -> PATNCOMP                                             *
*                                                                    *
*        'MEMPATEN' - CONTAINS THE SUPPLIED MASK                     *
*                                                                    *
*    THE GENERAL PURPOSE REGISTERS ARE RESTORED UPON EXIT.           *
*                                                                    *
*    FIRST OF ALL, THE "PATTERN PREPARATION PREPARATION"             *
*    NEEDS TO BE DONE BEFORE THE ACTUAL "PATTERN PREPAR-             *
*    ATION" IS PERFORMED.  PHASE 1 OF THIS IS TO LOCATE              *
*    ALL OCCURRENCES OF '*%' IN THE MASK AND REPLACE EACH            *
*    ONE WITH '%*' WHICH IS FUNCTIONALLY EQUIVALENT BUT              *
*    MUCH EASIER TO PROCESS.  THIS EDITING COULD CREATE              *
*    MORE INSTANCES SO THE PROCESS IS REPEATED UNTIL NO              *
*    SUCH SUBSTRINGS ARE FOUND.  PHASE 2 IS TO CONVERT               *
*    ALL OCCURRENCES OF MULTIPLE CONSECUTIVE ASTERISKS               *
*    TO A SINGLE ASTERISK - AGAIN THE RESULT IS FUNCTION-            *
*    ALLY EQUIVALENT.  THE RESULT OF ALL THIS IS THE MASK            *
*    THE USER "SHOULD HAVE" SPECIFIED IN THE FIRST PLACE.            *
*                                                                    *
*    THE "PATTERN PREPARATION" CONSISTS OF LOCATING EACH             *
*    ASTERISK IN THE SUPPLIED MASK AND REPLACING IT WITH             *
*    A COUNTER BYTE CONTAINING THE NUMBER OF BYTES AFTER             *
*    THE ASTERISK WHICH MUST MATCH EXACTLY IN ORDER FOR              *
*    THE ASTERISK MASK TO BE MATCHED.  THIS COUNT WILL BE            *
*    ZERO ONLY FOR A TRAILING ASTERISK SINCE '**' AND '*%'           *
*    ARE PREVENTED FROM BEING PRESENT IN THE FULLY PRE-              *
*    PARED MASK USED BY THE COMPARISON PROCESS.                      *
*                                                                    *
*    THE 'RENMEMSV' FIELD WHICH FOLLOWS THE 'MEMPATEN'               *
*    FIELD IN STORAGE IS NOT USED AT THE TIME MEMBER NAME            *
*    PATTERN MATCHING OCCURS, AND SO IS AVAILABLE TO HOLD            *
*    "BACKSTOP" BLANKS.  'RENMEMSV' HAS BEEN BLANKED ALREADY         *
*    AND IS NOT BLANKED AFRESH HERE TO MAKE SURE, BECAUSE            *
*    IT MAY NOT BE ENTIRELY BLANK.  'PAT ABCDEFG', FOR               *
*    EXAMPLE, WOULD HAVE CAUSED AN ASTERISK TO BE LOADED             *
*    INTO ITS FIRST BYTE.                                            *
*                                                                    *
*    THIS LOGIC REPLACES EARLIER SIMPLER LOGIC WHICH COULD           *
*    MATCH 'A*SM' WITH 'ASM' AND 'AXSM' BUT NOT WITH 'ASSM'.         *
*                                                                    *
**********************************************************************
         SPACE
         USING PATNPREP,R15
PATNPREP STM   R14,R12,12(R13)     SAVE REGISTERS
         ICM   R4,15,PATASTPC      GET RELEVANT CHARACTERS '%**%'
PATNFAS1 SR    R2,R2               CLEAR A FLAG
         LA    R1,MEMPATEN         POINT TO THE MASK
         LA    R0,7                GET COMPARISON COUNT
PATNF1LP CLM   R4,3,0(R1)          FOUND A '*%' ?
         BNE   PATNF1NX            NO
         STCM  R4,12,0(R1)         YES, REPLACE WITH '%*'
         BCTR  R2,0                SET NON-ZERO FLAG
PATNF1NX LA    R1,1(,R1)           POINT TO NEXT MASK CHARACTER
         BCT   R0,PATNF1LP         SCAN THE ENTIRE MASK
         LTR   R2,R2               PHASE 1 COMPLETE?
         BNZ   PATNFAS1            NO, SO REPEAT THE PROCESS
         LA    R1,MEMPATEN         YES, POINT TO THE MASK
         LR    R2,R1               AND SAME AGAIN
         LA    R0,9                GET COMPARISON COUNT
PATNF2LP CLM   R4,6,0(R2)          TWO CONSECUTIVE ASTERISKS?
         BE    PATNF2NX            YES, SKIP THE FIRST ONE
         MVC   0(1,R1),0(R2)       NO, SO USE MASK CHARACTER
         LA    R1,1(,R1)           POINT PAST LOADED CHARACTER
PATNF2NX LA    R2,1(,R2)           POINT PAST PROCESSED MASK CHARACTER
         BCT   R0,PATNF2LP         FORCE A BLANK AFTER MASK END
         SR    R2,R1               GET LENGTH REDUCTION COUNT
         BNP   PATNPPOK            THERE WAS NONE SO ALL IS READY
PATN2LP2 MVI   0(R1),C' '          BLANK LAST PART OF MASK AREA
         LA    R1,1(,R1)           POINT TO NEXT SURPLUS MASK CHARACTER
         BCT   R2,PATN2LP2
         SPACE
PATNPPOK LA    R1,MEMPATEN-1       POINT TO BEFORE THE SUPPLIED MASK
PATPRELP LA    R1,1(,R1)           POINT TO THE NEXT MASK CHARACTER
         CLI   0(R1),C' '          REACHED END OF MASK?
         BE    PATPREEX            YES, ALL DONE
         CLI   0(R1),C'*'          IS THIS AN ASTERISK?
         BNE   PATPRELP            NO, THAT'S FINE
         SR    R4,R4               YES, ZERO A COUNTER
         LA    R5,1(,R1)           POINT PAST ASTERISK
PATPREC1 CLI   0(R5),C' '          END OF MASK REACHED?
         BE    PATPRECT            YES, HAVE THE COUNT
         CLI   0(R5),C'*'          ANOTHER ASTERISK?
         BE    PATPRECT            YES, HAVE THE COUNT
         CLI   0(R5),C'%'          A PERCENT?
         BE    PATPRECT            YES, HAVE THE COUNT
         LA    R4,1(,R4)           INCREMENT EXACT-MATCH COUNT
         LA    R5,1(,R5)           POINT TO NEXT MASK CHARACTER
         B     PATPREC1            CONTINUE EXACT-MATCH COUNT
PATPRECT STC   R4,0(,R1)           CHANGE ASTERISK TO EXACT-MATCH COUNT
         B     PATPRELP            CONTINUE WITH MASK SCAN
PATPREEX LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER
         DROP  R15                 PATNPREP
PATASTPC DC    CL4'%**%'
         EJECT
**********************************************************************
*                                                          *         *
*         PERFORM MEMBER NAME PATTERN MATCHING             *  GP@P6  *
*                                                          * SEP2018 *
**********************************************************************
*                                                                    *
*    ON ENTRY:                                                       *
*         R3 -> PO_SECT STRUCTURE FOR MEMBER                         *
*        R13 -> REGISTER SAVE AREA                                   *
*        R14 -> RETURN POINT                                         *
*        R15 -> PATNCOMP                                             *
*                                                                    *
*        'MEMPATEN' - CONTAINS THE SUPPLIED MASK                     *
*                                                                    *
*    THE GENERAL PURPOSE REGISTERS ARE RESTORED UPON EXIT.           *
*                                                                    *
*    THE '$POTAG' FLAG IN THE MEMBER'S 'PO_SECT' ENTRY IS SET        *
*    OR RESET ACCORDING TO WHETHER THE MEMBER NAME MATCHES THE       *
*    THE MASK IN 'MEMPATEN' OR NOT.                                  *
*                                                                    *
**********************************************************************
         SPACE
         USING PATNCOMP,R15
         USING PO_SECT,R3
PATNCOMP STM   R14,R12,12(R13)     SAVE REGISTERS
         LA    R1,MEMPATEN         POINT TO THE FILTERING MASK
         NI    PO_FLG,255-$POTAG   RESET MEMBER TAG FLAG
         LA    R4,PO_MEM           POINT TO MEMBER NAME
         LA    R0,8                GET MEMBER NAME LENGTH
         SR    R6,R6               CLEAR FOR INSERT
PATCMPLP CLI   0(R1),0             REACHED TRAILING ASTERISK IN MASK?
         BE    PATCMPON            YES, THAT'S A MATCH FOR ANYTHING
         CLC   0(1,R4),0(R1)       DOES THIS CHARACTER MATCH?
         BE    PATCMPNC            YES, LOOK AT NEXT CHARACTER
         CLI   0(R1),C'%'          MASK FOR ANY 1 NON-BLANK?
         BE    PATCMPPC            YES, GO CHECK IT
         CLI   0(R1),9             MASK FOR 0 OR MORE NON-BLANKS?
         BNL   PATCMPEX            NO, SO THAT'S A MISMATCH
         IC    R6,0(,R1)           YES, LOAD LENGTH (CAN'T BE 0)
         LA    R1,1(,R1)           POINT PAST "ASTERISK" IN MASK
         BCTR  R6,0                DECREMENT FOR EXECUTE
PATCMPAS CR    R6,R0               ENOUGH NAME LEFT TO COMPARE?
         BNL   PATCMPEX            NO, SO THAT'S A MISMATCH
         CLI   0(R4),C' '          PAST END OF NAME?
         BE    PATCMPEX            YES, SO THAT'S A MISMATCH
         EX    R6,PATCMPCL         FOUND A MATCH IN THE NAME?
         BE    PATCMPAM            YES, FOUND AN "ASTERISK MATCH"
         LA    R4,1(,R4)           NO, ADVANCE ALONG THE NAME
         BCT   R0,PATCMPAS         TRY AGAIN IN "ASTERISK SCAN"
         B     PATCMPEX            NO STRING MATCH AFTER ASTERISK
PATCMPCL CLC   0(0,R1),0(R4)       <<< EXECUTED >>>
PATCMPPC CLI   0(R4),C' '          MATCHING PERCENT AGAINST BLANK?
         BE    PATCMPEX            YES, MISMATCH - NEEDED A NON-BLANK
         B     PATCMPN1            NO, A MATCH SO ON TO THE NEXT ONE
PATCMPAM ALR   R4,R6               ADJUST NAME DATA CURSOR MOSTLY
         ALR   R1,R6               ADJUST SCAN DATA CURSOR MOSTLY
         SR    R0,R6               ADJUST BYTES TO GO MOSTLY
PATCMPNC CLI   0(R1),C' '          DID A BLANK MATCH?
         BE    PATCMPON            YES, GOT TO END WITHOUT A MISMATCH
PATCMPN1 LA    R1,1(,R1)           ADVANCE ALONG THE MASK STRING
         LA    R4,1(,R4)           ADVANCE ALONG THE MEMBER NAME
         BCT   R0,PATCMPLP         CONTINUE WITH THE PROCESS
         CLI   0(R1),C' '          BOTH STRINGS ENDED?
         BE    PATCMPON            YES, THAT'S A MATCH
         BH    PATCMPEX            NO, WAS MORE DATA TO MATCH
         CLI   1(R1),C' '          TRAILING ASTERISK?
         BNE   PATCMPEX            NO, WAS MORE AFTER ASTERISK
PATCMPON OI    PO_FLG,$POTAG       TAG MATCHING MEMBER NAME
         LA    R0,1
         A     R0,TAGCOUNT         INCREMENT TAGGED ENTRY COUNT
         ST    R0,TAGCOUNT
PATCMPEX LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER
         DROP  R3                  PO_SECT
         DROP  R15                 PATNCOMP
         SPACE
         TITLE '  R E V P D S   -   S T A T I C   A R E A  '
LASTNAME DC    XL8'FFFFFFFFFFFFFFFF',3AL2(0),AL2(16)
POTRGRHD DC    XL8'3636363636363636' SORT TRIGGER HEADING ATTRIBUTES
POENQMAJ DC    CL8'SPFEDIT '       ENQUEUE MAJOR NAME
REVHP00  DC    CL8'REVHP00 '       NAME OF FIRST REVPDS HELP PANEL
POHEX    DC    C'0123456789ABCDEF'
PDBLANKS DC    CL8' '
REALUNKN DC    C'????????'
MODIFIED DC    C'MODIFIED'
UNMOVABL DC    C'UNMOVEABLE'
HWCNTMSG DC    C'HALFWORDS OF USER DATA'
REVDDMSG DC    C'REVIEW OF DDNAME '
UTCCMSG  MESG  'UTILITY PROGRAM COND CODE ####'
UTCCNUM  EQU   MSG+2+26,4
UTABMSG  MESG  'UTILITY PROGRAM ABENDED - S###'
UTABNUM  EQU   MSG+2+27,3
OFABMSG  MESG  'OFFLOAD ABENDED - S###-##'
OFABNUM  EQU   MSG+2+19,3
OFABRET  EQU   MSG+2+23,2
EODIRFLG DC    CL7'**END**'
RENNEWIN DC    AL1(FLDINHI),XL8'00',AL1(FLDOUTHI) PLUS BLANK FROM ED5
ED5      DC    X'402020202120'         KEEP JUST BEFORE BLKSREAD
BLKSREAD DC    C' DIRECTORY BLOCKS READ'
ED7DASHP DC    XL8'6020202020202120'
ED9      DC    X'40202020202020202120'
POSIZE   DC    Y($POSIZ)               INTERNAL ENTRY BASE SIZE
DIRGMLIM DC    A(8*1024,1536*1024)
GMVC     GETMAIN VC,MF=L
GMVCL    EQU   *-GMVC
         DC    0D'0'
         LTORG
         SPACE
SPFSRTAB DC    0F'0'                   CURSOR SORT TABLE
         DC    Y(04,11),A(SORTNAME)
         DC    Y(15,20),A(SORTTTR)
         DC    Y(22,26),A(SORTSSI)
         DC    Y(37,53),A(SORTDATE)
         DC    Y(61,65),A(SORTSIZE)
         DC    Y(73,79),A(SORTUSER)
         DC    A(-1)
         SPACE
RFUSRTAB DC    0F'0'                   CURSOR SORT TABLE WHEN RECFM=U
         DC    Y(04,11),A(SORTNAME)
         DC    Y(14,21),A(SORTSSI)
         DC    Y(24,29),A(SORTSIZE)
         DC    Y(31,36),A(SORTTTR)
         DC    A(-1)
         SPACE
PDSDCB3X DC    X'91',AL3(PDSDCB3A)     DCB ABEND EXIT
NAMENAME DC    CL4'NAME'
SPFHDR   DC    C' TTR   VV.MM '
         DC    C' CREATED      CHANGED       INIT  SIZE   MOD   ID'
SPFHDLEN EQU   *-SPFHDR
RECFMUHD DC    C'SSI       SIZE   TTR   ALIAS-OF AC -- -- -- -ATTRIBUTE+
               S -- -- ---'
RFUHDLEN EQU   *-RECFMUHD
POMEMVOL DC    X'6020202020202120'
         DC    X'40948594828599A240969540' C' MEMBERS ON '
         DC    C'VIO --'
MEMVOLLN EQU   *-POMEMVOL
         DC    0H'0'
         TITLE '  R E V P D S   G L O B A L   R O U T I N E S  '
**********************************************************************
*                                                          *         *
*         CONVERT DATE FROM P'YYDDD' TO C'YY-MM-DD'        * GP@SECV *
*                                                          *  03/86  *
**********************************************************************
         SPACE
SPFDATE  BASR  R15,0                    (FROM TAPESCAN DATE SUBROUTINE)
         USING IDRDATE,R15
IDRDATE  ST    R4,MSG+100+4                STORE INPUT DATE FOR TESTING
         ST    R4,MSG+100+8                  AND CONVERSION
         UNPK  MSG+100+12(3),MSG+100+5(2)  FORMAT YEAR
         XC    MSG+100(6),MSG+100          GET JULIAN DAY IN DECIMAL
         CVB   R4,MSG+100                  GET JULIAN DAY IN BINARY
         LA    R5,MNTHTBL-4                ADJUST FOR FIRST INCREMENT
         TM    MSG+100+9,X'01'             IF ODD THEN
         BO    NOTLEAP                                 NOT LEAP YEAR
         TM    MSG+100+9,X'12'             TEST FOR LEAP (OK TILL 2099)
         BNM   NEXTMNTH                       IF MIXED NOT LEAP YEAR
NOTLEAP  CH    R4,=H'60'                   DDD AFTER 28TH FEBRUARY?
         BL    NEXTMNTH                    NO, LEAP YEAR IRRELEVANT
         LA    R4,1(,R4)                   YES, FUDGE DDD ACCORDINGLY
NEXTMNTH LA    R5,4(,R5)                   INCREMENT THRU MONTH TABLE
         SH    R4,0(,R5)                   DECREASE NUMBER OF DAYS
         BP    NEXTMNTH                    NOT YET, TRY NEXT MONTH
         AH    R4,0(,R5)                   FOUND THE MONTH
         CVD   R4,MSG+100                  GET DAY OF MONTH
         OI    MSG+100+7,X'0F'             MAKE UNPK RESULT PRINTABLE
         UNPK  MSG+100+18(2),MSG+100+6(2)  FORMAT DAY OF MONTH
         MVI   MSG+100+14,C'-'             INSERT THE DASH
         MVC   MSG+100+15(2),2(R5)         MOVE IN MONTH NUMBER
         MVI   MSG+100+17,C'-'             INSERT THE DASH
         MVC   DOUBLE,MSG+100+12           RETURN THE ANSWER
         BR    R14                         RETURN
         SPACE
         DROP  R15                         IDRDATE
         SPACE
MNTHTBL  DC    H'31'                       JAN
         DC    C'01'
         DC    H'29'                       FEB
         DC    C'02'
         DC    H'31'                       MAR
         DC    C'03'
         DC    H'30'                       APR
         DC    C'04'
         DC    H'31'                       MAY
         DC    C'05'
         DC    H'30'                       JUN
         DC    C'06'
         DC    H'31'                       JUL
         DC    C'07'
         DC    H'31'                       AUG
         DC    C'08'
         DC    H'30'                       SEP
         DC    C'09'
         DC    H'31'                       OCT
         DC    C'10'
         DC    H'30'                       NOV
         DC    C'11'
         DC    H'255'                      DEC (ALLOW FOR STUPID DDD)
         DC    C'12'
         SPACE
         SPACE
**********************************************************************
*                                                          *         *
*         DIRECTORY SYNAD EXIT                             *  GP@P6  *
*                                                          * JAN2012 *
**********************************************************************
         SPACE
DIRSYNAD BASR  R5,0                CALLERS MUST NOT DEPEND ON R5
         USING *,R5
         MVI   SYNADSW,X'FF'
         SYNADAF ACSMETH=QSAM
         MVC   SYNADMSG,50(R1)
         SYNADRLS
         BR    R14
         DROP  R5                  DIRSYNAD+2
         SPACE
**********************************************************************
*                                                          *         *
*         DIRECTORY ABEND EXIT                             *  GP@FT  *
*                                                          *  01/96  *
**********************************************************************
         SPACE
DIRABEND OI    STATUS,STABEND      INDICATE OPEN ABENDED
         MVC   KOUNT,0(R1)         COPY ABEND CODE
         TM    3(R1),8+4+2         ANY OPTIONS AVAILABLE?
         BZR   R14                 NO
         TM    3(R1),4             ALLOWED TO IGNORE THE ABEND?
         MVI   3(R1),0             PREPARE FOR NO
         BZR   R14                 NO
         MVI   3(R1),4             YES, IGNORE THE ABEND
         BR    R14
         SPACE
         SPACE
**********************************************************************
*                                                          *         *
*         DETERMINE SCROLL AMOUNT OVERRIDE                 *  GP@P6  *
*                                                          * JUN2003 *
**********************************************************************
         SPACE
*             OUTPUT:  R1 = NUMBER OF LINES TO SCROLL
*                     R15 = RETURN CODE
*                         < 0 MEANS INVALID OPERAND
*                         = 0 MEANS R1 HAS SCROLL AMOUNT
*                         > 0 MEANS SCROLL AMOUNT IS MAXIMUM
         SPACE
         USING DIRSCROL,R15
DIRSCROL TM    OPD1+6,PRESENT      ANY OPERAND TO 'UP' OR 'DOWN'?
         BNO   DIRSCRLR            NO, USE CURRENT SCROLL RANGE VALUE
         MVI   OPD2+6,0            IGNORE OPERANDS AFTER THE FIRST
         L     R1,OPD1             YES, POINT TO IT
         CLI   0(R1),C'C'          CURSOR?
         BE    DIRSCRLC            YES
         CLI   0(R1),C'P'          PAGE?
         BE    DIRSCRLP            YES
         CLI   0(R1),C'H'          HALF-PAGE?
         BE    DIRSCRLH            YES
         CLI   0(R1),C'M'          MAXIMUM?
         BE    DIRSCRLM            YES
         TM    OPD1+6,NUMERIC      NUMBER SPECIFIED?
         BO    DIRSCRLN            YES
         SR    R15,R15             NO
         BCTR  R15,0               INVALID OPERAND SO NEGATIVE RESULT
         BR    R14                 RETURN WITH THE BAD NEWS
DIRSCRLM LA    R15,4               FLAG MAXIMUM REQUEST
         BR    R14                 RETURN WITH THE NEWS
DIRSCRLR TM    STATUS4,$4CSR       CURSOR SCROLLING ACTIVE?
         BO    DIRSCRLC            YES
         L     R1,SCROLL           GET CURRENT NUMERIC SCROLL AMOUNT
         SR    R15,R15             ZERO LEFT TO DO TO GET THE ANSWER
         BR    R14                 RETURN WITH THE NEWS
DIRSCRPK PACK  DOUBLE,0(0,R1)      <<< EXECUTED >>>
DIRSCRLN LH    R3,OPD1+4           GET THE OPERAND LENGTH
         BCTR  R3,0                DECREMENT FOR EXECUTE
         EX    R3,DIRSCRPK         GET THE AMOUNT IN DECIMAL
         CVB   R1,DOUBLE           GET THE AMOUNT IN BINARY
         SR    R15,R15             ZERO LEFT TO DO TO GET THE ANSWER
         BR    R14                 RETURN WITH THE NEWS
DIRSCRLP SR    R0,R0               FLAG PAGE SCROLL AMOUNT
         B     *+8                 SKIP FLAG OVERWRITE
DIRSCRLH LA    R0,4095             FLAG HALF-PAGE SCROLL AMOUNT
         L     R1,ISPFPAGE         GET MAXIMUM ENTRY COUNT ON SCREEN
         LTR   R0,R0               IS AMOUNT FULL PAGE?
         BZ    *+8                 YES
         SRA   R1,1                NO, HALVE IT
         SR    R15,R15             ZERO LEFT TO DO TO GET THE ANSWER
         BR    R14                 RETURN WITH THE NEWS
DIRSCRLC LH    R1,CSRLOCN          GET CURSOR LOCATION
         SR    R0,R0
         D     R0,SCRNCOLS         DETERMINE LINE NUMBER
         BCTR  R1,0
         BCTR  R1,0
         LTR   R0,R1
         BNP   DIRSCRLP            DO A PAGE IF CURSOR NOT LOW ENOUGH
         L     R3,OPD0             POINT TO COMMAND
         CLI   0(R3),C'U'          SCROLLING UP?
         BE    DIRSCRLU            YES
         BCTR  R1,0                NO, SCROLLING DOWN
         LTR   R1,R1               CURSOR POSITION RELEVANT?
         BNP   DIRSCRLP            NO, SCROLL A PAGE
         SR    R15,R15             ZERO LEFT TO DO TO GET THE ANSWER
         BR    R14                 RETURN WITH THE NEWS
DIRSCRLU L     R1,ISPFPAGE         GET VISIBLE DATA LINES ON SCREEN
         SR    R15,R15             ZERO LEFT TO DO TO GET THE ANSWER
         SR    R1,R0               GET LINES TO SCROLL UP
         BNMR  R14                 RETURN WITH THE NEWS
         SR    R1,R1               ZERO COUNT IF NEGATIVE
         BR    R14                 RETURN WITH THE NEWS
         DROP  R15                 DIRSCROL
         TITLE '  R E V P D S  '
         AIF   (&ENV390).US3
         USING REVPDS,R10,R11,R12
         AGO   .US4
.US3     ANOP
         USING (REVPDS,DIRSCROL),R10,R11,R12
.US4     ANOP
         SPACE
**********************************************************************
*                                                          *         *
*         FORMAT MEMBER DIRECTORY ENTRY SCREEN LINE        * GP@SECV *
*                                                          *  03/86  *
**********************************************************************
         SPACE
         USING DIRFRMAT,R7
         USING PO_SECT,R3
DIRFRMAT DS    0H                  FORMAT A MEMBER DIRECTORY ENTRY
         TM    POFLAG,PFSELCD      HERE TO UPDATE THIS LINE ONLY?
         BO    MEMFRMAT            YES, SKIP EXTRA HOUSEKEEPING
         TM    POFLG2,P2STAT       HERE TO UPDATE THIS LINE ONLY?
         BO    MEMFRMAT            YES, SKIP EXTRA HOUSEKEEPING
         LA    R0,1
         A     R0,BOTMEMNO         INCREMENT BOTTOM ENTRY NUMBER
         ST    R0,BOTMEMNO
         ST    R3,BOTMEMAD         SAVE BOTTOM ENTRY (SO FAR) ADDRESS
MEMFRMAT LR    R4,R2               POINT TO PRIMARY BUFFER LINE
         A     R4,SCREENSZ         POINT TO SHADOW BUFFER LINE
         MVI   0(R2),FLDINHI       HIGH INTENSITY FOR SELECTION FIELD
         MVI   1(R2),C'.'          SUPPLY AUTO-SELECTION DOT
         MVI   1(R4),X'01'         BLUE FOR AUTO-SELECTION DOT
         MVI   2(R2),FLDOUTLO      LOW INTENSITY FOR MEMBER ATTRIBUTES
         C     R3,CURMEMAD         PROCESSED THIS MEMBER?
         BNE   CURMEMOK            NO
         LA    R14,2(,R2)          YES, POINT PAST PERIOD
         S     R14,SCREENBF        GET POSITION OF PERIOD
         MVI   1(R2),C' '          CLEAR AUTO-SELECTION DOT
         S     R14,SCRNCOLS
         S     R14,SCRNCOLS
         ST    R14,REVPOS          SPECIFY CURSOR POSITION
         MVC   REVCSR,=CL8'REVBUF' SPECIFY CURSOR FIELD
CURMEMOK MVI   3(R4),X'05'         TURQUOISE FOR MEMBER ATTRIBUTES
         TM    PO_FLG,$PODEL       DELETED MEMBER?
         BNO   *+8                 NO
         MVI   3(R4),X'02'         YES, SHOW IT IN RED
         CLI   79(R4),X'07'        IS COLUMN 80 IN WHITE?
         MVC   4(76,R4),3(R4)      SPREAD COLOUR ALONG SCREEN LINE
         BNE   FMTTAGCK            NO, CONTINUE
         TM    POFLAG,PFSELCD      HERE TO UPDATE THIS LINE ONLY?
         BNO   FMTTAGCK            NO, CONTINUE
         MVI   79(R4),X'07'        YES, KEEP COLUMN 80 WHITE
FMTTAGCK TM    PO_FLG,$POTAG       IS THIS MEMBER TAGGED?
         BZ    LOADMEMN            NO, LEAVE AS LOW INTENSITY
         MVI   2(R2),FLDOUTHI      YES, MAKE IT HIGH INTENSITY
         MVI   3(R4),X'25'         ADD REVERSE VIDEO FOR TAGGED MEMBER
         MVC   4(7,R4),3(R4)       MAKE NAME REVERSE VIDEO FOR TAG
LOADMEMN MVC   3(8,R2),PO_MEM      LOAD MEMBER NAME
         AIF   (NOT &ENVZV2).NOSHOGN
         TM    STATUS15,$15GEN     SHOWING GENERATION DATA?
         BZ    NOSHOGEN            NO
         USING POFMTSPF,R2
         UNPK  POF_TTR(7),PO_TTR(4) SHOW TTR IN HEX
         TR    POF_TTR,POHEX-240
         MVI   POF_TTR+6,C' '      ERASE RUBBISH
         ICM   R6,15,PO_PTR        NO, POINT TO EXTENSION
         USING PX_SECT,R6
         ICM   R0,15,PX_GNUM       ANY GENERATION NUMBER?
         BZ    GENNUMOK            NO, THIS IS A CURRENT MEMBER
         UNPK  POF_CREA(9),PX_GNUM(5)
         TR    POF_CREA,POHEX-240  SHOW NON-ZERO HEX GENERATION NUMBER
         MVI   POF_CREA+8,C' '     ERASE RUBBISH
         MVC   2(78,R4),1(R4)      SHOW GENERATION IN BLUE
         LA    R14,POF_CREA        POINT TO FIRST DIGIT
GENNO0LP CLI   0(R14),C'0'         LEADING ZERO?
         BNE   GENNUMOK            NO
         MVI   0(R14),C' '         YES, SUPPRESS IT
         LA    R14,1(,R14)         POINT TO NEXT DIGIT
         B     GENNO0LP
GENNUMOK ICM   R14,15,PX_GTOD      LOAD THE STCK VALUE
         ICM   R15,15,PX_GTOD+4
         LR    R5,R1               SAVE LINES-TO-GO COUNT
         LA    R0,1                PREPARE FOR CARRY/BORROW
         L     R1,CVTPTR(,0)       CVT
         L     R1,CVTEXT2-CVT(,R1) OS/VS2 COMMON EXTENSION
         USING CVTXTNT2,R1
         AL    R15,CVTLDTOR        ADD CVTLDTO RIGHT WORD
         BC    12,GENFMTL2         CVTLDTO = LOCAL DATE/TIME OFFSET
         ALR   R14,R0              CARRY ONE FROM OVERFLOW
GENFMTL2 AL    R14,CVTLDTOL        ADD CVTLDTO LEFT WORD
         SL    R15,CVTLSOL         SUBTRACT CVTLSO LOW WORD
         BC    3,GENFMTL3          CVTLSO = LEAP SECOND OFFSET
         SR    R14,R0              BORROW ONE FROM OVERFLOW
GENFMTL3 SL    R14,CVTLSOH         SUBTRACT CVTLSO HIGH WORD
         DROP  R1                  CVTXTNT2
         STM   R14,R15,DOUBLE      SAVE THE STCK VALUE
         STCKCONV STCKVAL=DOUBLE,  POINT TO INPUT STCK VALUE           +
               CONVVAL=SBASAVE,    POINT TO OUTPUT FOUR WORDS          +
               TIMETYPE=DEC,       GET TIME DECIMAL DIGITS (DEFAULT)   +
               DATETYPE=YYYYMMDD,  SPECIFY DATE FORMAT                 +
               MF=(E,STCKCNVL)     SPECIFY PARAMETER LIST
         UNPK  POF_DATE(3),SBASAVE+9(2)         SHOW THE YEAR
         UNPK  POF_DATE+3(3),SBASAVE+10(2)      SHOW THE MONTH
         UNPK  POF_DATE+6(3),SBASAVE+11(2)      SHOW THE DAY
         UNPK  POF_TIME(3),SBASAVE(2)           SHOW THE HOUR
         UNPK  POF_TIME+3(3),SBASAVE+1(2)       SHOW THE MINUTE
         UNPK  POF_TIME+6(3),SBASAVE+2(2)       SHOW THE SECOND
         TR    POF_DATE(17),POHEX-240    HANDLE BAD DECIMAL DIGITS
         MVI   POF_DATE+2,C'-'     SUPPLY SEPARATORS AND
         MVI   POF_DATE+5,C'-'     TIDY UP AFTER TRANSLATE
         MVI   POF_SPDT,C' '       AND THE LAST UNPACK
         MVI   POF_TIME+2,C':'
         MVI   POF_TIME+5,C':'
         MVI   POF_SP_5,C' '
         LR    R1,R5               RESTORE LINES-TO-GO COUNT
         MVC   POF_USER,PX_USER    SHOW UPDATER'S USERID
         IC    R0,PERIODS          SAVE NULL TRANSLATION CODE
         MVI   PERIODS,C' '        TRANSLATE NULLS TO BLANKS
         TR    POF_USER,PERIODS    HANDLE STRANGE USERIDS
         STC   R0,PERIODS          RESTORE NULL TRANSLATION CODE
         CLI   PX_VER,0            ANY DATA FROM ISPF STATS?
         BE    MEMLODED            NO
         SR    R0,R0
         IC    R0,PX_VER           SHOW VERSION NUMBER
         CVD   R0,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  POF_VVMM(2),DOUBLE+6(2)
         MVI   POF_VVMM+2,C'.'
         IC    R0,PX_LVL           SHOW MODIFICATION NUMBER
         CVD   R0,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  POF_VVMM+3(2),DOUBLE+6(2)
         ICM   R0,15,PX_SIZE       GET THE ISPF CURRENT SIZE
         MVC   POF_SIZE-4(10),ED9  LOAD EDIT PATTERN
         CVD   R0,DOUBLE           MAKE IT PACKED DECIMAL
         ED    POF_SIZE-4(10),DOUBLE+3  MAKE IT NUMERIC CHARACTERS
         B     MEMLODED
         DROP  R2,R6               POFMTSPF, PX_SECT
NOSHOGEN EQU   *
.NOSHOGN ANOP
         TM    PO_FLG,$POADD       COPY-ADDED?
         BNO   FMTADDOK            NO
         MVI   12(R2),C'C'         YES
         MVI   12(R4),X'02'        SHOW INDICATOR IN RED
FMTADDOK TM    PO_FLG,$POREP       COPY-REPLACED?
         BNO   FMTREPOK            NO
         MVI   12(R2),C'R'         YES
         MVI   12(R4),X'02'        SHOW INDICATOR IN RED
FMTREPOK SR    R6,R6
         TM    PO_FLG,$POSSI1      DOES PO_PTR CONTAIN SSI?
         BO    *+8                 YES
         ICM   R6,15,PO_PTR        NO, POINT TO EXTENSION
         USING PX_SECT,R6
         TM    DS1RECFM,DCBRECU    IS IT UNDEFINED RECORD FORMAT?
         BO    FMTRCFMU            YES
         TM    PO_FLG,$PODEL       DELETED MEMBER?
         BO    DASHTTR             YES, NO BLUE COLUMN ITEMS
         USING POFMTSPF,R4
         MVI   POF_TTR,X'01'       SHOW TTR IN BLUE
         MVC   POF_TTR+1(5),POF_TTR
         MVI   POF_CREA,X'01'      SHOW CREATION DATE IN BLUE
         MVC   POF_CREA+1,POF_CREA INCLUDE SPACE TO REDUCE DATA STREAM
         MVC   POF_INIT,POF_TTR    SHOW INITIAL RECORD COUNT IN BLUE
         MVC   POF_MOD,POF_TTR     SHOW MODIFIED RECORD COUNT IN BLUE
         B     SHOWTTR             CANNOT BE A LOAD LIBRARY
         DROP  R4                  POFMTSPF
FMTRCFMU UNPK  30(7,R2),PO_TTR(4)  SHOW TTR IN HEX
         TR    30(6,R2),POHEX-240
         MVI   36(R2),C' '         ERASE RUBBISH
         TM    PO_FLG,$PODEL       DELETED MEMBER?
         BNO   FMTTRUOK            NO, TTR FORMATTED OKAY
         MVI   30(R2),C'-'         JUST SHOW DASHES IF DELETED
         MVC   31(5,R2),30(R2)
FMTTRUOK LTR   R6,R6               ANY USER DATA TO FORMAT?
         BNZ   HAVDATRU            YES
         TM    PO_FLG,$POSSI1      DOES PO_PTR CONTAIN SSI?
         BNO   MEMLODED            NO, NO USER DATA AT ALL
         UNPK  13(9,R2),PO_PTR(5)  YES, FORMAT THE SSI
         TR    13(8,R2),POHEX-240
         MVI   21(R2),C' '         ERASE RUBBISH
         B     MEMLODED            ALL USER DATA NOW PROCESSED
HAVDATRU EQU   *
*MTTRUOK CLI   15(R3),24           IMS FORMAT LIBRARY MEMBER?
*        BE    PROGSIZE            YES, SHOW THE BYTE COUNT
*        CLI   15(R3),34           IMS FORMAT LIBRARY MEMBER?
*        BE    PROGSIZE            YES, SHOW THE BYTE COUNT
         TM    PO_FLG,$POPGM       LOAD MODULE ENTRY?
         BNO   MEMLODED            NO, NOTHING TO SHOW
         TM    PO_FLG,$POSSI2      DOES PX_SSI CONTAIN SSI?
         BNO   PGMSSIOK            NO
         MVC   DOUBLE(4),PX_SSI    YES, COPY IT TO AVOID LAST BYTE S0C4
         UNPK  13(9,R2),DOUBLE(5)  FORMAT THE SSI
         TR    13(8,R2),POHEX-240
         MVI   21(R2),C' '         ERASE RUBBISH
PGMSSIOK CLI   PX_LEN,$PXLMAL      LOAD MODULE ALIAS EXTENSION?
         BE    ALIASPGM            YES
         TM    PX_FTB2,X'03'       TEST MEMBER ADDRESSING MODE
         BZ    FMTPGM              AMODE 24 DEFAULTED OR SPECIFIED
         MVC   76(3,R2),=C'ANY'
         BO    FMTPGM              AMODE ANY SPECIFIED
         MVC   77(2,R2),=C'31'
         TM    PX_FTB2,X'02'
         BO    FMTPGM              AMODE 31 SPECIFIED
         MVC   77(2,R2),=C'64'     AMODE 64 SPECIFIED
         B     FMTPGM
ALIASPGM MVC   37(8,R2),PX_REAL    YES, LOAD ORIGINAL REAL MEMBER NAME
         TM    PX_FTB2,X'0C'       TEST ALIAS ADDRESSING MODE
         BZ    FMTPGM              AMODE 24 DEFAULTED OR SPECIFIED
         MVC   76(3,R2),=C'ANY'
         BO    FMTPGM              AMODE ANY SPECIFIED
         MVC   77(2,R2),=C'31'
         TM    PX_FTB2,X'08'
         BO    FMTPGM              AMODE 31 SPECIFIED
         MVC   77(2,R2),=C'64'     AMODE 64 SPECIFIED
FMTPGM   TM    PX_FTB1,X'41'       OSIV/F4 AE PROGRAM?
         BZ    NOTAEPGM            NO, DO NOT OVERWRITE AMODE DETAILS
         MVC   76(3,R2),=C'AE '    YES, INDICATE THIS
NOTAEPGM TM    PO_FLG,$POSSI2      DOES PX_SSI CONTAIN SSI?
         BO    HEXSIZE             YES, SHOW SSI, NOT DECIMAL SIZE
         SR    R15,R15             CLEAR FOR INSERT
         ICM   R15,7,PX_STOR       GET LOAD MODULE SIZE
         LA    R15,1023(,R15)      ROUND UP TO NEXT KILOBYTE
         SRL   R15,10              DIVIDE BY 1024
         CVD   R15,DOUBLE
         MVC   15(6,R2),ED5
         ED    15(6,R2),DOUBLE+5
         MVI   21(R2),C'K'
HEXSIZE  UNPK  23(7,R2),PX_STOR(4) SHOW SIZE IN HEX
         TR    23(6,R2),POHEX-240
         MVI   29(R2),C' '         ERASE RUBBISH
*        CLI   15(R3),24           IMS FORMAT LIBRARY MEMBER?
*        BE    MEMLODED            YES, THAT IS ALL THE DATA TO SHOW
*        CLI   15(R3),34           IMS FORMAT LIBRARY MEMBER?
*        BE    CREATIME            YES, SHOW CREATION TIMESTAMP
         TM    PX_FTB1,X'80'       PROCESSED BY OS/VS LINKAGE EDITOR?
         BZ    DONEAUTH            NO, OS LOAD MODULE
         TM    PX_FTB1,X'08'       IS APF DATA VALID?
         BZ    DONEAUTH            NO
         MVC   46(2,R2),REALUNKN   DENOTE INVALID APF DATA
         CLI   PX_ACL,1            IS APF DATA LENGTH ONE?
         BNE   DONEAUTH            NO, INVALID
         UNPK  46(3,R2),PX_AC(2)   NO, SHOW AUTHORIZATION CODE IN HEX
         TR    46(2,R2),POHEX-240
         MVI   48(R2),C' '         ERASE RUBBISH
DONEAUTH MVC   49(2,R2),=C'DC'     DOWNWARD COMPATIBLE
         TM    PX_ATR2,X'80'
         BZ    *+10
         MVC   49(2,R2),=C'FO'     F-LEVEL LINKAGE EDITOR ONLY
         TM    PX_ATR2,X'08'
         BZ    *+10
         MVC   52(2,R2),=C'NE'     NOT EDITABLE
         TM    PX_ATR1,X'02'
         BO    *+10
         MVC   52(2,R2),=C'NX'     NOT EXECUTABLE
         TM    PX_ATR1,X'08'
         BZ    *+10
         MVC   55(2,R2),=C'OL'     ONLY LOADABLE
         TM    PX_FTB1,X'20'
         BZ    *+10
         MVC   58(2,R2),=C'PG'     PAGE ALIGNMENT
         TM    PX_ATR1,X'20'
         BZ    *+10
         MVC   58(2,R2),=C'OV'     OVERLAY STRUCTURE
         TM    PX_ATR2,X'01'
         BZ    *+10
         MVC   61(2,R2),=C'RF'     REFRESHABLE
         TM    PX_ATR1,X'80'
         BZ    *+10
         MVC   64(2,R2),=C'RN'     REENTERABLE
         TM    PX_ATR1,X'40'
         BZ    *+10
         MVC   67(2,R2),=C'RU'     REUSABLE
         TM    PX_ATR1,X'04'
         BZ    *+10
         MVC   70(2,R2),=C'SC'     SCATTER FORMAT
         TM    PX_ATR2,X'04'
         BZ    *+10
         MVC   73(2,R2),=C'TS'     TEST SYMBOL CARDS
         TM    PX_ATR2,X'20'       ENTRY POINT AT OFFSET ZERO?
         BZ    GETPGMEP            NO
         CLC   52(4,R2),PDBLANKS   YES, GOT 4 BLANKS?
         BNE   GOTPGMEP            NO, DON'T SHOW ENTRY POINT DATA
         MVC   52(3,R2),=C'EP0'    YES
         B     GOTPGMEP
GETPGMEP CLC   52(6,R2),PDBLANKS   GOT 6 BLANKS?
         BNE   GOTPGMEP            NO, DON'T SHOW ENTRY POINT DATA
         LA    R0,4095
         CLM   R0,7,PX_EPA         ENTRY POINT OFFSET LESS THAN 4096?
         BL    GETBIGEP            NO
         MVC   52(2,R2),=C'EP0'    YES (REUSE LITERAL)
         UNPK  DOUBLE(5),PX_EPA+1(3)   SHOW ENTRY POINT OFFSET
         MVC   54(3,R2),DOUBLE+1
         TR    54(3,R2),POHEX-240
         B     GOTPGMEP
GETBIGEP CLC   52(8,R2),PDBLANKS   GOT 8 BLANKS?
         BNE   GOTPGMEP            NO, DON'T SHOW ENTRY POINT DATA
         MVC   52(2,R2),=C'EP0'    YES (REUSE LITERAL)
         UNPK  54(7,R2),PX_EPA(4)  SHOW ENTRY POINT OFFSET
         TR    54(6,R2),POHEX-240
         MVI   60(R2),C' '
GOTPGMEP TM    PX_FTB2,X'10'       RESIDENCE MODE ANY?
         BZ    MEMLODED            NO, END OF LOAD MODULE DATA CODE
         TM    PO_FLG,$PODEL       DELETED MEMBER?
         BO    MEMLODED            YES, LEAVE IT IN RED
         NI    3(R4),X'F0'         CLEAR COLOUR SETTING
         OI    3(R4),X'04'         GREEN FOR RMODE=ANY
         TM    PX_FTB2,X'20'       RESIDENCE MODE 64?
         BZ    *+8                 NO, GREEN IT IS
         OI    3(R4),X'06'         YELLOW FOR RMODE=64
         MVC   4(8,R4),3(R4)       MAKE WHOLE NAME GREEN OR YELLOW
         NI    11(R4),X'07'        NORMAL GREEN OR YELLOW
         CLI   12(R4),X'02'        IS COLUMN 13 RED?
         MVC   12(68,R4),11(R4)    MAKE REST OF LINE GREEN OR YELLOW
         BNE   *+8                 NO
         MVI   12(R4),X'02'        YES, SO KEEP IT RED
         CLI   79(R4),X'07'        IS COLUMN 80 WHITE?
         BE    PGM80RDY            YES, KEEP IT WHITE
         MVC   79(1,R4),78(R4)     NO, MAKE IT GREEN OR YELLOW
PGM80RDY ICM   R14,15,TAGCOUNT     ANY MEMBERS TAGGED?
         BNZ   MEMLODED            YES, HIGHLIGHT TAGGED MEMBERS ONLY
         MVI   2(R2),FLDOUTHI      MAKE IT HIGH INTENSITY
         B     MEMLODED            END OF LOAD MODULE DATA CODE
         USING POFMTSPF,R2
SHOWTTR  UNPK  POF_TTR(7),PO_TTR(4) SHOW TTR IN HEX
         TR    POF_TTR,POHEX-240
         MVI   POF_TTR+6,C' '      ERASE RUBBISH
         CLI   PO_CON,0            MEMBER FROM CONCATENATION?
         BE    ALIASTST            NO, PERFORM COMMON USER DATA LOGIC
         UNPK  DOUBLE(3),PO_CON(2) YES, SHOW RELATIVE NUMBER IN HEX
         MVC   POF_CNCT,DOUBLE
         TR    POF_CNCT,POHEX-240
         CLI   POF_CNCT,C'0'       LEADING ZERO?
         BNE   ALIASTST            NO, PERFORM COMMON USER DATA LOGIC
         MVI   POF_CNCT,C' '       YES, SUPPRESS IT
         B     ALIASTST            PERFORM COMMON USER DATA LOGIC
DASHTTR  MVI   POF_TTR,C'-'        SHOW TTR AS DASHES IF DELETED
         MVC   POF_TTR+1(5),POF_TTR
ALIASTST TM    PO_IND,X'80'        IS THIS MEMBER AN ALIAS?
         BZ    USERDATA            NO
**       MVC   POF_TTR,=C'*ALIAS'  YES, DENOTE THIS
         MVI   POF_SP_1,C'*'       DENOTE ALIAS LEAVING TTR VISIBLE
         TM    PO_FLG,$PODEL       DELETED MEMBER?
         BO    USERDATA            YES, LEAVE THE WHOLE LINE IN RED
         DROP  R2                  POFMTSPF
         USING POFMTSPF,R4
         MVI   POF_SP_1,X'04'      SHOW ALIAS ASTERISK IN GREEN
         DROP  R4                  POFMTSPF
         USING POFMTSPF,R2
USERDATA TM    PO_IND,B'00011111'  DOES THE MEMBER HAVE ANY USER DATA?
         BZ    MEMLODED            NO, NOTHING ELSE TO FORMAT
         SR    R0,R0               CLEAR FOR INSERT
         TM    PO_FLG,$POSPF       DOES MEMBER HAVE SPFD STATISTICS?
         BO    SPFDMEM             YES, FORMAT THEM
         MVC   21(59,R4),20(R4)    NO, REMOVE BLUE FIELDS EXCEPT TTR
         TM    PO_FLG,$POSSI1      DOES MEMBER HAVE SSI?
         BO    SSIMEM              YES, DISPLAY IT
         MVC   DOUBLE(1),PO_IND    NO, GET USER DATA LENGTH CODE BYTE
         NI    DOUBLE,B'00011111'  TURN OFF ALIAS AND TTR COUNT BITS
         IC    R0,DOUBLE           LOAD USER DATA HALFWORD COUNT
         CVD   R0,DOUBLE
         MVC   38(4,R2),ED5
         ED    38(4,R2),DOUBLE+6   DISPLAY (NON-ZERO) HALFWORD COUNT
         MVC   43(L'HWCNTMSG,R2),HWCNTMSG
         B     MEMLODED            NOTHING ELSE TO FORMAT
SSIMEM   MVC   POF_DATE(4),SSILABEL
         UNPK  POF_DATE+4(9),PO_PTR(5)
         TR    POF_DATE+4(8),POHEX-240
         MVI   POF_DATE+12,C' '    ERASE RUBBISH
         TM    PO_IND,B'00011110'  WAS THE USER DATA HALFWORD COUNT 1?
         BNZ   MEMLODED            NO, MUST HAVE BEEN 2 SO NORMAL SSI
         MVC   POF_DATE+8(4),POF_DATE+12
         B     MEMLODED            NOTHING ELSE TO FORMAT
SPFDMEM  IC    R0,PX_VER           SHOW VERSION NUMBER
         CVD   R0,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  POF_VVMM(2),DOUBLE+6(2)
         MVI   POF_VVMM+2,C'.'
         IC    R0,PX_LVL           SHOW MODIFICATION NUMBER
         CVD   R0,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  POF_VVMM+3(2),DOUBLE+6(2)
         TM    PX_FLG,SPFSCLM      SCLM FLAG ON?
         BZ    SCLMOK              NO
         MVI   POF_SP_2,C'='       YES, DENOTE THIS
SCLMOK   ICM   R4,15,PX_CRE        GET DATE FULLWORD
         L     R15,CVTPTR(,0)      CVT
         CL    R4,CVTDATE-CVT(R15) TODAY?
         BNE   CREDATOK            NO, NOT CREATED TODAY
         MVI   POF_SP_3,FLDOUTHI   SHOW IT IN HIGH INTENSITY
         MVI   POF_SP_4,FLDOUTLO
         A     R2,SCREENSZ         POINT TO SHADOW BUFFER
         OI    POF_CREA,X'07'      SHOW DATE IN WHITE
         MVC   POF_CREA+1,POF_CREA INCLUDE SPACE TO REDUCE DATA STREAM
         S     R2,SCREENSZ         POINT TO BACK TO TEXT BUFFER
CREDATOK BAS   R14,SPFDATE         CONVERT TO YY-MM-DD
         MVC   POF_CREA,DOUBLE     SHOW CREATION DATE
         ICM   R4,15,PX_CHA        GET DATE FULLWORD
         L     R15,CVTPTR(,0)      CVT
         CL    R4,CVTDATE-CVT(R15) TODAY?
         BNE   MODDATOK            NO, NOT MODIFIED TODAY
         MVI   POF_SP_4,FLDOUTHI   SHOW IT IN HIGH INTENSITY
         MVI   POF_SPDT,FLDOUTLO
         A     R2,SCREENSZ         POINT TO SHADOW BUFFER
         OI    POF_DATE,X'07'      SHOW DATE IN WHITE
         MVC   POF_DATE+1,POF_DATE
         S     R2,SCREENSZ         POINT TO BACK TO TEXT BUFFER
MODDATOK BAS   R14,SPFDATE         CONVERT TO YY-MM-DD
         MVC   POF_DATE,DOUBLE     SHOW LAST MODIFIED DATE AND TIME
         UNPK  POF_TIME(3),PX_CHA+4(2)
         MVI   POF_TIME+2,C':'
         UNPK  POF_TIME+3(3),PX_CHA+5(2)
         MVI   POF_TIME+5,C':'
         UNPK  POF_TIME+6(3),PX_CHA+6(2)
         LA    R15,POF_SIZE        LOAD DISPLAY LINE POINTER
         ICM   R0,15,PX_SIZE       LOAD NUMBER TO SHOW
         BAS   R14,PDSFMT_5        SHOW SIZE
         LA    R15,POF_INIT        LOAD DISPLAY LINE POINTER
         ICM   R0,15,PX_INIT       LOAD NUMBER TO SHOW
         BAS   R14,PDSFMT_5        SHOW INIT
         LA    R15,POF_MOD         LOAD DISPLAY LINE POINTER
         ICM   R0,15,PX_MODS       LOAD NUMBER TO SHOW
         BAS   R14,PDSFMT_5        SHOW MOD
         MVC   POF_USER,PX_USER    SHOW USERID
         TR    POF_USER,PERIODS    HANDLE STRANGE USERIDS
*  HIGHLIGHT THE USERID IF IT IS THIS USERID AND THE DATA SET IS NOT A
*  PERSONAL DATA SET OF THIS USERID (CHECK IF FIRST QUALIFIER MATCHES).
         L     R14,REVPSCB         POINT TO THE PSCB
         USING PSCB,R14
         SR    R15,R15
         ICM   R15,1,PSCBUSRL      GET LENGTH OF USERID
         BNP   IMSCHECK            HANDLE BAD DATA
         CLI   PSCBUSRL,7          USERID LONGER THAN 7 BYTES?
         BNH   CHKSPFU1            NO
         LA    R14,PSCB+84         YES, POINT TO PSCBUID8
         CLC   PX_USER(8),0(R14)   THIS USERID?
         B     CHKSPFU2            GO SEE
CHKSPFU1 CLC   PSCBUSER,PX_USER    THIS USERID?
         DROP  R14                 PSCB
CHKSPFU2 BNE   IMSCHECK            NO
         BCTR  R15,0               DECREMENT FOR EXECUTE
CHKSPFID CLC   $DSNAME+2(0),0(R14) <<< EXECUTED >>>
         EX    R15,CHKSPFID        IS USERID FIRST DSN QUALIFIER?
         BNE   USERIDHI            NO, HIGHLIGHT ID
         LA    R14,$DSNAME+3(R15)  POINT PAST USERID IN DSNAME
         CLI   0(R14),C'.'         END OF QUALIFIER?
         BNH   IMSCHECK            YES, NOT WORTH HIGHLIGHTING THEN
USERIDHI A     R2,SCREENSZ         POINT TO SHADOW BUFFER
         OI    POF_USER,X'07'      SHOW USERID IN WHITE
         MVC   POF_USER+1(7),POF_USER
         S     R2,SCREENSZ         POINT TO BACK TO TEXT BUFFER
IMSCHECK CLI   PX_VER,100          PHONY VERSION NUMBER FOR IMS?
         BNE   SHOWSPFD            NO, GENUINE STATS
         CLI   POF_USER,C'('       AS EXPECTED?
         BNE   MEMLODED            NO
         CLI   POF_USER+7,C')'     AS EXPECTED?
         BNE   MEMLODED            NO
         CLI   PX_LVL,5            AS EXPECTED?
         BH    MEMLODED            NO
         SR    R15,R15             YES
         IC    R15,PX_LVL          GET REFERAL MEMBER TYPE BYTE
         SLL   R15,2               MULTIPLY BY 4 TO GET INDEX
         LA    R15,RFRLTYPE(R15)   POINT TO DESCRIPTION
         MVC   POF_MOD+2(4),0(R15) SUPPLY REFERAL MEMBER TYPE TEXT
         CLI   PX_LVL,3            FORMAT?
         BE    CLRREFID            YES, DON'T SHOW MEMBER NAME AGAIN
         CLI   POF_USER+1,C' '     BLANKS?
         BNE   MEMLODED            NO, DISPLAY USEFUL INFORMATION
CLRREFID MVC   POF_USER,POF_USER-1 YES, BLANK OUT USELESS "USERID"
         B     MEMLODED            END OF IMS REFEREAL TIDY UP
SHOWSPFD TM    STATUS15,$153PT5    OPTION 3.5 MEMBER LIST DISPLAY?
         BNO   MEMLODED            NO, STATISTICS FORMAT COMPLETE
         TM    PX_FLG,SPFSCLM      MEMBER MANAGED BY SCLM?
         BO    MEMLODED            YES, DO NOT LET USER OVERTYPE STATS
         MVI   POF_SP_2,FLDINHI    SET UP OVERTYPEABLE FIELDS
         MVI   POF_VVMM+2,FLDINHI
         CLI   POF_SP_3,FLDOUTHI   CREATION DATE IN HIGH INTENSITY?
         BE    *+8                 YES, LEAVE IT THAT WAY
         MVI   POF_SP_3,FLDOUTLO
         MVI   POF_SP_8,FLDINHI
         A     R2,SCREENSZ         POINT TO SHADOW BUFFER
         MVI   POF_VVMM,X'32'      SHOW INPUT FIELDS IN RED UNDERSCORE
         MVC   POF_VVMM+1(4),POF_VVMM
         MVI   POF_USER,X'32'
         MVC   POF_USER+1(7),POF_USER
         S     R2,SCREENSZ         POINT TO BACK TO TEXT BUFFER
         CLI   SCRNCOLS+3,80       80-COLUMN SCREEN?
         BE    MEMLODED            YES, NO COLUMN 81
         MVI   POF_SP_9,FLDOUTLO
MEMLODED TR    POF_NAME,PERIODS    HANDLE STRANGE MEMBER NAMES
         TM    POFLAG,PFSELCD      HERE TO UPDATE THIS LINE ONLY?
         BO    SELCODNX            YES, RETURN NOW
         TM    POFLG2,P2STAT       HERE TO UPDATE THIS LINE ONLY?
         BO    DIRMRGNX            YES, OVERTYPE MERGING NOW DONE
         A     R2,SCRNCOLS         POINT TO NEXT DETAIL SCREEN LINE
         LA    R3,PO_NXT           POINT TO NEXT MEMBER NAME
         BCT   R1,LODMEMNM
         B     DSPLYDIR            SCREEN NOW FILLED
CREATIME ICM   R0,15,24(R3)        GET DATE FULLWORD
         L     R15,CVTPTR(,0)      CVT
         CL    R0,CVTDATE-CVT(R15) TODAY?
         BNE   CRETIMOK            NO, NOT CREATED TODAY
         A     R2,SCREENSZ         POINT TO SHADOW BUFFER
         OI    49(R2),X'07'        SHOW DATE IN WHITE
         MVC   50(7,R2),49(R2)
         S     R2,SCREENSZ         POINT TO BACK TO TEXT BUFFER
CRETIMOK BAS   R14,SPFDATE         CONVERT TO YY-MM-DD
         MVC   49(8,R2),DOUBLE     SHOW LAST MODIFIED DATE
         UNPK  58(3,R2),28(2,R3)   SHOW LAST MODIFIED HOURS
         MVI   60(R2),C':'
         UNPK  61(3,R2),29(2,R3)   SHOW LAST MODIFIED MINUTES
         MVI   63(R2),C' '         ERASE GARBAGE
         TM    PO_IND,14           ACBLIB MEMBER?
         BNO   MEMLODED            NO, THAT IS ALL THE DATA TO SHOW
         ICM   R4,8,21(R3)         YES, LOAD FLAG BYTE
         SRL   R4,4                CONVERT
         STCM  R4,8,DOUBLE              B'00XX0XXX'
         SLL   R4,1                     TO
         ICM   R4,8,DOUBLE              B'XXXXX000'
         SLL   R4,6
         LA    R0,5                MAXIMUM OF FIVE BITS TO TEST
         LA    R15,ACBFLAGS        POINT TO FIRST DISPLAY FLAG
ACBFLGLP LTR   R4,R4               IS SIGN BIT ON?
         BM    ACBFLGOK            YES
         SLL   R4,1                NO, SHIFT IT OUT
         LA    R15,4(,R15)         POINT TO NEXT DISPLAY FLAG
         BCT   R0,ACBFLGLP         TEST NEXT BIT
ACBFLGOK MVC   64(4,R2),0(R15)     DISPLAY ACBLIB MEMBER TYPE
         B     MEMLODED            THAT IS ALL THE DATA TO SHOW
         DROP  R3,R6               PO_SECT, PX_SECT
         SPACE
PDSFMT_5 MVC   0(6,R15),ED5        LOAD EDIT PATTERN
         CVD   R0,DOUBLE           MAKE IT PACKED DECIMAL
         ED    0(6,R15),DOUBLE+5   MAKE IT NUMERIC CHARACTERS
         OC    DOUBLE(5),DOUBLE    ANY HIGH DIGITS LOST?
         BZR   R14                 NO, RETURN TO CALLER
         MVC   0(1,R15),DOUBLE+4   YES, SUPPLY 1 HIGHER DIGIT
         OC    0(6,R15),=C'000000' MAKE NUMERIC EBCDIC CHARACTERS
         BR    R14                 RETURN TO CALLER
         SPACE
         DROP  R7,R2               DIRFRMAT, POFMTSPF
         SPACE
         SPACE
RFRLTYPE DC    C' NEW TBL DFM FMTMSGIMSGO'
ACBFLAGS DC    C'DEDBMSDBSHR1SHR DMB PSB '
SSILABEL DC    C'SSI:'
         SPACE
         DC    0D'0'
         LTORG
         DC    0H'0'
         EJECT
**********************************************************************
*                                                          *         *
*         VERIFY PROGRAM HISTORY CONDITIONS                *  GP@HC  *
*                                                          * 09/2000 *
**********************************************************************
         SPACE
*               R2 -> PRIMARY BUFFER SCREEN LINE
*               R3 -> INTERNAL MEMBER ENTRY
         SPACE
         USING PO_SECT,R3
         USING HANDLHST,R7
HANDLHST DS    0H                  VERIFY PROGRAM HISTORY REQUEST
         TM    DS1RECFM,DCBRECU    RECFM=U?
         BNO   HSTNTRFU            NO
         LA    R0,1024
         CH    R0,DS1BLKL          BLOCK SIZE SMALLER THAN MINIMUM?
         BH    HSTNTRFU            YES, NOT A PROGRAM LIBRARY
         TM    PO_IND,X'60'        IS MEMBER A PROGRAM?
         BZ    HSTNTPGM            NO, NO NOTE LIST TTR
         TM    PO_FLG,$POSSI1      DOES PO_PTR CONTAIN SSI?
         BO    HSTNTPGM            YES, SO NOT A PROGRAM
         ICM   R5,15,PO_PTR        NO, POINT TO EXTENSION
         BZ    HSTNTPGM            NONE, SO NOT A PROGRAM
         USING PX_SECT,R5
         TM    PX_ATR2,X'08'       IS PROGRAM NOT EDITABLE?
         BO    HSTNTEDT            YES, NO RELEVANT DATA PRESENT
         DROP  R5                  PX_SECT
         MVC   DOUBLE(1),PO_IND
         NI    DOUBLE,X'1F'        GET USER DATA HALFWORD COUNT
         CLI   DOUBLE,10           AT LEAST 10 HALFWORDS?
         BL    HSTNTPGM            NO, CAN'T BE A PROGRAM
         CLI   1(R2),C'M'          CORRECT SELECTION CODE FOR MAP?
         BE    HANDLMAP            YES
         OI    STATUS9,$9_H        SIGNAL FUNCTION REQUEST CODE
         B     DOXTRACT            PROCESS MEMBER
HANDLMAP OI    STATUS9,$9_M        SIGNAL FUNCTION REQUEST CODE
         B     DOXTRACT            PROCESS MEMBER
         SPACE
HSTNTRFU MVI   MSG,101             DATA SET IS NOT A PROGRAM LIBRARY
         B     SELCFAIL            GO SHOW THE MESSAGE
         SPACE
HSTNTPGM MVI   MSG,89              SELECTED MEMBER IS NOT A PROGRAM
         B     SELCFAIL            GO SHOW THE MESSAGE
         SPACE
HSTNTEDT MVI   MSG,88              NE ATTRIBUTE - METADATA NOT RETAINED
         B     SELCFAIL            GO SHOW THE MESSAGE
         SPACE
         DROP  R3                  PO_SECT
         DROP  R7                  HANDLHST
         EJECT
**********************************************************************
*                                                          *         *
*         DIRECTORY DISPLAY SUBCOMMAND TABLE               *  GP@FT  *
*                                                          *  10/96  *
**********************************************************************
         SPACE
DIRCMDTB DC    0H'0'              ENTRIES MUST BE IN COLLATING SEQUENCE
         DC    CL8'+       '
         B     DIRDNCMD
         DC    CL8'-       '
         B     DIRUPCMD
         DC    CL8'=X      '
         B     DIREXIT
         DC    CL8'B       '
         B     POSPFCMD
         DC    CL8'BOT     '
         B     DIRBOTOM
         DC    CL8'BOTTOM  '
         B     DIRBOTOM
         DC    CL8'BROWSE  '
         B     POSPFCMD
         DC    CL8'CAN     '
         B     DIRCAN
         DC    CL8'CANCEL  '
         B     DIRCAN
         DC    CL8'DELINK  '
         B     PODELINK
         DC    CL8'DL      '
         B     PODELINK
         DC    CL8'DOWN    '
         B     DIRDNCMD
         DC    CL8'E       '
         B     POSPFCMD
         DC    CL8'EDIT    '
         B     POSPFCMD
         DC    CL8'END     '
         B     DIREXIT
         DC    CL8'EXIT    '
         B     DIREXIT
         DC    CL8'F       '
         B     POSEARCH
         DC    CL8'FIND    '
         B     POSEARCH
         DC    CL8'IFIND   '
         B     PUTBCNTR
         DC    CL8'INFO    '
         B     PDSINFO
         DC    CL8'L       '
         B     DIRLOC
         DC    CL8'LIST    '
         B     DIRLOC
         DC    CL8'LOC     '
         B     DIRLOC
         DC    CL8'LOCATE  '
         B     DIRLOC
         DC    CL8'M       '
         B     DIRPATEN
         DC    CL8'MEM     '
         B     DIRPATEN
         DC    CL8'MEMBER  '
         B     DIRPATEN
         DC    CL8'OFF     '
         B     OFFLDCHK
         DC    CL8'OFFLOAD '
         B     OFFLDCHK
         DC    CL8'PAT     '
         B     DIRPATEN
         DC    CL8'PATTERN '
         B     DIRPATEN
         DC    CL8'PDS     '
         B     PDSUPDTE
         DC    CL8'PDSLOAD '
         B     PDSUPDTE
         DC    CL8'REF     '
         B     DIRRFRSH
         DC    CL8'REFRESH '
         B     DIRRFRSH
         DC    CL8'RES     '
         B     TAGRESET
         DC    CL8'RESET   '
         B     TAGRESET
         DC    CL8'RETURN  '
         B     DIREXIT
         DC    CL8'RFIND   '
         B     PUTBCNTR
         DC    CL8'S       '
         B     DIRSEL
         DC    CL8'SEARCH  '
         B     POSEARCH
         DC    CL8'SEL     '
         B     DIRSEL
         DC    CL8'SELECT  '
         B     DIRSEL
         DC    CL8'SEQ     '
         B     SEQLDCHK
         DC    CL8'SEQLOAD '
         B     SEQLDCHK
         DC    CL8'SORT    '
         B     DIRSORT
         DC    CL8'SRCHFOR '
         B     POSEARCH
         DC    CL8'TAGFLIP '
         B     TAGFLIP
         DC    CL8'TF      '
         B     TAGFLIP
         DC    CL8'TOP     '
         B     DIRTOP
         DC    CL8'U       '
         B     POSPFCMD
         DC    CL8'UP      '
         B     DIRUPCMD
         DC    CL8'UPDATE  '
         B     POSPFCMD
         DC    CL8'V       '
         B     POSPFCMD
         DC    CL8'VIEW    '
         B     POSPFCMD
         DC    H'-1'               END OF TABLE
         EJECT
**********************************************************************
*                                                          *         *
*         READ AND STORE DIRECTORY ENTRY DATA              * GP@SECV *
*                                                          *  03/86  *
**********************************************************************
         SPACE
         USING READDIR,R7
         USING IHADCB,DIRDCB
READDIR  DS    0H                  PROCESS PDS DIRECTORIES
         XASAM24
         MVC   DIRDCB,STDIRDCB     LOAD DCB TEMPLATE
         MVC   DCBDDNAM,$DDNAME    LOAD FILE NAME INTO DCB
         LA    R3,DIRENTS          POINT TO FIRST ENTRY
         SR    R4,R4               FIRST ENTRY IS NUMBER ZERO
         STM   R3,R4,TOPMEMAD      IN CASE OF SORT FOR CONCATENATED MEM
         SR    R8,R8               INITIALIZE MEMBER COUNTER
         ST    R8,TAGCOUNT         INITIALIZE TAGGED MEMBER COUNT
         ST    R8,EXTPGMSZ         INITIALIZE PROGRAM SIZE ACCUMULATOR
         ST    R8,TOTPGMSZ         INITIALIZE PROGRAM SIZE ACCUMULATOR
         ST    R8,TOTSPFSZ         INITIALIZE EDIT RECORDS ACCUMULATOR
         ST    R8,BLKREADS         INITIALIZE BLOCK READ COUNTER
         STH   R8,CONCTOPN         ZERO CONCATENATED FILE OPEN COUNT
         TM    STATUS17,$17PAT+$17P34  PATTERN MATCHING MEMBER NAMES?
         BZ    POFILTOK            NO, CONTINUE
         MVC   MEMFILTR,PUTLINS+4  YES, COPY THE MEMBER NAME MASK
         OI    POFLAG,PFPAT        FLAG USING NAME PATTERN FILTERING
         NI    STATUS17,255-$17PAT RESET GLOBAL FLAG
POFILTOK TM    POFLAG,PFPAT        USING NAME PATTERN FILTERING?
         BNO   OPENDIR             NO, CONTINUE
         MVC   MEMPATEN,MEMFILTR   COPY MASK TO HOLD AREA
         MVC   RENMEMSV,PDBLANKS   BLANK BYTES AFTER MASK HOLD AREA
         LA    R15,PATNPREP        POINT TO PREPARATION ROUTINE
         BASR  R14,R15             PREPARE THE MASK FOR MATCHING
         USING PO_SECT,R3
OPENDIR  MVI   OPEND,X'80'         OPEN PDS DIRECTORY
         OPEN  (DIRDCB,INPUT),MF=(E,OPEND)
         BAS   R14,OPENDIRX        CHECK THE SUCCESS OF THE OPEN
         NI    MODE,255-MD_EREP    DISABLE EREP FORMATTING
         AIF   (NOT &ENVZV2).ITISOK1
         ICM   R0,3,ARLRTRVD       ANY CONCATENATED JFCBS FETCHED?
         BNZ   GENSNOGO            YES, SKIP MEMBER GENERATIONS CHECK
         MVC   RDISITM,RDISITS     PRIME PARAMETER LIST
         USING ISM,RDISITM
         ISITMGD DCB=DIRDCB,DATATYPE=YES,MF=(E,RDISITM)
         TM    STATUS13,$13MSEL    HERE FOR MEMBER SELECTION?
         BO    GENSOKAY            YES, THEY CAN'T BE ALLOCATED
         TM    ISMOFLG2,ISMMGENS   GENERATIONS ENABLED?
         BO    GENSALOW            YES
GENSNOGO TM    STATUS15,$15GEN     GENERATION DISPLAY REQUESTED?
         BZ    GENSOKAY            NO, GOOD
         MVI   MSG,222             MEMBER GENERATIONS NOT ALLOWED
         NI    STATUS15,255-$15GEN CANCEL REQUEST
         B     GENSOKAY
GENSALOW OI    POFLG2,P2MGEN       FLAG GENERATIONS MAY BE PRESENT
         MVI   MSG,221             ISSUE REF G TO SHOW GENERATIONS
         TM    STATUS15,$15GEN     GENERATION DISPLAY REQUESTED?
         BZ    GENSOKAY            NO
         MVI   MSG,223             ISSUE REF N TO HIDE GENERATIONS
         L     R1,=A(PDSDCB)       LOAD BPAM DCB
         MVC   DYNDCBW(PDSDCBL),0(R1)
         MVC   DCBDDNAM-IHADCB+DYNDCBW,$DDNAME
         MVI   OPEND,X'80'         OPEN BPAM DCB
         OPEN  (DYNDCBW,INPUT),MF=(E,OPEND)
         L     R0,MEMGENS#         GET DESB AREA SIZE
         GETMAIN RC,LV=(0),BNDRY=PAGE,SP=20,LOC=(31,64)
         LTR   R15,R15
         BZ    RDGMOKAY
         STC   R15,DOUBLE
         MVC   MSG+2(11),=C'GETMAIN RC='
         UNPK  MSG+13(3),DOUBLE(2)
         TR    MSG+13(2),POHEX-C'0'
         MVI   MSG+15,C' '
         LA    R0,13
         STH   R0,MSG              SET MESSAGE LENGTH
         OI    STATUS7,$7BELL      REQUEST AUDIBLE ALARM
         NI    STATUS15,255-$15GEN CANCEL REQUEST
         MVI   CLOSED,X'80'        CLOSE BPAM DCB
         CLOSE (DYNDCBW),MF=(E,OPEND)
         B     GENSOKAY            TRY FOR NORMAL DISPLAY
RDGMOKAY MVC   DESRVGD,DESRVGS     LOAD PARAMETER TEMPLATE
         ST    R1,MEMGENS@         SAVE STORAGE ADDRESS
         ST    R1,DIRDESB@         PRIME FIRST DESB ADDRESS
         LR    R2,R1               POINT TO DESB AREA
         L     R0,MEMGENS#         GET DESB AREA SIZE
         DESERV FUNC=GET_ALL_G,                                        +
               AREA=((R2),(R0)),                                       +
               DCB=DYNDCBW,                                            +
               MF=(E,DESRVGD,NOCHECK)
         LTR   R15,R15             SUCCESS?
         BZ    PODESBLP
         STM   R15,R0,DOUBLE       SAVE RETURN AND REASON CODES
         MVC   MSG+2(10),=C'DESERV RC='
         UNPK  MSG+12(3),DOUBLE+3(2)
         UNPK  MSG+15(5),DOUBLE+6(3)
         TR    MSG+12(7),POHEX-C'0'
         MVI   MSG+14,C'-'
         MVI   MSG+19,C' '
         LA    R0,17
         STH   R0,MSG              SET MESSAGE LENGTH
         OI    STATUS7,$7BELL      REQUEST AUDIBLE ALARM
PODESBLP EQU   *
         L     R4,DIRDESB@         POINT TO DESB AREA
         LTR   R4,R4               END OF DESB CHAIN?
         BZ    RDGENEND            YES
         USING DESB,R4
         MVC   DIRDESB@,DESB_NEXT  SAVE ADDRESS OF NEXT BUFFER
         ICM   R5,15,DESB_COUNT    GET THE BUFFER SMDE COUNT
         BZ    PODESBLP            HANDLE EMPTY BUFFER
         LA    R4,DESB_DATA        POINT TO FIRST SMDE
         DROP  R4                  DESB
GENMEMLP EQU   *
         USING SMDE,R4
         XC    PO_CON(6),PO_CON    ZERO UNUSED ENTRY BYTES
         MVC   PO_TTR,SMDE_MLT     GET MEMBER MLT
         SR    R14,R14
         ICM   R14,3,SMDE_GENE_OFF GET GENERATION SECTION OFFSET
         ALR   R14,R4              GET GENERATION SECTION ADDRESS
         USING SMDE_GENE,R14
         MVC   PO_MEM,SMDE_GENE_NAME
         LA    R0,$PXGENL          GET ENTRY EXTENSION LENGTH
         L     R2,DIRLIMAD         GET LIMIT ADDRESS
         SR    R2,R0               POINT TO NEW EXTENSION
         ST    R2,DIRLIMAD         SAVE NEW BASE ENTRY EXTENT LIMIT
         STCM  R2,15,PO_PTR        SAVE EXTENSION ADDRESS IN BASE
*        XC    0($PXGENL,R5),0(R5) ZERO ENTRY - NOT NEEDED
         USING PX_SECT,R2
         STC   R0,PX_LEN           SET EXTENSION LENGTH
         MVC   PX_FLG,SMDE_GENE_FLGS1
         MVC   PX_GNUM,SMDE_GENE_NUMBER
         MVC   PX_USER,SMDE_GENE_USERID
         MVC   PX_GTOD,SMDE_GENE_TIMESTAMP
         MVC   PO_FLG,PX_FLG
         NI    PO_FLG,SMDE_IS_DUMMY = $PODEL
         DROP  R14                 SMDE_GENE
         SR    R14,R14
         STCM  R14,3,PX_VER        CLEAR ISPF VERSION AND MOD LEVEL
         STCM  R14,15,PX_SIZE      CLEAR ISPF SIZE
         ICM   R14,3,SMDE_USRD_LEN GET USERDATA LENGTH
         SRL   R14,1               CONVERT TO HALFWORD COUNT
         STC   R14,PO_IND          SAVE IT
         ICM   R14,3,SMDE_USRD_OFF GET USERDATA SECTION OFFSET
         BZ    RDGENNXT            SECTION NOT PRESENT
         ALR   R14,R4              GET USERDATA SECTION ADDRESS
         USING SPFVM,R14
         CLI   PO_IND,15           CLASSIC ISPF USERDATA LENGTH?
         BNE   RDGENEXT            NO
         TM    SPFFLAGS,SPFXSTAT   EXTENDED STATISTICS?
         BO    RDGENNXT            YES, SO NOT ISPF STATS
         B     RDGENSPF            NO, AS EXPECTED
RDGENEXT CLI   PO_IND,20           EXTENDED ISPF USERDATA LENGTH?
         BNE   RDGENNXT            NO, NOT ISPF STATISTICS
         TM    SPFFLAGS,SPFXSTAT   EXTENDED STATISTICS?
         BNO   RDGENNXT            NO, SO NOT ISPF STATS
RDGENSPF CLI   SPFVM,0             VALID VERSION?
         BE    RDGENNXT            NO
         CLI   SPFVM,99            VALID VERSION?
         BH    RDGENNXT            NO
         CLI   SPFVM+1,99          VALID LEVEL?
         BH    RDGENNXT            NO
         TM    SPFCREDT+3,X'0F'    EXPECTED DATE FORMAT?
         BNO   RDGENNXT            NO
         TM    SPFCHGDT+3,X'0F'    EXPECTED DATE FORMAT?
         BNO   RDGENNXT            NO
         TP    SPFCREDT            EXPECTED DATE FORMAT?
         BNZ   RDGENNXT            NO
         TP    SPFCHGDT            EXPECTED DATE FORMAT?
         BNZ   RDGENNXT            NO
         MVC   PX_VER(2),SPFVM     COPY ISPF VV.MM
         MVC   PX_SIZE+2(2),SPFCCNT AND ISPF CURRENT SIZE
         TM    SPFFLAGS,SPFXSTAT   EXTENDED STATISTICS?
         BNO   RDGENSIZ            NO, HAVE CORRECT SIZE
         MVC   PX_SIZE,SPFXCCNT    YES, GET ISPF CURRENT SIZE
         DROP  R14                 SPFVM
RDGENSIZ ICM   R0,15,PX_SIZE       GET SPF LINE COUNT
         A     R0,TOTSPFSZ         ACCUMULATE LINE COUNTS SO FAR
         ST    R0,TOTSPFSZ         SAVE NEW VALUE
RDGENNXT LA    R3,$POSIZ(,R3)      POINT PAST LATEST ENTRY
         LA    R8,1(,R8)           INCREMENT MEMBER COUNTER
         ICM   R0,15,SMDE_LEN      GET THE SIZE OF THIS SMDE
         ALR   R4,R0               POINT TO THE NEXT SMDE
         LA    R0,60(,R3)          ALLOW FOR A BIG ENTRY
         C     R0,DIRLIMAD         IS IN-CORE TABLE ALMOST EXHAUSTED?
         BH    RDDIRFUL            YES, STOP NOW
         BCT   R5,GENMEMLP         PROCESS NEXT MEMBER
         DROP  R4,R2               SMDE, PX_SECT
         B     PODESBLP            FOLLOW DESB CHAIN
RDGENEND EQU   *
         L     R1,MEMGENS@         GET DESB AREA ADDRESS
         L     R0,MEMGENS#         GET DESB AREA SIZE
         FREEMAIN RU,LV=(0),A=(1),SP=20     FREE DESB AREA
         ST    R15,MEMGENS@
         MVI   CLOSED,X'80'        CLOSE BPAM DCB
         CLOSE (DYNDCBW),MF=(E,OPEND)
         B     EOPDSDIR            END OF MEMBER LIST
GENSOKAY EQU   *
.ITISOK1 ANOP
         SPACE
READBLK  GET   DIRDCB,REPLY        READ A DIRECTORY BLOCK
         TM    STATUS,STABEND      DCB ABEND?
         BO    IOERRDIR            YES, FLAG AND TREAT AS E-O-F
         CLI   SYNADSW,X'FF'       I/O ERROR?
         BE    IOERRDIR            YES, FLAG AND TREAT AS E-O-F
         LA    R2,1
         A     R2,BLKREADS         INCREMENT BLOCK READ COUNTER
         ST    R2,BLKREADS         SAVE NEW BLOCK READ COUNTER VALUE
         LH    R2,REPLY            GET BLOCK USED-BYTE-COUNT
         CH    R2,=H'14'           USED BYTE COUNT LESS THAN MINIMUM?
         BL    READBLK             YES, IGNORE BLOCK (BUG WITH PDSE)
         CH    R2,=H'256'          USED BYTE COUNT MORE THAN MAXIMUM?
         BH    READBLK             YES, IGNORE BLOCK (BUG WITH PDSE)
         BCTR  R2,0
         BCTR  R2,0                SUBTRACT 2 FOR COUNTER HALFWORD
         LA    R4,REPLY+2          POINT TO FIRST MEMBER IN BLOCK
NXTMEMBR CLC   LASTNAME(11),0(R4)  END OF THIS DIRECTORY?
         BE    EOTHSDIR            YES
         MVC   PO_MEM,0(R4)        COPY MEMBER NAME
         MVC   PO_CON,CONCTOPN+1   COPY CONCATENATION NUMBER
         MVC   PO_TTR(4),8(R4)     COPY TTR AND ALIAS FLAG
         TM    STATUS13,$13RFE     RUNNING UNDER RFE MENU SYSTEM?
         BNO   PORDPTOK            NO
         TM    POFLAG,PFPAT        USING NAME PATTERN FILTERING?
         BNO   PORDPTOK            NO
         L     R15,=A(PATNCOMP)    YES, POINT TO MATCHING ROUTINE
         BASR  R14,R15             SEE IF NAME MATCHES MASK
         CLI   TAGCOUNT+3,0        DID IT MATCH?
         BE    MAKENTRY            NO, SO OMIT THIS MEMBER ENTRY
         MVI   TAGCOUNT+3,0        YES, RESET THE TAG COUNT
         TM    STATUS17,$17P34     MEMBER NAME SCAN ACTIVE?
         BNO   PORDPTOK            NO, MAKING A MEMBER LIST AS USUAL
         OI    STATUS17,$17PAT     YES, FLAG POSITIVE RESULT
         B     EOPDSDIR            HAVE FOUND THE ANSWER - NOW RETURN
PORDPTOK XC    PO_FLG(5),PO_FLG    ZERO REST OF BASE ENTRY
         LA    R8,1(,R8)           INCREMENT MEMBER COUNTER
         MVC   DOUBLE(1),11(R4)    MOVE USER DATA LENGTH TO WORK AREA
         NI    DOUBLE,X'7F'        TURN OFF ALIAS BIT
         BZ    DONENTRY            NO USER DATA AT ALL
*        CLI   DOUBLE,32+14        IMS ACB MEMBER WITH A USER TTR?
*        BE    ACBSTORE            YES, STORE STUFF IN-CORE
         CLI   DOUBLE,20           HAS THIS MEMBER SPF STATS?
         BE    SPFSTORX            YES, STORE THEM IN-CORE
         CLI   DOUBLE,15           HAS THIS MEMBER SPF STATS?
         BE    SPFSTORE            YES, STORE THEM IN-CORE
         CLI   DOUBLE,14           IMS ACB MEMBER OR PFD STATS?
         BE    ACBORPFD            YES, FIND OUT WHICH
         CLI   DOUBLE,9            IS THIS AN IMS REFERAL MEMBER?
         BE    REFSTORE            YES, STORE STUFF IN-CORE
*        CLI   DOUBLE,6            IS THIS AN IMS FORMAT MEMBER?
*        BE    FMTSTORE            YES, STORE STUFF IN-CORE
         CLI   DOUBLE,2            HAS THIS MEMBER SSI?
         BE    SSISTORE            YES, STORE IT IN-CORE
         CLI   DOUBLE,1            ONE HALF-WORD?
         BE    SS1STORE            YES, STORE IT IN-CORE
CHKFAILD TM    DS1RECFM,DCBRECU    IS IT UNDEFINED RECORD FORMAT?
         BNO   DONENTRY            NO, SO CANNOT BE A LOAD LIBRARY
         TM    PO_IND,X'60'        AT LEAST ONE NOTE LIST TTR IN ENTRY?
         BZ    DONENTRY            NO, NOT A LOAD MODULE
         LA    R0,$PXLMCL          GET COMMON EXTENSION ENTRY LENGTH
         TM    30(R4),X'10'        IS THERE SSI DATA?
         BNO   *+8                 NO
         LA    R0,$PXLMSL          GET SSI EXTENSION ENTRY LENGTH
         TM    11(R4),X'80'        IS THIS AN ALIAS?
         BNO   *+8                 NO
         LA    R0,$PXLMAL          GET ALIAS EXTENSION ENTRY LENGTH
         L     R5,DIRLIMAD         GET LIMIT ADDRESS
         SR    R5,R0               POINT TO NEW EXTENSION
         ST    R5,DIRLIMAD         SAVE NEW BASE ENTRY EXTENT LIMIT
         STCM  R5,15,PO_PTR        SAVE EXTENSION ADDRESS IN BASE
         XC    0($PXLMCL,R5),0(R5) ZERO ENTRY
         USING PX_SECT,R5
         STC   R0,PX_LEN           SET EXTENSION LENGTH
         MVC   PX_ATR,20(R4)       LOAD USUAL LOAD MODULE DATA
         MVI   PO_FLG,$POPGM       FLAG PROGRAM ATTRIBUTES PRESENT
         LA    R1,33(,R4)          POINT TO END OF SECTION
         TM    20(R4),X'04'        IS THIS A SCATTER PROGRAM?
         BZ    *+8                 NO
         LA    R1,8(,R1)           YES, ADD LENGTH OF SCTR SECTION
         TM    30(R4),X'41'        F4 ADDRESSING EXTENSION?
         BZ    NOTF4AE             NO
         TM    31(R4),X'C0'        F4 AE EXPANSION PRESENT?
         BZ    NOTF4AE             NO
         LA    R1,8(,R1)           YES, ADD LENGTH OF AE SECTION
NOTF4AE  SR    R6,R6
         ICM   R6,7,22(R4)         GET LENGTH OF LOAD MODULE
         TM    11(R4),X'80'        IS THIS AN ALIAS?
         BZ    ADDPGMSZ            NO, GET AUTHORIZATION CODE DETAILS
         MVC   30(8,R3),REALUNKN   YES, PRIME FOR INVALID
         NI    DOUBLE,X'1F'        TURN OFF USER TTR BITS
         CLI   DOUBLE,16           AT LEAST 16 HALFWORDS OF USER DATA?
         BL    DNREALNM            NO, REAL NAME CAN'T BE THERE
         MVC   PX_REAL,3(R1)       YES, COPY THE REAL NAME
DNREALNM LA    R1,11(,R1)          POINT PAST ALIAS SECTION
         SR    R6,R6               DON'T COUNT SIZE OF ALIAS
ADDPGMSZ LR    R0,R6               COPY PROGRAM SIZE
         A     R6,TOTPGMSZ         ACCUMULATE PROGRAM SIZES SO FAR
         ST    R6,TOTPGMSZ         SAVE NEW VALUE
         TM    31(R4),X'10'        RESIDENCY MODE OF ANY?
         BZ    CHECKSSI            NO
         A     R0,EXTPGMSZ         YES, ACCUMULATE SIZES OVER 16MB LINE
         ST    R0,EXTPGMSZ         SAVE NEW VALUE
CHECKSSI TM    30(R4),X'10'        IS THERE SSI DATA?
         BZ    GETATHCD            NO
         LA    R1,1(,R1)           YES, CATER FOR SSI SECTION ALIGNMENT
         SRL   R1,1
         SLL   R1,1
         MVC   PX_SSI,0(R1)        COPY THE SSI
         OI    PO_FLG,$POSSI2      FLAG PROGRAM SSI DATA PRESENT
         LA    R1,4(,R1)           POINT PAST SSI SECTION
GETATHCD MVC   PX_ACL(2),0(R1)     GET AUTHORIZATION DETAILS
         B     DONENTRY            HAVE NOW STORED ALL DETAILS
ACBORPFD TM    DS1RECFM,DCBRECU    IS IT UNDEFINED RECORD FORMAT?
         BNO   SPFSTORE            NO, ASSUME PFD STATISTICS
         USING ACBNTRY,R4
ACBSTORE SR    R0,R0               CLEAR HIGH BYTE
         ICM   R0,7,ACBDATE        LOAD CREATION DATE
         BAS   R14,CHKDATE         VERIFY EXPECTED DATE FORMAT
         MVC   25(5,R3),ACBDATE    COPY DATE AND TIME LIKE SPF
         MVC   21(1,R3),ACBFLAG    COPY FLAG BYTE
         MVI   24(R3),0            ZERO DATE HIGH BYTE
         CLI   25(R3),65           BEFORE 1966?
         BH    *+8                 NO
         MVI   24(R3),1            YES, REALLY A CENTURY LATER
         SR    R0,R0
         ICM   R0,3,ACBSIZE        GET IMS ACBLIB MEMBER'S SIZE
         LA    R1,6                ASSUME 64-BYTE UNITS
         TM    ACBFLAG,ACBDMB      PSB?
         BNO   ACBSCALE            YES
         CLI   ACBRLVL,X'81'       EARLIER THAN IMS VERSION 8?
         BNL   ACBSCALE            NO, DMB ALSO 64-BYTE UNITS
         LA    R1,4                ASSUME 16-BYTE UNITS
         CLI   ACBRLVL,X'61'       EARLIER THAN IMS VERSION 6?
         BNL   ACBSCALE            NO
         LA    R1,3                SIZE REALLY IS IN DOUBLEWORDS
ACBSCALE SLL   R0,0(R1)            SCALE SIZE TO BYTE COUNT
         STCM  R0,7,18(R3)         SAVE SIZE IN LOAD MODULE SIZE SLOT
         TM    11(R4),X'80'        IS THIS MEMBER AN ALIAS?
         BO    DONENTRY            YES, DON'T COUNT ITS SIZE
         A     R0,TOTPGMSZ         ACCUMULATE BYTE COUNTS SO FAR
         ST    R0,TOTPGMSZ         SAVE NEW VALUE
         B     DONENTRY            HAVE NOW STORED ALL DETAILS
         DROP  R4                  ACBNTRY
FMTSTORE ICM   R0,15,16(R4)        LOAD CREATION DATE
         BAS   R14,CHKDATE         VERIFY EXPECTED DATE FORMAT
         MVC   18(3,R3),13(R4)     COPY SIZE LIKE PGM (DROP HIGH BYTE)
         MVC   24(6,R3),16(R4)     COPY DATE AND TIME LIKE SPF
         TM    11(R4),X'80'        IS THIS MEMBER AN ALIAS?
         BO    DONENTRY            YES, DON'T COUNT ITS SIZE
         SR    R0,R0               (IMS FMT, DIF, DOF, MID OR MOD?)
         ICM   R0,15,12(R4)        GET IMS FORMAT MEMBER'S BYTE COUNT
         A     R0,TOTPGMSZ         ACCUMULATE BYTE COUNTS SO FAR
         ST    R0,TOTPGMSZ         SAVE NEW VALUE
         B     DONENTRY            HAVE NOW STORED ALL DETAILS
SSISTORE MVC   PO_PTR(4),12(R4)    SAVE SSI DATA
SS1STORE MVC   PO_PTR(2),12(R4)    SAVE SSI DATA
         OI    PO_FLG,$POSSI1      FLAG SSI DATA PRESENT
         B     DONENTRY            HAVE NOW STORED ALL DETAILS
REFSTORE ICM   R0,15,16(R4)        LOAD CREATION DATE
         BAS   R14,CHKDATE         VERIFY EXPECTED DATE FORMAT
         L     R5,DIRLIMAD         GET LIMIT ADDRESS
         LA    R0,$PXSPFL          GET EXTENSION SIZE
         SR    R5,R0               POINT TO NEW EXTENSION
         ST    R5,DIRLIMAD         SAVE NEW BASE ENTRY EXTENT LIMIT
         STCM  R5,15,PO_PTR        SAVE EXTENSION ADDRESS IN BASE
         XC    0($PXSPFL,R5),0(R5) ZERO ENTRY
         STC   R0,PX_LEN           SET EXTENSION LENGTH
         MVI   PO_FLG,$POSPF       FLAG ISPF STATISTICS PRESENT
         MVC   PX_CRE,16(R4)       COPY CREATION DATE
         MVC   PX_CHA(6),16(R4)    ALSO CALL IT MODIFICATION DATE/TIME
         MVI   PX_VER,100          SUPPLY VERSION TO DENOTE IMS REFERAL
         MVC   PX_LVL,12(R4)       COPY TYPE BYTE AS MODIFICATION LEVEL
         MVC   PX_SIZE+1(3),13(R4) COPY SIZE
         MVC   PX_INIT+1(3),13(R4) COPY SIZE
         TM    11(R4),X'80'        IS THIS MEMBER AN ALIAS?
         BO    REFALIAS            YES, DON'T COUNT ITS SIZE
         SR    R0,R0
         ICM   R0,7,13(R4)         GET REFERAL MEMBER'S BYTE COUNT
         A     R0,TOTSPFSZ         ACCUMULATE BYTE COUNTS SO FAR
         ST    R0,TOTSPFSZ         SAVE NEW VALUE
REFALIAS MVI   PX_USER,C'('        INDICATE FAKE USERID
         MVC   PX_USER+1(6),24(R4) COPY THE ROOT NAME
         MVI   PX_USER+7,C')'      INDICATE FAKE USERID
         CLI   PX_USER+1,C' '      WAS SOMETHING COPIED?
         BH    DONENTRY            YES, DONE FAKING SPF STATS DETAILS
         CLI   PX_LVL,3            IS THIS A FORMAT?
         BNE   DONENTRY            NO, DONE FAKING SPF STATS DETAILS
         MVC   PX_USER+1(6),0(R4)  YES, COPY MEMBER NAME FOR SORTING
         B     DONENTRY            FINISHED FAKING SPF STATS DETAILS
         USING SPFSTATS,R4
SPFSTORX TM    SPFFLAGS,SPFXSTAT   EXTENDED STATISTICS?
         BNO   DONENTRY            NO, UNEXPECTED FORMAT
SPFSTORE ICM   R0,15,SPFCREDT      LOAD CREATION DATE
         BAS   R14,CHKDATE         VERIFY EXPECTED DATE FORMAT
         ICM   R0,15,SPFCHGDT      LOAD MODIFICATION DATE
         BAS   R14,CHKDATE         VERIFY EXPECTED DATE FORMAT
         L     R5,DIRLIMAD         GET LIMIT ADDRESS
         LA    R0,$PXSPFL          GET EXTENSION SIZE
         SR    R5,R0               POINT TO NEW EXTENSION
         ST    R5,DIRLIMAD         SAVE NEW BASE ENTRY EXTENT LIMIT
         STCM  R5,15,PO_PTR        SAVE EXTENSION ADDRESS IN BASE
         STC   R0,PX_LEN           SET EXTENSION LENGTH
         XC    PX_SIZE(19),PX_SIZE ZERO COUNTER HIGH HALVES
         MVI   PO_FLG,$POSPF       FLAG ISPF STATISTICS PRESENT
         MVC   PX_VER(3),SPFVM     SAVE VERSION AND LEVEL AND FLAGS
         MVC   PX_CHA(6),SPFCHGDT  SAVE CHANGE DATE AND TIME
         MVC   PX_CHA+6(1),SPFSECS SAVE CHANGE SECONDS
         MVC   PX_CRE(4),SPFCREDT  SAVE CREATION DATE
         MVC   PX_SIZE+2(2),SPFCCNT
         MVC   PX_INIT+2(2),SPFICNT
         MVC   PX_MODS+2(2),SPFMOD
         MVC   PX_USER,SPFUSER
         TM    SPFFLAGS,SPFXSTAT   EXTENDED STATISTICS?
         BNO   SPFTOTIT            NO
         MVC   PX_SIZE,SPFXCCNT
         MVC   PX_INIT(8),SPFXICNT
         DROP  R4                  SPFSTATS
SPFTOTIT TM    11(R4),X'80'        IS THIS MEMBER AN ALIAS?
         BO    DONENTRY            YES, DON'T COUNT ITS LINES
         ICM   R0,15,PX_SIZE       GET SPF LINE COUNT
         A     R0,TOTSPFSZ         ACCUMULATE LINE COUNTS SO FAR
         ST    R0,TOTSPFSZ         SAVE NEW VALUE
DONENTRY LA    R3,PO_NXT           POINT TO NEXT IN-CORE TABLE ENTRY
         DROP  R5                  PX_SECT
         TM    STATUS4,$4ATTN      ATTENTION INTERRUPT?
         BO    READATTN            YES, TERMINATE READ
         LA    R0,60(,R3)          ALLOW FOR A BIG ENTRY
         C     R0,DIRLIMAD         IS IN-CORE TABLE ALMOST EXHAUSTED?
         BNH   MAKENTRY            NO, CREATE THIS ENTRY
RDDIRFUL MVI   MSG,95              STORAGE FULL - READ TERMINATED
         B     EOPDSDIR            CORE FULL SO STOP READING
READATTN MVI   MSG,58              INTERRUPT - DIRECTORY READ ENDED
         B     EOPDSDIR            ATTENTION HIT SO STOP READING
MAKENTRY IC    R5,11(,R4)          GET USER DATA HALFWORD COUNT
         SLL   R5,27               SHIFT OUT NON-COUNT BITS
         SRL   R5,26               CONVERT TO NUMBER OF USER BYTES
         LA    R5,12(,R5)          GET TOTAL BYTES USED BY ENTRY
         SR    R2,R5               UPDATE BYTES-TO-DO-IN-THIS-BLOCK
         BNP   READBLK             IF ZERO GET ANOTHER BLOCK
         LA    R4,0(R5,R4)         POINT TO NEXT MEMBER NAME
         B     NXTMEMBR
EOTHSDIR FEOV  DIRDCB              SWITCH TO NEXT PDS IN FILE
         LA    R0,1
         AH    R0,CONCTOPN         COUNT CONCATENATED DIRECTIORIES
         STH   R0,CONCTOPN
         B     READBLK             GO READ THIS NEXT DIRECTORY
IOERRDIR MVI   MSG,112             I/O ERROR
EOPDSDIR MVI   CLOSED,X'80'        CLOSE PDS DIRECTORY
         CLOSE (DIRDCB),MF=(E,CLOSED)
         FREEPOOL DIRDCB           FREE BUFFERS
         MVI   SYNADSW,0           CLEAR I/O ERROR FLAG
         NI    STATUS,255-STABEND  RESET DCB ABEND FLAG
         TM    STATUS17,$17P34     MEMBER NAME SCAN ACTIVE?
         BO    DIREXIT             YES, RETURN TO OPTION 3.4 PRONTO
         XC    0($POSIZ,R3),0(R3)  ZERO LAST ENTRY
         MVC   PO_MEM,LASTNAME     SET MEMBER NAME TO HIGH VALUES
         ST    R3,LSTMEMAD         SAVE ADDRESS OF LAST ENTRY
         LA    R3,$POSIZ(,R3)      POINT PAST LAST USED ENTRY
         LM    R14,R15,FREEMRGS    GET FREEMAIN VALUES
         AR    R15,R14             POINT PAST GETMAINED STORAGE
         L     R14,DIRLIMAD        POINT TO START OF EXTENSION ENTRIES
         LR    R4,R14              COPY IT
         SR    R15,R14             GET THEIR TOTAL SIZE
         LR    R0,R3               POINT PAST BASE ENTRIES
         LR    R1,R15              COPY LENGTH
         SR    R4,R3               GET SIZE OF POTENTIAL SPACE SAVING
         BNP   AREAFULL            THERE IS NONE
         LR    R5,R4               COPY IT
         SRA   R5,3
         BCTR  R5,0                ADD DOUBLEWORD (FOR LAST BYTE UNPK)
         SLA   R5,3                ROUND DOWN TO DOUBLEWORD BOUNDARY
         BNP   AREAFULL            NO STORAGE COULD BE FREED SO SKIP IT
         MVCL  R0,R14              ABUT EXTENSIONS TO BASE ENTRIES
         LA    R3,DIRENTS          POINT TO FIRST ENTRY
         C     R3,LSTMEMAD         ANY ENTRIES?
         BNL   RELOCDON            NO, PDS HAS NO MEMBERS
RELOCLP  TM    PO_FLG,$POSSI1      ANY EXTENSION?
         BO    RELOCNXT            NO
         ICM   R0,15,PO_PTR        GET EXTENSION ADDRESS
         BZ    RELOCNXT            THERE IS NONE
         SR    R0,R4               RELOCATE THE ADDRESS
         STCM  R0,15,PO_PTR        SAVE IT
RELOCNXT LA    R3,PO_NXT           POINT TO NEXT ENTRY
         C     R3,LSTMEMAD         REACHED LAST ENTRY?
         BL    RELOCLP             NO, KEEP GOING
         DROP  R3                  PO_SECT
RELOCDON LM    R0,R1,FREEMRGS      GET FREEMAIN VALUES
         LR    R15,R0              GET OLD SIZE OF DYNAREA
         SR    R15,R5              GET NEW SIZE OF DYNAREA
         ST    R15,FREEMRG0        SAVE IT
         AR    R1,R0               POINT PAST GETMAINED AREA
         SR    R1,R5               POINT TO AREA TO FREE
         LR    R0,R5               GET ITS SIZE
         FREEMAIN R,LV=(0),A=(1)   FREE UNUSED PORTION OF DYNAMIC AREA
AREAFULL CVD   R8,DOUBLE           GET NUMBER OF MEMBERS IN PDS
         LA    R1,DIRMEMCT+7       POINT TO LAST DIGIT
         EDMK  DIRMEMCT,DOUBLE+4   SHOW UP TO 9999999 MEMBERS CORRECTLY
         BCTR  R1,0                POINT TO BEFORE FIRST DIGIT
         MVI   0(R1),C' '          TIDY UP HEADING
         ST    R8,MEMBRCNT         SAVE COUNT OF MEMBERS IN LIST
         XC    SELMEMNM,SELMEMNM   CLEAR MEMBER NAME TO SEARCH FOR
         XASAM31
         TM    STATUS,STNOMEM      ANY USEFUL MEMBER NOMINATED?
         BO    FORCETOP            NO, RETURN TO MAINLINE
         MVC   SELMEMNM,$MEMBER    YES, LOAD MEMBER NAME TO SEARCH FOR
         B     FORCETOP            RETURN TO MAINLINE
         SPACE
         SPACE
**********************************************************************
*                                                          *         *
*         VERIFY DECIMAL JULIAN DATE FORMAT - AVOID S0C7   *  GP@P6  *
*                                                          *  03/87  *
**********************************************************************
         SPACE
CHKDATE  ST    R0,DOUBLE           STORE DATE FOR EXAMINATION
         TM    DOUBLE+3,X'0F'      SIGN AS EXPECTED?
         BNO   CHKFAILD            NO, REJECT IT
         NI    DOUBLE+3,X'F0'      YES, ZERO IT
         CLI   DOUBLE+2,X'36'      DDD OVER 369?
         BH    CHKFAILD            YES, REJECT IT
         LA    R0,4                FOUR BYTES TO CHECK
         LA    R1,DOUBLE           POINT TO FIRST BYTE
DECVFYLP CLI   0(R1),X'A0'         IS THE HIGH-ORDER DIGIT DECIMAL?
         BNL   CHKFAILD            NO, REJECT IT
         NI    0(R1),X'0F'         YES, ZERO IT
         CLI   0(R1),X'0A'         IS THE LOW-ORDER DIGIT DECIMAL?
         BNL   CHKFAILD            NO, REJECT IT
         LA    R1,1(,R1)           THIS BYTE OKAY, POINT TO THE NEXT
         BCT   R0,DECVFYLP         PROCESS NEXT BYTE
         BR    R14                 00YYDDD+ OR YYYYDDD+ OR OTHER PL4
         SPACE
         EJECT
************************************************************
*                                                          *
*         DIRECTORY DCB                                    *
*                                                          *
************************************************************
         SPACE
         PRINT NOGEN
         SPACE
         DC    0F'0'
DIREXLST DC    X'05',AL3(DIROPNEX)
         AIF   (NOT &ENV390).SKPUDA1
         DC    X'14',AL3(UDA)
.SKPUDA1 ANOP
         DC    X'91',AL3(DIRABEND)
STDIRDCB DCB   DSORG=PS,MACRF=GM,RECFM=F,BLKSIZE=256,DDNAME=DYNAM,     +
               EODAD=EOPDSDIR,SYNAD=DIRSYNAD,EROPT=ACC,EXLST=DIREXLST
DIRDCBL  EQU   *-STDIRDCB
         SPACE
         PRINT GEN
         SPACE
**********************************************************************
*                                                          *         *
*         CHECK DIRECTORY OPEN FOR ABNORMAL END            *  GP@FT  *
*                                                          *  01/96  *
**********************************************************************
         SPACE
OPENDIRX TM    STATUS,STABEND      DID OPEN ABEND?
         BZR   R14                 NO, PROCESS DIRECTORY
         MVC   REPLY(50),MSGDIR    LOAD MESSAGE TEXT
         UNPK  REPLY+50(7),KOUNT
         TR    REPLY+50(6),POHEX-240
         MVI   REPLY+53,C'-'       SHOW SXXX-XXX
         LA    R1,REPLY            POINT TO MESSAGE
         LA    R0,56               GET MESSAGE LENGTH
         TPUT  (1),(0),R           ISSUE MESSAGE
         MVC   MSG+2(13),REPLY+43  LOAD FULL SCREEN MESSAGE
         LA    R0,13
         STH   R0,MSG              SET MESSAGE LENGTH
         B     DIREXIT             TERMINATE
         SPACE
         DROP  R7                  READDIR
         DROP  R10,R11,R12         REVPDS
         SPACE
MSGDIR   DC    CL50'"REVIEW" UNABLE TO SHOW MEMBER LIST DUE TO ABEND S'
         SPACE
         AIF   (NOT &ENVZV2).ITISOK2
RDISITS  ISITMGD DCB=0,DATATYPE=YES,MF=L
RDISLEN  EQU   *-RDISITS
         SPACE
DESRVGS  DESERV FUNC=GET_ALL_G,MF=L
DESRVGL  EQU   *-DESRVGS
MEMGENS# DC    A(512*1024)         DESB AREA SIZE
.ITISOK2 ANOP
         DC    0D'0'
         LTORG
         AIF   (NOT &ENV390).SKPUDA2
         SPACE
**********************************************************************
*                                                          *         *
*         DIRECTORY OPEN USAGE EXIT                        *  GP@GE  *
*                                                          *  11/97  *
**********************************************************************
         SPACE
         IHAUDA DSECT=NO
         ORG   UDAFLAG3
         DC    AL1(UDANORFU)       NO REFERENCE DATE UPDATE
         ORG
.SKPUDA2 ANOP
         EJECT
**********************************************************************
*                                                          *         *
*         RECREATE DIRECTORY ENTRY FOR CONCATENATION CHECK *  GP@FT  *
*                                                          *  01/97  *
**********************************************************************
         SPACE
*  MSGDSN WILL BE LOADED WITH TTRKZC (BLDL FORMAT) PLUS SPF STATISTICS
*  OR LOAD MODULE ATTRIBUTES IF APPLICABLE.  THIS IS PASSED TO REVIEW2
*  WHICH WILL SEARCH FOR THE SELECTED MEMBER.  IF FOUND, THE CONCATEN-
*  ATION CODE IS CHECKED TO SEE IF THE FOUND MEMBER IS IN THE SELECTED
*  MEMBER'S DATA SET.  IF SO, THEN PROCEED WITH REVIEW.  IF FOUND IN A
*  LATER DATA SET THEN SAY MEMBER NOT FOUND.  IF FOUND IN AN EARLIER
*  DATA SET THEN USE RECREATED ENTRY IN MSGDSN TO REVIEW DATA CONTAINED
*  IN THE NON-FIRST OCCURRENCE OF A MEMBER NAME.  REVIEW2 USES ISPF/PFD
*  STATISTICS TO SHOW THE VV.MM IN THE HEADING, AND LOAD MODULE ATTRIB-
*  UTES TO SHOW WHETHER CSECT FLAGS ARE RELATED TO XA OR OVERLAYS.
*  (ACTUALLY, A FLAG BIT IN THE CESD BLOCK CONTROLS THE XA/OV HEADING.)
*  THE 'MEMBER' SUBCOMMAND DOES NOT CAUSE THIS TO HAPPEN, AND CAN ONLY
*  ACCESS THE FIRST OCCURRENCE OF A MEMBER NAME IN A CONCATENATION.
         SPACE
         USING POXTRACT,R15
         USING PO_SECT,R3
POXTRACT OI    STATUS8,$8_S        FLAG 'S' SELECTION CODE
         XC    MSGDSN,MSGDSN       PASS DIRECTORY ENTRY TO REVIEW2
         LTR   R3,R3               SPECIFIC IN-CORE ENTRY TO PROCESS?
         BP    POXLDTTR            YES, GO SET THE TTR
         LA    R3,DIRENTS          POINT TO FIRST ENTRY
         SR    R4,R4               FIRST ENTRY IS NUMBER ZERO
POXNXTLP C     R3,LSTMEMAD         END OF INTERNAL DIRECTORY ENTRIES?
         BNL   POXNOMEM            YES, NO SUCH INTERNAL ENTRY
         CLC   $MEMBER,PO_MEM      FOUND THE MEMBER?
         BE    POXFOUND            YES
         LA    R3,PO_NXT           NO, POINT TO THE NEXT ENTRY
         LA    R4,1(,R4)           INCREMENT MEMBER NUMBER
         B     POXNXTLP            GO LOOK AT IT
POXFOUND STM   R3,R4,CURMEM@#      SAVE CURRENT ENTRY DETAILS
POXLDTTR MVC   MSGDSN(3),PO_TTR    COPY TTR
         TM    PO_FLG,$PODEL       DELETED MEMBER?
         BNO   POXDELOK            NO, CONTINUE
         TM    DS1SMSFG,DS1PDSE    PDSE?
         BO    POXDELOK            YES, CANNOT SUPPLY A TTR/MLT
         MVC   TTR+1(3),MSGDSN     SET INITIAL TTR TO READ
POXDELOK MVC   MSGDSN+3(1),PO_CON  COPY CONCATENATION CODE
         MVC   MSGDSN+5(1),PO_IND  COPY ALIAS FLAG AND USER H/W COUNT
         ICM   R5,15,PO_PTR        POINT TO EXTENSION
         USING PX_SECT,R5
         AIF   (NOT &ENVZV2).GENOK2
         TM    STATUS15,$15GEN     SHOWING MEMBER GENERATIONS?
         BO    POSTATOK            YES, ENTRY EXTENSION EXISTS
.GENOK2  ANOP
         TM    PO_FLG,$POSPF       ISPF/PFD ENTRY?
         BNO   POPGMCHK            NO, CHECK FOR PROGRAM ENTRY
POSTATOK MVC   MSGDSN+6(3),PX_VER  COPY VV.MM AND FLAGS
         MVC   MSGDSN+10(4),PX_CRE COPY CREATION DATE OR GEN NUMBER
         MVC   MSGDSN+14(6),PX_CHA COPY CHANGED DATE AND TIME (HHMM)
         MVC   MSGDSN+26(8),PX_USER AND FINALLY THE USERID
         BR    R14                 BLDL ENTRY PRETTY MUCH RESTORED
POPGMCHK TM    PO_FLG,$POPGM       LOAD MODULE ENTRY?
         BNOR  R14                 NO, NO EXTRA DATA TO RESTORE
         MVC   MSGDSN+14(12),PX_ATR    COPY LOAD MODULE ATTRIBUTES
         BR    R14                 RETURN TO CALLER
         DROP  R3,R5               PO_SECT, PX_SECT
         DROP  R15                 POXTRACT
         SPACE
         USING REVPDS,R10,R11,R12
POXNOMEM MVI   MSG,36              MEMBER NOT FOUND
         MVC   BLDLNAME,$MEMBER    SAVE MEMBER NAME FOR REVMSGS
         B     SELCDCHK            PROCESS OTHER INPUT
         DROP  R10,R11,R12         REVPDS
         SPACE
         SPACE
**********************************************************************
*                                                          *         *
*         DIRECTORY VERTICAL SCROLL INDICATION BAR         *  GP@P6  *
*                                                          * FEB2012 *
**********************************************************************
         SPACE
         USING DIRVBAR,R15
DIRVBAR  STM   R14,R12,12(R13)     SAVE REGISTERS
         TM    STATUS15,$153PT5    OPTION 3.5 MEMBER LIST DISPLAY?
         BO    DIRVBARX            YES, SKIP VERTICAL SCROLL BAR
         ICM   R0,15,TOPMEMNO      FIRST ENTRY ON SHOW?
         BNZ   DIRVISPF            NO, CREATE SCROLL BAR
         CLC   MEMBRCNT,BOTMEMNO   LAST ENTRY ON SHOW?
         BE    DIRVBARX            YES, ALL ON SHOW SO SKIP IT
DIRVISPF L     R2,SCRNLNES         GET SCREEN LINE COUNT
         TM    STATUS9,$9ISPF      RUNNING AS AN ISPF DIALOG?
         BNO   DIRVDOIT            NO, NO PARTIAL SCREEN DISPLAY
         ICM   R0,15,REVLVL        YES, VISIBLE LINE COUNT KNOWN?
         BZ    DIRVBARX            NO, FORGET THIS EMBELLISHMENT
         PACK  DOUBLE,REVLVL       YES, CONVERT ISPF CHARACTER ITEM
         CVB   R2,DOUBLE           GET CURRENT LAST VISIBLE LINE NUMBER
         LA    R2,2(,R2)           COUNT LINES ABOVE DYNAMIC AREA
         C     R2,SCRNLNES         ALL LINES VISIBLE?
         BNE   DIRVBARX            NO, FORGET THIS EMBELLISHMENT
DIRVDOIT LA    R0,3
         SR    R2,R0               GET DETAIL LINE COUNT
         L     R1,TOPMEMNO         GET TOP ENTRY NUMBER
         L     R5,BOTMEMNO         GET BOTTOM ENTRY NUMBER
         MR    R0,R2
         MR    R4,R2
         D     R0,MEMBRCNT
         D     R4,MEMBRCNT
         LA    R1,2(,R1)
         LA    R5,2(,R5)
         M     R0,SCRNCOLS
         M     R4,SCRNCOLS
         LR    R2,R1
         A     R1,SCREENBF         POINT TO FIRST INDICATION
         A     R5,SCREENBF         POINT TO LAST INDICATION
         A     R2,SHADOWBF         POINT TO FIRST INDICATION SHADOW
         TM    STATUS5,$5EDS+$5COLR
         BO    DIRVTOPT            USING COLOUR SO FORGET INTENSITY
         L     R0,SCRNCOLS         GET SCREEN WIDTH
         AR    R0,R0               DOUBLE IT
         A     R0,SCREENBF         POINT TO THIRD LINE
         CR    R1,R0               POINTING TO THIRD LINE?
         BNE   DIRVTOPT            NO, DO NOT OVERLAY 7TH USERID CHAR
         MVI   78(R1),FLDOUTLO     SCROLL BAR IN LOW INTENSITY
DIRVTOPT MVI   79(R1),C'T'         INDICATE AT TOP
         MVI   79(R2),X'07'        COLOUR IT WHITE
         TM    STATUS5,$5GE+$5EDS  ABLE TO USE GE NOW?
         BNO   DIRVBRGE            NO, HANDLE IN THE USUAL WAY
         MVI   79(R1),X'D7'        TOP "T"
         OI    79(R2),X'40'        TURN ON GRAPHIC ESCAPE FOR THIS BYTE
DIRVBRGE ICM   R0,15,TOPMEMNO      REALLY AT TOP?
         BZ    DIRVB1ST            YES
DIRVBRLP MVI   79(R1),C'|'         SET INDICATION
         MVI   79(R2),X'07'        COLOUR IT WHITE
DIRVB1ST CR    R1,R5               DONE LAST INDICATION?
         BNL   DIRVBARB            YES, ALL DONE
         A     R1,SCRNCOLS         NO, POINT TO NEXT LINE
         A     R2,SCRNCOLS
         B     DIRVBRLP
DIRVBARB TM    STATUS5,$5GE+$5EDS  ABLE TO USE GE NOW?
         BNO   DIRVBARX            NO, SKIP IT
         CLC   MEMBRCNT,BOTMEMNO   IS LAST ENTRY ON SHOW?
         BH    DIRVBARX            NO
         MVI   79(R1),X'C7'        BOTTOM "T"
         OI    79(R2),X'40'        TURN ON GRAPHIC ESCAPE FOR THIS BYTE
DIRVBARX LM    R14,R12,12(R13)     RESTORE REGISTER
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BOR   R14                 YES, RETURN TO CALLER
         TM    STATUS15,$15COPY    HERE FOR COPY MEMBER SELECTION?
         BO    DIRVLEGC            YES
         TM    STATUS15,$153PT5    HERE FOR STATISTICS MANAGEMENT?
         BO    DIRVLEGC            YES
         TM    DS1RECFM,DCBRECU    RECFM=U LIBRARY?
         BNOR  R14                 NO, RETURN TO CALLER
         TM    DS1SMSFG,DS1PDSE    PDSE?
         BOR   R14                 YES, RETURN TO CALLER
         OC    CONCTOPN,CONCTOPN   CONCATENATED FILE?
         BNZR  R14                 YES, RETURN TO CALLER
DIRVLEGC LA    R2,2
         A     R2,ISPFPAGE         GET LAST LINE NUMBER
         MH    R2,SCRNCOLS+2       GET ITS SCREEN OFFSET
         AL    R2,SCREENBF         POINT TO LAST LINE
         CLI   0(R2),C' '          LAST LINE AVAILABLE?
         BNE   DIRVLEGX            NO
         CLC   1(78,R2),0(R2)      LAST LINE AVAILABLE?
         BNE   DIRVLEGX            NO
         TM    STATUS15,$153PT5    HERE FOR STATISTICS MANAGEMENT?
         BO    DIRVLEGS            YES
         TM    STATUS15,$15COPY    HERE FOR COPY MEMBER SELECTION?
         BNO   DIRVLEGU            NO
         MVC   4(DIRLEGCL,R2),DIRLEGC
         A     R2,SCREENSZ
         MVI   0(R2),X'01'         BLUE
         MVC   1(78,R2),0(R2)
         MVI   4(R2),X'07'         WHITE
         MVI   4+8(R2),X'07'
         MVI   4+16(R2),X'07'
         MVI   4+24(R2),X'07'
         MVI   4+34(R2),X'07'
         MVI   4+39(R2),X'07'
         MVI   4+46(R2),X'07'
         B     DIRVLEGX
DIRVLEGS MVC   4(DIRLEGSL,R2),DIRLEGS
         A     R2,SCREENSZ
         MVI   0(R2),X'01'         BLUE
         MVC   1(78,R2),0(R2)
         MVI   4(R2),X'07'         WHITE
         MVI   4+8(R2),X'07'
         MVI   4+22(R2),X'07'
         MVI   4+33(R2),X'07'
         MVI   4+38(R2),X'07'
         MVI   4+45(R2),X'07'
         B     DIRVLEGX
DIRVLEGU MVC   4(DIRLEGUL,R2),DIRLEGU
         A     R2,SCREENSZ
         MVI   0(R2),X'01'         BLUE
         MVC   1(78,R2),0(R2)
         MVI   4(R2),X'07'         WHITE
         MVI   4+8(R2),X'07'
         MVI   4+16(R2),X'07'
         MVI   4+25(R2),X'07'
         MVI   4+30(R2),X'07'
         MVI   4+38(R2),X'07'
         MVI   4+48(R2),X'07'
         MVI   4+53(R2),X'07'
         MVI   4+60(R2),X'07'
DIRVLEGX LM    R14,R12,12(R13)     RESTORE REGISTER
         BR    R14                 RETURN TO CALLER
         SPACE
         DROP  R15                 DIRVBAR
         SPACE
DIRLEGU  EQU   *
         DC    XL8'E285938583A34040'
         DC    XL8'C29996A6A2854040'
         DC    XL9'C889A2A39699A84040'
         DC    XL5'D481974040'
         DC    XL8'C4859385A3854040'
         DC    XL10'D585A660D58194854040'
         DC    XL5'E381874040'
         DC    XL7'D985A285A34040'
         DC    XL7'D985A2A3969985'
DIRLEGUL EQU   *-DIRLEGU
         SPACE
DIRLEGC  EQU   *
         DC    XL8'E285938583A34040'
         DC    XL8'C29996A6A2854040'
         DC    XL8'C4859385A3854040'
         DC    XL10'D585A660D58194854040'
         DC    XL5'E381874040'
         DC    XL7'D985A285A34040'
         DC    XL7'D985A2A3969985'
DIRLEGCL EQU   *-DIRLEGC
         SPACE
DIRLEGS  EQU   *
         DC    XL08'C29996A6A2854040'
         DC    XL14'C4859385A38560E2A381A3A24040'
         DC    XL11'D585A660E2A381A3A24040'
         DC    XL05'E381874040'
         DC    XL07'D985A285A34040'
         DC    XL15'D985A2A396998560E2A381A3A24040'
DIRLEGSL EQU   *-DIRLEGS
         SPACE
         DROP  R13                 @PDSAREA, OAIAREA
         SPACE
         SPACE
**********************************************************************
*                                                          *         *
*         DIRECTORY OPEN EXIT                              *  GP@P6  *
*                                                          *  06/99  *
**********************************************************************
         SPACE
         USING IHADCB,R1
DIROPNEX ICM   R0,3,DCBLRECL       IS LRECL ZERO?
         BZR   R14                 YES, OKAY FOR RECFM=F SO RETURN
         MVC   DCBLRECL,DCBBLKSI   NO, SO SET IT TO BLKSIZE (256)
         BR    R14                 S013-60 NOW AVOIDED
         DROP  R1                  IHADCB
         SPACE
         DC    0D'0'               END OF CSECT
         TITLE '  R E V P D S   -   D Y N A M I C   A R E A  '
@PDSAREA DSECT
         DS    18F                 WORKING SAVE AREA
@PDSMRKR DS    CL8                 STORAGE AREA MARKER
MEMFILTR DS    CL8                 MEMBER NAME MASK HOLD AREA  
MEMPATEN DS    CL8                 MEMBER NAME MASK HOLD AREA
RENMEMSV DS    CL8                 NEW MEMBER NAME SAVE AREA
POTOPOLD DS    D                   PRE-SCROLL TOP DETAILS
PO_OAIA  DS    XL(OAIALEN)         OUTPUT ALLOCATION INFORMATION AREA
FREEMRGS EQU   *,8                 FREEMAIN REGISTER VALUES
FREEMRG0 DS    F                   FREEMAIN REGISTER 0 VALUE
FREEMRG1 DS    A                   FREEMAIN REGISTER 1 VALUE
TOPMEMAD DS    A      \___KEEP___/ TOP MEMBER ENTRY ADDRESS
TOPMEMNO DS    F      / TOGETHER \ TOP MEMBER RELATIVE NUMBER
BOTMEMAD DS    A                   BOTTOM MEMBER ENTRY ADDRESS
BOTMEMNO DS    F                   BOTTOM MEMBER RELATIVE NUMBER
CURMEM@# EQU   *,8                 CURRENT MEMBER DETAILS
CURMEMAD DS    A      \___KEEP___/ CURRENT MEMBER ENTRY BEING PROCESSED
CURMEMNO DS    F      / TOGETHER \ CURRENT MEMBER RELATIVE NUMBER
LSTMEMAD DS    A                   LAST MEMBER ENTRY ADDRESS
DIRLIMAD DS    A                   DIRECTORY ENTRY LIMIT ADDRESS
BLKREADS DS    F                   DIRECTORY BLOCK READ COUNTER
EXTPGMSZ DS    F                   SIZE OF REAL PROGRAMS WITH RMODE=ANY
TOTPGMSZ DS    F                   TOTAL SIZE OF REAL PROGRAMS
TOTSPFSZ DS    F                   TOTAL LINES OF REAL SPFD MEMBERS
MEMBRCNT DS    F                   TOTAL NUMBER OF MEMBERS IN LIST
POSTOWRC DS    0X                  STOW RETURN CODE SAVE AREA
REALTTR  DS    XL3                 REAL MEMBER TTR HOLD AREA
SELMEMNM DS    CL9                 USER SELECTED MEMBER + CONCAT'N NO.
CONCTOPN DS    H                   NO. OF CONCATENATED DIRECTORIES READ
DELCHAIN DS    A                   DELETED MEMBER CHAIN ORIGIN
STACHAIN DS    A                   EDITED MEMBER USER DATA CHAIN ORIGIN
DIRDCB   DS    XL(DIRDCBL)         PDS DIRECTORY DCB
DIRMEMCT DS    XL8
         DS    CL12
POVOLUME DS    CL6
POFLAG   DS    X                   FLAG BYTE
PFUPDT   EQU   X'80'               BPAM DCB OPEN FOR UPDATE
PFRESTOR EQU   X'40'               MEMBER RESTORE REQUESTED
PFNEWNM  EQU   X'20'               ENQUEUED ON NEW MEMBER NAME
PFVIEW   EQU   X'10'               DEFAULT SELECTION ACTION IS VIEW
PFPAT    EQU   X'08'               USE MEMFILTR TO FILTER MEMBERS
PFREV    EQU   X'04'               HAVE JUST REVIEWED A MEMBER
PFSELCD  EQU   X'02'               PROCESSING SELECTION CODES
PF3PT1   EQU   X'01'               PROCESSING RFE OPTION 3.1 REQUEST
POFLG2   DS    X                   FLAG BYTE
P2STAT   EQU   X'80'               UPDATE WITH OVERTYPED STATISTICS
P2NEW    EQU   X'40'               CREATING NEW STATISTICS
P2MGEN   EQU   X'20'               MEMBER GENERATIONS ALLOWED
P2DEL    EQU   X'10'               'D' SELECTION CODE REQUEST
P2KIL    EQU   X'08'               '¬' SELECTION CODE REQUEST
         SPACE
         AIF   (NOT &ENVZV2).ITISOK3
         DS    0F
RDISITM  DS    XL(RDISLEN)         ISITMGD PARAMETER LIST
MEMGENS@ DS    A                   DESERV AREA ADDRESS
DIRDESB@ DS    A                   NEXT DESB ADDRESS
DESRVGD  DS    XL(DESRVGL)         DESERV PARAMETER LIST
.ITISOK3 ANOP
         SPACE
DIRENTS  DS    0D                  IN-CORE MEMBER LIST STARTS HERE
         TITLE ' I N T E R N A L   D I R E C T O R Y   E N T R I E S '
**********************************************************************
*                                                          *         *
*         FORMAT FOR REVIEW IN-CORE DIRECTORY ENTRIES      *  GP@P6  *
*                                                          *         *
**********************************************************************
         SPACE
*         COMMON BASE SECTION
PO_SECT  DSECT
PO_MEM   DS    CL8                 MEMBER NAME
PO_CON   DS    XL1                 CONCATENATION NUMBER
PO_TTR   DS    XL3                 MEMBER TTR
PO_IND   DS    XL1                 MEMBER INDICATOR BYTE
PO_FLG   DS    XL1                 REVIEW FLAG BYTE
$PODEL   EQU   X'80'               MEMBER IS DELETED
$POTAG   EQU   X'40'               MEMBER IS TAGGED - SAME AS OETAG
$POSSI1  EQU   X'20'               PO_PTR CONTAINS MEMBER'S SSI
$POSSI2  EQU   X'10'               LOAD MODULE WITH SSI
$POSPF   EQU   X'08'               SPF STATISTICS PRESENT
$POPGM   EQU   X'04'               LOAD MODULE USER DATA PRESENT
$POADD   EQU   X'02'               COPIED MEMBER WAS ADDED
$POREP   EQU   X'01'               COPIED MEMBER WAS REPLACED
PO_PTR   DS    AL4                 SSI OR ADDRESS OF EXTENSION SECTION
PO_NXT   EQU   *                   END OF THIS ENTRY AND START OF NEXT
$POSIZ   EQU   *-PO_SECT           LENGTH OF BASE ENTRY
         SPACE
*         COMMON EXTENSION SECTION
PX_SECT  DSECT
PX_LEN   DS    XL1                 LENGTH OF EXTENSION SECTION
PX_DATA  EQU   *                   START OF USER DATA
         SPACE
*         SPF/PFD STATISTICS EXTENSION SECTION
PX_VER   DS    XL1                 ISPF VERSION - 100 => IMS REFERAL
PX_LVL   DS    XL1                 ISPF LEVEL
PX_FLG   DS    XL1                 ISPF FLAGS
PX_USER  DS    CL8                 USER ID - RELATED IMS FMT IF MSG/FMT
PX_CRE   DS    XL4                 CREATION DATE
PX_SIZE  DS    FL4                 CURRENT SIZE
PX_CHA   DS    XL7                 CHANGE DATE AND TIME
PX_INIT  DS    FL4                 INITIAL SIZE
PX_MODS  DS    FL4                 MODIFIED RECORD COUNT
$PXSPFL  EQU   *-PX_SECT           ISPF EXTENSION LENGTH
PX_CHN   DS    A                   DYNAMIC CHAIN LINK POINTER
         DS    0D
$PXDYNL  EQU   *-PX_SECT           DYNAMIC CHAIN GETMAIN/FREEMAIN SIZE
         SPACE
*         MEMBER GENERATION EXTENSION SECTION
         ORG   PX_DATA
         DS    XL1   =   PX_VER    ISPF STATS VERSION
         DS    XL1   =   PX_LVL    ISPF STATS MOD LEVEL
         DS    XL1   =   PX_FLG    SMDE GENERATION FLAGS
         DS    CL8   =   PX_USER   CREATOR OR LAST UPDATER USERID
PX_GNUM  DS    FL4   =   PX_CRE    ABSOLUTE GENERATION NUMBER
         DS    FL4   =   PX_SIZE   ISPF STATS CURRENT SIZE
PX_GTOD  DS    XL8   ~   PX_CHA    CREATE OR LAST UPDATE STCK STAMP
$PXGENL  EQU   *-PX_SECT           GENERATION EXTENSION LENGTH
         SPACE
*         LOAD MODULE COMMON EXTENSION SECTION
         ORG   PX_DATA
PX_ATR   DS    0XL12               LOAD MODULE ATTRIBUTES
*  ---   ---   ---   ---   ---   ---   ---   ---   ---   ---   ---
PX_ATR1  DS    XL1
*        EQU   X'80'               REENTERABLE
*        EQU   X'40'               REUSABLE
*        EQU   X'20'               IN OVERLAY STRUCTURE
*        EQU   X'10'               MODULE TO BE TESTED - TESTRAN
*        EQU   X'08'               ONLY LOADABLE
*        EQU   X'04'               SCATTER FORMAT
*        EQU   X'02'               EXECUTABLE
*        EQU   X'01'               ONE TEXT BLOCK AND NO RLD
*  ---   ---   ---   ---   ---   ---   ---   ---   ---   ---   ---
PX_ATR2  DS    XL1
*        EQU   X'80'               F-LEVEL REQUIRED
*        EQU   X'40'               ORIGIN IF FIRST BLOCK IS ZERO
*        EQU   X'20'               ENTRY POINT IS ZERO
*        EQU   X'10'               MODULE CONTAINS NO RLD ITEMS
*        EQU   X'08'               NOT EDITABLE
*        EQU   X'04'               CONTAINS TESTRAN SYMBOL CARDS
*        EQU   X'02'               CREATED BY LINKAGE EDITOR F
*        EQU   X'01'               REFRESHABLE MODULE
*  ---   ---   ---   ---   ---   ---   ---   ---   ---   ---   ---
PX_STOR  DS    XL3                 STORAGE REQUIRED FOR MODULE
*  ---   ---   ---   ---   ---   ---   ---   ---   ---   ---   ---
PX_FTBL  DS    XL2                 LENGTH OF FIRST TEXT BLOCK
*  ---   ---   ---   ---   ---   ---   ---   ---   ---   ---   ---
PX_EPA   DS    XL3                 ENTRY POINT ADDRESS
*  ---   ---   ---   ---   ---   ---   ---   ---   ---   ---   ---
PX_FTB1  DS    XL1
*        EQU   X'80'               PROCESSED BY AOS LINKAGE EDITOR
*        EQU   X'20'               PAGE ALIGNMENT REQUIRED
*        EQU   X'10'               SSI INFORMATION PRESENT
*        EQU   X'08'               INFORMATION IN PDSAPF IS VALID
*  ---   ---   ---   ---   ---   ---   ---   ---   ---   ---   ---
PX_FTB2  DS    XL1
*        EQU   X'10'               LOAD MODULE RESIDENCE MODE
*        EQU   X'0C'               ALIAS ENTRY POINT ADDRESSING MODE
*        EQU   X'03'               MAIN ENTRY POINT ADDRESSING MODE
*  ---   ---   ---   ---   ---   ---   ---   ---   ---   ---   ---
PX_ACL   DS    XL1                 PROGRAM AUTHORIZATION CODE LENGTH
PX_AC    DS    XL1                 PROGRAM AUTHORIZATION CODE
$PXLMCL  EQU   *-PX_SECT           LENGTH OF LOAD MODULE ENTRY
         SPACE
*         LOAD MODULE SYSTEM STATUS INFORMATION EXTENSION SECTION
PX_SSI   DS    XL4                 SSI DATA
$PXLMSL  EQU   *-PX_SECT           LENGTH OF LOAD MODULE SSI ENTRY
         SPACE
*         LOAD MODULE ALIAS EXTENSION SECTION
PX_REAL  DS    CL8                 REAL NAME OF THIS ALIAS
$PXLMAL  EQU   *-PX_SECT           LENGTH OF LOAD MODULE ALIAS ENTRY
         SPACE
*         IMS COMMON EXTENSION SECTION
         ORG   PX_DATA
PX_IMSZ  DS    FL4                 MEMBER SIZE
$PXIMSL  EQU   *-PX_SECT           LENGTH OF IMS SIZE ONLY ENTRY
*       +12    MEMBER SIZE
         SPACE
*        IMS SIZE ONLY SECTION
*       +16    TOTAL LENGTH OF THIS ENTRY (H'24')
*       +18    END OF IMS SIZE ONLY ENTRY
         SPACE
*         IMS ACB ONLY SECTION
*       +15    ACBLIB MEMBER TYPE FLAG BYTE
         SPACE
*         IMS FORMAT/ACB COMMON SECTION
*       +18    CREATION DATE
*       +1C    CREATION TIME
*       +1E    UNUSED
*       +20    TOTAL LENGTH OF THIS ENTRY (H'34')
*       +22    END OF IMS FORMAT/ACB ENTRY
         SPACE
         SPACE
*        SORTING OF PDS DIRECTORY ENTRIES WAS INSPIRED BY THE
*        'FLIST' CMS COMMAND (FL, FILEL, FILELIST AND OTHER
*        SIMILAR COMMANDS).  IT WAS IMPLEMENTED A COUPLE YEARS
*        BEFORE ISPF PDS DIRECTORY SORTS ARRIVED ON THE SCENE.
         TITLE '  D A T A   P D S   D I S P L A Y   F O R M A T  '
**********************************************************************
*                                                          *         *
*         DISPLAY FORMAT FOR NON-PROGRAM PDS ENTRIES       *  GP@P6  *
*                                                          * APR2004 *
**********************************************************************
         SPACE
POFMTSPF DSECT
         DS    XL3                 ATTR, SELECTION CODE, ATTR
POF_NAME DS    CL8                 MEMBER NAME
POF_SP_1 DS    CL1
POF_CNCT DS    CL2                 HEXADECIMAL RELATIVE CONCATENATION
POF_TTR  DS    CL6                 TTR
POF_SP_2 DS    CL1
POF_VVMM DS    CL5                 VV.MM
POF_SP_3 DS    CL1
POF_CREA DS    CL8                 CREATION YY-MM-DD
POF_SP_4 DS    CL1
POF_DATE DS    CL8                 CHANGED YY-MM-DD
POF_SPDT DS    CL1
POF_TIME DS    CL8                 CHANGED HH:MM:SS
POF_SP_5 EQU   *,1
POF_INIT DS    CL6                 INITIAL RECORD COUNT
POF_SP_6 EQU   *,1
POF_SIZE DS    CL6                 CURRENT RECORD COUNT
POF_SP_7 EQU   *,1
POF_MOD  DS    CL6                 MODIFIED RECORD COUNT
POF_SP_8 DS    CL1
POF_USER DS    CL8                 MODIFYING USERID
POF_SP_9 DS    CL1
         TITLE ' I M S   A C B L I B   D I R E C T O R Y   E N T R Y '
*                                  FROM IMSE10.SDFSMAC(ACBDIR)
ACBNTRY  DSECT
ACBNAME  DS    CL8                 MEMBER NAME
ACBTTR   DS    XL3                 TTR OF MEMBER
ACBC     DS    X                   FLAG BYTE
*                                   BIT 0,  0 - MEMBER NAME
*                                           1 - ALIAS
*                                       1-2 NUMBER OF TTRN FIELDS IN
*                                           THE USER DATA FIELD
*                                       3-7 NUMBER OF HALFWORDS IN THE
*                                           USER DATA FIELD = 14
ACBALIS  EQU   X'80'                ALIAS, IF ON
ACBNUTT  EQU   X'20'                NBR OF USER TTRS, NEVER>1
ACBTTRI  DS    XL3                 TTR OF PSB INTENT OR DMB
*                                   SEQUENT LIST
ACBN     DS    X                   RESERVED
ACBFLAG  DS    X                   FLAG BYTE
ACBDMB   EQU   X'01'                 DMB, IF ON - PSB IF OFF
ACBGRP   EQU   X'02'                 PART OF A SHARED INDEX
ACB1GRP  EQU   X'04'                 FIRST DMB IN A SHARED INDX
ACBJAVA  EQU   X'08'                 PSB IS JAVA
ACBMSDB  EQU   X'10'               MSDB DMB IF ON
ACBDEDB  EQU   X'20'               DEDB DMB IF ON
ACBXVEC  EQU   X'40' .             DXVECTAB EXISTS
ACBXSEC  EQU   X'80' .             DXSECTAB EXISTS
ACBTMSTMP DS   0XL7
ACBDATE  DS    PL3                 PACKED JULIAN DATE
ACBTIME  DS    XL4                 TIME MEMBER WRITTEN
*                                  NOTE - SIZE AND BFR
*                                  USE DDIRSHFT OR PDIRSHFT
*                                  DEPENDING ON USE
ACBSIZE  DS    XL2                 SIZE OF MEMBER IN DBL WORDS
*                                   FOR PSB = PSB W/O INTENT
ACBBFR   DS    XL2                 STORAGE SIZE OF MEMBER
*                                   FOR PSB = PSB + INTENT
ACBLSIZ  DS    0XL2                FOR DMB, DMB SEQ LIST SIZE
*                                   IN DOUBLE WORDS
ACBDMOP  DS    XL4                 DATA MANAGEMENT OPTIONS
ACBXWA   DS    XL2                 TOTAL SIZE OF PSB WORK AREA
ACBMBSZ  DS    XL2                 SIZE OF MSG RGN MAILBOX
ACBRLVL  DS    XL1                 RELEASE LEVEL IN WHICH PSB
*                                  OR DMB WAS LAST CHANGED
ACBRPLV  EQU   X'E1'               PSB RELEASE LEVEL
ACBRDLV  EQU   X'E1'               DMB RELEASE LEVEL
*              CHANGE EQUATES FOR PSB OR DMB WHEN DL/I INTERNAL
*              PSB OR DMB CHANGES.  REASSEMBLE MODULES
*              REFERENCING THESE LABELS.
*                    IMS/VS RELEASE 1.2 = X'17'
*                    IMS/VS RELEASE 1.3 = X'18'
*                    IMS/VS RELEASE 2.2 = X'19', X'20'
*                    IMS/VS RELEASE 3.1 = X'31'  OCT 87
*                    IMS/VS RELEASE 3.2 = X'32'  DEC 89
*                    IMS    RELEASE 5.0 = X'50'  MAY 93 DMB & PSB
*                    IMS    RELEASE 6.1 = X'61'  SEP 96 DMB & PSB
*                    IMS    RELEASE 7.1 = X'71'  FEB 99 DMB & PSB
*                    IMS    RELEASE 8.1 = X'81'  FEB 00 DMB & PSB
*                    IMS    RELEASE 9.1 = X'91'  OCT 02 DMB & PSB
*                    IMS    RELEASE 10.1 = X'A1' FEB 04 DMB & PSB
*                    IMS    RELEASE 11.1 = X'B1' JUN 07 DMB & PSB
*                    IMS    RELEASE 12.1 = X'C1' JUL 08 DMB & PSB
*                    IMS    RELEASE 13.1 = X'D1' AUG 12 DMB & PSB
ACB2FLG  DS    XL1 .               FLAG BYTE (2ND)
ACB2PDB  EQU   X'80'                 PARTITIONED DATABASE
ACBHDPD  EQU   X'40'                 PARTITIONED HDAM DB
ACBHIPD  EQU   X'20'                 PARTITIONED HIDAM DB
ACBLGRL  EQU   X'10'                 HAS LOGICAL RELATIONSHIPS
ACBAPSB  EQU   X'08'                 ALL PSBS REBUILT FOR DBD
ACBMOLC  EQU   X'04'                 MOLC DONE FOR THIS MBR
ACBGSAM  EQU   X'02'                 GSAM DB OR GSAM DB IN PSB
ACBF2R7  EQU   X'01'                 RESERVED BIT 7 (X'01')
ACBPCBS  DS    XL2                 SIZE OF CSA PART OF PSB
ACBDSLN  EQU   *-ACBNTRY
ACBEND   EQU   *                   END OF DSECT
         TITLE '  I S P F   S T A T I S T I C S   U S E R   D A T A  '
************************************************************
*                                                          *
*         ISPF STATISTICS USER DATA STRUCTURE              *
*                                                          *
************************************************************
         SPACE
SPFSTATS DSECT
         DS    XL12                MEMBER NAME, TTR, INDC
SPFVM    DS    XL2                 VERSION, LEVEL
SPFFLAGS DS    X                   FLAGS
SPFSCLM  EQU   X'80'               SCLM-MANAGED
SPFXSTAT EQU   X'20'               EXTENDED STATISTICS
SPFSECS  DS    X                   TIME LAST UPDATED (SS)
SPFCREDT DS    PL4                 DATE CREATED
SPFCHGDT DS    PL4                 DATE LAST UPDATED
SPFHHMM  DS    XL2                 TIME LAST UPDATED (HHMM)
SPFCCNT  DS    H                   CURRENT SIZE
SPFICNT  DS    H                   INITIAL SIZE
SPFMOD   DS    H                   MODS
SPFUSER  DS    CL7                 USERID
SPFBLANK DS    CL3                 ONE OR THREE BLANKS
         ORG   SPFBLANK+1
SPFXCCNT DS    F                   CURRENT SIZE
SPFXICNT DS    F                   INITIAL SIZE
SPFXMOD  DS    F                   MODS
         TITLE '  R E V A L C O  '
**********************************************************************
*                                                          *         *
*         ALLOCATE AN OUTPUT SEQUENTIAL FILE               *  GP@P6  *
*                                                          * AUG2003 *
**********************************************************************
         SPACE
**********************************************************************
*                                                                    *
*        THIS ROUTINE DISPLAYS AN ENTRY PANEL SO THAT THE USER       *
*        CAN SPECIFY A DATA SET NAME (INCLUDING A MEMBER NAME IF     *
*        APPROPRIATE) TO BE USED AS A SEQUENTIAL FILE FOR OUTPUT     *
*        PROCESSING.                                                 *
*                                                                    *
*        IF THE SPECIFIED DATA SET CANNOT BE FOUND THEN AN           *
*        ATTEMPT WILL BE MADE TO CREATE IT.  IF THE '$10LIKE'        *
*        FLAG IS SET THEN THE DDNAME IN '$DDNAME' WILL BE USED       *
*        AS A DCB ATTRIBUTE LIST, AND THE PRIMARY TRACK QUANTITY     *
*        WILL BE DERIVED FROM DS1LSTAR INSTEAD OF 60, AND THE        *
*        SECONDARY TRACK QUANTITY WILL BE 30 INSTEAD OF 120.         *
*                                                                    *
*        FLAG '$12ENQ' SET REQUESTS SERIALIZATION WITHOUT            *
*        ALLOCATION - WHICH IMPLIES THAT THE DATA SET DETAILS        *
*        HAVE BEEN SUPPLIED AND SO NO PROMPT PANEL IS DISPLAYED.     *
*                                                                    *
*        FLAG '$12REP' SET PREVENTS DATA SET CREATION.               *
*        FLAG '$12CRE' SET PREVENTS SEQUENTIAL DATA SET REUSE.       *
*                                                                    *
*        THE APPROPRIATE SPFEDIT ENQUEUES ARE ISSUED AFTER           *
*        ALLOCATION TO ENSURE PROPER SERIALIZATION.                  *
*                                                                    *
*        THE CALLER MUST SUPPLY A 64-BYTE PROGRAM PARAMETER WHICH    *
*        IS USED TO CONTAIN THE DDNAME, DATA SET NAME AND ENQ TYPE.  *
*        THIS INFORMATION IS TO BE RETAINED SO IT CAN BE PASSED      *
*        TO THE REVDALO ROUTINE FOR DEQ AND DEALLOCATION PURPOSES.   *
*                                                                    *
**********************************************************************
*                                                                    *
* REGISTERS ON ENTRY: R1 -> 64-BYTE ALLOCATION INFORMATION AREA      *
*                     R9 -> @DATA                                    *
*                     R13-> REGISTER SAVE AREA                       *
*                     R14-> RETURN POINT                             *
*                     R15-> REVALCO                                  *
*                                                                    *
* DURING PROCESSING:  R9 -> @DATA                                    *
*                     R10-> 64-BYTE ALLOCATION INFORMATION AREA      *
*                     R11-> REVALCO                                  *
*                     R13-> @ALOCOWK (LOCAL GETMAINED AREA)          *
*                                                                    *
* UPON EXIT:          $10LIKE IS RESET                               *
*                     $10NEW IS SET IF DATA SET WAS CREATED          *
*                           AND RESET OTHERWISE                      *
*                                                                    *
* RETURN CODES:       R15 = 0  PROCESSING COMPLETE                   *
*                     R15 = 4  REQUEST NOT PROCESSED                 *
*                              WITH 'MSG' SET TO SHOW REASON         *
*                                                                    *
**********************************************************************
         EJECT
REVALCO  RSECT
REVALCO  AMODE 31
         B     @ALOCOUT-*(,R15)
         DC    AL1(7),CL7'REVALCO'
@ALOCOUT STM   R14,R12,12(R13)
         LR    R11,R15
         USING REVALCO,R11
         LR    R10,R1              POINT TO INFORMATION AREA
         USING OAIAREA,R10
         LA    R0,$ALCOWKL
         MVI   GETMNTRC,54         TRACK GETMAIN IN CASE OF FAILURE
         GETMAIN R,LV=(0)          GET MAIN STORAGE
         LR    R14,R1              POINT TO NEW AREA
         LA    R15,$ALCOWKL        GET ITS LENGTH
         SR    R3,R3               CLEAR SOURCE LENGTH AND PAD
         MVCL  R14,R2              CLEAR RESIDUAL DATA
         ST    R1,8(,R13)          CHAIN SAVE AREAS
         ST    R13,4(,R1)
         LR    R13,R1              POINT TO GETMAINED AREA
         USING @ALOCOWK,R13
         SPACE
ALCOINIT MVC   AO$VARS,$PASSWRD    SAVE CURRENT "$" VARIABLES
         MVC   AO$DSCB,MYDSCB      SAVE OBTAINED DSCB DATA
         NI    STATUS10,255-$10NEW RESET NEW DATA SET FLAG
         TM    STATUS12,$12ENQ     JUST HERE TO SERIALIZE?
         BO    ALCOENQ             YES, SKIP ALLOCATION
         XC    0(OAIALEN,R10),0(R10) NO, CLEAR OUTPUT AREA
         SPACE
         OI    STATUS10,$10ASP     ALTERNATE SCREEN SIZE PROMPT PANEL
         L     R0,SCREENBF         POINT TO PRIMARY SCREEN BUFFER
         L     R1,SCREENSZ         GET THE SCREEN SIZE
         SR    R15,R15             ZERO SOURCE LENGTH
         ICM   R15,8,ALCOBLNK      SET PAD CHARACTER
         MVCL  R0,R14              BLANK OUT PRIMARY BUFFER
         L     R0,SHADOWBF         POINT TO THE SHADOW BUFFER
         L     R1,SCREENSZ         GET THE SCREEN SIZE
         SR    R15,R15             ZERO SOURCE LENGTH AND PAD
         MVCL  R0,R14              ZERO OUT SHADOW BUFFER
*  LINE 1
         L     R2,SCREENBF         POINT TO PRIMARY SCREEN BUFFER
         L     R3,SHADOWBF         POINT TO THE SHADOW BUFFER
         MVI   1(R3),X'07'         SHOW HEADING IN WHITE
*  LINE 1 - LEFT
         MVC   0(L'AOLN1A,R2),AOLN1A    LOAD PROMPT PANEL TEXT
         TM    STATUS11,$11EDT     IS THE CALLER REVEDIT?
         BNO   *+10                NO, CORRECT HEADING HAS BEEN LOADED
         MVC   4(4,R2),AOLN1ED     YES
*  LINE 1 - MIDDLE
         L     R1,SCRNCOLS         GET SCREEN WIDTH
         LA    R0,L'AOLN1B         GET TEXT LENGTH
         SRA   R1,1                GET HALF OF SCREEN WIDTH
         SRA   R0,1                GET HALF OF TEXT LENGTH
         SR    R1,R0
         AR    R1,R2               POINT TO HEADING TEXT LOCATION
         MVC   0(L'AOLN1B,R1),AOLN1B
         TM    STATUS12,$12CRE
         BNO   *+10
         MVC   0(6,R1),AOLN1CRE    OVERLAY "OUTPUT" WITH "CREATE"
         TM    STATUS12,$12REP
         BNO   ALCOHDOK
         BCTR  R1,0                BACK UP 1 FOR LONGER WORD
         MVC   0(7,R1),AOLN1REP    OVERLAY FIRST WORD WITH "REPLACE"
ALCOHDOK EQU   *
*  LINE 1 - RIGHT
         L     R1,SCRNCOLS         GET SCREEN WIDTH
         AR    R1,R2               POINT TO THE SECOND LINE
         LA    R0,L'AOLN1C         GET TEXT LENGTH
         SR    R1,R0               POINT TO HEADING TEXT LOCATION
         MVC   0(L'AOLN1C,R1),AOLN1C
*  LINE 8
         LA    R0,7
         MH    R0,SCRNCOLS+2
         AR    R2,R0               POINT TO LINE 8
         AR    R3,R0
         MVI   1(R3),X'05'         TURQUOISE FOR INSTRUCTION
         MVC   0(41,R2),AOLN8
*  LINE 9
         A     R2,SCRNCOLS         POINT TO LINE 9
         A     R3,SCRNCOLS
         MVI   9(R3),X'06'         YELLOW FOR ARROW
         MVC   9(4,R2),AOLN9
         LA    R0,13(,R2)          POINT TO INPUT AREA
         S     R0,SCREENBF         CONVERT TO OFFSET
         ST    R0,ALCOINO          SAVE INPUT AREA BUFFER LOCATION
         MVI   13(R3),X'32'        RED UNDERSCORE FOR INPUT FIELD
         MVC   14(55,R3),13(R3)
         MVC   13(56,R2),ALCDSSAV  PRIME WITH SAME DSNAME
         MVI   13+56(R2),FLDOUTLO
ALCOREDO MVI   REVPOS,SBA          CREATE ORDER TO PLACE CURSOR
         L     R1,ALCOINO          GET INPUT AREA BUFFER LOCATION
         L     R15,=A(CALCPOSI)    GET CONVERSION ROUTINE ENTRY POINT
         BASR  R14,R15             CONVERT FOR 3270 DATA STREAM
         STCM  R1,3,REVPOS+1       SET CURSOR 3270 BUFFER ADDRESS
         MVI   REVPOS+3,IC
         L     R15,=A(REVCOMM)     POINT TO TERMINAL I/O ROUTINE
         BASR  R14,R15             WRITE SCREEN AND READ REPLY
         LA    R15,4               NO PLACE FOR OPTIMISM
         ST    R15,DOUBLE          PREPARE FOR FAILURE
         TM    STATUS4,$4ATTN      ATTENTION INTERRUPT?
         BO    ALCOCNCL            YES, ABORT THIS REQUEST
         CLI   REPLY,ENTERAID      ENTER KEY?
         BNE   ALCOCNCL            NO, TERMINATE UPDATE IF PF KEY
*
*               CLEAR LEVEL 1 AND LEVEL 2 MESSAGES
*
         LA    R0,3
         MH    R0,SCRNCOLS+2
         A     R0,SCREENBF         POINT TO LINE 4
         L     R1,SCRNCOLS         GET SCREEN WIDTH
         SLA   R1,2                GET LENGTH OF 4 LINES
         LA    R15,C' '
         SLL   R15,24              SET PAD AND ZERO LENGTH
         MVCL  R0,R14              BLANK MESSAGE AREA LINES
*
*               PROCESS INPUT FIELD IN PRIMARY SCREEN BUFFER
*
         L     R6,=A(KAPS)         POINT TO UPPER CASE TRANSLATE TABLE
         L     R3,SCREENBF         POINT TO SCREEN BUFFER
         AL    R3,ALCOINO          POINT TO INPUT AREA
         TR    0(56,R3),0(R6)      UPPER CASE ALL INPUT TEXT
         CLI   0(R3),C' '          LEADING BLANK IN DSNAME FIELD?
         BNE   AODSSTRT            NO, HAVE DSNAME START
         CLC   1(55,R3),0(R3)      IS THE WHOLE FIELD BLANK?
         BE    ALCOPSBD            YES, REPROMPT FOR DATA SET NAME
AOINBLLP MVC   0(55,R3),1(R3)      DISCARD LEADING BLANK
         MVI   55(R3),C' '
         CLI   0(R3),C' '          ANOTHER LEADING BLANK?
         BE    AOINBLLP            YES
AODSSTRT LA    R14,56              GET DSNAME INPUT FIELD LENGTH
         MVI   ALCODSN,C' '        BLANK OUT DATA SET NAME
         MVC   ALCODSN+1(L'ALCODSN-1),ALCODSN
         CLI   0(R3),QUOTE         QUOTED DATA SET NAME?
         BE    AODSQUOT            YES
         MVI   DOUBLE+4,0          NO, FLAG NOT QUOTED
         L     R1,REVUPT           POINT TO USER PROFILE TABLE
         USING UPT,R1
         MVC   ALCODSN(7),UPTPREFX COPY THE PREFIX
         SR    R0,R0
         ICM   R0,1,UPTPREFL       GET THE PREFIX LENGTH
         CLI   UPTPREFX,C'>'       '>7BYTES'?
         BNE   AODSPREF            NO
         MVC   ALCODSN(8),UPT+33   COPY THE PREFIX
         LA    R0,8                GET THE PREFIX LENGTH
         DROP  R1                  UPT
AODSPREF LR    R1,R0               COPY THE PREFIX LENGTH
         LA    R1,ALCODSN(R1)      POINT PAST PREFIX
         BZ    AODSREST            HANDLE PROFILE NOPREFIX
         MVI   0(R1),C'.'          SUPPLY PERIOD
         LA    R1,1(,R1)           POINT PAST PERIOD
         B     AODSREST            TIME TO FINISH LOADING THE DSNAME
AODSQUOT MVI   DOUBLE+4,1          FLAG QUOTED
         LA    R3,1(,R3)           POINT PAST THE QUOTE
         LA    R1,ALCODSN          POINT TO TARGET DATA SET NAME FIELD
         BCT   R14,AODSREST        DECREASE LENGTH
         B     ALCOPSBD            INPUT WAS JUST A QUOTE
AODSREST LA    R4,0(R14,R3)        POINT PAST DSNAME
         BCTR  R4,0                POINT TO LAST BYTE OF DSNAME
AODSNDLP CLI   0(R4),C' '          TRAILING BLANK?
         BNE   AODSEND             NO, FOUND THE END OF THE DSNAME
         BCTR  R4,0                YES, BACK UP A BYTE
         BCT   R14,AODSNDLP        DECREASE LENGTH
         B     ALCOPSBD            INPUT WAS JUST A QUOTE AND BLANK(S)
AODSEND  CLI   0(R4),QUOTE         TRAILING QUOTE?
         BNE   AODSQUAL            NO, QUALIFICATION NOW COMPLETE
         CLI   DOUBLE+4,0          QUOTED DATA SET NAME?
         BE    ALCOPSBD            NO
         BCTR  R4,0                YES, QUOTE ALLOWED, SO BACK UP ONE
         BCT   R14,AODSQUAL        ADJUST LENGTH
         B     ALCOPSBD            INPUT WAS JUST QUOTES
AODSQUAL MVC   $MEMBER,ALCOBLNK    CLEAR MEMBER NAME
         L     R6,=A(DSNCHARS)     POINT TO TRANSLATE TABLE
         CLI   0(R4),C')'          MEMBER NAME PRESENT?
         BNE   AODSFILL            NO
         LA    R0,9                YES, GET OPEN BRACKET SEARCH SIZE
         BCTR  R4,0                BACK UP A CHARACTER
         BCT   R14,AOOPENLP        ADJUST LENGTH
         B     ALCOPSBD            INPUT WAS A BRACKET
AOOPENLP CLI   0(R4),C'('          START OF MEMBER NAME?
         BE    AOMEMNAM            YES
         CLI   0(R4),C' '          IMBEDDED BLANK?
         BE    ALCOPSBD            YES
         CLI   0(R4),C'.'          IMBEDDED PERIOD?
         BE    ALCOPSBD            YES
         BCTR  R4,0                NO, BACK UP A CHARACTER
         BCTR  R14,0               ADJUST LENGTH
         BCT   R0,AOOPENLP         CONTINUE SEARCH FOR OPEN BRACKET
         B     ALCOPSBD            MEMBER NAME IS TOO LONG
AOMEMNAM BCTR  R14,0               GET LENGTH OF DSNAME PROPER
         LA    R15,9
         SR    R15,R0              GET THE SUPPLIED MEMBER NAME LENGTH
         BNP   ALCOPSBD            NULL MEMBER NAME
         BCTR  R15,0               DECREMENT FOR EXECUTE
         EX    R15,AOSETMEM        COPY THE MEMBER NAME
         EX    R15,AOTRTMEM        ONLY VALID CHARACTERS FOR MEMBER?
         BNZ   ALCOPSBD            NO   (R2 MODIFIED BY TRT)
         CLI   $MEMBER,C'0'        NAME STARTS WITH NUMERIC?
         BNL   ALCOPSBD            YES
         MVI   DOUBLE+4,6          SET LOCAL ERROR CODE
         TM    STATUS7,$7TACK      ALLOCATING AN APPEND FILE?
         BO    ALCOEROR            YES, REJECT WITH ERROR MESSAGE
AODSFILL LTR   R14,R14             STILL HAVE A VALID LENGTH?
         BNP   ALCOPSBD            NO, TOO SHORT
         CH    R14,=H'44'
         BH    ALCOPSBD            NO, TOO LONG
         BCTR  R14,0               DECREMENT FOR EXECUTE
         EX    R14,AOSETDSN        COPY THE DATA SET NAME
         EX    R14,AOTRTDSN        ONLY VALID CHARACTERS IN DSNAME?
         BNZ   ALCOPSBD            NO
         LA    R4,1(R14,R1)        POINT PAST ULTIMATE DSNAME
         LA    R0,ALCODSN          POINT TO START OF ULTIMATE DSNAME
         SR    R4,R0               GET LENGTH OF ULTIMATE DSNAME
         STH   R4,ALCODSNL         SAVE IT
         LA    R15,2(,R4)          GET SOURCE LENGTH
         LA    R14,ALCODSNL        GET SOURCE ADDRESS
         LA    R1,46               GET TARGET LENGTH
         LA    R0,$DSNAME          GET TARGET ADDRESS
         ICM   R15,8,ALCOBLNK      SET PAD TO BLANK
         MVCL  R0,R14              LOAD $DSNAME
         SPACE
ALCODAIR XC    MYDAPB,MYDAPB
         MVI   DA08CD+1,X'08'
         LA    R0,$DSNAME
         ST    R0,DA08PDSN
         MVC   DA08DDN,ALCOBLNK
         MVC   DA08UNIT,ALCOBLNK
         MVC   DA08SER,ALCOBLNK
         MVC   DA08MNM,$MEMBER
         MVC   DA08PSWD,ALCOBLNK
         MVI   DA08DSP1,DA08SHR    TRY FOR EXISTING DATA SET FIRST
         MVI   DA08DPS2,DA08KEEP
         MVI   DA08DPS3,DA08KEP
         XC    MYECB,MYECB
         XASAM24
         LA    R1,MYDAPL
         L     R15,CVTPTR(,0)      CVT
         L     R15,CVTDAIR-CVT(,R15)
         BASR  R14,R15             CALL IKJDAIR
         XASAM31
         MVC   $DDNAME,DA08DDN     COPY GENERATED DD NAME
         LTR   R15,R15
         BZ    AOINDONE            FILE SUCCESSFULLY ALLOCATED
         LA    R1,MYDFPARM
         USING DFDSECTD,R1         MAPPED BY IKJEFFDF DFDSECT=YES MACRO
         ST    R15,MYDFRC          IKJDAIR RETURN CODE
         LA    R15,MYDFRC
         ST    R15,DFRCP
         LA    R15,MYDAPL
         ST    R15,DFDAPLP
*        SR    R15,R15             INITIALLY ZERO - BUT LEAVE EP THERE
*        ST    R15,MYJEFF02               IF THE SYSTEM ALREADY SET IT
         LA    R15,MYJEFF02
         ST    R15,DFJEFF02
         MVI   MYDFID,DFBUFSW
         MVI   MYDFID+1,DFDAIR
         LA    R15,MYDFID
         ST    R15,DFIDP
         MVC   DFCPPLP,CPPLPTR
         LA    R15,AODFBUFS
         ST    R15,DFBUFP
         DROP  R1                  DFDSECTD
         LINK  EP=IKJEFF18,SF=(E,LINKAREA)
         L     R2,SCREENBF         POINT TO PRIMARY SCREEN BUFFER
         LA    R4,AODFBUFS         POINT TO EXTRACTED MESSAGES
         USING DFDSECT2,R4
         LA    R0,5
         LH    R14,DFBUFL1         GET LENGTH OF LEVEL 1 MESSAGE AREA
         SR    R14,R0              GET LENGTH CODE OF MESSAGE TEXT
         BM    ALCOPSBD            NO MESSAGE TO LOAD
         L     R1,SCREENBF         POINT TO PRIMARY SCREEN BUFFER
         L     R2,SCRNCOLS         GET SCREEN WIDTH
         AR    R1,R2               POINT TO LINE 2
         AR    R2,R2               GET DOUBLE THE SCREEN WIDTH
         AR    R1,R2               LINE 4 IS LEVEL 1 MESSAGE SHOW AREA
         LA    R3,DFBUFT1          POINT TO LEVEL 1 MESSAGE TEXT
         EX    R14,AOSETDSN        LOAD LEVEL 1 MESSAGE
         LH    R14,DFBUFL2         GET LENGTH OF LEVEL 2 MESSAGE AREA
         SR    R14,R0              GET LENGTH CODE OF MESSAGE TEXT
         BM    AODSPCHK            NO MESSAGE TO LOAD
         CR    R14,R2              MESSAGE TOO LONG TO FIT?
         BL    *+6                 NO
         LR    R14,R0              YES, TRUNCATE AT MAXIMUM LENGTH
         BCTR  R14,0               DECREMENT FOR EXECUTE
         AR    R1,R2               LINE 6 IS LEVEL 1 MESSAGE SHOW AREA
         LA    R3,DFBUFT2          POINT TO LEVEL 2 MESSAGE TEXT
         EX    R14,AOSETDSN        LOAD LEVEL 2 MESSAGE
         DROP  R4                  DFDSECT2
AODSPCHK TM    DA08DSP1,DA08NEW    TRYING TO CREATE A DATA SET?
         BO    ALCOPSBD            YES, REPROMPT FOR DATA SET NAME
         TM    STATUS12,$12REP     INHIBITING DATA SET CREATION?
         BO    ALCOPSBD            YES, REPROMPT FOR DATA SET NAME
         CLC   =XL4'17080008',DA08DARC
         BNE   ALCOPSBD            REPROMPT FOR DATA SET NAME
*
*         "DATA SET NOT IN CATALOG OR CATALOG CANNOT BE ACCESSED"
*                                  DARC=X'1708' AND CTRC=X'0008'
*
*               PREPARE TO CREATE A DATA SET WITH THE SPECIFIED NAME
*
         USING LVAENT,AOLVAENT
         XC    AOLVAENT,AOLVAENT
         MVC   LVADSNL,$DSNAME     DATA SET NAME LENGTH
         MVC   LVADSN,$DSNAME+2    DATA SET NAME
         MVI   LVAFLG,$NEWNM       FLAG NEW DATA SET REQUEST TYPE
         MVC   LVAORG(8),ALCOBLNK  BLANK DSORG AND RECFM
         MVC   LVAORG(2),=C'PS'    DSORG
         CLI   $MEMBER,C' '        MEMBER NAME SPECIFIED?
         BE    *+8                 NO
         MVI   LVAORG+1,C'O'       YES
         MVC   LVARFM(2),=C'VB'
         MVI   LVALRL,X'10'        LRECL=4096
         MVI   LVABLK,X'18'        BLKSIZE=6144
**       TM    STATUS10,$10LIKE    CAN COPY DATA SET ATTRIBUTES?
**       BNO   ALCREATE            NO, ATTEMPT DATA SET CREATION
         CLI   DS1FMTID,X'F1'      LOOKING AT A DASD DATA SET?
         BL    ALCREATE            NO, NOT MUCH TO GO ON SO GO TRY IT
         TM    DS1RECFM,X'40'      FIXED-LENGTH RECORDS?
         BO    *+8                 NO
         MVI   LVARFM,C'F'         YES
         MVC   LVALRL,DS1LRECL     LRECL
         MVC   LVABLK,DS1BLKL      BLKSIZE
         SR    R1,R1
         ICM   R1,3,DS1LSTAR
         AIF   (NOT &ENVBIG).ALCLRG1
         TM    DS1FLAG1,DS1LARGE   DSNTYPE=LARGE?
         BNO   *+8                 NO
         ICM   R1,4,DS1TTTHI       YES, GET TRACKS USED HIGH-ORDER
.ALCLRG1 ANOP
         LA    R1,1(,R1)           GET USED TRACK COUNT
         ST    R1,LVAALOC
ALCREATE LA    R1,AOLVAENT         POINT TO PHONY REVLEV ENTRY
         L     R15,=A(REVCREAT)    POINT TO CREATE ROUTINE
         BASR  R14,R15             GO CREATE THE DATA SET
         LA    R0,4
         ST    R0,DOUBLE           RESTORE RETURN STATUS INDICATOR
         CLI   MSG,172             DATA SET CREATED?
         BNE   ALCOEXIT            NO, IT DIDN'T WORK
         OI    STATUS10,$10NEW     YES, FLAG THIS
         B     ALCODAIR            GO ALLOCATE IT FOR USE
         SPACE
*
*               PROCESS ENQ FAILURE
*
ALCOBUSY TM    STATUS12,$12ENQ     JUST HERE TO SERIALIZE?
         BNO   AOUNSUIT            NO, DEALLOCATE AND REPROMPT
         MVI   MSG,120             DATA SET IN USE
         CLI   OAIAMEM,C' '        ANY MEMBER NAME SPECIFIED?
         BE    ALCORETN            NO, MESSAGE CORRECT SO RETURN
         MVI   MSG,54              MEMBER IN USE
         B     ALCORETN            GO RETURN TO CALLER
         SPACE
*
*               DEALLOCATE UNSUITABLE FILE
*
AOUNSUIT XC    MYDAPB,MYDAPB
         MVI   DA18CD+1,X'18'
         MVC   DA18DDN,$DDNAME     DDNAME
         MVC   DA18MNM,$MEMBER     MEMBER NAME
         MVC   DA18SCLS,ALCOBLNK   SYSOUT CLASS IS 2-BYTE FIELD
         XC    MYECB,MYECB
         XASAM24
         LA    R1,MYDAPL
         L     R15,CVTPTR(,0)      CVT
         L     R15,CVTDAIR-CVT(,R15)
         BASR  R14,R15             CALL IKJDAIR TO FREE FILE
         XASAM31
         SPACE
*
*               LOAD UNSUITABLE REASON MESSAGE
*
ALCOEROR L     R1,SCREENBF         POINT TO PRIMARY SCREEN BUFFER
         LA    R1,3*80(,R1)        POINT TO LEVEL 1 MESSAGE SHOW AREA
         SR    R2,R2
         IC    R2,DOUBLE+4         GET ERROR FLAG
         SLL   R2,5                GET MESSAGE INDEX
         LA    R2,ALCOMSGS(R2)     POINT TO MESSAGE
         MVC   0(32,R1),0(R2)      LOAD MESSAGE
         XC    OAIAREA(OAIALEN),OAIAREA CLEAR BAD DATA FOR CALLER
         SPACE
*
*               SET UP ERROR CONDITION PRIOR TO SCREEN RESHOW
*
ALCOPSBD L     R2,SCRNCOLS         GET THE SCREEN WIDTH
         LR    R3,R2               COPY IT
         SRA   R2,1                HALVE IT
         SLA   R3,1                DOUBLE IT
         LA    R0,(LOADFIXL+2)/2
         SR    R2,R0
         AR    R2,R3
         A     R2,SCREENBF         POINT TO PRIMARY SCREEN BUFFER
         L     R4,=A(LOADFIXM)     POINT TO ERROR MESSAGE
         MVC   1(LOADFIXL,R2),0(R4)
         A     R2,SCREENSZ         POINT TO THE SHADOW BUFFER
         MVI   0(R2),X'22'         REVERSE RED FOR ERROR MESSAGE
         MVC   1(LOADFIXL+1,R2),0(R2)
         TM    STATUS10,$10NEW     NEED TO REPAINT SCREEN?
         BNO   ALCOREDO            NO, ISSUE NEW PROMPT
         B     ALCOINIT            YES, ISSUE NEW PROMPT
         SPACE
AOSETMEM MVC   $MEMBER(0),1(R4)    <<< EXECUTED >>>
AOSETDSN MVC   0(0,R1),0(R3)       <<< EXECUTED >>>
AOTRTMEM TRT   $MEMBER(0),0(R6)    <<< EXECUTED >>>
AOTRTDSN TRT   ALCODSN(0),0(R6)    <<< EXECUTED >>>
         SPACE
*
*               VERIFY SUITABILITY OF DATA SET
*
AOINDONE LA    R1,$DDNAME          POINT TO NEW DDNAME
         L     R15,=A(REVDDLOC)    POINT TO SUBROUTINE
         BASR  R14,R15             FIND NEW DD TIOT ENTRY
         LTR   R15,R15             IS IT ALLOCATED?
         BZ    AOOBTNOK            NO, VERY STRANGE...
         SR    R3,R3               SOMETHING WAS ALLOCATED
         ICM   R3,7,17(R15)        POINT TO THE UCB
         ST    R3,$UCBAD           SAVE UCB ADDRESS
         BZ    AOOBTNOK            NO UCB, A LITTLE WEIRD...
         MVC   $VOLSER,28(R3)      COPY THE VOLUME SERIAL NUMBER
         CLI   18(R3),X'20'        DASD DEVICE CLASS?
         BNE   AONOTPDS            NO, SKIP OBTAIN
**       TM    17(R3),X'20'        SHARED DASD?
**       BNO   *+8                 NO (BUT ISPF ALWAYS ISSUES RESERVE)
         ST    R3,OAIAUCB          SET RESERVE UCB ADDRESS
         MVI   DOUBLE+4,0          SET ERROR FLAG
         OI    STATUS13,$13COMP    UPDATE ACCESS IS REQUIRED
         L     R15,=A(REVDASD)     POINT TO DASD DATA SET INIT. ROUTINE
         BASR  R14,R15             CALL IT - ONLY R9 TO R13 PRESERVED
         NI    STATUS13,255-$13COMP
         LTR   R15,R15             USABLE DATA SET?
         BNZ   AOUNSUIT            NO
         TM    DS1DSORG,DS1DSGPO
         BO    ALCOISPO            DATA SET IS PARTITIONED
         MVI   DOUBLE+4,1          SET ERROR CODE
         CLI   DS1DSORG+1,0
         BNE   AOUNSUIT            DATA SET IS VSAM
         TM    DS1DSORG,255-DS1DSGPS-DS1DSGU
         BNZ   AOUNSUIT            DATA SET IS NOT SEQUENTIAL
         MVI   DOUBLE+4,2          SET ERROR CODE
AONOTPDS CLI   $MEMBER,C' '        MEMBER SPECIFIED?
         BNE   AOUNSUIT            YES
*        TM    DA08DSP1,DA08NEW    NEW DATA SET CREATED?
         TM    STATUS10,$10NEW     NEW DATA SET CREATED?
         BO    AOOBTNOK            YES, MUST HAVE BEEN CREATE
         MVI   DOUBLE+4,5          SET ERROR CODE
         TM    STATUS12,$12CRE     NEW SEQUENTIAL REQUIRED?
         BO    AOUNSUIT            YES, SO OLD DATA SET NO GOOD
         CLI   18(R3),X'80'        TAPE DEVICE CLASS?
         BNE   AOOBTNOK            NO, LOOKING GOOD...
         MVI   DOUBLE+4,5          SET ERROR CODE
         B     AOUNSUIT            YES, SO OLD DATA SET NO GOOD
ALCOISPO MVI   DOUBLE+4,3          SET ERROR CODE
         CLI   $MEMBER,C' '        MEMBER SPECIFIED?
         BE    AOUNSUIT            NO
         SPACE
*
*               SERIALIZE DATA SET UPDATE ACCESS
*
AOOBTNOK MVC   OAIADDN,$DDNAME
         MVC   OAIADSN,$DSNAME+2
         MVC   OAIAMEM,$MEMBER
ALCOENQ  XC    AOENQPRM,AOENQPRM   CLEAR ENQ PARAMETER LIST
         MVI   AOENQPRM,X'C0'      USE ORIGINAL PARAMETER LIST FORMAT
         MVI   DOUBLE+4,4          SET ERROR FLAG
         ENQ   (ALCOSPFE,OAIADSN,E,52,SYSTEMS),RET=USE,MF=(E,AOENQPRM)
         ST    R15,DOUBLE          FLAG SUCCESS STATUS TO CALLER
         LTR   R15,R15             SUCCESS?
         BNZ   ALCOBUSY            NO, ALREADY IN USE
         TM    STATUS12,$12ENQ     JUST HERE TO SERIALIZE?
         BO    ALCORESV            YES, NO PROMPT SCREEN TO SCRAPE
         L     R2,SCREENBF         POINT TO PRIMARY SCREEN BUFFER
         L     R1,ALCOINO          GET INPUT FIELD SCREEN OFFSET
         LA    R1,55(R1,R2)        POINT TO LAST INPUT BYTE
ALC0LOOP CLI   0(R1),C' '          TRAILING BLANK?
         BNE   ALC0DONE            NO
         MVI   0(R1),X'00'         YES, CONVERT TO NULL
         BCT   R1,ALC0LOOP         NULL OUT TRAILING BLANKS
ALC0DONE AL    R2,ALCOINO          POINT TO INPUT FIELD
         MVC   ALCDSSAV,0(R2)      SAVE SUCCESSFUL DATA SET NAME
ALCORESV ICM   R0,15,OAIAUCB       ANY UCB ADDRESS?
         BZ    ALCOEXIT            NO, PROCESSING COMPLETE
         XC    AOENQPRM,AOENQPRM   CLEAR ENQ PARAMETER LIST
         MVI   AOENQPRM,X'C0'      USE ORIGINAL PARAMETER LIST FORMAT
         RESERVE (ALCOSPFE,OAIADSN,E,44,SYSTEMS),RET=NONE,UCB=OAIAUCB, +
               MF=(E,AOENQPRM)
         SPACE
*
*               TERMINATE AND EXIT
*
ALCOEXIT NI    STATUS4,255-$4ATTN  RESET ATTENTION FLAG
*                                  NORMAL SCREEN WRITES AND PARSE INPUT
*                                  CLEAR "LIKE ATTRIBUTES" FLAG
         NI    STATUS10,255-$10ASP-$10LIKE
         OI    STATUS7,$7RESHO     TELL REVCOMM TO RESTORE SCREEN SIZE
         OI    STATUS10,$10CDR     TELL ISPF TO RESEND WHOLE SCREEN
         OI    STATUS4,$4REFR      TELL CALLER TO PAINT WHOLE SCREEN
         LA    R0,1
         ST    R0,REVPOS           PLACE CURSOR BACK AT HOME
         MVC   REVCSR,ALCOZCMD
         LA    R0,$ALCOWKL
**       CLI   DOUBLE+3,0          DATA SET ALLOCATED?
**       BNE   ALCORETN            NO
**       TM    DA08DSP1,DA08NEW    NEW DATA SET CREATED?
**       BNO   ALCORETN            NO
**       OI    STATUS10,$10NEW     YES, FLAG THIS
ALCORETN LR    R1,R13              POINT TO DYNAMIC AREA TO BE FREED
         MVC   $PASSWRD($DSVARSZ),AO$VARS   RESTORE "$" VARIABLES
         MVC   MYDSCB,AO$DSCB      RESTORE SAVED DSCB
         DROP  R13                 @ALOCOWK
         L     R13,4(,R13)         POINT TO PREVIOUS SAVE AREA
         OI    11(R13),X'01'       INVALIDATE FORWARD POINTER
         FREEMAIN R,LV=(0),A=(1)   FREE @ALOCOWK
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         L     R15,DOUBLE          SET RETURN CODE
         BR    R14                 RETURN TO CALLER
         SPACE
ALCOCNCL MVI   MSG,29              REQUEST CANCELLED
         B     ALCOEXIT
         SPACE
         DROP  R11,R10             REVALCO, OAIAREA
         TITLE '  R E V A L C O   -   S T A T I C   A R E A  '
         DC    0D'0'
ALCOBLNK DC    CL8' '
ALCOZCMD DC    CL8'ZCMD    '       DEFAULT CURSOR FIELD NAME
ALCOSPFE DC    CL8'SPFEDIT '       ENQUEUE MAJOR NAME
         SPACE
ALCOMSGS DC    CL32'DATA SET FAILED USABILITY CHECK'         0
         DC    CL32'DSORG NEEDS TO BE PO OR PS'              1
         DC    CL32'MEMBER SPECIFIED FOR SEQUENTIAL'         2
         DC    CL32'MEMBER NEEDED FOR PARTITIONED'           3
         DC    CL32'DATA SET OR MEMBER IN USE'               4
         DC    CL32'CREATE ERROR - DATA SET EXISTS'          5
         DC    CL32'APPEND TO PDS MEMBER NOT ALLOWED'        6
         DC    CL32'OVERWRITE OF TAPE NOT ALLOWED'           7
         SPACE
         LTORG
         SPACE
AOLN1A   DC    AL1(FLDOUTHI),CL6'REVIEW'
AOLN1B   DC    CL30'OUTPUT DSN REQUEST ENTRY PANEL'
AOLN1ED  DC    CL4'EDIT'
AOLN1CRE DC    CL6'CREATE'
AOLN1REP DC    CL7'REPLACE'
AOLN1C   DC    C'R&REL'
AOLN8    DC    AL1(FLDOUTLO)
         DC    CL39'SPECIFY OUTPUT SEQUENTIAL DATA SET NAME'
         DC    AL1(FLDOUTHI)
AOLN9    DC    C'==>',AL1(FLDINHI)
         SPACE
         DC    0D'0'               END OF CSECT
         TITLE '  R E V A L C O   -   D Y N A M I C   A R E A  '
@ALOCOWK DSECT
         DS    18F                 REGISTER SAVE AREA
AOENQPRM DS    XL16                FOUR WORDS FOR ENQ/RESERVE
ALCODSNL DS    H                   NOMINATED DSNAME LENGTH
ALCODSN  DS    CL70                NOMINATED DSNAME
ALCOINO  DS    F                   INPUT FIELD SCREEN OFFSET
AO$VARS  DS    XL($DSVARSZ)        SAVE AREA FOR SUBJECT DETAILS
AO$DSCB  DS    XL140               SAVE AREA FOR OBTAINED DSCB
AOLVAENT DS    XL(LVASIZ)          PHONY DSLIST ENTRY FOR REVCREATE
AODFBUFS DS    64D                 512 BYTES FOR DAIRFAIL DFBUFS
         DS    0D                  END OF DSECT
$ALCOWKL EQU   *-@ALOCOWK
         SPACE
         SPACE
OAIAREA  DSECT ,                   OUTPUT ALLOCATION INFORMATION AREA
OAIADDN  DS    CL8                 DDNAME
OAIADSN  DS    CL44                DATA SET NAME
OAIAMEM  DS    CL8                 MEMBER NAME
OAIAUCB  DS    A                   UCB ADDRESS IF DASD
         DS    0D                  END OF 64-BYTE DSECT
OAIALEN  EQU   *-OAIAREA           LENGTH OF THIS AREA
         TITLE '  R E V D A L O  '
**********************************************************************
*                                                          *         *
*         DEALLOCATE AN OUTPUT SEQUENTIAL FILE             *  GP@P6  *
*                                                          * AUG2003 *
**********************************************************************
         SPACE
**********************************************************************
*                                                                    *
*        THIS ROUTINE DEQUEUES AND DEALLOCATES AN OUTPUT FILE        *
*        ALLOCATED AND ENQUEUED BY THE REVALCO ROUTINE.              *
*                                                                    *
*        THE CALLER MUST SUPPLY A 64-BYTE PROGRAM PARAMETER          *
*        WHICH HAS THE DATA SUPPLIED BY THE REVALCO ROUTINE.         *
*                                                                    *
*        FLAG '$12ENQ' CAN BE SET TO REQUEST SERIALIZATION           *
*        DEQUEUING WITHOUT ALSO PERFORMING DEALLOCATION.             *
*                                                                    *
**********************************************************************
         SPACE
**********************************************************************
*                                                                    *
* REGISTERS ON ENTRY: R1 -> 64-BYTE ALLOCATION INFORMATION AREA      *
*                     R9 -> @DATA                                    *
*                     R13-> REGISTER SAVE AREA                       *
*                     R14-> RETURN POINT                             *
*                     R15-> REVDALO                                  *
*                                                                    *
* DURING PROCESSING:  R9 -> @DATA                                    *
*                     R10-> 64-BYTE ALLOCATION INFORMATION AREA      *
*                     R11-> REVDALO                                  *
*                     R13-> @DALCOWK (LOCAL GETMAINED AREA)          *
*                                                                    *
* UPON EXIT:          $12ENQ IS RESET                                *
*                                                                    *
* RETURN CODES:       R15 = 0  PROCESSING COMPLETE                   *
*                                                                    *
**********************************************************************
         EJECT
REVDALO  RSECT
REVDALO  AMODE 31
         B     @DALCOUT-*(,R15)
         DC    AL1(7),CL7'REVDALO'
@DALCOUT STM   R14,R12,12(R13)
         LR    R11,R15
         USING REVDALO,R11
         LR    R10,R1              POINT TO INFORMATION AREA
         OC    0(OAIALEN,R1),0(R1) ANYTHING TO DO?
         BZ    DALONOOP            NO, LEAVE NOW
         USING OAIAREA,R10
         LA    R0,$DALOWKL
         MVI   GETMNTRC,55         TRACK GETMAIN IN CASE OF FAILURE
         GETMAIN R,LV=(0)          GET MAIN STORAGE
         LR    R14,R1              POINT TO NEW AREA
         LA    R15,$DALOWKL        GET ITS LENGTH
         SR    R3,R3               CLEAR SOURCE LENGTH AND PAD
         MVCL  R14,R2              CLEAR RESIDUAL DATA
         ST    R1,8(,R13)          CHAIN SAVE AREAS
         ST    R13,4(,R1)
         LR    R13,R1              POINT TO GETMAINED AREA
         USING @DALCOWK,R13
         SPACE
*
*               DEQ THE RESERVE
*
         XC    DODEQPRM,DODEQPRM   CLEAR DEQ PARAMETER LIST
         MVI   DODEQPRM,X'C0'      USE ORIGINAL PARAMETER LIST FORMAT
         ICM   R0,15,OAIAUCB       ANY UCB ADDRESS?
         BZ    DORLSEOK            NO, HARDWARE RELEASE NOT REQUIRED
         DEQ   (DALOSPFE,OAIADSN,44,SYSTEMS),RET=NONE,UCB=OAIAUCB,     +
               MF=(E,DODEQPRM)
DORLSEOK DS    0H                  NO RESERVE IS NOW IN FORCE
         SPACE
*
*               DEQ THE ENQ
*
         DEQ   (DALOSPFE,OAIADSN,52,SYSTEMS),RET=NONE,MF=(E,DODEQPRM)
         TM    STATUS12,$12ENQ     DEALLOCATION NEEDED?
         BNO   DALOFREE            YES, GO DO IT
         TM    STATUS15,$15COPY    PERFORMING A MEMBER LIST COPY?
         BNO   DALOZERO            NO, CLEAR THE OAIA
         B     DALOEXIT            YES, LEAVE OAIA FOR NEXT MEMBER
         SPACE
*
*               DEALLOCATE OUTPUT FILE
*
DALOFREE XC    MYDAPB,MYDAPB
         MVI   DA18CD+1,X'18'
         MVC   DA18DDN,OAIADDN     DDNAME
         MVC   DA18MNM,OAIAMEM     MEMBER NAME
         MVI   DA18SCLS,C' '       SYSOUT CLASS IS 2-BYTE FIELD
         MVI   DA18SCLS+1,C' '
         XC    MYECB,MYECB
         XASAM24
         LA    R1,MYDAPL
         L     R15,CVTPTR(,0)      CVT
         L     R15,CVTDAIR-CVT(,R15)
         BASR  R14,R15             CALL IKJDAIR TO FREE FILE
         XASAM31
         SPACE
*
*               TERMINATE AND EXIT
*
DALOZERO XC    0(OAIALEN,R10),0(R10)    CLEAR PROCESSED DATA
DALOEXIT NI    STATUS12,255-$12ENQ CLEAR "SERIALIZATION ONLY" FLAG
         LA    R0,$DALOWKL
         LR    R1,R13              POINT TO DYNAMIC AREA TO BE FREED
         DROP  R13                 @DALCOWK
         L     R13,4(,R13)         POINT TO PREVIOUS SAVE AREA
         OI    11(R13),X'01'       INVALIDATE FORWARD POINTER
         FREEMAIN R,LV=(0),A=(1)   FREE @DALCOWK
DALONOOP LM    R14,R12,12(R13)     RESTORE REGISTERS
         SR    R15,R15             SET RETURN CODE
         BR    R14                 RETURN TO CALLER
         SPACE
         DROP  R11,R10             REVDALO, OAIAREA
         TITLE '  R E V D A L O   -   S T A T I C   A R E A  '
         DS    0D
DALOSPFE DC    CL8'SPFEDIT '       ENQUEUE MAJOR NAME
         LTORG
         SPACE
         DC    0D'0'               END OF CSECT
         TITLE '  R E V D A L O   -   D Y N A M I C   A R E A  '
@DALCOWK DSECT
         DS    18F                 REGISTER SAVE AREA
DODEQPRM DS    XL16                FOUR WORDS FOR DEQ
         DS    0D                  END OF DSECT
$DALOWKL EQU   *-@DALCOWK
         TITLE '  R E V O F F L D  '
**********************************************************************
*                                                          *         *
*         REVIEW PDS MEMBER OFFLOAD PROCESSOR              *  GP@P6  *
*                                                          *  02/90  *
**********************************************************************
         SPACE
**********************************************************************
*                                                                    *
*        THIS ROUTINE PROVIDES THE CAPABILITY OF OFFLOADING          *
*        ALL OR SOME MEMBERS OF THE PDS BEING REVIEWED TO THE        *
*        SEQUENTIAL DATA SET NOMINATED BY THE USER.                  *
*                                                                    *
*        THE OFFLOAD OUTPUT IS IN IEBUPDTE-LIKE FORMAT WITH          *
*        './ ADD ' STATEMENTS PRECEEDING EACH MEMBER'S DATA.  ONLY   *
*        FIXED-LENGTH OR VARIABLE-LENGTH RECORD FORMAT FILES CAN     *
*        BE OFFLOADED.  THE LOGICAL RECORD LENGTH WRITTEN WILL       *
*        BE THAT OF THE INPUT PDS OR 80, WHICHEVER IS GREATER.       *
*        OFFLOAD SUPPORTS ALL ALLOWABLE LRECL VALUES GREATER THAN    *
*        ZERO AND LESS THAN 32K.                                     *
*                                                                    *
*        STANDARD 4-BYTE SSI INFORMATION FROM MEMBER USER-DATA       *
*        IS SUPPLIED ON THE CONTROL STATEMENTS, AS IS SPF STATS      *
*        IN "PDSLOAD" FORMAT.  ANY OTHER FORM OF USER DATA IS NOT    *
*        OFFLOADED.                                                  *
*                                                                    *
*        MEMBERS ARE OFFLOADED IN MEMBER SELECTION LIST ORDER.       *
*        WHEN OFFLOADING MEMBERS SORTED IN TTR ORDER './ ALIAS '     *
*        STATEMENTS WILL BE GENERATED FOR ALIASES OF OFFLOADED       *
*        REAL MEMBERS.  FOR CONCATENATED FILES WITH DUPLICATELY      *
*        NAMED MEMBERS, THE FIRST OCCURRENCE OF A MEMBER NAME        *
*        WILL BE OFFLOADED FOR EVERY OCCURRENCE OF THE MEMBER IN     *
*        THE CONCATENATION EXCEPT WHEN MEMBERS ARE SORTED IN         *
*        COLLATING SEQUENCE ORDER, WHEN A GIVEN MEMBER NAME WILL     *
*        ONLY BE OFFLOADED ONCE.                                     *
*                                                                    *
*        OFFLOAD OUTPUT CAN BE USED AS INPUT TO IEBUPDTE ONLY        *
*        TO RECREATE MEMBERS FROM FIXED LENGTH RECORD PDSS WITH      *
*        RECORD LENGTHS IN THE RANGE OF 1 TO 80.  IEBUPDTE WILL      *
*        NOT RECREATE SPF STATISTICS.  IN ORDER TO RECREATE SPF      *
*        STATISTICS AND/OR VARIABLE LENGTH RECORDS AND/OR FIXED      *
*        LENGTH RECORDS WITH MORE THAN 80 BYTES, A USER DEVELOPED    *
*        UTILITY SUCH AS PDSLOAD OR UPDTE MUST BE USED.              *
*                                                                    *
*        WHENEVER THE CHARACTERS './' ARE ENCOUNTERED AS THE         *
*        FIRST TWO DATA BYTES OF A RECORD, THEY WILL BE REPLACED     *
*        BY THE CHARACTERS '><' IN THE OUTPUT FILE.                  *
*                                                                    *
*        ATTENTION INTERRUPTS CAN PREMATURELY TERMINATE THE          *
*        OFFLOAD PROCESS, BUT ONLY AT THE END OF A MEMBER.  ONCE     *
*        PROCESSING THE LAST MEMBER HAS STARTED THE OFFLOAD WILL     *
*        RUN TO COMPLETION.  THE '*INT*' STRING IN THE './ ENDUP '   *
*        CARD INDICATES TERMINATION DUE TO ATTENTION INTERRUPT.      *
*                                                                    *
*        IF 'SEQLOAD' IS THE COMMAND (AND NOT 'OFFLOAD') THEN THE    *
*        SAME PROCESSING OCCURS EXCEPT THAT THE IEBUPDTE-LIKE        *
*        CONTROL STATEMENTS ARE NOT GENERATED, AND DATA RECORDS      *
*        BEGINNING WITH './' WILL NOT HAVE THEIR FIRST TWO DATA      *
*        BYTES CHANGED TO '><' UPON OUTPUT.  THE OUTPUT LRECL        *
*        WILL BE SET TO THAT OF THE PDS EVEN IF < 80.                *
*                                                                    *
*        AS OF RELEASE 31 (JUNE 1999) PROCESSING HAS BEEN ENHANCED   *
*        TO HANDLE RECFM=U.  THE SEQUENTIAL OUTPUT WILL BE FIXED-    *
*        LENGTH 80-BYTE RECORDS.  THE REVLMOD PROGRAM HAS BEEN       *
*        WRITTEN TO RECREATE THE OFFLOADED MEMBERS.  PDS LOAD        *
*        MODULES (BUT NOT PDSE PROGRAM OBJECTS) CAN NOW BE           *
*        TRANSPORTED USING THIS PROCESS.  SEGMENT OVERLAY PROGRAMS   *
*        WERE ALSO NOT SUPPORTED UNTIL RELEASE 47.1.                 *
*                                                                    *
*        RELEASE 31 ALSO PROVIDES FOR ALTERING THE OUTPUT DDNAME     *
*        TO SOMETHING OTHER THAN SYSUT2 IF DESIRED.                  *
*                                                                    *
*        RELEASE 37 PROVIDES FOR ENTERING A DATA SET NAME WHICH      *
*        IS THEN USED RATHER THAN REQUIRING A PRE-ALLOCATED DDNAME.  *
*                                                                    *
*        RELEASE 40 PROVIDES FOR CREATING A NEW DATA SET IF THE      *
*        NAMED DATA SET DOES NOT EXIST.                              *
*                                                                    *
**********************************************************************
         EJECT
**********************************************************************
*                                                                    *
* REGISTERS ON ENTRY: R9 -> @DATA                                    *
*                     R13-> @PDSAREA                                 *
*                     R14-> RETURN ADDRESS                           *
*                     R15-> REVOFFLD                                 *
*                                                                    *
* DURING PROCESSING:  R3 -> @PDSAREA                                 *
*                     R5 -> OUTPUT DCB                               *
*                     R13-> @OFFLDWK (LOCAL GETMAINED AREA)          *
*                                                                    *
* RETURN CODES:       R15 = 0  PROCESSING COMPLETE                   *
*                                                                    *
* IF STABEND IS SET THEN ABENDWRD WILL CONTAIN X'SSSFRC04'           *
* WHERE 'SSS' IS THE SYSTEM ABEND CODE AND 'RC' IS THE REASON CODE.  *
*                                                                    *
**********************************************************************
         SPACE
REVOFFLD RSECT
REVOFFLD AMODE 31
REVOFFLD RMODE 24
         B     @OFFLD-*(,R15)
         DC    AL1(9),CL9'REVOFFLD'
@OFFLD   STM   R14,R12,12(R13)
         LR    R11,R15
         USING REVOFFLD,R11
         LA    R0,$OFFWKLN
         MVI   GETMNTRC,56         TRACK GETMAIN IN CASE OF FAILURE
         GETMAIN RC,LV=(0),LOC=(24,64)
         LTR   R15,R15             GOT MAIN STORAGE?
         BZ    GOTOFFWK            YES, CONTINUE
         STH   R15,RC              NO, SET NON-ZERO RETURN CODE
         MVI   MSG,123             REQUEST ABORTED - STORAGE FULL
         L     R14,12(R13)         RESTORE RETURN ADDRESS
         LM    R0,12,20(R13)       RESTORE OTHER REGISTERS
         BR    R14                 RETURN WITH GETMAIN RETURN CODE
         SPACE
GOTOFFWK LR    R14,R1              POINT TO NEW AREA
         LA    R15,$OFFWKLN        GET SIZE OF AREA
         SR    R3,R3               ZERO SOURCE LENGTH AND PAD
         MVCL  R14,R2              CLEAR NEW AREA
         ST    R13,4(,R1)          CHAIN SAVE AREAS
         ST    R1,8(,R13)
         LR    R3,R13              POINT TO @PDSAREA
         USING @PDSAREA,R3
         USING OAIAREA,PO_OAIA
         LR    R13,R1              POINT TO GETMAINED AREA
         USING @OFFLDWK,R13
         MVC   OFFDCB,STOFFDCB     INITIALIZE OUTPUT DCB
         LA    R5,OFFDCB
         USING IHADCB,R5
         CLI   OSBITS,X'9B'        MVS/ESA OR LATER?
         BE    OFFXITOK            YES, LET USER OR DFP CHOOSE BLKSIZE
         DEVTYPE OAIADDN,OFFDVTYP  NO, GET DEVICE TYPE DETAILS
         LA    R0,OFFEXLS2         POINT TO LARGER EXIT LIST
         STCM  R0,7,DCBEXLSA       UPDATE THE DCB
OFFXITOK MVC   DCBDDNAM,OAIADDN    SUPPLY FILE NAME TO USE
         MVC   DCBRECFM,DS1RECFM   COPY RECORD FORMAT
         TM    STATUS13,$13COMP    COMPRESS REQUESTED?
         BO    CONDNSIT            YES, OUTPUT DATA IN REVLMOD FORMAT
         TM    DCBRECFM,DCBRECU    PROGRAM LIBRARY?
         BM    NOPGMOFF            NO
*                                  YES, SET RECFM=FB
CONDNSIT MVI   DCBRECFM,DCBRECF+DCBRECBR
         SR    R1,R1               ENSURE LRECL=80
         B     USEUPDTE            ENSURE CONTROL STATEMENTS WRITTEN
*                                  MAKE RECFM=F OR RECFM=V
NOPGMOFF NI    DCBRECFM,DCBRECF+DCBRECV
         OI    DCBRECFM,DCBRECBR   MAKE RECFB=FB OR RECFM=VB
         LH    R1,DS1LRECL         LOAD THE LOGICAL RECORD LENGTH
         STH   R1,DCBLRECL         SUPPLY OUTPUT RECORD LENGTH
         TM    STATUS3,$3UPDTE     MAKING CONTROL CARDS?
         BNO   OFFLDOPN            NO, MUST BE SEQLOAD
USEUPDTE LA    R0,80               GET MINIMUM OUTPUT RECORD LENGTH
         CR    R1,R0               RECORD LENGTH LONG ENOUGH?
         BNL   OFFLDOPN            YES
         STH   R0,DCBLRECL         NO, MAKE RECORD LENGTH THE MINIMUM
         SPACE
OFFLDOPN MVI   OPEND,X'80'         OPEN THE OUTPUT DCB
         OPEN  ((R5),OUTPUT),MF=(E,OPEND)
         TM    STATUS,STABEND      DCB ABEND OCCURRED?
         BO    OFFABNDX            YES, DCB IS ALREADY CLOSED
         LA    R4,DIRENTS          POINT TO FIRST INTERNAL ENTRY
         OI    MODE,MD_OFFLD       NOW IN OFFLOAD MODE
         SPACE
         USING PO_SECT,R4
OFFMEMLP C     R4,LSTMEMAD         END OF INTERNAL DIRECTORY ENTRIES?
         BNL   OFFENDUP            YES, END UP
         TM    PO_FLG,$PODEL       DELETED MEMBER?
         BO    OFFNXTMM            YES, IGNORE THIS ENTRY
         TM    STATUS4,$4ATTN      ATTENTION INTERRUPT?
         BO    OFFATTN             YES, TERMINATE OFFLOAD
         BAS   R14,OFFALIAS        CHECK ./ ALIAS STUFF
         ICM   R14,15,TAGCOUNT     OFFLOADING EVERYTHING?
         BZ    OFFITALL            YES
         TM    PO_FLG,$POTAG       NO, OFFLOADING THIS ONE?
         BZ    OFFNXTMM            NO, TRY THE NEXT
OFFITALL TM    STATUS3,$3SORT      ARE ENTRIES IN NAME ORDER?
         BNZ   OFFNEWNM            NO, DON'T CHECK FOR DUPLICATES
         CLC   MEMMEMNM,PO_MEM     YES, IDENTICAL MEMBER NAMES?
         BNE   OFFNEWNM            NO, PROCEED WITH OFFLOAD
         MVC   OFFFREC(L'DUPMEMSG),DUPMEMSG
         MVC   OFFFREC+20(8),0(4)  NOTIFY USER OF DUPLICATE MEMBER
         LA    R1,OFFFREC
         LA    R0,L'DUPMEMSG
         TPUT  (1),(0),R           LINE MODE I/O SHOULD GET NOTICED
         B     OFFNXTMM            GO GET NEXT MEMBER TO PROCESS
         SPACE
OFFNEWNM MVI   OFFFREC,C' '        BLANK THE CONTROL STATEMENT RECORD
         MVC   OFFFREC+1(255),OFFFREC
         MVC   OFFFREC(L'ADDPREF),ADDPREF
         MVC   OFFFREC+L'ADDPREF(8),PO_MEM
         LA    R1,OFFFREC+L'ADDPREF+8
OFFTRLP1 BCTR  R1,0                BACK UP ONE BYTE
         CLI   0(R1),C' '          TRAILING BLANK?
         BE    OFFTRLP1            YES
         BAS   R14,OFFDATA         APPEND ANY RELEVANT USER DATA
         BAS   R14,MEMSTMT         OUTPUT THE ADD CONTROL STATEMENT
OFFCALL2 MVC   $MEMBER,PO_MEM      SUPPLY THE MEMBER NAME TO PHASE 2
         ST    R5,CALLPARM         SAVE THE OUTPUT DCB ADDRESS
         LA    R15,OFFFREC+80      POINT TO EIGHTY BLANKS
         ST    R15,CALLPARM+4      PASS IT TO PHASE 2
         LH    R15,DCBLRECL        GET THE OUTPUT RECORD LENGTH
         ST    R15,CALLPARM+8      PASS IT TO PHASE 2
         OI    STATUS8,$8_S        RETURN HERE IF BLDL ERROR
         XC    MSGDSN,MSGDSN       $8_S SET JUST FOR BLDL ERROR CONTROL
         L     R15,=A(REVIEW2)     GET ADDRESS OF PHASE 2
         BASR  R14,R15             CALL REVIEW PHASE 2
         TM    STATUS,STABEND      DCB ABEND OCCURRED?
         BO    OFFABNDX            YES, DCB IS ALREADY CLOSED
         MVC   OFFLDPRV,PO_MEM     SAVE LATEST OFFLOADED MEMBER'S STUFF
         LH    R15,RC              GET BLDL RETURN CODE
         LTR   R15,R15             WAS THE MEMBER FOUND?
         BZ    OFFGOTNM            YES, CONTINUE
         TM    STATUS13,$13COMP    COMPRESS REQUESTED?
         BO    OFFATTN             YES, STOP WITHOUT LINE MODE TPUT
         XC    OFFLDPRV,OFFLDPRV   INVALIDATE PREVIOUS MEMBER DETAILS
         MVI   OFFFREC,C' '        BLANK THE CONTROL STATEMENT RECORD
         MVC   OFFFREC+1(255),OFFFREC
         MVC   OFFFREC(L'BDBLDMSG),BDBLDMSG
         MVC   OFFFREC+L'BDBLDMSG(8),PO_MEM
         LA    R1,OFFFREC
         LA    R0,L'BDBLDMSG+8
         STH   R0,OFFVREC          UPDATE RDW
         TPUT  (1),(0),R           LINE MODE I/O SHOULD GET NOTICED
         BAS   R14,OFFSTMT         SUPPLY DUMMY DATA FOR IEBUPDTE
         B     OFFNXTMM
OFFGOTNM TM    STATUS13,$13COMP    COMPRESS REQUESTED?
         BO    OFSHOSTO            YES, OUTPUT COMPLETE STOW DATA
         TM    DS1RECFM,DCBRECU    RECFM=U?
         BNO   OFFNXTMM            NO, MEMBER CAN'T BE A LOAD MODULE
OFSHOSTO IC    R1,BLDLINDC
         LA    R0,31
         NR    R1,R0               GET THE USER DATA HALFWORD COUNT
         SLA   R1,1                GET THE USER DATA BYTE COUNT
         MVI   OFFFREC,C' '        BLANK THE CONTROL STATEMENT RECORD
         MVC   OFFFREC+1(255),OFFFREC
         MVC   OFFFREC(L'STOWPREF),STOWPREF
         LA    R15,OFFFREC+L'STOWPREF
         EX    R1,OFFLDSTW         SAVE STOW DATA
         BAS   R14,OFFSTMT         WRITE STOW DATA
OFFNXTMM MVC   MEMBRPRV,PO_MEM     SAVE THIS MEMBER'S DETAILS
OFFNXTAL LA    R4,PO_NXT           POINT TO NEXT INTERNAL ENTRY
         B     OFFMEMLP            PROCESS THE NEXT DIRECTORY ENTRY
OFFLDSTW MVC   0(0,R15),BLDLINDC   <<< EXECUTED >>>
         SPACE
OFFENDUP TM    STATUS13,$13COMP    COMPRESS REQUESTED?
         BO    OFFATTN             YES, LEAVE INTERRUPT PENDING
         NI    STATUS4,255-$4ATTN  RESET ATTENTION FLAG
OFFATTN  MVI   OFFFREC,C' '        BLANK THE CONTROL STATEMENT RECORD
         MVC   OFFFREC+1(255),OFFFREC
         MVC   OFFFREC(L'ENDUPREF),ENDUPREF
         TIME  DEC
         ST    R0,DOUBLE           SHOW THE CURRENT TIME (HH:MM)
         UNPK  OFFFREC+L'ENDUPREF+1(3),DOUBLE(2)     HH
         MVI   OFFFREC+L'ENDUPREF+3,C':'
         UNPK  OFFFREC+L'ENDUPREF+4(3),DOUBLE+1(2)   MM
         MVC   OFFFREC+L'ENDUPREF+6(3),=C' ON'
         LR    R6,R4               SAVE IDRDATE WORK REGISTERS
         LR    R7,R5
         LR    R4,R1               COPY THE CURRENT DATE
         L     R15,=A(IDRDATE)     SHOW THE CURRENT DATE (YY-MM-DD)
         BASR  R14,R15
         LR    R4,R6               RESTORE IDRDATE WORK REGISTERS
         LR    R5,R7
         MVC   OFFFREC+L'ENDUPREF+10(8),DOUBLE
         LA    R1,OFFFREC+L'ENDUPREF+18
         BAS   R14,OFFDATAL        UPDATE RDW
         L     R0,OFFMEMCT
         CVD   R0,DOUBLE           GET TOTAL OFFLOADED MEMBER COUNT
         LA    R15,EUPSTMT         POINT TO ROUTINE ENTRY POINT
         TM    STATUS13,$13COMP    COMPRESS REQUESTED?
         BO    OFFFINAL            YES, LEAVE INTERRUPT PENDING
         LA    R15,OFFSTMT         POINT TO ROUTINE ENTRY POINT
         TM    STATUS4,$4ATTN      ATTENTION INTERRUPT?
         BZ    OFFFINAL            NO, CONTINUE
         MVC   OFFFREC+9(5),=C'*INT*'  YES, FLAG INTERRUPTION
OFFFINAL BASR  R14,R15             OUTPUT THE ENDUP CONTROL STATEMENT
         MVI   CLOSED,X'80'        CLOSE THE OUTPUT DCB
         CLOSE ((R5)),MF=(E,CLOSED)
         FREEPOOL (R5)             FREE BUFFERS
OFFABNDX NI    MODE,255-MD_OFFLD   NO LONGER IN OFFLOAD MODE
         NI    STATUS3,255-$3UPDTE CLEAN UP STATUS3
         LA    R0,$OFFWKLN
         LR    R1,R13              POINT TO DYNAMIC AREA TO BE FREED
         L     R13,4(,R13)         POINT TO PREVIOUS SAVE AREA
         OI    11(R13),X'01'       INVALIDATE FORWARD POINTER
         FREEMAIN R,LV=(0),A=(1)   FREE @OFFLDWK
         L     R14,12(,R13)        LOAD RETURN ADDRESS
         LM    R0,R12,20(R13)      RESTORE OTHER REGISTERS
         BR    R14                 RETURN WITH FREEMAIN RETURN CODE
         SPACE
         SPACE
OFFALIAS TM    PO_IND,X'80'        ALIAS MEMBER?
         BZR   R14                 NO, PROCESS AS USUAL
         TM    STATUS3,$3TTR       ARE ENTRIES IN TTR ORDER?
         BZR   R14                 NO, PROCESS ALIAS AS REAL MEMBER
         CLC   OFFCNTTR,PO_CON     YES, IS THIS ALIAS OF OFFLOADED MEM?
         BNE   OFFORFAN            NO, CHECK FOR ORPHAN ALIAS
         MVI   OFFFREC,C' '        BLANK THE CONTROL STATEMENT RECORD
         MVC   OFFFREC+1(255),OFFFREC
         MVC   OFFFREC(L'ALIASPRF),ALIASPRF
         MVC   OFFFREC+L'ALIASPRF(8),0(R4)
         LA    R0,L'ALIASPRF+8+4
         STH   R0,OFFVREC          SET THE RDW
         BAS   R14,MEMSTMT         OUTPUT THE ALIAS CONTROL STATEMENT
         TM    STATUS13,$13COMP    COMPRESS REQUESTED?
         BO    OFFCALL2            YES, GET DIRECTORY ENTRY USER DATA
         TM    DS1RECFM,DCBRECU    RECFM=U?
         BO    OFFCALL2            YES, GET DIRECTORY ENTRY USER DATA
         B     OFFNXTAL            ALIAS SUCCESSFULLY PROCESSED
OFFORFAN CLC   MEMCNTTR,PO_CON     IS THIS AN ALIAS OF CURRENT MEMBER?
         BE    OFFNXTAL            YES, SO IT IS NOT AN ORPHAN
         TM    STATUS13,$13COMP    COMPRESS REQUESTED?
         BO    OFFABORT            YES, ABORT THE PROCESS
         MVC   OFFFREC(L'ORPHNMSG),ORPHNMSG
         MVC   OFFFREC+16(8),0(4)  NOTIFY USER OF ORPHAN ALIAS
         LA    R1,OFFFREC
         LA    R0,L'ORPHNMSG
         TPUT  (1),(0),R           LINE MODE I/O SHOULD GET NOTICED
         B     OFFNXTAL            ALIAS SUCCESSFULLY IGNORED
OFFABORT MVC   MSG+2(37),=CL37'ABORTED - 12345678 IS AN ORPHAN ALIAS'
         MVC   MSG+12(8),0(R4)     SUPPLY NAME OF ORPHAN ALIAS
         LA    R0,37
         STH   R0,MSG              SET MESSAGE LENGTH
         MVI   RC+1,4              SET NON-ZERO RETURN CODE
         B     OFFENDUP            GO STOP THE WHOLE SHOW
         SPACE
         SPACE
OFFDATA  TM    STATUS13,$13COMP    OFFLOAD FOR COMPRESS?
         BOR   R14                 YES, NO USER DATA ON ./ ADD
         TM    PO_FLG,$POSSI1      AN SSI INTERNAL ENTRY?
         BNO   OFFNTSSI            NO
         MVC   1(5,R1),=C',SSI='   YES
         UNPK  6(9,R1),PO_PTR(5)   SUPPLY 8 HEX SSI DIGITS
         TR    6(8,R1),HEXO-240
         MVI   14(R1),C' '         ERASE GARBAGE
         LA    R1,14(,R1)          POINT PAST END OF RECORD DATA
         B     OFFDATAL            UPDATE RDW FOR VARIABLE LENGTHS
OFFNTSSI LA    R1,1(,R1)           POINT TO FIRST BLANK
         TM    PO_FLG,$POSPF       AN SPF STATISTICS INTERNAL ENTRY?
         BNO   OFFDATAL            NO
         ICM   R1,15,PO_PTR        YES, POINT TO EXTENSION
         USING PX_SECT,R1
         SR    R0,R0
         IC    R0,PX_VER                  MODIFICATION VERSION
         CVD   R0,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  OFFFREC+21(2),DOUBLE+6(2)
         IC    R0,PX_LVL                  MODIFICATION LEVEL
         CVD   R0,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  OFFFREC+23(2),DOUBLE+6(2)
         MVI   OFFFREC+25,C'-'
         UNPK  OFFFREC+26(5),PX_CRE+1(3)      CREATION DATE
         MVI   OFFFREC+31,C'-'
         UNPK  OFFFREC+32(5),PX_CHA+1(3)  MODIFICATION DATE
         MVI   OFFFREC+37,C'-'
         UNPK  OFFFREC+38(5),PX_CHA+4(3)  MODIFICATION TIME (HHMM)
         MVI   OFFFREC+42,C'-'
         ICM   R0,15,PX_SIZE                   CURRENT SIZE
         CVD   R0,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  OFFFREC+43(5),DOUBLE+5(3)
         MVI   OFFFREC+48,C'-'
         ICM   R0,15,PX_INIT                   INITIAL SIZE
         CVD   R0,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  OFFFREC+49(5),DOUBLE+5(3)
         MVI   OFFFREC+54,C'-'
         ICM   R0,15,PX_MODS                  MODIFIED COUNT
         CVD   R0,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  OFFFREC+55(5),DOUBLE+5(3)
         MVI   OFFFREC+60,C'-'
         MVC   OFFFREC+61(8),PX_USER         MODIFYING USERID
         UNPK  OFFFREC+69(1),PX_CHA+6(1)
         MVC   OFFFREC+70(1),PX_CHA+6
         OC    OFFFREC+69(2),=C'00'       MODIFICATION TIME (SS)
         CLI   OFFFREC+69,C'9'     VALID DECIMAL?
         BNH   *+10                FIRST DIGIT IS
         MVC   OFFFREC+69(2),=C'00'
         CLI   OFFFREC+70,C'9'     VALID DECIMAL?
         BNH   *+10                SECOND DIGIT IS
         MVC   OFFFREC+69(2),=C'00'
         DROP  R1                  PX_SECT
         LA    R1,OFFFREC+69
OFFDATAL LA    R0,OFFVREC          POINT TO START OF RECORD
         SR    R1,R0               GET DATA BYTE COUNT
         STH   R1,OFFVREC          SUPPLY RDW
         BR    R14
         DROP  R4                  PO_SECT
         SPACE
         SPACE
*         THE PROGRESS STATUS REPORTING IS BASED ON THE NUMBER OF
*         MEMBERS PROCESSED.  FOR A SMALL NUMBER OF MEMBERS THE
*         WHOLE PROCESS SHOULD BE SO QUICK THAT PROGRESS REPORTS
*         ARE NOT NECESARY.  REVOFFLD WILL REPORT IN THE MESSAGE
*         AREA EACH TIME THE PROCESSED MEMBER COUNT REACHES A
*         MULTIPLE OF 1000.  FURTHER, FOR COMPRESS REQUESTS, THE
*         TOTAL UNLOADED MEMBER COUNT WILL BE REPORTED.  COUNTS
*         LESS THAN 256 WILL NOT BE SHOWN.  NOTE THAT REVLPDS
*         REPORTS THE NUMBER OF MEMBERS RELOADED EACH TIME THE
*         PROCESSED MEMBER COUNT REACHES A MULTIPLE OF 256.
         SPACE
MEMSTMT  LA    R0,1
         A     R0,OFFMEMCT         INCREMENT MEMBER COUNT
         ST    R0,OFFMEMCT
         CVD   R0,DOUBLE
         LA    R0,X'1C'
         CH    R0,DOUBLE+6         DONE A MULTIPLE OF 1000?
         BNE   OFFSTMT             NO
         MVI   DOUBLE+7,X'0C'      YES, RESTORE THE ROUND NUMBER
EUPSTMT  ICM   R0,7,OFFMEMCT       MEMBER COUNT WORTH REPORTING?
         BZ    OFFSTMT             NO, LESS THAN 256 SO TOO SMALL
         ST    R14,OFFRETSV        SAVE RETURN ADDRESS
         MVC   MSG+2(OFFCTMSL),OFFCTMSG
         ED    MSG+2(10),DOUBLE+4
         LA    R0,OFFCTMSL
         STH   R0,MSG              SET MESSAGE LENGTH
         OI    STATUS10,$10CDL     PREPARE FOR OUTPUT-ONLY TERMINAL I/O
         L     R15,=A(REVCOMM)     POINT TO TERMINAL I/O ROUTINE
         BASR  R14,R15             TELL USER ABOUT CREATION ATTEMPT
         L     R14,OFFRETSV        RESTORE RETURN ADDRESS
OFFSTMT  TM    STATUS3,$3UPDTE     IEBUPDTE CONTROL CARDS REQUIRED?
         BZR   R14                 NO, RETURN WITHOUT ACTION
         ST    R14,OFFRETSV        YES, SAVE RETURN ADDRESS
         LR    R1,R5               POINT TO DCB
         LA    R0,OFFVREC
         TM    DCBRECFM,X'80'      FIXED LENGTH RECORDS?
         BZ    OFFSTMTX            NO, MUST BE VARIABLE
         LA    R0,OFFFREC          YES
         LA    R15,256
         CH    R15,DCBBLKSI        RECORD LONGER THAN 256?
         BL    OFFLDBIG            YES
OFFSTMTX XASAM24
         PUT   (1),(0)             WRITE A RECORD
         XASAM31
         B     MEMSTMTX
OFFLDBIG LH    R15,DCBBLKSI        YES, LOAD IT
         LA    R0,7(,R15)
         SRL   R0,3
         SLL   R0,3                ROUND UP TO DOUBLEWORD BOUNDARY
         LR    R6,R0               COPY SIZE
         MVI   GETMNTRC,57         TRACK GETMAIN IN CASE OF FAILURE
         GETSTOR RU,LV=(0),LOC=(31,64)
         LR    R7,R1               COPY ITS ADDRESS
         LR    R0,R7               TARGET ADDRESS
         LR    R1,R6               TARGET SIZE
         LA    R14,OFFFREC         SOURCE ADDRESS
         LA    R15,256             SOURCE SIZE
         ICM   R15,8,OFFFREC+2     BLANK PAD CHARACTER
         MVCL  R0,R14              CREATE FULL SIZE OUTPUT RECORD
         LR    R1,R5               POINT TO DCB
         LR    R0,R7               POINT TO RECORD
         XASAM24
         PUT   (1),(0)             WRITE A RECORD
         XASAM31
         LR    R0,R6               LOAD RECORD AREA LENGTH
         LR    R1,R7               LOAD RECORD AREA ADDRESS
         FREEMAIN RU,LV=(0),A=(1)  FREE TEMPORARY RECORD AREA
MEMSTMTX TM    STATUS,STABEND      DCB ABEND OCCURRED?
         BO    OFFABNDX            YES, DCB IS ALREADY CLOSED
         L     R14,OFFRETSV        RESTORE RETURN ADDRESS
         BR    R14
         SPACE
         DROP  R5                  IHADCB
         SPACE
         USING IHADCB,R1
         SPACE
OFFOPENX LH    R5,DCBBLKSI         GET OUTPUT BLOCK SIZE
         LTR   R5,R5               IS IT ZERO?
         BPR   R14                 NO, RETURN IF POSITIVE
         LH    R5,OFFDVMAX         YES, GET MAXIMUM BLOCK SIZE
         STH   R5,DCBBLKSI         SET IT FOR USE
         TM    DCBRECFM,DCBRECV    FIXED-LENGTH RECORDS?
         BOR   R14                 NO, CAN USE MAXIMUM SO RETURN
         LH    R0,DCBLRECL         YES, GET RECORD LENGTH
         SR    R4,R4               PREPARE FOR DIVIDE
         DR    R4,R0               GET MAXIMUM BLOCKING FACTOR
         MR    R4,R0               GET CORRESPONDING BLOCK SIZE
         STH   R5,DCBBLKSI         USE IT
         BR    R14                 RETURN
         SPACE
         DROP  R1                  IHADCB
         SPACE
         DROP  R11,R3,R13          REVOFFLD, @PDSAREA, @OFFLDWK
         SPACE
OFFABEND MVC   ABENDWRD,0(R1)      COPY ABEND AND REASON CODES
         OI    ABENDWRD+1,X'0F'    GET ABEND CODE READY FOR UNPACK
         OI    STATUS,STABEND      INDICATE DCB ABEND OCCURRED
         TM    3(R1),B'00001110'   ANY PROCESSING ALLOWED?
         BZR   R14                 NO, PROBABLY EOV DURING CLOSE
         MVI   3(R1),4             YES, IGNORE THE ABEND
         BR    R14
         SPACE
         TITLE '  R E V O F F L D   -   S T A T I C   A R E A  '
HEXO     DC    C'0123456789ABCDEF' HEXADECIMAL DIGIT TRANSLATE TABLE
OFFEXLS2 DC    X'05',AL3(OFFOPENX) DCB OPEN EXIT
OFFEXLST DC    X'91',AL3(OFFABEND) DCB ABEND EXIT
         PRINT NOGEN
         SPACE
*      BUFNO=1 IS USED TO MINIMIZE THE CHANCE OF E-O-V DURING CLOSE
*      WHICH IS UNRECOVERABLE.  THE MORE BUFFERS CLOSE HAS TO WRITE
*      THE GREATER THE CHANCE THAT CLOSE WILL ENCOUNTER END-OF-VOLUME.
*
*      END-OF-VOLUME DURING PUT CAN BE IGNORED BY THE ABEND EXIT,
*      THUS ALLOWING THE REVIEW SESSION TO CONTINUE.
STOFFDCB DCB   DSORG=PS,MACRF=PM,DDNAME=SYSUT2,EXLST=OFFEXLST,BUFNO=1
OFFDCBLN EQU   *-STOFFDCB
         SPACE
         PRINT GEN
ADDPREF  DC    C'./ ADD NAME='
ALIASPRF DC    C'./ ALIAS NAME='
ENDUPREF DC    C'./ ENDUP       "REVIEW" PDS MEMBER OFFLOAD AT'
STOWPREF DC    C'./ STOW DATA='
BDBLDMSG DC    C'** BLDL FAILED DURING OFFLOAD FOR MEMBER '
ORPHNMSG DC    C'** ORPHAN ALIAS ???????? NOT OFFLOADED'
DUPMEMSG DC    C'** DUPLICATE MEMBER ???????? NOT OFFLOADED'
OFFTMSTP DC    X'4021207A20204020204B202020'
OFFCTMSG DC    X'40206B2020206B202120',C' MEMBERS UNLOADED'
OFFCTMSL EQU   *-OFFCTMSG  OFFCTMSG MATCHES THE REVLPDS STATUS MESSAGE
         SPACE
         DC    0D'0'
         LTORG
         SPACE
         DC    0D'0'               END OF CSECT
         TITLE '  R E V O F F L D   -   D Y N A M I C   A R E A  '
@OFFLDWK DSECT
OFFSAVE  DS    18F
OFFDVTYP DS    2F                  OUTPUT FROM DEVTYPE
OFFDVMAX EQU   *-2,2               MAXIMUM BLOCK SIZE FOR DEVICE
OFFPRVWA DS    0XL32               OFFLOAD PREVIOUS MEMBER WORK AREA
OFFLDPRV DS    0XL12               INTERNAL ENTRY COMMON BASE SECTION
         DS    CL8                 MEMBER NAME
OFFCNTTR DS    XL4                 CONCAT NUMBER AND START TTR
MEMBRPRV DS    0XL12               INTERNAL ENTRY COMMON BASE SECTION
MEMMEMNM DS    CL8                 MEMBER NAME
MEMCNTTR DS    XL4                 CONCAT NUMBER AND START TTR
OFFRETSV DS    F                   RETURN ADDRESS SAVE AREA
OFFMEMCT DS    F                   OFFLOADED MEMBER COUNT
OFFDCB   DS    XL(OFFDCBLN)        OFFLOAD OUTPUT DCB
OFFVREC  DS    F                   VARIABLE LENGTH RECORD RDW
OFFFREC  DS    CL256               IEBUPDTE-TYPE CONTROL STATEMENT
         DS    0D                  END OF DSECT
$OFFWKLN EQU   *-@OFFLDWK
         TITLE '  R E V S R C H  '
**********************************************************************
*                                                          *         *
*         REVIEW PDS MEMBER GLOBAL FIND PROCESSOR          *  GP@FT  *
*                                                          *  07/96  *
**********************************************************************
         SPACE
**********************************************************************
*                                                                    *
*        THIS ROUTINE PROVIDES THE CAPABILITY OF SEARCHING PDS       *
*        MEMBERS FOR SELECTED CHARACTER STRINGS.  MORE THAN ONE      *
*        MEMBER CAN BE SEARCHED IN ONE INVOCATION.  MEMBERS          *
*        CONTAINING THE SPECIFIED DATA ARE HIGHLIGHTED IN THE        *
*        MEMBER LIST, AND BECOME THE MEMBERS SELECTED FOR OFFLOAD    *
*        IF AN OFFLOAD OPERATION WERE TO BE STARTED.                 *
*                                                                    *
*        THIS ROUTINE IS ALSO CALLED WHEN REGULAR FILES IN AN        *
*        HFS DIRECTORY ARE TO BE SEARCHED.  IN THIS CASE REVSRCH     *
*        MERELY DISPLAYS THE SEARCH SPECIFICATION DATA ENTRY SCREEN  *
*        AND PARSES AND PROCESSES THE INPUT BEFORE EXITING BACK TO   *
*        REVUNIX WHICH WILL DRIVE THE ACTUAL SEARCH.                 *
*                                                                    *
*        A PARAMETER LIST CAN NOW BE PASSED TO REVSRCH SO THAT       *
*        REVSRCH CAN PROCESS INTERNAL ENTRIES OF DIFFERENT FORMATS.  *
*        REVPDS AND REVPDSE USE THE PARAMETER LIST TO SPECIFY        *
*        THE OFFSETS OF THE TAG FLAG, LENGTH INDICATOR, AND MEMBER   *
*        NAME FIELDS.  REVUNIX DOES NOT SUPPLY A PARAMETER LIST      *
*        BECAUSE CONTROL IS RETURNED TO REVUNIX BEFORE ANY SEARCH    *
*        (AND THEREFORE ANY INTERNAL ENTRY PROCESSING) TAKES PLACE.  *
*                                                                    *
*        REVSRCH IS STILL NOT FULLY GENERALISED.  THE SCHHLDNM       *
*        AND SCHPRVMM FIELDS USED TO REDUCE SEARCHING OF ALIASES     *
*        WHEN THE RESULT IS ALREADY KNOWN ARE ONLY EXPLOITED FOR     *
*        SEARCHES INITIATED FROM REVPDS.  REVPDSE DOES NOT GET       *
*        CONTROL FOR CONCATENATED FILES SO DUPLICATE MEMBER NAMES    *
*        SHOULD NOT BE AN ISSUE.  THESE FIELDS ARE LOADED WITH DATA  *
*        FROM HARD-CODED OFFSETS INSTEAD OF USING PARAMETER VALUES,  *
*        AND ARE ONLY EXAMINED FOR REVPDS CALLS.                     *
*                                                                    *
**********************************************************************
         EJECT
**********************************************************************
*                                                                    *
* REGISTERS ON ENTRY: R9 -> @DATA                                    *
*                     R13-> SAVE AREA                                *
*                     R14-> RETURN ADDRESS                           *
*                     R15-> REVSRCH                                  *
*                     R1 -> PARAMETER LIST:                          *
*                           -> FIRST ENTRY                           *
*                           -> -> LAST ENTRY                         *
*                           TAG FLAG OFFSET                          *
*                           LENGTH INDICATOR OFFSET (255 => $POSIZ)  *
*                           MEMBER NAME OFFSET                       *
*                                                                    *
* DURING PROCESSING:  R13-> @SCHWORK (LOCAL GETMAINED AREA)          *
*                                                                    *
* RETURN CODES:       R15 = 0  PROCESSING COMPLETE                   *
*                                                                    *
**********************************************************************
         SPACE
REVSRCH  RSECT
         ENTRY KEYBDTST
REVSRCH  AMODE 31
         B     @SEARCH-*(,R15)
         DC    AL1(7),CL7'REVSRCH'
@SEARCH  STM   R14,R12,12(R13)
         LR    R11,R15             SET BASE
         LR    R2,R1               GET PARAMETER LIST
         USING REVSRCH,R11
         LA    R0,$SCHWKLN
         MVI   GETMNTRC,58         TRACK GETMAIN IN CASE OF FAILURE
         GETMAIN R,LV=(0)          GET MAIN STORAGE
         ST    R1,8(,R13)          CHAIN SAVE AREAS
         ST    R13,4(,R1)
         LR    R13,R1              POINT TO GETMAINED AREA
         USING @SCHWORK,R13
         MVI   SCHFLAG1,0          RESET FLAG BYTE
         NI    STATUS3,255-$3UPDTE CLEAN UP STATUS3
         MVC   SRCHMCNT,TAGCOUNT   COPY TAGGED MEMBER COUNT
         MVC   SRCHFCNT,SRCHMCNT   PRESERVE STATUS IF SEARCH CANCELLED
         LA    R0,2048
         SLL   R0,1                GET 4096
         TM    $UCBAD,$HFSIO       SEARCHING HFS FILES?
         BO    RECSIZOK            YES, REVUNIX PASSES NO PARAMETERS
         LH    R0,=H'32760'
         TM    STATUS17,$17SCH     DATA SET SEARCH SCAN SET UP REQUEST?
         BO    RECSIZOK            YES, REVLEVL PASSES NO PARAMETERS
*                                  NO, ACCESS PARAMETER LIST
         MVC   SRCHMEM1,0(R2)      COPY ADDRESS OF FIRST INTERNAL ENTRY
         L     R1,4(,R2)           POINT TO LAST INTERNAL ENTRY POINTER
         MVC   SRCHLAST,0(R1)      COPY ADDRESS OF LAST INTERNAL ENTRY
         MVC   SRCHTGOF,8(R2)      COPY TAG FLAG OFFSET INTO ENTRY
         MVC   SRCHLNOF,12(R2)     COPY LENGTH FIELD OFFSET INTO ENTRY
         MVC   SRCHNMOF,16(R2)     COPY MEMBER NAME OFFSET INTO ENTRY
*                                  END OF PARAMETER LIST REFERENCE
         TM    DS1RECFM,DCBRECF    USING RDWS?
         BO    SRCHRDW2            NO
         TM    DS1RECFM,DCBRECV    REALLY?
         BNO   SRCHRDW2            NO
         TM    STATUS16,$16RDW     DISPLAYING RDWS?
         BO    SRCHRDW2            YES
         OI    SCHFLAG1,$SCHRDW    NO, NEED TO ADJUST COLUMN NUMBERS
         CLI   FINDCOL2,X'7F'      ANY SPECIFIED?
         BE    SRCHRDW2            NO
         L     R0,FINDCOL1         YES
         SH    R0,=H'4'
         BM    SRCHRDW1
         ST    R0,FINDCOL1
SRCHRDW1 L     R0,FINDCOL2
         SH    R0,=H'4'
         BNP   SRCHRDW2
         ST    R0,FINDCOL2
SRCHRDW2 OC    RECSIZE,RECSIZE     RECSIZE INITIALIZED?
         BNZ   RECSIZED            YES
         LH    R0,DS1BLKL          GET BLKSIZE FROM VTOC
         TM    DS1RECFM,DCBRECU    UNDEFINED RECORD FORMAT?
         BNM   RECSIZOK            YES, USE BLKSIZE
         LH    R0,DS1LRECL         GET LRECL FROM VTOC
         TM    SCHFLAG1,$SCHRDW    NEED TO ADJUST FOR HIDDEN RDWS?
         BNO   RECSIZOK            NO
         SH    R0,=H'4'            YES, REDUCE COLUMN COUNT ACCORDINGLY
RECSIZOK ST    R0,RECSIZE          SET MAXIMUM DISPLAY COLUMN NUMBER
RECSIZED MVC   SRCHMMSK,SRCHSTAR   INITIALIZE MEMBER NAME PATTERN MASK
         TM    STATUS17,$17S34     DATA SET SEARCH SCAN IN PROGRESS?
         BO    SRCHINDN            YES, START SCANNING THIS DATA SET
         SPACE
         OI    STATUS10,$10PSP     PRIMARY SCREEN SIZE PROMPT PANEL
         L     R0,SCREENBF         POINT TO PRIMARY SCREEN BUFFER
         L     R1,SCREENSZ         GET THE SCREEN SIZE
         LA    R15,C' '
         SLL   R15,24              SET PAD CHARACTER AND ZERO LENGTH
         MVCL  R0,R14              BLANK OUT PRIMARY BUFFER
         L     R0,SHADOWBF         POINT TO THE SHADOW BUFFER
         L     R1,SCREENSZ         GET THE SCREEN SIZE
         SR    R15,R15             ZERO SOURCE LENGTH AND PAD
         MVCL  R0,R14              ZERO OUT SHADOW BUFFER
         MVC   REVPOS+1(2),SCHBAD2 POSITION CURSOR FOR SEARCH DATA
         L     R4,SCREENBF         POINT TO PRIMARY SCREEN BUFFER
         L     R3,SHADOWBF         POINT TO THE SHADOW BUFFER
*  LINE 1
         MVI   0(R3),X'07'         SHOW HEADING IN WHITE
         MVC   0(6,R4),SCHL1A      LOAD PROMPT PANEL TEXT
         MVC   75(5,R4),SCHL1C     SHOW RELEASE NUMBER
         MVC   27(26,R4),SCHL1B+4
         TM    STATUS17,$17SCH     DATA SET SEARCH SET UP?
         BO    SRCHDSOK            YES, HEADING NOW SET
         MVC   25(30,R4),SCHL1B
         TM    $UCBAD,$HFSIO       SEARCHING HFS FILES?
         BNO   SRCHHDOK            NO, STICK WITH 'PDS' IN THE HEADING
         MVC   24(4,R4),=C'UNIX'   YES, CHANGE 'PDS' TO 'UNIX'
*  LINE 3
SRCHHDOK LH    R0,$DSNAME          GET DATA SET NAME LENGTH
         LTR   R0,R0               ANYTHING PRESENT?
         BNP   SRCHDSOK            NO, SO NOTHING TO SHOW
         SRA   R0,1                YES, HALVE THE LENGTH
         LA    R1,40
         SR    R1,R0
         LA    R1,2*80(R1,R4)
         MVC   0(44,R1),$DSNAME+2  SHOW THE DATA SET NAME
*  LINE 5
SRCHDSOK MVI   3*80(R4),FLDOUTLO
         MVC   4*80(SCHL5AL,R4),SCHL5A
         MVI   4*80(R3),X'05'      TURQUOISE
         MVI   4*80+12(R3),X'06'   YELLOW FOR ARROW
         MVI   4*80+16(R3),X'32'   RED UNDERSCORE FOR INPUT
         MVI   4*80+18(R3),X'04'   GREEN FOR OPTIONS
         MVC   4*80+54(18,R4),SCHL5B
         MVI   4*80+54(R3),X'01'   BLUE FOR LEGEND
*  LINE 6
         MVC   5*80+19(23,R4),SCHL6A
         MVI   5*80+19(R3),X'04'   GREEN FOR OPTIONS
         MVC   5*80+54(16,R4),SCHL6B
         MVI   5*80+54(R3),X'01'   BLUE FOR LEGEND
*  LINE 7
         MVC   6*80+19(23,R4),SCHL7
         MVI   6*80+19(R3),X'04'   GREEN FOR OPTIONS
*  LINE 8
         MVC   7*80+19(SCHL8L,R4),SCHL8
         MVI   7*80+44(R3),X'01'   BLUE FOR LEGEND
*  LINE 10
         MVC   9*80(16,R4),SCHL10
         XC    9*80+16(64,R4),9*80+16(R4)
         MVI   10*80(R4),FLDOUTLO
         MVI   9*80(R3),X'05'      TURQUOISE
         MVI   9*80+12(R3),X'06'   YELLOW FOR ARROW
         MVI   9*80+16(R3),X'32'   RED UNDERSCORE FOR INPUT
         MVC   9*80+17(63,R3),9*80+16(R3)
*  LINE 13
         MVC   12*80(SCHL13L,R4),SCHL13
         MVC   12*80+45(SCHL13L,R4),SCHL13
         MVI   12*80+68(R4),C'2'   SHOW CORRECT COLUMN SPEC NUMBER
         MVI   12*80(R3),X'05'     TURQUOISE
         MVI   12*80+25(R3),X'06'  YELLOW FOR ARROW
         MVI   12*80+29(R3),X'32'  RED UNDERSCORE FOR INPUT
         MVC   12*80+30(4,R3),12*80+29(R3)
         MVC   12*80+45(SCHL13L,R3),12*80(R3)
*  LINE 16
         MVC   15*80(SCHL16L,R4),SCHL16
         MVI   15*80(R3),X'05'     TURQUOISE
         MVI   15*80+16(R3),X'06'  YELLOW FOR ARROW
         MVI   15*80+20(R3),X'32'  RED UNDERSCORE FOR INPUT
         MVI   15*80+22(R3),X'04'  GREEN FOR OPTIONS
         TM    STATUS17,$17SCH     DATA SET SEARCH SET UP?
         BO    SCHSCROK            YES, SCREEN TEXT NOW LOADED
*  LINE 23
         MVC   22*80(SCHL23UL,R4),SCHL23
         ICM   R0,15,SRCHMCNT      ANY HIGHLIGHTED MEMBERS?
         BZ    SRCHCTOK            NO, LEAVE "ALL" ENTRIES IN TEXT
         CVD   R0,DOUBLE           YES, SHOW THE COUNT
         MVC   22*80+6(8,R4),SRCHED7
         ED    22*80+6(8,R4),DOUBLE+4
SRCHCTOK MVI   22*80+1(R3),X'03'   PINK FOR TAG COUNT
         MVI   22*80+15(R3),X'04'  GREEN FOR COUNT DESCRIPTION
         MVI   18*80(R4),FLDOUTLO  GREEN, NOT WHITE, FOR PROGRESS BAR
         TM    $UCBAD,$HFSIO       SEARCHING UNIX FILES?
         BO    SCHSCROK            YES, SCREEN TEXT NOW LOADED
         MVC   22*80+SCHL23L(SCHL23PL,R4),SCHL23P
*  LINE 19
         MVC   18*80(SCHL19L,R4),SCHL19
         MVI   18*80(R3),X'05'     TURQUOISE
         MVI   18*80+26(R3),X'06'  YELLOW FOR ARROW
         MVI   18*80+30(R3),X'32'  RED UNDERSCORE FOR INPUT
         MVC   18*80+31(7,R3),18*80+30(R3)
         SPACE
SCHSCROK CLI   STRINGL,0           ANY STRING PRESPECIFIED?
         BNE   SCHTYPOK            NO
         LH    R14,STRINGL         GET CURRENT FIND DATA LENGTH CODE
         EX    R14,SRCHTXLD        YES, LOAD IT
         L     R15,SRCHTDYN        POINT TO SEARCH TYPE IN BUFFER
         TM    FINDSW2,FPIC        PICTURE STRING SEARCH?
         BO    SRCHTPIC            YES
         TM    FINDSW2,FUOL        CASE INSENSITIVE SEARCH?
         BO    SRCHTXOK            YES, PRIMED VALUE IS CORRECT
         MVI   4*80+16(R4),C'3'    NO, MAKE IT 'FINDCHR'
         EX    R14,SRCHTHEX        ANY UNPRINTABLES?
         BZ    SRCHTXOK            NO
         MVI   4*80+16(R4),C'5'    YES, MAKE IT 'FINDHEX'
         LA    R0,1(,R14)          GET SEARCH BYTE COUNT
         LA    R14,STRING          POINT TO SEARCH DATA
         LA    R7,9*80+16(,R4)     POINT TO TEXT IN SCREEN BUFFER
SRCHEXLP UNPK  0(3,R7),0(2,R14)    UNPACK A BYTE
         TR    0(2,R7),HEXS-240    ENSURE HEX DIGIT
         MVI   2(R7),0             CLEAR GARBAGE
         LA    R7,2(,R7)           ADJUST TARGET POINTER
         LA    R14,1(,R14)         ADJUST SOURCE POINTER
         BCT   R0,SRCHEXLP
         B     SRCHTXOK            HEX DIGITS NOW FORMATTED
SRCHTXLD MVC   9*80+16(0,R4),STRING    <<< EXECUTED >>>
SRCHTHEX TRT   9*80+16(0,R4),KEYBDTST  <<< EXECUTED >>>
SRCHTPIC MVI   4*80+16(R4),C'7'    MAKE IT 'FINDPIC'
SRCHTXOK LA    R0,64               GET THE LENGTH TO ADJUST
         TM    FINDSW2,FNOT        FINDNOT THE GO?
         BNO   SCHTYPOK            NO
         IC    R1,4*80+16(,R4)     GET THE SEARCH TYPE CODE
         LA    R1,1(,R1)           ADD 1 FOR 'NOT'
         STC   R1,4*80+16(,R4)     SAVE THE NEW SEARCH TYPE CODE
SCHTYPOK CLI   FINDCOL2,X'7F'      COLUMN RANGE SPECIFIED?
         BE    SRCHCLOK            NO
         L     R1,FINDCOL2         YES, GET END COLUMN
         CVD   R1,DOUBLE           SHOW IT
         OI    DOUBLE+7,X'0F'
         UNPK  12*80+29+45(5,R4),DOUBLE
         LA    R1,1
         A     R1,FINDCOL1         GET START COLUMN
         CVD   R1,DOUBLE           SHOW IT
         OI    DOUBLE+7,X'0F'
         UNPK  12*80+29(5,R4),DOUBLE
SRCHCLOK IC    R1,FINDSW2          SHOW PREFIX/SUFFIX/WORD STATUS
         LA    R0,FWRD
         NR    R1,R0
         LA    R1,X'F0'+1(,R1)
         STC   R1,15*80+20(,R4)
         B     SRCHSCRN            SCREEN FIELDS NOW PRIMED
         SPACE
SRCHINBD L     R4,SCREENBF         POINT TO PRIMARY SCREEN BUFFER
         L     R3,SHADOWBF         POINT TO THE SHADOW BUFFER
         L     R2,=A(LOADFIXM)     POINT TO ERROR MESSAGE
         MVC   2*80+12(LOADFIXL,R4),0(R2)
         MVI   2*80+11(R3),X'22'   REVERSE RED FOR ERROR MESSAGE
         MVC   2*80+12(LOADFIXL+1,R3),2*80+11(R3)
         TM    $UCBAD,$HFSIO       SEARCHING UNIX FILES?
         BO    SRCHSCRN            YES, NO MEMBER MASK
         MVC   SRCHMMSK,SRCHSTAR   INITIALIZE MEMBER NAME PATTERN MASK
         TM    STATUS17,$17SCH     DATA SET SEARCH SCAN SET UP REQUEST?
         BO    SRCHSCRN            YES, NO MEMBER MASK INPUT FIELD
         L     R2,=A(KAPS)         POINT TO TRANSLATE TABLE
         TR    18*80+30(8,R4),0(R2)
         CLC   18*80+30(8,R4),SCHBLNKS
         BNE   SRCHSCRN            NO NEED TO REPLACE ERASED MASK
         MVC   18*80+30(8,R4),SRCHSTAR
         SPACE
SRCHSCRN MVI   REVPOS,SBA          CREATE ORDER TO PLACE CURSOR
         MVI   REVPOS+3,IC
         L     R15,=A(REVCOMM)     POINT TO TERMINAL I/O ROUTINE
         BASR  R14,R15             WRITE SCREEN AND READ REPLY
         TM    STATUS4,$4ATTN      ATTENTION INTERRUPT?
         BO    SRCHEXIT            YES, ABORT THIS REQUEST
         CLI   REPLY,ENTERAID      ENTER KEY?
         BNE   SRCHEXIT            NO, TERMINATE UPDATE IF PF KEY
         SPACE
         MVC   REVPOS+1(2),SCHBAD1 PREPARE FOR BAD SEARCH TYPE
         CLI   4*80+16(R4),C'1'    VALID SEARCH TYPE?
         BL    SRCHINBD            NO, INVALID
         CLI   4*80+16(R4),C'8'    VALID SEARCH TYPE?
         BH    SRCHINBD            NO, INVALID
         SPACE
         MVC   REVPOS+1(2),SCHBAD2 PREPARE FOR BAD SEARCH DATA
         LA    R14,64              GET MAXIMUM DATA INPUT LENGTH
         LA    R15,10*80-1(,R4)    POINT TO LAST POSSIBLE INPUT BYTE
SCHTLNLP CLI   0(R15),0            DATA PRESENT?
         BNE   SCHTLNOK            YES
         BCTR  R15,0               NO, BACK UP A BYTE
         BCT   R14,SCHTLNLP        CONTINUE BACKWARD SCAN
         B     SRCHINBD            NO DATA PRESENT SO INVALID
SCHTLNOK IC    R0,4*80+16(,R4)     GET THE SEARCH TYPE
         BCTR  R0,0                DECREMENT FOR BIT TESTING
         STC   R0,DOUBLE           PUT IT BACK IN STORAGE
         NI    FINDSW2,255-FNOT-FPIC   RESET "FINDNOT" AND "FINDPIC"
         TM    DOUBLE,X'01'        A "FINDNOT" REQUEST?
         BNO   *+8                 NO
         OI    FINDSW2,FNOT        YES, FLAG THIS
         NI    DOUBLE,X'FE'        RESET "NOT" BIT
         XC    STRING,STRING       ERASE OLD STRING
         NI    FINDSW2,255-FUOL    SET CASE SENSITIVE
         BCTR  R14,0               GET DATA LENGTH CODE
         CLI   DOUBLE,X'F2'        A "FINDCHR" TYPE REQUEST?
         BE    SRCHTEXT            YES, LOAD DATA WITHOUT FOLDING
         L     R2,=A(KAPS)         NO, POINT TO TRANSLATE TABLE
         EX    R14,SRCHTRAN        FOLD TO UPPER CASE
         CLI   DOUBLE,X'F4'        A HEXADECIMAL DATA REQUEST?
         BNE   SRCHTEXT            NO, MUST BE "FIND" OR "FINDPIC" TYPE
         MVI   STRINGL,X'FF'       INVALIDATE 'FIND' STRING
         LA    R2,9*80+16(,R4)     POINT TO FIRST DATA BYTE
         LA    R14,1(,R14)         RESTORE LENGTH VALUE
SRCHXLP1 CLI   0(R2),C' '          LEADING BLANK?
         BNE   SRCHCHKX            NO, CHECK FOR HEXADECIMAL
         LA    R2,1(,R2)           YES, POINT PAST IT
         BCT   R14,SRCHXLP1        LOOK FOR NON-BLANK
         B     SRCHINBD            INPUT WAS ALL BLANK BUT NEED DATA
SRCHTRAN TR    9*80+16(0,R4),0(R2)     <<< EXECUTED >>>
SRCHCHKX LR    R15,R2              POINT TO START OF DATA
SRCHXLP2 CLI   0(R2),C'A'          FOUND NON-HEX?
         BL    SRCHXTRL            YES, GO HANDLE TRAILING BLANKS
         CLI   0(R2),C'9'          FOUND NON-HEX?
         BH    SRCHINBD            YES, HOW WAS THAT DONE?
         CLI   0(R2),C'0'          FOUND DECIMAL HEX?
         BNL   SRCHXNUM            YES, PROCEED
         CLI   0(R2),C'F'          FOUND NON-HEX?
         BH    SRCHINBD            YES, INVALID
SRCHXNUM LA    R2,1(,R2)           POINT TO NEXT POSSIBLE DIGIT
         BCT   R14,SRCHXLP2        VALIDATE NEXT HEX DIGIT
SRCHXTRL LR    R3,R2               POINT PAST LAST HEX DIGIT
         LTR   R14,R14             REACHED END OF INPUT FIELD?
         BNP   SRCHXTXT            YES, END OF DIGITS SO GET DATA
SRCHXLP3 CLI   0(R2),C' '          IS TRAILING CHARACTER A BLANK?
         BNE   SRCHINBD            NO, INVALID HEXADECIMAL STRING
         LA    R2,1(,R2)           YES, POINT PAST IT
         BCT   R14,SRCHXLP3        DROP THROUGH TRAILING BLANKS
SRCHXTXT SR    R3,R15              GET COUNT OF HEX SEARCH DATA
         STC   R3,DOUBLE+1
         TM    DOUBLE+1,X'01'      IS IT AN ODD NUMBER OF HEX DIGITS?
         BO    SRCHINBD            YES, NOT A WHOLE NUMBER OF BYTES
         LR    R14,R3              NO, COPY HEX DIGIT COUNT
         BCTR  R14,0               DECREMENT FOR EXECUTE
         L     R2,=A(HEXDATA)      POINT TO TRANSLATE TABLE
         EX    R14,SCHHEXIT        CONVERT TO ZONED HEXADECIMAL
         SRA   R14,1               GET SEARCH DATA LENGTH CODE
         STH   R14,STRINGL         SET SEARCH DATA LENGTH
         LA    R14,STRING          POINT TO TARGET STRING AREA
SRCHXLP4 PACK  0(2,R14),0(3,R15)   PACK A BYTE
         MVI   1(R14),0            ERASE GARBAGE
         LA    R14,1(,R14)         POINT TO NEXT TARGET BYTE
         LA    R15,2(,R15)         POINT TO NEXT HEX DIGIT PAIR
         BCT   R3,SRCHXLP4         PACK NEXT SEARCH BYTE
         B     SRCHCOL1            CONTINUE PARSE
SCHHEXIT TR    0(0,R15),0(R2)          <<< EXECUTED >>>
SRCHTEXT STH   R14,STRINGL         SET SEARCH DATA LENGTH CODE
         EX    R14,SCHSTRNG        LOAD THE NEW DATA STRING
         CLI   DOUBLE,X'F2'        FINDCHR?
         BE    SRCHCOL1            YES
         BH    SRCHFPIC            HANDLE PICTURE STRING SEARCH
         L     R2,=A(TABALPHA)     POINT TO TRANSLATE TABLE
         EX    R14,SRCHTEST        ANY ALPHABETICS?
         BZ    SRCHCOL1            NO, SAME AS FINDCHR FOR SPEED
         OI    FINDSW2,FUOL        SET CASE INSENSITIVE
         B     SRCHCOL1            CONTINUE PARSE
SCHSTRNG MVC   STRING(0),9*80+16(R4)   <<< EXECUTED >>>
SRCHTEST TRT   STRING(0),0(R2)         <<< EXECUTED >>>
SRCHFPIC OI    FINDSW2,FUOL+FPIC   SET FLAGS FOR FINDPIC
         SPACE
SRCHCOL1 MVC   REVPOS+1(2),SCHBAD3 PREPARE FOR BAD FIRST COLUMN
         LA    R2,12*80+29(,R4)    POINT TO FIRST COLUMN INPUT AREA
         XC    FINDCOL1(8),FINDCOL1  RESET SEARCH COLUMN LIMITS
         MVI   FINDCOL2,X'7F'      (INCL. FINDCOL2 LOW BYTES FOR REVED)
         MVI   SMFSBTYP,X'FF'      INVALIDATE SMF RECORD SUBTYPE
         MVI   FINDSW,0            RESET 'FINDSMF'/BACKWARDS ETC. FLAGS
SRCHCOLM SR    R0,R0               CLEAR ACCUMULATOR
         LA    R14,5               GET MAXIMUM DIGIT COUNT
         OC    0(5,R2),SCHBLNKS    FOLD NULLS TO BLANKS
SCHCOLP1 CLI   0(R2),C' '          LEADING BLANK?
         BNE   SRCHCHK#            NO, CHECK FOR NUMERIC
         LA    R2,1(,R2)           YES, POINT PAST IT
         BCT   R14,SCHCOLP1        LOOK FOR NON-BLANK
         B     SCHCOLNL            INPUT WAS ALL BLANK
SRCHCHK# LR    R15,R2              POINT TO START OF NUMBER
SCHCOLP2 CLI   0(R2),C'0'          FOUND NON-NUMERIC?
         BL    SRCHCTRL            YES, GO HANDLE TRAILING BLANKS
         CLI   0(R2),C'9'          FOUND NON-NUMERIC?
         BH    SRCHINBD            YES, HOW WAS THAT DONE?
         LA    R2,1(,R2)           POINT TO NEXT POSSIBLE DIGIT
         BCT   R14,SCHCOLP2        VALIDATE NEXT DIGIT
SRCHCTRL LR    R3,R2               POINT PAST LAST DIGIT
         LTR   R14,R14             ANY TRAILING BYTES TO CHECK?
         BZ    SRCHCOL#            NO, END OF DATA SO GET NUMBER
SCHCOLP3 CLI   0(R2),C' '          IS TRAILING CHARACTER A BLANK?
         BH    SRCHINBD            NO, INVALID COLUMN NUMBER
         LA    R2,1(,R2)           YES, POINT PAST IT
         BCT   R14,SCHCOLP3        DROP THROUGH TRAILING BLANKS
SRCHCOL# SR    R3,R15              GET DIGIT COUNT OF COLUMN NUMBER
         BZ    SCHCOLNL            NO DIGITS
         BCTR  R3,0                DECREMENT FOR EXECUTE
         EX    R3,SRCHPACK         GET DECIMAL NUMBER
         CVB   R0,DOUBLE           GET BINARY NUMBER
         LTR   R0,R0               IS THE NUMBER ZERO?
         BZ    SRCHINBD            YES, SO IT IS INVALID
         C     R0,RECSIZE          IS COLUMN BEYOND RECORD LENGTH?
         BH    SRCHINBD            YES, SO IT IS INVALID
         CLI   FINDCOL2,X'7F'      PROCESSING FIRST COLUMN SPEC?
         BNE   SCHCLTST            NO
         AH    R0,STRINGL          YES, ADD SEARCH DATA LENGTH CODE
         C     R0,RECSIZE          IS END COLUMN BEYOND RECORD LENGTH?
         BH    SRCHINBD            YES, SO IT IS INVALID
         ST    R0,FINDCOL2         YES, SAVE THE END SEARCH COLUMN
         SH    R0,STRINGL          RESTORE SPECIFIED COLUMN NUMBER
         BCTR  R0,0                GET START OFFSET
         ST    R0,FINDCOL1         SAVE IT
SRCHCOL2 MVC   REVPOS+1(2),SCHBAD4 PREPARE FOR BAD SECOND COLUMN
         LA    R2,12*80+29+45(,R4) POINT TO SECOND COLUMN INPUT AREA
         B     SRCHCOLM            PROCESS SECOND COLUMN INPUT FIELD
SRCHPACK PACK  DOUBLE,0(0,R15)         <<< EXECUTED >>>
SCHCLTST C     R0,FINDCOL2         IS SECOND NUMBER HIGHER?
         BNL   SRCH2BIG            YES, USE IT AS END COLUMN
         BCTR  R0,0                CONVERT COLUMN TO OFFSET
         C     R0,FINDCOL1         IS THE SECOND NUMBER SMALLER?
         BNH   SRCH2SML            YES, USE IT AS START COLUMN
         B     SRCHINBD            NO, COLUMNS TOO CLOSE FOR STRING
SRCH2BIG ST    R0,FINDCOL2         SET END COLUMN
         B     SCHCOLOK            DONE SEARCH COLUMN RANGE
SRCH2SML LA    R3,1
         A     R3,FINDCOL1         GET FIRST COLUMN SPECIFIED
         ST    R3,FINDCOL2         USE IT AS END COLUMN
         ST    R0,FINDCOL1         SET START OFFSET
         B     SCHCOLOK            DONE SEARCH COLUMN RANGE
SCHCOLNL CLC   REVPOS+1(2),SCHBAD3 PROCESSING FIRST COLUMN SPEC?
         BE    SRCHCOL2            YES, NOW PROCESS SECOND
         SPACE
SCHCOLOK MVC   REVPOS+1(2),SCHBAD5 PREPARE FOR BAD MODIFIER
         CLI   15*80+20(R4),C'1'   VALID MODIFIER?
         BL    SRCHINBD            NO, INVALID
         CLI   15*80+20(R4),C'4'   VALID MODIFIER?
         BH    SRCHINBD            NO, INVALID
         IC    R1,15*80+20(,R4)    LOAD MODIFIER SPEC
         BCTR  R1,0                GET FLAG BIT PATTERN
         LA    R0,FWRD             GET BIT MASK
         NR    R1,R0               DISCARD IRRELEVANT BITS
         IC    R2,FINDSW2          GET CURRENT FLAG BYTE
         LA    R0,255-FWRD         GET BIT MASK
         NR    R2,R0               RESET FLAG BITS
         OR    R2,R1               SET APPROPRIATE FLAGS
         STC   R2,FINDSW2          SAVE UPDATED FLAG BYTE
         SPACE
         TM    $UCBAD,$HFSIO       SEARCHING UNIX FILES?
         BO    SRCHINDN            YES, NO MEMBER MASK
         MVC   SRCHMMSK,SRCHSTAR   INITIALIZE MEMBER NAME PATTERN MASK
         L     R2,=A(KAPS)         POINT TO TRANSLATE TABLE
         TR    18*80+30(8,R4),0(R2)
         CLC   18*80+30(8,R4),SCHBLNKS
         BE    SRCHINDN            FIELD ERASED - TREAT AS NO FILTER
         MVC   SRCHMMSK,18*80+30(R4)
         SPACE
*
*               PROCESS INTERNAL MEMBER DIRECTORY ENTRIES
*
SRCHINDN TM    $UCBAD,$HFSIO       SEARCHING HFS FILES?
         BO    SRCHEXIT            YES, THE WORK HERE IS DONE
         TM    STATUS17,$17SCH     DATA SET SEARCH SET UP?
         BO    SRCHEXIT            YES, THE WORK HERE IS DONE
         SR    R0,R0               REQUEST OKAY SO PROCESS MEMBERS
         ST    R0,SRCHFCNT         NO MEMBERS MATCHED YET
         ST    R0,SRCHMDON         NO MEMBERS SEARCHED YET
         ST    R0,SRCHMTOT         NO MEMBERS TO BE SEARCHED YET
         ST    R0,SRCHPCT1         ZERO PERCENT DONE
         ST    R0,SRCHPCT2         ZERO PERCENT DONE
         L     R15,SRCHMCNT        GET TAGGED MEMBER COUNT
         L     R4,SRCHMEM1         POINT TO FIRST INTERNAL ENTRY
         CLI   FINDCOL2,X'7F'      COLUMN RANGE SPECIFIED?
         BE    SCHPRPLP            NO
         TM    SCHFLAG1,$SCHRDW    NEED TO ADJUST COLUMN NUMBERS?
         BNO   SCHPRPLP            NO
         LA    R0,4                YES
         A     R0,FINDCOL1
         ST    R0,FINDCOL1
         LA    R0,4
         A     R0,FINDCOL2
         ST    R0,FINDCOL2
SCHPRPLP C     R4,SRCHLAST         END OF INTERNAL DIRECTORY ENTRIES?
         BNL   SCHPRPDN            YES, PREPARATION ALL DONE
         LR    R1,R4               POINT TO ENTRY
         A     R1,SRCHTGOF         POINT TO TAG FLAG
         TM    0(R1),$POTAG        IS THIS ENTRY TAGGED?
         BO    TRYMMASK            YES, INVESTIGATE NAME MASK
         LTR   R15,R15             ONLY PROCESS TAGGED MEMBER ENTRIES?
         BNZ   SCHDSCRD            YES, DISCARD THIS MEMBER
         CLI   SRCHLNOF+3,255      REVPDS ENTRY?
         BNE   TRYMMASK            NO, PROCEED
         TM    PO_FLG-PO_SECT(R4),$PODEL
         BO    SCHDSCRD            DISCARD DELETED MEMBER
TRYMMASK LA    R0,8                GET MEMBER NAME LENGTH
         LA    R1,SRCHMMSK         POINT TO SELECTION MASK
         LR    R2,R4               POINT TO ENTRY
         AL    R2,SRCHNMOF         POINT TO MEMBER NAME
SCHMSKLP CLI   0(R1),C'*'          GENERIC CHARACTER?
         BE    SCHMSKEQ            YES, NO MISMATCH YET
         CLC   0(1,R1),0(R2)       NO, COMPARE A BYTE
         BNE   SCHDSCRD            MISMATCH SO DISCARD MEMBER
SCHMSKEQ LA    R1,1(,R1)           POINT TO NEXT CHARACTER
         LA    R2,1(,R2)           POINT TO NEXT CHARACTER
         BCT   R0,SCHMSKLP         GO CHECK NEXT CHARACTER, IF ANY
         LA    R0,1                MEMBER PASSED MASK PATTERN CHECK
         A     R0,SRCHMTOT         INCREMENT TOTAL SEARCH MEMBER COUNT
         ST    R0,SRCHMTOT
         LR    R1,R4               POINT TO ENTRY
         A     R1,SRCHTGOF         POINT TO TAG FLAG
         OI    0(R1),$POTAG        TAG MEMBER FOR SEARCH
SCHSELNX CLI   SRCHLNOF+3,255      REVPDS FIXED-LENGTH ENTRY?
         BNE   SCHSELNE            NO
         LA    R4,$POSIZ(,R4)      YES, POINT TO NEXT ENTRY
         B     SCHPRPLP
SCHSELNE A     R4,SRCHLNOF         POINT TO LENGTH INDICATOR
         AH    R4,0(,R4)           POINT TO NEXT ENTRY'S LENGTH
         S     R4,SRCHLNOF         POINT TO NEXT ENTRY'S START
         B     SCHPRPLP
SCHDSCRD LR    R1,R4               POINT TO ENTRY
         A     R1,SRCHTGOF         POINT TO TAG FLAG
         NI    0(R1),255-$POTAG    DO NOT SEARCH THIS MEMBER
         B     SCHSELNX            GO PROCESS NEXT INTERNAL ENTRY
SCHPRPDN ICM   R0,15,SRCHMTOT      ANY MEMBERS TO SEARCH?
         BZ    SRCHEXIT            NO, RETURN
         L     R4,SRCHMEM1         YES, POINT TO FIRST INTERNAL ENTRY
         XC    SCHHLDNM,SCHHLDNM   CLEAR MEMBER NAME HOLDING AREA
         XC    SCHPRVMM,SCHPRVMM   CLEAR PREVIOUS MEMBER HOLDING AREA
         OI    MODE,MD_OFFLD       NOW IN OFFLOAD MODE
         OI    FINDSW2,FALL        EMPLOY "FIND ALL" LOGIC
         NI    MODE,255-MD_ASCII   ENSURE ASCII IS OFF
         MVC   SCHLATST,NOMMATCH   NO MEMBER MATCHED YET
         TM    STATUS17,$17S34     DATA SET SEARCH SCAN IN PROGRESS?
         BO    SCHMEMLP            YES, SKIP PROGRESS BAR DISPLAY
         MVC   SRCHLINE(PCNTLNHL+PCNTLNTL),PCNTLNHD
         MVC   SRCHLINE+PCSRCHOF+1(7),SRCHLINE+PCSRCHOF
         MVI   SRCHLINE+PCSRCHOF+7,C'0' ASSUME NO MEMBERS PROCESSED
         MVC   SRCHLINE+PCMTCHOF(8),SRCHLINE+PCSRCHOF
         LA    R1,SRCHLINE         POINT TO START OF DATA STREAM
         LA    R0,PCNTLNHL+PCNTLNTL GET LENGTH OF DATA STREAM
         ICM   R1,8,=X'03'         LOAD TPUT FLAGS (FULLSCREEN)
         TPUT  (1),(0),R           SHOW INITIAL PROGRESS BAR
         TIME  BIN                 GET THE TIME
         ST    R0,SCHBARTM         SAVE IT
         SPACE
SCHMEMLP C     R4,SRCHLAST         END OF INTERNAL DIRECTORY ENTRIES?
         BNL   SRCHEXIT            YES, END UP
         CLI   SRCHPCT1+3,50       SHOWN 100% PROGRESS BAR?
         BE    SRCHEXIT            YES, TERMINATE SEARCH
         LR    R1,R4               POINT TO ENTRY
         A     R1,SRCHTGOF         POINT TO TAG FLAG
         TM    STATUS4,$4ATTN      ATTENTION INTERRUPT?
         BNO   SRCHDOIT            NO, PROCEED WITH SEARCH
         NI    0(R1),255-$POTAG    RESET MEMBER TAG FLAG
         CLI   SRCHLNOF+3,255      REVPDS FIXED-LENGTH ENTRY?
         BNE   SCHMEMLE            NO
         LA    R4,$POSIZ(,R4)      YES, POINT TO NEXT ENTRY
         B     SCHMEMLP            RESET REMAINING MEMBERS
SCHMEMLE A     R4,SRCHLNOF         POINT TO LENGTH INDICATOR
         AH    R4,0(,R4)           POINT TO NEXT ENTRY'S LENGTH
         S     R4,SRCHLNOF         POINT TO NEXT ENTRY'S START
         B     SCHMEMLP            RESET REMAINING MEMBERS
SRCHDOIT TM    0(R1),$POTAG        IS THIS ENTRY TAGGED?
         BZ    SCHNXTMM            NO, IGNORE UNTAGGED ENTRY
         LA    R15,1               YES
         A     R15,SRCHMDON        INCREMENT SEARCHED MEMBER COUNT
         ST    R15,SRCHMDON
         M     R14,=F'50'
         D     R14,SRCHMTOT        GET HALF THE PERCENTAGE DONE
         ST    R15,SRCHPCT2        SAVE IT
         TM    STATUS9,$9PGMOBJ    CALLED BY REVPDSE?
         BO    SCHMEMBR            YES, NO DUP MEMBERS (NOT CONCAT)
         TM    STATUS17,$17S34     DATA SET SEARCH SCAN IN PROGRESS?
         BO    SCHMEMBR            YES, NO DUP MEMBERS (NOT CONCAT)
         CLC   SCHHLDNM,0(R4)      IDENTICAL MEMBER NAMES?
         BNE   SCHNEWNM            NO, PROCEED WITH SEARCH
         NI    13(R4),255-$POTAG   YES, UNTAG MEMBER
         MVC   SRCHLINE(DUPMEMSL),DUPMEMS
         MVC   SRCHLINE+25(8),0(R4)    (REVPDS ONLY OFFSETS USED)
         LA    R1,SRCHLINE         NOTIFY USER OF DUPLICATE MEMBER
         LA    R0,DUPMEMSL
         ICM   R1,8,=X'03'         LOAD TPUT FLAGS (FULLSCREEN)
         TPUT  (1),(0),R           SHOW MESSAGE ON SECOND SCREEN LINE
         B     SCHNXTMM            GO GET NEXT MEMBER TO PROCESS
SCHNEWNM CLC   8(5,R4),SCHPRVMM+8  ALIAS OF SAME DATA JUST SEARCHED?
         BNE   SCHMEMBR            NO, JUST HAVE TO DO SEARCH
         TM    SCHPRVMM+13,$POTAG  YES, DID THE SEARCH MATCH?
         BZ    SCHALINO            NO, UNTAG THIS MEMBER
         B     SCHALIAS            YES, TAG AND COUNT
SCHMEMBR LR    R1,R4               POINT TO ENTRY
         A     R1,SRCHNMOF         POINT TO MEMBER NAME
         MVC   $MEMBER,0(R1)       SUPPLY THE MEMBER NAME TO PHASE 2
         SR    R0,R0
         ST    R0,CALLPARM         ZERO THE SIGNAL AREA
         L     R15,=A(REVIEW2)     GET ADDRESS OF PHASE 2
         BASR  R14,R15             CALL REVIEW PHASE 2
         TM    STATUS17,$17S34+$17PAT   GOT A DATA SET SCAN MATCH?
         BO    SRCHEXIT            YES, EXIT TO REVLEVL VIA REVPDS
         LH    R15,RC              GET BLDL RETURN CODE
         TM    STATUS4,$4ATTN      ATTENTION INTERRUPT?
         BO    SCHMEMLP            YES, ABORT SEARCH
         LTR   R15,R15             WAS THE MEMBER FOUND?
         BNZ   SCHNOMEM            NO, ISSUE MESSAGE
         MVC   SCHPRVMM,0(R4)      YES, SAVE THIS MEMBER'S DETAILS
         CLI   CALLPARM,0          SEARCH MATCH?
         BE    SCHMEMNO            NO, UNTAG MEMBER
         OI    SCHPRVMM+13,$POTAG
SCHALIAS LR    R1,R4               POINT TO ENTRY
         A     R1,SRCHTGOF         POINT TO TAG FLAG
         OI    0(R1),$POTAG        TAG THIS MEMBER
         LA    R0,1
         A     R0,SRCHFCNT         INCREMENT TAGGED MEMBER COUNT
         ST    R0,SRCHFCNT
         LR    R1,R4               POINT TO ENTRY
         A     R1,SRCHNMOF         POINT TO MEMBER NAME
         MVC   SCHLATST,0(R1)      UPDATE LATEST MATCH MEMBER NAME
         B     SCHMATCH            LEAVE MEMBER TAGGED
SCHNOMEM MVC   SRCHLINE(L'BDBLDMS),BDBLDMS
         LR    R1,R4               POINT TO ENTRY
         A     R1,SRCHNMOF         POINT TO MEMBER NAME
         MVC   SRCHLINE+L'BDBLDMS(8),0(R1)
         LA    R1,SRCHLINE
         LA    R0,L'BDBLDMS+8
         TPUT  (1),(0),R           LINE MODE I/O SHOULD GET NOTICED
         XC    SCHPRVMM,SCHPRVMM   CLEAR PREVIOUS MEMBER HOLDING AREA
SCHMEMNO NI    SCHPRVMM+13,255-$POTAG
SCHALINO LR    R1,R4               POINT TO ENTRY
         A     R1,SRCHTGOF         POINT TO TAG FLAG
         NI    0(R1),255-$POTAG    RESET MEMBER TAG FLAG
SCHMATCH MVC   SCHHLDNM,0(R4)      REMEMBER THE LATEST MEMBER NAME
SCHNXTMM CLI   SRCHLNOF+3,255      REVPDS FIXED-LENGTH ENTRY?
         BNE   SCHNXTME            NO
         LA    R4,$POSIZ(,R4)      YES, POINT TO NEXT ENTRY
         TM    STATUS17,$17S34     DATA SET SEARCH SCAN IN PROGRESS?
         BNO   SCHNXTMX            NO
         B     SCHMEMLP            YES, SUPPRESS PROGRESS BAR DISPLAY
SCHNXTME A     R4,SRCHLNOF         POINT TO LENGTH INDICATOR
         AH    R4,0(,R4)           POINT TO NEXT ENTRY'S LENGTH
         S     R4,SRCHLNOF         POINT TO NEXT ENTRY'S START
SCHNXTMX CLI   SRCHPCT2+3,50       HAS THE LAST MEMBER BEEN PROCESSED?
         BE    SCHDOBAR            YES, SHOW 100% BEFORE EXITING
         TIME  BIN                 NO, GET THE TIME
         LA    R1,100
         A     R1,SCHBARTM
         CR    R1,R0               AT LEAST 1 SECOND SINCE LAST UPDATE?
         BH    SCHMEMLP            NO, SKIP UPDATE AT THIS TIME
         CLC   SRCHPCT1,SRCHPCT2   NEED TO UPDATE PROGRESS BAR?
         BNE   SCHDOBAR            YES, UPDATE THE SCREEN
         LA    R1,300              SAME PERCENTAGE,
         A     R1,SCHBARTM              BUT HAVE THREE SECONDS
         CR    R1,R0                    ELAPSED SINCE LAST UPDATE?
         BH    SCHMEMLP            NO, SKIP UPDATE AT THIS TIME
SCHDOBAR MVC   SRCHPCT1,SRCHPCT2   YES, PROCEED WITH UPDATE
         ST    R0,SCHBARTM         SAVE CURRENT TIME
         MVC   SRCHLINE(PCNTLNHL),PCNTLNHD
         L     R0,SRCHMDON         SHOW NUMBER OF MEMBERS SEARCHED
         CVD   R0,DOUBLE
         ED    SRCHLINE+PCSRCHOF(8),DOUBLE+4
         L     R0,SRCHFCNT         SHOW NUMBER OF MEMBERS MATCHED
         CVD   R0,DOUBLE
         ED    SRCHLINE+PCMTCHOF(8),DOUBLE+4
         MVC   SRCHLINE+PCLATEOF(8),SCHLATST
*                                  HANDLE BAD MEMBER NAME CODE POINTS
         TR    SRCHLINE+PCLATEOF(8),PERIODS
         LA    R2,SRCHLINE+PCNTLNHL
         TM    STATUS5,$5EDS       USING EXTENDED DATA STREAM ORDERS?
         BZ    SCHVIDOK            NO, DON'T USE REVERSE VIDEO
         MVC   0(3,R2),SRCHRVRS    SET REVERSE VIDEO
         LA    R2,3(,R2)           UPDATE POINTER
SCHVIDOK CLI   SRCHPCT2+3,1        JUST ONE BYTE IN PROGRESS BAR?
         BE    SCHRTAOK            YES, SKIP REPEAT-TO-ADDRESS
         BL    SCHLENOK            ZERO BYTES SO FORGET BAR DISPLAY
         MVI   0(R2),RA
         L     R1,SRCHPCT2         GET HALF OF NEW PERCENT TO SHOW
         LA    R1,SRCHPBAR(,R1)    GET FINAL LOCATION
         L     R15,=A(CALCPOSI)    GET CONVERSION ROUTINE ENTRY POINT
         BASR  R14,R15             CONVERT FOR 3270 DATA STREAM
         STCM  R1,3,1(R2)          SET ENDING 3270 BUFFER ADDRESS
         LA    R2,3(,R2)           POINT TO PROGRESS BAR CHARACTER
SCHRTAOK MVI   0(R2),C'X'          LOAD CHARACTER FOR BAR
         TM    STATUS5,$5EDS       USING EXTENDED DATA STREAM ORDERS?
         BZ    *+8                 NO, LEAVE THE 'X'
         MVI   0(R2),C' '          YES, USE REVERSE VIDEO BLANKS
         CLI   SACHAR,X'0E'        FUJITSU TERMINAL HARDWARE?
         BNE   SCHBAROK            NO, TERMINAL WILL RESET TO NORMAL
         MVC   1(3,R2),SRCHNORM    RESET TO NORMAL VIDEO FOR NEXT WRITE
         LA    R2,3(,R2)           UPDATE POINTER
SCHBAROK LA    R2,1(,R2)           UPDATE POINTER
SCHLENOK LR    R0,R2               POINT PAST END OF DATA STREAM
         LA    R1,SRCHLINE         POINT TO START OF DATA STREAM
         SR    R0,R1               GET LENGTH OF DATA STREAM
         ICM   R1,8,=X'03'         LOAD TPUT FLAGS (FULLSCREEN)
         TPUT  (1),(0),R           UPDATE THE PROGRESS BAR
         B     SCHMEMLP            PROCESS THE NEXT DIRECTORY ENTRY
         SPACE
SRCHEXIT NI    MODE,255-MD_OFFLD   ENSURE SEARCH FLAGS ARE RESET
         NI    FINDSW2,255-FALL
         MVC   TAGCOUNT,SRCHFCNT   SET TAGGED MEMBER COUNT
         NI    STATUS10,255-$10PSP NORMAL SCREEN WRITES AND PARSE INPUT
         OI    STATUS7,$7RESHO     TELL REVCOMM TO RESTORE SCREEN SIZE
         OI    STATUS10,$10CDR     TELL ISPF TO RESEND WHOLE SCREEN
         OI    STATUS4,$4REFR      TELL CALLER TO PAINT WHOLE SCREEN
         LA    R0,1
         ST    R0,REVPOS           PLACE CURSOR BACK AT HOME
         MVC   REVCSR,SRCHZCMD
         LA    R0,$SCHWKLN         GET LENGTH OF DYNAMIC AREA
         LR    R1,R13              POINT TO DYNAMIC AREA TO BE FREED
         DROP  R13                 @SCHWORK
         L     R13,4(,R13)         POINT TO PREVIOUS SAVE AREA
         OI    11(R13),X'01'       INVALIDATE FORWARD POINTER
         FREEMAIN R,LV=(0),A=(1)   FREE @SCHWORK
         L     R14,12(,R13)        LOAD RETURN ADDRESS
         LM    R0,R12,20(R13)      RESTORE OTHER REGISTERS
         BR    R14                 RETURN WITH FREEMAIN RETURN CODE
         SPACE
         DROP  R11                 REVSRCH
         TITLE '  R E V S R C H   -   S T A T I C   A R E A  '
SCHBAD1  DCS   (5,17)              BUFFER ADDRESS FOR SEARCH TYPE
SCHBAD2  DCS   (10,17)             BUFFER ADDRESS FOR SEARCH DATA
SCHBAD3  DCS   (13,30)             BUFFER ADDRESS FOR START COLUMN
SCHBAD4  DCS   (13,75)             BUFFER ADDRESS FOR END COLUMN
SCHBAD5  DCS   (16,21)             BUFFER ADDRESS FOR MODIFIER
*        DCS   (19,31)             BUFFER ADDRESS FOR MEMBER MASK
HEXS     DC    C'0123456789ABCDEF' HEXADECIMAL DIGIT TRANSLATE TABLE
SRCHED7  DC    X'6E20202020202120' EDIT MASK
SRCHZCMD DC    CL8'ZCMD    '       PRIMARY INPUT SCREEN FIELD NAME
SRCHSTAR DC    CL8'********'       ASTERISKS
SCHBLNKS DC    CL8'        '       BLANKS
BDBLDMS  DC    C'** BLDL FAILED DURING SEARCH OF MEMBER '
DUPMEMS  DC    AL1(WCCNULL,SBA)
         DCS   (2,18)
         DC    C'*** DUPLICATE MEMBER ???????? NOT SEARCHED ***'
DUPMEMSL EQU   *-DUPMEMS
PCNTLNHD DC    AL1(WCCNULL,SBA)
         DCS   (21,6)
PCSRCHOF EQU   *-PCNTLNHD
         DC    X'4020202020202120' EDIT MASK FOR MEMBERS SEARCHED
         DC    C' MEMBERS SEARCHED  '
PCMTCHOF EQU   *-PCNTLNHD
         DC    X'4020202020202120' EDIT MASK FOR MEMBERS MATCHED
         DC    C' MEMBERS MATCHED - LATEST: '
PCLATEOF EQU   *-PCNTLNHD
NOMMATCH DC    C'**NONE**'
         DCS   SBA,(22,13),C'0% '
PCNTLNHL EQU   *-PCNTLNHD
SRCHPBAR EQU   21*80+15            LOCATION OF ACTUAL BAR START
PCNTLNTR DCS   RA,(22,66),C'_ 100%'
PCNTLNTL EQU   *-PCNTLNTR
SRCHRVRS DC    AL1(SA,HILT,RVRSE)
SRCHNORM DC    AL1(SA,HILT,NULL)
         SPACE
*         TRANSLATE TABLES
KEYBDTST EQU   *,256               TRT TABLE FOR UNDISPLAYABLES
         DC    64X'FF',X'00'       BLANK
         DC    9X'FF',6X'00'       CENT,PERIOD,LESS,LPAREN,PLUS,BAR
         DC    X'00',9X'4B'        AMPERSAND
         DC    6X'00'              EXCL,$,ASTERISK,RPAREN,SEMI,NOT
         DC    X'0000',8X'4B'      HYPHEN,SLASH
         DC    6X'00'              WHAT,COMMA,PERCENT,UNDLN,GT,QM
         DC    9X'4B',X'00'        70-78              BACK-QUOTE
         DC    6X'00'              COLON,POUND,AT,APOST,EQ,DBLQUOTE
         DC    X'4B'               80
         DC    9X'00',7X'4B'       81-90
         DC    9X'00',7X'4B'       91-A0
         DC    9X'00',22X'4B'      A1-BF       TILDE
         DC    10X'00',6X'4B'      LEFT BRACE  A-I
         DC    10X'00',6X'4B'      RIGHT BRACE J-R
         DC    X'004B',8X'00',6X'4B' BACK SLASH  S-Z
         DC    10X'00',6X'4B'      0-9
         SPACE
SCHL1A   DC    C'REVIEW'
SCHL1B   DC    CL30'PDS SEARCH REQUEST ENTRY PANEL'
SCHL1C   DC    CL5'R&REL'
SCHL5A   DC    C'SEARCH TYPE',AL1(FLDOUTHI),C'==>',AL1(FLDINHI),C'1'
         DC    AL1(FLDOUTLO),C' 1: FIND ..  2: FINDNOT ..'
SCHL5AL  EQU   *-SCHL5A
SCHL5B   DC    CL18'(CASE INSENSITIVE)'
SCHL6A   DC    CL23'3: F C''..''  4: FN C''..'''
SCHL6B   DC    CL16'(CASE SENSITIVE)'
SCHL7    DC    CL23'5: F X''..''  6: FN X''..'''
SCHL8    DC    CL23'7: F P''..''  8: FN P''..'''
         DC    C'  (MASK CHARACTERS: = @ # $ ¬ . - < >)'
SCHL8L   EQU   *-SCHL8
SCHL10   DC    C'SEARCH DATA',AL1(FLDOUTHI),C'==>',AL1(FLDINHI)
SCHL13   DC    C'OPTIONAL SEARCH COLUMN 1',AL1(FLDOUTHI),C'==>'
         DC    AL1(FLDINHI),5X'00',AL1(FLDOUTLO)
SCHL13L  EQU   *-SCHL13
SCHL16   DC    C'SEARCH MODIFIER',AL1(FLDOUTHI),C'==>'
         DC    AL1(FLDINHI),C'1',AL1(FLDOUTLO)
         DC    C'   1: CHARS   2: PREFIX   3: SUFFIX   4: WORD'
         DC    AL1(FLDOUTHI)
SCHL16L  EQU   *-SCHL16
SCHL19   DC    C'OPTIONAL MEMBER NAME MASK',AL1(FLDOUTHI),C'==>'
         DC    AL1(FLDINHI),8C'*',AL1(FLDOUTLO)
SCHL19L  EQU   *-SCHL19
SCHL23   DC    AL1(FLDOUTHI),C'      **ALL**',AL1(FLDOUTLO)
SCHL23L  EQU   *-SCHL23
         DC    CL30'REGULAR FILES WILL BE SEARCHED',AL1(FLDOUTHI)
SCHL23UL EQU   *-SCHL23
SCHL23P  DC    C'MEMBERS WILL BE SEARCHED SUBJECT TO MEMBER NAME MASK M+
               ATCHING'
         DC    AL1(FLDOUTHI)
SCHL23PL EQU   *-SCHL23P
         SPACE
         DC    0D'0'
         LTORG
         SPACE
         DC    0D'0'               END OF CSECT
         TITLE '  R E V S R C H   -   D Y N A M I C   A R E A  '
@SCHWORK DSECT
SRCHSAVE DS    18F
SRCHSAV2 DS    18F
SRCHMMSK DS    CL8                 MEMBER NAME SEARCH MASK
SRCHMCNT DS    F                   HIGHLIGHTED MEMBER COUNT - BEFORE
SRCHFCNT DS    F                   HIGHLIGHTED MEMBER COUNT - AFTER
SRCHTDYN DS    F                   ADDRESS OF FIND TYPE SETTING
SRCHTGOF DS    F                   OFFSET INTO ENTRY OF TAG FLAG
SRCHLNOF DS    F                   OFFSET INTO ENTRY OF LENGTH FIELD
SRCHNMOF DS    F                   OFFSET INTO ENTRY OF MEMBER NAME
SRCHMEM1 DS    F                   FIRST INTERNAL MEMBER ENTRY
SRCHLAST DS    F                   LAST INTERNAL MEMBER ENTRY
SRCHMTOT DS    F                   TOTAL MEMBER ENTRY COUNT TO SEARCH
SRCHMDON DS    F                   SEARCHED MEMBER ENTRY COUNT
SRCHPCT1 DS    F                   SEARCH % DONE BEFORE CURRENT MEMBER
SRCHPCT2 DS    F                   SEARCH % DONE AFTER CURRENT MEMBER
SCHBARTM DS    F                   TIME OF LAST PROGRESS BAR UPDATE
SCHFLAG1 DS    X                   FLAG BYTE
$SCHRDW  EQU   X'80'               ADJUST COLUMNS FOR HIDDEN RDWS
         DS    0D                  REST ARE MULTIPLES OF 8 BYTES
SCHLATST DS    CL8                 LATEST MATCHED MEMBER NAME
SCHHLDNM DS    CL8                 PREVIOUS MEMBER NAME IN LIST
SCHPRVMM DS    CL16                PREVIOUS MEMBER SEARCHED
SRCHLINE DS    CL160               MESSAGE WORK AREA
         DS    0D                  END OF DSECT
$SCHWKLN EQU   *-@SCHWORK
         SPACE
* THE CONTENTS OF SCHHLDNM AND SCHPRVMM ARE ONLY USED WHEN REVSRCH
* IS CALLED BY REVPDS.  HENCE, THEY ARE UPDATED ABOVE WITH
* HARD-CODED OFFSETS, RATHER THAN USING SRCHNMOF AND SRCHTGOF.
         TITLE '  R E V L O A D  '
**********************************************************************
*                                                          *         *
*         REVIEW PDS MEMBER LOAD FROM SEQUENTIAL FILE      *  GP@P6  *
*                                                          *  03/99  *
**********************************************************************
         SPACE
**********************************************************************
*                                                                    *
*        THIS ROUTINE PROVIDES THE CAPABILITY OF ADDING OR           *
*        REPLACING PDS MEMBERS FROM A SEQUENTIAL FILE CONTAINING     *
*        AN IEBUPDTE-LIKE INPUT STREAM CONSISTING OF CONTROL         *
*        STATEMENTS AND DATA.                                        *
*                                                                    *
*        AN ENTRY PANEL IS DISPLAYED WHERE THE USER SPECIFIES THE    *
*        INPUT SEQUENTIAL FILE.  IT IS ALLOCATED, AS ARE OTHER       *
*        FILES NECESSARY FOR THE UTILITY.  THE UTILITY PROGRAM IS    *
*        ATTACHED WITH PROGRAM PARAMETERS ALSO SPECIFYING THE DD     *
*        NAMES TO USE.  BECAUSE THE UTILITY IS ATTACHED, REVIEW      *
*        IS PROTECTED TO SOME EXTENT FROM ABENDS, THUS GIVING THE    *
*        USER THE OPPORTUNITY TO RETRY WITH CORRECTED INPUT IN       *
*        SOME CASES.                                                 *
*                                                                    *
*        THE UTILITY PROGRAM ATTACHED IS EITHER 'PDSLOAD' FROM       *
*        CBT FILE 93, OR 'REVLMOD' FOR UNDEFINED RECORD FORMAT       *
*        LIBRARIES.  REVIEW MEMBER OFFLOAD OPERATIONS CREATE FILES   *
*        SUITABLE FOR PROCESSING BY THESE UTILITIES.                 *
*                                                                    *
*        THE IBM UTILITY DDNAME SLOT CONVENTION GOES SOMETHING       *
*        LIKE THIS:                                                  *
*           01  SYSLIN                                               *
*           02  OUTPUT MEMBER NAME                                   *
*           03  SYSLMOD                                              *
*           04  SYSLIB                                               *
*           05  SYSIN                                                *
*           06  SYSPRINT      (SYSLOUT)                              *
*           07  SYSPUNCH                                             *
*           08  SYSUT1                                               *
*           09  SYSUT2                                               *
*           10  SYSUT3                                               *
*           11  SYSUT4                                               *
*           12  SYSTERM                                              *
*           13  SYSUT5                                               *
*           14  SYSUT6        (SYSCIN FOR PL/I COMPILER)             *
*           15  SYSUT7                                               *
*           16  SYSADATA                                             *
*           17  SYSIDL                                               *
*                                                                    *
*        IF THE CALLER IS REVEDIT THEN THE DATA ENTRY PANEL          *
*        HAS ONLY ONE INPUT FIELD (FOR THE DATA SET NAME), AND       *
*        REVLOAD RETURNS AFTER THE ALLOCATION IS DONE WITH THE       *
*        ALLOCATED DDNAME PLACED IN 'DOUBLE'.                        *
*                                                                    *
**********************************************************************
         SPACE
**********************************************************************
*                                                                    *
* REGISTERS ON ENTRY:  R9 -> @DATA                                   *
*                      R13-> @PDSAREA                                *
*                                                                    *
* DURING PROCESSING:   R13-> @PDSLDWK (LOCAL GETMAINED AREA)         *
*                                                                    *
* RETURN CODES:        R15 = 0  PROCESSING COMPLETE                  *
*                                                                    *
* IF CALLER IS REVEDIT DOUBLE = ALLOCATED DDNAME                     *
*                                                                    *
* OTHERWISE            READR = SUBTASK COMPLETION CODE               *
*                                                                    *
**********************************************************************
         EJECT
REVLOAD  RSECT
REVLOAD  AMODE 31
         ENTRY LOADFIXM
         B     @REVLOAD-*(,R15)
         DC    AL1(7),CL7'REVLOAD'
@REVLOAD STM   R14,R12,12(R13)
         LR    R11,R15
         USING REVLOAD,R11
         XASAM24
         LA    R0,$PDSWKLN
         MVI   GETMNTRC,59         TRACK GETMAIN IN CASE OF FAILURE
         GETMAIN R,LV=(0)          GET MAIN STORAGE
         LR    R14,R1              POINT TO THE NEW STORAGE
         LA    R15,$PDSWKLN        GET ITS LENGTH
         SR    R3,R3               ZERO PAD AND SOURCE LENGTH
         MVCL  R14,R2              CLEAR DYNAMIC STORAGE
         ST    R1,8(,R13)          CHAIN SAVE AREAS
         ST    R13,4(,R1)
         LR    R13,R1              POINT TO GETMAINED AREA
         USING @PDSLDWK,R13
         MVI   GENSTATS,C'N'       DO NOT MANUFACTURE MEMBER STATISTICS
         LA    R3,LDATTCHM         POINT TO REVLMOD ATTACH
         TM    DS1RECFM,DCBRECU    DOES PDS HAVE RECFM=U?
         BO    *+8                 YES, HAVE CORRECT ATTACH LIST
         LA    R3,LDATTCHS         NO, POINT TO PDSLOAD ATTACH
         MVC   LDATTCHD(LDATTCHL),0(R3)
         XC    LDDDLEN(90),LDDDLEN CLEAR DD OVERRIDE SLOTS
         MVI   LDDDLEN+1,88        SET LENGTH FOR 11 SLOTS
         MVC   LDOUTDDN,$DDNAME    SET TARGET FILE NAME
         SPACE
*  IF THE ALLOCATION TARGET INCLUDES A MEMBER NAME SELECTION FROM
*  A MEMBER SELECTION LIST, THEN AFTER DATA SET NAME EXTRACTION
*  IS DONE CONTROL RETURNS TO LABEL 'LDREINIT' INSTEAD OF
*  'LOADDAIR' SO THAT THE SCREEN BUFFER CAN BE RELOADED
*  (OVERLAYING THE MEMBER SELECTION DISPLAY) SO THAT ERROR
*  HANDLING CAN PERFORM THE USUAL "SCREEN SCRAPING" AND ERROR
*  MESSAGE LOADING.
         SPACE
LDREINIT OI    STATUS10,$10PSP     PRIMARY SCREEN SIZE PROMPT PANEL
         L     R0,SCREENBF         POINT TO PRIMARY SCREEN BUFFER
         L     R1,SCREENSZ         GET THE SCREEN SIZE
         SR    R15,R15             ZERO SOURCE LENGTH
         ICM   R15,8,LDBLANKS      SET PAD CHARACTER
         MVCL  R0,R14              BLANK OUT PRIMARY BUFFER
         L     R0,SHADOWBF         POINT TO THE SHADOW BUFFER
         L     R1,SCREENSZ         GET THE SCREEN SIZE
         SR    R15,R15             ZERO SOURCE LENGTH AND PAD
         MVCL  R0,R14              ZERO OUT SHADOW BUFFER
         L     R2,SCREENBF         POINT TO PRIMARY SCREEN BUFFER
         L     R3,SHADOWBF         POINT TO THE SHADOW BUFFER
         MVI   1(R3),X'07'         SHOW HEADING IN WHITE
         MVC   0(7,R2),LDLN1A      LOAD PROMPT PANEL TEXT
         MVC   25(30,R2),LDLN1B
         TM    STATUS11,$11EDT     IS THE CALLER REVEDIT?
         BNO   LDHDGSET            NO, CORRECT HEADING HAS BEEN LOADED
         MVC   25(30,R2),24(R2)    YES, CLEAR HEADING JUST LOADED
         MVC   4(4,R2),LDLN1ED
         MVC   28(24,R2),LDLN1CPY
         TM    OPD1+6,PRESENT      DID USER EXPLICITLY NAME DATA SET?
         BNO   LDHDGSET            NO, NEED TO DISPLAY DATA SET PROMOPT
         NI    OPD1+6,255-PRESENT  YES, RESET FLAG TO PREVENT LOOP
         OI    LDSNFLAG,$LD128     AVOID INITIAL TERMINAL I/O CYCLE
LDHDGSET MVC   75(5,R2),LDLN1C
         MVI   7*80+1(R3),X'05'    TURQUOISE FOR INSTRUCTION
         MVC   7*80(40,R2),LDLN8
         MVI   8*80+9(R3),X'06'    YELLOW FOR ARROW
         MVC   8*80+9(4,R2),LDLN9
LDIN1O   EQU   8*80+13             SCREEN OFFSET FOR DSNAME
         MVI   LDIN1O(R3),X'32'    RED UNDERSCORE FOR INPUT FIELD
         MVC   LDIN1O+1(55,R3),LDIN1O(R3)
         MVC   LDIN1O(56,R2),ALCDSSAV  PRIME WITH SAME DSNAME
         MVI   LDIN1O+56(R2),FLDOUTLO
         TM    STATUS11,$11EDT     IS THE CALLER REVEDIT?
         BO    LDSCRSET            YES, THE SCREEN LAYOUT IS COMPLETE
         MVI   14*80+1(R3),X'05'   TURQUOISE FOR INSTRUCTION
         MVI   14*80+36(R3),X'06'  YELLOW FOR ARROW
LDIN2O   EQU   14*80+40            SCREEN OFFSET FOR MEMBER NAME MASK
         MVI   LDIN2O(R3),X'32'    RED UNDERSCORE FOR INPUT FIELD
         MVC   LDIN2O+1(7,R3),LDIN2O(R3)
         MVI   14*80+50(R3),X'01'  BLUE FOR LEGEND
         MVC   14*80+1(LDLN15L,R2),LDLN15
         TM    DS1RECFM,DCBRECU    DOES PDS HAVE RECFM=U?
         BO    LDSCRSET            YES, SUPPRESS SPF STATS QUESTION
         MVI   18*80+1(R3),X'05'   TURQUOISE FOR INSTRUCTION
         MVI   18*80+37(R3),X'06'  YELLOW FOR ARROW
LDIN3O   EQU   18*80+41            SCREEN OFFSET FOR STATS SWITCH
         MVI   LDIN3O(R3),X'32'    RED UNDERSCORE FOR INPUT FIELD
         MVI   18*80+43(R3),X'05'  TURQUOISE FOR INSTRUCTION
         MVI   18*80+50(R3),X'01'  BLUE FOR INFORMATION
         MVC   18*80+1(LDLN19L,R2),LDLN19
LDSCRSET TM    LDSNFLAG,$LD128     PROCESSING MEMBER SELECTION?
         BO    LDRESUME            YES, TERMINAL I/O ALREADY DONE
         MVC   REVPOS+1(2),LDFLD1IN
LOADREDO MVI   REVPOS,SBA          CREATE ORDER TO PLACE CURSOR
         MVI   REVPOS+3,IC
         XASAM31
         L     R15,=A(REVCOMM)     POINT TO TERMINAL I/O ROUTINE
         BASR  R14,R15             WRITE SCREEN AND READ REPLY
         XASAM24
         TM    STATUS4,$4ATTN      ATTENTION INTERRUPT?
         BO    LOADCNCL            YES, ABORT THIS REQUEST
         CLI   REPLY,ENTERAID      ENTER KEY?
         BNE   LOADCNCL            NO, TERMINATE UPDATE IF PF KEY
LDRESUME NI    LDSNFLAG,255-$LD128 REJOIN MAIN LOGIC PATH
*
*               CLEAR LEVEL 1 AND LEVEL 2 MESSAGES
*
         MVC   3*80(160,R2),3*80-1(R2)
         MVC   5*80(160,R2),5*80-1(R2)
*
*               PROCESS INPUT FIELDS IN PRIMARY SCREEN BUFFER
*
         L     R6,=A(KAPS)         UPPER CASE ALL INPUT FIELDS
         TR    LDIN1O(56,R2),0(R6)
         TR    LDIN2O(8,R2),0(R6)
         TR    LDIN3O(1,R2),0(R6)
         MVC   DOUBLE(2),LDFLD1IN  COPY BUFFER ADDRESS OF FIELD
         LA    R3,LDIN1O(,R2)      POINT TO START OF DSNAME
         CLI   0(R3),C' '          LEADING BLANK IN DSNAME FIELD?
         BNE   LDSNSTRT            NO, HAVE DSNAME START
         CLC   1(55,R3),0(R3)      IS THE WHOLE FIELD BLANK?
         BE    LDPARSBD            YES, REPROMPT FOR DATA SET NAME
LDI1BLLP MVC   0(55,R3),1(R3)      DISCARD LEADING BLANK
         MVI   55(R3),C' '
         CLI   0(R3),C' '          ANOTHER LEADING BLANK?
         BE    LDI1BLLP            YES
LDSNSTRT LA    R14,56              GET DSNAME INPUT FIELD LENGTH
         MVI   LDINDSN,C' '        BLANK OUT DATA SET NAME
         MVC   LDINDSN+1(L'LDINDSN-1),LDINDSN
         CLI   0(R3),QUOTE         QUOTED DATA SET NAME?
         BE    LDSNQUOT            YES
         NI    LDSNFLAG,255-$LD1   NO, FLAG NOT QUOTED
         L     R1,REVUPT           POINT TO USER PROFILE TABLE
         USING UPT,R1
         MVC   LDINDSN(7),UPTPREFX COPY THE PREFIX
         SR    R0,R0
         ICM   R0,1,UPTPREFL       GET THE PREFIX LENGTH
         CLI   UPTPREFX,C'>'       '>7BYTES'?
         BNE   LDSNPREF            NO
         MVC   LDINDSN(8),UPT+33   COPY THE PREFIX
         LA    R0,8                GET THE PREFIX LENGTH
         DROP  R1                  UPT
LDSNPREF LR    R1,R0               COPY THE PREFIX LENGTH
         LA    R1,LDINDSN(R1)      POINT PAST PREFIX
         BZ    LDSNREST            HANDLE PROFILE NOPREFIX
         MVI   0(R1),C'.'          SUPPLY PERIOD
         LA    R1,1(,R1)           POINT PAST PERIOD
         B     LDSNREST            TIME TO FINISH LOADING THE DSNAME
LDSNQUOT OI    LDSNFLAG,$LD1       FLAG QUOTED
         LA    R3,1(,R3)           POINT PAST THE QUOTE
         LA    R1,LDINDSN          POINT TO TARGET DATA SET NAME FIELD
         BCT   R14,LDSNREST        DECREASE LENGTH
         B     LDPARSBD            INPUT WAS JUST A QUOTE
LDSNREST LA    R4,0(R14,R3)        POINT PAST DSNAME
         BCTR  R4,0                POINT TO LAST BYTE OF DSNAME
LDSNNDLP CLI   0(R4),C' '          TRAILING BLANK?
         BNE   LDSNEND             NO, FOUND THE END OF THE DSNAME
         BCTR  R4,0                YES, BACK UP A BYTE
         BCT   R14,LDSNNDLP        DECREASE LENGTH
         B     LDPARSBD            INPUT WAS JUST A QUOTE AND BLANK(S)
LDSNEND  CLI   0(R4),QUOTE         TRAILING QUOTE?
         BNE   LDSNQUAL            NO, QUALIFICATION NOW COMPLETE
         TM    LDSNFLAG,$LD1       QUOTED DATA SET NAME?
         BE    LDPARSBD            NO
         BCTR  R4,0                YES, QUOTE ALLOWED, SO BACK UP ONE
         BCT   R14,LDSNQUAL        ADJUST LENGTH
         B     LDPARSBD            INPUT WAS JUST QUOTES
LDSNQUAL MVC   LDINMEM,LDBLANKS    CLEAR MEMBER NAME
         L     R6,=A(DSNCHARS)     POINT TO TRANSLATE TABLE
         CLI   0(R4),C')'          MEMBER NAME PRESENT?
         BNE   LDSNFILL            NO
         LA    R0,9                YES, GET OPEN BRACKET SEARCH SIZE
         BCTR  R4,0                BACK UP A CHARACTER
         BCT   R14,LDOPENLP        ADJUST LENGTH
         B     LDPARSBD            INPUT WAS A BRACKET
LDOPENLP CLI   0(R4),C'('          START OF MEMBER NAME?
         BE    LDMEMNAM            YES
**       CLI   0(R4),C' '          IMBEDDED BLANK?
**       BE    LDPARSBD            YES
**       CLI   0(R4),C'.'          IMBEDDED PERIOD?
**       BE    LDPARSBD            YES
         BCTR  R4,0                NO, BACK UP A CHARACTER
         BCTR  R14,0               ADJUST LENGTH
         BCT   R0,LDOPENLP         CONTINUE SEARCH FOR OPEN BRACKET
         B     LDPARSBD            MEMBER NAME IS TOO LONG
LDMEMNAM BCTR  R14,0               GET LENGTH OF DSNAME PROPER
         LA    R15,9
         SR    R15,R0              GET THE SUPPLIED MEMBER NAME LENGTH
         BNP   LDPARSBD            NULL MEMBER NAME
         BCTR  R15,0               DECREMENT FOR EXECUTE
         EX    R15,LDSETMEM        COPY THE MEMBER NAME
**       EX    R15,LDTRTMEM        ONLY VALID CHARACTERS FOR MEMBER?
**       BNZ   LDPARSBD            NO   (R2 MODIFIED BY TRT)
**       CLI   LDINMEM,C'0'        NAME STARTS WITH ALPHANUMERIC?
**       BNL   LDPARSBD            NO
LDSNFILL LTR   R14,R14             STILL HAVE A VALID LENGTH?
         BNP   LDPARSBD            NO, TOO SHORT
         CH    R14,=H'44'
         BH    LDPARSBD            NO, TOO LONG
         BCTR  R14,0               DECREMENT FOR EXECUTE
         EX    R14,LDSETDSN        COPY THE DATA SET NAME
         EX    R14,LDTRTDSN        ONLY VALID CHARACTERS IN DSNAME?
         BNZ   LDPARSBD            NO
         LA    R4,1(R14,R1)        POINT PAST ULTIMATE DSNAME
         LA    R0,LDINDSN          POINT TO START OF ULTIMATE DSNAME
         SR    R4,R0               GET LENGTH OF ULTIMATE DSNAME
         STH   R4,LDINDSNL         SAVE IT
         SPACE
         TM    STATUS11,$11EDT     IS THE CALLER REVEDIT?
         BNO   LOADDTLS            NO, ALSO PROMPT FOR OTHER INPUTS
         CLI   LDINMEM,C' '        DID THE USER SPECIFY A MEMBER?
         BH    LOADDAIR            YES, FORGET ABOUT OTHER INPUTS
         MVC   LDINMEM,BLDLNAME    NO, USE NAME FROM REVEDIT, IF ANY
         B     LOADDAIR            FORGET ABOUT OTHER INPUTS
         SPACE
LOADDTLS L     R2,SCREENBF         POINT TO PRIMARY SCREEN BUFFER
         MVC   LOADMMSK,LDIN2O(R2) COPY SPECIFIED MEMBER MASK
         TM    DS1RECFM,DCBRECU    DOES PDS HAVE RECFM=U?
         BO    LOADDAIR            YES, SPF STATS QUESTION NOT ASKED
         MVC   DOUBLE(2),LDFLD3IN  COPY BUFFER ADDRESS OF FIELD
         MVI   GENSTATS,C'N'       DO NOT MANUFACTURE MEMBER STATISTICS
         CLI   LDIN3O(R2),C'N'     IS THIS CORRECT?
         BE    LOADDAIR            YES, CONTINUE PARSE
         CLI   LDIN3O(R2),C'Y'     VALID INPUT?
         BNE   LDPARSBD            NO
         MVI   GENSTATS,C'Y'       DO MANUFACTURE MEMBER STATISTICS
         SPACE
LOADDAIR XC    MYDAPB,MYDAPB
         MVI   DA08CD+1,X'08'
         LA    R0,LDINDSNL
         ST    R0,DA08PDSN
         MVC   DA08DDN,LDBLANKS
         MVC   DA08UNIT,LDBLANKS
         MVC   DA08SER,LDBLANKS
         MVC   DA08MNM,LDINMEM
         MVC   BLDLNAME,LDINMEM    SET MEMBER NAME FOR REVMSGS
         MVI   BLDLTTRP+2,0        EXISTENCE NOT VERIFIED YET
         MVC   DA08PSWD,LDBLANKS
         MVI   DA08DSP1,DA08SHR
         MVI   DA08DPS2,DA08KEEP
         MVI   DA08DPS3,DA08KEP
         XC    MYECB,MYECB
         LA    R1,MYDAPL
         L     R15,CVTPTR(,0)      CVT
         L     R15,CVTDAIR-CVT(,R15)
         BASR  R14,R15             CALL IKJDAIR
         LTR   R15,R15
         BNZ   LDDAFAIL            DYNAMIC ALLOCATION FAILED
         MVC   LDINDDN,DA08DDN     COPY GENERATED DD NAME
         L     R2,SCREENBF         POINT TO PRIMARY SCREEN BUFFER
         LA    R1,LDIN1O+55(,R2)   POINT TO LAST INPUT BYTE
LOD0LOOP CLI   0(R1),C' '          TRAILING BLANK?
         BNE   LOD0DONE            NO
         MVI   0(R1),X'00'         YES, CONVERT TO NULL
         BCT   R1,LOD0LOOP         NULL OUT TRAILING BLANKS
LOD0DONE MVC   ALCDSSAV,LDIN1O(R2) SAVE SUCCESSFUL DATA SET NAME
         TM    STATUS11,$11EDT     IS THE CALLER REVEDIT?
         BNO   LDINDONE            NO, GO ALLOCATE SYSOUT FOR UTILITY
         MVC   DOUBLE,DA08DDN      COPY GENERATED DD NAME FOR REVEDIT
         CLI   LDINMEM,C' '        SPECIFIC MEMBER ALLOCATED?
         BH    LOADEXIT            YES, RETURN TO REVEDIT
         CLI   DA08DSO,DS1DSGPO    ALLOCATED A PARTITIONED DATA SET?
         BNE   LOADEXIT            NO, RETURN TO REVEDIT
*
*               PERFORM MEMBER SELECTION DIALOG
*
         MVC   $LDSAVE,$PASSWRD    SAVE CURRENT SUBJECT PARTICULARS
         MVC   $LDDSCB,MYDSCB      SAVE OBTAINED DSCB DATA
         MVC   $LDST1,STATUS       SAVE VARIOUS STATUS FLAGS
         MVC   $LDST3,STATUS3
         MVC   $LDST10,STATUS10
         MVC   $LDST11,STATUS11
         MVC   $DDNAME,DOUBLE      LOAD NEW FILE TO USE
         MVC   $DSNAME(46),LDINDSNL
         LA    R1,$DDNAME          POINT TO THE NEW DDNAME
         L     R15,=A(REVDDLOC)
         BASR  R14,R15             FIND ITS TIOT ENTRY ADDRESS
         ICM   R15,7,17(R15)       FIND ITS UCB ADDRESS
         ST    R15,$UCBAD          SAVE IT
         MVC   $VOLSER,28(R15)     COPY THE VOLUME SERIAL NUMBER
         MVC   $MEMBER,LDBLANKS    CLEAR MEMBER NAME
         L     R15,=A(REVDASD)     POINT TO DASD DATA SET INIT. ROUTINE
         BASR  R14,R15             CALL IT - ONLY R9 TO R13 PRESERVED
**       NI    STATUS13,255-$13COMP
**       NI    STATUS14,255-$14ALT RESET SECURITY ACCESS LEVEL FLAGS
         LTR   R15,R15             SUCCESS?
         BNZ   LDMEMDON            NO, FAIL THE REQUEST
         NI    STATUS10,255-$10PSP NORMAL SCREEN WRITES AND PARSE INPUT
         NI    STATUS11,255-$11EDT INDICATE APPROPRIATE MESSAGE AREA
         OI    STATUS13,$13MSEL    SET MEMBER SELECTION MODE
         MVI   STATUS3,0           RESET MEMBER LIST SORT ORDER
         MVI   MSG,180             SELECT A MEMBER TO BE COPIED
         L     R15,=A(REVPDS)      POINT TO PDS DIRECTORY HANDLER
         BASR  R14,R15             LIST MEMBERS FOR SELECTION
         MVC   LDINMEM,$MEMBER     SAVE SELECTED MEMBER NAME
         OI    LDSNFLAG,$LD128     NEED TO REPAINT FOR ERROR LOGIC
LDMEMDON NI    STATUS13,255-$13MSEL
         XC    MYDAPB,MYDAPB
         MVI   DA18CD+1,X'18'
         MVC   DA18DDN,$DDNAME     DDNAME
         MVC   DA18MNM,LDBLANKS    MEMBER NAME
         MVC   DA18SCLS,LDBLANKS   SYSOUT CLASS IS 2-BYTE FIELD
         XC    MYECB,MYECB
         LA    R1,MYDAPL
         L     R15,CVTPTR(,0)      CVT
         L     R15,CVTDAIR-CVT(,R15)
         BASR  R14,R15             CALL IKJDAIR FOR DEALLOCATION
         MVC   MYDSCB,$LDDSCB      RESTORE DATA FOR SUBJECT DATA SET
         MVC   $PASSWRD($DSVARSZ),$LDSAVE
         NI    $LDST1,STPODIR
         OC    STATUS,$LDST1       RESTORE DIRECTORY DISPLAY STATUS
         MVC   STATUS3,$LDST3      RESTORE MEMBER SORT ORDER
         NI    $LDST10,$10CAP
         NI    STATUS10,255-$10CAP
         OC    STATUS10,$LDST10    RESTORE CAPS SETTING
         MVC   STATUS11,$LDST11    RESTORE COMPONENT SETTINGS
         MVI   DOUBLE+2,0          TELL REVEDIT NO ALLOCATION MADE
         CLI   LDINMEM,C' '        WAS A MEMBER SELECTED?
         BNH   LOADCNCL            NO, RETURN TO REVEDIT
         LA    R14,ALCDSSAV+L'ALCDSSAV-9
LPAPPMEM CLI   0(R14),C' '         TRAILING BLANK?
         BH    LDAPPCHK            NO
         BCT   R14,LPAPPMEM        YES, BACK UP ONE AND RETRY
LDAPPCHK CLI   0(R14),QUOTE        TRAILING QUOTE?
         BNE   LDAPPMEM            NO
         BCTR  R14,0               YES, BACK UP ANOTHER ONE
LDAPPMEM MVI   1(R14),C'('         APPEND MEMBER NAME HERE
         MVC   2(8,R14),LDINMEM    LOAD THE MEMBER NAME
LPBRAKET CLI   9(R14),C' '         TRAILING BLANK IN MEMBER NAME?
         BH    LDBRAKET            NO
         BCT   R14,LPBRAKET        YES, BACK UP ONE AND RETRY
LDBRAKET MVI   10(R14),C')'        APPEND CLOSING BRACKET
         CLI   ALCDSSAV,QUOTE      IS THE DATA SET NAME QUOTED?
         BNE   LDREINIT            NO, GO PUT MEMBER IN THE ALLOCATION
         MVI   11(R14),QUOTE       YES, SUPPLY END QUOTE AS WELL
         B     LDREINIT            GO PUT MEMBER IN THE ALLOCATION
*
*               DIAGNOSE DYNAMIC ALLOCATION FAILURE
*
LDDAFAIL LA    R1,MYDFPARM
         USING DFDSECTD,R1         MAPPED BY IKJEFFDF DFDSECT=YES MACRO
         ST    R15,MYDFRC          IKJDAIR RETURN CODE
         LA    R15,MYDFRC
         ST    R15,DFRCP
         LA    R15,MYDAPL
         ST    R15,DFDAPLP
*        SR    R15,R15             INITIALLY ZERO - BUT LEAVE EP THERE
*        ST    R15,MYJEFF02               IF THE SYSTEM ALREADY SET IT
         LA    R15,MYJEFF02
         ST    R15,DFJEFF02
         MVI   MYDFID,DFBUFSW
         MVI   MYDFID+1,DFDAIR
         LA    R15,MYDFID
         ST    R15,DFIDP
         MVC   DFCPPLP,CPPLPTR
         LA    R15,LDDFBUFS
         ST    R15,DFBUFP
         DROP  R1                  DFDSECTD
         LINK  EP=IKJEFF18,SF=(E,LINKAREA)
         MVC   DOUBLE(2),LDFLD1IN  COPY BUFFER ADDRESS OF FIELD
         LA    R4,LDDFBUFS         POINT TO EXTRACTED MESSAGES
         USING DFDSECT2,R4
         LA    R0,5
         LH    R14,DFBUFL1         GET LENGTH OF LEVEL 1 MESSAGE AREA
         SR    R14,R0              GET LENGTH CODE OF MESSAGE TEXT
         BM    LDPARSBD            NO MESSAGE TO LOAD
         LA    R1,3*80(,R2)        POINT TO LEVEL 1 MESSAGE SHOW AREA
         LA    R3,DFBUFT1          POINT TO LEVEL 1 MESSAGE TEXT
         EX    R14,LDSETDSN        LOAD LEVEL 1 MESSAGE
         LH    R14,DFBUFL2         GET LENGTH OF LEVEL 2 MESSAGE AREA
         SR    R14,R0              GET LENGTH CODE OF MESSAGE TEXT
         BM    LDPARSBD            NO MESSAGE TO LOAD
         LA    R0,160-1
         CR    R14,R0              MESSAGE TOO LONG TO FIT?
         BNH   *+6                 NO
         LR    R14,R0              YES, TRUNCATE AT MAXIMUM LENGTH
         LA    R1,5*80(,R2)        POINT TO LEVEL 2 MESSAGE SHOW AREA
         LA    R3,DFBUFT2          POINT TO LEVEL 2 MESSAGE TEXT
         EX    R14,LDSETDSN        LOAD LEVEL 2 MESSAGE
         DROP  R4                  DFDSECT2
*        B     LDPARSBD            REPROMPT FOR DATA SET NAME
         SPACE
*
*               SET UP ERROR CONDITION PRIOR TO SCREEN RESHOW
*
LDPARSBD MVC   REVPOS+1(2),DOUBLE  PUT CURSOR AT FIELD IN ERROR
         L     R2,SCREENBF         POINT TO PRIMARY SCREEN BUFFER
         L     R3,SHADOWBF         POINT TO THE SHADOW BUFFER
         MVC   2*80+12(LOADFIXL,R2),LOADFIXM
         MVI   2*80+11(R3),X'22'   REVERSE RED FOR ERROR MESSAGE
         MVC   2*80+12(LOADFIXL+1,R3),2*80+11(R3)
         B     LOADREDO            ISSUE NEW PROMPT
         SPACE
LDSETMEM MVC   LDINMEM(0),1(R4)    <<< EXECUTED >>>
LDSETDSN MVC   0(0,R1),0(R3)       <<< EXECUTED >>>
LDTRTMEM TRT   LDINMEM(0),0(R6)    <<< EXECUTED >>>
LDTRTDSN TRT   LDINDSN(0),0(R6)    <<< EXECUTED >>>
         SPACE
*
*               PREPARE PARAMETERS AND ATTACH UTILITY PROGRAM
*
         USING DAPB30,MYDAPB
LDINDONE XC    MYDAPB,MYDAPB       ALLOCATE A SYSOUT DATA SET
         MVI   DA30CD+1,X'30'
         MVC   DA30DDN(8),LDBLANKS
         MVC   DA30UNIT,LDBLANKS
         MVC   DA30SER,LDBLANKS
         MVC   DA30PGNM,LDBLANKS
         MVC   DA30FORM,LDBLANKS   (4-BYTE FIELD)
         XC    MYECB,MYECB
         LA    R1,MYDAPL
         L     R15,CVTPTR(,0)      CVT
         L     R15,CVTDAIR-CVT(,R15)
         BASR  R14,R15             CALL IKJDAIR
         LTR   R2,R15
         BNZ   LDATTACH            DYNAMIC ALLOCATION FAILED
         OI    LDSNFLAG,$LD4       REMEMBER ALLOCATION
         MVC   LDPRTDDN,DA30DDN    COPY GENERATED DD NAME
LDATTACH LA    R1,LDDDLEN
         ST    R1,LDPARM2          SET DD OVERRIDE PARAMETER ADDRESS
         OI    LDPARM2,X'80'       LAST ENTRY IN PLIST
         MVC   LDDFBUFS(31),LDP1TEMP    LOAD PARAMETER TEMPLATE
         MVC   LDDFBUFS+12(8),LOADMMSK  LOAD MEMBER NAME SELECTION MASK
         CLI   GENSTATS,C'Y'       SPF STATISTICS GENERATION REQUIRED?
         BE    LDPLIST             YES, PROGRAM PARAMETER COMPLETE
         MVI   LDDFBUFS+1,25       NO, REMOVE 'SPF,' FROM PARAMETER
         MVC   LDDFBUFS+6(21),LDDFBUFS+10
LDPLIST  LA    R1,LDDFBUFS
         ST    R1,LDPARM1          SET NORMAL PROGRAM PARAMETER ADDRESS
         SR    R1,R1
         ST    R1,READR            CLEAR ECB
         LA    R1,LDPARM1          POINT TO PLIST FOR UTILITY
         ATTACH ECB=READR,SF=(E,LDATTCHD)
         ST    R1,LDTCBADR         SAVE TCB ADDRESS
         WAIT  ECB=READR
         MVI   READR,0             RESET FLAG BYTE OF ECB
         DETACH LDTCBADR           DETACH UTILITY TCB
         XC    MYDAPB,MYDAPB
         MVI   DA18CD+1,X'18'
         MVC   DA18DDN,LDINDDN
         MVC   DA18MNM,LDBLANKS
         MVC   DA18SCLS,LDBLANKS   (2-BYTE FIELD)
         XC    MYECB,MYECB
         LA    R1,MYDAPL
         L     R15,CVTPTR(,0)      CVT
         L     R15,CVTDAIR-CVT(,R15)
         BASR  R14,R15             FREE INPUT SEQUENTIAL FILE
         TM    LDSNFLAG,$LD4       REPORT FILE OVERRIDE ALLOCATED?
         BZ    LOADEXIT            NO, NO NEED TO FREE IT
         XC    MYDAPB,MYDAPB
         MVI   DA18CD+1,X'18'
         MVC   DA18DDN,LDPRTDDN    DDNAME
         MVC   DA18MNM,LDBLANKS    MEMBER NAME
         MVC   DA18SCLS,LDBLANKS   SYSOUT CLASS IS 2-BYTE FIELD
         ICM   R0,7,READR+1        COND CODE 0000?
         BNZ   *+8                 NO, DO NOT OVERRIDE DISPOSITION
         MVI   DA18DPS2,DA18DEL    YES, DELETE THE SYSOUT REPORT FILE
         XC    MYECB,MYECB
         LA    R1,MYDAPL
         L     R15,CVTPTR(,0)      CVT
         L     R15,CVTDAIR-CVT(,R15)
         BASR  R14,R15             FREE OUTPUT REPORT FILE
         B     LOADEXIT
         SPACE
LOADCNCL MVI   MSG,29              REQUEST CANCELLED
         SPACE
LOADEXIT NI    STATUS4,255-$4ATTN  RESET ATTENTION FLAG
         NI    STATUS10,255-$10PSP NORMAL SCREEN WRITES AND PARSE INPUT
         OI    STATUS7,$7RESHO     TELL REVCOMM TO RESTORE SCREEN SIZE
         OI    STATUS10,$10CDR     TELL ISPF TO RESEND WHOLE SCREEN
         OI    STATUS4,$4REFR      TELL REVPDS TO PAINT WHOLE SCREEN
         LA    R0,$PDSWKLN
         LR    R1,R13              POINT TO DYNAMIC AREA TO BE FREED
         DROP  R13                 @PDSLDWK
         L     R13,4(,R13)         POINT TO PREVIOUS SAVE AREA
         OI    11(R13),X'01'       INVALIDATE FORWARD POINTER
         FREEMAIN R,LV=(0),A=(1)   FREE @PDSLDWK
         XASAM31
         L     R14,12(,R13)        LOAD RETURN ADDRESS
         LM    R0,R12,20(R13)      RESTORE OTHER REGISTERS
         BR    R14                 RETURN WITH FREEMAIN RETURN CODE
         SPACE
         DROP  R11                 REVLOAD
         TITLE '  R E V L O A D   -   S T A T I C   A R E A  '
LDBLANKS DC    CL8' '
LDFLD1IN DCS   (9,14)              INPUT BUFFER ADDRESS FOR DSNAME
LDFLD2IN DCS   (15,41)             INPUT BUFFER ADDRESS FOR MEMBER MASK
LDFLD3IN DCS   (19,42)             INPUT BUFFER ADDRESS FOR STATS Y/N
HEXL     DC    C'0123456789ABCDEF' HEXADECIMAL DIGIT TRANSLATE TABLE
LDATTCHS ATTACH EP=PDSLOAD,ECB=,SZERO=NO,SF=L
LDATTCHL EQU   *-LDATTCHS
LDATTCHM ATTACH EP=REVLMOD,ECB=,SZERO=NO,SF=L
         SPACE
LDP1TEMP DC    AL2(29),C'NEW,SPF,S(********),UPDTE(><)'
LOADSTAR EQU   LDP1TEMP+12,8       ASTERISKS
         SPACE
LOADFIXM DC    C'>>> INPUT FIELD HAS BAD OR MISSING DATA - PLEASE FIX <+
               <<'
LOADFIXL EQU   *-LOADFIXM
         SPACE
LDLN1A   DC    AL1(FLDOUTHI),CL6'REVIEW'
LDLN1B   DC    CL30'PDS UPDATE REQUEST ENTRY PANEL'
LDLN1ED  DC    CL4'EDIT'
LDLN1CPY DC    CL24'COPY REQUEST ENTRY PANEL'
LDLN1C   DC    CL5'R&REL'
LDLN8    DC    AL1(FLDOUTLO)
         DC    CL38'SPECIFY INPUT SEQUENTIAL DATA SET NAME'
         DC    AL1(FLDOUTHI)
LDLN9    DC    C'==>',AL1(FLDINHI)
LDLN15   DC    CL34'MEMBER NAME PROCESSING FILTER MASK',AL1(FLDOUTHI)
         DC    C'==>',AL1(FLDINHI)
         DC    C'********',AL1(FLDOUTLO)
         DC    C' (*, % AND ? CAN MASK 1 CHAR)'
LDLN15L  EQU   *-LDLN15
LDLN19   DC    CL35'GENERATE/CORRECT MEMBER STATISTICS?',AL1(FLDOUTHI)
         DC    C'==>',AL1(FLDINHI)
         DC    C'N',AL1(FLDOUTLO)
         DC    C'(Y/N)  '
         DC    C'(SSI WILL BE DISCARDED IF Y)'
LDLN19L  EQU   *-LDLN19
         SPACE
         DC    0D'0'
         LTORG
         SPACE
         DC    0D'0'               END OF CSECT
         TITLE '  R E V L O A D   -   D Y N A M I C   A R E A  '
@PDSLDWK DSECT
         DS    18F                 REGISTER SAVE AREA
LOADMMSK DS    CL8                 MEMBER NAME LOAD MASK
LDINMEM  DS    CL8                 INPUT MEMBER NAME
LDINDSNL DS    H                   INPUT DSNAME LENGTH
LDINDSN  DS    CL70                INPUT DSNAME
LDTCBADR DS    A                   ATTACHED TCB ADDRESS
LDATTCHD DS    XL(LDATTCHL)        ATTACH CONTROL PARAMETER LIST
LDPARM1  DS    A                   POINTER TO USUAL PROGRAM PARAMETER
LDPARM2  DS    A                   POINTER TO DD OVERRIDE PARAMETER
GENSTATS DS    C
LDSNFLAG DS    X
$LD1     EQU   1                   DATA SET NAME IS QUOTED
$LD4     EQU   4                   UTILITY SYSOUT DD ALLOCATED
$LD128   EQU   128                 NEED TO RECONSTRUCT SCREEN CONTENTS
LDDDLEN  DS    H                   LENGTH OF DD SLOT LIST
         DS    CL8                 SYSLIN SLOT
         DS    CL8                 OUTPUT MEMBER NAME SLOT
         DS    CL8                 SYSLMOD SLOT
         DS    CL8                 SYSLIB SLOT
LDINDDN  DS    CL8                 SYSIN SLOT
LDPRTDDN DS    CL8                 SYSPRINT SLOT
         DS    CL8                 SYSPUNCH SLOT
         DS    CL8                 SYSUT1 SLOT
LDOUTDDN DS    CL8                 SYSUT2 SLOT
         DS    CL8                 SYSUT3 SLOT
         DS    CL8                 SYSUT4 SLOT
$LDSAVE  DS    XL($DSVARSZ)        SAVE AREA FOR SUBJECT DETAILS
$LDDSCB  DS    XL140               SAVE AREA FOR OBTAINED DSCB
$LDST1   DS    X                   SAVE AREA FOR STATUS
$LDST3   DS    X                   SAVE AREA FOR STATUS3
$LDST10  DS    X                   SAVE AREA FOR STATUS10
$LDST11  DS    X                   SAVE AREA FOR STATUS11
LDDFBUFS DS    64D                 512 BYTES FOR DAIRFAIL DFBUFS
         DS    0D                  END OF DSECT
$PDSWKLN EQU   *-@PDSLDWK
         TITLE '  R E V D L N K  '
**********************************************************************
*                                                          *         *
*         DELINK LOAD MODULES AND WRITE OBJECT DECKS       *  GP@P6  *
*                                                          *  05/99  *
**********************************************************************
         SPACE
**********************************************************************
*                                                                    *
*        THIS ROUTINE PROVIDES THE CAPABILITY OF DELINKING           *
*        LOAD MODULES AND WRITING OBJECT DECKS TO A SEQUENTIAL       *
*        OUTPUT FILE.  PROGRAM OBJECTS ARE NOT SUPPORTED.  A         *
*        PARTITIONED DATA SET WITH RECFM=U WHICH IS NOT A PDSE       *
*        MUST BE BEING REVIEWED.                                     *
*                                                                    *
*        DAVID NOON'S DELINKER WRITTEN IN PL/I FROM CBT FILE 90      *
*        WILL BE ATTACHED BY REVIEW TO PERFORM THE DELINKING         *
*        PROCESS.  'DELINKI' USES THE FOLLOWING FILES:               *
*           SYSLIB   - LOAD MODULE INPUT.                            *
*                      THIS IS THE PDS BEING REVIEWED.               *
*           SYSIN    - CONTROL STATEMENT INPUT.                      *
*                      THIS IS ALLOCATED AND PRIMED BY REVDLNK.      *
*           SYSLIN   - OBJECT DECK OUTPUT FILE.                      *
*                      MUST BE PRE-ALLOCATED BY THE USER.            *
*           LINKCNTL - USER-SUPPLIED LINKAGE EDITOR STATEMENTS.      *
*                      A DUMMY FILE IS ALLOCATED BY REVDLNK.         *
*           SYSPRINT - REPORT OUTPUT FILE.                           *
*                      A DUMMY FILE IS ALLOCATED BY REVDLNK.         *
*                                                                    *
*        NOTE THAT THE ABOVE ARE DEFAULT DDNAMES.  REVDLNK USES      *
*        THE OPTIONAL 40-BYTE PROGRAM PARAMETER TO SPECIFY THE       *
*        ACTUAL 5 DDNAMES (IN THE ORDER ABOVE) TO BE USED BY         *
*        DELINKI.                                                    *
*                                                                    *
*        DELINKI REQUIRES THAT SYSIN, SYSLIN AND LINKCNTL HAVE       *
*        FIXED-LENGTH 80-BYTE RECORDS.  THE FILES ALLOCATED          *
*        FOR SYSIN, LINKCNTL AND SYSPRINT ARE DELETED AFTER          *
*        DELINKI TERMINATES.                                         *
*                                                                    *
*        IF ANY MEMBERS ARE TAGGED, THEN ONLY TAGGED MEMBERS ARE     *
*        DELINKED.  IF NO MEMBERS ARE TAGGED THEN ALL MEMBERS ARE    *
*        DELINKED.                                                   *
*                                                                    *
**********************************************************************
         SPACE
**********************************************************************
*                                                                    *
* REGISTERS ON ENTRY: R9 -> @DATA                                    *
*                     R13-> @PDSAREA                                 *
*                                                                    *
* DURING PROCESSING:  R3 -> @PDSAREA                                 *
*                     R13-> @DLNKWRK (LOCAL GETMAINED AREA)          *
*                                                                    *
* RETURN CODES:       R15 SET FROM IKJDAIR FILE ALLOCATION           *
*                           0 IF ATTACH ISSUED (ALLOCATIONS OKAY)    *
*                           OTHERWISE ALLOCATION FAILED SO DELINKI   *
*                                 WAS NOT ATTACHED                   *
*                     READR = SUBTASK COMPLETION CODE                *
*                             (HIGH BYTE ZERO IF ATTACH ISSUED)      *
*                                                                    *
**********************************************************************
         EJECT
REVDLNK  RSECT
REVDLNK  AMODE 31
REVDLNK  RMODE 24
         B     @DELINK-*(,R15)
         DC    AL1(7),CL7'REVDLNK'
@DELINK  STM   R14,R12,12(R13)
         LR    R11,R15
         USING REVDLNK,R11
         LA    R0,$DLNKWKL
         MVI   GETMNTRC,60         TRACK GETMAIN IN CASE OF FAILURE
         GETMAIN R,LV=(0)          GET MAIN STORAGE
         ST    R1,8(,R13)          CHAIN SAVE AREAS
         ST    R13,4(,R1)
         LR    R3,R13              POINT TO @PDSAREA FROM REVPDS
         USING @PDSAREA,R3
         USING OAIAREA,PO_OAIA
         LR    R13,R1              POINT TO GETMAINED AREA
         USING @DLNKWRK,R13
         MVC   DLSYSIND(DLSYSINL),DLSYSINS
         MVC   DLATTCHD(DLATTCHL),DLATTCHS
         USING IHADCB,DLSYSIND
         SPACE
         SPACE
************************************************************
*                                                          *
*         ALLOCATE FILE AND SET PROGRAM PARAMETER          *
*                                                          *
************************************************************
         SPACE
         LA    R1,DLPARML
         ST    R1,DLPARMAD         SET PROGRAM PARAMETER ADDRESS
         OI    DLPARMAD,X'80'      ONE PARAMETER IN PLIST
         XC    DLPARML(42),DLPARML CLEAR RESIDUAL DATA
         MVI   DLPARML+1,40        SET PROGRAM PARAMETER LENGTH
         MVC   DLSYSLIB,$DDNAME    SET LOAD MODULE PDS DDNAME
         MVC   DLSYSLIN,OAIADDN    SET OBJECT DECK OUTPUT DDNAME
         SPACE
         XC    MYDAPB,MYDAPB       ALLOCATE "SYSIN"
         MVI   DA08CD+1,X'08'
         MVC   DA08DDN,=CL8' '
         MVC   DA08UNIT,=CL8' '
         MVC   DA08SER,=CL8' '
         MVC   DA08MNM,=CL8' '
         MVC   DA08PSWD,=CL8' '
         MVI   DA08DSP1,DA08NEW
         MVI   DA08DPS2,DA08DELE
         MVI   DA08DPS3,DA08DEL
         MVI   DA08CTL,DA08TRKS    SPACE=(TRK,(1,3))
         MVI   DA08PQTY+3,1
         MVI   DA08SQTY+3,3
         XC    MYECB,MYECB
         LA    R1,MYDAPL
         L     R15,CVTPTR(,0)      CVT
         L     R15,CVTDAIR-CVT(,R15)
         BASR  R14,R15
         LTR   R2,R15
         BNZ   DLDAFAIL            DYNAMIC ALLOCATION FAILED
         MVC   DLSYSIN,DA08DDN     COPY GENERATED DD NAME
         SPACE
         XC    MYDAPB,MYDAPB       ALLOCATE "LINKCNTL"
         MVI   DA08CD+1,X'08'
         MVC   DA08DDN,=CL8' '
         MVC   DA08UNIT,=CL8' '
         MVC   DA08SER,=CL8' '
         MVC   DA08MNM,=CL8' '
         MVC   DA08PSWD,=CL8' '
         MVI   DA08CTL,DA08DMMY    DUMMY
         XC    MYECB,MYECB
         LA    R1,MYDAPL
         L     R15,CVTPTR(,0)      CVT
         L     R15,CVTDAIR-CVT(,R15)
         BASR  R14,R15
         ST    R15,16(,R3)         SET REVDLNK RETURN CODE
         LTR   R2,R15
         BNZ   DLDAFAIL            DYNAMIC ALLOCATION FAILED
         MVC   DLLNKCTL,DA08DDN    COPY GENERATED DD NAME
         MVC   DCBDDNAM,DLLNKCTL   SET "LINKCNTL" DDNAME IN DCB
         MVI   OPEND,X'80'         OPEN THE OUTPUT DCB
         OPEN  (DLSYSIND,OUTPUT),MF=(E,OPEND)
         MVI   CLOSED,X'80'        DCB VALUES NOW SET IN JFCB
         CLOSE (DLSYSIND),MF=(E,CLOSED)
         SPACE
         XC    MYDAPB,MYDAPB       ALLOCATE "SYSPRINT"
         MVI   DA08CD+1,X'08'
         MVC   DA08DDN,=CL8' '
         MVC   DA08UNIT,=CL8' '
         MVC   DA08SER,=CL8' '
         MVC   DA08MNM,=CL8' '
         MVC   DA08PSWD,=CL8' '
         MVI   DA08CTL,DA08DMMY    DUMMY
         XC    MYECB,MYECB
         LA    R1,MYDAPL
         L     R15,CVTPTR(,0)      CVT
         L     R15,CVTDAIR-CVT(,R15)
         BASR  R14,R15
         ST    R15,16(,R3)         SET REVDLNK RETURN CODE
         LTR   R2,R15
         BNZ   DLDAFAIL            DYNAMIC ALLOCATION FAILED
         MVC   DLSYSPRT,DA08DDN    COPY GENERATED DD NAME
         SPACE
         SPACE
************************************************************
*                                                          *
*         PRIME "SYSIN" WITH DELINKI CONTROL STATEMENTS    *
*                                                          *
************************************************************
         SPACE
         MVC   DCBDDNAM,DLSYSIN    SET "SYSIN" DDNAME IN DCB
         MVI   OPEND,X'80'         OPEN THE OUTPUT DCB
         OPEN  (DLSYSIND,OUTPUT),MF=(E,OPEND)
         MVI   DLNKREC,C' '        SETUP OUTPUT RECORD BUFFER
         MVC   DLNKREC+1(79),DLNKREC
         MVC   DLNKREC+1(7),=C'MEMBER('
         SPACE
         LA    R4,DIRENTS          POINT TO FIRST INTERNAL ENTRY
         USING PO_SECT,R4
DLKMEMLP C     R4,LSTMEMAD         END OF INTERNAL DIRECTORY ENTRIES?
         BNL   DLKCTLOK            YES, END UP
         CLI   12(R4),0            DELETED MEMBER?
         BE    DLKNXTMM            YES, IGNORE THIS ENTRY
         ICM   R14,15,TAGCOUNT     DELINKING EVERYTHING?
         BZ    DLKITALL            YES
         TM    PO_FLG,$POTAG       NO, DELINKING THIS ONE?
         BZ    DLKNXTMM            NO, TRY THE NEXT
DLKITALL MVC   DLNKREC+8(8),PO_MEM COPY MEMBER NAME
         LA    R1,DLNKREC+15       POINT TO LAST BYTE OF MEMBER NAME
         MVI   1(R1),C')'          COMPLETE CONTROL STATEMENT
         MVI   2(R1),C'.'
DLKBLKLP CLI   0(R1),C' '          TRAILING BLANK IN MEMBER NAME?
         BNE   DLKPUTIT            NO, OUTPUT RECORD READY TO WRITE
         MVC   0(3,R1),1(R1)       YES, SHUFFLE UP TO OVERLAY
         BCT   R1,DLKBLKLP         BACK UP A BYTE AND CHECK AGAIN
DLKPUTIT XASAM24
         PUT   DLSYSIND,DLNKREC    WRITE CONTROL STATEMENT
         XASAM31
DLKNXTMM LA    R4,PO_NXT           POINT TO NEXT INTERNAL ENTRY
         B     DLKMEMLP            PROCESS THE NEXT DIRECTORY ENTRY
         DROP  R4                  PO_SECT
         SPACE
DLKCTLOK MVI   CLOSED,X'80'        CLOSE THE OUTPUT DCB
         CLOSE (DLSYSIND),MF=(E,CLOSED)
         FREEPOOL DLSYSIND         FREE BUFFERS
         SPACE
         SPACE
************************************************************
*                                                          *
*         ATTACH DELINKI                                   *
*                                                          *
************************************************************
         SPACE
         SR    R1,R1
         ST    R1,READR            CLEAR ECB
         LA    R1,DLPARMAD         POINT TO PLIST FOR UTILITY
         ATTACH ECB=READR,SF=(E,DLATTCHD)
         ST    R1,DLTCBADR         SAVE TCB ADDRESS
         WAIT  ECB=READR
         MVI   READR,0             RESET FLAG BYTE OF ECB
         DETACH DLTCBADR           DETACH UTILITY TCB
         SPACE
         SPACE
************************************************************
*                                                          *
*         FREE FILES AND TERMINATE                         *
*                                                          *
************************************************************
         SPACE
DLNKTERM LA    R2,DLSYSIN
         BAS   R4,DLFREEDD         FREE "SYSIN"
         LA    R2,DLLNKCTL
         BAS   R4,DLFREEDD         FREE "LINKCNTL"
         LA    R2,DLSYSPRT
         BAS   R4,DLFREEDD         FREE "SYSPRINT"
         SPACE
         LA    R0,$DLNKWKL
         LR    R1,R13              POINT TO DYNAMIC AREA TO BE FREED
         DROP  R13,R3              @DLNKWRK, @PDSAREA, OAIAREA
         L     R13,4(,R13)         POINT TO PREVIOUS SAVE AREA
         OI    11(R13),X'01'       INVALIDATE FORWARD POINTER
         FREEMAIN R,LV=(0),A=(1)   FREE @DLNKWRK
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 RETURN WITH DA08 RETURN CODE
         SPACE
         SPACE
************************************************************
*                                                          *
*         FILE DEALLOCATION SUBROUTINE                     *
*                                                          *
************************************************************
*                                                          *
* REGISTERS ON ENTRY: R2 -> DDNAME TO BE DEALLOCATED       *
*                     R4 -> CALLER'S RETURN POINT          *
*                                                          *
* ON EXIT R15 HAS IKJDAIR RETURN CODE WHICH IS NOT TESTED. *
* DEALLOCATIONS ARE ASSUMED TO BE SUCCESSFUL.              *
*                                                          *
************************************************************
         SPACE
DLFREEDD SR    R15,R15             NO ERROR IF NO DDNAME
         CLI   0(R2),0             NULL DDNAME?
         BER   R4                  YES, NOTHING TO FREE
         XC    MYDAPB,MYDAPB
         MVI   DA18CD+1,X'18'
         MVC   DA18DDN,0(R2)       LOAD DDNAME TO DEALLOCATE
         MVC   DA18MNM,=CL8' '
         MVC   DA18SCLS,=CL8' '    (2-BYTE FIELD)
         XC    MYECB,MYECB
         LA    R1,MYDAPL
         L     R15,CVTPTR(,0)      CVT
         L     R15,CVTDAIR-CVT(,R15)
         BASR  R14,R15             CALL IKJDAIR
         BR    R4                  RETURN TO CALLER
         SPACE
         SPACE
************************************************************
*                                                          *
*         PROCESS FILE ALLOCATION FAILURE                  *
*                                                          *
************************************************************
         SPACE
DLDAFAIL LA    R1,MYDFPARM
*        USING DFDSECTD,R1         MAPPED BY IKJEFFDF DFDSECT=YES MACRO
         ST    R2,MYDFRC           IKJDAIR RETURN CODE
         LA    R15,MYDFRC
         ST    R15,4(,R1)          DFRCP
         LA    R15,MYDAPL
         ST    R15,0(,R1)          DFDAPLP
         SR    R15,R15
         ST    R15,MYJEFF02
         LA    R15,MYJEFF02
         ST    R15,8(,R1)          DFJEFF02
         LA    R15,1               DFDAIR               (DFSVC99 IS 50)
         STH   R15,MYDFID
         LA    R15,MYDFID
         ST    R15,12(,R1)         DFIDP
         MVC   16(4,R1),CPPLPTR    DFCPPLP
*        DROP  R1                  DFDSECTD
         LINK  EP=IKJEFF18,SF=(E,LINKAREA)
         B     DLNKTERM            TERMINATE REVDLNK
         SPACE
         SPACE
         DROP  R11                 REVDLNK
         SPACE
         TITLE '  R E V D L N K   -   S T A T I C   A R E A  '
         PRINT NOGEN
DLATTCHS ATTACH EP=DELINKI,ECB=,SZERO=NO,SF=L
DLATTCHL EQU   *-DLATTCHS
         SPACE
DLSYSINS DCB   DSORG=PS,MACRF=PM,DDNAME=DL-SYSIN,                      +
               RECFM=FB,LRECL=80,BLKSIZE=3120
DLSYSINL EQU   *-DLSYSINS
         PRINT GEN
         SPACE
         DC    0D'0'
         LTORG
         SPACE
         DC    0D'0'               END OF CSECT
         TITLE '  R E V D L N K   -   D Y N A M I C   A R E A  '
@DLNKWRK DSECT
         DS    18F                 REGISTER SAVE AREA
DLNKREC  DS    80C                 CONTROL STATEMENT BUFFER
DLATTCHD DS    XL(DLATTCHL)        ATTACH CONTROL PARAMETER LIST
DLSYSIND DS    XL(DLSYSINL)        DCB FOR DELINKI'S "SYSIN" FILE
DLTCBADR DS    A                   ATTACHED TCB ADDRESS
DLPARMAD DS    A                   POINTER TO PROGRAM PARAMETER
DLPARML  DS    H                   LENGTH OF PROGRAM PARAMETER
DLSYSLIB DS    CL8                 SYSLIB SLOT
DLSYSIN  DS    CL8                 SYSIN SLOT
DLSYSLIN DS    CL8                 SYSLIN SLOT
DLLNKCTL DS    CL8                 LINKCNTL SLOT
DLSYSPRT DS    CL8                 SYSPRINT SLOT
         DS    0D                  END OF DSECT
$DLNKWKL EQU   *-@DLNKWRK
         TITLE '  R E V D I V  '
**********************************************************************
*                                                          *         *
*         "DATA-IN-VIRTUAL" STORAGE MANAGER                *  GP@P6  *
*                                                          *  10/88  *
**********************************************************************
         SPACE
**********************************************************************
*                                                                    *
*        THIS ROUTINE PROVIDES THE CAPABILITY OF SPEEDING UP         *
*        ACCESS TO REVIEWED DATA BY SAVING PREVIOUSLY READ DATA      *
*        IN VIRTUAL STORAGE.  REGION STORAGE IS USED WITH THE        *
*        EXTENDED REGION BEING THE AREA INTENDED TO HOUSE THE        *
*        DATA.                                                       *
*                                                                    *
*        THE ORIGINAL INTENT WAS TO IMPROVE PERFORMANCE, BUT         *
*        NOW THE MAIN PURPOSE IS TO ALLOW THE BROWSING OF DATA       *
*        WHICH DOES NOT EXIST IN A DATA SET AS SUCH, AND THE         *
*        EASY REFERENCING OF FILE DATA WITHOUT FURTHER I/O.          *
*        EXAMPLES ARE: THE FORMATTED DIRECTORY OF A ZIP ARCHIVE,     *
*        THE CONTENTS OF TSO HELP WITH INCLUDE MEMBERS RESOLVED,     *
*        THE OUTPUT OF PROCESSES SUCH AS LISTCAT AND REVHIST         *
*        PROCESSING, DATA SETS OF SUBSYSTEMS WHICH DO NOT ALLOW      *
*        NOTE/POINT, AND SO ON.                                      *
*                                                                    *
*        THE ORIGINAL SCHEME OF A SINGLE CHUNK OF STORAGE LARGE      *
*        ENOUGH FOR THE ENTIRE BODY OF DATA HAS NOW BEEN REPLACED    *
*        BY A SCHEME WHICH ALLOWS FOR THE AREA TO BE EXPANDED AS     *
*        REQUIRED IF THE STORAGE IS AVAILABLE.                       *
*                                                                    *
*        SINCE THESE CHUNKS OF STORAGE WILL ACT LIKE AN INDEX        *
*        FOR RECORD RETRIEVAL, THE METHOD OF USING FIXED-LENGTH      *
*        SLOTS WHICH CAN ACCOMODATE MAXIMUM-LENGTH RECORDS HAS       *
*        BEEN DISPENSED WITH, AS HAS THE IDEA OF TRIMMING UNUSED     *
*        STORAGE ONCE END-OF-DATA HAS BEEN REACHED.                  *
*                                                                    *
**********************************************************************
         EJECT
**********************************************************************
*                                                                    *
*                   COUNT = RELATIVE RECORD NUMBER                   *
*                                                                    *
* REGISTERS ON ENTRY: R15-> REVDIV                                   *
*                     R14-> RETURN ADDRESS                           *
*                     R9 -> @DATA                                    *
*                     R4 -> DCB                                      *
*                     R0  = ENTRY CODE                               *
*                           0 = GETMAIN DIV STORAGE                  *
*                           4 = STORE A RECORD                       *
*                             R1 = RECORD LENGTH ON ENTRY            *
*                             R2 = RECORD ADDRESS ON ENTRY           *
*                            TTR = RECORD'S BLOCK LOCATION           *
*                           8 = RETRIEVE A RECORD                    *
*                             R1 = RECORD LENGTH ON EXIT             *
*                             R2 = RECORD ADDRESS ON EXIT            *
*                            TTR = RECORD'S BLOCK LOCATION ON EXIT   *
*                          12 = RELEASE DIV SYSTEM STORAGE           *
*                          16 = FREEMAIN DIV STORAGE                 *
*                          20 = ACTIVATE STORAGE ACCESS ESTAE        *
*                             R1 = RETRY ROUTINE ADDRESS             *
*                             FLAG $14STAE SET IF ESTAE ACTIVE       *
*                                                                    *
* RETURN CODES:       R15 = 0         PROCESSING COMPLETE            *
*                     R15 = 4         PROCESSING INCOMPLETE          *
*                                                                    *
**********************************************************************
         SPACE
REVDIV   RSECT
REVDIV   AMODE 31                  CACHE DATA IN EXTENDED REGION
         B     @DIV-*(,R15)
         DC    AL1(7),CL7'REVDIV'
@DIV     STM   R14,R12,12(R13)
         LR    R10,R15
         LA    R15,1
         LA    R11,4095(R15,R10)
         USING REVDIV,R10,R11
         LR    R15,R0              GET ENTRY CODE
         B     DIVENTYS(R15)       BRANCH TO ENTRY POINT
DIVENTYS B     DIVGETMN        0 - CREATE DIV VIRTUAL STORAGE AREA
         B     DIVSTORE        4 - STORE A RECORD
         B     DIVRETRV        8 - RETRIEVE A RECORD
         B     DIVPGREL       12 - RELEASE DIV REAL & AUXILIARY STORAGE
         B     DIVFREMN       16 - FREE DIV VIRTUAL STORAGE AREA
         B     DIVESTAE       20 - ACTIVATE STORAGE ACCESS ESTAE
         SPACE
*
*    DIVGETMN WILL ACQUIRE THE STORAGE FOR THE FIRST DIVAREA
*    AND ACTIVATE REVIEW'S INTERNAL DATA-IN-VIRTUAL FACILITY.
*
DIVGETMN DS    0H                  DIV ENTRY CODE 0
         TM    STATUS9,$9BRVS      BROWSING VIRTUAL STORAGE?
         BO    DIVGOTIT            YES, NO NEED TO ACQUIRE MORE
         XC    DIVCHKPT,DIVCHKPT   RESET DIV CHECKPOINT
         ICM   R1,15,DIVORG        POINT TO FIRST DIV AREA
         BM    DIVISBAD            DIV SETUP FAILED PREVIOUSLY
         BP    DIVPGREL            DIV SETUP WORKED PREVIOUSLY
         ICM   R2,15,DIVSZREQ      ANY SPECIFIC SIZE REQUESTED?
         BP    DIVGETSZ            YES, USE IT
         LA    R2,64               NO
         SLL   R2,10               USE 64KB
DIVGETSZ LR    R0,R2               GET STORAGE CHUNK SIZE
         MVI   GETMNTRC,61         TRACK GETMAIN IN CASE OF FAILURE
         GETMAIN RC,LV=(0),LOC=(31,64),BNDRY=PAGE
         LTR   R15,R15             SUCCESS?
         BNZ   DIVISBAD            NO, OUT OF STORAGE
         ST    R15,DIVHITTR        YES, RESET HIGH TTR
         ST    R15,DIVSZREQ        CLEAR SPECIFIC REQUEST SIZE
         BCTR  R15,0               GET HIGH VALUES
         ST    R15,DIVHICNT        SET STORED RECORD COUNT TO -1
         ST    R15,DIVCPCNT        SET UNUSABLE CHECKPOINT ENTRY
         ST    R1,DIVORG           SAVE NEW STORAGE ADDRESS
         ST    R1,DIVLASTA         FIRST IS ALSO THE LAST
         USING DIVAREA,R1
         ST    R2,DIVALEN          SAVE THE STORAGE AREA SIZE
         AR    R2,R1               POINT PAST NEW STORAGE
         LA    R0,DIVABGN          POINT PAST HEADER
         ST    R2,DIVALIM          SAVE CHUNK STORAGE LIMIT
         ST    R0,DIVAREC          SAVE FIRST RECORD ADDRESS
         MVC   DIVAMKR,DIVMARKR    LOAD STRING TO IDENTIFY AREA
         DROP  R1                  DIVAREA
DIVGOTIT NI    STATUS8,255-DIVFULL NO RECORD STORE HAS FAILED YET
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         SR    R15,R15             GETMAIN WAS SUCCESSFUL
         BR    R14                 NORMAL RETURN FOR ENTRY CODE 0
DIVBELOW MVI   DIVORG,X'FF'        NO, FLAG FAILURE
DIVISBAD OI    STATUS8,DIVFULL     DIV WILL NO LONGER SAVE FILE I/O
DIVNOACT LM    R14,R12,12(R13)     RESTORE REGISTERS
         LA    R15,4               LOAD NON-ZERO RETURN CODE
         BR    R14                 RETURN TO CALLER
         SPACE
*
*    DIVSTORE IS ONLY CALLED TO STORE THE NEXT SEQUENTIAL RECORD
*    AFTER THE MOST RECENTLY STORED RECORD.  AS A RESULT, THE
*    MOST RECENT RECORD CHECKPOINT MECHANISM IS NOT USED HERE.
*
DIVSTORE DS    0H                  DIV ENTRY CODE 4
         TM    STATUS9,$9BRVS      BROWSING VIRTUAL STORAGE?
         BO    DIVSTORX            YES, NO NEED TO STORE ANYTHING
         TM    STATUS8,DIVFULL     STORAGE AREA FULL?
         BO    DIVNOACT            YES, CANNOT STORE THIS RECORD
         ICM   R5,15,DIVLASTA      POINT TO THE LATEST DIV HOLD AREA
         BNP   DIVISBAD            NO DIV STORAGE SO RETURN
         USING DIVAREA,R5
         L     R0,COUNT            GET RELATIVE RECORD NUMBER
         S     R0,DIVHICNT         SUBTRACT THAT OF LAST RECORD STORED
         BCT   R0,DIVNOACT         IGNORE REQUEST IF NOT THE NEXT ONE
         L     R6,DIVAREC          POINT TO PLACE TO STORE RECORD
         LR    R7,R1               GET THE RECORD LENGTH
         LR    R3,R1               GET THE RECORD LENGTH
         LA    R7,DIVOVHD+7(,R7)   ALLOW FOR RECORD OVERHEAD
         LA    R8,8                GET 8
         LNR   R8,R8               GET -8
         NR    R7,R8               ROUND TO DOUBLEWORD BOUNDARY
         AR    R7,R6               DERIVE WHERE TO STORE NEXT RECORD
         C     R7,DIVALIM          WILL IT FIT?
         BNH   DIVSTREC            YES, GO STORE THE RECORD
         LA    R0,2048-DIVOVHD     GET ARBITRARY LENGTH LIMIT
         CR    R3,R0               RECORD TOO LONG TO CONTINUE?
         BH    DIVISBAD            YES, RULE OFF CACHED DATA NOW
         CLI   DIVLASTA,0          LATEST CHUNK ABOVE THE LINE?
         BNE   DIVSTGET            YES, TRY FOR MORE STORAGE
         TM    OSBITS,X'82'        31-BIT ADDRESSING ALLOWED?
         BO    DIVISBAD            YES, SO EXTENDED REGION IS FULL
DIVSTGET L     R4,DIVALEN          GET SIZE FOR NEW DIVAREA
         LR    R0,R4               GET STORAGE CHUNK SIZE
         MVI   GETMNTRC,61         TRACK GETMAIN IN CASE OF FAILURE
         GETMAIN RC,LV=(0),LOC=(31,64),BNDRY=PAGE
         LTR   R15,R15             SUCCESS?
         BNZ   DIVISBAD            NO, CANNOT OBLIGE
         ST    R1,DIVAFWD          YES, ENCHAIN NEW STORAGE
         ST    R1,DIVLASTA         IT IS ALSO THE NEW LAST DIVAREA
         L     R0,DIVAREL          GET OLD LAST DIVAREA RELATIVE COUNT
         A     R0,DIVAPOP          GET NEW LAST DIVAREA RELATIVE COUNT
         LR    R5,R1               POINT TO NEW DIVAREA
         ST    R4,DIVALEN          SAVE THE STORAGE AREA SIZE
         AR    R4,R1               POINT PAST NEW STORAGE
         LA    R6,DIVABGN          POINT PAST HEADER
         ST    R4,DIVALIM          SAVE CHUNK STORAGE LIMIT
         ST    R0,DIVAREL          SAVE BASE RELATIVE RECORD NUMBER
         ST    R6,DIVAREC          SAVE FIRST RECORD ADDRESS
         MVC   DIVAMKR,DIVMARKR    LOAD STRING TO IDENTIFY AREA
DIVSTREC ST    R3,0(,R6)           SET THE RECORD LENGTH
         MVC   4(4,R6),TTR         SAVE THE BLOCK TTR
         LA    R14,8(,R6)          POINT TO START OF DATA TARGET
         LTR   R15,R3              GET THE RECORD LENGTH
         BNP   DIVSTORD            NO DATA SO THIS BIT ALL DONE
         MVCL  R14,R2              LOAD THE RECORD'S DATA
         LA    R14,7(,R14)
         NR    R14,R8              GET ADDRESS FOR NEXT RECORD
DIVSTORD ST    R14,DIVAREC         SAVE IT FOR NEXT TIME
         LA    R0,1
         A     R0,DIVAPOP          INCREMENT DIVAREA'S RECORD COUNT
         ST    R0,DIVAPOP
         MVC   DIVHICNT,COUNT      SAVE THE NEW HIGH RECORD COUNT
         MVC   DIVHITTR,TTR        SAVE THE NEW HIGH TTR
         LTR   R3,R3               REACHED END OF DATA?
         BNM   DIVSTORX            NO
         ST    R3,DIVHITTR         YES, NO HIGHER TTRS ARE POSSIBLE
         DROP  R5                  DIVAREA
DIVSTORX LM    R14,R12,12(R13)     RESTORE REGISTERS
         SR    R15,R15             RECORD STORAGE WAS SUCCESSFUL
         BR    R14                 NORMAL RETURN FOR ENTRY CODE 4
         SPACE
*
*    DIVRETRV PERFORMS RETRIEVAL FOR ANY RECORD PREVIOUSLY STORED
*    BY DIV.  THERE ARE NO RESTRICTIONS ON THE ORDER OF RETRIEVAL.
*
DIVRETRV DS    0H                  DIV ENTRY CODE 8
         TM    STATUS9,$9BRVS      BROWSING VIRTUAL STORAGE?
         BO    DIVRBRVS            YES, GO ATTEMPT TO ACCESS IT
         ICM   R5,15,DIVORG        POINT TO THE DIV HOLD AREA
         BNP   DIVISBAD            NO DIV STORAGE SO RETURN
         USING DIVAREA,R5
         ICM   R0,15,DIVAPOP       ANY DATA STORED BY DIV?
         BZ    DIVNOACT            NO, NO DATA TO FETCH
         CLC   COUNT,DIVHICNT      STORED THIS RECORD BEFORE?
         BH    DIVNOACT            NO, THIS RECORD WAS NOT STORED
         LA    R5,DIVORG           POINT TO DIVAREA CHAIN ORIGIN
         L     R6,COUNT            GET SPECIFIED RELATIVE RECORD COUNT
         CL    R6,DIVCPCNT         REQUESTED RECORD BEFORE SAVED ONE?
         BL    DIVRTALP            YES, TAKE IT FROM THE TOP
         LA    R5,DIVCPAAD         NO, USE SAVED DIVAREA ADDRESS
DIVRTALP ICM   R5,15,DIVAFWD       POINT TO THE NEXT DIVAREA
         BZ    DIVNOACT            SEEM TO HAVE LOST THAT ONE...
         L     R0,DIVAREL          GET RECORDS BEFORE THIS DIVAREA
         A     R0,DIVAPOP          ADD RECORDS IN THIS DIVAREA
         C     R0,COUNT            UP TO RECORD'S DIVAREA YET?
         BNH   DIVRTALP            NO, LOOP THROUGH AREA CHAIN
         L     R6,COUNT            GET SPECIFIED RELATIVE RECORD COUNT
         LA    R7,DIVABGN          POINT TO FIRST RECORD IN DIVAREA
         LA    R8,DIVAREL          POINT TO BASE TO SUBTRACT
         CL    R6,DIVCPCNT         EARLIER THAN CHECKPOINTED RECORD?
         BL    DIVRTPRE            YES, DO NOT USE CHECKPOINT
         C     R5,DIVCPAAD         IN CHECKPOINTED DIVAREA?
         BNE   DIVRTPRE            NO, CHECKPOINTED DATA DOES NOT APPLY
         L     R7,DIVCPADR         YES, POINT TO CHECKPOINTED RECORD
         LA    R8,DIVCPCNT         POINT TO BASE TO SUBTRACT
DIVRTPRE S     R6,0(,R8)           GET RECORDS TO CHAIN THROUGH
         BZ    DIVRTREC            ALREADY AT REQUESTED RECORD
         LA    R8,8                GET 8
         LNR   R8,R8               GET -8
DIVRTCHN A     R7,0(,R7)           ADD THE LENGTH OF CHAINED RECORD -
*                                  ASSUME NO IMBEDDED E-O-F (LENGTH=-1)
         LA    R7,DIVOVHD+7(,R7)   ALLOW FOR RECORD OVERHEAD
         NR    R7,R8               ROUND TO DOUBLEWORD BOUNDARY
         C     R7,DIVALIM          STILL IN THIS DIVAREA?
         BNL   DIVNOACT            NO, THIS RECORD WAS NOT STORED
         BCT   R6,DIVRTCHN         YES, CONTINUE TO FOLLOW CHAIN
DIVRTREC MVC   DIVCPCNT,COUNT      SAVE THE RELATIVE RECORD NUMBER
         ST    R7,DIVCPADR         SAVE CORRESPONDING ENTRY ADDRESS
         ST    R5,DIVCPAAD         SAVE DIVAREA ADDRESS
         DROP  R5                  DIVAREA
         SR    R2,R2               PREPARE FOR END-OF-FILE
         MVC   TTR,4(R7)           LOAD BLOCK LOCATION FOR MAINLINE
         ICM   R1,15,0(R7)         GET RECORD LENGTH
         BM    DIVRETVD            BRANCH IF END-OF-FILE
         LA    R2,DIVOVHD(,R7)     POINT TO RECORD'S DATA
         TM    STATUS17,$17PIX     RETRIEVING A PIXEL SCANLINE?
         BO    DIVRETVD            YES, PASS IT BACK
         ICM   R0,15,$UCBAD        TALKING DIRECTLY TO PHYSICAL DEVICE?
         BNP   DIVPNTLS            NO, A POINT WOULD BE POINTLESS
         TM    STATUS,STOPEN       IS THE FILE STILL OPEN?
         BZ    DIVPNTLS            NO, SO NOT TALKING TO I/O DEVICE
         TM    STATUS9,$9HIST      PROCESSING PROGRAM OBJECT HISTORY?
         BNZ   DIVPNTLS            YES, SO NOT TALKING TO I/O DEVICE
         SPACE
*    (A NULL UCB ADDRESS IMPLIES A SUBSYSTEM DATA SET SO NOTE/POINT
*    PROCESSING IS NOT ALLOWED.  "DIV" IS ONLY ASKED TO RETRIEVE A
*    RECORD IF IT HAS BEEN PREVIOUSLY READ, BUT "DIV" MAY NOT HAVE
*    HAD ROOM TO STORE IT WHEN IT WAS FIRST READ.  HENCE, IT MAY
*    HAVE TO BE RE-READ FROM THE STORAGE MEDIUM, IN WHICH CASE THE
*    PHYSICAL ADDRESS IN THE DCB WILL HAVE TO BE RESYNCHRONIZED WITH
*    LOGICAL PROCESSING SINCE OTHER LOGICAL RECORDS MAY HAVE BEEN
*    RETRIEVED WITHOUT PHYSICAL I/O (THANKS TO "DIV").  FOR
*    SUBSYSTEM DATA SETS, ALL RECORDS MUST BE STORED BY "DIV"
*    BECAUSE REVIEW CAN'T GO BACK TO RE-READ THEM (IE.  ACCESS IS
*    QSAM-LIKE IN ITS SEQUENTIAL NATURE).  SO IF THERE IS NO ROOM
*    TO STORE A RECORD FROM A SUBSYSTEM DATA SET THEN A PREMATURE
*    END-OF-FILE SHOULD BE FORCED (AS FAR AS REVIEWABLE DATA IS
*    CONCERNED).  IF A REAL END-OF-FILE IS ENCOUNTERED THEN ANY
*    UNUSED "DIV" SPACE CAN BE FREED WITH IMPUNITY BECAUSE THE USER
*    CANNOT 'NEWTOP' TO ANY LARGER SOURCE OF DATA AS MAY BE POSSIBLE
*    WITH NORMAL DISK FILES.)
         SPACE
         TM    STATUS8,DIVFULL     STORING ALL THE DATA SO FAR?
         BZ    DIVPNTLS            YES, AVOID UNNEEDED FILE INTERACTION
         CLC   DIVHITTR,TTR        RECORD FROM LAST BLOCK READ?
         BE    DIVFIXIT            YES, GO REPAIR DIALOG WITH DISK
DIVPNTLS L     R2,BLOCKPTR         POINT TO PHYSICAL BLOCK BUFFER
         ICM   R5,15,SAVSPANL      SPANNED RECORD FILE?
         BZ    DIVRETRC            NO, THIS IS THE RIGHT WORK AREA
         L     R2,SPANPTR          YES, POINT TO A LARGER AREA
DIVRETRC LR    R4,R2               COPY TARGET RECORD ADDRESS
         L     R5,0(,R7)           LOAD TARGET RECORD LENGTH
         LA    R14,8(,R7)          POINT TO SOURCE RECORD
         LTR   R15,R5              GET ITS LENGTH
         BZ    DIVRETVD            BRANCH IF NULL RECORD
         MVCL  R4,R14              RETRIEVE THE RECORD
DIVRETVD L     R14,12(,R13)        RESTORE RETURN REGISTER
         LM    R3,R12,32(R13)      RESTORE OTHER REGISTERS
         SR    R15,R15             RECORD RETRIEVAL WAS SUCCESSFUL
         BR    R14                 RETURN FOR ENTRY CODE 8
         SPACE
DIVFIXIT LA    R1,CALLSAVE         RE-SYNC REVIEW WITH DISK MEDIA
         ST    R13,CALLSAVE+4      CHAIN SAVEAREAS FOR POINT
         ST    R1,8(,R13)
         LR    R13,R1
         XASAM24
         POINT (R4),DIVHITTR       DIV FETCH DOESN'T ADJUST DCB BLK PTR
         XASAM31
         L     R13,4(,R13)
         XC    8(4,R13),8(R13)
         B     DIVNOACT            NOW REVIEW CAN RE-READ LAST BLK READ
         SPACE
*
*    DIVRBRVS PERFORMS RETRIEVAL FOR A QUADWORD WHEN ADDRESS SPACE
*    VIRTUAL STORAGE IS BEING BROWSED - THE ESTAE CATCHS ACCESS ABENDS.
*
DIVVSEND MVC   COUNT,DIVHICNT      END OF ADDRESS SPACE
DIVRBRVS SR    R2,R2
         SR    R1,R1
         BCTR  R1,0                NOW READY FOR END-OF-FILE
         CLC   COUNT,DIVHICNT      BEYOND ADDRESSABLE STORAGE?
         BNL   DIVRETVD            YES, END-OF-FILE
         L     R14,BLOCKPTR        NO, POINT TO RECORD AREA
         L     R5,COUNT
         SLL   R5,4                CONVERT "RECORD NUMBER" TO ADDRESS
         BAS   R2,DIVACTAE         ACTIVATE THE ESTAE
DIVRETRY DS    0H                  ATTEMPT TO FETCH REQUESTED DATA
         XASAM31 REG=R1
         LTR   R5,R5               PAST END OF ADDRESS SPACE?
         BM    DIVVSEND            YES
         ST    R5,0(,R14)          BEGIN THE DATA WITH THE ADDRESS
         MVC   4(16,R14),0(R5)     COPY THE QUADWORD'S DATA
         SRL   R5,4                CONVERT ADDRESS TO "RECORD NUMBER"
         ST    R5,COUNT            PASS BACK CORRECT NUMBER TO CALLER
         LH    R1,DYNDCBW+DCBLRECL-IHADCB
         LA    R0,1
         AR    R5,R0
         C     R5,LISTNUM          SCROLLED BEFORE LIST TARGET?
         BNL   DIVVS2              NO
         ST    R5,LISTNUM          YES, AMEND LIST TARGET
DIVVS2   EQU   *
         L     R2,BLOCKPTR
         B     DIVRETVD
         SPACE
*
*    DIVPGREL NO LONGER ISSUES ACTUAL PAGE RELEASE REQUESTS BUT
*    NOW SIMPLY RESETS THE HEADER OF THE FIRST DIVAREA TO MARK
*    IT AS EMPTY, AND FREES ALL SUBSEQUENT DIVAREA CHUNKS.
*    DIVAREA STORAGE AFTER THE FIRST CHUNK IS FREED BY SETTING
*    UP AS IF THE FIRST DIVAREA'S FORWARD POINTER IS THE CHAIN
*    ORIGIN, AND THEN BRANCHING TO DIVFREMN TO FREE THE CHAIN.
*    AS WELL AS MAKING THE DIVAREA CHAIN LOOK AS IF DIVGETMN
*    HAD JUST RUN, OTHER FLAGS AND STATUSES MUST BE SIMILARLY
*    SET UP BEFORE BRANCHING TO DIVFREMN LOGIC.
*
DIVPGREL DS    0H                  DIV ENTRY CODE 12
         TM    STATUS9,$9BRVS      BROWSING VIRTUAL STORAGE?
         BO    DIVFREED            YES, NO NEED TO RELEASE ANYTHING
         ICM   R5,15,DIVORG        POINT TO THE FIRST DIVAREA
         BNP   DIVISBAD            NO DIV STORAGE SO RETURN
         USING DIVAREA,R5
         LA    R2,DIVABGN          POINT TO PLACE FOR FIRST RECORD
         SR    R0,R0               GET ZERO
         ST    R2,DIVAREC          NEXT RECORD WILL BE THE FIRST
         ST    R0,DIVAPOP          RESET STORED RECORD COUNT
         ST    R0,DIVAREL          PRESUMABLY A NO-OP
         NI    STATUS8,255-DIVFULL RESTART STORING WITH A CLEAN SLATE
         LA    R5,DIVAFWD          POINT TO CHAIN ORIGIN TO USE
         B     DIVFRELP            GO FREE SUBSEQUENT DIVAREA CHUNKS
         DROP  R5                  DIVAREA
         SPACE
*
*    DIVFREMN WILL COMPLETELY DEACTIVATE REVIEW'S DATA-IN-VIRTUAL.
*    ANY FLAGS AND STATUSES TO BE SET DIFFERENTLY FROM THAT REQUIRED
*    BY DIVPGREL NEED TO BE DONE BEFORE THE DIVAREA FREEMAIN LOOP.
*
DIVFREMN DS    0H                  DIV ENTRY CODE 16
         NI    DIVORG+3,X'F8'      ENSURE REQUIRED ALIGNMENT
         OI    STATUS8,DIVFULL     DIV WILL NO LONGER AVOID FILE I/O
         XC    DIVCHKPT,DIVCHKPT   RESET DIV CHECKPOINT
         LA    R5,DIVORG           POINT TO DIVAREA CHAIN ORIGIN
         USING DIVAREA,R1
DIVFRELP ICM   R1,15,0(R5)         POINT TO THE DIVAREA TO FREE
         BNP   DIVFREED            NONE LEFT TO FREE
         MVC   0(4,R5),DIVAFWD     SAVE THE FORWARD POINTER
         L     R0,DIVALEN          GET THE LENGTH OF THIS DIVAREA
         FREEMAIN RU,LV=(0),A=(1)  FREE THIS DIVAREA
         B     DIVFRELP            PROCESS REST OF CHAIN
         DROP  R1                  DIVAREA
DIVFREED MVC   DIVLASTA,DIVORG     (RE)SET LAST DIVAREA ADDRESS
         SR    R0,R0               GET LOW VALUES
         ST    R0,DIVHITTR         ZERO HIGHEST TTR ENCOUNTERED
         BCTR  R0,0                GET HIGH VALUES
         ST    R0,DIVHICNT         SET STORED RECORD COUNT TO -1
         ST    R0,DIVCPCNT         SET UNUSABLE CHECKPOINT ENTRY
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         SR    R15,R15             STORAGE FREEING WAS SUCCESSFUL
         BR    R14                 RETURN FOR ENTRY CODES 12 AND 16
         SPACE
*
*    DIVESTAE WILL ACTIVATE AN ESTAE RECOVERY ENVIRONMENT IN ORDER
*    TO FACILITATE BROWSING DATA IN THE ADDRESS SPACE MEMORY.
*    ITS MAIN PURPOSE IS TO PREVENT AN ABEND WHEN AN ATTEMPT IS
*    MADE TO REFERENCE NON-EXISTENT OR PROTECTED STORAGE.
*
DIVESTAE DS    0H                  DIV ENTRY CODE 20
         TM    STATUS14,$14AS      BROWSING ADDRESS SPACE?
         BNO   *+8                 NO, DO NOT ACTIVATE THE ESTAE
         BAS   R2,DIVACTAE         YES, ACTIVATE THE ESTAE
         LM    R14,R12,12(R13)     RESTORE ALL REGISTERS
         BR    R14                 RETURN - NO RC - CAN TEST $14STAE
         SPACE
DIVACTAE DS    0H                  ACTIVATE ABEND EXIT
         TM    STATUS14,$14STAE    ESTAE ALREADY ACTIVE?
         BOR   R2                  YES, RETURN WITHOUT ACTION
         XC    MYDSCB,MYDSCB       NO, CLEAR A WORK AREA
         LA    R3,DIVRETRY         COPY RETRY ROUTINE ADDRESS
         @STAE REVESTAE,CT,        REVESTAE IS NEW RECOVERY ROUTINE    +
               PARAM=(R3),         PASS RETRY ROUTINE ADDRESS          +
               XCTL=NO,            DEACTIVATE UPON XCTL IF ANY         +
               PURGE=NONE,         DO NOT INHIBIT ANY I/O              +
               ASYNCH=YES,         DO NOT INHIBIT ASYNCHRONOUS EXITS   +
               TERM=NO,            NOTHING TO DO IF TASK TERMINATING   +
               SDWALOC31=YES,      ALLOW SDWA TO BE ABOVE THE LINE     +
               MF=(E,MYDSCB)       USE DYNAMIC STORAGE FOR ESTAE PARMS
         OI    STATUS14,$14STAE    FLAG ESTAE ACTIVE
         BR    R2                  RETURN TO CALLER
         SPACE
         DROP  R10,R11             REVDIV
         SPACE
**********************************************************************
*                                                          *         *
*         STORAGE ACCESS ESTAE ROUTINE                     *  R44.0  *
*                                                          * JUL2013 *
**********************************************************************
         SPACE
         USING REVESTAE,R15
REVESTAE CH    R0,=H'12'           ANY SDWA PROVIDED?
         BNE   DIVNOT12            YES, GOOD
         LA    R1,DIVMSG12         POINT TO MESSAGE
         LA    R0,DIVMLN12         GET ITS LENGTH
         TPUT  (1),(0),R           SHOW A MESSAGE
         SLR   R15,R15             CONTINUE WITH ABEND (PERCOLATE)
         BR    R14                 EXIT FROM EXIT
         SPACE
         USING SDWA,R1
DIVNOT12 STM   R14,R12,12(R13)     SAVE REGISTERS
         MVC   SDWAMODN,DIVEMODN   SET ABEND MODULE NAME
         MVC   SDWACSCT,DIVECSCT   SET ABEND CSECT NAME
         MVC   SDWAREXN,DIVEREXN   SET ABEND RECOVERY ROUTINE NAME
         L     R9,SDWAGR09         RESTORE DYNAMIC STORAGE BASE
         LA    R0,X'0C40'          GET ABEND CODE THAT CAN BE HANDLED
         CLM   R0,3,SDWACMPC       RETRY POSSIBLE?
         BNE   DIVPERCO            NO, UNEXPECTED ABEND CODE
         SPACE
         TM    STATUS14,$14SCH     ABEND IN SEARCHIT?
         BNO   DIVNTSCH            NO
         MVC   SDWASRSV,SDWAGRSV   COPY ERROR-TIME REGISTERS FOR RETRY
         L     R4,SDWAGR13         POINT TO REGISTER SAVE AREA
         L     R4,12(,R4)          GET RETURN ADDRESS
         ST    R4,SDWASR14         SET IT FOR RETRY GPR14
         LA    R4,4(,R4)           GET RETRY ADDRESS
         B     DIVSETRP            READY FOR RETRY
         SPACE
DIVNTSCH L     R0,SDWATRAN         GET TRANSLATION EXCEPTION ADDRESS
         L     R5,SDWAGR05         GET ERROR-TIME GPR5 VALUE
         CLI   SDWAINTP+1,X'04'    PROTECTION EXCEPTION?
         BE    DIVFIXAD            YES, THE OPRIGINAL CAUSE OF S0C4
         LR    R4,R5               NO, COPY THE ERROR-TIME GPR5 VALUE
         SRL   R0,12               SHIFT OUT OFFSET WITHIN PAGE
         SRL   R4,12               SHIFT OUT OFFSET WITHIN PAGE
         CR    R0,R4               IS THE CAUSE AS EXPECTED?
         BE    DIVFIXAD            YES, GO HANDLE IT
DIVPERCO SETRP REGS=(14,12),RC=0   NO, PERCOLATE
         SPACE
DIVFIXAD LA    R4,X'10'            GET MISSING SEGMENT INTERRUPT CODE
         LA    R0,1                GET ONE
         SLL   R0,$PAGBITS         GET THE SIZE OF A PAGE
         SRL   R5,$PAGBITS
         CH    R4,SDWAINTP         MISSING SEGMENT?
         BNE   DIVSHFOK             NO, JUMP A PAGE
         SLL   R0,$SEGBITS-$PAGBITS YES, JUMP A SEGMENT
         SRL   R5,$SEGBITS-$PAGBITS
         SLL   R5,$SEGBITS-$PAGBITS
DIVSHFOK SLL   R5,$PAGBITS         GET THE SIZE OF A PAGE
         TM    STATUS14,$14UP      SCROLLING UP?
         BNO   DIVBIGAD            NO, WANT TO GET A LARGER ADDRESS
         L     R5,SDWAGR05         GET ERROR-TIME GPR5 VALUE (AGAIN)
         SR    R5,R0               GET LAST LINE OF PREVIOUS PAGE/SEG
         BNM   DIVNEWAD            HAVE NEW ADDRESS
         AR    R5,R0               GET BACK POSITIVE NUMBER
         LA    R0,X'800'           GET HALF A PAGE SIZE
         SR    R5,R0               GET LAST LINE OF 1ST HALF OF PAGE 0
         BNM   DIVNEWAD            HAVE NEW ADDRESS
         SR    R5,R5               ADDRESS ZERO MUST BE ACCESSIBLE
         B     DIVNEWAD            HAVE NEW ADDRESS
DIVBIGAD ALR   R5,R0               GET NEW ADDRESS
DIVNEWAD LA    R4,0(,R5)           GET IT IN ADDRESS FORMAT
         CR    R4,R5               LOOKING GOOD?
         BE    DIVRAPOK            YES
         SR    R5,R5               NO
         BCTR  R5,0                PAST END OF ADDRESS SPACE
DIVRAPOK MVC   SDWASRSV,SDWAGRSV   COPY ERROR-TIME REGISTERS FOR RETRY
         ST    R5,SDWASR05         SET NEW STORAGE ADDRESS FOR RETRY
         L     R4,SDWAPARM         GET RETRY ROUTINE ADDRESS
DIVSETRP EQU   *
         SETRP REGS=(14,12),       RESTORE SAVED REGISTERS             +
               DUMP=NO,            NO DUMP REQUIRED FOR RETRY          +
               RC=4,               RETRY                               +
               RETADDR=(R4),       SPECIFY THE RETRY ADDRESS           +
               RETREGS=YES,        LOAD RETRY REGISTERS FROM SDWA      +
               FRESDWA=YES         FREE THE SDWA
         DROP  R1,R15              SDWA, REVESTAE
         TITLE '  R E V D I V   -   D A T A   A R E A S  '
DIVOVHD  EQU   8                   STORAGE OVERHEAD PER RECORD
         SPACE
         LTORG
DIVMARKR DC    CL8'*REVDIV*'       DIVAREA MARKER
DIVMSG12 EQU   *                   START OF ENTRY CODE 12 MESSAGE
DIVEMODN DC    CL8'REVIEW'         MODULE NAME
DIVECSCT DC    CL8'REVDIV'         CSECT NAME
DIVEREXN DC    CL8'REVESTAE'       RECOVERY ROUTINE NAME
         DC    C' ENTRY CODE 12'
DIVMLN12 EQU   *-DIVMSG12          LENGTH OF ENTRY CODE 12 MESSAGE
         SPACE
         DC    0D'0'               END OF CSECT
         SPACE
         SPACE
*
*           DDDD   IIII  V   V      AAA   RRRR   EEEEE   AAA
*           D   D   II   V   V     A   A  R   R  E      A   A
*           D   D   II   V   V     AAAAA  RRRR   EEEE   AAAAA
*           D   D   II    V V      A   A  R  R   E      A   A
*           DDDD   IIII    V       A   A  R   R  EEEEE  A   A
*
         SPACE
DIVAREA  DSECT
DIVAFWD  DS    A                   FORWARD POINTER
DIVALEN  DS    F                   SIZE OF THIS AREA
DIVAMKR  DS    CL8                 AREA MARKER = *REVDIV*
DIVAREC  DS    A                   ADDRESS FOR NEXT RECORD STORED
DIVALIM  DS    A                   DATA ADDRESS LIMIT
DIVAPOP  DS    F                   CURRENT RECORD POPULATION
DIVAREL  DS    F                   TOTAL RECORDS IN PREVIOUS AREAS
DIVABGN  DS    0D                  START OF RECORD ENTRIES
         TITLE ' REVIEW POINT-AND-SHOOT FRONT-END FOR TSO '
**********************************************************************
*                                                          *         *
*         PROCESS POINT-AND-SHOOT REQUEST                  *  GP@FT  *
*                                                          *  11/96  *
**********************************************************************
*                                                                    *
* REGISTERS ON ENTRY: R9 -> @DATA                                    *
*                     R13-> SAVE AREA                                *
*                     R14-> RETURN ADDRESS                           *
*                     R15-> REVPNS                                   *
*                                                                    *
* DURING PROCESSING:  R10-> REVPNS+4096                              *
*                     R11-> REVPNS                                   *
*                     R13-> @PNSDYN  (LOCAL GETMAINED AREA)          *
*                                                                    *
* RETURN CODES:       R15 = 0  ZERO RESULT - NOTHING DONE            *
*                     R15 = 2  POSITIVE RESULT - $DSNAME LOADED      *
*                                                                    *
**********************************************************************
         SPACE
REVPNS   RSECT
REVPNS   AMODE 31
         ENTRY DSNCHARS
         B     @PNSTART-*(,R15)
         DC    AL1(7),CL7'REVPNS '
@PNSSIZE DC    AL4($PNSDYNL)
@PNSTART STM   R14,R12,12(R13)     SAVE REGISTERS
         LR    R11,R15             BASE REGISTERS
         LA    R15,1
         LA    R10,4095(R15,R11)
         USING REVPNS,R11,R10
         SPACE
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    PNSNOOP             YES, DO NOT USE ISPF AT ALL
         XC    DOUBLE,DOUBLE       RESET 2.10 COMMUNICATION AREA
         TM    MODE,MD_RECRS       IS THIS A RECURSIVE 'REVIEW'?
         BO    PNSSPFOK            YES, DO NOT LOOK AT ISPF SCREEN
         AGO   .NOTRICK            SKIP OLD TRICK TO DETECT ISPF
         SPACE
         CLI   OSBITS,X'9B'        MVS/ESA OR OS/390 OR Z/OS?
         BNE   PNSSPFOK            NO, SKIP CONTROL BLOCK CHASE
         L     R15,PSATOLD         POINT TO THE CURRENT TCB
         USING TCB,R15
PNSTCBLP ICM   R15,15,TCBOTC       POINT TO ORIGINATING TCB
         BZ    PNSSPFOK            NOT ISPF IF ZERO
         ICM   R1,15,TCBFSA        POINT TO FIRST SAVE AREA
         BZ    PNSSPFOK            NOT ISPF IF ZERO
         DROP  R15                 TCB
         USING SAVER,R1
         ICM   R1,15,SAVGRS1       GET SAVED R1
         BNP   PNSSPFOK            NO GOOD
         DROP  R1                  SAVER
         CLI   0(R1),0             HIGH ORDER BYTE NULL?
         BNE   PNSSPFOK            NO, NOT ISPF
         L     R2,0(,R1)           GET POSSIBLE TLD ADDRESS
         CLC   =C'TLD',0(R2)       TLD?
         BNE   PNSTCBLP            NO, NOT ISPF
*        AIF   (NOT &ENV390).SPFON
         L     R1,CVTPTR(,0)       POINT TO THE CVT
         USING CVT,R1
         TM    CVTOSLV2,X'01'      CVTH7703 - OS/390 2.10 OR LATER?
         BNO   PNSSPFON            NO, BUT ISPF IS ACTIVE
         DROP  R1                  CVT
.NOTRICK ANOP  ,                   END OF OLD ISPF TLD SEARCH
         SPACE
         BAS   R12,PNSSPF10        CALL AS IF OS/390 2.10 OR LATER
PNSSPFOK TM    STATUS13,$13RFE     INVOKED AS RFE?
         BO    PNSNOOP             YES, POINT-AND-SHOOT INACTIVE
         TM    STATUS11,$11OT+$11LV     INVOKED AS REVOUT OR REVLEV?
         BNZ   PNSNOOP             YES, POINT-AND-SHOOT INACTIVE
         L     R1,REVECT           POINT TO THE ECT
         USING ECT,R1
         TM    ECTSWS,ECTNOPD      ANY OPERANDS?
         BZ    PNSNOOP             YES, USE OPERANDS AND MAYBE ISPF
         DROP  R1                  ECT
         OC    DOUBLE,DOUBLE       ISPF SCREEN IMAGE FOUND?
         BZ    PNSDOIT             NO
         L     R3,DOUBLE           YES, GET CURSOR LOCATION
         L     R0,DOUBLE+4         GET START OF IMAGE
         B     ATDSN               EXTRACT THE DATA SET NAME
         SPACE
PNSNOOP  LM    R14,R12,12(R13)     SKIP "POINT-AND-SHOOT"
         SR    R15,R15             ZERO RETURN CODE FOR NOTHING DONE
         BR    R14                 RETURN TO CALLER
         SPACE
PNSDOIT  L     R0,@PNSSIZE         GET DYNAMIC AREA SIZE
         MVI   GETMNTRC,64         TRACK GETMAIN IN CASE OF FAILURE
         GETMAIN RU,LV=(0),LOC=(24,64),SP=1
         ST    R1,8(,R13)          CHAIN SAVE AREAS
         ST    R13,4(,R1)
         LR    R13,R1              POINT TO DYNAMIC AREA
         USING @PNSDYN,R13
         LM    R0,R1,SCRNLNES      LOAD CURRENT SCREEN DIMENSIONS
         CH    R0,=H'24'           AT LEAST 24 LINES?
         BL    PNSNOGO             NO, NOT BIG ENOUGH
         CH    R1,=H'80'           AT LEAST 80 COLUMNS?
         BL    PNSNOGO             NO, NOT BIG ENOUGH
         TM    MODE,MD_RECRS       IS THIS A RECURSIVE 'REVIEW'?
         AGO   .NOTRIK2            SKIP CODE TO USE DISCOVERED TLD
         BO    PNSRCRS             YES, COPY DATA INTERNALLY W/O RDBUF
         CLI   OSBITS,X'13'        MVS/370?  (READ BUFFER UNSUPPORTED?)
         BE    PNSLINE             YES, BUT 3.8J MIGHT HAVE USERMOD ON
         TM    STATUS8,$8ISPF      FOUND THE TLD?
         BNO   PNSFSMD             NO
         LH    R15,166(,R2)        YES, LOAD CURSOR OFFSET
         LTR   R15,R15             NEGATIVE CURSOR OFFSET?
         BM    PNSFSMD             YES, INVALID
         ICM   R3,15,96(R2)        POINT TO ISPF SCREEN BUFFER
         BNP   PNSFSMD             REJECT RIDICULOUS POINTER
         LR    R0,R3               COPY SCREEN BUFFER POINTER
         AR    R3,R15              POINT TO CURSOR LOCATION
         B     ATDSN               LOOK FOR DATA SET NAME
.NOTRIK2 ANOP
         BNO   PNSFSMD             NO, GO TRY READ BUFFER
         SPACE
PNSRCRS  L     R1,4(,R9)           POINT TO REVIEW'S CALLER'S SAVE AREA
         USING SAVER,R1
         L     R1,SAVGRS9          POINT TO PREVIOUS @DATA (R9 VALUE)
         DROP  R9,R1               @DATA, SAVER
         USING @DATA,R1
         LH    R15,CSRLOCN         GET CURSOR LOCATION
         LTR   R15,R15             NON-ZERO VALUE?
         BNZ   PNSREV              YES, LOOK AT REVIEW INTERNAL DATA
         ICM   R15,3,REPLY+1       GET CURSOR LOCATION
         TM    REPLY+1,X'40'       12-BIT ADDRESS?
         BNO   PNSTOPCK            NO
         N     R15,PNS12214        NOT ANYMORE
         BZ    PNSNOGO             CURSOR ON FIRST ATTRIBUTE BYTE
PNSTOPCK CH    R15,=H'54'          BEYOND TOP LINE MESSAGE AREA?
         BH    PNSLINE             YES, DO LINE MODE PROMPTING
PNSSCRN  L     R3,SCREENBF         POINT TO DSNAME IN HEADING (ALMOST)
         LA    R0,1(,R3)           SET LOWER LIMIT OF SCAN
         AR    R3,R15              FINGER CURSOR SELECTED CHARACTER
         B     ATDSN
PNSREV   TM    STATUS11,$11FS2     IS INTERNAL DATA ACCESSIBLE?
         BNO   PNSSCRN             NO, HAVE TO ACCESS SCREEN BUFFER
         TM    MODE,MD_HEX         IN HEXADECIMAL DISPLAY MODE?
         BO    PNSDIR              YES, USE INTERNAL RECORD DIRECTORY
         CLI   DSORGTYP,X'DD'      CALLED FROM REVIEW OF VTOC?
         BE    PNSDIR              YES, USE INTERNAL RECORD DIRECTORY
         TM    MODE,MD_ASCII       IN ASCII MODE?
         BO    PNSSCRN             YES, CHARACTERS EXIST ONLY ON SCREEN
         TM    MODE,MD_FMT         FORMATTING ON?
         BNZ   PNSSCRN             YES, BETTER ACCESS SCREEN DATA
PNSDIR   SR    R14,R14
         D     R14,SCRNCOLS        GET CURSOR COORDINATES
         TM    MODE,MD_HEX         IN HEXADECIMAL DISPLAY MODE?
         BZ    *+8                 NO
         SRA   R14,1               YES, HALVE THE COLUMN OFFSET
         SH    R15,=H'4'           GET SCREEN DATA RECORD NUMBER
         BM    PNSFSMD             SHOULD NOT HAPPEN
         L     R7,HOLDTOP          POINT TO FIRST RECORD
         BZ    PNSRVREC            HAVE REVIEW INTERNAL RECORD
PNSRCSLP C     R7,HOLDEND          LAST INTERNAL RECORD?
         BE    PNSNOGO             YES, NO DSNAME HERE
         L     R7,DIRNXT(,R7)      NO, POINT TO NEXT RECORD
         BCT   R15,PNSRCSLP
PNSRVREC TM    DIRLEN(R7),X'80'    IS RECORD END-OF-FILE?
         BO    PNSNOGO             YES, NO DSNAME HERE
         L     R3,DIRREC(,R7)      POINT TO RECORD'S DATA
         LR    R0,R3               DO NOT USE DATA BEFORE RECORD
         CLI   DSORGTYP,X'DD'      CALLED FROM REVIEW OF VTOC?
         BNE   PNSFILE             NO, DATA FROM OTHER FILE
         CLI   44(R3),X'F1'        FORMAT-1 DSCB?
         BE    ATDSN               YES
         CLI   44(R3),X'F8'        FORMAT-8 DSCB?
         BE    ATDSN               YES
         B     PNSNOGO             NO, CANNOT ASCERTAIN DSNAME
PNSFILE  A     R3,OFFSET           POINT TO DATA ON SCREEN
         LR    R0,R3               DO NOT USE DATA TO LEFT OF SCREEN
         AR    R3,R14              POINT TO CURSOR DATA
         B     ATDSN               LOOK FOR DATA SET NAME
         DROP  R1                  @DATA
         USING @DATA,R9
         SPACE
PNSFSMD  STFSMODE ON,INITIAL=YES,NOEDIT=YES  TURN ON FULLSCREEN MODE
         OI    MODE,MD_FS          FLAG FOR FUTURE REFERENCE
         MVC   PNSTPGD,PNSTPGS     COPY PLIST TO WORKING STORAGE
         TPG   MF=(E,PNSTPGD)      ISSUE READ BUFFER
         L     R0,@PNSSIZE         GET DYNAMIC AREA SIZE
         LA    R1,RDBUFBUF-@PNSDYN
         SR    R0,R1               GET INPUT BUFFER SIZE
         LA    R1,RDBUFBUF         POINT TO INPUT BUFFER
         ICM   R1,8,=X'81'         LOAD FLAGS FOR ASIS,WAIT TGET
         TGET  (1),(0),R           READ TERMINAL INPUT
         LR    R2,R1               SAVE INPUT DATA LENGTH
         STFSMODE ON,NOEDIT=NO     TURN OFF NOEDIT INPUT MODE
         LTR   R1,R2               ANY DATA RETURNED?
         BNP   PNSNOGO             NO, SOMETHING WENT WRONG
         SR    R2,R2
         ICM   R2,3,RDBUFBUF+1     GET CURSOR BUFFER ADDRESS
         TM    RDBUFBUF+1,X'40'    14-BIT ADDRESS?
         BZ    CSRLOCOK            YES
         SLL   R2,2                NO, IT IS A 12-BIT ADDRESS
         ICM   R2,2,RDBUFBUF+1
         SLL   R2,18               SHIFT OUT UNWANTED BITS
         SRL   R2,20               CONVERT TO 14-BIT ADDRESS FORMAT
CSRLOCOK LA    R3,RDBUFBUF+3       POINT TO START OF SCREEN CONTENTS
*-XLINE  LR    R15,R2              COPY CURSOR LOCATION
BUFRADOK LR    R0,R3               REMEMBER BUFFER IMAGE START
         LTR   R2,R2               WAS CURSOR AT LOCATION ZERO?
         BNP   ATDSN               YES
BUFRLOOP CLI   0(R3),SF            START FIELD?
         BE    SKIP1               YES
         CLI   0(R3),GE            GRAPHIC ESCAPE?
         BE    SKIP1               YES
         CLI   0(R3),SA            SET ATTRIBUTE?
         BE    SKIP3               YES
         CLI   0(R3),SFE           START FIELD EXTENDED?
         BE    SKIPMANY            YES
DONESKIP LA    R3,1(,R3)           POINT TO NEXT BUFFER LOCATION
         BCT   R2,BUFRLOOP
ATDSN    TRT   0(1,R3),DSNCHARS    VALID DSN CHARACTER?
         BNZ   PNSNOGO             NO, INVALID DATA SET NAME
         LR    R4,R3               COPY POINTER
*-XLINE  SR    R14,R14             CLEAR FOR DIVIDE
*-XLINE  D     R14,SCRNCOLS        GET CURSOR COORDINATES
*-XLINE  LA    R6,1(,R14)          GET CURSOR COLUMN NUMBER
BACKLOOP CR    R4,R0               BACK AT START OF IMAGE DATA?
         BNH   STRTLOOP            YES, STOP GOING BACKWARDS
         BCTR  R4,0                NO, BACK UP A BYTE
         TRT   0(1,R4),DSNCHARS    VALID DSN CHARACTER?
         BZ    BACKLOOP            YES       (REMOVE FOR XLINE CHECK)
*-XLINE  BNZ   GETSTART            NO, DETERMINE THE START OF DSNAME
*-XLINE  BCT   R6,BACKLOOP         YES, DECREMENT COLUMN NUMBER
*-XLINE  LA    R6,1                DON'T CROSS LINES - START AT COL 1
GETSTART CLI   0(R4),SF            START FIELD?
         BNE   *+8                 NO
         LA    R4,1(,R4)           YES, SKIP ATTRIBUTE BYTE
         LA    R4,1(,R4)           POINT TO FIRST SUITABLE CHARACTER
STRTLOOP CR    R4,R3               IS FIRST CHARACTER PAST POINT?
         BH    PNSNOGO             YES, INVALID DATA SET NAME
         TRT   0(1,R4),DSNCHAR1    VALID FIRST DSN CHARACTER?
         BZ    GOTSTART            YES, FOUND DATA SET NAME START
         LA    R4,1(,R4)           NO, POINT TO NEXT CHARACTER
*-XLINE  LA    R6,1(,R6)           INCREMENT COLUMN NUMBER
*-XLINE  C     R6,SCRNCOLS         PAST THE LINE END?
*-XLINE  BNH   STRTLOOP            NO, KEEP LOOKING
*-XLINE  B     PNSNOGO             YES, INVALID DSNAME ON THIS LINE
         B     STRTLOOP            KEEP LOOKING
GOTSTART LA    R1,44(,R4)          POINT PAST DATA SET NAME
*-XLINE  BCTR  R6,0                CONVERT COLUMN TO OFFSET
*-XLINE  LA    R6,44(,R6)          GET LAST POSSIBLE COLUMN NUMBER
*-XLINE  S     R6,SCRNCOLS         PAST END OF THIS SCREEN LINE?
*-XLINE  BNP   *+6                 NO
*-XLINE  SR    R1,R6               YES, REDUCE MAXIMUM DSNAME LENGTH
         LR    R6,R1               POINT PAST DSNAME
         SR    R6,R4               GET DSNAME LENGTH
         BCTR  R6,0                DECREMENT FOR EXECUTE
         EX    R6,PNSTRT           VALIDATE DATA SET NAME
STOPLOOP BCTR  R1,0                POINT TO LAST BYTE OF DSNAME
         CLI   0(R1),C'.'          FOUND TRAILING PERIOD?
         BE    STOPLOOP            YES
         LA    R5,1(,R1)           POINT PAST END OF DSNAME
         SR    R5,R4               GET LENGTH OF DSNAME
PNSDSNOK STH   R5,$DSNAME          SAVE IT
         MVI   $DSNAME+2,C' '      BLANK OUT DATA SET NAME FIELD
         MVC   $DSNAME+3(43),$DSNAME+2
         BCTR  R5,0                DECREMENT FOR EXECUTE
         EX    R5,SHOT$DSN         LOAD DATA SET NAME IN UPPER CASE
         LA    R15,2               INDICATE POSITIVE OUTCOME
         TM    MODE,MD_RECRS       IS THIS A RECURSIVE 'REVIEW'?
         BNO   PNSEXIT             NO, TIDY UP AND RETURN
         L     R1,4(,R9)           POINT TO REVIEW'S CALLER'S SAVE AREA
         L     R1,56(,R1)          POINT TO PREVIOUS @DATA (R9 VALUE)
         CLI   DSORGTYP-@DATA(R1),X'DD'     CALLED FROM REVIEW OF VTOC?
         BNE   PNSEXIT                      NO, TIDY UP AND RETURN
         MVC   $VOLSER,$VOLSER-@DATA(R1)    SUPPLY CORRECT VOLUME
         MVC   $UNIT,=CL8'SYSALLDA'         SUPPLY CORRECT UNIT
         B     PNSEXIT                      TIDY UP AND RETURN
PNSTRT   TRT   0(0,R4),DSNCHARS    <<< EXECUTED >>>
SHOT$DSN OC    $DSNAME+2(0),0(R4)  <<< EXECUTED >>>
SKIP1    LA    R3,1(,R3)
         B     DONESKIP
SKIP3    LA    R3,3(,R3)
         B     DONESKIP
SKIPMANY SR    R15,R15
         IC    R15,1(,R3)
         LA    R15,1(,R15)
         SLL   R15,1
         ALR   R3,R15
         B     DONESKIP
PNSNOGO  TM    MODE,MD_RECRS       IS THIS A RECURSIVE 'REVIEW'?
         BZ    PNSLINE             NO, DO LINE MODE PROMPTING
         SR    R15,R15             YES, DO NOT PROCEED WITH PROMPTING
         BCTR  R15,0               SET NEGATIVE RETURN CODE
         B     PNSEXIT
PNSLINE  TM    MODE,MD_FS          CURRENTLY IN FULLSCREEN MODE?
         BZ    PNSLINE0            NO
         STFSMODE OFF              YES, REVERT TO LINE MODE
         NI    MODE,255-MD_FS      FULL SCREEN MODE NOW OFF
PNSLINE0 SR    R15,R15             ZERO RETURN CODE FOR NOTHING DONE
PNSEXIT  ST    R15,16(,R13)        SAVE RETURN CODE IN CASE NO @PNSDYN
         ICM   R0,15,DOUBLE        WAS @PNSDYN ACQUIRED?
         BNZ   PNSLEAVE            NO, SO DO NOT TRY TO FREE IT
         LR    R1,R13              POINT TO DYNAMIC AREA
         L     R13,4(,R13)         POINT TO CALLER'S SAVE AREA
         OI    11(R13),X'01'       INVALIDATE FORWARD POINTER
         ST    R15,16(,R13)        SAVE RETURN CODE
         L     R0,@PNSSIZE         GET SIZE OF DYNAMIC AREA
         FREEMAIN RU,A=(1),LV=(0),SP=1    FREE DYNAMIC AREA
PNSLEAVE LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER
         DROP  R13                 @PNSDYN
         SPACE
*  ORIGINALLY THIS ROUTINE WAS ONLY CALLED WHEN RUNNING ON
*  OS/390 V2R10 OR LATER WHEN ALL OF THE ISPF VARIABLES IN
*  'PNSVCLST' WERE AVAILABLE.  NOW IT IS ALWAYS CALLED AS THE
*  ONLY WAY OF DETERMINING IF AN ISPF ENVIRONMENT IS PRESENT.
PNSSPF10 LA    R0,$PN$10SZ         GET DYNAMIC AREA SIZE
         MVI   GETMNTRC,65         TRACK GETMAIN IN CASE OF FAILURE
         GETSTOR RU,LV=(0),LOC=(31,64),SP=1
         XC    0($PN$10SZ,R1),0(R1)
         ST    R1,8(,R13)          CHAIN SAVE AREAS
         ST    R13,4(,R1)
         LR    R13,R1              POINT TO DYNAMIC AREA
         USING @PNSDYNA,R13
         SPACE
         AIF   (&ENVESA).SKPBLDL   Z/OS ERRET SUPPRESSES CSV MSG
         XC    BLDL,BLDL           CLEAR RESIDUAL DATA
         MVI   BLDL+1,1            PREPARE BLDL PARAMETER LIST FOR USE
         MVI   BLDL+3,76           (AREA FOR ONE MAXIMUM LENGTH ENTRY)
         MVC   BLDLNAME,PNSPFQRY   LOAD PROGRAM NAME
         BLDL  0,BLDL              SEARCH FOR ISPQRY
         LTR   R15,R15             IS IT AVAILABLE?
         BNZ   PN$10NOP            NO
.SKPBLDL ANOP
         LINK  EPLOC=PNSPFQRY,ERRET=PN$10NOP
         LTR   R15,R15             ISPF SERVICES AVAILABLE?
         BNZ   PN$10NOP            NO
         OI    STATUS8,$8ISPF      YES
         LOAD  EPLOC=PNSISPLK      LOAD ISPLINK
         ST    R0,@ISPLINK         SAVE ITS ADDRESS
         SPACE
         L     R15,@ISPLINK        LOAD ISPLINK ENTRY POINT
         CALL  (15),(PNSVCOPY,PNSVCLST,ZCOLRLN,ZCOLRAD),               +
               VL,MF=(E,PNSPLIST)  VCOPY SEVERAL VARIABLES
         LTR   R15,R15             SUCCESS?
         BNZ   PN$10XIT            NO
         L     R1,ZCOLRAD          POINT TO ZCOLORS
         A     R1,ZCOLRLN          POINT PAST ZCOLORS
         BCTR  R1,0                POINT TO LAST DIGIT
         CLI   0(R1),C'7'          SEVEN-COLOUR SUPPORT PRESENT?
         BNE   *+8                 NO
         OI    STATUS5,$5COLR      YES
         L     R1,ZHLITAD          POINT TO ZHILITE
         CLI   0(R1),C'Y'          EXTENDED HIGHLIGHTING SUPPORT OKAY?
         BNE   *+8                 NO
         OI    STATUS5,$5HILT      YES
         L     R1,ZGEADDR          POINT TO ZGE
         CLI   0(R1),C'Y'          IS GRAPHIC ESCAPE SUPPORTED?
         BNE   *+8                 NO
         OI    STATUS5,$5GE        YES
         TM    STATUS5,$5COLR+$5HILT 7-COLOUR AND HIGHLIGHTING OK?
         BZ    *+8                 NO, JUST USE DUAL INTENSITY
         OI    STATUS5,$5EDS       YES, ACTIVATE 3270 EXTENSIONS
         OI    STATUS5,$5QRY       QUERY RESULTS OBTAINED FROM ISPF
         L     R1,ZSCRNAD          POINT TO ZSCREEN
         A     R1,ZSCRNLN          POINT PAST ZSCREEN
         BCTR  R1,0                POINT TO LAST DIGIT
         MVC   ZSCREEN,0(R1)       COPY IT TO LOCAL STORAGE
         SPACE
         L     R1,REVECT           POINT TO THE ECT
         USING ECT,R1
         TM    ECTSWS,ECTNOPD      ANY OPERANDS?
         BNO   PN$10XIT            YES, USE THEM - NOT POINT AND SHOOT
         DROP  R1                  ECT
         SPACE
         L     R1,ZSCRCAD          POINT TO ZSCREENC
         L     R14,ZSCRCLN         GET THE LENGTH OF ZSCREENC
         BCTR  R14,0               DECREMENT FOR EXECUTE
         EX    R14,PNSCSRPK        GET CURSOR OFFSET IN DECIMAL
         CVB   R14,DOUBLE          GET CURSOR OFFSET IN BINARY
         L     R15,ZSCRIAD         POINT TO ZSCREENI
         AR    R14,R15             POINT TO CURSOR LOCATION
         STM   R14,R15,DOUBLE      SAVE FOR MAINLINE
         SPACE
PN$10XIT DELETE EPLOC=PNSISPLK     DELETE ISPLINK
         XC    @ISPLINK,@ISPLINK   CLEAR ENTRY POINT
PN$10NOP LR    R1,R13              POINT TO DYNAMIC AREA
         L     R13,4(,R13)         POINT TO CALLER'S SAVE AREA
         OI    11(R13),X'01'       INVALIDATE FORWARD POINTER
         LA    R0,$PN$10SZ         GET SIZE OF DYNAMIC AREA
         FREEMAIN RU,A=(1),LV=(0),SP=1    FREE DYNAMIC AREA
         BR    R12                 RETURN TO CALLER
         DROP  R13                 @PNSDYNA
         SPACE
PNSCSRPK PACK  DOUBLE,0(0,R1)      <<< EXECUTED >>>
         SPACE
         DROP  R11,R10             REVPNS
         TITLE ' POINT-AND-SHOOT TRANSLATE TABLES AND CONSTANTS '
         SPACE
DSNCHARS DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'
         DC    X'404142434445464748494A004C4D4E4F'
         DC    X'505152535455565758595A005C5D5E5F'
         DC    X'006162636465666768696A6B6C6D6E6F'
         DC    X'707172737475767778797A00007D7E7F'
         DC    X'800000000000000000008A8B8C8D8E8F'
         DC    X'900000000000000000009A9B9C9D9E9F'
         DC    X'A0A10000000000000000AAABACADAEAF'
         DC    X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'
         DC    X'C0000000000000000000CACBCCCDCECF'
         DC    X'D0000000000000000000DADBDCDDDEDF'
         DC    X'E0E10000000000000000EAEBECEDEEEF'
         DC    X'00000000000000000000FAFBFCFDFEFF'
         SPACE
DSNCHAR1 DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'
         DC    X'404142434445464748494A4B4C4D4E4F'
         DC    X'505152535455565758595A005C5D5E5F'
         DC    X'606162636465666768696A6B6C6D6E6F'
         DC    X'707172737475767778797A00007D7E7F'
         DC    X'800000000000000000008A8B8C8D8E8F'
         DC    X'900000000000000000009A9B9C9D9E9F'
         DC    X'A0A10000000000000000AAABACADAEAF'
         DC    X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'
         DC    X'C0000000000000000000CACBCCCDCECF'
         DC    X'D0000000000000000000DADBDCDDDEDF'
         DC    X'E0E10000000000000000EAEBECEDEEEF'
         DC    X'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'
         SPACE
RDBUF    EQU   DSNCHAR1+X'F2',1    READ BUFFER COMMAND
         SPACE
PNS12214 DC    A(X'3F3F')          TURN OFF 3270 "PARITY" BITS
         SPACE
PNSTPGS  TPG   RDBUF,1,NOEDIT,WAIT,MF=L
PNSTPGL  EQU   *-PNSTPGS
         SPACE
         DC    0D'0'
PNSISPLK DC    CL8'ISPLINK '
PNSPFQRY DC    CL8'ISPQRY  '
PNSVCOPY DC    CL8'VCOPY   '
PNSVCLST DC    CL48'(ZCOLORS ZHILITE ZGE ZSCREEN ZSCREENC ZSCREENI) '
         SPACE
         LTORG
         SPACE
         DC    0D'0'               END OF CSECT
         TITLE ' POINT-AND-SHOOT WORK AREAS AND BUFFERS '
@PNSDYN  DSECT ,                   WORK AREAS AND BUFFERS
         DS    18F
PNSTPGD  DS    XL(PNSTPGL)
RDBUFBUF DS    0D                  BUFFER FOR READ BUFFER
         ORG   RDBUFBUF+20480
$PNSDYNL EQU   *-@PNSDYN
@PNSDYNA DSECT ,                   OS/390 2.10 ISPF CALLS WORKK AREA
         DS    18F
ZCOLRLN  DS    F
ZHLITLN  DS    F
ZGELENG  DS    F
ZSCRNLN  DS    F
ZSCRCLN  DS    F
ZSCRILN  DS    F
ZCOLRAD  DS    A
ZHLITAD  DS    A
ZGEADDR  DS    A
ZSCRNAD  DS    A
ZSCRCAD  DS    A
ZSCRIAD  DS    A
PNSPLIST DS    4A
         DS    0D                  END OF DSECT
$PN$10SZ EQU   *-@PNSDYNA
         TITLE '  R E V I E W   P I C T U R E   D I S P L A Y  '
**********************************************************************
*                                                                    *
*        REVIMAGE, REVNATV AND REVGDDM ARE ROUTINES FOR THE          *
*        DISPLAY OF PICTURE IMAGE DATA PREVIOUSLY STORED IN          *
*        A BYTE-PER-PIXEL ARRAY POINTED TO BY HSEACTIV.  AS A        *
*        RESULT, THESE ROUTINES DO NOT HAVE TO PROCESS AND ARE       *
*        INDEPENDENT OF ANY PICTURE FILE FORMAT OR STRUCTURE.        *
*                                                                    *
*        CURRENTLY, THE ARRAY IS ONLY CREATED BY THE PCXCHECK        *
*        ROUTINE WHICH CAN PROCESS ".PCX" SINGLE-PLANE PICTURE       *
*        FILES WITH 1-, 4- OR 8-BIT COLOUR, BY THE BMPCHECK          *
*        ROUTINE WHICH CAN PROCESS ".BMP" SINGLE-PLANE PICTURE       *
*        FILES WITH 1-, 4-, 8-, 16-, 24- OR 32-BIT COLOUR,           *
*        AND BY THE GIFCHECK ROUTINE WHICH CAN PROCESS ".GIF"        *
*        FILES USING COLOUR TABLES WITH AS MANY AS 256 ENTRIES.      *
*                                                                    *
*        RFE ITSELF CAN CREATE THE ARRAY FOR SPECIFIC GRAPHIC        *
*        DISPLAYS, THE FIRST BEING MVS/370 REAL STORAGE USAGE.       *
*                                                                    *
*        ASIDE: HSEACTIV WAS ORIGINALLY FOR POINTING TO THE          *
*        ACTIVE HELP SOURCE ELEMENT (HSE) USED BY HEL/FSHELP         *
*        TO PROCESS HELP TEXT INCLUSIONS TRIGGERED BY A TSO          *
*        HELP ')I' STATEMENT.  THUS, THE FIELD WAS ONLY USED         *
*        IN FULLSCREEN HELP SESSIONS, SO IT WAS DEEMED FREE          *
*        FOR USE IN NON-HELP SESSIONS TO ANCHOR PICTURE DATA.        *
*        FULLSCREEN HELP SESSIONS CANNOT THEREFORE SHOW PICTURE      *
*        IMAGES.                                                     *
*                                                                    *
*        SOME FLAVOUR OF 3270 GRAPHICS-CAPABLE TSO TERMINAL          *
*        IS REQUIRED FOR REVIEW TO RENDER IMAGE DATA.                *
*                                                                    *
*        THE RENDERING MECHANISM OF EACH OF THE ROUTINES IS          *
*        DIFFERENT:                                                  *
*                                                                    *
*        - REVIMAGE LOADS PROGRAMMED SYMBOLS INTO TERMINAL           *
*          STORAGE, AND THEN SENDS THE APPROPRIATE CODE POINTS       *
*          TO THE SCREEN SO THAT THE SYMBOLS ARE CORRECTLY           *
*          DISPLAYED.  REVIMAGE IS ALWAYS CALLED AFTER NORMAL        *
*          REVIEW PROCESSING HAS LOADED DATA FOR DISPLAY             *
*          UNLESS THE CURRENT SESSION IS A FULLSCREEN HELP           *
*          SESSION.  IF NO PICTURE IS TO BE DISPLAYED IT             *
*          RETURNS WITHOUT ACTION.  IF VECTOR GRAPHICS ARE           *
*          TO BE USED IT WILL TRANSFER CONTROL TO REVNATV            *
*          UNLESS NATIVE 3270 VECTOR GRAPHICS ARE NOT AVAILABLE      *
*          WHEREUPON IT WILL TRANSFER CONTROL TO REVGDDM.            *
*                                                                    *
*        - REVNATV USES THE BITMAP DISPLAY SUPPORT PROVIDED          *
*          BY NATIVE 3270 VECTOR GRAPHICS.                           *
*                                                                    *
*        - REVGDDM ISSUES CALLS TO THE IBM GDDM PRODUCT SO THAT      *
*          GDDM WILL DISPLAY THE PICTURE IMAGE ON THE SCREEN.        *
*          GDDM WILL DETERMINE THE METHOD TO BE USED TO SHOW         *
*          THE IMAGE, ALTHOUGH IT WILL PROBABLY USE EXTENDED         *
*          PC HANDSHAKING (DOSLINK/OS2LINK) 3270 VECTOR GRAPHICS     *
*          BECAUSE THAT IS PROBABLY ALL THAT WILL WORK WHENEVER      *
*          REVGDDM GETS CONTROL AND CALLS GDDM, UNLESS IT WAS        *
*          BECAUSE THE LOADABLE SYMBOLS WERE NOT FORMAT-1.           *
*                                                                    *
*        UNLESS RUNNING UNDER MVS/370, ALL OF THESE PICTURE          *
*        RENDERING CSECTS RUN WITH AMODE=31.                         *
*                                                                    *
*        THE RENDERING ROUTINE USED TO CONSTRUCT THE GRAPHICS        *
*        DATA STREAM WILL ALSO WRITE THE ASSEMBLER SOURCE OF         *
*        PICTURE TO A DATA SET SPECIFIED BY THE USER IF THE          *
*        USER HAS ISSUED THE 'PICDATA' SUBCOMMAND OF REVIEW.         *
*                                                                    *
**********************************************************************
         EJECT
**********************************************************************
*                                                                    *
*   SOME GENERAL NOTES ABOUT 3270 LOADABLE SYMBOLS:                  *
*                                                                    *
*   FORMAT-1 SYMBOLS ARE 9 PELS WIDE AND 16 PELS HIGH.  TO LOAD      *
*   A FORMAT-1 SYMBOL 18 BYTES ARE NEEDED: THE FIRST TWO BYTES       *
*   SUPPLY THE BITS OF THE LEFT-MOST VERTICAL SLICE, WITH THE        *
*   NEXT 16 BYTES SUPPLYING THE BITS FOR 16 HORIZONTAL SLICES        *
*   (TOP TO BOTTOM) WHICH ARE EACH 8 BITS WIDE.                      *
*                                                                    *
*   FORMAT-2 ALLOWS FOR THE COMPRESSION OF THE LPS DATA STREAM       *
*   FOR FORMAT-1 SYMBOLS.                                            *
*                                                                    *
*   FORMAT-3 SYMBOLS ARE 8 PELS WIDE AND 10 PELS HIGH.  TO LOAD      *
*   A FORMAT-3 SYMBOL 10 BYTES ARE NEEDED: EACH BYTE SUPPLIES        *
*   THE BITS FOR A HORIZONTAL SLICE WITH SLICES BEING PROCESSED      *
*   FROM TOP TO BOTTOM.  EARLY ATTACHMATE EMULATIONS USED FORMAT-3.  *
*                                                                    *
*   FORMAT-3 CAN BE GENERALISED TO OTHER HORIZONTAL SLICE COUNTS.    *
*                                                                    *
*   FORMAT-4 ALLOWS FOR THE COMPRESSION OF THE LPS DATA STREAM       *
*   FOR FORMAT-3 SYMBOLS.                                            *
*                                                                    *
*   FORMAT-5 SYMBOLS ARE 10 PELS WIDE AND 8 PELS HIGH.  TO LOAD      *
*   A FORMAT-5 SYMBOL 10 BYTES ARE NEEDED: EACH BYTE SUPPLIES        *
*   THE BITS FOR A VERTICAL SLICE WITH SLICES BEING PROCESSED        *
*   FROM LEFT TO RIGHT.  FORMAT-5 IS USED BY 3270 PRINTERS.          *
*                                                                    *
*   FORMAT-5 CAN BE GENERALISED TO OTHER VERTICAL SLICE COUNTS.      *
*                                                                    *
*   FORMAT-6 ALLOWS FOR THE COMPRESSION OF THE LPS DATA STREAM       *
*   FOR FORMAT-5 SYMBOLS.                                            *
*                                                                    *
*   DECOMPRESSION OF COMPRESSED LOAD PROGRAMMED SYMBOL (LPS)         *
*   DATA STREAMS IS A CONTROLLER (3274 OR 3174) FUNCTION.            *
*                                                                    *
**********************************************************************
         TITLE '  R E V I M A G E  '
**********************************************************************
*                                                          *         *
*         DISPLAY PICTURE IMAGE WITH RASTER GRAPHICS       *  GP@P6  *
*                                                          *  11/99  *
**********************************************************************
         SPACE
**********************************************************************
*                                                                    *
*        REVIMAGE PICTURE PROCESSING:                                *
*                                                                    *
*        THE "STANDARD" DATA STREAM CONSTRUCTED BY THE MAINLINE      *
*        WILL BE LARGELY DISCARDED, AND UPON RETURN THE MAINLINE     *
*        WILL ONLY WRITE THE TOP TWO LINES OF THE SCREEN, UNLESS     *
*        THE PIXEL DATA IS NOT FROM THE CONTENTS OF A BROWSED        *
*        FILE, WHEREUPON REVIMAGE WILL INSERT THE SYMBOL CODE        *
*        POINTS INTO THE REVIEW SCREEN BUFFER FOR REVCOMM TO         *
*        PROCESS RATHER THAN BUILDING A 3270 DATA STREAM FOR         *
*        ASYNCHRONOUS PROCESSING.                                    *
*                                                                    *
*        BLACK-AND-WHITE PICTURES WILL USE ALL SINGLE-PLANE          *
*        AND TRIPLE-PLANE LOADABLE SYMBOL-SETS BEFORE REUSING A      *
*        SYMBOL-SET.  COLOUR PICTURES WILL ONLY USE TRIPLE-PLANE     *
*        LOADABLE SYMBOL-SETS.                                       *
*                                                                    *
*        WHEN LPS OVERFLOW OCCURS (IE. ALL SYMBOL SETS ARE FULL)     *
*        THE ACCUMULATED DATA IS SENT TO THE TERMINAL VIA TPUT.      *
*        WHEN THE PICTURE DATA STREAM GENERATION IS COMPLETE THE     *
*        UNSENT ACCUMULATED DATA IS KEPT IN STORAGE TO BE APPENDED   *
*        TO THE TPUT ISSUED BY REVCOMM TO MINIMIZE THE NUMBER OF     *
*        TPUTS ISSUED TO PAINT THE WHOLE SCREEN.                     *
*                                                                    *
**********************************************************************
*                                                                    *
* ON ENTRY:     HSEACTIV -> PICTURE DATA INTERPRETED FROM FILE       *
*                     R9 -> @DATA                                    *
*                     R13-> REGISTER SAVE AREA                       *
*                     R14-> RETURN ADDRESS                           *
*                     R15-> REVIMAGE                                 *
*                                                                    *
* DURING PROCESSING:  R11-> REVIMAGE                                 *
*                     R13-> @IMGWORK (LOCAL GETMAINED AREA)          *
*                                                                    *
**********************************************************************
         SPACE
REVIMAGE RSECT
REVIMAGE AMODE 31
REVIMAGE RMODE 24
         USING REVIMAGE,R15
         B     @IMAGE
         DC    AL1(9),CL9'REVIMAGE'
@IMAGE   TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BOR   R14                 YES, DO NOTHING HERE
         OC    HSEACTIV,HSEACTIV   IS ANY PICTURE DATA PRESENT?
         BZR   R14                 NO, DO NOTHING HERE
         TM    VECFLAGS,VCTR       VECTOR GRAPHICS AVAILABLE?
         BNO   IMGDOSYM            NO, HAVE TO LOAD SYMBOLS
         TM    PICFLAGS,PICOVR     HAS LPS OVERFLOW OCCURRED?
         BO    IMGDOVEC            YES, USE VECTOR FROM NOW ON
         CLI   SYMSTGF,0           ANY LOADABLE SYMBOL SETS?
         BE    IMGDOVEC            NO, HAVE TO USE VECTOR GRAPHICS
         CLC   MATRIXSZ,=X'0910'   NINE BY SIXTEEN CHARACTER MATRIX?
         BNE   IMGDOVEC            NO, BUT GDDM COULD HANDLE IT
         CLC   Y_BYTES,PAGESIZE    MORE THAN A SCREENFUL?
         BH    IMGDOVEC            YES, USE VECTOR GRAPHICS
         TM    PICFLAGS,PICNBW     BLACK-AND-WHITE PICTURE?
         BZ    IMGDOSYM            YES, USE LOADABLE SYMBOLS
         CLI   SYMSTG3,0           CAN COLOURED SYMBOLS BE LOADED?
         BNE   IMGDOSYM            YES, USE LOADABLE SYMBOLS
IMGDOVEC TM    PICFLAGS,PICOK      PICTURE NEED REDRAWING?
         BOR   R14                 NO, SAVE A LOT OF WORK FOR NOTHING
         NI    PICFLAGS,255-PICOVR-PICPUT-PICSYM  RESET FLAGS
         LA    R1,SYMDCBS          YES, PASS DCB TEMPLATE ADDRESS
         TM    VECFLAGS,VCTRNATV   NATIVE VECTOR GRAPHICS OKAY?
         BO    IMGDONAT            YES, DON'T NEED TO CALL GDDM
         L     R15,=A(REVGDDM)     GET GDDM CALL ROUTINE ADDRESS
         BR    R15                 RENDER THE PICTURE WITH GDDM
IMGDONAT L     R15,=A(REVNATV)     GET GRAPHICS ROUTINE ADDRESS
         BR    R15                 RENDER THE PICTURE NATIVELY
         SPACE
IMGDOSYM TM    PICFLAGS,PICOK      PICTURE NEED REDRAWING?
         BOR   R14                 NO, SAVE A LOT OF WORK FOR NOTHING
         DROP  R15                 REVIMAGE
         STM   R14,R12,12(R13)     SAVE REGISTERS
         LR    R11,R15             SET BASE
         USING REVIMAGE,R11
         L     R0,@IMGWKSZ
         MVI   GETMNTRC,66         TRACK GETMAIN IN CASE OF FAILURE
         GETMAIN RC,LV=(0),LOC=(24,64)
         LTR   R15,R15             GOT MAIN STORAGE?
         BZ    IMGSTGOK            YES
         MVI   MSG,123             REQUEST ABORTED - STORAGE FULL
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER
         SPACE
IMGSTGOK ST    R1,8(,R13)          CHAIN SAVE AREAS
         ST    R13,4(,R1)
         LR    R13,R1              POINT TO GETMAINED AREA
         USING @IMGWORK,R13
         MVC   SYMDCB,SYMDCBS      LOAD DCB TEMPLATE
         USING IHADCB,SYMDCB
         MVC   DCBDDNAM,MSG+64     LOAD DCB DDNAME
         NI    PICFLAGS,255-PICOVR-PICPUT-PICSYM       RESET FLAGS
         A     R1,IMGBFOFF         POINT TO FULLSCREEN TPUT BUFFER
         ST    R1,IMGBFADR         SAVE FOR LATER USE
         LA    R0,SYMSTG3          POINT TO FIRST COLOUR RWS ID
         ST    R0,IMGCLRPT         SAVE ADDRESS FOR LATER
         SR    R5,R5
         ST    R5,IMGROWS          FLAG NO GRAPHICS LINES NEEDED (YET)
         ST    R5,IMGLFTPD
         MVI   LPSWSF,WSF          SET WRITE STRUCTURED FIELD COMMAND
         MVI   LPSID,X'06'         SET LPS STRUCTURED FIELD TYPE
         MVI   LPSFLAGS,X'41'      BASIC(0), CLEAR(1), FORMAT TYPE 1
         MVI   LPSCHAR,X'41'       FIRST CODE POINT
         MVC   LPSRWS,SYMSTGF      ASSUME MONOCHROME FOR THE MOMENT
         LA    R0,LPSBASIC         POINT TO SYMBOL DATA START
         TM    PICFLAGS,PICNBW     BLACK-AND-WHITE PICTURE?
         BZ    IMGHDROK            YES, READY TO LOAD DATA
         MVI   LPSFLAGS,X'C1'      NO, NEED EXTENSION FOR COLOUR
         MVC   LPSRWS,SYMSTG3      LOAD TRIPLE-PLANE STORAGE NUMBER
         MVI   LPSLENE,6           SIX BYTES IN EXTENDED HEADER
         MVI   LPSFLAGE,0          SET EXTENDED FLAGS TO DEFAULTS
         MVI   LPSLW,9             FORMAT-1 IS 9 CELLS WIDE
         MVI   LPSLH,16            FORMAT-1 IS 16 CELLS HIGH
         MVI   LPSSUBSN,0          NOT USING 2-BYTE CODED DATA
         MVI   LPSCOLOR,1          START DATA WITH BLUE PLANE
         LA    R0,LPSDATAE         POINT TO SYMBOL DATA START
IMGHDROK ST    R0,IMGSYMAD         SAVE IT FOR DATA LOADING
         SPACE
*
*   Y_OFFSET CONTAINS LINES BETWEEN TOP EDGE OF SCREEN AND TOP
*   EDGE OF PICTURE.  X_OFFSET CONTAINS COLUMNS BETWEEN LEFT EDGE
*   OF SCREEN AND LEFT EDGE OF PICTURE.
*
         NI    PICCOLOR,X'0F'      CLEAR COLOUR CODE ZONE
         L     R2,HSEACTIV         POINT TO PICTURE DATA
         ST    R2,IMGHOME          SAVE FIRST PIXEL TO LOAD POINTER
         SR    R3,R3               START WITH NEW LINE
         LR    R0,R2               COPY PIXEL ORIGIN ADDRESS
         A     R0,X_PELS           POINT PAST FIRST LINE'S PIXELS
         ST    R0,IMGEOLIN         SAVE END OF PIXEL LINE POINTER
         LH    R0,X_BYTES          GET PICTURE SCREEN COLUMN COUNT
         ST    R0,IMGCOLS          REMEMBER COLUMNS-TO-LOAD COUNT
         LH    R5,Y_BYTES          GET PICTURE SCREEN LINE COUNT
         ST    R5,IMGROWS          REMEMBER LINES-TO-LOAD COUNT
         LH    R8,Y_OFFSET         GET PRECEDING LINE COUNT
         MH    R8,SCRNCOLS+2       MULTIPLY BY COLUMN COUNT
         AH    R8,X_OFFSET         GET PICTURE START SCREEN LOCATION
         A     R8,SCREENBF         POINT TO FIRST CODE POINT TARGET
         ST    R8,IMGLNLOC         SAVE LINE SCREEN LOCATION
         TM    STATUS11,$11FS2     IS REVIEW2 THE CALLER?
         BNO   IMGSETLP            NO, GO IMAGE RFE GRAPHIC
         SPACE
IMGDSTRM MVI   0(R1),WCCNULL       USE NO-ACTION WCC
         MVI   1(R1),SBA           SET BUFFER ADDRESS
         L     R0,SCRNCOLS         FIRST GRAPHICS WRITE SO POSITION
         AR    R0,R0                     TO START OF THIRD LINE
         STC   R0,3(,R1)           THIRD SCREEN LINE WILL ALWAYS
         SRL   R0,6                      BE 12-BIT ADDRESSABLE
         STC   R0,2(,R1)
         NI    3(R1),X'3F'
         TR    2(2,R1),IMGADTBL
         LA    R8,4(,R1)           ADJUST POINTER
         MVC   0(3,R8),=X'2842F5'  TURQUOISE FOR DETAILS TEXT
         MVI   3(R8),C' '          BLANK OUT TEXT AREA
         MVC   4(79,R8),3(R8)
         L     R0,PICOLRES         SHOW COLOUR BIT DEPTH
         LA    R15,3(,R8)          POINT TO DISPLAY AREA
         BAS   R14,IMGEDNUM        FORMAT NUMBER
         MVC   6(10,R15),=CL10'-BIT COLOR'
         L     R0,X_PELS           SHOW HORIZONTAL SIZE
         LA    R15,23(,R8)         POINT TO DISPLAY AREA
         BAS   R14,IMGEDNUM        FORMAT NUMBER
         MVC   7(9,R15),=CL9'PELS WIDE'
         L     R0,Y_PELS           SHOW VERTICAL SIZE
         LA    R15,41(,R8)         POINT TO DISPLAY AREA
         BAS   R14,IMGEDNUM        FORMAT NUMBER
         MVC   7(9,R15),=CL9'PELS HIGH'
         ICM   R0,15,PICOLORS      SHOW NUMBER OF DIFFERENT COLOURS
         BZ    IMGNUMOK
         LA    R15,59(,R8)         POINT TO DISPLAY AREA
         BAS   R14,IMGEDNUM        FORMAT NUMBER
         MVC   7(6,R15),=CL6'COLORS'
IMGNUMOK L     R14,SCRNCOLS        GET SCREEN WIDTH
         AR    R14,R14             DOUBLE IT
         L     R6,SCREENBF         POINT TO THE PRIMARY BUFFER
         L     R7,SCREENSZ         GET THE BUFFER SIZE
         AR    R6,R14              POINT TO THE THIRD LINE
         SR    R7,R14              ADJUST LENGTH
         LA    R0,C' '
         SLL   R0,24
         LA    R4,3(,R8)           POINT TO TEXT
         LA    R5,72               GET LENGTH OF TEXT
         OR    R5,R0               SET PAD
         MVCL  R6,R4               COPY TEXT TO MAINLINE SCREEN BUFFER
         L     R6,SHADOWBF         POINT TO THE SHADOW BUFFER
         L     R7,SCREENSZ         GET THE BUFFER SIZE
         AR    R6,R14              POINT TO THE THIRD LINE SHADOW
         SR    R7,R14              ADJUST LENGTH
         LA    R5,X'05'            TURQUOISE FOR STATUS INFORMATION
         SLL   R5,24               SET PAD AND ZERO LENGTH
         MVCL  R6,R4               SET ATTRIBUTES FOR SCREEN BODY
         TM    PICFLAGS,PICBIG+PICOVR  BUILDING A DATA STREAM?
         BZ    IMGBEGIN            NO, MAKE BUFFER, NOT DATA STREAM
         LH    R0,X_BYTES          GET SYMBOLS PER LINE
         AH    R0,X_OFFSET         ADD LEADING BLANKS
         S     R0,OFFSET           SUBTRACT COLUMNS LEFT OF SCREEN
         BNP   IMAGEXIT            SCROLLED RIGHT PAST PICTURE
         SPACE
         LA    R8,72(,R8)          POINT PAST TEXT
         CH    R0,X_BYTES          MORE THAN PICTURE WIDTH?
         BNH   *+8                 NO
         LH    R0,X_BYTES          YES, REDUCE TO PICTURE WIDTH
         C     R0,SCRNCOLS         PICTURE WIDER THAN SCREEN?
         BNH   *+8                 NO
         L     R0,SCRNCOLS         YES, CAN ONLY SHOW SCREEN WIDTH
         ST    R0,IMGCOLS          REMEMBER COLUMNS-TO-LOAD COUNT
         LA    R0,1
         AH    R0,PAGESIZE         GET MAXIMUM LINES AVAILABLE
         CH    R0,Y_BYTES          IS PICTURE TALLER?
         BNH   *+8                 YES
         LH    R0,Y_BYTES          NO, REDUCE LINE COUNT TO HEIGHT
         ST    R0,IMGROWS          REMEMBER LINES-TO-LOAD COUNT
         L     R0,OFFSET           GET SCROLL RIGHT AMOUNT
         SH    R0,X_OFFSET         SUBTRACT LEADING BLANKS PADDING
         BNM   IMGHOUSE            FIRST COLUMN WILL HAVE PICTURE
         LPR   R0,R0               GET LEADING BLANK COUNT
         ST    R0,IMGLFTPD         SAVE LEFT PADDING COLUMN COUNT
         SR    R0,R0               USE PICTURE'S LEFT-MOST DATA
IMGHOUSE MH    R0,=H'9'            CONVERT COLUMNS TO PIXELS
         A     R0,HSEACTIV         POINT TO FIRST ARRAY BYTE TO USE
         ST    R0,IMGHOME          SAVE FIRST PIXEL TO LOAD POINTER
         LH    R1,Y_OFFSET         GET PRECEDING LINE COUNT
         M     R0,SCRNCOLS
         A     R1,IMGLFTPD         GO STRAIGHT TO FIRST PICTURE BYTE
         MVI   0(R8),RA            REPEAT TO ADDRESS
         STCM  R1,3,1(R8)
         TM    1(R8),X'F0'         ADDRESS OVER 4095?
         BNZ   IMGRAOK1            YES, LEAVE AS 14-BIT
         SLL   R1,2                NO, CONVERT TO 12-BIT ADDRESS
         STCM  R1,2,1(R8)
         SRL   R1,2                RESTORE LOCATION
         NI    2(R8),X'3F'
         TR    1(2,R8),IMGADTBL
IMGRAOK1 MVI   3(R8),C' '          BLANKS
         LA    R8,4(,R8)           ADJUST POINTER
         ST    R1,IMGLNLOC         SAVE LINE SCREEN LOCATION
         MVC   0(2,R8),=X'2842'    SET COLOUR FOR PICTURE
         MVC   2(1,R8),PICCOLOR    INITIALLY NEUTRAL/WHITE
         LA    R8,3(,R8)           ADJUST POINTER
IMGBEGIN L     R2,IMGHOME          POINT TO FIRST PIXEL TO LOAD
         L     R5,IMGROWS          GET PICTURE SCREEN LINES
         L     R0,HSEACTIV         POINT TO PICTURE DATA
         A     R0,X_PELS           POINT PAST FIRST LINE'S PIXELS
         ST    R0,IMGEOLIN         SAVE END OF PIXEL LINE POINTER
         SR    R3,R3               START WITH NEW LINE
         TM    PICFLAGS,PICSRC     WRITING PICTURE SOURCE?
         BNO   IMGSTGLP            NO
         SPACE
         MVI   OPEND,X'80'         YES, OPEN OUTFILE FILE
         OPEN  (SYMDCB,(OUTPUT)),MF=(E,OPEND)
         MVI   SYMSTMT,C' '        CLEAR OUTPUT RECORD
         MVC   SYMSTMT+1(79),SYMSTMT
         MVC   SYMSTMT(14),=CL14'* REVIEW &REL '
         MVC   SYMSTMT+14(16),=CL16' SYMBOL DATA FOR'
         LH    R1,$DSNAME
         BCTR  R1,0
         EX    R1,LDSYMDSN
         CLI   $MEMBER,C' '        MEMBER NAME TO BE DISPLAYED?
         BE    SYMDSNOK            NO
         LA    R1,SYMSTMT+32(R1)
         MVI   0(R1),C'('
         MVC   1(8,R1),$MEMBER
SYMMEMLP CLI   8(R1),C' '          TRAILING BLANK?
         BNE   SYMMEMOK            NO
         BCT   R1,SYMMEMLP
SYMMEMOK MVI   9(R1),C')'
SYMDSNOK XASAM24
         PUT   SYMDCB,SYMSTMT      WRITE HEADING
         XASAM31
         MVC   SYMSTMT+2(78),SYMSTMT+1
         L     R1,SCREENBF         POINT TO SCREEN BUFFER
         L     R0,SCRNCOLS
         AR    R1,R0
         AR    R1,R0               POINT TO THIRD SCREEN LINE
         MVC   SYMSTMT+5(54),0(R1) COPY STATS
         XASAM24
         PUT   SYMDCB,SYMSTMT      WRITE STATS
         XASAM31
         SPACE
IMGSTGLP EQU   *                   START LOADING TERMINAL'S STORAGE
         TM    PICFLAGS,PICBIG+PICOVR  BUILDING A DATA STREAM?
         BZ    IMGSETLP            NO, MAKE BUFFER, NOT DATA STREAM
         L     R8,IMGBFADR         POINT TO SCREEN IMAGE BUFFER
         MVI   0(R8),WCCNULL       USE NO-ACTION WCC
         MVC   1(2,R8),=X'2842'    SET COLOUR FOR PICTURE
         MVC   3(1,R8),PICCOLOR    INITIALLY NEUTRAL/WHITE
         LA    R8,4(,R8)           ADJUST POINTER
IMGSETLP EQU   *                   START LOADING THE SYMBOL SET
         MVI   IMGPELBT,X'01'      TEST LOW BIT IN ARRAY BYTES
         MVI   LPSLCID,X'B0'       SET BROWSER LOCAL CHARACTER SET
         OC    LPSLCID,LPSRWS          ID TO BE USED IN 3270 ORDERS
         TM    PICFLAGS,PICBIG+PICOVR  BUILDING A DATA STREAM?
         BZ    IMGRFEPX            NO, MAKE BUFFER, NOT DATA STREAM
         MVC   0(2,R8),=X'284300'  SPECIFY SYMBOL SET TO RENDER DATA
         MVC   2(1,R8),LPSLCID     LOADED SYMBOL SET
         LA    R8,3(,R8)           ADJUST POINTER
IMGRFEPX EQU   *                   START LOADING THE SYMBOL SET
         L     R0,IMGLNORG         GET SCREEN LINE ARRAY ORIGIN
         L     R1,IMGEOLIN         GET END OF PEL LINE AT SYMSET START
*              R2 <==              PICTURE PEL ARRAY ELEMENT ADDRESS
*              R3 <==              COLUMNS STILL TO PROCESS FOR LINE
         LA    R4,CODEPTS          POINT TO FIRST CODE POINT TO USE
*              R5 <==              NUMBER OF ROWS STILL TO WRITE
         L     R6,IMGSYMAD         POINT TO SYMBOL BITS TARGET
         STM   R0,R5,IMGSSSSV      SAVE SYMBOL SET START STATUS
IMGPLNLP EQU   *                   START LOADING THE SYMBOL SET PLANE
         LM    R0,R5,IMGSSSSV      RESTORE SYMBOL SET START STATUS
         ST    R0,IMGLNORG         RESTORE SCREEN LINE ARRAY ORIGIN
         ST    R1,IMGEOLIN         RESTORE END OF PEL LINE
         IC    R15,IMGPELBT        GET BIT TO TEST IN ARRAY BYTES
         XC    IMGBLOKS,IMGBLOKS   CLEAR COLOUR BLOCK CODE POINTS
         MVI   IMGBLOKS,C' '       USE BLANK FOR SOLID BLACK BLOCK
         LTR   R3,R3               CHECK FOR ALREADY PROCESSING A LINE
*        BP    IMGSYMLP            KEEP SYMBOL SET START LINE STATUS
         BNP   IMGLINLP            KEEP SYMBOL SET START LINE STATUS
         B     IMGSYMLP            KEEP SYMBOL SET START LINE STATUS
IMGLINLP EQU   *                   START LOADING SYMBOLS FOR A LINE
         ST    R2,IMGLNORG         SAVE SCREEN LINE ARRAY ORIGIN
         L     R3,IMGCOLS          GET PICTURE SCREEN COLUMNS
         TM    PICFLAGS,PICBIG+PICOVR  BUILDING A DATA STREAM?
         BNZ   IMGSYMLP            YES, KEEP BUILDING IT
         CLI   IMGPELBT,X'01'      SCANNING FIRST PLANE?
         BNE   IMGSYMLP            NO, DO NOT EDIT TPUT BUFFER CURSOR
         L     R8,IMGLNLOC         POINT TO START OF SCREEN LINE
IMGSYMLP EQU   *                   START LOADING A SYMBOL
         CLI   0(R4),X'FF'         END OF VALID CODE POINTS?
         BE    IMGLDSYM            YES, LOAD SYMBOLS MADE SO FAR
         LA    R0,16               GET BIT COUNT OF VERTICAL SLICES
         SR    R14,R14             CLEAR PIXEL BIT ACCUMULATOR
         LR    R1,R2               POINT TO TOP LEFT MATRIX CORNER
         MVI   DOUBLE+4,0          RESET A BYTE
         MVI   DOUBLE+5,255        SET A BYTE
IMGVRTLP SLL   R14,1               MAKE ROOM FOR NEW BIT ACCUMULATION
         C     R1,PICENDAD         PAST END OF PICTURE DATA?
         BNL   IMGDONE1            YES, DO NOT ATTEMPT TO ACCESS BYTE
         OC    DOUBLE+4(1),0(R1)   DETECT NON-BLANK
         NC    DOUBLE+5(1),0(R1)   DETECT SOLID COLOUR BLOCK
         EX    R15,PELTEST         TEST BIT IN PICTURE ARRAY BYTE
         BNO   IMGDONE1            BIT WAS ZERO
         LA    R14,1(,R14)         BIT WAS ONE SO SET ACCUMULATOR BIT
IMGDONE1 A     R1,X_PELS           GO DOWN ONE PICTURE SCANLINE
         BCT   R0,IMGVRTLP         LOOP THROUGH VERTICAL SLICE PELS
         STCM  R14,3,0(R6)         SAVE VERTICAL SLICE PELS
         LA    R6,2(,R6)           POINT PAST STORED SYMBOL DATA
         LA    R7,16               GET NUMBER OF HORIZONTAL SLICES
         LR    R1,R2               POINT TO TOP LEFT MATRIX CORNER
         L     R12,IMGEOLIN        POINT TO END OF SCANLINE
IMGHRZLP C     R12,PICENDAD        GOING TO OVERSHOOT PICTURE ARRAY?
         BL    *+8                 NO
         L     R12,PICENDAD        YES, REDUCE MAXIMUM ACCESS ADDRESS
         LA    R0,8                GET BIT COUNT OF A HORIZONTAL SLICE
         ST    R1,DOUBLE           SAVE THE ADDRESS OF SLICE_START-1
         SR    R14,R14             CLEAR PIXEL BIT ACCUMULATOR
IMGPELLP LA    R1,1(,R1)           POINT TO NEXT SLOT IN SLICE
         SLL   R14,1               MAKE ROOM FOR NEW BIT ACCUMULATION
         CR    R1,R12              PAST END OF CURRENT SCANLINE?
         BL    IMGHTEST            NO, GO PROCESS PICTURE ELEMENT
         MVI   DOUBLE+5,0          TREAT SPACE BEYOND PICTURE AS BLACK
         B     IMGDONE2            CANNOT USE COLOUR BLOCK
*
*   THE NEXT TWO INSTRUCTIONS ARE USED TO DETECT SOLID BLOCKS
*   OF COLOUR.  IF THE ORING AND ANDING OF ALL THE PIXELS IS
*   THE SAME THEN THE SYMBOL IS A SOLID BLOCK OF ONE COLOUR.
*   A SOLID BLACK SYMBOL CAN ALWAYS BE WRITTEN AS A BLANK.
*
IMGHTEST OC    DOUBLE+4(1),0(R1)   DETECT NON-BLANK
         NC    DOUBLE+5(1),0(R1)   DETECT SOLID COLOUR BLOCK
         EX    R15,PELTEST         TEST BIT IN PICTURE ARRAY BYTE
         BNO   IMGDONE2            BIT WAS ZERO
         LA    R14,1(,R14)         BIT WAS ONE SO SET ACCUMULATOR BIT
IMGDONE2 BCT   R0,IMGPELLP         LOOP THROUGH HORIZONTAL SLICE PELS
         STC   R14,0(,R6)          SAVE PELS OF A HORIZONTAL SLICE
         LA    R6,1(,R6)           POINT PAST STORED SYMBOL DATA
         L     R1,DOUBLE           RESTORE SLICE_START-1 POINTER
         A     R1,X_PELS           ADJUST FOR NEXT HORIZONTAL SLICE
         A     R12,X_PELS          GET SCANLINE END POINTER
         BCT   R7,IMGHRZLP         PROCESS NEXT HORIZONTAL SLICE
         TM    PICFLAGS,PICNBW     COLOUR PICTURE?
         BO    IMGBLOCK            YES, DIVERGE FROM B-&-W LOGIC
*
*   THE FIRST OPTIMIZATION IS FOR BLACK-AND-WHITE ONLY.
*
*   BY USING A BLANK FOR A SYMBOL WITH NO ILLUMINATED PIXELS,
*   A CODE POINT IS CONSERVED FOR OTHER PICTURE CONTENT.
*   (THE SOLID BLOCK CHECK COVERS THIS FOR COLOUR PICTURES.)
*
         MVI   0(R8),C' '          NO, PREPARE FOR BLANK
         CLI   DOUBLE+4,0          BLANK CHARACTER?
         BE    IMGDSCRD            YES, SAVE A CODE POINT
*
*   THE SECOND OPTIMIZATION IS FOR BLACK-AND-WHITE ONLY.
*
*   THE 18 BYTES OF PIXEL DATA ARE COMPARED WITH THE DATA
*   FOR ALL SYMBOLS PREVIOUSLY CODED FOR THE CURRENT SYMBOL
*   SET.  IF A MATCH IS FOUND THE EARLIER SYMBOL IS USED FOR
*   THIS CHARACTER AS WELL.  THIS ENSURES THAT NO TWO SYMBOLS
*   IN THE SAME SYMBOL SET HAVE THE SAME PIXEL CONTENTS.
*
         LR    R14,R6              YES, COPY LPS BUFFER CURSOR
         SH    R14,=H'18'          POINT TO SYMBOL PIXELS JUST CODED
         L     R10,IMGSYMAD        POINT TO FIRST SYMBOL OF SYMBOL SET
         LA    R12,CODEPTS         POINT TO FIRST CODE POINT
IMGOPTLP CR    R14,R10             UP TO CURRENT SYMBOL?
         BNH   IMGSYMOK            YES, NO REPEATS IN SYMBOL SET
         CLC   0(18,R10),0(R14)    REPEAT PIXEL PATTERN FOR SYMBOL?
         BE    IMGREUSE            YES, REUSE PREVIOUS SYMBOL
         LA    R10,18(,R10)        POINT TO NEXT SYMBOL'S PIXEL SLICES
         LA    R12,1(,R12)         POINT TO CORRESPONDING CODE POINT
         B     IMGOPTLP            CONTINUE SEARCH FOR REPEATS
IMGREUSE MVC   0(1,R8),0(R12)      LOAD RECURRING CODE POINT
         B     IMGDSCRD            DO NOT LOAD AN ADDITIONAL SYMBOL
*
*   THE THIRD OPTIMIZATION IS FOR COLOUR BITMAPS ONLY.
*
*   IF ALL PIXELS OF A SYMBOL ARE THE SAME COLOUR, AND SUCH A
*   SYMBOL HAS ALREADY BEEN CODED IN THE CURRENT SYMBOL SET,
*   THEN THE EARLIER CODE POINT IS REUSED.  THIS CAN GREATLY
*   REDUCE THE NUMBER OF SYMBOLS REQUIRED TO RENDER BITMAPS
*   WHICH CONTAIN ONE OR MORE LARGE BLOCKS OF A SOLID COLOUR.
*
IMGBLOCK CLC   DOUBLE+4(1),DOUBLE+5   BLOCK OF COLOUR?
         BNE   IMGNTBLK            NO, USE A NEW CODE POINT
         SR    R12,R12             YES
         IC    R12,DOUBLE+4        GET COLOUR CODE
         LA    R12,IMGBLOKS(R12)   POINT TO BLOCK CODE POINT SLOT
         CLI   0(R12),0            FIRST BLOCK FOR THIS COLOUR?
         BE    IMGBLOK1            YES
         CLI   IMGPELBT,X'01'      SCANNING FIRST PLANE?
         BNE   IMGDSCRD            NO, DO NOT EDIT TPUT BUFFER
         MVC   0(1,R8),0(R12)      YES, REUSE OLD CODE POINT
         B     IMGDSCRD            DO NOT LOAD AN ADDITIONAL SYMBOL
IMGBLOK1 MVC   0(1,R12),0(R4)      REMEMBER CODE POINT FOR NEXT TIME
         B     IMGSYMOK            NOW HAVE TO USE THIS CODE POINT
*
*   THE FOURTH OPTIMIZATION IS FOR COLOUR BITMAPS ONLY.
*
*   AFTER A SYMBOL HAS BEEN CODED, AND THE NEXT SYMBOL IS ON THE
*   SAME LINE AND IS NOT A NARROW SYMBOL ON THE RIGHT EDGE OF THE
*   PICTURE, THE NEXT SYMBOL IS CHECKED TO SEE IF IT IS THE SAME
*   AS THIS SYMBOL.  IF IT IS THEN THIS SYMBOL IS REPEATED FOR
*   THE NEXT CHARACTER.  THIS ENABLES HORIZONTAL LINES TO BE
*   RENDERED WITH FEWER SYMBOLS, EVEN IF SUCH LINES ARE IN THE
*   ROW OF SHORT SYMBOLS ALONG THE BOTTOM EDGE.
*
IMGNTBLK C     R3,IMGCOLS          PROCESSING LEFT-MOST COLUMN?
         BNL   IMGSYMOK            YES, NO PREVIOUS COLUMN TO COMPARE
         CLI   0(R4),X'42'         JUST CUT CODE POINT X'41'?
         BNH   IMGSYMOK            YES, STAY WITH THIS SYMBOL SET
         L     R14,IMGEOLIN        POINT PAST PIXEL SCANLINE
         SR    R14,R2              GET SCANLINE PIXELS TO GO
         CH    R14,=H'9'           NARROW RIGHT-EDGE SYMBOL?
         BL    IMGSYMOK            YES, NOT SUITABLE FOR THIS CHECK
         LR    R1,R2               POINT TO TOP-LEFT MATRIX CORNER
         SH    R1,=H'9'            POINT BACK TO PIXELS JUST DONE
         LA    R0,16               GET MAXIMUM SCANLINES PER SYMBOL
IMGREPLP CLC   0(9,R1),9(R1)       SYMBOL SCANLINE REPEATED?
         BNE   IMGSYMOK            NO, NOT A REPEATED SYMBOL
         A     R1,X_PELS           YES, POINT TO NEXT SCANLINE
         C     R1,PICENDAD         PAST END OF PICTURE DATA?
         BNL   IMGISREP            YES, REPEATED LAST ROW SHORT SYMBOL
         BCT   R0,IMGREPLP         KEEP CHECKING SYMBOL FOR A REPEAT
IMGISREP CLI   IMGPELBT,X'01'      SCANNING FIRST PLANE?
         BNE   IMGDSCRD            NO, DO NOT EDIT TPUT BUFFER
         BCTR  R8,0                BACK UP TO PREVIOUS CODE POINT
         MVC   1(1,R8),0(R8)       REPEAT THE OUTPUT CODE POINT
         TM    PICFLAGS,PICBIG+PICOVR  BUILDING A DATA STREAM?
         BNZ   IMGSMREP            YES
         A     R8,SCREENSZ         NO, POINT TO SHADOW BUFFER
         MVC   1(1,R8),0(R8)       REPEAT THE SHADOW CODE
         S     R8,SCREENSZ         POINT TO BACK TO PRIMARY BUFFER
IMGSMREP LA    R8,1(,R8)           RESTORE TPUT BUFFER POINTER
IMGDSCRD SH    R6,=H'18'           DISCARD PIXEL SLICES JUST CODED
         B     IMGNXSYM
IMGSYMOK CLI   IMGPELBT,X'01'      SCANNING FIRST OR ONLY PLANE?
         BNE   IMGNXTCD            NO, DO NOT EDIT TPUT BUFFER
         MVC   0(1,R8),0(R4)       LOAD NEW CODE POINT
IMGNXTCD LA    R4,1(,R4)           POINT TO NEXT AVAILABLE CODE POINT
IMGNXSYM CLI   IMGPELBT,X'01'      SCANNING FIRST OR ONLY PLANE?
         BNE   IMGSYMDN            NO, DO NOT EDIT TPUT BUFFER
         TM    PICFLAGS,PICBIG+PICOVR  BUILDING A DATA STREAM?
         BNZ   IMGSYMDN            YES
         A     R8,SCREENSZ         NO, POINT TO SHADOW BUFFER
         UNPK  0(1,R8),LPSRWS      SUPPLY SYMBOL STORAGE NUMBER
         OI    0(R8),X'80'         FLAG PROGRAMMED SYMBOL PRESENT
         OC    0(1,R8),PICCOLOR    SET SYMBOL TO REQUESTED COLOUR
         S     R8,SCREENSZ         POINT TO BACK TO PRIMARY BUFFER
IMGSYMDN CLI   IMGPELBT,X'01'      SCANNING FIRST PLANE?
         BNE   *+8                 NO, DO NOT ALTER TPUT BUFFER CURSOR
         LA    R8,1(,R8)           ADJUST TPUT BUFFER POINTER
         LA    R2,9(,R2)           GET NEXT SYMBOL TOP LEFT ARRAY CNR
         BCT   R3,IMGSYMLP         PROCESS NEXT SYMBOL
*
*   REPOSITION FOR START OF NEXT HORIZONTAL LINE OF SYMBOLS
*
         L     R2,X_PELS           GET PICTURE PIXEL WIDTH
         SLL   R2,4                GET PIXELS PROCESSED IN SCREEN LINE
         A     R2,IMGLNORG         GET LINE ARRAY ORIGIN FOR NEXT LINE
         CLI   IMGPELBT,X'01'      SCANNING FIRST PLANE?
         BNE   IMGNXLIN            NO, DO NOT EDIT TPUT BUFFER
         L     R0,SCRNCOLS         GET SCREEN WIDTH
         LR    R1,R0
         A     R1,IMGLNLOC
         ST    R1,IMGLNLOC         UPDATE LINE LOCATION
         TM    PICFLAGS,PICBIG+PICOVR  BUILDING A DATA STREAM?
         BZ    IMGNXTLN            NO, GET NEXT LINE'S FIRST SYMBOL LOC
         S     R0,IMGLFTPD
         S     R0,IMGCOLS          GET COLUMNS TILL END OF LINE
         BZ    IMGNXLIN            LINE IS FULL, SKIP RA ORDER
         CH    R5,=H'1'            LAST LINE?
         BH    IMGLSTOK            NO
         MVC   0(3,R8),=X'284300'  YES, RESET SYMBOL SET TO DEFAULT
         LA    R8,3(,R8)           ADJUST BUFFER POINTER
         SR    R1,R1               CHANGE LOCATION TO ZERO
IMGLSTOK MVI   0(R8),RA            REPEAT TO ADDRESS
         STCM  R1,3,1(R8)          BUFFER ADDRESS
         TM    1(R8),X'F0'         ADDRESS OVER 4095?
         BNZ   IMGRAOK2            YES, LEAVE AS 14-BIT
         SLL   R1,2                NO, CONVERT TO 12-BIT ADDRESS
         STCM  R1,2,1(R8)
         SRL   R1,2                RESTORE LOCATION
         NI    2(R8),X'3F'
         TR    1(2,R8),IMGADTBL
IMGRAOK2 MVI   3(R8),C' '          BLANKS
         LA    R8,4(,R8)           ADJUST BUFFER POINTER
         B     IMGNXLIN            JUMP OVER NON-FILE LOGIC
IMGNXTLN LR    R8,R1               FIRST SYMBOL ADDRESS OF NEXT LINE
IMGNXLIN L     R0,X_PELS           GET LENGTH OF SCANLINE
         SLL   R0,4                GET PIXELS PROCESSED IN SCREEN LINE
         A     R0,IMGEOLIN         UPDATE END OF SCANLINE POINTER
         ST    R0,IMGEOLIN
         BCT   R5,IMGLINLP         PROCESS NEXT SCREEN LINE
         SPACE
IMGLDSYM CLI   IMGPELBT,X'04'      LAST COLOUR PLANE?
         BE    IMGDOWSF            YES, READY TO ISSUE WSF
         CLI   IMGPELBT,X'02'      NON-FIRST COLOUR PLANE?
         BE    IMGNXPLN            YES, READY TO PROCESS NEXT PLANE
         SPACE
         LA    R0,LPSLEN           POINT TO START OF STRUCTURED FIELD
         LR    R1,R6               GET CURRENT LPS BUFFER POINTER
         SR    R1,R0               GET LENGTH
         STH   R1,LPSLEN           SAVE IT
         CH    R1,=H'18'           AT LEAST ONE SYMBOL GENERATED?
         BNH   IMGPICOK            NO, SKIP LPS TPUT
         TM    PICFLAGS,PICNBW     BLACK-AND-WHITE PICTURE?
         BZ    IMGDOWSF            YES, READY TO ISSUE WSF
         SPACE
IMGNXPLN IC    R0,IMGPELBT         GET PLANE BIT TEST FLAG
         SLL   R0,1                PROMOTE IT FOR THE NEXT PLANE
         STC   R0,IMGPELBT         SAVE IT FOR USE
         MVC   0(LPSHDRLN,R6),LPSLEN
         STC   R0,LPSHDRLN-1(,R6)  PREPARE HEADER FOR NEXT PLANE
         LA    R6,LPSHDRLN(,R6)
         B     IMGPLNLP            GO SCAN NEXT PLANE'S PIXELS
         SPACE
IMGDOWSF LA    R15,LPSWSF          POINT TO START OF DATA STREAM
         SR    R6,R15              GET LENGTH OF DATA STREAM
         XC    IMGTPUT,IMGTPUT     CLEAR RESIDUAL DATA
         TPUT  (R15),(R6),NOEDIT,MF=(E,IMGTPUT)
*
*   SOME SYMBOLS HAVE NOW BEEN LOADED.  SET THE SYMBOL-PICTURE
*   MANAGEMENT FLAGS ON THE BASIS THE PICTURE WILL BE SHOWN.
*
         OI    PICFLAGS,PICOK+PICSYM  FLAG PICTURE NOW RENDERED
         SPACE
IMGPICOK EQU   *
**GPICOK TM    STATUS11,$11FS2     IS REVIEW2 THE CALLER?
**       BNO   IMAGEXIT            NO, RFE GRAPHIC ALL DONE
         SPACE
         BAS   R14,SYMWRITE        INVOKE WRITE SYMBOL ROUTINE
         SPACE
         LTR   R5,R5               END OF PICTURE?
         BNP   IMGWRITE            YES, WRITE IT TO THE TERMINAL
         TM    PICFLAGS,PICNBW     BLACK-AND-WHITE PICTURE?
         BO    IMGCLRSS            NO, CHECK COLOUR SYMBOL SETS
         IC    R1,LPSRWS           YES, GET READ/WRITE STORAGE ID USED
         MVC   LPSRWS,SYMSTGF      PREPARE FOR REUSING FIRST SYMBOL SET
         CLM   R1,1,SYMSTGL        USING LAST ONE?
         BNL   IMGWRITE            YES, WRITE OUT PICTURE SO FAR
         LA    R1,1(,R1)           NO, INCREMENT STORAGE ID
         STC   R1,LPSRWS           USE NEXT ONE FOR NEXT SYMBOL BATCH
         B     IMGSETLP            LOAD NEXT SYMBOL SET
IMGCLRSS L     R1,IMGCLRPT         POINT TO COLOUR RWS ID
         LA    R1,1(,R1)           POINT TO NEXT ONE
         ST    R1,IMGCLRPT         SAVE UPDATED POINTER
         ICM   R1,1,0(R1)          GET NEW RWS ID
         STC   R1,LPSRWS           SET NEW ONE IN DATA STREAM
         BNZ   IMGSETLP            NON-ZERO RWS ID SO USE IT
         LA    R1,SYMSTG3          POINT TO FIRST COLOUR RWS ID
         ST    R1,IMGCLRPT         SAVE ADDRESS FOR LATER
         MVC   LPSRWS,0(R1)        SET COLOUR SYMBOL SET
         SPACE
IMGWRITE LTR   R5,R5               LAST WRITE FOR PICTURE?
         BP    IMGOVRFL            NO, SYMBOL SET OVERFLOW
         TM    PICFLAGS,PICOVR     HAS SYMBOL SET OVERFLOW OCCURRED?
         BO    IMGPUTIT            YES, WRITE OUT LAST PICTURE PIECE
         TM    PICFLAGS,PICBIG     DOES SCREENBF/SHADOWBF HOLD IT ALL?
         BNO   IMGFINIS            YES, NO MORE TO DO HERE
         L     R1,IMGBFADR         POINT TO TPUT BUFFER
         LA    R0,1(,R1)           POINT PAST WCC
         LR    R1,R8               COPY BUFFER POINTER
         SR    R1,R0               GET DATA STREAM LENGTH
         L     R14,SCREENSZ        GET SCREEN BUFFER SIZE
         AR    R14,R14             DOUBLE IT
         A     R14,SCREENSZ        TRIPLE IT
         A     R14,SCREENWK        POINT TO END OF TPUT BUFFER
         SR    R14,R1              FIND A PLACE TO STASH THIS DATA
         LA    R15,3
         SR    R14,R15             BACK UP 3
         MVI   0(R14),SA           ENSURE HIGHLIGHTING IS RESET
         MVI   1(R14),HILT
         MVI   2(R14),NULL
         AR    R15,R1              GET TOTAL LENGTH
         ST    R14,PICPUTAD        SAVE THE ADDRESS
         STH   R15,PICPUTLN        SAVE THE LENGTH
         LA    R14,3(,R14)         POINT TO TARGET
         LR    R15,R1              COPY LENGTH
         MVCL  R14,R0              STASH THE DATA STREAM FOR REVCOMM
         OI    PICFLAGS,PICPUT     FLAG TPUT TO INCLUDE PICTURE
         B     IMGFINIS            TIDY UP AND TERMINATE
IMGOVRFL OI    PICFLAGS,PICOVR     ALL USABLE SYMBOL SETS FULL
         MVI   0(R8),IC            UPDATE CURRENT LOCATION TO RESUME
         LA    R8,1(,R8)
IMGPUTIT TM    STATUS7,$7RESHO     NEED TO RESTORE SCREEN SIZE?
         BNO   IMGEWAOK            NO
         NI    STATUS7,255-$7RESHO YES, RESET FLAG
         LA    R1,ERASECMD         POINT TO ERASE/WRITE COMMAND
         LA    R0,L'ERASECMD       LOAD DATA STREAM LENGTH
         ICM   R1,8,=X'03'         TPUT FLAGS (FULLSCREEN)
         TPUT  (1),(0),R           RESET CHARACTER ATTRIBUTES
IMGEWAOK LR    R0,R8               COPY BUFFER POINTER
         L     R1,IMGBFADR         POINT TO TPUT BUFFER
         SR    R0,R1               GET DATA STREAM LENGTH
         ICM   R1,8,=X'03'         LOAD FULLSCREEN FLAGS
         TPUT  (1),(0),R           WRITE PICTURE SYMBOL LINES
         SPACE
IMGFINIS BAS   R14,PTSWRITE        INVOKE WRITE CODE-POINT ROUTINE
         SPACE
         LTR   R5,R5               WHOLE PICTURE SCREEN NOW WRITTEN?
         BP    IMGSTGLP            NO, REUSE TERMINAL'S STORAGE
         SPACE
         TM    PICFLAGS,PICSRC     WRITING PICTURE SOURCE?
         BNO   IMGSRCDN            NO
         MVI   CLOSED,X'80'        YES, CLOSE THE OUTPUT DCB
         CLOSE (SYMDCB),MF=(E,CLOSED)
         FREEPOOL SYMDCB           FREE BUFFERS
IMGSRCDN TM    PICFLAGS,PICOK+PICSYM   SYMBOLS LOADED?
         BO    IMAGEXIT            YES
         NI    PICFLAGS,255-PICPUT NO, NO USABLE IMAGE TPUT DATA
         MVI   MSG,199             IMAGE IS BLANK
         L     R15,=A(REVMSGS)
         BASR  R14,R15             FETCH MESSAGE TEXT
         L     R0,X_PELS           GET WIDTH
         CVD   R0,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  MSG+2(5),DOUBLE
         L     R0,Y_PELS           GET HEIGHT
         CVD   R0,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  MSG+10(5),DOUBLE
         LA    R1,4                GET MAXIMUM ZEROS TO SUPPRESS
IMAGEYLP CLI   MSG+10,C'0'         LEADING ZERO?
         BNE   IMAGEYOK            NO
         MVC   MSG+10(MSG199L-11),MSG+11
         BCT   R1,IMAGEYLP
IMAGEYOK LR    R0,R1
         LA    R1,4                GET MAXIMUM ZEROS TO SUPPRESS
IMAGEXLP CLI   MSG+2,C'0'          LEADING ZERO?
         BNE   IMAGEXOK            NO
         MVC   MSG+2(MSG199L-3),MSG+3
         BCT   R1,IMAGEXLP
IMAGEXOK AR    R0,R1               GET REMAINING DIGIT COUNT
         LA    R1,4+4              GET MAXIMUM SUPPRESSION POSSIBLE
         SR    R1,R0               GET COUNT OF SUPPRESSED ZEROS
         LNR   R1,R1               MAKE IT NEGATIVE
         AH    R1,MSG              GET EDITED MESSAGE LENGTH
         STH   R1,MSG              SAVE IT
IMAGEXIT OI    PICCOLOR,X'F0'      ENSURE CORRECT COLOUR CODE ZONE
         L     R0,@IMGWKSZ         GET DYNAMIC STORAGE SIZE
         LR    R1,R13              POINT TO DYNAMIC AREA TO BE FREED
         L     R13,4(,R13)         POINT TO PREVIOUS SAVE AREA
         OI    11(R13),X'01'       INVALIDATE FORWARD POINTER
         FREEMAIN R,LV=(0),A=(1)   FREE @IMGWORK
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER
         SPACE
LDSYMDSN MVC   SYMSTMT+31(0),$DSNAME+2   <<< EXECUTED >>>
PELTEST  TM    0(R1),X'00'         <<< EXECUTED >>>
LDPICSRC MVC   0(0,R1),0(R15)      <<< EXECUTED >>>
         SPACE
IMGEDNUM CVD   R0,DOUBLE
         MVC   0(6,R15),=XL6'402020202120'
         ED    0(6,R15),DOUBLE+5
         BR    R14
         SPACE
**********************************************************************
*                                                          *         *
*         WRITE SOURCE OF PROGRAMMABLE SYMBOLS             *  GP@P6  *
*                                                          *  12/99  *
**********************************************************************
         SPACE
SYMWRITE DS    0H                  DFSMS REQUIRED BECAUSE AMODE=31
         TM    PICFLAGS,PICSRC     WRITING PICTURE SOURCE?
         BNOR  R14                 NO, RETURN WITHOUT ACTION
         STM   R0,R15,IMGSYMSV     SAVE ALL REGISTERS
         L     R2,IMGSYMAD         INITIALIZE SYMBOL POINTER
         SR    R3,R3
         IC    R3,0(,R4)           GET WHAT WOULD HAVE BEEN NEXT SYMBOL
         LA    R5,X'41'            GET FIRST SYMBOL CODE POINT VALUE
         SR    R3,R5               GET NUMBER OF SYMBOLS TO WRITE
         ST    R3,SYMWRTCT         SAVE THE COUNT
         BNP   SYMWRITX            SKIP OUTPUT IF NO SYMBOLS
         MVI   DOUBLE,X'04'        FLAG LAST PLANE
         TM    PICFLAGS,PICNBW     BLACK-AND-WHITE PICTURE?
         BZ    SYMSTART            YES, READY TO WRITE DATA
         MVI   DOUBLE,X'01'        FLAG FIRST PLANE
SYMPLNLP MVI   SYMSTMT,C' '        CLEAR OUTPUT RECORD
         MVC   SYMSTMT+1(79),SYMSTMT
         MVC   SYMSTMT(13),=CL13'*  BLUE PLANE'
         CLI   DOUBLE,X'01'        CORRECT?
         BE    SYMPLNHD            YES
         MVC   SYMSTMT+3(4),=CL4' RED'
         CLI   DOUBLE,X'02'        CORRECT?
         BE    SYMPLNHD            YES
         MVC   SYMSTMT+2(5),=CL5'GREEN'
SYMPLNHD XASAM24
         PUT   SYMDCB,SYMSTMT      PRODUCE SOURCE CARD FOR SYMBOL
         XASAM31
         L     R3,SYMWRTCT         LOAD THE SYMBOL COUNT
SYMSTART LA    R5,CODEPTS          GET FIRST SYMBOL CODE POINT VALUE
SYMLOOP  MVC   SYMSTMT,SYMCARD     LOAD DC STATEMENT TEMPLATE
         LA    R7,SYMSTMT          POINT TO OUTPUT CARD-IMAGE
         UNPK  SYMSTMT+17(13),0(7,R2)
         UNPK  SYMSTMT+29(13),6(7,R2)
         UNPK  SYMSTMT+41(13),12(7,R2)
         TR    SYMSTMT+17(36),IMGHEX-240
         MVI   SYMSTMT+53,QUOTE    CLEAN UP DECLARE CONSTANT STATEMENT
         UNPK  SYMSTMT+59(3),0(2,R5)
         TR    SYMSTMT+59(2),IMGHEX-240
         MVI   SYMSTMT+61,QUOTE    SHOW SYMBOL CODE POINT VALUE
         XASAM24
         PUT   SYMDCB,SYMSTMT      PRODUCE SOURCE CARD FOR SYMBOL
         XASAM31
         LA    R2,18(,R2)          POINT TO NEXT SYMBOL'S DATA
         LA    R5,1(,R5)           INCREMENT CODE POINT VALUE
         BCT   R3,SYMLOOP          PROCESS NEXT SYMBOL
         CLI   DOUBLE,X'02'        LAST PLANE?
         BH    SYMWRITX            YES, RETURN
         MVC   DOUBLE(1),LPSCOLOR-LPSLEN(R2)
         LA    R2,LPSHDRLN(,R2)    POINT TO NEXT PLANE'S SYMBOL DATA
         B     SYMPLNLP            WRITE NEXT PLANE'S SYMBOL DATA
SYMWRITX LM    R0,R15,IMGSYMSV     RESTORE ALL REGISTERS
         BR    R14                 RETURN TO CALLER
         SPACE
**********************************************************************
*                                                          *         *
*         WRITE SOURCE OF PICTURE CODE POINTS              *  GP@P6  *
*                                                          *  12/99  *
**********************************************************************
         SPACE
PTSWRITE DS    0H                  DFSMS REQUIRED BECAUSE AMODE=31
         TM    PICFLAGS,PICSRC     WRITING PICTURE SOURCE?
         BNOR  R14                 NO, RETURN WITHOUT ACTION
         STM   R0,R15,IMGSYMSV     SAVE ALL REGISTERS
         MVI   SYMSTMT,C' '        CLEAR OUTPUT RECORD
         MVC   SYMSTMT+1(79),SYMSTMT
         MVC   SYMSTMT(L'PTSHDG),PTSHDG
         XASAM24
         PUT   SYMDCB,SYMSTMT      WRITE HEADING
         XASAM31
         LA    R5,SYMSTMT+17       POINT TO FIRST UNPACK TARGET
         LA    R4,SYMSTMT+65       POINT TO LAST UNPACK TARGET
         L     R2,IMGBFADR         INITIALIZE BUFFER POINTER
         TM    PICFLAGS,PICBIG+PICOVR  BUILT A DATA STREAM?
         BNZ   PTSBFLP1                YES, GO PARSE IT
         SPACE
         LH    R2,Y_OFFSET         GET PRECEDING LINE COUNT
         MH    R2,SCRNCOLS+2       MULTIPLY BY COLUMN COUNT
         AH    R2,X_OFFSET         GET PICTURE START SCREEN LOCATION
         A     R2,SCREENBF         POINT TO FIRST PICTURE CODE POINT
         LH    R8,X_BYTES          GET PICTURE SCREEN COLUMN COUNT
         AR    R8,R2               POINT PAST FIRST LINE
         LH    R6,Y_BYTES          GET PICTURE SCREEN LINE COUNT
         B     PTSCRDLP            GO WRITE LINE'S CONTENTS
         SPACE
PTSBFLP1 CR    R2,R8               REACHED END OF BUFFER?
         BNL   PTSWRITX            YES
         CLI   0(R2),SA            SEARCH FOR START OF PICTURE DATA
         LA    R2,1(,R2)
         BNE   PTSBFLP1
         CLI   0(R2),SYMS
         BNE   PTSBFLP1
         TM    1(R2),X'F0'         IGNORE DEFAULT AND APL CHARACTERS
         BNM   PTSBFLP1
         LA    R2,2(,R2)           POINT PAST ORDER
PTSCRDLP MVI   SYMSTMT,C' '        CLEAR OUTPUT RECORD
         MVC   SYMSTMT+1(79),SYMSTMT
         MVC   SYMSTMT(17),SYMCARD COPY TEMPLATE
         LR    R3,R5               POINT TO FIRST UNPACK TARGET
PTSBFLP2 CR    R2,R8               REACHED END OF BUFFER?
         BNL   PTSEOBFR            YES
         CLI   0(R2),X'40'         CONTROL CHARACTER?
         BL    PTSCCHAR            YES
         UNPK  0(3,R3),0(2,R2)     NO, UNPACK A CODE POINT
         TR    0(2,R3),IMGHEX-240
         LA    R3,2(,R3)           POINT PAST LATEST HEX
         MVI   0(R3),QUOTE         PREPARE FOR END OF RECORD'S DATA
         LA    R2,1(,R2)           POINT TO NEXT CODE POINT
         CR    R3,R4               FILLED CARD IMAGE?
         BNH   PTSBFLP2            NO, LOOP THROUGH BUFFER
PTSEOLIN XASAM24
         PUT   SYMDCB,SYMSTMT      PRODUCE CODE POINT DATA RECORD
         XASAM31
         B     PTSCRDLP            CONTINUE ON NEW CARD IMAGE
PTSCCHAR CR    R3,R5               ANY DATA IN CARD IMAGE SO FAR?
         BNH   PTSNOCRD            NO, DO NOT WRITE IT
         XASAM24
         PUT   SYMDCB,SYMSTMT      PRODUCE CODE POINT DATA RECORD
         XASAM31
PTSNOCRD CLI   0(R2),SA
         BE    PTSJUMP3
         CLI   0(R2),SBA
         BE    PTSJUMP3
         CLI   0(R2),SF
         BE    PTSJUMP2
         CLI   0(R2),RA
         BNE   PTSJUMP1
         LA    R2,1(,R2)
PTSJUMP3 LA    R2,1(,R2)
PTSJUMP2 LA    R2,1(,R2)
PTSJUMP1 LA    R2,1(,R2)
         B     PTSCRDLP
PTSEOBFR CR    R3,R5               ANY DATA IN CARD IMAGE SO FAR?
         BNH   PTSPUTOK            NO, DO NOT WRITE IT
         XASAM24
         PUT   SYMDCB,SYMSTMT      PRODUCE CODE POINT DATA RECORD
         XASAM31
PTSPUTOK TM    PICFLAGS,PICBIG+PICOVR  BUILT A DATA STREAM?
         BNZ   PTSWRITX                YES, FINISHED PARSING IT
         SPACE
         SH    R2,X_BYTES          POINT BACK TO START OF LINE
         A     R2,SCRNCOLS         POINT TO NEXT LINE
         A     R8,SCRNCOLS         POINT PAST NEXT LINE
         BCT   R6,PTSCRDLP         GO WRITE LINE'S CONTENTS
         SPACE
PTSWRITX LM    R0,R15,IMGSYMSV     RESTORE ALL REGISTERS
         BR    R14                 RETURN TO CALLER
         SPACE
         DROP  R13                 @IMGWORK
         DROP  R11                 REVIMAGE
         TITLE '  R E V I M A G E   -   S T A T I C   A R E A  '
@IMGWKSZ DC    A($IMGWKLN)         LOCAL WORKING STORAGE SIZE
IMGBFOFF DC    A(IMGWRTBF-@IMGWORK)
IMGHEX   DC    C'0123456789ABCDEF' HEXADECIMAL DIGIT TRANSLATE TABLE
IMGADTBL DC    X'40C1C2C3C4C5C6C7C8C94A4B4C4D4E4F'
         DC    X'50D1D2D3D4D5D6D7D8D95A5B5C5D5E5F'
         DC    X'6061E2E3E4E5E6E7E8E96A6B6C6D6E6F'
         DC    X'F0F1F2F3F4F5F6F7F8F97A7B7C7D7E7F'
PTSHDG   DC    CL24'* CODE POINT DISPLAY MAP'
SYMCARD  DC    CL80'         DC    X''000000000000000000000000000000000+
               000''   X''##''                  '
         PRINT NOGEN
SYMDCBS  DCB   DSORG=PS,DDNAME=$,MACRF=PM,RECFM=FB,LRECL=80
         PRINT GEN
SYMDCBL  EQU   *-SYMDCBS
CODEPTS  DC    191AL1(*-CODEPTS+X'41')
         SPACE
         DC    0D'0'
         LTORG
         SPACE
         DC    0D'0'               END OF CSECT
         TITLE '  R E V I M A G E   -   D Y N A M I C   A R E A  '
@IMGWORK DSECT
         DS    18F
IMGSYMSV DS    16F
SYMDCB   DS    XL(SYMDCBL)         SYMBOL SOURCE OUTPUT DCB
SYMSTMT  DS    CL80                SYMBOL SOURCE OUTPUT RECORD
SYMWRTCT DS    F                   COUNT OF SYMBOLS IN SYMBOL SET
IMGTPUT  DS    XL(TPUTNEL)         TPUT PARAMETER LIST
IMGROWS  DS    F                   NUMBER OF PICTURE LINES TO LOAD
IMGCOLS  DS    F                   NUMBER OF PICTURE COLUMNS TO LOAD
IMGLFTPD DS    F                   NUMBER OF PADDING BLANKS ON LEFT
IMGBFADR DS    F                   ADDRESS OF FULLSCREEN TPUT BUFFER
IMGSYMAD DS    F                   ADDRESS OF LPS PEL BITS
IMGHOME  DS    F                   ADDRESS OF FIRST PIXEL TO LOAD
IMGCLRPT DS    F                   ADDRESS OF COLOUR RWS ID
IMGLNORG DS    F                   PICTURE SCREEN LINE ORIGIN
IMGEOLIN DS    F                   POINT PAST END OF CURRENT SCANLINE
IMGLNLOC DS    F                   PICTURE LINE START SCREEN LOCATION
IMGSSSSV DS    6F                  SYMBOL SET START STATUS SAVE AREA
IMGBLOKS DS    XL8                 SOLID COLOUR BLOCK CODE POINTS
IMGPELBT DS    X                   BIT TO TEST IN ARRAY ELEMENTS
LPSWSF   DS    X                   WRITE STRUCTURED FIELD COMMAND
LPSLEN   DS    H                   LENGTH OF THIS STRUCTURED FIELD
LPSID    DS    X                   LOAD PROGRAMMED SYMBOLS ID
LPSFLAGS DS    X                   BASIC/EXT, CLEAR, SKIP, TYPE:5-BITS
LPSLCID  DS    X                   LOCAL CHARACTER SET ID
LPSCHAR  DS    X                   FIRST CODE POINT TO BE LOADED
LPSRWS   DS    X                   READ/WRITE STORAGE NUMBER
LPSBASIC EQU   *                   SYMBOL DATA START FOR BASIC FORM
LPSLENE  DS    X                   LENGTH OF EXTENDED DATA
LPSFLAGE DS    X                   EXTENDED FLAGS
LPSLW    DS    X                   CHARACTER CELL MATRIX WIDTH
LPSLH    DS    X                   CHARACTER CELL MATRIX HEIGHT
LPSSUBSN DS    X                   SUBSECTION ID
LPSCOLOR DS    X                   COLOR PLANE TO LOAD
LPSHDRLN EQU   *-LPSLEN            COLOR PLANE FIELD HEADER LENGTH
LPSDATAE DS    190XL18             ROOM FOR WHOLE SYMBOL SET
LPSPLNLN EQU   *-LPSLEN            MAXIMUM LENGTH FOR ONE PLANE
         DS    2XL(LPSPLNLN)       ROOM FOR TWO MORE PLANES
IMGWRTBF DS    43XL132             FULLSCREEN GRAPHICS TPUT BUFFER
         DS    0D                  END OF DSECT
$IMGWKLN EQU   *-@IMGWORK
         TITLE '  R E V N A T V  '
**********************************************************************
*                                                          *         *
*         DISPLAY PICTURE IMAGE WITH VECTOR GRAPHICS       *  GP@P6  *
*                                                          * 07/2007 *
**********************************************************************
         SPACE
**********************************************************************
*                                                                    *
*        THIS ROUTINE RECEIVES CONTROL FROM REVIMAGE WHEN A          *
*        PICTURE IS TO BE RENDERED ON THE TERMINAL USING THE         *
*        BITMAP DISPLAY FACILITY OF NATIVE 3270 VECTOR GRAPHICS.     *
*                                                                    *
**********************************************************************
         SPACE
**********************************************************************
*                                                                    *
* ON ENTRY:     HSEACTIV -> PICTURE PIXEL BYTE ARRAY                 *
*                     R1 -> SYMDCBS (DCB FOR WRITING PICTURE SOURCE) *
*                     R9 -> @DATA                                    *
*                     R13-> REGISTER SAVE AREA                       *
*                     R14-> RETURN ADDRESS                           *
*                     R15-> REVNATV                                  *
*                                                                    *
* DURING PROCESSING:  R11-> REVNATV                                  *
*                     R13-> @NATWORK (LOCAL GETMAINED AREA)          *
*                                                                    *
**********************************************************************
         SPACE
REVNATV  RSECT
REVNATV  AMODE 31
         USING REVNATV,R15
         B     @NATV
         DC    AL1(7),CL7'REVNATV'
         DROP  R15                 REVNATV
@NATV    STM   R14,R12,12(R13)     SAVE REGISTERS
         LR    R11,R15             SET BASE
         USING REVNATV,R11
         LR    R2,R1               SAVE DCB TEMPLATE ADDRESS
         L     R0,@NATWKSZ
         MVI   GETMNTRC,67         TRACK GETMAIN IN CASE OF FAILURE
         GETMAIN RC,LV=(0),LOC=(24,64)
         LTR   R15,R15             GOT MAIN STORAGE?
         BZ    NATSTGOK            YES
         MVI   MSG,123             REQUEST ABORTED - STORAGE FULL
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER
         SPACE
NATSTGOK ST    R1,8(,R13)          CHAIN SAVE AREAS
         ST    R13,4(,R1)
         LR    R13,R1              POINT TO GETMAINED AREA
         USING @NATWORK,R13
         MVC   NATDCB,0(R2)        LOAD DCB TEMPLATE
         USING IHADCB,NATDCB
         MVC   DCBDDNAM,MSG+64     LOAD DCB DDNAME
         NI    PICFLAGS,255-PICOVR-PICPUT-PICSYM  RESET FLAGS
         SPACE
         L     R14,SCRNCOLS        GET SCREEN WIDTH
         AR    R14,R14             DOUBLE IT
         L     R6,SCREENBF         POINT TO THE PRIMARY BUFFER
         L     R7,SCREENSZ         GET THE BUFFER SIZE
         AR    R6,R14              POINT TO THE THIRD LINE
         SR    R7,R14              ADJUST LENGTH
         LA    R5,C' '
         SLL   R5,24               SET PAD AND ZERO LENGTH
         MVCL  R6,R4               BLANK OUT DATA PART OF SCREEN
         L     R6,SHADOWBF         POINT TO THE SHADOW BUFFER
         L     R7,SCREENSZ         GET THE BUFFER SIZE
         AR    R6,R14              POINT TO THE THIRD LINE SHADOW
         SR    R7,R14              ADJUST LENGTH
         LA    R5,X'05'            TURQUOISE FOR STATUS INFORMATION
         SLL   R5,24               SET PAD AND ZERO LENGTH
         MVCL  R6,R4               SET ATTRIBUTES FOR SCREEN BODY
         L     R0,PICOLRES
         L     R6,SCREENBF         POINT TO THE PRIMARY BUFFER
         AR    R6,R14              POINT TO THE THIRD LINE
         LR    R15,R6              POINT TO DISPLAY AREA
         BAS   R14,NATEDNUM        FORMAT NUMBER
         MVC   6(10,R6),=CL10'-BIT COLOR'
         L     R0,X_PELS
         LA    R15,20(,R15)        POINT TO DISPLAY AREA
         BAS   R14,NATEDNUM        FORMAT NUMBER
         MVC   7(9,R15),=CL9'PELS WIDE'
         L     R0,Y_PELS
         LA    R15,18(,R15)        POINT TO DISPLAY AREA
         BAS   R14,NATEDNUM        FORMAT NUMBER
         MVC   7(9,R15),=CL9'PELS HIGH'
         ICM   R0,15,PICOLORS      SHOW NUMBER OF DIFFERENT COLOURS
         BZ    NATNUMOK
         LA    R15,18(,R15)        POINT TO DISPLAY AREA
         BAS   R14,NATEDNUM        FORMAT NUMBER
         MVC   7(6,R15),=CL6'COLORS'
         SPACE
NATNUMOK LH    R1,X_OFFSET
         S     R1,OFFSET           GET STARTING COLUMN OFFSET
         LR    R0,R1               COPY VIRTUAL X COLUMN ORIGIN
         A     R1,X_BYTES          WILL ANY PICTURE BE VISIBLE?
         BNP   NATVEXIT            NO, NOTHING TO SHOW THIS TIME
         SR    R15,R15
         IC    R15,MATRIXSZ        GET X-PELS PER COLUMN
         SR    R1,R1
         LTR   R0,R0               SHOWING LEFT EDGE OF PICTURE?
         BNM   NATLFTOK            YES
         SR    R1,R0               NO, GET LEFT PICTURE COLUMN
         MR    R0,R15              GET LEFT EDGE PEL OFFSET, ZERO R0
NATLFTOK ST    R0,NATOFF_X         SAVE LEFT EDGE OFFSET
         ST    R1,NAT1ST_X         SET LEFT-MOST VISIBLE PEL OFFSET
         SPACE
         L     R3,SCRNCOLS
         MR    R2,R15              GET SCREEN PEL WIDTH
         AR    R3,R1               GET FIRST PEL PAST RIGHT EDGE
         C     R3,X_PELS           PAST RIGHT OF PICTURE?
         BNH   *+8                 NO
         L     R3,X_PELS           YES, JUST SHOW TO END OF PICTURE
         ST    R3,NATLST_X         SET PEL OFFSET PAST RIGHT EDGE
         LA    R1,1
         AH    R1,PAGESIZE         GET SCREEN LINES MINUS THREE
         IC    R15,MATRIXSZ+1      GET Y-PELS PER LINE
         MR    R0,R15              GET MAXIMUM SCANLINES TO SHOW
         C     R1,Y_PELS           IS PICTURE SHORTER?
         BNH   *+8                 NO
         L     R1,Y_PELS           YES, GET PICTURE HEIGHT
         ST    R1,NATLINES         SAVE TOTAL SCANLINES TO SHOW
         ST    R1,NATRMLNS         SAVE REMAINING SCANLINES TO SHOW
         ST    R1,NATRNLNS         SAVE SCANLINES TO SHOW THIS "RUN"
         S     R3,NAT1ST_X         GET HORIZONTAL PELS TO SHOW
         ST    R3,NATWIDTH         SAVE SCAN COLUMNS TO SHOW
         LA    R3,7(,R3)
         SRA   R3,3                GET DATA BYTES PER LINE
         ST    R3,NATLNLEN         SAVE IT
         LA    R3,2(,R3)           ADD PROTOCOL OVERHEAD
         MR    R2,R1               GET TOTAL SCANLINE DATA SIZE
         LA    R3,NATPLNHL+NATPLNTL(,R3)
         TM    PICFLAGS,PICNBW     BLACK-AND-WHITE PICTURE?
         BZ    NATPLNSZ            YES
         LR    R0,R3               NO, COLOUR
         AR    R0,R3
         AR    R3,R0               COUNT STORAGE FOR EACH PLANE
NATPLNSZ LA    R3,NATHDRLN(,R3)    GET TOTAL TPUT DATA STREAM LENGTH
         LA    R0,4095(,R3)
         SRL   R0,12
         SLL   R0,12               ROUND UP TO PAGE BOUNDARY
         ST    R0,NATBMPLN         SAVE TPUT BUFFER SIZE
         MVI   GETMNTRC,68         TRACK GETMAIN IN CASE OF FAILURE
         GETMAIN RC,LV=(0),LOC=(24,64)
         LTR   R15,R15             GOT MAIN STORAGE?
         BNZ   NATSTGER            NO, STORAGE NOT AVAILABLE
         ST    R1,NATBMPAD         YES, SAVE TPUT BUFFER ADDRESS
         SPACE
         TM    PICFLAGS,PICSRC     WRITING PICTURE SOURCE?
         BNO   NATLDHDR            NO
         MVI   OPEND,X'80'         YES, OPEN OUTFILE FILE
         OPEN  (NATDCB,(OUTPUT)),MF=(E,OPEND)
         MVI   NATSTMT,C' '        CLEAR OUTPUT RECORD
         MVC   NATSTMT+1(79),NATSTMT
         MVC   NATSTMT(14),=CL14'* REVIEW &REL '
         MVC   NATSTMT+14(16),=CL16' BITMAP DATA FOR'
         LH    R1,$DSNAME
         BCTR  R1,0
         EX    R1,LDNATDSN
         CLI   $MEMBER,C' '        MEMBER NAME TO BE DISPLAYED?
         BE    NATDSNOK            NO
         LA    R1,NATSTMT+32(R1)
         MVI   0(R1),C'('
         MVC   1(8,R1),$MEMBER
NATMEMLP CLI   8(R1),C' '          TRAILING BLANK?
         BNE   NATMEMOK            NO
         BCT   R1,NATMEMLP
NATMEMOK MVI   9(R1),C')'
NATDSNOK XASAM24
         PUT   NATDCB,NATSTMT      WRITE HEADING
         XASAM31
         MVI   NATSTMT,C' '        CLEAR OUTPUT RECORD
         MVC   NATSTMT+1(79),NATSTMT
         MVI   NATSTMT,C'*'        FLAG COMMENT
         MVC   NATSTMT+5(60),0(R6) LOAD STATISTICS TEXT
         XASAM24
         PUT   NATDCB,NATSTMT      WRITE STATISTICS
         XASAM31
         SPACE
NATLDHDR L     R2,NATBMPAD         LOAD WSF HEADER INTO TPUT BUFFER
         MVC   0(NATHDRLN,R2),NATHDR
         CLI   ERASECMD+1,EW       USING PRIMARY SCREEN SIZE?
         BE    *+8                 YES
         MVI   NATSCRSZ(R2),X'80'  NO, USE ALTERNATE SIZE
         OI    STATUS7,$7RESHO     SET FLAG FOR FIRST RUN
         L     R15,NATWIDTH        GET X-PELS TO SHOW
         SRA   R15,1               GET MAXIMUM X CO-ORD TO SHOW
         LNR   R15,R15             LEFT OF CENTRE IS NEGATIVE
         STH   R15,NATSEG_X(,R2)   SET INTO CURRENT POSITION
         SR    R15,R15
         IC    R15,MATRIXSZ+1      GET Y-PELS PER LINE
         LA    R1,3                COUNT HEADING, INPUT, STATS LINES
         AH    R1,Y_OFFSET         ADD PADDING LINE COUNT
         MR    R0,R15              GET PEL LINES ABOVE PICTURE
         MH    R15,SCRNLNES+2      GET PEL LINES ON SCREEN
         SRA   R15,1               GET MAXIMUM Y CO-ORD ON SCREEN
         SR    R15,R1              GET Y CO-ORD OF TOP EDGE
         STH   R15,NATSEG_Y(,R2)   SET INTO CURRENT POSITION
         TM    PICFLAGS,PICNBW     BLACK-AND-WHITE PICTURE?
         BZ    NATGTRUN            YES
         TM    PICFLAGS,PICSRC     WRITING PICTURE SOURCE?
         BO    NATRUN#1            YES, CAN'T DO "RUNS"
         SPACE
NATGTRUN L     R1,=A(16*1024)      ARBITRARY SIZE LIMIT
         SR    R0,R0               CLEAR FOR DIVIDE
         D     R0,NATWIDTH         GET LINES PER RUN
         LTR   R1,R1               GET ANY?
         BP    *+8                 YES
         LA    R1,1                NO, BUT NEED AT LEAST ONE
         ST    R1,NATRNLNS         SAVE SCANLINES PER "RUN"
         B     NATRUN#1            PERFORM FIRST RUN
         SPACE
NATRUNLP L     R2,NATBMPAD         POINT TO TPUT BUFFER
         LH    R15,NATSEG_Y(,R2)   GET CURRENT TOP OF PICTURE
         S     R15,NATRNLNS        GET ADDRESS FOR RUN START
         STH   R15,NATSEG_Y(,R2)   SET NEW TOP OF PICTURE
NATRUN#1 XC    DOUBLE,DOUBLE       SET UP FOR FIRST OR ONLY PLANE
         MVI   DOUBLE+3,X'01'      SET BIT TO TEST IN ARRAY BYTES
         LA    R2,NATHDRLN(,R2)    SET UP TPUT BUFFER CURSOR
         CLC   NATRNLNS,NATRMLNS   LESS THAN A FULL RUN LEFT?
         BNH   NATPLNLP            NO
         MVC   NATRNLNS,NATRMLNS   YES, REDUCE RUN SIZE ACCORDINGLY
         SPACE
NATPLNLP MVC   0(NATPLNHL,R2),NATPLNHD
         MVC   1(1,R2),DOUBLE+3    SET PLANE COLOUR
         TM    PICFLAGS,PICNBW     BLACK-AND-WHITE PICTURE?
         BO    NATPLNXY            NO
         MVC   1(1,R2),PICCOLOR    YES, SET COLOUR TO SETTING VALUE
         NI    1(R2),X'07'         FOLD INTO VALID RANGE
NATPLNXY L     R4,NATWIDTH         GET HORIZONTAL PEL COUNT TO SHOW
         STCM  R4,3,NATPLN_X(R2)   SET INTO PLANE HEADER
         L     R3,NATRNLNS         GET VERTICAL PEL COUNT TO SHOW
         STCM  R3,3,NATPLN_Y(R2)   SET INTO PLANE HEADER
         LA    R2,NATPLNHL(,R2)    UPDATE TPUT BUFFER CURSOR
         SPACE
         LR    R8,R2               SAVE FIRST DATA LINE ADDRESS
         L     R15,DOUBLE          GET PIXEL BYTE MASK
         L     R1,NATLINES         GET TOTAL SCANLINE COUNT
         S     R1,NATRMLNS         GET SCANLINES ALREADY SHOWN
         M     R0,NATWIDTH         GET SIZE OF AARAY ALREADY PROCESSED
         A     R1,HSEACTIV         POINT TO PIXEL/BYTE ARRAY TO SHOW
NATLOOP1 MVI   0(R2),X'92'         INSERT IMAGE LINE ORDER
         MVC   1(1,R2),NATLNLEN+3  INSERT LINE DATA BYTE COUNT
         LA    R2,2(,R2)           ADJUST BUFFER CURSOR
         L     R4,X_PELS           GET PIXEL WIDTH OF PICTURE
NATLOOP2 LA    R0,8                GET BITS PER BYTE
         SR    R14,R14             CLEAR ACCUMULATOR
NATLOOP3 SLL   R14,1               PROMOTE ACCUMULATED BITS
         LTR   R4,R4               FINISHED LINE'S PIXELS?
         BNP   NATBITOK            YES, DO NOT TEST BYTE
         EX    R15,NTESTPEL        TEST IF PIXEL BIT IS ON
         LA    R1,1(,R1)           POINT TO NEXT ARRAY BYTE
         BCTR  R4,0                DECREMENT PIXELS IN LINE TO GO
         BZ    NATBITOK            PIXEL BIT IS OFF
         LA    R14,1(,R14)         PIXEL BIT IS ON
NATBITOK BCT   R0,NATLOOP3         PROCESS NEXT BIT OF BYTE
         STC   R14,0(,R2)          STORE EIGHT BITMAP PIXELS
         LA    R2,1(,R2)           POINT TO NEXT BITMAP BYTE
         LTR   R4,R4               FINISHED THIS LINE'S PIXELS?
         BP    NATLOOP2            NO, CONTINUE PACKING THIS SCANLINE
         BCT   R3,NATLOOP1         YES, COMMENCE PACKING NEXT SCANLINE
         SPACE
         TM    PICFLAGS,PICSRC     WRITING PICTURE SOURCE?
         BNO   NATPLNOK            NO
         TM    PICFLAGS,PICNBW     BLACK-AND-WHITE PICTURE?
         BZ    NATUNPAK            YES, GET ON WITH IT
         MVI   NATSTMT,C' '        CLEAR OUTPUT RECORD
         MVC   NATSTMT+1(79),NATSTMT
         MVC   NATSTMT(13),=CL13'*  BLUE PLANE'
         CLI   DOUBLE+3,X'01'      CORRECT?
         BE    NATPLANE            YES
         MVC   NATSTMT+3(4),=CL4' RED'
         CLI   DOUBLE+3,X'02'      CORRECT?
         BE    NATPLANE            YES
         MVC   NATSTMT+2(5),=CL5'GREEN'
NATPLANE XASAM24
         PUT   NATDCB,NATSTMT
         XASAM31
NATUNPAK LR    R2,R8               POINT TO FIRST ENCODED SCANLINE
         LA    R3,NATSTMT+17       POINT TO FIRST UNPACK TARGET
         LA    R4,NATSTMT+65       POINT TO LAST UNPACK TARGET
         L     R5,NATRNLNS         GET NUMBER OF SCANLINES
NATLINLP L     R6,NATLNLEN         GET PICTURE LINE DATA BYTE COUNT
         LA    R2,2(,R2)           POINT PAST IMAGE DATA ORDER
NATCRDLP MVI   NATSTMT,C' '        CLEAR OUTPUT RECORD
         MVC   NATSTMT+1(79),NATSTMT
         MVC   NATSTMT(17),NATCARD COPY TEMPLATE
         LR    R7,R3               POINT TO FIRST UNPACK TARGET
NATBYTLP UNPK  0(3,R7),0(2,R2)     UNPACK A BITMAP BYTE
         TR    0(2,R7),NATHEX-240
         LA    R7,2(,R7)           POINT PAST LATEST HEX
         MVI   0(R7),QUOTE         PREPARE FOR END OF RECORD'S DATA
         LA    R2,1(,R2)           POINT TO ENCODED SCANLINE BYTE
         CR    R7,R4               FILLED CARD IMAGE?
         BH    NATPUTIT            YES, WRITE OUTPUT RECORD
         BCT   R6,NATBYTLP         NO, GO UNPACK ANOTHER BYTE
         LA    R6,1                END OF LINE SO WRITE RECORD
NATPUTIT XASAM24
         PUT   NATDCB,NATSTMT      PRODUCE BITMAP DATA RECORD
         XASAM31
         BCT   R6,NATCRDLP         GO WRITE ANOTHER CARD IMAGE
         BCT   R5,NATLINLP         GO PROCESS NEXT SCANLINE
         CLC   NATRNLNS,NATRMLNS   ON LAST RUN?
         BL    NATPLNOK            NO
         MVI   NATSTMT,C' '        CLEAR OUTPUT RECORD
         MVC   NATSTMT+1(79),NATSTMT
         L     R1,NATLNLEN         GET IMAGE DATA BYTES PER LINE
         M     R0,NATLINES         GET IMAGE DATA BYTES PER PLANE
         CVD   R1,24(,R13)
         MVI   NATSTMT,C'*'        FLAG COMMENT
         MVC   NATSTMT+10(8),=X'4020202020202120'
         ED    NATSTMT+10(8),28(R13)
         MVC   NATSTMT+19(21),=C'BYTES IN IMAGE BITMAP'
         TM    PICFLAGS,PICNBW     BLACK-AND-WHITE PICTURE?
         BZ    NATPUTSZ            YES
         MVC   NATSTMT+28(5),=C'PLANE'
NATPUTSZ XASAM24
         PUT   NATDCB,NATSTMT
         XASAM31
         SPACE
NATPLNOK MVC   0(NATPLNTL,R2),NATPLNTR
         LA    R2,NATPLNTL(,R2)    POINT PAST IMAGE END ORDER
         TM    PICFLAGS,PICNBW     BLACK-AND-WHITE PICTURE?
         BZ    NATIMGDN            YES, PICTURE NOW RENDERED
         CLI   DOUBLE+3,X'02'      LAST PLANE PROCESSED?
         BH    NATIMGDN            YES, PICTURE NOW RENDERED
         L     R0,DOUBLE           NO, GET COLOUR PLANE NUMBER
         SLL   R0,1                PROMOTE BIT TO NEXT PLANE
         ST    R0,DOUBLE           SAVE NEXT COLOUR PLANE NUMBER
         B     NATPLNLP            PROCESS NEXT COLOUR PLANE
         SPACE
LDNATDSN MVC   NATSTMT+31(0),$DSNAME+2   <<< EXECUTED >>>
         SPACE
NATIMGDN L     R6,NATBMPAD         POINT TO TPUT DATA
         LR    R0,R2               POINT PAST TPUT DATA
         LA    R15,NATSFLEN(,R6)   POINT TO START OF SF
         LR    R14,R15             POINT TO SF LENGTH FIELD
         SR    R0,R15              GET LENGTH OF STRUCTURED FIELD
         STCM  R0,3,0(R14)         SET SF LENGTH INTO DATA STREAM
         LR    R0,R2               POINT PAST TPUT DATA
         LA    R15,NATSEG(,R6)     POINT TO START OF SEGMENT
         LA    R14,NATSGLEN(,R6)   POINT TO SEGMENT LENGTH FIELD
         SR    R0,R15              GET LENGTH OF SEGMENT DATA
         STCM  R0,3,0(R14)         SET LENGTH INTO DATA STREAM
         SPACE
         TM    STATUS7,$7RESHO     FIRST PICTURE TPUT?
         BO    NATRESET            YES, CLEAR AND SET SCREEN SIZE
         LA    R6,4(,R6)           NO, DO NOT SEND ERASE/RESET
         MVI   0(R6),WSF           SET WRITE COMMAND
NATRESET NI    STATUS7,255-$7RESHO
         SR    R2,R6               GET TPUT DATA STREAM LENGTH
         XC    NATTPUT,NATTPUT     CLEAR RESIDUAL DATA
         TPUT  (R6),(R2),NOEDIT,MF=(E,NATTPUT)
         L     R1,NATRMLNS         GET PREVIOUS REMAINING LINE COUNT
         S     R1,NATRNLNS         GET NEW REMAINING LINE COUNT
         ST    R1,NATRMLNS         UPDATE COUNTER
         BP    NATRUNLP            GO DO ANOTHER RUN
         OI    PICFLAGS,PICOK+PICNAT  FLAG PICTURE NOW RENDERED
         SPACE
         TM    PICFLAGS,PICSRC     WRITING PICTURE SOURCE?
         BNO   NATCLSOK            NO
         MVI   CLOSED,X'80'        YES, CLOSE THE OUTPUT DCB
         CLOSE (NATDCB),MF=(E,CLOSED)
         FREEPOOL NATDCB           FREE BUFFERS
         SPACE
NATCLSOK LM    R0,R1,NATBMPLN      FREE BITMAP STORAGE
         FREEMAIN R,LV=(0),A=(1)   FREE TPUT BUFFER
         SPACE
NATVEXIT L     R0,@NATWKSZ         GET DYNAMIC STORAGE SIZE
         LR    R1,R13              POINT TO DYNAMIC AREA TO BE FREED
         DROP  R13                 @NATWORK
         L     R13,4(,R13)         POINT TO PREVIOUS SAVE AREA
         OI    11(R13),X'01'       INVALIDATE FORWARD POINTER
         FREEMAIN R,LV=(0),A=(1)   FREE @NATWORK
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER
         SPACE
NATSTGER MVI   MSG,123             REQUEST ABORTED - STORAGE FULL
         B     NATVEXIT
         SPACE
NTESTPEL TM    0(R1),X'00'         <<< EXECUTED >>>
         SPACE
NATEDNUM CVD   R0,DOUBLE
         MVC   0(6,R15),=XL6'402020202120'
         ED    0(6,R15),DOUBLE+5
         BR    R14
         SPACE
         DROP  R11                 REVNATV
         TITLE '  R E V N A T V   -   S T A T I C   A R E A  '
@NATWKSZ DC    A($NATWKLN)         LOCAL WORKING STORAGE SIZE
NATHEX   DC    C'0123456789ABCDEF' HEXADECIMAL DIGIT TRANSLATE TABLE
NATCARD  DC    CL17'         DC    X'''
*                                  TPUT DATA STREAM HEADER
NATHDR   DC    AL1(WSF)            WRITE STRUCTURED FIELD
         DC    AL2(4)              LENGTH OF FIRST STRUCTURED FIELD
         DC    X'03'               ERASE/RESET
NATSCRSZ EQU   *-NATHDR
         DC    X'00'               IMPLICIT PARTITION SIZE - DEFAULT
*        EQU   X'80'               ALTERNATE PARTITION SIZE
NATSFLEN EQU   *-NATHDR
         DC    AL2(*-*)            LENGTH OF STRUCTURED FIELD
         DC    X'0F10'             GRAPHIC PICTURE
         DC    X'00'               PARTITION IDENTIFIER (PID)
         DC    B'11000000'         FLAGS - SPAN : FIRST AND LAST
*                                        - MODE : INTERMEDIATE MODE
         DC    X'00'               RESERVED
*
         DC    X'70'               BEGIN SEGMENT
         DC    AL1(12)             LENGTH OF FOLLOWING PARAMETERS
         DC    CL4'BTMP'           NAME OF PROCEDURE TO BE CREATED
         DC    B'01110100'         VISIBLE   NOHILITE
         DC    B'01101000'         NOPROL NEW SEG DATA
NATSGLEN EQU   *-NATHDR
         DC    AL2(*-*)            LENGTH OF PROCEDURE TO BE CREATED
         DC    X'00000000'         P/S NAME
NATSEG   EQU   *-NATHDR
         DC    X'0C',AL1(4)        SET MIX (XOR)
         DC    X'21',AL1(4)        SET CURRENT POSITION
NATSEG_X EQU   *-NATHDR
         DC    AL2(*-*)            X CO-ORDINATE RELATIVE TO CENTRE
NATSEG_Y EQU   *-NATHDR
         DC    AL2(*-*)            Y CO-ORDINATE RELATIVE TO CENTRE
NATHDRLN EQU   *-NATHDR
*                                  COLOUR PLANE HEADER
NATPLNHD DC    X'0A',AL1(7)        SET COLOR
*                                  IMAGE BEGIN
         DC    X'91',AL1(6),AL2(0)
NATPLN_X EQU   *-NATPLNHD
         DC    AL2(*-*)            IMAGE X DIMENSION PIXEL SIZE
NATPLN_Y EQU   *-NATPLNHD
         DC    AL2(*-*)            IMAGE Y DIMENSION PIXEL SIZE
NATPLNHL EQU   *-NATPLNHD
*                                  IMAGE LINES HAVE THE FORMAT:
*        DC    X'92',AL1(##),XL##'....'
*                                  COLOUR PLANE TRAILER
NATPLNTR DC    X'93',AL1(2),AL2(0) IMAGE END
NATPLNTL EQU   *-NATPLNTR
         SPACE
         DC    0D'0'
         LTORG
         SPACE
         DC    0D'0'               END OF CSECT
         TITLE '  R E V N A T V   -   D Y N A M I C   A R E A  '
@NATWORK DSECT
         DS    18F
NATTPUT  DS    XL(TPUTNEL)         TPUT PARAMETER LIST
NATBMPLN DS    F            _____/ BITMAP STORAGE LENGTH
NATBMPAD DS    F                 \ BITMAP STORAGE ADDRESS
NATLNLEN DS    F                   BYTE COUNT TO HOLD LINE'S DATA
NATWIDTH DS    F                   WIDTH IN PIXELS TO DISPLAY
NATLINES DS    F                   HEIGHT IN PIXELS TO DISPLAY
NATRNLNS DS    F                   HEIGHT TO DISPLAY THIS "RUN"
NATRMLNS DS    F                   HEIGHT REMAINING TO DISPLAY
NAT1ST_X DS    F                   LEFT-MOST VISIBLE PEL OFFSET
NATLST_X DS    F                   PEL OFFSET PAST RIGHT EDGE
NATOFF_X DS    F                   PEL OFFSET OF LEFT EDGE
NATDCB   DS    XL(SYMDCBL)         BITMAP SOURCE OUTPUT DCB
NATSTMT  DS    CL80                BITMAP SOURCE OUTPUT RECORD
         DS    0D                  END OF DSECT
$NATWKLN EQU   *-@NATWORK
         TITLE '  R E V G D D M  '
**********************************************************************
*                                                          *         *
*         DISPLAY PICTURE IMAGE WITH VECTOR GRAPHICS       *  GP@P6  *
*                                                          * 01/2000 *
**********************************************************************
         SPACE
**********************************************************************
*                                                                    *
*        THIS ROUTINE WILL PROCESS PREVIOUSLY STORED PICTURE         *
*        DATA AND ISSUE GDDM CALLS TO CAUSE THE PICTURE IMAGE        *
*        TO BE DISPLAYED.  REVGDDM WILL RETURN WITHOUT ACTION        *
*        IF GDDM IS UNAVAILABLE.                                     *
*                                                                    *
*        GDDM WILL USE THE WHOLE SCREEN, AND "NORMAL" INTERACTION    *
*        WITH REVIEW WILL RESUME AFTER THE GDDM SESSION (AND THIS    *
*        ROUTINE) TERMINATES.                                        *
*                                                                    *
*        THIS ROUTINE IS GIVEN CONTROL BY REVIMAGE AFTER IT HAS      *
*        BEEN DECIDED THAT NEITHER FORMAT-1 PROGRAMMED SYMBOLS       *
*        NOR NATIVE 3270 VECTOR GRAPHICS COULD/SHOULD BE USED.       *
*                                                                    *
**********************************************************************
         SPACE
**********************************************************************
*                                                                    *
* ON ENTRY:     HSEACTIV -> PICTURE PIXEL BYTE ARRAY                 *
*                     R1 -> SYMDCBS (DCB FOR WRITING PICTURE SOURCE) *
*                     R9 -> @DATA                                    *
*                     R13-> REGISTER SAVE AREA                       *
*                     R14-> RETURN ADDRESS                           *
*                     R15-> REVGDDM                                  *
*                                                                    *
* DURING PROCESSING:  R11-> REVGDDM                                  *
*                     R13-> @VECWORK (LOCAL GETMAINED AREA)          *
*                                                                    *
**********************************************************************
         SPACE
REVGDDM  RSECT
REVGDDM  AMODE 31
         USING REVGDDM,R15
         B     @GDDM
         DC    AL1(7),CL7'REVGDDM'
         DROP  R15                 REVGDDM
@GDDM    STM   R14,R12,12(R13)     SAVE REGISTERS
         LR    R11,R15             SET BASE
         USING REVGDDM,R11
         LR    R2,R1               SAVE DCB TEMPLATE ADDRESS
         L     R0,@VECWKSZ
         MVI   GETMNTRC,69         TRACK GETMAIN IN CASE OF FAILURE
         GETMAIN RC,LV=(0),LOC=(24,64)
         LTR   R15,R15             GOT MAIN STORAGE?
         BZ    VECSTGOK            YES
         MVI   MSG,123             REQUEST ABORTED - STORAGE FULL
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER
         SPACE
VECSTGOK ST    R1,8(,R13)          CHAIN SAVE AREAS
         ST    R13,4(,R1)
         LR    R13,R1              POINT TO GETMAINED AREA
         USING @VECWORK,R13
         MVC   VECDCB,0(R2)        LOAD DCB TEMPLATE
         USING IHADCB,VECDCB
         MVC   DCBDDNAM,MSG+64     LOAD DCB DDNAME
         ICM   R0,15,ASPLTADR      HAS ADMASPLT BEEN LOADED?
         BNZ   VECASPOK            YES
         LOAD  EPLOC=ADMASPLT,ERRET=VECLDERR
         ST    R0,ASPLTADR         SAVE THE LOAD POINT
VECASPOK L     R1,X_PELS           GET PICTURE WIDTH
         LA    R1,7(,R1)
         SRL   R1,3                ROUND UP TO BYTE BOUNDARY
         M     R0,Y_PELS           GET GDDM BITMAP SIZE
         ST    R1,V_LENGTH         SAVE IT
         LA    R0,7(,R1)
         SRL   R0,3                ROUND UP TO DOUBLEWORD BOUNDARY
         SLL   R0,3
         ST    R0,VECBMPLN         SAVE BITMAP STORAGE SIZE
         MVI   GETMNTRC,70         TRACK GETMAIN IN CASE OF FAILURE
         GETMAIN RC,LV=(0),LOC=(31,64),SP=63
         LTR   R15,R15             SUCCESS?
         BNZ   VECSTGER            NO, STORAGE NOT AVAILABLE
         ST    R1,VECBMPAD         YES, SAVE BITMAP STORAGE ADDRESS
         TM    PICFLAGS,PICSRC     WRITING PICTURE SOURCE?
         BNO   VECOPNOK            NO
         SPACE
         MVI   OPEND,X'80'         YES, OPEN OUTFILE FILE
         OPEN  (VECDCB,(OUTPUT)),MF=(E,OPEND)
         MVI   VECSTMT,C' '        CLEAR OUTPUT RECORD
         MVC   VECSTMT+1(79),VECSTMT
         MVC   VECSTMT(14),=CL14'* REVIEW &REL '
         MVC   VECSTMT+14(16),=CL16' BITMAP DATA FOR'
         LH    R1,$DSNAME
         BCTR  R1,0
         EX    R1,LDVECDSN
         CLI   $MEMBER,C' '        MEMBER NAME TO BE DISPLAYED?
         BE    VECDSNOK            NO
         LA    R1,VECSTMT+32(R1)
         MVI   0(R1),C'('
         MVC   1(8,R1),$MEMBER
VECMEMLP CLI   8(R1),C' '          TRAILING BLANK?
         BNE   VECMEMOK            NO
         BCT   R1,VECMEMLP
VECMEMOK MVI   9(R1),C')'
VECDSNOK XASAM24
         PUT   VECDCB,VECSTMT      WRITE HEADING
         XASAM31
         B     VECOPNOK
LDVECDSN MVC   VECSTMT+31(0),$DSNAME+2   <<< EXECUTED >>>
         SPACE
VECOPNOK LA    R1,AAB
         ST    R1,AABPTR
         LA    R1,FSINIT
         ST    R1,RCPPTR
         OI    RCPPTR,X'80'        FLAG LAST PARAMETER
         LA    R1,VECPARMS         POINT TO GDDM PARAMETER LIST
         L     R15,ASPLTADR
         BASR  R14,R15             FSINIT
         SPACE
         LA    R1,GSMIX
         ST    R1,RCPPTR
         LA    R1,GMIXXOR
         ST    R1,V_PARM1
         OI    V_PARM1,X'80'       FLAG LAST PARAMETER
         LA    R1,VECPARMS         POINT TO GDDM PARAMETER LIST
         L     R15,ASPLTADR
         BASR  R14,R15             GSMIX (XOR)
         SPACE
         MVI   VECSTMT,C' '        CLEAR OUTPUT RECORD
         MVC   VECSTMT+1(79),VECSTMT
         MVI   VECSTMT,C'*'        FLAG COMMENT
         L     R0,PICOLRES
         LA    R15,VECSTMT+5
         BAS   R14,VECEDNUM        FORMAT NUMBER
         MVC   6(10,R15),=CL10'-BIT COLOR'
         L     R0,X_PELS
         LA    R15,18(,R15)        POINT TO DISPLAY AREA
         BAS   R14,VECEDNUM        FORMAT NUMBER
         MVC   7(9,R15),=CL9'PELS WIDE'
         L     R0,Y_PELS
         LA    R15,18(,R15)        POINT TO DISPLAY AREA
         BAS   R14,VECEDNUM        FORMAT NUMBER
         MVC   7(9,R15),=CL9'PELS HIGH'
         TM    PICFLAGS,PICSRC     WRITING PICTURE SOURCE?
         BNO   VECTXTOK            NO
         XASAM24
         PUT   VECDCB,VECSTMT      YES, WRITE STATISTICS
         XASAM31
         SPACE
VECTXTOK LA    R1,GSCOL
         ST    R1,RCPPTR
         LA    R1,GCOLTURQ
         ST    R1,V_PARM1
         OI    V_PARM1,X'80'       FLAG LAST PARAMETER
         LA    R1,VECPARMS         POINT TO GDDM PARAMETER LIST
         L     R15,ASPLTADR
         BASR  R14,R15             GSCOL (TURQUOISE)
         SPACE
         LA    R1,GSCHAR
         ST    R1,RCPPTR
         LA    R1,GPOSMIN
         ST    R1,V_PARM1          X
         ST    R1,V_PARM2          Y
         LA    R1,GTXTLEN
         ST    R1,V_PARM3
         LA    R1,VECSTMT+10
         ST    R1,V_PARM4
         OI    V_PARM4,X'80'       FLAG LAST PARAMETER
         LA    R1,VECPARMS         POINT TO GDDM PARAMETER LIST
         L     R15,ASPLTADR
         BASR  R14,R15             GSCHAR (FROM BOTTOM LEFT)
         SPACE
         LA    R1,GSCP
         ST    R1,RCPPTR
         LA    R1,GPOSMIN
         ST    R1,V_PARM1          X
         LA    R1,GPOSMAX
         ST    R1,V_PARM2          Y
         OI    V_PARM2,X'80'       FLAG LAST PARAMETER
         LA    R1,VECPARMS         POINT TO GDDM PARAMETER LIST
         L     R15,ASPLTADR
         BASR  R14,R15             GSCP (TO TOP LEFT)
         SPACE
         XC    DOUBLE,DOUBLE       SET UP FOR FIRST OR ONLY PLANE
         MVI   DOUBLE+3,X'01'      SET BIT TO TEST IN ARRAY BYTES
         SPACE
VECPLNLP LA    R1,GSCOL
         ST    R1,RCPPTR
         LA    R1,DOUBLE
         TM    PICFLAGS,PICNBW     BLACK-AND-WHITE PICTURE?
         BZ    VECMONO             YES, GET PICTURE COLOUR TO USE
         L     R0,DOUBLE           NO, SAVE COLOUR PLANE INDICATOR
         NC    DOUBLE+3(1),PICCOLOR
         BNZ   VECOLROK            THIS PLANE IS IN PICTURE COLOUR
         ST    R0,DOUBLE           RESTORE COLOUR PLANE INDICATOR
         B     VECPLNOK            SKIP THIS COLOUR PLANE
VECMONO  MVC   DOUBLE+7(1),PICCOLOR     COPY COLOUR TO USE
         NI    DOUBLE+7,X'07'
         LA    R1,DOUBLE+4
VECOLROK ST    R1,V_PARM1
         OI    V_PARM1,X'80'       FLAG LAST PARAMETER
         LA    R1,VECPARMS         POINT TO GDDM PARAMETER LIST
         L     R15,ASPLTADR
         BASR  R14,R15             GSCOL
         SPACE
         L     R15,DOUBLE          GET PIXEL BYTE MASK
         L     R1,HSEACTIV         POINT TO PIXEL/BYTE ARRAY
         L     R2,VECBMPAD         POINT TO BITMAP STORAGE
         L     R3,Y_PELS           GET SCANLINES IN PICTURE
VECLOOP1 L     R4,X_PELS           GET PIXEL WIDTH OF PICTURE
VECLOOP2 LA    R0,8                GET BITS PER BYTE
         SR    R14,R14             CLEAR ACCUMULATOR
VECLOOP3 SLL   R14,1               PROMOTE ACCUMULATED BITS
         LTR   R4,R4               FINISHED LINE'S PIXELS?
         BNP   VECBITOK            YES, DO NOT TEST BYTE
         EX    R15,GTESTPEL        TEST IF PIXEL BIT IS ON
         LA    R1,1(,R1)           POINT TO NEXT ARRAY BYTE
         BCTR  R4,0                DECREMENT PIXELS IN LINE TO GO
         BZ    VECBITOK            PIXEL BIT IS OFF
         LA    R14,1(,R14)         PIXEL BIT IS ON
VECBITOK BCT   R0,VECLOOP3         PROCESS NEXT BIT OF BYTE
         STC   R14,0(,R2)          STORE EIGHT BITMAP PIXELS
         LA    R2,1(,R2)           POINT TO NEXT BITMAP BYTE
         LTR   R4,R4               FINISHED THIS LINE'S PIXELS?
         BP    VECLOOP2            NO, CONTINUE PACKING THIS SCANLINE
         BCT   R3,VECLOOP1         YES, COMMENCE PACKING NEXT SCANLINE
         SPACE
         LA    R1,GSIMG
         ST    R1,RCPPTR
         LA    R1,GIMGTYPE
         ST    R1,V_PARM1          IMAGE TYPE
         LA    R1,X_PELS
         ST    R1,V_PARM2          IMAGE WIDTH
         LA    R1,Y_PELS
         ST    R1,V_PARM3          IMAGE HEIGHT
         LA    R1,V_LENGTH
         ST    R1,V_PARM4          IMAGE LENGTH
         L     R1,VECBMPAD
         ST    R1,V_PARM5          IMAGE DATA
         OI    V_PARM5,X'80'       FLAG LAST PARAMETER
         LA    R1,VECPARMS         POINT TO GDDM PARAMETER LIST
         L     R15,ASPLTADR
         BASR  R14,R15             GSIMG (CURRENT POSITION UNCHANGED)
         SPACE
         TM    PICFLAGS,PICSRC     WRITING PICTURE SOURCE?
         BNO   VECPLNOK            NO
         TM    PICFLAGS,PICNBW     BLACK-AND-WHITE PICTURE?
         BZ    VECUNPAK            YES, GET ON WITH IT
         MVI   VECSTMT,C' '        CLEAR OUTPUT RECORD
         MVC   VECSTMT+1(79),VECSTMT
         MVC   VECSTMT(13),=CL13'*  BLUE PLANE'
         CLI   DOUBLE+3,X'01'      CORRECT?
         BE    VECPLNHD            YES
         MVC   VECSTMT+3(4),=CL4' RED'
         CLI   DOUBLE+3,X'02'      CORRECT?
         BE    VECPLNHD            YES
         MVC   VECSTMT+2(5),=CL5'GREEN'
VECPLNHD XASAM24
         PUT   VECDCB,VECSTMT
         XASAM31
VECUNPAK L     R2,VECBMPAD         INITIALIZE BUFFER POINTER
         LA    R3,VECSTMT+17       POINT TO FIRST UNPACK TARGET
         LA    R4,VECSTMT+55       POINT TO LAST UNPACK TARGET
         L     R5,Y_PELS           GET NUMBER OF SCANLINES
VECLINLP L     R6,X_PELS           GET PICTURE PIXEL WIDTH
         LA    R6,7(,R6)
         SRL   R6,3                GET BYTES PER SCANLINE
VECCRDLP MVI   VECSTMT,C' '        CLEAR OUTPUT RECORD
         MVC   VECSTMT+1(79),VECSTMT
         MVC   VECSTMT(17),VECCARD COPY TEMPLATE
         LR    R7,R3               POINT TO FIRST UNPACK TARGET
VECBYTLP UNPK  0(3,R7),0(2,R2)     UNPACK A BITMAP BYTE
         TR    0(2,R7),VECHEX-240
         LA    R7,2(,R7)           POINT PAST LATEST HEX
         MVI   0(R7),QUOTE         PREPARE FOR END OF RECORD'S DATA
         LA    R2,1(,R2)           POINT TO BITMAP BYTE
         CR    R7,R4               FILLED CARD IMAGE?
         BH    VECPUTIT            YES, WRITE OUTPUT RECORD
         BCT   R6,VECBYTLP         NO, GO UNPACK ANOTHER BYTE
         LA    R6,1                END OF LINE SO WRITE RECORD
VECPUTIT XASAM24
         PUT   VECDCB,VECSTMT      PRODUCE BITMAP DATA RECORD
         XASAM31
         BCT   R6,VECCRDLP         GO WRITE ANOTHER CARD IMAGE
         BCT   R5,VECLINLP         GO PROCESS NEXT SCANLINE
         MVI   VECSTMT,C' '        CLEAR OUTPUT RECORD
         MVC   VECSTMT+1(79),VECSTMT
         L     R0,V_LENGTH         SHOW LENGTH OF BITMAP
         CVD   R0,24(,R13)
         MVI   VECSTMT,C'*'        FLAG COMMENT
         MVC   VECSTMT+10(8),=X'4020202020202120'
         ED    VECSTMT+10(8),28(R13)
         MVC   VECSTMT+19(21),=C'BYTES IN IMAGE BITMAP'
         TM    PICFLAGS,PICNBW     BLACK-AND-WHITE PICTURE?
         BZ    VECPUTSZ            YES
         MVC   VECSTMT+28(5),=C'PLANE'
VECPUTSZ XASAM24
         PUT   VECDCB,VECSTMT
         XASAM31
         SPACE
VECPLNOK TM    PICFLAGS,PICNBW     BLACK-AND-WHITE PICTURE?
         BZ    VECIMGDN            YES, PICTURE NOW RENDERED
         CLI   DOUBLE+3,X'02'      LAST PLANE PROCESSED?
         BH    VECIMGDN            YES, PICTURE NOW RENDERED
         L     R0,DOUBLE           NO, GET COLOUR PLANE NUMBER
         SLL   R0,1                PROMOTE BIT TO NEXT PLANE
         ST    R0,DOUBLE           SAVE NEXT COLOUR PLANE NUMBER
         B     VECPLNLP            PROCESS NEXT COLOUR PLANE
         SPACE
VECLDERR MVC   MSG(MSGVECL),MSGVEC GDDM NOT AVAILABLE
         SLL   R1,4                LEAVE ROOM FOR "SIGN"
         ST    R1,DOUBLE+4         SHOW ABEND CODE
         OI    DOUBLE+7,X'0F'
         UNPK  MSG+MSGVECL-6(3),DOUBLE
         TR    MSG+MSGVECL-6(3),VECHEX-240
         CVD   R15,DOUBLE          SHOW REASON CODE
         OI    DOUBLE+7,X'0F'
         UNPK  MSG+MSGVECL-2(2),DOUBLE
         OI    STATUS7,$7BELL      REQUEST AUDIBLE ALARM AFTER ABEND
         B     VECWNDUP
         SPACE
VECSTGER MVI   MSG,123             REQUEST ABORTED - STORAGE FULL
         B     VECWNDUP
         SPACE
VECIMGDN TM    PICFLAGS,PICSRC     WRITING PICTURE SOURCE?
         BNO   VECLOSOK            NO
         MVI   CLOSED,X'80'        YES, CLOSE THE OUTPUT DCB
         CLOSE (VECDCB),MF=(E,CLOSED)
         FREEPOOL VECDCB           FREE BUFFERS
VECLOSOK LM    R0,R1,VECBMPLN      FREE BITMAP STORAGE
         FREEMAIN RU,LV=(0),A=(1),SP=63
         SPACE
         LA    R1,ASREAD
         ST    R1,RCPPTR
         LA    R1,ATTTYPE
         ST    R1,V_PARM1
         LA    R1,ATTVALUE
         ST    R1,V_PARM2
         LA    R1,ATTCOUNT
         ST    R1,V_PARM3
         OI    V_PARM3,X'80'       FLAG LAST PARAMETER
         LA    R1,VECPARMS         POINT TO GDDM PARAMETER LIST
         L     R15,ASPLTADR
         BASR  R14,R15             ASREAD (FINISH SEND, WAIT FOR INPUT)
         SPACE
         LA    R1,FSTERM
         ST    R1,RCPPTR
         OI    RCPPTR,X'80'        FLAG LAST PARAMETER
         LA    R1,VECPARMS         POINT TO GDDM PARAMETER LIST
         L     R15,ASPLTADR
         BASR  R14,R15             FSTERM
         SPACE
VECWNDUP L     R0,@VECWKSZ         GET DYNAMIC STORAGE SIZE
         LR    R1,R13              POINT TO DYNAMIC AREA TO BE FREED
         DROP  R13                 @VECWORK
         L     R13,4(,R13)         POINT TO PREVIOUS SAVE AREA
         OI    11(R13),X'01'       INVALIDATE FORWARD POINTER
         FREEMAIN R,LV=(0),A=(1)   FREE @VECWORK
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER
         SPACE
GTESTPEL TM    0(R1),X'00'         <<< EXECUTED >>>
         SPACE
VECEDNUM CVD   R0,DOUBLE
         MVC   0(6,R15),=XL6'402020202120'
         ED    0(6,R15),DOUBLE+5
         BR    R14
         SPACE
         DROP  R11                 REVGDDM
         TITLE '  R E V G D D M   -   S T A T I C   A R E A  '
@VECWKSZ DC    A($VECWKLN)         LOCAL WORKING STORAGE SIZE
ADMASPLT DC    CL8'ADMASPLT'       GDDM DYNAMIC SPI FOR TSO
FSINIT   DC    A(QQFSINIT)         INITIALIZE GDDM
GSMIX    DC    A(QQGSMIX)          SET FOREGROUND COLOUR-MIXING MODE
GSCOL    DC    A(QQGSCOL)          SET GRAPHIC COLOUR
GSCHAR   DC    A(QQGSCHAR)         DRAW A CHARACTER STRING
GSCP     DC    A(QQGSCP)           SET CURRENT POSITION
GSIMG    DC    A(QQGSIMG)          DRAW A GRAPHICS IMAGE
ASREAD   DC    A(QQASREAD)         PERFORM A TERMINAL READ
FSTERM   DC    A(QQFSTERM)         TERMINATE GDDM
GMIXXOR  DC    F'4'
GCOLTURQ DC    F'5'
GTXTLEN  DC    F'47'
GIMGTYPE DC    F'0'
GPOSMIN  DC    E'0'
GPOSMAX  DC    E'100'
VECHEX   DC    C'0123456789ABCDEF' HEXADECIMAL DIGIT TRANSLATE TABLE
MSGVEC   MESG  'GDDM NOT AVAILABLE - SXXX-RC'
VECCARD  DC    CL17'         DC    X'''
         SPACE
         DC    0D'0'
         LTORG
         SPACE
         DC    0D'0'               END OF CSECT
         TITLE '  R E V G D D M   -   D Y N A M I C   A R E A  '
@VECWORK DSECT
         DS    18F
VECBMPLN DS    F            _____/ BITMAP STORAGE LENGTH
VECBMPAD DS    F                 \ BITMAP STORAGE ADDRESS
VECDCB   DS    XL(SYMDCBL)         BITMAP SOURCE OUTPUT DCB
VECSTMT  DS    CL80                BITMAP SOURCE OUTPUT RECORD
AAB      DS    0F                  APPLICATION ANCHOR BLOCK
AABFC    DS    0F                  GDDM FEEDBACK CODE
AABSC    DS    H                   GDDM SEVERITY CODE
AABEC    DS    H                   GDDM ERROR CODE
AABAP    DS    A                   GDDM ANCHOR POINTER
RCP      DS    F                   REQUEST CONTROL PARAMETER
V_LENGTH DS    F                   LENGTH OF THE IMAGE BITMAP
VECPARMS DS    0F
AABPTR   DS    A                   APPLICATION ANCHOR BLOCK ADDRESS
RCPPTR   DS    A                   REQUEST CONTROL PARAMETER ADDRESS
V_PARM1  DS    A
V_PARM2  DS    A
V_PARM3  DS    A
V_PARM4  DS    A
V_PARM5  DS    A
ATTTYPE  DS    A
ATTVALUE DS    A
ATTCOUNT DS    A
         DS    0D                  END OF DSECT
$VECWKLN EQU   *-@VECWORK
         TITLE '  G D D M   -   R C P   C O D E S  '
*                                COPIED FROM GDDM.SADMSAM(ADMURCPB)
* GROUP - ADMMCQA
QQFSTRCE EQU   X'00020000'       TRACE
QQFSEXIT EQU   X'00030000'       SET ERROR EXIT
QQFSQERR EQU   X'00040000'       QUERY LAST ERROR
QQSPINIT EQU   X'00050000'       SPI SPECIAL INIT
QQFSQSYS EQU   X'00060000'       QUERY SYSTEMS ENVIRONS
QQESSUDS EQU   X'00070000'       SPECIFY SOURCE UDS
QQESEUDS EQU   X'00080000'       SPECIFY ENCODED UDS
QQESACRT EQU   X'000A0000'       CREATE APP GROUP
QQESADEL EQU   X'000B0000'       DELETE APP GROUP
QQESAQRY EQU   X'000C0000'       QUERY CURRENT APP GRP
QQESASEL EQU   X'000D0000'       SELECT APP GROUP
QQFSTRAN EQU   X'000F0000'       TRANSLATE CHAR STRING
QQESQCPG EQU   X'00100000'       QUERY CODE PAGE
QQESSCPG EQU   X'00110000'       SET CODE PAGE
QQESQEUD EQU   X'00120000'       QUERY ENCODED UDS
QQESQUNL EQU   X'00130000'       QRY NICKNAME INFO LEN
QQESQUNS EQU   X'00140000'       QUERY NICKNAME INFO
* GROUP - ADMMCQEE
QQESLIB  EQU   X'08142000'       DEFINE LIBRARY
QQESQOBJ EQU   X'08142400'       QUERY OBJECT EXISTENCE
QQESPCB  EQU   X'081C1000'       DEFINE PCB
* GROUP - ADMMCQDS
QQFSTERM EQU   X'0C000000'       TERMINATION
QQFSINIT EQU   X'0C000001'       INITIALISATION
QQFSRNIT EQU   X'0C000002'       RE-INITIALISATION
QQDSOPEN EQU   X'0C000200'       OPEN DEVICE
QQDSCLS  EQU   X'0C000201'       CLOSE DEVICE
QQDSUSE  EQU   X'0C000202'       DEVICE USAGE
QQDSDROP EQU   X'0C000203'       DROP DEVICE
QQDSQUID EQU   X'0C000204'       QUERY UNIQUE DEVICE ID
QQDSQUSE EQU   X'0C000205'       QUERY USAGE
QQDSQDEV EQU   X'0C000206'       QUERY DEVICE CHRISTCS
QQDSRNIT EQU   X'0C000207'       RE-INIT DEVICE
* GROUP - ADMMCQDC
QQFSPCRT EQU   X'0C040000'       PAGE CREATION
QQFSPSEL EQU   X'0C040001'       PAGE SELECTION
QQFSPDEL EQU   X'0C040002'       PAGE DELETION
QQFSPCLR EQU   X'0C040003'       PAGE CLEAR
QQFSPQRY EQU   X'0C040004'       QUERY PAGE
QQFSQCPG EQU   X'0C040005'       QUERY CURRENT PAGE
QQMSPQRY EQU   X'0C040006'       QUERY MAPPED PAGE
QQSSQF   EQU   X'0C040100'       QUERY S SETS ON FILE
QQPSQSS  EQU   X'0C040101'       QUERY DEVICE PS STORES
QQGSQNSS EQU   X'0C040102'       QUERY NO LOADED GRA SS
QQGSQSS  EQU   X'0C040103'       QUERY LOADED GRPHCS SS
QQPSLSS  EQU   X'0C040200'       LOAD DEV PS FROM STOR
QQPSLSSC EQU   X'0C040201'       COND LOAD DEV PS STORE
QQPSDSS  EQU   X'0C040202'       LOAD DEV PS FROM PROG
QQPSRSV  EQU   X'0C040203'       RESERVE DEVICE PS STOR
QQGSLSS  EQU   X'0C040300'       LOAD GRPH SYMBOL SET
QQGSDSS  EQU   X'0C040301'       DEFINE GRPH SYMBOL SET
QQPSRSS  EQU   X'0C040400'       RELEASE SS FROM DEV PS
QQGSRSS  EQU   X'0C040401'       RELEASE GRPH SYM SET
QQFSQDEV EQU   X'0C040500'       QUERY DEVICE
QQFSQURY EQU   X'0C040501'       EXTENDED QUERY DEVICE
QQFSQUPG EQU   X'0C040900'       QUERY UNIQUE PAGE ID
QQSSREAD EQU   X'0C040B00'       READ SYMBOL SET
QQSSWRT  EQU   X'0C040B01'       WRITE SYMBOL SET
QQFSPWIN EQU   X'0C040C00'       PAGE WINDOW
QQFSQWIN EQU   X'0C040C01'       PAGE WINDOW QUERY
QQGSCPG  EQU   X'0C040D00'       SET CURRENT CODE PAGE
QQGSQCPG EQU   X'0C040D01'       QUERY CODE PAGE
QQFSENAB EQU   X'0C040E00'       ENABLE DEVICE INPUT
* GROUP - ADMMCQDA
QQFSALRM EQU   X'0C080000'       SOUND ALARM
QQASFCUR EQU   X'0C080100'       MOVE CURSOR
QQASDFLT EQU   X'0C080200'       SET DEFAULT FLD ATTRS
QQASDTRN EQU   X'0C080300'       DEFINE XLATE TABLE
QQASFCLR EQU   X'0C080400'       CLEAR ALPHA FIELDS
QQASFTYP EQU   X'0C080500'       SET FIELD TYPE
QQASFINT EQU   X'0C080501'       SET FIELD INTENSITY
QQASFCOL EQU   X'0C080502'       SET FIELD COLOR
QQASFPSS EQU   X'0C080503'       SET FIELD PRIMARY SS
QQASFHLT EQU   X'0C080504'       SET FIELD HILITE
QQASFEND EQU   X'0C080505'       SET END FLD ATTRIBUTE
QQASFOUT EQU   X'0C080506'       SET FIELD O/P NULLS
QQASFIN  EQU   X'0C080507'       SET FIELD I/P BLANKS
QQASFTRN EQU   X'0C080508'       SET FLD XLATE TABLE
QQASFTRA EQU   X'0C080509'       SET FIELD TRANSPARENCY
QQASFSEN EQU   X'0C08050A'       SET SO/SI ENABLEMENT
QQASFBDY EQU   X'0C08050B'       SET FIELD OUTLINING
QQASCHLT EQU   X'0C080600'       SET CHARACTER HILITES
QQASCCOL EQU   X'0C080601'       SET CHARACTER COLORS
QQASCSS  EQU   X'0C080602'       SET CHAR SYMBOL SETS
QQASCPUT EQU   X'0C080603'       SET CHARACTER CODES
QQASDFLD EQU   X'0C080700'       DEFINE ALPHA FIELD
QQASRFMT EQU   X'0C080800'       REDEFINE ALPHA FIELDS
QQASDFMT EQU   X'0C080801'       DEFINE ALPHA FIELDS
QQASRATT EQU   X'0C080802'       REDEFINE FIELD ATTR.S
QQASQHLT EQU   X'0C080900'       QUERY CHAR HILITES
QQASQCOL EQU   X'0C080901'       QUERY CHARACTER COLORS
QQASQSS  EQU   X'0C080902'       QUERY CHAR SYMBOL SETS
QQASCGET EQU   X'0C080903'       QUERY CHARACTER CODES
QQASQFLD EQU   X'0C080A00'       QUERY FIELD ATTRIBUTES
QQASQMOD EQU   X'0C080B00'       QUERY MODIFIED FIELDS
QQFSREST EQU   X'0C080C00'       RESTORE SCREEN
QQDSCMF  EQU   X'0C080C01'       USER CONTROL FUNCTION
QQDSQCMF EQU   X'0C080C02'       QUERY USER CONTROL FTN
QQASMODE EQU   X'0C080D00'       SET REPLY MODE
QQASQMAX EQU   X'0C080E00'       QUERY NO. OF FIELDS
QQASQNMF EQU   X'0C080E01'       QUERY NO. MOD. FIELDS
QQASQCUR EQU   X'0C080F00'       QUERY CURSOR
QQASFMOD EQU   X'0C081100'       MODIFY FIELD
QQASTYPE EQU   X'0C081300'       SET TERMINAL TYPE
QQASGPUT EQU   X'0C081503'       SET DUAL-CHARACTERS
QQASGGET EQU   X'0C081603'       QUERY DUAL-CHARACTERS
QQASQLEN EQU   X'0C081800'       QUERY FIELD LENGTH
* GROUP - ADMMCQDG
QQGSFLD  EQU   X'0C0C0000'       GRAPHICS FIELD
QQGSPS   EQU   X'0C0C0001'       PICTURE SPACE
QQGSWIN  EQU   X'0C0C0002'       SPECIFY WINDOW
QQGSVIEW EQU   X'0C0C0003'       SPECIFY VIEWPORT
QQGSQPS  EQU   X'0C0C0004'       QUERY PICTURE SPACE
QQGSQVIE EQU   X'0C0C0005'       QUERY VIEWPORT
QQGSQWIN EQU   X'0C0C0006'       QUERY WINDOW
QQGSUWIN EQU   X'0C0C0007'       DEFINE UNIFORM WINDOW
QQGSQFLD EQU   X'0C0C000A'       QUERY GRAPHICS FIELD
QQGSARCC EQU   X'0C0C000B'       ASPECT RATIO CONTROL
QQGSBND  EQU   X'0C0C000D'       SPECIFY DATA BOUNDARY
QQGSQBND EQU   X'0C0C000E'       QUERY DATA BOUNDARY
QQGSQMAX EQU   X'0C0C0100'       QUERY SEGMENT RANGE
QQGSQCUR EQU   X'0C0C0101'       QUERY CURSOR
QQGSQSSD EQU   X'0C0C0102'       QUERY SYMBOL SET DATA
QQGSQCEL EQU   X'0C0C0202'       QUERY CELL SIZE
QQGSCLP  EQU   X'0C0C0203'       SPECIFY CLIPPING
QQGSQCLP EQU   X'0C0C0204'       QUERY CLIPPING
QQGSSEG  EQU   X'0C0C0300'       CREATE SEGMENT
QQGSSCLS EQU   X'0C0C0301'       CLOSE SEGMENT
QQGSSDEL EQU   X'0C0C0302'       DELETE SEGMENT
QQGSCLR  EQU   X'0C0C0303'       CLEAR GRAPHICS FIELD
QQGSSATI EQU   X'0C0C0309'       SET INITIAL ATTRIBUTES
QQGSQATI EQU   X'0C0C030A'       QUERY INITIAL ATTS
QQGSSATS EQU   X'0C0C030B'       SET SEGMENT ATTRIBUTES
QQGSQATS EQU   X'0C0C030C'       QUERY SEGMENT ATTS
QQGSSPOS EQU   X'0C0C030D'       SET SEGMENT POSITION
QQGSQPOS EQU   X'0C0C030E'       QUERY SEGMENT POSITION
QQGSSORG EQU   X'0C0C0311'       SET SEGMENT ORIGIN
QQGSSPRI EQU   X'0C0C0312'       SET SEGMENT PRIORITY
QQGSQPRI EQU   X'0C0C0313'       QUERY SEGMENT PRIORITY
QQGSQORG EQU   X'0C0C0316'       QUERY SEGMENT ORIGIN
QQGSMOVE EQU   X'0C0C0400'       MOVE TO
QQGSLINE EQU   X'0C0C0401'       LINE TO
QQGSPLNE EQU   X'0C0C0402'       POLYLINE TO
QQGSMARK EQU   X'0C0C0406'       MARKER AT
QQGSMRKS EQU   X'0C0C0407'       POLY MARKER AT
QQGSAREA EQU   X'0C0C0408'       BEGIN AREA
QQGSENDA EQU   X'0C0C0409'       END AREA
QQGSVECM EQU   X'0C0C040A'       VECTOR
QQGSCHAR EQU   X'0C0C0500'       CHARACTER STRING AT
QQGSCHAP EQU   X'0C0C0501'       CHARACTER STRING
QQGSQTB  EQU   X'0C0C0502'       QUERY THE TEXT BOX
QQGSARC  EQU   X'0C0C0600'       ARC
QQGSELPS EQU   X'0C0C0601'       ELLIPSE
QQGSPFLT EQU   X'0C0C0602'       FILLET
QQGSQCP  EQU   X'0C0C0700'       QUERY CURRENT POSN
QQGSCOL  EQU   X'0C0C0701'       SET COLOR
QQGSMIX  EQU   X'0C0C0702'       SET MIX MODE
QQGSLT   EQU   X'0C0C0703'       SET LINE TYPE
QQGSLW   EQU   X'0C0C0704'       SET LINE WIDTH
QQGSCM   EQU   X'0C0C0705'       SET CHARACTER MODE
QQGSCS   EQU   X'0C0C0706'       SET CHARACTER SET
QQGSCB   EQU   X'0C0C0707'       SET CHARACTER BOX
QQGSCA   EQU   X'0C0C0708'       SET CHARACTER ANGLE
QQGSCD   EQU   X'0C0C0709'       SET CHARACTER DIRCTN
QQGSPAT  EQU   X'0C0C070A'       SET PATTERN
QQGSMS   EQU   X'0C0C070B'       SET MARKER SYMBOL
QQGSCH   EQU   X'0C0C070C'       SET CHARACTER SHEAR
QQGSFLW  EQU   X'0C0C070E'       SET FRACTIONAL WIDTH
QQGSQFLW EQU   X'0C0C070F'       QUERY FRACTIONAL WIDTH
QQGSQCOL EQU   X'0C0C0711'       QUERY COLOR
QQGSQMIX EQU   X'0C0C0712'       QUERY MIX MODE
QQGSQLT  EQU   X'0C0C0713'       QUERY LINE TYPE
QQGSQLW  EQU   X'0C0C0714'       QUERY LINE WIDTH
QQGSQCM  EQU   X'0C0C0715'       QUERY CHARACTER MODE
QQGSQCS  EQU   X'0C0C0716'       QUERY CHARACTER SET
QQGSQCB  EQU   X'0C0C0717'       QUERY CHARACTER BOX
QQGSQCA  EQU   X'0C0C0718'       QUERY CHARACTER ANG
QQGSQCD  EQU   X'0C0C0719'       QUERY CHARACTER DIRN
QQGSQPAT EQU   X'0C0C071A'       QUERY PATTERN
QQGSQMS  EQU   X'0C0C071B'       QUERY MARKER SYMBOL
QQGSQCH  EQU   X'0C0C071C'       QUERY CHARACTER SHEAR
QQGSMSC  EQU   X'0C0C071D'       SET MARKER SCALE
QQGSQMSC EQU   X'0C0C071E'       QUERY MARKER SCALE
QQGSPUT  EQU   X'0C0C0900'       INCLUDE GDF
QQGSIMG  EQU   X'0C0C0A00'       LIMITED IMAGE
QQGSIMGS EQU   X'0C0C0A04'       LIMITED IMAGE (SCALED)
QQGSGETS EQU   X'0C0C0B00'       RETRIEVE GDF
QQGSGETE EQU   X'0C0C0B01'       END GDF RETRIEVAL
QQGSGET  EQU   X'0C0C0B02'       GET GDF BUFFER
QQGSILOC EQU   X'0C0C0C00'       INITIALIZE LOCATOR
QQGSIPIK EQU   X'0C0C0C01'       INITIALIZE PICK DEVICE
QQGSIDVI EQU   X'0C0C0C04'       INITIALIZE DATA VALUE
QQGSIDVF EQU   X'0C0C0C05'       INITIALIZE DATA VALUE
QQGSISTR EQU   X'0C0C0C06'       INIT. STRING DEVICE
QQGSISTK EQU   X'0C0C0C07'       INIT. STROKE DEVICE
QQGSQLID EQU   X'0C0C0C09'       QUERY INPUT DEVICE
QQGSENAB EQU   X'0C0C0D00'       ENABLE INPUT DEVICE
QQGSFLSH EQU   X'0C0C0E00'       FLUSH INPUT QUEUE
QQGSQSIM EQU   X'0C0C0E01'       QUERY INPUT QUEUE
QQGSQCHO EQU   X'0C0C0F00'       QUERY CHOICE DATA
QQGSQLOC EQU   X'0C0C0F01'       QUERY LOCATOR DATA
QQGSQPIK EQU   X'0C0C0F02'       QUERY PICK DATA
QQGSQSTR EQU   X'0C0C0F03'       QUERY STRING DATA
QQGSQSTK EQU   X'0C0C0F04'       QUERY STROKE DATA
QQGSQPKS EQU   X'0C0C0F05'       QUERY PICK STRUCTURE
QQGSTAG  EQU   X'0C0C1000'       SET THE CURRENT TAG
QQGSQTAG EQU   X'0C0C1001'       QUERY THE CURRENT TAG
QQGSSAGA EQU   X'0C0C1102'       SET GEOM ATTRIBUTES
QQGSSTFM EQU   X'0C0C1103'       SET SEGMENT TRANSFORM
QQGSQAGA EQU   X'0C0C1104'       QUERY GEOM ATTRIBUTES
QQGSQTFM EQU   X'0C0C1105'       QUERY SEGMENT TRANSFM
QQGSSCT  EQU   X'0C0C1107'       SET CURRENT TRANSFORM
QQGSSAVE EQU   X'0C0C1200'       SAVE SEGMENT
QQGSLOAD EQU   X'0C0C1201'       LOAD SEGMENT
QQGSMB   EQU   X'0C0C1307'       SET MARKER BOX
QQGSQMB  EQU   X'0C0C1308'       QUERY MARKER BOX
QQGSTA   EQU   X'0C0C130D'       SET TEXT ALIGNMENT
QQGSQTA  EQU   X'0C0C130E'       QUERY TEXT ALIGNMENT
QQGSCBS  EQU   X'0C0C130F'       SET CHARACTER SPACING
QQGSQCBS EQU   X'0C0C1310'       QUERY CHARACTER SPACIN
QQGSAM   EQU   X'0C0C1311'       SET ATTRIBUTE MODE
QQGSQAM  EQU   X'0C0C1312'       QUERY ATTRIBUTE MODE
QQGSPOP  EQU   X'0C0C1313'       RESTORE ATTRIBUTES
QQGSSVL  EQU   X'0C0C1314'       SET SEGMENT VIEW LIMIT
QQGSQSVL EQU   X'0C0C1315'       QUERY SEG VIEW LIMITS
QQGSQBMX EQU   X'0C0C1316'       QUERY BACKGROUND MIX
QQGSBMIX EQU   X'0C0C1317'       SET BACKGROUND MIX
QQGSCP   EQU   X'0C0C1319'       SET CURRENT POSITION
QQGSSCPY EQU   X'0C0C1400'       COPY SEGMENT
QQGSSINC EQU   X'0C0C1401'       INCLUDE SEGMENT
QQGSCALL EQU   X'0C0C1402'       CALL A SEGMENT
QQGSCORR EQU   X'0C0C1500'       EXPLICIT CORRELATE
QQGSCORS EQU   X'0C0C1501'       STRUCTURE CORRELATION
QQGSDEFS EQU   X'0C0C1900'       START DRAWING DEFAULTS
QQGSDEFE EQU   X'0C0C1901'       END DRAWING DEFAULTS
QQFSUPDM EQU   X'0C0C1A00'       SET UPDATE MODE
QQFSQUPD EQU   X'0C0C1A01'       QUERY UPDATE MODE
QQGSSEN  EQU   X'0C0C1B00'       SET MIXED STRING MODE
QQGSQSEN EQU   X'0C0C1B01'       QUERY MIX STRING MODE
QQCGLOAD EQU   X'0C0C1F00'       LOAD CGM
QQCGSAVE EQU   X'0C0C2000'       SAVE CGM
* GROUP - ADMMCQDD
QQASREAD EQU   X'0C100000'       READ
QQFSFRCE EQU   X'0C100001'       FORCE OUTPUT
QQFSCHEK EQU   X'0C100002'       PREPARE PS FOR OUTPUT
QQGSREAD EQU   X'0C100003'       AWAIT GRAPHICS INPUT
QQFSSAVE EQU   X'0C100004'       SAVE SCREEN
QQFSSHOW EQU   X'0C100005'       SHOW SCREEN
QQFSSHOR EQU   X'0C100007'       SHOW WITH REPLY
QQWSIO   EQU   X'0C100008'       WINDOWED DEVICE I/O
QQFSGETS EQU   X'0C100009'       FAM-4 BUFFER START
QQFSGET  EQU   X'0C10000A'       FAM-4 OUTPUT TO BUFFER
QQFSGETE EQU   X'0C10000B'       FSGET TERMINATE
QQDSFRCE EQU   X'0C10000C'       FAM-4 MEMBER TO PDS
* GROUP - ADMMCQDO
QQFSOPEN EQU   X'0C180000'       OPEN PRINTER DESTINTN
QQFSCOPY EQU   X'0C180001'       PAGE COPY
QQGSCOPY EQU   X'0C180002'       GRAPHICS COPY
QQFSLOG  EQU   X'0C180003'       LINE-BY-LINE OUTPUT
QQFSCLS  EQU   X'0C180004'       CLOSE PRINTER DESTINTN
QQFSLOGC EQU   X'0C180005'       LINE-BY-LINE O/P + CC
QQDSCOPY EQU   X'0C180008'       DEVICE COPY
* GROUP - ADMMCQDB
QQPTSCRT EQU   X'0C200000'       CREATE PTN SET.
QQPTSQRY EQU   X'0C200001'       QUERY PTN SET.
QQPTSSEL EQU   X'0C200100'       SELECT PTN SET.
QQPTSDEL EQU   X'0C200101'       DELETE PTN SET.
QQPTSQUN EQU   X'0C200102'       Q. UNIQUE PTN SET ID.
QQPTSSPP EQU   X'0C200300'       SET PARTN. PRIORITIES
QQPTSQPP EQU   X'0C200301'       QUERY PTN PRIORITIES
QQPTSQPI EQU   X'0C200400'       QUERY PARTITION IDS
QQPTSQPN EQU   X'0C200401'       QUERY PARTITION NOS
* GROUP - ADMMCQDE
QQPTNCRT EQU   X'0C240000'       CREATE PARTITION.
QQPTNQRY EQU   X'0C240001'       QUERY PARTITION.
QQPTNMOD EQU   X'0C240002'       MODIFY PARTITION.
QQPTNSEL EQU   X'0C240100'       SELECT PARTITION.
QQPTNDEL EQU   X'0C240101'       DELETE PARTITION.
QQPTNQUN EQU   X'0C240102'       Q. UNIQUE PTN ID.
* GROUP - ADMMCQDM
QQMSREAD EQU   X'0C280000'       READ WITH MAP
QQMSPCRT EQU   X'0C280100'       CREATE MAPPED PAGE
QQMSQGRP EQU   X'0C280300'       QUERY ABOUT A GROUP
QQMSQMAP EQU   X'0C280301'       QUERY ABOUT A MAP
QQMSQADS EQU   X'0C280302'       QUERY ABOUT AN ADS
QQMSQFIT EQU   X'0C280303'       QUERY WHETHER MAP FITS
QQMSQMOD EQU   X'0C280400'       QUERY MODIFIED M-FLDS
QQMSDFLD EQU   X'0C280500'       DEFINE MAPPED-FIELD
QQMSPUT  EQU   X'0C280501'       PUT MAPPED-FIELD DATA
QQMSGET  EQU   X'0C280502'       GET MAPPED-FIELD DATA
QQMSQFLD EQU   X'0C280503'       QUERY MAPPED-FIELD
QQMSCPOS EQU   X'0C280600'       SET CURSOR POSITION
QQMSQPOS EQU   X'0C280601'       QUERY CURSOR POSITION
* GROUP - ADMMCQDN
QQWSCRT  EQU   X'0C2C0000'       CREATE OPERATOR WINDOW
QQWSDEL  EQU   X'0C2C0100'       DELETE OPERATOR WINDOW
QQWSMOD  EQU   X'0C2C0200'       MODIFY OPERATOR WINDOW
QQWSQRY  EQU   X'0C2C0300'       QUERY OPERATOR WINDOW
QQWSQUN  EQU   X'0C2C0400'       QUERY OP WINDOW ID
QQWSQWI  EQU   X'0C2C0500'       QUERY OP WINDOW IDS
QQWSQWN  EQU   X'0C2C0600'       QUERY OP WINDOW NOS
QQWSQWP  EQU   X'0C2C0700'       QUERY WIN PRIORITIES
QQWSSEL  EQU   X'0C2C0800'       SELECT OPERATOR WINDOW
QQWSSWP  EQU   X'0C2C0900'       SET WINDOW PRIORITIES
* GROUP - ADMMCQD3
QQISFLD  EQU   X'0C300000'       DEFINE IMAGE FIELD
QQISQFLD EQU   X'0C300001'       QUERY IMAGE FIELD
QQISCTL  EQU   X'0C300002'       SET IMAGE QUALITY CTRL
QQISXCTL EQU   X'0C300003'       EXT IMAGE QUALITY CTRL
QQISESCA EQU   X'0C300B00'       ECHO SCANNER
QQISLDE  EQU   X'0C300C00'       LOAD EXT. R/O IMAGE
QQISQSCA EQU   X'0C300D00'       QRY IMAGE SCANNER DEV.
QQISQRES EQU   X'0C300E00'       QRY SUPPORTED RES
QQISENAB EQU   X'0C301200'       IMAGE CSR ENAB/DISAB
QQISQLOC EQU   X'0C301300'       QRY IMAGE LOCATOR CSR
QQISILOC EQU   X'0C301400'       IMAGE LOC. CSR. INIT
QQISQBOX EQU   X'0C301500'       IMAGE BOX CSR. QUERY
QQISIBOX EQU   X'0C301600'       IMAGE BOX CSR. INIT
QQISQFOR EQU   X'0C301700'       QUERY IMAGE FORMATS
QQISQCOM EQU   X'0C301800'       QUERY IMAGE COMPRESSNS
* GROUP - ADMMCQDQ
QQAPDEF  EQU   X'0C380000'       DEFINE FIELD LIST
QQAPDEL  EQU   X'0C380100'       DELETE FIELD LIST
QQAPMOD  EQU   X'0C380200'       MODIFY FIELD LIST
QQAPQIDS EQU   X'0C380300'       QUERY FIELD LIST IDS
QQAPQNUM EQU   X'0C380400'       QUERY FIELD LIST NOS
QQAPQRY  EQU   X'0C380500'       QUERY FIELD LIST
QQAPQSIZ EQU   X'0C380600'       QUERY FIELD LIST SIZE
QQAPQUID EQU   X'0C380700'       QUERY UNIQUE FL ID
* GROUP - ADMMCQB
QQCHLC   EQU   X'10020307'       LINE COLORS
* GROUP - ADMMCQIS
QQISSE   EQU   X'18000000'       INVOKE SYMBOL EDITOR
* GROUP - ADMMCQ3I
QQIMACRT EQU   X'3C010001'       CREATE AN IMAGE
QQIMAGID EQU   X'3C010002'       GET UNIQUE IMAGE ID
QQIMAQRY EQU   X'3C010004'       QUERY IMAGE ATTRIBUTES
QQIMARES EQU   X'3C010006'       CONVERT RESOLUTION
QQIMADEL EQU   X'3C010007'       DELETE SPECIFIED IMAGE
QQIMACLR EQU   X'3C010008'       CLEAR IMAGE RECTANGLE
QQIMATRM EQU   X'3C010009'       TRIM IMAGE TO RECTANGL
QQIMASAV EQU   X'3C01000A'       SAVE IMAGE IN LIBRARY
QQIMARST EQU   X'3C01000B'       RESTORE IMAGE
QQIMARF  EQU   X'3C01000C'       CHANGE RESOLUTION FLAG
QQIMAPTS EQU   X'3C010011'       START DATA ENTRY
QQIMAPT  EQU   X'3C010012'       ENTER DATA IN IMAGE
QQIMAPTE EQU   X'3C010013'       END DATA ENTRY
QQIMAGTS EQU   X'3C010014'       START DATA RETRIEVAL
QQIMAGT  EQU   X'3C010015'       GET IMAGE DATA
QQIMAGTE EQU   X'3C010016'       END DATA RETRIEVAL
QQIMXFER EQU   X'3C010017'       IMAGE DATA TRANSFER
* GROUP - ADMMCQ3P
QQIMPGID EQU   X'3C030001'       GET UNIQUE PROJ ID
QQIMPCRT EQU   X'3C030003'       CREATE A PROJECTION
QQIMPDEL EQU   X'3C030004'       DELETE SPECIFIED PROJ
QQIMPSAV EQU   X'3C030005'       SAVE IMAGE PROJECTION
QQIMPRST EQU   X'3C030006'       RESTORE PROJECTION
QQIMREX  EQU   X'3C030101'       DEFINE IMAGE RECTANGLE
QQIMREXR EQU   X'3C030102'       DEFINE IMAGE RECTANGLE
QQIMRPL  EQU   X'3C030103'       DEFINE PLACE POSITION
QQIMRSCL EQU   X'3C030105'       SCALE IMAGE RECTANGLE
QQIMRRAL EQU   X'3C030106'       SET SCALING ALGORITHM
QQIMRORN EQU   X'3C030107'       ORIENTATE SUB-IMAGE
QQIMRREF EQU   X'3C030108'       REFLECT SUB-IMAGE
QQIMRNEG EQU   X'3C030109'       NEGATE IMAGE PIXELS
QQIMRCVB EQU   X'3C030201'       BI-LEVEL CONVERSION
QQIMRBRI EQU   X'3C030202'       BRIGHTNESS CONVERSION
QQIMRCON EQU   X'3C030203'       CONTRAST CONVERSION
QQIMRPLR EQU   X'3C030204'       DEFINE PLACE POSITION
* GROUP - ADMMCQ4
QQCDPU   EQU   X'40000000'       COMP DOC PRINT UTIL
         TITLE '  R E V P Q R Y   -   Q U E R Y   P A N E L   S I Z E '
**********************************************************************
*                                                          *         *
*         DETERMINE IF ISPF IS TO PERFORM SCREEN I/O       *  GP@HC  *
*                                                          * 11/2001 *
**********************************************************************
         SPACE
**********************************************************************
*                                                                    *
* REGISTERS ON ENTRY: R15-> REVPQRY                                  *
*                     R14-> RETURN ADDRESS                           *
*                     R13-> REGISTER SAVE AREA                       *
*                     R9 -> @DATA                                    *
*                                                                    *
* DURING PROCESSING:  R13-> @PQWORK  (LOCAL GETMAINED AREA)          *
*                     R11-> REVPQRY                                  *
*                     R4  = EXIT RETURN CODE                         *
*                                                                    *
* RETURN CODES:       R15 = 0      NORMAL COMPLETION                 *
*                     R15 = 4      UNSUITABLE ENVIRONMENT            *
*                     R15 = 8      VARIABLE NOT FOUND                *
*                     R15 = 12     PANEL NOT FOUND                   *
*                     R15 = 16     DATA TRUNCATION OCCURRED          *
*                     R15 = 20     SEVERE ERROR - UNABLE TO CONTINUE *
*                     R15 = 40     GETMAIN FAILED                    *
*                     R15 = 50     ISPLINK NOT IN SYSTEM             *
*                                                                    *
**********************************************************************
         SPACE
REVPQRY  RSECT
REVPQRY  AMODE 31
         B     @PQRY-*(,R15)
         DC    AL1(7),CL7'REVPQRY'
@PQRY    STM   R14,R12,12(R13)
         LR    R11,R15
         USING REVPQRY,R11
         TM    MODE,MD_RECRS           IS THIS A RECURSIVE 'REVIEW'?
         BO    @PQNOOP                 YES, DO NOT SHOW 'REVPANEL'
         TM    STATUS8,$8ISPF          ISPF ENVIRONMENT?
         BNO   @PQNOOP                 NO, SKIP ISPF PANEL QUERY
         CLI   DATAKV,1                WAS 'XISPMODE' SPECIFIED?
         BE    @PQNOOP                 YES, SUPPRESS ISPF DIALOG
         AIF   (NOT &ENV390).KEYLOK2
         TM    STATUS7,KEYLOK          IS KEYLIST MEMBER PRESENT?
         BNO   @PQNOOP                 NO, AVOID SEVERE DIALOG ERROR
.KEYLOK2 ANOP
***       START OF CODE TO SEE IF ATTACHED DIRECTLY BY STARTOOL.
***       IF SO DO NOT RUN AS AN ISPF APPLICATION OR SESSION WILL CLAG.
         L     R15,PSATOLD             POINT TO CURRENT TCB
         USING TCB,R15
         L     R15,TCBOTC              POINT TO ORIGINATING TASK
         L     R15,TCBRBP              POINT TO ITS ACTIVE RB
         DROP  R15                     TCB
         USING RBBASIC,R15
         TM    RBSTAB1,RBFTP           PROGRAM REQUEST BLOCK?
         BNZ   @PQGETWK                NO, NOT DIRECT FROM STARTOOL
         ICM   R15,7,RBCDE1            YES, POINT TO ITS CDE
         BZ    @PQGETWK                NOT ORDINARY PROGRAM (SYNCH?)
         DROP  R15                     RBBASIC
         USING CDENTRY,R15
         TM    CDATTR,CDMIN            ALIAS?
         BZ    *+8                     NO
         L     R15,CDXLMJP             YES, POINT TO MAJOR CDE
         CLC   =C'STARTOOL',CDNAME     REVIEW ATTACHED FROM STARTOOL?
         BE    @PQNOOP                 YES, AVOID ISPF PROBLEMS
         DROP  R15                     CDENTRY
@PQGETWK DS    0H
***       END OF CODE TO SEE IF ATTACHED DIRECTLY BY STARTOOL.
         SR    R0,R0
         LA    R0,$PQWKLEN             LOAD LENGTH OF DSA
         GETSTOR RC,LV=(0),LOC=(31,64) GET THE STORAGE
         LTR   R15,R15
         BZ    PQSTGOK
@PQNOOP  LM    R14,R12,12(R13)         RESTORE CALLERS REGISTERS
         LA    R15,40                  SET RETURN CODE TO 40
         BR    R14                     RETURN TO CALLER
         SPACE
************************************************************
*                                                          *
*         VERIFY PRESENCE AND SUITABILITY OF REVPANEL      *
*                                                          *
************************************************************
         SPACE
PQSTGOK  DS    0H
         XC    0($PQWKLEN,R1),0(R1)    CLEAR RESIDUAL DATA
         ST    R13,4(,R1)              CHAIN SAVE AREAS
         ST    R1,8(,R13)
         LR    R13,R1                  POINT TO NEW SAVE AREA
         USING @PQWORK,R13
         LA    R4,50                   PREPARE FOR NO ISPLINK
         LOAD  EPLOC=PQISPLNK,         PRE-LOAD REENTRANT MODULE       +
               ERRET=@PQNODEL          HANDLE ABSENCE OF ISPLINK
         ST    R0,@ISPLINK             SAVE ADDRESS OF ISPLINK
         SPACE
         L     R15,@ISPLINK            LOAD ISPLINK ENTRY POINT
         CALL  (15),(PQCNTL,PQERRS,PQRETURN),                          +
               VL,MF=(E,PQPLIST)       CONTROL ERRORS RETURN
         LTR   R4,R15                  SUCCESS?
         BNZ   @PQEXIT1                NO
         SPACE
         L     R15,@ISPLINK            LOAD ISPLINK ENTRY POINT
         CALL  (15),(PQVDEF,AREATYPN,AREATYPE,PQCHAR,PQFW8),           +
               VL,MF=(E,PQPLIST)       VDEFINE AREATYPE
         LTR   R4,R15                  SUCCESS?
         BNZ   @PQEXIT1                NO
         SPACE
         L     R15,@ISPLINK            LOAD ISPLINK ENTRY POINT
         CALL  (15),(PQVDEF,AREAWIDN,AREAWDTH,PQFIXED,PQFW4),          +
               VL,MF=(E,PQPLIST)       VDEFINE AREAWDTH
         LTR   R4,R15                  SUCCESS?
         BNZ   @PQEXIT2                NO
         SPACE
         L     R15,@ISPLINK            LOAD ISPLINK ENTRY POINT
         CALL  (15),(PQVDEF,AREADEPN,AREADPTH,PQFIXED,PQFW4),          +
               VL,MF=(E,PQPLIST)       VDEFINE AREADPTH
         LTR   R4,R15                  SUCCESS?
         BNZ   @PQEXIT2                NO
         SPACE
         L     R15,@ISPLINK            LOAD ISPLINK ENTRY POINT
         CALL  (15),(PQVDEF,ROWNUMNM,ROWNMBR,PQFIXED,PQFW4),           +
               VL,MF=(E,PQPLIST)       VDEFINE ROWNMBR
         LTR   R4,R15                  SUCCESS?
         BNZ   @PQEXIT2                NO
         SPACE
         L     R15,@ISPLINK            LOAD ISPLINK ENTRY POINT
         CALL  (15),(PQVDEF,COLNUMNM,COLNMBR,PQFIXED,PQFW4),           +
               VL,MF=(E,PQPLIST)       VDEFINE COLNMBR
         LTR   R4,R15                  SUCCESS?
         BNZ   @PQEXIT2                NO
         SPACE
         L     R15,@ISPLINK            LOAD ISPLINK ENTRY POINT
         CALL  (15),(PQUERY,PQREVPN2,PQREVBUF,                         +
               AREATYPN,AREAWIDN,AREADEPN,ROWNUMNM,COLNUMNM),          +
               VL,MF=(E,PQPLIST)       PQUERY 'REVPANL2' DYNAMIC AREA
         LTR   R15,R15                 SUCCESS?
         BNZ   *+8                     NO
         OI    STATUS15,$15PN2         YES, FLAG 'REVPANL2' EXISTS
         SPACE
         L     R15,@ISPLINK            LOAD ISPLINK ENTRY POINT
         CALL  (15),(PQUERY,PQREVPNL,PQREVBUF,                         +
               AREATYPN,AREAWIDN,AREADEPN,ROWNUMNM,COLNUMNM),          +
               VL,MF=(E,PQPLIST)       PQUERY 'REVPANEL' DYNAMIC AREA
         LTR   R4,R15                  SUCCESS?
         BNZ   @PQEXIT2                NO
         SPACE
         L     R15,@ISPLINK            LOAD ISPLINK ENTRY POINT
         CALL  (15),(PQVDEL,PQALLVAR),                                 +
               VL,MF=(E,PQPLIST)       VDELETE ALL VDEFINED VARIABLES
         LTR   R4,R15                  SUCCESS?
         BNZ   @PQEXIT1                NO
         SPACE
         LA    R4,4                    PREPARE FOR UNSUITABLE SITUATION
         CLI   AREATYPE,C'D'           DYNAMIC AREA?
         BNE   @PQEXIT1                NO, SOMETHING HAS GONE WRONG
         SPACE
**********************************************************************
*                                                          *         *
*         PERFORM SCREEN RESIZING IF REQUIRED              *  R41.7  *
*                                                          * APR2008 *
**********************************************************************
         SPACE
         L     R1,AREAWDTH         GET PANEL WIDTH
         LA    R0,2
         A     R0,AREADPTH         GET PANEL DEPTH
         LR    R6,R0               COPY THE SCREEN LINE COUNT
         STM   R0,R1,DOUBLE        SAVE PANEL DIMENSIONS
         M     R0,AREADPTH         GET DYNAMIC AREA SIZE
         ST    R1,PICSTGSZ         SAVE THE ISPF DYNAMIC AREA SIZE
         CLC   DOUBLE,SCRNLNES     PANEL MATCHES LINE MODE SIZE?
         BE    PQPREPVR            YES, THAT MAKES IT EASY
         S     R6,PQFW4            NO, GET NEW REVIEW DATA LINE COUNT
         BNP   @PQEXIT1            NUMBERS TOO SMALL TO USE
         MVC   SCRNLNES(8),DOUBLE  SAVE NEW DIMENSIONS
         A     R1,SCRNCOLS         TWO ROWS NOT IN DYNAMIC AREA
         A     R1,SCRNCOLS         GET THE WHOLE PANEL SIZE
         ST    R1,SCREENSZ         SAVE THE NEW SCREEN SIZE
         LM    R0,R1,HOLDSIZE      GET SIZE DEPENDENT AREA DETAILS
         FREEMAIN R,A=(1),LV=(0)   FREE OLD AREAS
         MH    R6,=Y(DIRSIZ)       GET THE HOLD DIRECTORY SIZE
         L     R1,SCREENSZ         GET SCREEN BUFFER SIZE
         SLA   R1,2
         A     R1,SCREENSZ         GET TOTAL 3270 BUFFER REQUIREMENTS
         LA    R0,7(R6,R1)         GET SCREEN DEPENDENT AREA SIZE + 7
         SRL   R0,3
         SLL   R0,3                ROUND UP TO DOUBLEWORD BOUNDARY
         ST    R0,HOLDSIZE         SAVE TOTAL SIZE OF THIS GETMAIN
         MVI   GETMNTRC,71         TRACK GETMAIN IN CASE OF FAILURE
         GETMAIN R,LV=(0)          ACQUIRE THE STORAGE
         ST    R1,HOLDDIR          SAVE HOLD DIRECTORY ADDRESS
         AR    R6,R1               POINT PAST HOLD DIRECTORY
         ST    R6,SCREENBF         SAVE PRIMARY SCREEN BUFFER ADDRESS
         A     R6,SCREENSZ         POINT PAST PRIMARY BUFFER
         ST    R6,SHADOWBF         SAVE SHADOW SCREEN BUFFER ADDRESS
         A     R6,SCREENSZ         POINT PAST SHADOW BUFFER
         ST    R6,SCREENWK         SAVE DATA STREAM AREA ADDRESS
         ST    R6,CBPRM3           SAVE DATA STREAM AREA ADDRESS
         SPACE
************************************************************
*                                                          *
*         PREPARE VARIABLES USED BY REVPANEL               *
*                                                          *
************************************************************
         SPACE
PQPREPVR L     R4,SCREENBF             POINT TO SCREEN TEXT BUFFER
         LA    R4,1(,R4)               POINT TO TOP LINE TEXT AREA
         L     R0,SCRNCOLS
         BCTR  R0,0
         ST    R0,AREAWDTH             SAVE TOP LINE TEXT LENGTH
         L     R15,@ISPLINK            LOAD ISPLINK ENTRY POINT
         CALL  (15),(PQVDEF,PQREVLN1,(R4),PQCHAR,AREAWDTH),            +
               VL,MF=(E,PQPLIST)       VDEFINE REVLN1
         LTR   R4,R15                  SUCCESS?
         BNZ   @PQEXIT1                NO
         SPACE
         MVC   REVS,PQCSR
         TM    STATUS4,$4CSR
         BO    PQSCRLOK
         MVC   REVS,PQPAGE
         TM    STATUS4,$4PAGE
         BO    PQSCRLOK
         MVC   REVS,PQHALF
         TM    STATUS4,$4HALF
         BO    PQSCRLOK
         L     R4,SCROLL
         CVD   R4,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  REVS,DOUBLE
PQSCRLOK MVC   REVSPROF,REVS           REMEMBER REVS PROFILE VALUE
         L     R15,@ISPLINK            LOAD ISPLINK ENTRY POINT
         CALL  (15),(PQVDEF,PQREVS,REVS,PQCHAR,PQFW4),                 +
               VL,MF=(E,PQPLIST)       VDEFINE REVS
         LTR   R4,R15                  SUCCESS?
         BNZ   @PQEXIT2                NO
         SPACE
         MVI   REVALRM,C' '            INITIALIZE REVARLM
         MVC   REVALRM+1(7),REVALRM
         L     R15,@ISPLINK            LOAD ISPLINK ENTRY POINT
         CALL  (15),(PQVDEF,PQREVALM,REVALRM,PQCHAR,PQFW8),            +
               VL,MF=(E,PQPLIST)       VDEFINE REVALRM
         LTR   R4,R15                  SUCCESS?
         BNZ   @PQEXIT2                NO
         SPACE
         MVC   REVCSR,PQZCMD           INITIALIZE REVCSR
         L     R15,@ISPLINK            LOAD ISPLINK ENTRY POINT
         CALL  (15),(PQVDEF,PQREVCSR,REVCSR,PQCHAR,PQFW8),             +
               VL,MF=(E,PQPLIST)       VDEFINE REVALRM
         LTR   R4,R15                  SUCCESS?
         BNZ   @PQEXIT2                NO
         SPACE
         LA    R1,1                    INITIALIZE REVPOS
         ST    R1,REVPOS
         L     R15,@ISPLINK            LOAD ISPLINK ENTRY POINT
         CALL  (15),(PQVDEF,PQREVPOS,REVPOS,PQFIXED,PQFW4),            +
               VL,MF=(E,PQPLIST)       VDEFINE REVPOS
         LTR   R4,R15                  SUCCESS?
         BNZ   @PQEXIT2                NO
         SPACE
         L     R15,@ISPLINK            LOAD ISPLINK ENTRY POINT
         CALL  (15),(PQVDEF,PQREVLVL,REVLVL,PQCHAR,PQFW4),             +
               VL,MF=(E,PQPLIST)       VDEFINE REVLVL
         LTR   R4,R15                  SUCCESS?
         BNZ   @PQEXIT2                NO
         SPACE
         L     R4,SCREENBF             POINT TO SCREEN TEXT BUFFER
         A     R4,SCRNCOLS
         A     R4,SCRNCOLS             POINT TO DYNAMIC AREA START
         L     R15,@ISPLINK            LOAD ISPLINK ENTRY POINT
         CALL  (15),(PQVDEF,PQREVBUF,(R4),PQCHAR,PICSTGSZ),            +
               VL,MF=(E,PQPLIST)       VDEFINE REVBUF
         LTR   R4,R15                  SUCCESS?
         BNZ   @PQEXIT2                NO
         SPACE
         L     R4,SHADOWBF             POINT TO SCREEN SHADOW BUFFER
         A     R4,SCRNCOLS
         A     R4,SCRNCOLS             POINT TO DYNAMIC AREA SHADOW
         L     R15,@ISPLINK            LOAD ISPLINK ENTRY POINT
         CALL  (15),(PQVDEF,PQREVSDW,(R4),PQCHAR,PICSTGSZ),            +
               VL,MF=(E,PQPLIST)       VDEFINE REVSHDW
         LTR   R4,R15                  SUCCESS?
         BNZ   @PQEXIT2                NO
         SPACE
         MVC   REVHELP,=CL8'REVHB00'   INITIALIZE REVHELP
         L     R15,@ISPLINK            LOAD ISPLINK ENTRY POINT
         CALL  (15),(PQVDEF,PQREVHLP,REVHELP,PQCHAR,PQFW8),            +
               VL,MF=(E,PQPLIST)       VDEFINE REVALRM
         LTR   R4,R15                  SUCCESS?
         BNZ   @PQEXIT2                NO
         SPACE
************************************************************
*                                                          *
*         PREPARE CONDITIONS FOR THE DIALOG PROCESS        *
*                                                          *
************************************************************
         SPACE
         L     R15,@ISPLINK            LOAD ISPLINK ENTRY POINT
         CALL  (15),(PQCNTL,PQERRS,PQCANCEL),                          +
               VL,MF=(E,PQPLIST)       CONTROL ERRORS CANCEL
         LTR   R4,R15                  SUCCESS?
         BNZ   @PQEXIT2                NO
         SPACE
         OI    STATUS9,$9ISPF          THINGS ARE LOOKING GOOD
         SR    R4,R4                   INDICATE SUCCESS
         L     R15,@ISPLINK            LOAD ISPLINK ENTRY POINT
         CALL  (15),(PQVDEF,PQZKLUSE,ZKLUSE,PQCHAR,PQFW1),             +
               VL,MF=(E,PQPLIST)       VDEFINE ZKLUSE
         LTR   R15,R15                 SUCCESS?
         BNZ   @PQNODEL                NO, FORGET ABOUT ZKLUSE
         L     R15,@ISPLINK            LOAD ISPLINK ENTRY POINT
         CALL  (15),(PQVGET,PQZKLUSE),                                 +
               VL,MF=(E,PQPLIST)       VGET ZKLUSE
         CLI   ZKLUSE,C'N'             IS KEYLIST ON?
         BNE   @PQNODEL                YES, EXIT, KEEPING ISPLINK
         OI    STATUS7,KLUCHG          REMEMBER ZKLUSE NEEDS CHANGING
         B     @PQNODEL                DO NOT DELETE ISPLINK
         SPACE
************************************************************
*                                                          *
*         ABANDON THE ISPF DIALOG - USE NATIVE REVIEW      *
*                                                          *
************************************************************
         SPACE
@PQEXIT2 L     R15,@ISPLINK            LOAD ISPLINK ENTRY POINT
         CALL  (15),(PQVDEL,PQALLVAR),                                 +
               VL,MF=(E,PQPLIST)       VDELETE ALL VDEFINED VARIABLES
         SPACE
@PQEXIT1 DELETE EPLOC=PQISPLNK
         SR    R0,R0
         ST    R0,@ISPLINK             CLEAR THE ADDRESS OF ISPLINK
         SPACE
************************************************************
*                                                          *
*         FREE WORKING STORAGE AND TERMINATE               *
*                                                          *
************************************************************
         SPACE
@PQNODEL DS    0H
         XC    PICSTGSZ,PICSTGSZ       CLEAR DYNAMIC AREA SIZE
         LA    R0,$PQWKLEN             LOAD LENGTH OF DSA
         LR    R1,R13                  PREPARE FOR FREEMAIN
         L     R13,4(,R13)             POINT TO CALLERS SAVEAREA
         OI    11(R13),X'01'           INVALIDATE FORWARD POINTER
         FREEMAIN RU,LV=(0),A=(1)      FREE DSA
         LR    R15,R4                  SET RETURN CODE
         L     R14,12(,R13)            RESTORE RETURN ADDRESS
         LM    R0,R12,20(R13)          RESTORE OTHER REGISTERS
         BR    R14                     RETURN TO CALLER
         SPACE
         DROP  R11,R13                 REVPQRY, @PQWORK
         TITLE '  R E V P Q R Y   -   S T A T I C   A R E A  '
         DC    0D'0'
PQFW1    DC    F'1'
PQFW4    DC    F'4'
PQFW8    DC    F'8'
PQCSR    DC    CL4'CSR '
PQPAGE   DC    CL4'PAGE'
PQHALF   DC    CL4'HALF'
PQISPLNK DC    CL8'ISPLINK '
PQCNTL   DC    CL8'CONTROL '
PQERRS   DC    CL8'ERRORS  '
PQRETURN DC    CL8'RETURN  '
PQCANCEL DC    CL8'CANCEL  '
PQUERY   DC    CL8'PQUERY  '
PQREVPNL DC    CL8'REVPANEL'
PQREVPN2 DC    CL8'REVPANL2'
AREAWIDN DC    CL8'AREAWDTH'
AREADEPN DC    CL8'AREADPTH'
AREATYPN DC    CL8'AREATYPE'
ROWNUMNM DC    CL8'ROWNMBR '
COLNUMNM DC    CL8'COLNMBR '
PQREVLN1 DC    CL8'REVLN1  '
PQREVBUF DC    CL8'REVBUF  '
PQREVSDW DC    CL8'REVSHDW '
PQREVHLP DC    CL8'REVHELP '
PQVDEF   DC    CL8'VDEFINE '
PQVDEL   DC    CL8'VDELETE '
PQVGET   DC    CL8'VGET    '
PQZKLUSE DC    CL8'ZKLUSE  '
PQCHAR   DC    CL8'CHAR    '
PQFIXED  DC    CL8'FIXED   '
PQALLVAR DC    CL8'*       '
PQREVS   DC    CL8'REVS    '
PQREVALM DC    CL8'REVALRM '
PQREVPOS DC    CL8'REVPOS  '
PQREVCSR DC    CL8'REVCSR  '
PQREVLVL DC    CL8'REVLVL  '
PQZCMD   DC    CL8'ZCMD    '
         SPACE
         LTORG
         SPACE
         DC    0D'0'                   END OF CSECT
         TITLE '  R E V P Q R Y   -   D Y N A M I C   A R E A  '
@PQWORK  DSECT
PQSAVE   DS    18F
AREATYPE DS    CL8
AREAWDTH DS    F
AREADPTH DS    F
ROWNMBR  DS    F
COLNMBR  DS    F
PQPLIST  DS    8F
         DS    0D                      END OF DSECT
$PQWKLEN EQU   *-@PQWORK
         TITLE '  R E V H E A D  '
**********************************************************************
*                                                          *         *
*         INITIALISE SCREEN HEADING LINES                  *  GP@P6  *
*                                                          * JUN2003 *
**********************************************************************
         SPACE
**********************************************************************
*                                                                    *
*      THIS ROUTINE BLANKS OUT THE ENTIRE PRIMARY/TEXT SCREEN        *
*      BUFFER, FILLS THE TOP LINE WITH DASHES UNLESS THE CALLER      *
*      IS REVEDIT OR REVOUTPT, LOADS THE COMMAND AND SCROLL          *
*      PROMPTS AND INPUT AREAS INTO THE SECOND LINE, AND SUPPLIES    *
*      THE APPROPRIATE FIELD ATTRIBUTE CODES FOR THESE TWO LINES.    *
*                                                                    *
*      THE FIRST TWO LINES ARE SET TO WHITE, EXCEPT FOR THE          *
*      INPUT FIELDS WHICH ARE SET TO RED UNDERSCORE.                 *
*                                                                    *
*      THE REST OF THE SCREEN IS SET TO THE ATTRIBUTES AND           *
*      COLOUR CODE PRESENT IN 'HDCOLOR'.                             *
*                                                                    *
**********************************************************************
*                                                                    *
*      REGISTERS ON ENTRY: R9 -> @DATA                               *
*                          R13-> REGISTER SAVE AREA                  *
*                          R14-> RETURN ADDRESS                      *
*                          R15-> REVHEAD                             *
*                                                                    *
*      DURING PROCESSING:  R11-> REVHEAD                             *
*                                                                    *
*      NO STORAGE IS DYNAMICALLY ACQUIRED OR FREED.                  *
*                                                                    *
*      ALL REGISTERS ARE RESTORED ON EXIT.                           *
*                                                                    *
**********************************************************************
         SPACE
REVHEAD  RSECT
REVHEAD  AMODE 31
         B     @HEAD-*(,R15)
         DC    AL1(7),CL7'REVHEAD'
@HEAD    STM   R14,R12,12(R13)
         LR    R11,R15
         USING REVHEAD,R11
         L     R6,SCREENBF         POINT TO THE PRIMARY BUFFER
         LR    R0,R6               POINT TO THE PRIMARY BUFFER
         L     R1,SCREENSZ         GET SIZE OF PRIMARY BUFFER
         LA    R15,C' '            GET PAD CHARACTER
         SLL   R15,24              SET PAD CHARACTER AND ZERO LENGTH
         MVCL  R0,R14              BLANK OUT PRIMARY BUFFER
         LR    R5,R0               POINT TO THE SHADOW BUFFER
         L     R4,SCRNCOLS         GET SCREEN WIDTH
         LR    R1,R4               COPY SCREEN WIDTH
         LA    R15,X'07'           GET PAD CHARACTER (WHITE)
         SLL   R15,24              SET PAD CHARACTER AND ZERO LENGTH
         MVCL  R0,R14              MAKE FIRST LINE WHITE
         LR    R1,R4               COPY SCREEN WIDTH
         LA    R15,X'32'           GET PAD CHARACTER (UNDERSCORE RED)
         SLL   R15,24              SET PAD CHARACTER AND ZERO LENGTH
         MVCL  R0,R14              MAKE SECOND LINE UNDERSCORE RED
         AR    R4,R4               GET BYTE COUNT OF TWO TOP LINES
         L     R1,SCREENSZ         GET SIZE OF WHOLE SCREEN
         SR    R1,R4               GET SIZE OF REST OF SCREEN
         IC    R14,HDCOLOR         SAVE SUPPLIED SHADOW CODE
         NI    HDCOLOR,255-HDNORGE CLEAR "SUPPRESS SCROLL FIELD" FLAG
         ICM   R15,8,HDCOLOR       GET SHADOW CODE FOR REST OF SCREEN
         MVCL  R0,R14              SET COLOUR TILL END OF SHADOW
         STC   R14,HDCOLOR         RESTORE SUPPLIED SHADOW CODE
         MVI   0(R6),C'-'          SUPPLY SEED DASH
         TM    STATUS11,$11EDT+$11OUT CALLED BY REVEDIT OR REVOUTPT?
         BZ    *+8                 NO, SHOW DASHES
         MVI   0(R6),C' '          YES, SUPPLY SEED BLANK
         L     R15,SCRNCOLS        GET SCREEN WIDTH
         BCTR  R15,0               DECREMENT FOR TARGET LENGTH
         BCTR  R15,0               DECREMENT FOR EXECUTE
         EX    R15,HEADDASH        CREATE A LINE OF DASHES OR BLANKS
         MVI   0(R6),FLDOUTHI      HIGH INTENSITY PROTECTED FIELD
         A     R6,SCRNCOLS         POINT TO THE SECOND SCREEN LINE
         A     R5,SCRNCOLS         POINT TO THE SECOND SCREEN LINE
         MVI   0(R6),X'00'         SET NUL
         EX    R15,HEADDASH        CREATE A LINE OF NUL CHARACTERS
         MVC   0(HEADCMDL,R6),HEADCMD
         TM    STATUS10,$10CAP     CAPS ON?
         BO    HEADCAP1            YES
         XC    2(6,R6),SIXBLNKS    NO, SHOW MIXED CASE AS A FLAG
HEADCAP1 MVI   0(R5),X'07'         SHOW PROMPT IN WHITE
         MVC   1(HEADCMDL-1,R5),0(R5)
         LA    R15,HEADRGEL        GET LENGTH OF SCROLL PROMPT
         LNR   R15,R15             GET ITS NEGATIVE
         A     R15,SCRNCOLS        GET COLUMN OFFSET OF PROMPT
         AR    R15,R5              POINT TO SCROLL PROMPT SHADOW
         TM    HDCOLOR,HDNORGE     SHOWING "RANGE" FIELD?
         BO    NOHDRNGE            NO, MORE ROOM FOR COMMAND INPUT
         MVI   0(R15),X'07'        SHOW PROMPT IN WHITE
         MVC   1(HEADRGEO-1,R15),0(R15)
         S     R15,SCREENSZ        POINT BACK TO PRIMARY BUFFER
         MVC   0(HEADRGEL,R15),HEADRGE   LOAD THE SCROLL PROMPT
         TM    STATUS10,$10CAP     CAPS ON?
         BO    HEADCAP2            YES
         XC    2(5,R15),SIXBLNKS   NO, SHOW MIXED CASE AS A FLAG
HEADCAP2 TM    STATUS4,$4CSR       CURSOR SCROLLING ACTIVE?
         BO    HDRNGEOK            YES, DON'T SHOW NUMERICS
         MVC   HEADRGEO(2,R15),HEADPAGE
         TM    STATUS4,$4PAGE      FULL PAGE SCROLLING ACTIVE?
         BO    HDRNGEOK            YES, DON'T SHOW NUMERICS
         MVC   HEADRGEO(2,R15),HEADHALF
         TM    STATUS4,$4HALF      HALF PAGE SCROLLING ACTIVE?
         BO    HDRNGEOK            YES, DON'T SHOW NUMERICS
         L     R0,SCROLL           SCROLL AMOUNT
         CVD   R0,DOUBLE
         OI    DOUBLE+7,X'0F'      DISPLAY SCROLL AMOUNT
         UNPK  HEADRGEO(2,R15),DOUBLE+6(2)
         B     HDRNGEOK
         SPACE
NOHDRNGE NI    HEADRGEL-1(R15),X'0F'      RESET HIGHLIGHTING FOR
         NI    HEADRGEL-2(R15),X'0F'            LAST 2 COLUMNS
         S     R15,SCREENSZ               POINT BACK TO PRIMARY BUFFER
         MVI   HEADRGEL-3(R15),FLDOUTHI   TERMINATE PRIMARY INPUT FIELD
***             NOTE: ONLY FLDOUTHI CAN TRUNCATE RECALL COMMAND LOADING
         MVC   HEADRGEL-2(2,R15),SIXBLNKS BLANK OUTPUT-ONLY NULLS
         SPACE
HDRNGEOK LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER
         SPACE
HEADDASH MVC   1(0,R6),0(R6)       <<< EXECUTED >>>
         SPACE
         DROP  R11                 REVHEAD
         SPACE
SIXBLNKS DC    CL6' '
HEADCMD  DC    C' COMMAND ===>',AL1(FLDINHI)
HEADCMDL EQU   *-HEADCMD
HEADRGE  DC    AL1(FLDOUTHI),C'SCROLL ===>',AL1(FLDINHI)
HEADRGEO EQU   *-HEADRGE           RANGE INPUT FIELD OFFSET
         DC    C'CS',AL1(FLDOUTLO)
HEADRGEL EQU   *-HEADRGE
HEADPAGE DC    C'PG'
HEADHALF DC    C'HF'
         SPACE
         DC    0D'0'               END OF CSECT
         TITLE '  R E V C O M M  '
**********************************************************************
*                                                          *         *
*         TERMINAL WRITE/READ AND COMMON SUBCOMMANDS       *  GP@P6  *
*                                                          * JAN2003 *
**********************************************************************
         SPACE
**********************************************************************
*                                                                    *
*  REVCOMM IS THE MAIN TSO 3270 TERMINAL INPUT/OUTPUT SUBROUTINE.    *
*  IT ALSO PERFORMS PROGRAM FUNCTION KEY RECOGNITION AND SUBCOMMAND  *
*  PARSING, AND PROCESSES SUBCOMMANDS COMMON TO ALL CALLERS.         *
*                                                                    *
*  REVCOMM PERFORMS THE I/O USING ISPF CALLS WHEN REVIEW IS          *
*  RUNNING AS AN ISPF DIALOG, AND WITH THE TPUT AND TGET MACROS      *
*  (SVC 93) WHEN REVIEW IS OPERATING AS A NATIVE TSO COMMAND.        *
*                                                                    *
*  SCREEN REFRESHES DUE TO TSO/VTAM FULLSCREEN PAGE PROTECTION AND   *
*  DUE TO EXPLICIT REQUESTS FROM THE TERMINAL USER ARE HANDLED BY    *
*  ISPF, OR BY THIS ROUTINE.  THE CALLER IS THEREFORE INSULATED      *
*  FROM THESE REQUESTS.                                              *
*                                                                    *
*  THIS CSECT HAS TWO MAIN LOGIC FLOWS WHICH DIVERGE TO @NATIVE      *
*  (FOR TPUT/TGET) AND @DIALOG (FOR ISPF INTERFACING), AFTER WHICH   *
*  THEY CONVERGE AT @COMINPT FOR MORE PROCESSING COMMON TO BOTH.     *
*                                                                    *
**********************************************************************
         SPACE
**********************************************************************
*                                                                    *
* ON ENTRY:           R9 -> @DATA                                    *
*                     R13-> REGISTER SAVE AREA                       *
*                     R14-> RETURN ADDRESS                           *
*                     R15-> REVCOMM                                  *
*                                                                    *
*         - REVCSR CONTAINS THE NAME OF THE FIELD WHERE THE          *
*           CURSOR IS TO BE LOCATED.                                 *
*         - REVPOS CONTAINS POSITION IN REVCSR WHERE THE             *
*           CURSOR IS TO BE LOCATED.                                 *
*         - $4CMD FLAGS A REQUEST TO SKIP TERMINAL I/O AND JUST      *
*           PROCESS THE COMMAND STRING PROVIDED BY THE CALLER.       *
*         - $7BELL FLAGS A REQUEST FOR SOUNDING THE AUDIBLE ALARM.   *
*         - $102LN FLAGS A REQUEST TO NOT WRITE THE SCREEN BODY.     *
*         - $10CDR FLAGS THAT NON-ISPF TPUT(S) HAVE OCCURRED.        *
*         - $10CDL FLAGS AN OUTPUT-ONLY REQUEST.                     *
*         - $10PSP FLAGS A REQUEST TO TPUT A PRIMARY-SIZED PROMPT,   *
*           AND THAT THE CURSOR IS TO BE POSITIONED BY THE 3270      *
*           ORDER STORED IN REVPOS (WHICH MEANS THE CALLER DOES      *
*           NOT HAVE TO REDERIVE THE CURSOR LOCATION FROM THE        *
*           3270 ORDER CODE WHICH IS ALREADY AVAILABLE).             *
*             NOTE 1: THE PRIMARY SCREEN SIZE WILL ONLY BE FORCED    *
*            WHEN THE NORMAL DISPLAY WIDTH IS NOT 80 COLUMNS, AND    *
*            WHEN IT IS 80 THE FULL NUMBER OF LINES WILL BE SHOWN.   *
*             NOTE 2: THE PRIMARY PURPOSE OF $10PSP IS TO FORCE A    *
*            TPUT AND INHIBIT AN ISPF DISPLAY.  THE USE OF           *
*            - $7RESHO  (TO TELL REVCOMM TO RESTORE THE SCREEN SIZE) *
*            - $10CDR   (TO TELL ISPF TO REFRESH THE WHOLE SCREEN)   *
*            - $4REFR   (TO TELL THE ACTIVE OPTION TO DO A REPAINT)  *
*            AFTERWARDS MAY BE ADVISED.                              *
*         - $10ASP FLAGS A REQUEST THE SAME AS $10PSP, BUT THAT      *
*           THERE IS NO REQUIREMENT FOR USING THE PRIMARY SIZE.      *
*         - $14RCL FLAGS A REQUEST TO ALSO RECALL THE LATEST         *
*           PRIMARY INPUT TEXT.                                      *
*         - $17PSW FLAGS A REQUEST TO (1) NOT UPDATE THE FIRST 2     *
*           SCREEN LINES (THAT IS, SHOW THE COMPLEMENT OF THE        *
*           SCREEN THAT IS DISPLAYED WITH $102LN), AND (2) OMIT      *
*           ANY CURSOR CONTROL TO AVOID DISRUPTION OF USER INPUT.    *
*         - $17NWT FLAGS A REQUEST FOR TGET NOWAIT WHICH IS ONLY     *
*           PROCESSED BY THE @NATIVE LOGIC PATH.  IF NO-AID IS       *
*           SET IN 'REPLY' THEN THERE IS NO NEW DATA TO DISPLAY.     *
*                                                                    *
*                                                                    *
* DURING PROCESSING:  R9 -> @DATA                                    *
*                     R10-> REVCOMM+4096                             *
*                     R11-> REVCOMM                                  *
*                     R13-> CALLSAVE                                 *
*                                                                    *
*                                                                    *
* ON EXIT - THE FOLLOWING FLAGS ARE RESET:                           *
*           $4CMD, $7BELL, $7RESHO, $102LN, $10CDR, $10CDL,          *
*           $17PSW, $17NWT.                                          *
*         - $10PSP AND $10ASP ARE UNCHANGED, AND MUST BE RESET       *
*           BY THE CALLER WHEN PROMPTING PANEL ACTIVITY IS COMPLETE. *
*         - CSRLOCN WILL CONTAIN THE INPUT CURSOR LOCATION OR ZERO   *
*           IF THE CURSOR WAS ON A HEADING OR PRIMARY INPUT LINE.    *
*           SO, CSRLOCN WILL BE ZERO IF THE CURSOR IS ON THE FIRST   *
*           FOUR SCREEN LINES IF THE CALLER IS REVIEW2, OR THE       *
*           FIRST TWO SCREEN LINES IF THE CALLER IS REVEDIT WITH     *
*           BOTH 'COLS OFF' AND 'PROF OFF', OR THE FIRST THREE       *
*           SCREEN LINES OTHERWISE.                                  *
*         - REPLY WILL CONTAIN THE AID, CURSOR LOCATION, AND ANY     *
*           FIELDS IN THE FIRST TWO SCREEN LINES MODIFIED BY THE     *
*           USER.  INPUT DATA FROM OTHER MODIFIED FIELDS WILL BE     *
*           TRUNCATED BUT WILL BE MERGED BACK INTO THE PRIMARY/TEXT  *
*           SCREEN BUFFER CONTENTS.                                  *
*         - UPDATES TO THE DEFAULT SCROLL AMOUNT WILL BE COMPLETE.   *
*         - PRIMARY COMMAND INPUT STRING WILL BE PARSED.             *
*           SO, THE CALLER HAS THE OPTION OF PROCESSING THE TGET     *
*           INPUT DATA STREAM IN REPLY, OR OF PROCESSING THE PARSED  *
*           STRINGS IN THE OPL LIST.                                 *
*         - $4REFR WILL BE SET IF GLOBAL OR COMMON SUBCOMMANDS HAVE  *
*           UPDATED THE SCREEN SUCH THAT THE PROCESSING OF INPUT     *
*           DATA FROM THE DYNAMIC AREA SHOULD BE BYPASSED AND/OR     *
*           THE CALLER NEEDS TO COMPLETELY REPAINT THE SCREEN IMAGE. *
*         - REVCSR WILL CONTAIN 'ZCMD' AND REVPOS WILL BE SET TO 1.  *
*         - $13NTRM WILL BE SET IF A CHANGE TO THE TERMINAL SCREEN   *
*           DIMENSIONS WAS DETECTED.                                 *
*         - $14RCL WILL BE RESET, BUT SET AGAIN IF THE PRIMARY AREA  *
*           INPUT COMMAND IS PREFIXED WITH AN AMPERSAND.             *
*                                                                    *
**********************************************************************
         SPACE
REVCOMM  RSECT
REVCOMM  AMODE 31
REVCOMM  RMODE 24
         ENTRY CALCPOSI
         ENTRY FINDSBA
         ENTRY KAPS
         ENTRY TABNUMER
         ENTRY TABNONBL
         ENTRY TABQUOTE
         USING REVCOMM,R15
         B     @COMM
         DC    AL1(7),CL7'REVCOMM'
         DROP  R15                 REVCOMM
@COMM    STM   R14,R12,12(R13)     SAVE REGISTERS
         LR    R11,R15             SET BASE
         LA    R15,1
         LA    R10,4095(R15,R11)
         USING REVCOMM,R11,R10
         LA    R15,CALLSAVE        CHAIN SAVE AREAS
         ST    R13,4(,R15)
         ST    R15,8(,R13)
         LR    R13,R15
         NI    STATUS13,255-$13NTRM
         TM    STATUS9,$9ISPF      RUNNING AS AN ISPF DIALOG?
         BO    NOWTOK1             YES, SKIP NOWAIT CHECK
         CLI   REPLY,NOAID         JUST POLLING FOR INPUT?
         BNE   NOWTOK1             NO, NEED TO WRITE TO THE SCREEN
         TM    STATUS17,$17NWT     YES, STILL REQUESTING NOWAIT?
         BO    READTERM            YES, GO DO IT
NOWTOK1  DS    0H
         SPACE
************************************************************
*                                                          *
*         LOAD PRE-SELECTED MESSAGE                        *
*                                                          *
************************************************************
         SPACE
*  THE CALLER CAN SUPPLY A MESSAGE FOR THE TOP SCREEN LINE IN THE
*  VARIABLE CALLED 'MSG' WHICH CONTAINS A HALFWORD LENGTH INDICATOR
*  IMMEDIATELY FOLLOWED BY THE MESSAGE TEXT.  IF THE LENGTH IS MORE
*  THAN ZERO THEN THIS ROUTINE WILL LOAD THE MESSAGE.
*
*  FIRSTLY REVMSGS IS CALLED TO SEE IF THE FIRST BYTE OF MSG
*  (HIGH-ORDER BYTE OF LENGTH INDICATOR) IS A MESSAGE LOAD FLAG.  IF
*  IT IS THEN REVMSGS PLACES THE REQUESTED MESSAGE TEXT AND ITS LENGTH
*  INTO MSG FOR DISPLAY BY REVCOMM.  FURTHER, REVMSGS SETS $7BELL IF
*  APPROPRIATE FOR THAT MESSAGE.  THIS FEATURE MEANS THAT SOME
*  FREQUENTLY USED MESSAGE TEXTS NEED ONLY EXIST ONCE IN REVIEW.
*
*  THE MESSAGE WILL BE LOADED INTO THE TOP LEFT CORNER AFTER THE
*  ATTRIBUTE BYTE EXCEPT FOR FULLSCREEN HELP WHEN THE MESSAGE WILL BE
*  LOADED INTO THE TOP RIGHT CORNER.  A TRAILING BLANK WILL BE ADDED.
*
*  THE MESSAGE ATTRIBUTES WILL BE SET TO TURQUOISE UNLESS THE
*  TERMINAL'S AUDIBLE ALARM IS TO BE SOUNDED WHEREUPON IT WILL BE
*  YELLOW.  THIS WILL ONLY SHOW WHEN A TPUT IS USED BECAUSE
*  CURRENTLY THE ATTRIBUTES OF REVLN1 CANNOT BE DYNAMICALLY CHANGED.
*
*  THE TEXT OVERLAID BY THE MESSAGE IS RESTORED BEFORE CONTROL IS
*  RETURNED TO THE CALLER.  IT IS ASSUMED THAT THE PRE-MESSAGE TEXT
*  RESIDES IN THE FIELD CALLED 'MSGDSN' AND IS TO BE SHOWN IN WHITE.
         SPACE
@MSGCOMM L     R15,COMMSGAD        POINT TO MESSAGE ROUTINE
         BASR  R14,R15             SELECT ANY PENDING MESSAGE
         TM    STATUS4,$4CMD       HERE FOR TERMINAL WRITE/READ CYCLE?
         BO    NOTPFK              NO, JUST HERE TO PROCESS A COMMAND
         LH    R1,MSG              GET THE MESSAGE LENGTH
         LTR   R1,R1               ANY MESSAGE TO LOAD?
         BNP   @MSGDONE            NO
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BNO   @MSGCRNR            NO, PUT MESSAGE IN TOP LEFT CORNER
         TM    STATUS11,$11FS2     IS REVIEW2 THE CALLER?
         BNO   @MSGCRNR            NO, PUT MESSAGE IN TOP LEFT CORNER
         L     R15,SCREENBF        POINT TO PRIMARY SCREEN BUFFER
         A     R15,SCRNCOLS        POINT TO SECOND LINE
         LA    R0,32               GET MAXIMUM MESSAGE LENGTH
         SR    R15,R0              BACK UP TO MESSAGE AREA
         MVI   0(R15),C' '         BLANK OUT PREVIOUS TEXT
         MVC   1(31,R15),0(R15)
         A     R15,SCREENSZ        POINT TO SHADOW OF MESSAGE AREA
         MVI   0(R15),X'07'        RESET MESSAGE AREA ATTRIBUTES
         MVC   1(31,R15),0(R15)
         S     R15,SCREENSZ        POINT BACK TO MESSAGE AREA
         CLR   R1,R0               MESSAGE TOO LONG?
         BNH   *+6                 NO
         LR    R1,R0               YES, TRUNCATE IT
         AR    R15,R0              POINT TO SECOND LINE
         SR    R15,R1              POINT TO WHERE THIS MESSAGE WILL GO
         B     @MSGLOAD            GO LOAD THE MESSAGE
@MSGMOVE MVC   0(0,R15),MSG+2      <<< EXECUTED >>>
@MSGATTR MVC   1(0,R15),0(R15)     <<< EXECUTED >>>
@MSGCRNR L     R15,SCREENBF        POINT TO THE PRIMARY BUFFER
         L     R14,SHADOWBF        POINT TO THE SHADOW BUFFER
         MVI   0(R14),X'07'        REPAIR ANY DAMAGE FROM DATA OVERRUN
         MVC   1(79,R14),0(R14)    AND ERASE PREVIOUS MESSAGE RESIDUALS
         TM    STATUS11,$11EDT+$11OUT CALLED BY REVEDIT OR REVOUTPT?
         BZ    @MSGDASH            NO
         LA    R15,10(,R15)        YES, POINT TO ITS MESSAGE AREA
         MVI   0(R15),C' '         CLEAR MESSAGE AREA
         MVC   1(49,R15),0(R15)
         B     @MSGLNTH            REJOIN MAIN LOGIC PATH
@MSGDASH LA    R15,1(,R15)         POINT TO MESSAGE AREA
         MVI   0(R15),C'-'         CLEAR ANY RESIDUAL TEXT
         MVC   1(53,R15),0(R15)
         CLI   MSGDSN,C'-'         SHOWING A CENTERED HEADING?
         BNE   @MSGLNTH            NO, LEFT HEADING NOW DASHED OVER
         MVC   0(54,R15),MSGDSN    YES, RESTORE CENTRAL HEADING
@MSGLNTH LA    R0,54               GET MAXIMUM MESSAGE LENGTH
         CLR   R1,R0               MESSAGE TOO LONG?
         BNH   @MSGLOAD            NO
         LR    R1,R0               YES, TRUNCATE IT
@MSGLOAD STH   R1,MSG              SAVE LENGTH ACTUALLY USED
         LA    R14,MSG+2(R1)       POINT PAST MESSAGE TEXT
         MVI   0(R14),C' '         SUPPLY A BLANK AFTER MESSAGE TEXT
         EX    R1,@MSGMOVE         LOAD THE MESSAGE TEXT
         A     R15,SCREENSZ        POINT TO SHADOW OF MESSAGE TEXT
         MVI   0(R15),X'05'        MAKE INFORMATION MESSAGE TURQUOISE
         TM    STATUS7,$7BELL      WARNING MESSAGE?
         BNO   *+8                 NO
         MVI   0(R15),X'06'        YES, MAKE WARNING MESSAGE YELLOW
         BCTR  R1,0                DECREMENT TO GET PERCOLATION LENGTH
         BCTR  R1,0                DECREMENT FOR EXECUTE
         EX    R1,@MSGATTR         PROPAGATE MESSAGE ATTRIBUTES
@MSGDONE MVC   RECALPTR,RECALUSE   NEXT RECALL STARTS FROM LATEST
         TM    STATUS10,$10CAP     CAPS ON?
         BNO   @SCREEN#            NO
         TM    STATUS11,$11EDT     IS REVEDIT THE CALLER?
         BNO   @SCREEN#            NO
         L     R15,SCREENBF        YES, POINT TO THE PRIMARY BUFFER
         L     R14,SCRNCOLS        GET THE SCREEN WIDTH
         EX    R14,ODEUPPER        ENSURE TOP LINE IS IN UPPER CASE
         SPACE
**********************************************************************
*                                                          *         *
*         INSERT NUMERIC SUPERSCRIPT FOR SCREEN NUMBER     *  GP@P6  *
*                                                          * NOV2007 *
**********************************************************************
         SPACE
@SCREEN# EQU   *
         AIF   (&ENV390).RGNOK
         L     R15,CVTPTR(,0)      POINT TO THE CVT
         USING CVT,R15
         CLI   CVTDCB,X'13'        MVS/370?
         BNE   RGNSCROK            NO
         DROP  R15                 CVT
         L     R1,SHADOWBF         POINT TO SHADOW BUFFER
         LA    R0,13
         SR    R1,R0
         CLC   0(12,R1),1(R1)      LAST 12 BYTES ON VIEW THE SAME?
         BNE   RGNSCROK            NO
         LR    R15,R1              YES, POINT TO THIS AREA
         L     R0,SCREENBF         POINT TO THE SCREEN BUFFER
RGNSCRLP BCTR  R1,0                BACK UP ONE
         CR    R1,R0               REACHED START OF SCREEN?
         BL    RGNSCROK            YES, GIVE IT AWAY
         CLI   0(R1),X'0F'         INTERNAL ATTRIBUTE CODE?
         BH    RGNSCRLP            NO, KEEP LOOKING
         CLI   0(R1),X'0B'         PROTECTED FIELD?
         BH    RGNSCRDO            YES, GO SHOW FREE REGION SIZE
         CLI   0(R1),X'0A'         UNPROTECTED FIELD?
         BL    RGNSCRLP            NO, KEEP LOOKING
         B     RGNSCROK            PRESERVE UNPROTECTED FIELD
RGNSCRDO L     R1,PSAAOLD          POINT TO THE ASCB
         USING ASCB,R1
         L     R14,ASCBLDA         POINT TO THE LDA
         USING LDA,R14
         L     R0,VVREGSZ          GET SPECIFIED REGION SIZE
         L     R2,ASCBASXB         POINT TO THE ASXB
         USING ASXB,R2
         L     R3,ASXBFTCB         POINT TO THE RCT TCB
         DROP  R1,R2,R14           ASCB, ASXB, LDA
         USING TCB,R3
RGNDOTCB LA    R4,TCBMSS           POINT TO FIRST SPQE
         USING SPQESECT,R4
RGNEXTSP ICM   R4,15,SPQEAD        POINT TO THE NEXT SPQE
         BZ    RGNEXTCB            END OF TCB'S SPQE CHAIN
         TM    SPQEFLGS,SPSHARE    SUBPOOL SHARED?
         BZ    RGNDODQE            NO, COUNT IT
         TM    SPQEFLGS,SPQEOWN    SUBPOOL OWNED?
         BZ    RGNEXTSP            NO, DON'T COUNT IT MORE THAN ONCE
RGNDODQE LR    R5,R4               PREPARE DQE POINTER
         USING DQESECT,R5
RGNXTDQE ICM   R5,15,DQEPTR        POINT TO NEXT DQE
         BZ    RGNEXTSP            END OF SPQE'S DQE CHAIN
         S     R0,DQELNTH          SUBTRACT USED SIZE FROM TOTAL
         B     RGNXTDQE            GO LOOK AT NEXT DQE
RGNEXTCB ICM   R3,15,TCBTCB        POINT TO NEXT TCB ON CHAIN
         BNZ   RGNDOTCB            GO COUNT NEXT TCB'S STORAGE
         DROP  R3,R4,R5            TCB, SPQESECT, DQESECT
         SRA   R0,10               CONVERT BYTES TO KILOBYTES
         CVD   R0,DOUBLE
         MVC   1(12,R15),COMED5
         ED    1(6,R15),DOUBLE+5
         LTR   R0,R0               NEGATIVE NUMBER?
         BNM   *+8                 NO
         MVI   2(R15),C'-'         YES, BETTER SHOW IT
         MVC   1(1,R15),0(R15)     TIDY UP A BIT
         A     R15,SCREENSZ        POINT TO THE SHADOW BUFFER
         MVI   2(R15),X'01'        USE BLUE FOR LOW-KEY INFO
         CH    R0,CHW64            NEED TO FLAG A WARNING?
         BH    *+8                 NO
         MVI   2(R15),X'06'        YES, USE YELLOW
         CH    R0,CHW32            NEED TO FLAG DANGER?
         BH    *+8                 NO
         MVI   2(R15),X'22'        YES, USE REVERSE RED
         MVC   3(10,R15),2(R15)    SPREAD ALONG THE ITEM
RGNSCROK EQU   *
.RGNOK   ANOP
         TM    STATUS10,$10PSP+$10ASP
         BNZ   @CLRNATV            SKIP SCREEN ID FOR PROMPTING PANEL
         L     R15,SCREENBF        POINT TO PRIMARY SCREEN BUFFER
         A     R15,SCRNCOLS        POINT TO SECOND LINE
         MVC   0(1,R15),ZSCREEN    LOAD ISPF SCREEN NUMBER
         TM    STATUS9,$9ISPF      RUNNING AS AN ISPF DIALOG?
         BNO   REVSCRN#            NO, IGNORE ZSCREEN
         CLI   0(R15),C'A'         ISPF SCREEN NUMBER PRESENT?
         BNL   COMSCRN#            YES
REVSCRN# MVI   0(R15),C' '         NO, CLEAR THE NUMBER
         L     R3,RECURS@          POINT TO THE RECURSION VECTOR
         CLI   RCRSL+16+3(R3),1    CURRENTLY MORE THAN ONE SCREEN?
         BNH   @CLRNATV            NO, DO NOT SHOW A NUMBER
         MVC   0(1,R15),RECURS#+3  YES, COPY SCREEN NUMBER
         TR    0(1,R15),COMHEX     MAKE DISPLAYABLE
COMSCRN# LR    R14,R15             POINT TO SECOND LINE
         A     R14,SCREENSZ        POINT TO SHADOW OF SECOND LINE
         MVI   0(R14),X'41'        MAKE UNOBTRUSIVE (BLUE SUPERSCRIPT)
         CLI   0(R15),C'0'         SHOWING DECIMAL DIGIT?
         BNL   @CLRNATV            YES, ALL DONE
         MVI   0(R14),X'01'        NO, TURN OFF GE FOR LETTER
         NI    0(R15),255-X'40'    MAKE THE LETTER LOWER CASE
         SPACE
**********************************************************************
*                                                          *         *
*         CLEAR RESIDUAL NATIVE VECTOR GRAPHICS IMAGE      *  GP@P6  *
*                                                          * NOV2007 *
**********************************************************************
         SPACE
@CLRNATV TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    @REPRIME            YES, NOT SHOWING A PICTURE
         TM    PICFLAGS,PICNAT     ANY SIGN OF NATIVE VECTOR GRAPHICS?
         BNO   @REPRIME            NO, GOOD
         TM    PICFLAGS,PICOK      PICTURE ON SHOW NOW?
         BO    @REPRIME            YES, GOOD
         NI    PICFLAGS,255-PICNAT NO, RESET FLAG
         OI    STATUS7,$7RESHO     MAKE SURE IT'S ALL GONE
@REPRIME TM    STATUS14,$14RCL     NEED PRIMARY INPUT PERSISTANCE?
         BNO   @RECALL             NO
         NI    STATUS14,255-$14RCL YES, RESET FLAG
         L     R1,RECALUSE         POINT TO CURRENT RECALL STACK ENTRY
         MVC   RECALPTR,4(R1)      FLAG RECALL IS ACTIVE
         L     R14,SCREENBF        POINT TO PRIMARY FIRST SCREEN LINE
         A     R14,SCRNCOLS        POINT TO PRIMARY SECOND SCREEN LINE
         LA    R14,HEADCMDL(,R14)  POINT TO COMMAND AREA
         LA    R15,50              GET ITS LENGTH
         LA    R0,2
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BZ    *+8                 NO, HAVE COMMAND AREA DETAILS
         AR    R14,R0              YES
         SR    R15,R0              ADJUST COMMAND AREA DETAILS
         LA    R0,10(,R1)          POINT TO REPRIMING TEXT
         LH    R1,8(,R1)           GET TEXT LENGTH CODE
         LA    R1,1(,R1)           GET TEXT LENGTH
         MVCL  R14,R0              REPRIME COMMAND AREA
         SPACE
************************************************************
*                                                          *
*         DETERMINE IF ISPF DIALOG OR USING TPUT/TGET      *
*                                                          *
************************************************************
         SPACE
@RECALL  TM    STATUS10,$10PSP+$10ASP   ISSUING PROMPT?
         BNZ   @NATIVE             YES, USE TPUT/TGET
         TM    STATUS9,$9ISPF      RUNNING AS AN ISPF DIALOG?
         BO    @DIALOG             YES, GO PERFORM ISPF CALLS
         TITLE '  R E V C O M M   -   T P U T / T G E T   I / O  '
**********************************************************************
*                                                                    *
*  THE FUNCTION OF @NATIVE IS TO BUILD A 3270 DATA STREAM FROM THE   *
*  TEXT DISPLAY BUFFER AND ITS SHADOW BUFFER, CALL REVCMPBF TO       *
*  OPTIMISE THE DATA STREAM USING 3270 COMPRESSION, WRITE THE        *
*  DATA STREAM USING A TPUT, READ TERMINAL INPUT WITH A TGET,        *
*  PROCESS SCREEN REFRESH REQUESTS, AND SAVE INFORMATION SUCH AS     *
*  CURSOR LOCATION AND OTHER INPUT DATA FOR THE CALLER.              *
*                                                                    *
*  THE TEXT DISPLAY OR PRIMARY BUFFER HAS A BYTE FOR EACH SCREEN     *
*  LOCATION, AND CONTAINS THE TEXT TO BE SHOWN ON THE SCREEN PLUS    *
*  INTERNAL CODES FOR ANY 3270 FIELD ATTRIBUTE BYTES.                *
*                                                                    *
*  EACH BYTE IN THE PRIMARY BUFFER IS SHADOWED BY A BYTE IN THE      *
*  SHADOW BUFFER WHICH CONTAINS INTERNAL CODES REPRESENTING THE      *
*  3270 CHARACTER ATTRIBUTES FOR THAT DISPLAY LOCATION.  IT IS DATA  *
*  FROM THE SHADOW BUFFER THAT CAUSES 3270 EXTENDED DATA STREAM      *
*  ORDERS TO BE GENERATED.  TO SUPPRESS 3270 EDS ORDERS FROM THE     *
*  GENERATED OUTPUT THE CONTENTS OF THE SHADOW BUFFER ARE IGNORED    *
*  BY THIS ROUTINE, EVEN THOUGH THE BUFFER IS ALWAYS LOADED WITH     *
*  ATTRIBUTE CODES.                                                  *
*                                                                    *
*  THE ONLY EDS ORDERS THAT CAN BE GENERATED HERE ARE SET ATTRIBUTE  *
*  (SA) AND GRAPHIC ESCAPE (GE) FOR APL CHARACTERS.  THE INTERNAL    *
*  "USE GE" FLAG BIT IN EACH SHADOW BUFFER BYTE SHOULD NEVER BE SET  *
*  BY SCREEN FORMATTING ROUTINES IF GE IS NOT SUPPORTED BY THE       *
*  TERMINAL.                                                         *
*                                                                    *
*  THE SHADOW BUFFER BYTE CORRESPONDING TO A FIELD ATTRIBUTE BYTE    *
*  IS IGNORED.                                                       *
*                                                                    *
*  A NULL IN THE SHADOW BUFFER RESETS EXTENDED HIGHLIGHTING.         *
*                                                                    *
*  FIELD ATTRIBUTE INTERNAL CODES ARE:                               *
*        0A - UNPROTECTED, LOW INTENSITY                             *
*        0B - UNPROTECTED, HIGH INTENSITY                            *
*        0C - PROTECTED, LOW INTENSITY                               *
*        0D - PROTECTED, HIGH INTENSITY                              *
*        0E - PROTECTED, LOW INTENSITY, AUTOSKIP                     *
*        0F - PROTECTED, HIGH INTENSITY, AUTOSKIP                    *
*                                                                    *
*  CHARACTER ATTRIBUTE INTERNAL CODES ARE OF THE FORM X'YZ'          *
*  WHERE THE VALUES OF Y ARE:                                        *
*         0 - NO EXTENDED HIGHLIGHTING                               *
*         1 - BLINKING                                               *
*         2 - REVERSE VIDEO                                          *
*         3 - UNDERSCORE                                             *
*  AND THE VALUES OF Z ARE:                                          *
*         0 - LEAVE COLOUR UNCHANGED                                 *
*         1 - BLUE                                                   *
*         2 - RED                                                    *
*         3 - PINK                                                   *
*         4 - GREEN                                                  *
*         5 - TURQUOISE                                              *
*         6 - YELLOW                                                 *
*         7 - NEUTRAL (WHITE ON SCREEN, BLACK ON PRINTER)            *
*         8 - BLACK                                                  *
*         9 - DEEP BLUE                                              *
*         A - ORANGE                                                 *
*         B - PURPLE                                                 *
*         C - PALE GREEN                                             *
*         D - PALE TURQUOISE                                         *
*         E - GREY                                                   *
*         F - WHITE                                                  *
*  3 < Y < 8 MEANS THAT THE DATA CODE POINT SHOULD BE DISPLAYED      *
*  FROM THE APL CHARACTER SET, THAT IS, USE GRAPHIC ESCAPE.          *
*  Y > 3 SHOULD NEVER BE LOADED BY THE CALLER UNLESS THE TERMINAL    *
*  SUPPORTS MULTIPLE CHRACTER SETS.                                  *
*  Y > 7 MEANS THAT (Y-8) SPECIFIES THE SYMBOL STORAGE NUMBER,       *
*  AND NOT GE AND HIGHLIGHTING USAGE.                                *
*                                                                    *
*  DURING PROCESSING  R9 -> @DATA                                    *
*                     R10-> REVCOMM+4096                             *
*                     R11-> REVCOMM                                  *
*                     R2 -> SCREENBF DATA (PRIMARY BUFFER)           *
*                     R3 -> SHADOWBF DATA (SHADOW BUFFER)            *
*                     R4 -> SCREENWK DATA (OUTPUT 3270 BUFFER)       *
*                     R5  = SCREEN LOCATIONS STILL TO PROCESS        *
*                                                                    *
**********************************************************************
         SPACE
************************************************************
*                                                          *
*         LOCATE BUFFERS AND CREATE "HEADER"               *
*                                                          *
************************************************************
         SPACE
@NATIVE  L     R4,SCREENWK         PUT HEADER IN CONSTRUCTION AREA
         MVC   0(SCREEN1L,R4),SCREEN1
         AIF   (&ENV390).BELLCHK
         TM    STATUS17,$17PSW     PARTIAL SCREEN WRITE?
         BNO   BELLCHEK            NO
         MVI   2(R4),WCCNULL       YES, SET A NO-OP WCC
         SR    R0,R0               CLEAR FOR INSERT
         ST    R0,CRNT3270         CLEAR CURRENT 3270 STATUS
         L     R1,SCRNCOLS         GET SCREEN WIDTH
         L     R2,SCREENBF         POINT TO PRIMARY BUFFER
         L     R3,SHADOWBF         POINT TO SHADOW BUFFER
         L     R5,SCREENSZ         GET BYTES TO PROCESS
         AR    R1,R1               GET LENGTH OF 2 SCREEN LINES
         AR    R2,R1               SKIP 2 LINES
         AR    R3,R1               SKIP 2 LINES
         SR    R5,R1               SKIP 2 LINES
         LA    R15,CALCPOSI        GET CONVERSION ROUTINE ENTRY POINT
         BASR  R14,R15             GET 3270 CURSOR TARGET ADDRESS
         STCM  R1,3,SCREEN1L-2(R4) START FROM LINE 3
         LA    R4,SCREEN1L(,R4)    POINT PAST DATA STREAM HEADER
         SR    R1,R1               CLEAR FOR INSERT
         B     BLDLOOP             GO UPDATE THE SCREEN BUFFER
.BELLCHK ANOP
BELLCHEK TM    STATUS7,$7BELL      BELL REQUESTED?
         BNO   BELLOKAY            NO
         MVI   2(R4),WCCBELL       YES, SOUND BELL AS REQUESTED
         NI    STATUS7,255-$7BELL  RESET BELL REQUEST
BELLOKAY MVI   CRNTCODE,0          CLEAR RESIDUAL DATA
         SR    R1,R1               CLEAR FOR INSERT
         ST    R1,CRNT3270         CLEAR CURRENT 3270 STATUS
         L     R2,SCREENBF         POINT TO PRIMARY BUFFER
         L     R3,SHADOWBF         POINT TO SHADOW BUFFER
         L     R4,SCREENWK         POINT TO DATA STREAM HEADER
         LA    R4,SCREEN1L(,R4)    POINT PAST DATA STREAM HEADER
         SPACE
*  PRIMARY SCREEN SIZE NOTES
*
*   ORIGINALLY 24 BY 80 = 1920 COULD BE RELIED TO BE THE PRIMARY SCREEN
*   SIZE OF ALL SCREENS.  NOW SOME USERS SET UP THEIR PRIMARY SCREEN TO
*   HAVE MORE THAN 24 LINES.  REVIEW SHOULD SUPPORT THIS (AS LONG AS
*   THE PRIMARY SCREEN WIDTH REMAINS AT 80 COLUMNS).  CALLERS USING
*   $10PSP HAVE BEEN CHANGED TO CLEAR THE WHOLE BUFFER, NOT JUST THE
*   FIRST 1920 BYTES TO THIS END.  HOWEVER, IN PRACTICE THE DISPLAYS
*   CREATED BY $10PSP CALLERS FIT INTO THE FIRST 1920 BYTES AND END
*   WITH BLANKS WHICH CAUSE THE X'3C404040' ORDER TO BE GENERATED BY
*   REVCMPBF SO THAT THE EXTRA LINES ARE CLEARED NICELY.  AS A RESULT,
*   IT IS SAFE TO PROCEED AS IF THE PRIMARY SIZE IS ALWAYS 24 BY 80.
*
*   FURTHER, IF THE ALTERNATE SCREEN SIZE HAS 80 COLUMNS, THEN THERE
*   IS NO REAL REQUIREMENT THAT THE SCREEN SIZE ACTUALLY BE CHANGED.
*   FOR 80-COLUMN DISPLAYS THE WHOLE SCREEN BUFFER IS ALWAYS SHOWN.
*
         SPACE
         LA    R5,1920             GET BYTES TO PROCESS
         CLI   SCRNCOLS+3,80       80-COLUMN SCREEN?
         BNE   *+8                 NO
         L     R5,SCREENSZ         YES, ALWAYS SHOW WHOLE SCREEN
         TM    STATUS10,$10PSP     ISSUING PRIMARY-SIZED PROMPT?
         BO    BLDLOOP             YES, HAVE THE CORRECT SCREEN SIZE
         L     R5,SCREENSZ         GET BYTES TO PROCESS
         TM    STATUS10,$10ASP     ISSUING ALTERNATE-SIZED PROMPT?
         BO    BLDLOOP             YES, HAVE THE CORRECT SCREEN SIZE
         TM    STATUS10,$102LN     DISPLAYING THE WHOLE SCREEN?
         BNO   BLDLOOP             YES, BUFFER SIZE IS SCREENSZ
         L     R5,SCRNCOLS         NO, SHOW TOP LINE FOR MESSAGE STATUS
         AR    R5,R5               SHOW PRIMARY INPUT FOR RECALL STATUS
         SPACE
************************************************************
*                                                          *
*         LOOP THROUGH EACH SCREEN LOCATION                *
*                                                          *
************************************************************
         SPACE
BLDLOOP  CLI   0(R2),X'0A'         FIELD ATTRIBUTE CODE?
         BL    SHADOCHK            NO
         CLI   0(R2),X'0F'         FIELD ATTRIBUTE CODE?
         BH    SHADOCHK            NO
         MVI   0(R4),SF            YES, SUPPLY START FIELD
         LA    R4,1(,R4)           ADJUST POINTER
         IC    R1,0(,R2)           LOAD INTERNAL CODE
         LA    R15,SFCODES-10(R1)  POINT TO ATTRIBUTE BYTE TO LOAD
         MVC   0(1,R4),0(R15)      LOAD IT
         B     NEXTBYTE            THIS BUFFER LOCATION NOW PROCESSED
SHADOCHK TM    STATUS5,$5EDS       USING EXTENDED DATA STREAM ORDERS?
         BNO   COPYBYTE            NO, DO NOT REFERENCE SHADOW BUFFER
         CLC   CRNTCODE,0(R3)      SAME SHADOW CODE AS LAST TIME?
         BE    CHECK4GE            YES, A "CACHE" HIT
         MVC   CRNTCODE,0(R3)      NO, COPY THE NEW VALUE
         MVI   WORKCODE,0          CLEAR RESIDUAL DATA
         TM    0(R3),X'80'         SYMBOL SET SPECIFIED?
         BZ    GOTSYMBL            NO
         UNPK  WORKCODE,CRNTCODE   YES, GET NEW SYMBOL SET SETTING
         NI    WORKCODE,X'07'      FOLD INTO VALID RANGE
GOTSYMBL CLC   CRNTPSYM,WORKCODE   SAME SYMBOL SET?
         BE    PGMSYMOK            YES
         MVC   CRNTPSYM,WORKCODE   NO, UPDATE IT
         MVC   0(1,R4),SACHAR      SET ATTRIBUTE
         MVI   1(R4),SYMS          SYMBOL SET
         MVC   2(1,R4),CRNTPSYM    COPY INTERNAL CODE
         CLI   CRNTPSYM,0          USING DEFAULT SYMBOL SET?
         BE    SYMSETOK            YES, NO NEED TO CONVERT CODE
         OI    2(R4),X'B0'         CONVERT TO LPSID
SYMSETOK LA    R4,3(,R4)           POINT PAST SA ORDER
PGMSYMOK TM    0(R3),X'80'         SYMBOL SET SPECIFIED?
         BO    COLORCHK            YES, NO HIGHLIGHTING SPECIFIED
         UNPK  WORKCODE,CRNTCODE   NO, GET NEW HIGHLIGHT SETTING
         NI    WORKCODE,X'03'      FOLD INTO VALID RANGE
         CLC   CRNTHILT,WORKCODE   HAS IT CHANGED?
         BE    COLORCHK            NO
         MVC   CRNTHILT,WORKCODE   YES, UPDATE IT
         MVC   0(1,R4),SACHAR      SET ATTRIBUTE
         MVI   1(R4),HILT          EXTENDED HIGHLIGHTING
         MVC   2(1,R4),CRNTHILT    COPY INTERNAL CODE
         TR    2(1,R4),TABLHILT    CONVERT TO 3270 ORDER CODE
         LA    R4,3(,R4)           POINT PAST SA ORDER
COLORCHK MVC   WORKCODE,CRNTCODE   GET NEW COLOUR SETTING
         NI    WORKCODE,X'0F'      EXTRACT COLOUR CODE
         BZ    CHECK4GE            LEAVE COLOUR UNCHANGED IF NULL
         CLC   CRNTCOLR,WORKCODE   HAS IT CHANGED?
         BE    CHECK4GE            NO
         MVC   CRNTCOLR,WORKCODE   YES, UPDATE IT
         MVC   0(1,R4),SACHAR      SET ATTRIBUTE
         MVI   1(R4),COLR          EXTENDED COLOUR
         MVC   2(1,R4),CRNTCOLR    COPY INTERNAL CODE
         OI    2(R4),X'F0'         CONVERT TO 3270 COLOUR ORDER CODE
         LA    R4,3(,R4)           POINT PAST SA ORDER
CHECK4GE TM    CRNTCODE,X'40'      GRAPHIC ESCAPE REQUESTED?
         BNO   COPYBYTE            NO.
         TM    CRNTCODE,X'80'      SYMBOL SET SPECIFIED?
         BO    COPYBYTE            YES, SO CAN'T BE GE.
         MVI   0(R4),GE            INSERT THE REQUESTED CODE.
         LA    R4,1(,R4)           POINT PAST IT.
COPYBYTE MVC   0(1,R4),0(R2)       COPY TEXT BYTE
NEXTBYTE LA    R4,1(,R4)           POINT PAST COPIED BYTE
         LA    R3,1(,R3)           POINT TO NEXT SHADOW BUFFER BYTE
         LA    R2,1(,R2)           POINT TO NEXT PRIMARY BUFFER BYTE
         BCT   R5,BLDLOOP          GO PROCESS NEXT SCREEN BYTE
         SPACE
************************************************************
*                                                          *
*         APPEND ORDER TO PLACE CURSOR                     *
*                                                          *
************************************************************
         SPACE
         AIF   (&ENV390).SETCSR
         TM    STATUS17,$17PSW     PARTIAL SCREEN WRITE?
         BO    CSRDONE             YES, DO NOT ADJUST CURSOR
.SETCSR  ANOP
         MVC   0(4,R4),REVPOS      LOAD SBA,HOME,IC PERHAPS
         TM    STATUS10,$10PSP+$10ASP   ISSUING PROMPT?
         BNZ   CSROKAY             YES, REVPOS HAD 3270 ORDERS
         MVC   0(4,R4),PUTCSRHM    LOAD SBA,HOME,IC
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BNO   CSRHMOK             NO
         TM    STATUS11,$11FS2     RUNNING AS FULLSCREEN HELP?
         BNO   CSRHMOK             NO
         MVC   1(2,R4),HELHOME     YES, LOAD CORRECT HOME
CSRHMOK  L     R1,REVPOS           NO, FIND CURSOR TARGET
         BCTR  R1,0                CONVERT POSITION TO OFFSET
         CLC   COMBUF,REVCSR       CURSOR TO BE PLACED IN DYNAMIC AREA?
         BE    BUFRCSR             YES
         TM    STATUS13,$13TSO     IS REVTSO THE CALLER?
         BO    PLACECSR            YES, MOVE CURSOR TO TOP LEFT CORNER
         A     R1,SCRNCOLS         NO, IN PRIMARY COMMAND AREA
         LA    R1,SCRCMDL(,R1)     ALLOW FOR LENGTH OF COMMAND PROMPT
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BNO   PLACECSR            NO
         TM    STATUS11,$11FS2     RUNNING AS FULLSCREEN HELP?
         BNO   PLACECSR            NO
         LA    R1,SCRINPTL-SCRCMDL(,R1)    ADJUST PROMPT LENGTH
         B     PLACECSR
BUFRCSR  A     R1,SCRNCOLS         ALLOW FOR HEADING LINE
         A     R1,SCRNCOLS         ALLOW FOR INPUT LINE
PLACECSR LA    R15,CALCPOSI        GET CONVERSION ROUTINE ENTRY POINT
         BASR  R14,R15             GET 3270 CURSOR TARGET ADDRESS
         STCM  R1,3,1(R4)          PLACE ADDRESS IN DATA STREAM
CSROKAY  LA    R4,4(,R4)           POINT PAST END OF DATA STREAM
CSRDONE  NI    STATUS17,255-$17PSW RESET PARTIAL SCREEN WRITE FLAG
         SPACE
************************************************************
*                                                          *
*         INVOKE REVCMPBF FOR 3270 DATA COMPRESSION        *
*                                                          *
************************************************************
         SPACE
         S     R4,SCREENWK         GET THE DATA STREAM LENGTH
         ST    R4,BUFFSIZE         SAVE IT
         LA    R0,SCRNLNES         GET SCREEN DIMENSIONS ADDRESS
         TM    STATUS10,$10PSP     ISSUING PRIMARY-SIZED PROMPT?
         BNO   MODLSZOK            NO, USE ACTUAL SCREEN SIZE
         CLI   SCRNCOLS+3,80       ON A WIDE SCREEN, ANYWAY?
         BE    MODLSZOK            NO, USE ACTUAL SCREEN SIZE
         LA    R0,MODEL2SZ         POINT TO MODEL-2 SCREEN SIZE
         OI    STATUS7,$7RESHO     FIDDLE WITH VTAM WRITE COMMAND
MODLSZOK ST    R0,CBPRM2           SAVE IN REVCMPBF PLIST
         LA    R1,CBPRM1           POINT TO PARAMETER LIST
         L     R15,=V(REVCMPBF)    GET COMPRESSION ROUTINE ENTRY POINT
         BASR  R14,R15             COMPRESS IN PLACE - BUFFSIZE UPDATED
         TM    STATUS10,$102LN     WRITING WHOLE SCREEN?
         BNO   WRTSCRN             YES, NOT SHOWING A PICTURE
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    WRTSCRN             YES, NOT SHOWING A PICTURE
         TM    PICFLAGS,PICPUT     NEED TO APPEND PICTURE?
         BNO   WRTSCRN             NO
         L     R0,BUFFSIZE         GET COMPRESSED BUFFER LENGTH
         L     R1,CBPRM3           GET BUFFER ADDRESS
         AR    R0,R1               POINT PAST DATA STREAM
         L     R14,PICPUTAD        POINT TO STASHED PICTURE DATA
         LH    R15,PICPUTLN        GET ITS LENGTH
         LR    R1,R15              SET TARGET LENGTH
         MVCL  R0,R14              APPEND PICTURE DATA STREAM
         S     R0,CBPRM3           GET NEW TOTAL DATA STREAM LENGTH
         ST    R0,BUFFSIZE         SAVE IT
         TM    STATUS7,$7RESHO     IS A RESHOW REQUESTED?
         BNO   WRTSCRN             PERFORM NORMAL SCREEN DISPLAY
         SPACE
**********************************************************************
*                                                          *         *
*         DETECT AND HANDLE SCREEN SIZE CHANGE             *  R43.0  *
*                                                          * NOV2009 *
**********************************************************************
         SPACE
SCRNCHK  L     R6,CBPRM3           POINT TO SCREEN WORK AREA
         A     R6,BUFFSIZE         POINT PAST DATA STREAM
         LA    R6,7(,R6)
         SRL   R6,3
         SLL   R6,3                POINT TO A DOUBLEWORD
         XC    0(8,R6),0(R6)       CLEAR RESIDUAL DATA
         MVI   $TERMID,C' '        HANDLE COINCIDENTAL TERMINAL NAME
         GTTERM PRMSZE=(R6),ALTSZE=2(R6),ATTRIB=4(R6),                 +
               TERMID=$TERMID,                                         +
               MF=(E,GETTERML)     GET TERMINAL CHARACTERISTICS
         CL    R15,CFW4            SUCCESS?
         BL    SIZECHK             YES, CHECK FOR CHANGED DIMENSIONS
         BE    WRTSCRN             NO, GTTERM NOT SUPPORTED
SCRNERR  STAX  ,                   NOT A 3270 SO LET PA1/ATTN ESCAPE
         L     R2,RECURS@          POINT TO GLOBAL AREA
         SR    R0,R0               GET ZERO
         ST    R0,RCRSL+4(,R2)     CLEAR STAX OWNER
         B     WRTSCRN             PERFORM A TPUT AND TGET CYCLE
SIZECHK  CLC   GOTTERM(4),0(R6)    SAME SCREEN DIMENSIONS?
         BE    WRTSCRN             YES, STEADY AS SHE GOES
         LR    R15,R6              POINT TO PRIMARY SIZE
         LA    R14,EW              GET CORRESPONDING VTAM ERASE
         CLC   0(2,R15),2(R6)      IS PRIMARY SIZE SMALLER?
         BNL   SIZENEW             NO, USE IT
         TM    3(R6),X'01'         ODD ALTERNATE COLUMN COUNT?
         BO    SIZENEW             YES, STAY WITH PRIMARY SIZE
         LA    R15,2(,R6)          NO, USE LARGER ALTERNATE SIZE
         LA    R14,EWA             GET CORRESPONDING VTAM ERASE
SIZENEW  SR    R0,R0               CLEAR FOR INSERT
         SR    R1,R1               CLEAR FOR INSERT
         IC    R0,0(,R15)          GET NEW LINE COUNT
         IC    R1,1(,R15)          GET NEW COLUMN COUNT
         C     R0,MODEL2SZ         AT LEAST 24 LINES?
         BL    SCRNERR             NO, TOO SMALL
         C     R1,MODEL2SZ+4       AT LEAST 80 COLUMNS?
         BL    SCRNERR             NO, TOO SMALL
         STM   R0,R1,SCRNLNES      SAVE THE NEW SCREEN DIMENSIONS
         STC   R14,ERASECMD+1      UPDATE THE VTAM ERASE COMMAND
         MVC   GOTTERM(8),0(R6)    SET NEW SCREEN PARTICULARS
         LR    R6,R0               GET NEW LINE COUNT
         S     R6,CFW4             DISCOUNT NON-DATA LINES
         STH   R6,PAGESIZE         SAVE LINES PER PAGE
         ST    R6,ISPFPAGE         SAVE VISIBLE DATA LINE COUNT
         TM    STATUS4,$4PAGE      CURSOR OR PAGE SCROLLING?
         BNO   *+8                 NO
         ST    R6,SCROLL           YES, MAKE IT SO
         MH    R6,=Y(DIRSIZ)       GET THE HOLD DIRECTORY SIZE
         MR    R0,R0               GET SCREEN BUFFER SIZE
         ST    R1,SCREENSZ         SAVE IT
         SLA   R1,2
         A     R1,SCREENSZ         GET TOTAL 3270 BUFFER REQUIREMENTS
         LA    R0,7(R6,R1)         GET SCREEN DEPENDENT AREA SIZE + 7
         SRL   R0,3
         SLL   R0,3                ROUND UP TO DOUBLEWORD BOUNDARY
         LR    R5,R0               GET NEW SCREEN AREA SIZE
         LM    R0,R1,HOLDSIZE      GET OLD SCREEN AREA DETAILS
         CR    R5,R0               NEED LARGER AREA?
         BNH   SCRNBUF             NO, HAVE SCREEN BUFFER
         FREEMAIN RU,A=(1),LV=(0)  FREE HOLDDIR AND SCREEN BUFFERS
         LR    R0,R5               GET NEW SCREEN AREA SIZE
         ST    R0,HOLDSIZE         SAVE TOTAL SIZE OF THIS GETMAIN
         MVI   GETMNTRC,72         TRACK GETMAIN IN CASE OF FAILURE
         GETMAIN RU,LV=(0),LOC=(24,64)   ACQUIRE THE STORAGE
         ST    R1,HOLDDIR          SAVE HOLD DIRECTORY ADDRESS
SCRNBUF  AR    R6,R1               POINT PAST HOLD DIRECTORY
         ST    R6,SCREENBF         SAVE PRIMARY SCREEN BUFFER ADDRESS
         A     R6,SCREENSZ         POINT PAST PRIMARY BUFFER
         ST    R6,SHADOWBF         SAVE SHADOW SCREEN BUFFER ADDRESS
         A     R6,SCREENSZ         POINT PAST SHADOW BUFFER
         ST    R6,SCREENWK         SAVE DATA STREAM AREA ADDRESS
         ST    R6,CBPRM3           SAVE DATA STREAM AREA ADDRESS
         OI    STATUS13,$13NTRM    FLAG NEW SCREEN SIZE DETECTED
         OI    STATUS4,$4REFR      WHOLE SCREEN NEEDS TO BE REPAINTED
         XC    OPDL(OPDLL),OPDL    ZERO THE OPDL
         XC    DISPLNCT,DISPLNCT   FLUSH MODAL DISPLAY IF ACTIVE
         MVI   CMDAREA,C' '        BLANK THE INPUT COMMAND AREA
         MVC   CMDAREA+1(L'CMDAREA-1),CMDAREA
         LM    R14,R15,SCRNLNES    ALSO USE NEW SIZE FOR LINE MODE
         STSIZE SIZE=(R15),LINE=(R14)
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    @COMEXIT            YES, RETURN TO CALLER WITH THE NEWS
         NI    PICFLAGS,255-PICOK-PICPUT
         B     @COMEXIT            RETURN TO CALLER WITH THE NEWS
         SPACE
************************************************************
*                                                          *
*         DISPLAY SCREEN IMAGE                             *
*                                                          *
************************************************************
         SPACE
WRTSCRN  L     R0,BUFFSIZE         GET COMPRESSED BUFFER LENGTH
         L     R1,CBPRM3           GET BUFFER ADDRESS
         MVI   1(R1),WRT           SUPPLY STANDARD WRITE COMMAND
         TM    STATUS7,$7RESHO     IS THIS FOR A RESHOW REQUEST?
         BNO   WRTCMDOK            NO
         AIF   (&ENV390).NOREPSW
         CLI   2(R1),WCCNULL       PARTIAL SCREEN WRITE?
         BE    @NATIVE             YES, NEED TO WRITE MORE ON RESHOW
.NOREPSW ANOP
         TM    STATUS10,$102LN     WRITING WHOLE SCREEN?
         BNO   RESHOALL            YES, ONLY NEED NEW VTAM COMMAND
         NI    STATUS10,255-$102LN NO, BUT NEED TO NOW
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    BELLOKAY            YES, RESHOW WHOLE SCREEN
         TM    PICFLAGS,PICOK+PICPUT    GOT THE WHOLE SCREEN HERE?
         BNO   BELLOKAY            NO, SO GO GET IT
         OI    STATUS10,$102LN     YES, PROCEED WITH NEW VTAM COMMAND
RESHOALL MVC   1(1,R1),ERASECMD+1  LOAD IN ERASE/WRITE COMMAND
         NI    STATUS7,255-$7RESHO RESET RESHOW FLAG
         TM    STATUS10,$10PSP     ISSUING PRIMARY-SIZED PROMPT?
         BNO   WRTCMDOK            NO, USE ACTUAL SCREEN SIZE
         CLI   SCRNCOLS+3,80       ALREADY HAVE 80 COLUMNS?
         BNE   WRTPRMRY            NO, NEED TO SWITCH TO 80 COLUMNS
WRTCMDOK TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    WRTSZCHK            YES, NOT SHOWING A PICTURE
         TM    PICFLAGS,PICOK      SHOWING A PICTURE?
         BNO   WRTSZCHK            NO
         TM    STATUS10,$10CDL     ANIMATING A GIF?
         BO    WRTUSNED            YES, USE TPUT NOEDIT
WRTSZCHK TM    SCREENSZ+2,X'F0'    "LARGE" SCREEN SIZE?
         BZ    WRTFLSCR            NO, SHOULD BE NO 14-BIT ADDRESSES
WRTUSNED MVC   CRNT3270(TPUTNEL),TPUTNE
         LA    R15,1(,R1)          POINT PAST ESCAPE
         BCTR  R0,0                DECREMENT LENGTH
         TM    STATUS10,$10CDL     KEYBOARD TO STAY LOCKED?
         BO    WRTNOEDT            YES, DO NOT UNLOCK IT
         TM    1(R15),X'01'        RESET MDT BITS?
         BNO   WRTNOEDT            NO, DO NOT UNLOCK IT
         OI    1(R15),X'02'        UNLOCK KEYBOARD
WRTNOEDT TPUT  (15),(0),NOEDIT,MF=(E,CRNT3270)
         B     READTERM            TPUT ISSUED
WRTPRMRY MVI   1(R1),EW            FORCE PRIMARY SCREEN SIZE
WRTFLSCR ICM   R1,8,=X'03'         LOAD FLAGS FOR FULLSCR
         TPUT  (1),(0),R
         SPACE
************************************************************
*                                                          *
*         READ REPLY FROM THE TERMINAL                     *
*                                                          *
************************************************************
         SPACE
READTERM TM    STATUS10,$10CDL     KEYBOARD LOCKED?
         BO    @COMINPT            YES, DO NOT ISSUE TGET
         NI    STATUS4,255-$4ATTN  CLEAR ATTENTION FLAG
         LH    R1,PAGESIZE         GET THE DATA LINE COUNT
         TM    STATUS11,$11FS2     IS REVIEW2 THE CALLER?
         BO    SPFPAGOK            YES, A RULER LINE EXISTS
         LA    R1,1(,R1)           NO, THERE IS AN EXTRA DATA LINE
         TM    STATUS11,$11EDT     IS REVEDIT THE CALLER?
         BNO   SPFPAGOK            NO, HAVE THE RIGHT DATA LINE COUNT
         TM    STATUS7,EDCOLS      IS LINE 3 FOR REVEDIT INFORMATION?
         BNZ   SPFPAGOK            YES, DISCOUNT LINE FROM CURSOR
         LA    R1,1(,R1)           ONLY TWO SCREEN LINES NOT DATA
SPFPAGOK ST    R1,ISPFPAGE         SAVE THE VISIBLE DATA LINE COUNT
         LA    R1,REPLY2-2560
         MVC   2560(256,R1),REPLY     FOR DEBUG                    ABL
         MVC   TGETREG2(12),TGETREGS  FOR DEBUG                    ABL
         XC    REPLY,REPLY         TO SIMPLIFY DEBUGGING
         L     R1,SCREENWK         POINT TO LARGE TGET BUFFER
         LR    R4,R1               COPY THE ADDRESS
         ICM   R5,7,0(R4)          SAVE WRITE HEADER INCLUDING WCC
         L     R0,SCREENSZ         GET THE SCREEN SIZE
         SLL   R0,17
         SRL   R0,16               GET TGET BUFFER SIZE (UNDER 32768)
         ICM   R1,8,=X'81'         SET FLAGS FOR TGET ASIS,WAIT
         TM    STATUS17,$17NWT     NOWAIT REQUESTED?
         BZ    NOWTOK2             NO
         CLI   DISPTYPE,0          SHOWING A MODAL DISPLAY?
         BNE   NOWTOK2             YES, WAIT FOR MANUAL INPUT
         ICM   R1,8,=X'91'         SET FLAGS FOR TGET ASIS,NOWAIT
         MVI   REPLY,NOAID         PREPARE FOR NO-AID
NOWTOK2  DS    0H
         TGET  (1),(0),R
         STM   R15,R1,TGETREGS
         C     R15,CFW4            ANY DATA INPUT?
         BE    @COMEXIT            NO, GO RETURN TO CALLER
         LA    R0,256
         CLR   R1,R0               MORE THAN 256 BYTES INPUT?
         BNH   *+6                 NO, COPY THE LOT
         LR    R1,R0               YES, JUST COPY FIRST 256 BYTES
         BCTR  R1,0                DECREMENT FOR EXECUTE
         LTR   R1,R1               ANY DATA RECEIVED?
         BM    *+8                 NO, VERY STRANGE
         EX    R1,GETREPLY         YES, COPY IT TO REPLY
         STCM  R5,7,0(R4)          RESTORE WRITER HEADER FOR RESHOW
         LA    R0,X'0F'            RESET "UNINTERESTING" BITS
         NR    R15,R0                 IN TGET RETURN CODE
         CH    R15,=H'12'          WAS REPLY AREA LONG ENOUGH?
         BNE   TGETOK              YES, BRANCH
         TCLEARQ INPUT
TGETOK   DS    0H
         CLI   REPLY,X'88'         QUERY RESPONSE?
         BE    READTERM            YES, SHOULD NOT HAPPEN HERE
*               REPLY AREA CONTENTS:
*               OFFSET 0 LENGTH 1  -  KEY ATTENTION IDENTIFIER (AID)
*               OFFSET 1 LENGTH 2  -  ADDRESS OF CURSOR
*               OFFSET 3 LENGTH 1  -  X'11' IF ANY FIELDS MODIFIED
*               OFFSET 4 LENGTH 2  -  SCREEN ADDRESS OF FIELD
*               OFFSET 6 LENGTH V  -  DATA FROM FIELD
*               DATA EXTENDS TO END OF BUFFER OR NEXT SBA (X'11')
         OI    STATUS7,$7RESHO     PREPARE FOR RESHOW REQUIREMENT
         TM    STATUS4,$4ATTN      ATTENTION INTERRUPT?
         BNO   NOTATTN             NO
         TM    STATUS10,$10PSP+$10ASP
         BZ    WRTSCRN             YES, RESHOW SCREEN IF NOT PROMPTING
         B     @TSOCOMX            SET REFRESH FLAG AND EXIT
NOTATTN  LA    R0,1                GET PA KEY DATA STREAM LENGTH
         C     R0,TGETREGS+8       PA1, PA2, PA3 OR CLEAR?
         BNL   SCRNCHK             YES, RESHOW SCREEN AFTER SIZE CHECK
         TM    STATUS10,$10PSP+$10ASP   ISSUING PROMPT?
         BNZ   READZERO            YES, DO NOT CLEAR PRIMARY INPUT
         TM    STATUS13,$13TSO     IS REVTSO THE CALLER?
         BO    READZERO            YES, DO NOT CLEAR PRIMARY INPUT
         L     R14,SCREENBF        POINT TO TEXT SCREEN BUFFER
         A     R14,SCRNCOLS        POINT TO SECOND SCREEN LINE
         LA    R14,HEADCMDL(,R14)  POINT TO PRIMARY INPUT AREA
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BNO   CMD0LOOP            NO
         TM    STATUS11,$11FS2     IS REVIEW2 THE CALLER?
         BNO   CMD0LOOP            NO, NOT CURRENTLY SHOWING HELP
         LA    R14,2(,R14)         YES, INPUT AREA STARTS 2 BYTES LATER
CMD0LOOP CLI   0(R14),X'10'        NULL OR FIELD ATTRIBUTE BYTE?
         BL    READZERO            YES, END OF AREA TO ZERO
         MVI   0(R14),0            NO, RESET INPUT AREA BYTE
         LA    R14,1(,R14)         POINT TO NEXT BYTE
         B     CMD0LOOP            RESET WHOLE AREA
READZERO STCM  R0,12,CSRLOCN       NO, CLEAR CURSOR BUFFER ADDRESS
         STCM  R0,12,DYN_CSR
         ICM   R0,3,REPLY+1        LOAD ACTUAL CURSOR BUFFER ADDRESS
         TM    REPLY+1,X'40'       12-BIT FORMAT CURSOR ADDRESS?
         BZ    CHKCSRLC            NO, 14-BIT FORMAT WAS SUPPLIED
         SLL   R0,2                SHIFT OUT LOW-ORDER "PARITY" BITS
         ICM   R0,2,REPLY+1        RE-LOAD HIGH-ORDER BYTE
         SLL   R0,18               SHIFT OUT HIGH-ORDER "PARITY" BITS
         SRL   R0,20               CONVERT TO 12-BIT BINARY NUMBER
CHKCSRLC L     R5,SCRNCOLS         GET THE NUMBER OF COLUMNS
         AR    R5,R5               DOUBLE IT
         LR    R1,R0               COPY CURSOR LOCATION
         SR    R1,R5               GET LOCATION IN "DYNAMIC AREA"
         BM    DYNCSROK            CURSOR NOT IN "DYNAMIC AREA"
         LA    R1,1(,R1)           CONVERT OFFSET TO POSITION
         STH   R1,DYN_CSR          SAVE ACTUAL "DYNAMIC AREA" POSITION
DYNCSROK AR    R5,R5               QUADRUPLE THE SCREEN WIDTH
         TM    STATUS11,$11FS2     IS REVIEW2 THE CALLER?
         BO    CHKCSRHD            YES
         S     R5,SCRNCOLS         NO, JUST TRIPLE IT INSTEAD
         TM    STATUS11,$11EDT     IS REVEDIT THE CALLER?
         BNO   CHKCSRHD            NO, MUST BE SHOWING A DIRECTORY
         TM    STATUS7,EDCOLS      IS LINE 3 FOR REVEDIT INFORMATION?
         BNZ   CHKCSRHD            YES
         S     R5,SCRNCOLS         NO, JUST DOUBLE IT INSTEAD
CHKCSRHD CR    R0,R5               CURSOR PAST LINE 2, 3 OR 4?
         BL    GOTCSRLC            NO, LEAVE CURSOR ADDRESS ZERO
         STH   R0,CSRLOCN          YES, REMEMBER LOCATION FOR LATER
GOTCSRLC LA    R1,1
         ST    R1,REVPOS           MOVE THE CURSOR BACK HOME
         MVC   REVCSR,ZCMDNAME
         SPACE
************************************************************
*                                                          *
*         UPDATE PRIMARY BUFFER WITH INPUT TEXT            *
*                                                          *
************************************************************
         SPACE
*  ANY INPUT DATA FROM THE FIRST TWO (2) SCREEN LINES IS LEFT TO BE
*  PROCESSED AS AN INPUT 3270 DATA STREAM IN THE FIELD CALLED "REPLY".
*
*  ANY INPUT DATA FROM FIELDS BELOW THE FIRST TWO (2) SCREEN LINES
*  IS TRUNCATED BY REDUCING THE LENGTH APPARENTLY RETURNED BY THE TGET
*  MACRO, WITH THE TEXT FROM THESE FIELDS BEING COPIED TO THE PRIMARY
*  SCREEN BUFFER TO SIMULATE AN ISPF DYNAMIC AREA WITH INPUT FIELDS.
*
*  THE CHANGE FROM PREVIOUS PROCESSING CAN BE DEMONSTRATED BY THE
*  EXPLICIT SELECTION OF A PDS MEMBER WITH AN 'S', AND ENTERING 'DEBUG'
*  AS THE NEXT PRIMARY SUBCOMMAND.  PREVIOUSLY DEBUG WOULD DISPLAY
*  THE SBA ORDER FOLLOWED BY THE UPPER CASED 'S', WHEREAS CURRENTLY
*  THIS ORDER AND TEXT IS NOT SHOWN.  THE DATA'S HEX SHOWS UP IN BLUE.
         SPACE
         LA    R3,3(,R4)           POINT PAST READ HEADER
         L     R5,TGETREGS+8       GET INPUT DATA STREAM LENGTH
         S     R5,CFW3             GET LENGTH AFTER HEADER
         BNP   INTEXTOK            NO INPUT FIELDS UPDATED
         CLI   0(R3),SBA           ANY INPUT FIELDS UPDATED?
         BNE   INTEXTOK            NO
NEWFIELD SR    R2,R2               CLEAR FOR INSERT
         ICM   R2,3,1(R3)          LOAD FIELD ADDRESS
         TM    1(R3),X'40'         14-BIT ADDRESS?
         BNO   FIELDADR            YES, NO ADDRESS EXTRACTION NEEDED
         SLL   R2,2                NO
         ICM   R2,2,1(R3)          LET'S DO THE 12-BIT ADDRESS SHUFFLE
         SLL   R2,18
         SRL   R2,20
FIELDADR L     R0,SCRNCOLS
         AR    R0,R0
         CR    R2,R0               FIELD STARTS BELOW SECOND LINE?
         BNL   DYNFIELD            YES
         A     R3,CFW3             POINT TO TEXT OF FIELD (PAST SBA)
         S     R5,CFW3             GET INPUT LENGTH AFTER SBA
         BNP   INTEXTOK            FINISHED IF ALL DATA PROCESSED
FIELDCHK CLI   0(R3),SBA           NEW FIELD?
         BE    NEWFIELD            YES
         LA    R3,1(,R3)           POINT TO NEXT INPUT BYTE
         BCT   R5,FIELDCHK         FIND END OF FIELD
         B     INTEXTOK            FOUND END OF FIELD AT END OF DATA
DYNFIELD A     R2,SCREENBF         POINT TO DATA AREA IN SCREEN BUFFER
         TM    STATUS13,$13TSO     RUNNING UNDER REVTSO?
         BO    INTXTLEN            YES, LEAVE APPARENT INPUT LENGTH
         LR    R15,R3              POINT PAST PROCESSED DATA
         SR    R15,R4              GET LENGTH OF PROCESSED DATA
         C     R15,TGETREGS+8      COMPARE WITH NOMINAL PRIMARY LENGTH
         BNL   INTXTLEN            TOO LATE TO TRUNCATE
         ST    R15,TGETREGS+8      TRUNCATE NON-PRIMARY INPUT
INTXTLEN A     R3,CFW3             POINT TO TEXT OF FIELD (PAST SBA)
         S     R5,CFW3             GET INPUT LENGTH AFTER SBA
         BNP   ENDFIELD            END OF FIELD IF ALL DATA PROCESSED
INTEXTLP CLI   0(R3),SBA           NEW FIELD?
         BE    ENDFIELD            YES
         MVC   0(1,R2),0(R3)       NO, COPY BYTE TO SCREEN TEXT BUFFER
         TM    STATUS10,$10CAP     CAPS ON?
         BNO   INCAPSOK            NO, CAPS OFF
         TR    0(1,R2),KAPS        YES, ENSURE NO LOWER CASE
INCAPSOK LA    R2,1(,R2)           POINT TO NEXT BUFFER BYTE
         LA    R3,1(,R3)           POINT TO NEXT INPUT BYTE
         BCT   R5,INTEXTLP         GO MOVE NEXT BYTE IF ANY
ENDFIELD DS    0H
         C     R2,SHADOWBF         GONE BEYOND PRIMARY BUFFER?
         BNL   ANYFIELD            YES, CHECK IF ANY MORE FIELDS
         CLI   0(R2),C' '          DISPLAYABLE CHARACTER?
         BNL   CLRFIELD            YES, CONTINUE CLEARING THE FIELD
         TM    STATUS10,$10PSP+$10ASP   ISSUING PROMPT?
         BNZ   ANYFIELD            YES, NO NEED FOR TRAILING BLANKS
         CLI   0(R2),NULL          BLANK INPUT GUARD?
         BNE   ANYFIELD            NO, CHECK IF ANY MORE FIELDS
CLRFIELD MVI   0(R2),NULL          CLEAR PREVIOUS TEXT FROM FIELD
         TM    STATUS10,$10PSP+$10ASP   ISSUING PROMPT?
         BNZ   CLRDBYTE            YES, DO NOT ADD TRAILING BLANKS
         TM    STATUS14,$14NUL     IS NULLS ON IN REVEDIT?
         BO    CLRDBYTE            YES, DO NOT FILL FIELD WITH BLANKS
         MVI   0(R2),C' '          NO, FILL FIELD WITH BLANKS
CLRDBYTE LA    R2,1(,R2)           POINT TO NEXT BUFFER BYTE
         B     ENDFIELD            CONTINUE TO HANDLE FIELD SHORT DATA
ANYFIELD LTR   R5,R5               ANY MORE DATA TO PROCESS?
         BP    NEWFIELD            YES, MUST BE ANOTHER INPUT FIELD
INTEXTOK DS    0H                  INPUT TEXT PROCESSED
         TM    STATUS10,$10PSP+$10ASP   ISSUING PROMPT?
         BNZ   @COMEXIT            YES, DO NOT INTERPRET PFK HERE
         B     @COMINPT            PERFORM COMMON INPUT PROCESSING
GETREPLY MVC   REPLY(0),0(R4)      <<< EXECUTED >>>
         TITLE '  R E V C O M M   -   I S P F   I / O  '
**********************************************************************
*                                                                    *
*  THE FUNCTION OF @DIALOG IS TO ENSURE THAT 'KEYLIST ON' IS SET,    *
*  DISPLAY THE PANEL, RESTORE 'KEYLIST OFF' IF APPROPRIATE,          *
*  RETRIEVE VARIOUS ISPF VARIABLES, RESYNCHRONISE THE REVIEW SCROLL  *
*  AMOUNT WITH THE ISPF SCROLL AMOUNT, CONSTRUCT AN INPUT 3270 DATA  *
*  STREAM FOR SUBSEQUENT PROCESSING BY COMMAND PARSING BELOW (AND    *
*  OPTIONALLY BY THE CALLER), AND FINALLY RESET THE ISPF PRIMARY     *
*  COMMAND.                                                          *
*                                                                    *
**********************************************************************
         SPACE
**********************************************************************
*                                                          *         *
*         DISPLAY REVPANEL AND PROCESS INPUT               *  GP@HC  *
*                                                          * DEC2001 *
**********************************************************************
         SPACE
@DIALOG  TM    STATUS7,$7BELL      BELL REQUESTED?
         BZ    ALARMSET            NO
         MVC   REVALRM,ALARMYES    YES
         NI    STATUS7,255-$7BELL  RESET BELL REQUEST
ALARMSET EQU   *
         SPACE
         TM    STATUS10,$10CDR     CONTROL DISPLAY REFRESH REQUESTED?
         BZ    @CDROKAY            NO
         LA    R1,@CDRPL           YES, POINT TO PARAMETER LIST
         L     R15,@ISPLINK        LOAD ISPLINK ENTRY POINT
         BASR  R14,R15             CALL ISPLINK
@CDROKAY EQU   *
         SPACE
         TM    STATUS10,$10CDL     CONTROL DISPLAY LOCK REQUESTED?
         BZ    @CDLOKAY            NO
         LA    R1,@CDLPL           YES, POINT TO PARAMETER LIST
         L     R15,@ISPLINK        LOAD ISPLINK ENTRY POINT
         BASR  R14,R15             CALL ISPLINK
@CDLOKAY EQU   *
         SPACE
         TM    STATUS7,KLUCHG      DOES ZKLUSE NEED TO BE CHANGED?
         BNO   ZKLUOK1             NO
         MVI   ZKLUSE,C'Y'         YES
         L     R15,@ISPLINK        LOAD ISPLINK ENTRY POINT
         CALL  (15),(OPVPUT,ZKLUSENM),                                 +
               VL,MF=(E,CALLPARM)  KEYLIST ON
ZKLUOK1  EQU   *
         SPACE
         LA    R14,REVPNL6         POINT TO OPTION 6 PANEL NAME
         TM    STATUS13,$13TSO     IS OPTION 6 ACTIVE?
         BO    PANLNMOK            YES, HAVE PANEL NAME TO USE
         LA    R14,REVPNL          POINT TO USUAL PANEL NAME
         TM    STATUS15,$15PN2     IS PANEL 'REVPANL2' AVAILABLE?
         BNO   PANLNMOK            NO, MAKE DO WITH PANEL 'REVPANEL'
         L     R15,SCRNCOLS        GET SCREEN WIDTH
         AR    R15,R15             DOUBLE IT
         LA    R0,9
         AL    R15,SHADOWBF        POINT TO SHADOW OF LINE 3
         SLR   R15,R0              BACK UP INTO LAST PART OF LINE2
         CLI   0(R15),X'07'        IS IT WHITE FOR THE SCROLL PROMPT?
         BE    PANLNMOK            YES, USE THE USUAL PANEL
         LA    R14,REVPNL2         NO, USE THE ALTERNATE PANEL
PANLNMOK EQU   *
         SPACE
         L     R15,@ISPLINK        LOAD ISPLINK ENTRY POINT
         CALL  (15),(OPDSPLY,(R14)),                                   +
               VL,MF=(E,CALLPARM)  DISPLAY THE PANEL
         SPACE
         TM    STATUS7,KLUCHG      DOES ZKLUSE NEED TO BE CHANGED?
         BNO   ZKLUOK2             NO
         MVI   ZKLUSE,C'N'         YES
         L     R15,@ISPLINK        LOAD ISPLINK ENTRY POINT
         CALL  (15),(OPVPUT,ZKLUSENM),                                 +
               VL,MF=(E,CALLPARM)  KEYLIST OFF
ZKLUOK2  EQU   *
         SPACE
         L     R15,@ISPLINK        LOAD ISPLINK ENTRY POINT
         CALL  (15),(OPVCOPY,VCOPYLST,ZCMDLEN,ZCMDADR),                +
               VL,MF=(E,CALLPARM)  RETRIEVE THE PRIMARY COMMAND
         SPACE
         XC    CSRLOCN,CSRLOCN     CLEAR CURSOR BUFFER ADDRESS
         XC    DYN_CSR,DYN_CSR     CLEAR CURSOR BUFFER ADDRESS
         CLC   REVCSR,COMBUF       CURSOR PLACED IN DYNAMIC AREA?
         BNE   REVCSROK            NO
         L     R1,REVPOS           YES, GET THE POSITION NUMBER
         STH   R1,DYN_CSR          SAVE ACTUAL DYNAMIC AREA POSITION
         TM    STATUS7,EDCOLS      IS LINE 3 FOR REVEDIT INFORMATION?
         BNZ   REVPOSON            YES
         TM    STATUS11,$11EDT     IS REVEDIT THE CALLER?
         BO    REVPOSOK            YES
REVPOSON L     R0,SCRNCOLS         GET THE SCREEN WIDTH
         TM    STATUS11,$11FS2     IS REVIEW2 THE CALLER?
         BNO   *+6                 NO
         AR    R0,R0               YES, DOUBLE IT
         CR    R1,R0               CURSOR PAST THE RULER LINE?
         BNH   REVCSROK            NO
REVPOSOK A     R1,SCRNCOLS         YES
         A     R1,SCRNCOLS         CONVERT TO "SCREEN" POSITION
         BCTR  R1,0                CONVERT TO SCREEN BUFFER LOCATION
         STH   R1,CSRLOCN          SAVE IT FOR LATER
REVCSROK EQU   *
         MVC   REVALRM,=CL8' '     RESET THE ALARM SETTING
         MVC   REVCSR,ZCMDNAME     PREPARE TO MOVE THE CURSOR
         LA    R1,1                        TO POSITION ONE
         ST    R1,REVPOS                   OF ZCMD
         SPACE
         ICM   R0,15,REVLVL        ISPF VISIBLE LINE COUNT KNOWN?
         L     R0,SCRNLNES         LOAD COUNT IF NOT UNDER ISPF
         BZ    VISIVERT            NO, COUNT WHOLE SCREEN
         PACK  DOUBLE,REVLVL
         CVB   R0,DOUBLE           GET CURRENT LAST VISIBLE LINE NUMBER
VISIVERT TM    STATUS7,EDCOLS      IS LINE 3 FOR REVEDIT INFORMATION?
         BNZ   VISLESS1            YES, DISCOUNT LINE FROM CURSOR
         TM    STATUS11,$11EDT     IS REVEDIT THE CALLER?
         BO    VISLNSOK            YES, NO HEADING TO DISCOUNT
VISLESS1 BCTR  R0,0                DISCOUNT COLUMN HEADING LINE
         TM    STATUS11,$11FS2     IS REVIEW2 THE CALLER?
         BNO   VISLNSOK            NO, THERE IS NO RULER LINE
         BCTR  R0,0                YES, DISCOUNT RULER LINE
VISLNSOK LTR   R0,R0               NON-NEGATIVE NUMBER?
         BNM   *+6                 YES
         SR    R0,R0               NO, RESET TO ZERO
         ST    R0,ISPFPAGE         SET CURRENT PAGE SIZE UNDER ISPF
         NI    STATUS4,255-$4CSR   RESET SCROLL TYPE FLAGS
         CLI   REVS,C'0'           NUMERIC DEFAULT SCROLL AMOUNT?
         BL    REVSALFA            NO
         LA    R1,REVS+4           YES, PREPARE FOR 4 DIGITS
         TRT   REVS,TABNUMER       POINT PAST LAST DIGIT
         LA    R14,REVS            POINT TO REVS
         SR    R1,R14              GET NUMBER OF DIGITS IN REVS
         BCTR  R1,0                DECREMENT FOR EXECUTE
         EX    R1,PAKSCROL         GET SCROLL NUMBER IN PACKED DECIMAL
         CVB   R0,DOUBLE           GET SCROLL NUMBER IN BINARY
         ST    R0,SCROLL           SAVE IT
         UNPK  REVS,DOUBLE         SHOW FOUR DIGITS NEXT DISPLAY
         B     REVSKNWN
PAKSCROL PACK  DOUBLE(8),0(0,R14)  <<< EXECUTED >>>
REVSALFA EQU   *
         CLI   REVS,C'H'           HALF PAGE DEFAULT SET?
         BE    REVSHALF            YES
         ST    R0,SCROLL           NO, SCROLL IS VISIBLE LINE COUNT
         OI    STATUS4,$4PAGE      PREPARE FOR PAGE SCROLLING
         CLI   REVS,C'P'           PAGE DEFAULT SET?
         BE    REVSKNWN            YES
         OI    STATUS4,$4CSR       NO, MUST BE CURSOR SCROLLING
         B     REVSKNWN
REVSHALF SRL   R0,1                HALVE VISIBLE LINE COUNT
         ST    R0,SCROLL           SET DEFAULT SCROLLING VALUE
         OI    STATUS4,$4HALF      SET HALF PAGE SCROLLING AS DEFAULT
REVSKNWN EQU   *
         CLC   REVSPROF,REVS       HAS REVS CHANGED?
         BE    REVSOKAY            NO
         OI    STATUS,STPROF       YES, PROFILE REWRITE NOW REQUIRED
         MVC   REVSPROF,REVS       COPY THE CURRENT VALUE OF REVS
REVSOKAY EQU   *
         LA    R1,REPLY2-2560
         MVC   2560(256,R1),REPLY     FOR DEBUG                    ABL
         MVC   TGETREG2(12),TGETREGS  FOR DEBUG                    ABL
         XC    REPLY,REPLY         TO SIMPLIFY DEBUGGING
         SR    R0,R0
         LA    R1,6+8              GET PRETEND INPUT LENGTH
         STM   R15,R1,TGETREGS
         MVI   REPLY,ENTERAID
         MVI   REPLY+3,SBA
         L     R15,ZVERBADR        POINT TO ZVERB
         CLI   0(R15),C' '         VERB LOADED?
         BNH   LOADZCMD            NO
         MVC   REPLY+6(8),0(R15)   YES, COPY IT
         MVI   REPLY+14,C' '       IN CASE ZVERB IS EIGHT NON-BLANKS
         ICM   R15,15,ZSCRLAAD     POINT TO ZSCROLLA
         BZ    SHOWNPNL            NOT PRESENTLY PRESENT
         CLC   REVS,0(R15)         DEFAULT SCROLL OVERRIDE PRESENT?
         BE    SHOWNPNL            NO, DO NOT LOAD OPERAND
         MVC   REPLY+15(4),0(R15)  YES, LOAD SCROLL AMOUNT OVERRIDE
         MVI   TGETREGS+11,6+8+1+4 ADJUST COMMAND LENGTH
         B     SHOWNPNL
         SPACE
LOADZCMD L     R1,ZCMDLEN          GET LENGTH OF PRIMARY INPUT
         LA    R0,6(,R1)           GET LENGTH OF "TGET"
         LA    R15,122             GET MAXIMUM TARGET LENGTH
         CR    R0,R15              TOO BIG?
         BNH   ZCMDLNOK            NO
         LR    R0,R15              YES, REDUCE TO MAXIMUM
ZCMDLNOK ST    R0,TGETREGS+8       SAVE "TGET" LENGTH
         L     R0,ZCMDADR          GET ADDRESS OF PRIMARY INPUT
         LA    R14,REPLY+6         GET ADDRESS OF PRIMARY INPUT BUFFER
         MVCL  R14,R0              COPY PRIMARY INPUT
         SPACE
SHOWNPNL L     R15,@ISPLINK        LOAD ISPLINK ENTRY POINT
         CALL  (15),(OPVREPL,ZCMDNAME,CFW1,=CL8' '),                   +
               VL,MF=(E,CALLPARM)  RESET THE PRIMARY COMMAND
         NI    STATUS4,255-$4ATTN  CLEAR ATTENTION FLAG
         TITLE '  R E V C O M M   -   C O M M O N  '
************************************************************
*                                                          *
*         COMMON TERMINAL INPUT PROCESSING                 *
*                                                          *
************************************************************
         SPACE
**********************************************************************
*                                                                    *
*  THE FUNCTION OF @COMINPT IS TO MAKE VARIOUS FEATURES ORIGINALLY   *
*  RESIDENT IN REVIEW2 AVAILABLE TO ALL CALLERS WITHOUT THE NEED     *
*  FOR SUBSTANTIAL CODE DUPLICATION.  PROCESSING INCLUDES:           *
*       - IDENTIFY AND PROCESS FIELDS IN TGET BUFFER.                *
*         POSSIBLE FIELDS INCLUDE FULLSCREEN HELP COMMAND,           *
*         FULLSCREEN HELP SUBCOMMAND, PRIMARY INPUT AREA,            *
*         AND SCROLL AMOUNT.                                         *
*       - TEXT PROCESSING.                                           *
*         LEFT JUSTIFY, ADD ENTRY TO RECALL STACK IF DIFFERENT.      *
*       - PROGRAM FUNCTION KEY INTERPRETATION.                       *
*         CONSTRUCT FULL COMMAND STRING, REPORT UNRECOGNISED AID.    *
*       - PERFORM UPPERCASING AS APPROPRIATE.                        *
*       - PARSE THE COMMAND AND CREATE OPERAND DESCRIPTOR ELEMENTS.  *
*       - PERFORM GLOBAL OR "COMMON" SUBCOMMANDS SUCH AS:            *
*         - CHANGE OR DISPLAY THE MEANINGS OF PROGRAM FUNCTION KEYS. *
*         - RECALL PREVIOUS COMMAND TEXT.                            *
*         - ISSUE TSO COMMANDS.                                      *
*         - ISSUE A SNAP FOR DIAGNOSTIC DATA.                        *
*         - SWAP TO ANOTHER CONCURRENT SESSION OR LIST SESSIONS.     *
*         - MISCELLANEOUS STATUS DISPLAYS.                           *
*                                                                    *
**********************************************************************
         SPACE
************************************************************
*                                                          *
*         PROCESS FIELDS IN TGET BUFFER                    *
*                                                          *
************************************************************
         SPACE
@COMINPT NI    STATUS7,255-$7RESHO RESET RESHOW REQUEST FLAG
         NI    STATUS10,255-$102LN RESET PARTIAL SCREEN FLAG
         NI    STATUS10,255-$10CDR RESET CONTROL DISPLAY REFRESH FLAG
         ICM   R0,3,MSG            GET THE LENGTH OF THE SHOWN MESSAGE
         BNP   @MSGCLRD            NO MESSAGE TO CLEAR
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BNO   @CLRCRNR            NO, MESSAGE PUT IN TOP LEFT CORNER
         TM    STATUS11,$11FS2     IS REVIEW2 THE CALLER?
         BNO   @CLRCRNR            NO, MESSAGE PUT IN TOP LEFT CORNER
         L     R15,SCREENBF        POINT TO PRIMARY SCREEN BUFFER
         A     R15,SCRNCOLS        POINT TO SECOND LINE
         LA    R0,32               GET MAXIMUM MESSAGE LENGTH
         SR    R15,R0              BACK UP TO MESSAGE AREA
         MVC   0(32,R15),MSGDSN    RESTORE PRE-MESSAGE TEXT FOR FSHELP
         A     R15,SCREENSZ        POINT TO SHADOW OF MESSAGE AREA
         MVI   0(R15),X'07'        RESET MESSAGE AREA ATTRIBUTES
         MVC   1(31,R15),0(R15)    MAKE WHOLE TOP LINE WHITE AGAIN
         B     @CLRDMSG            MESSAGE NOW ERASED FROM BUFFERS
@CLRCRNR L     R15,SCREENBF        POINT TO THE PRIMARY BUFFER
         MVC   1(54,R15),MSGDSN    RESTORE USUAL PRE-MESSAGE TEXT
         A     R15,SCREENSZ        POINT TO SHADOW OF MESSAGE AREA
         MVI   1(R15),X'07'        RESET MESSAGE AREA ATTRIBUTES
         MVC   2(53,R15),1(R15)          TO WHITE
@CLRDMSG XC    MSG(3),MSG          FLAG NO MESSAGE PENDING
@MSGCLRD TM    STATUS10,$10CDL     OUTPUT ONLY REQUEST?
         BO    @COMEXIT            YES, PROCESSING COMPLETE
         L     R15,ISPFPAGE        GET VISIBLE LINE COUNT
         LR    R14,R15             COPY IT
         SRA   R14,1               HALVE IT
         TM    STATUS4,$4HALF      HALF PAGE SCROLLING ACTIVE?
         BNO   *+8                 NO
         ST    R14,SCROLL          YES, UPDATE SCROLL LINE COUNT
         TM    STATUS4,$4PAGE      FULL PAGE SCROLLING ACTIVE?
         BNO   *+8                 NO, AND NOT CURSOR EITHER
         ST    R15,SCROLL          YES, UPDATE SCROLL LINE COUNT
         LA    R15,REPLY
         L     R14,TGETREGS+8      GET LENGTH OF REPLY
         C     R14,CFW3            ANYTHING BEYOND CURSOR ADDRESS?
         BNH   CMDNULL             NO, BRANCH
         CLI   3(R15),SBA          SBA? (SHOULD ALWAYS BE PRESENT)
         BNE   CMDNULL             NO, USER MUST HAVE USED CLEAR KEY
         SR    R0,R0
         ST    R0,CMDPTR           START WITH COMMAND-NOT-PRESENT
         BCTR  R14,0               LENGTH-1 FOR EX
         EX    R14,TRTSBA
         BZ    CMDNULL             NO FIELDS PRESENT
         LR    R0,R1               ADDRESS OF SBA
         SR    R0,R15              LENGTH OF PRECEDING DATA
         SR    R14,R0              LENGTH CODE OF REMAINING DATA
         BNP   PARSED              BRANCH IF NOTHING FOLLOWS SBA
LOOP     ST    R1,FLDPTR
         LA    R15,1(,R1)          POINT PAST SBA
         BCTR  R14,0               REDUCE LENGTH ACCORDINGLY
         EX    R14,TRTSBA          LOOK FOR SECOND SBA
         BZ    LAST                BRANCH IF NONE PRESENT
         LR    R0,R1               POINT TO NEXT SBA
         SR    R0,R15              GET LENGTH OF THIS DATA
         ST    R0,FLDLEN
         STM   R14,R1,SBASAVE
         BAS   R5,FIELD
         LM    R14,R1,SBASAVE
         SR    R14,R0              LENGTH CODE OF REMAINING DATA
         BNZ   LOOP                SOMETHING FOLLOWS SECOND SBA
         B     PARSED              NOTHING FOLLOWS SECOND SBA
TRTSBA   TRT   0(0,R15),FINDSBA    <<< EXECUTED >>>
LAST     LA    R0,1(,R14)          GET LENGTH OF THIS DATA
         ST    R0,FLDLEN
*        STM   R14,R1,SBASAVE
         BAS   R5,FIELD
         B     PARSED
FIELD    L     R15,FLDPTR          POINT TO SBA FOR FIELD
         L     R1,FLDLEN           GET LENGTH CODE
         TM    1(R15),X'40'        12-BIT ADDRESS?
         BZ    FLD14BIT            NO, ALREADY HAVE FIELD 14-BIT ADDR
         ICM   R0,4,2(R15)         YES, GET SECOND ADDRESS BYTE
         SLL   R0,2                SHIFT 2 "PARITY" BITS OUT OF BYTE
         ICM   R0,8,1(R15)         GET FIRST ADDRESS BYTE
         SLL   R0,2                SHIFT 2 "PARITY" BITS OUT OF BYTE
         SRL   R0,4                REALIGN LOW-ORDER BITS
         STCM  R0,12,1(R15)        OVERLAY 12-BIT WITH 14-BIT ADDRESS
FLD14BIT CLC   1(2,R15),MEMLOCN    HEL MEMBER INPUT?
         BE    FLDM                YES
         CLC   1(2,R15),SUBLOCN    HEL SUBCOMAND INPUT?
         BE    FLDS                YES
**       TM    STATUS13,$13TSO     RUNNING UNDER REVTSO?
**       BO    FLD1                YES, CAN'T BE SCROLL AMOUNT
         TM    2(R15),X'01'        IS IT COMMAND OR SCROLL AMOUNT?
         BO    FLD2                SCROLL AMOUNT (ODD BUFFER ADDRESS)
*        B     FLD1                COMMAND (EVEN BUFFER ADDRESS)
FLD1     MVC   RECALPTR,RECALUSE   NEXT RECALL STARTS FROM LATEST
         S     R1,CFW3             GET LENGTH CODE OF DATA
         BMR   R5                  NO DATA PRESENT
         LA    R15,3(,R15)         POINT TO COMMAND
FLD1LP   CLI   0(R15),C' '         LEADING BLANK?
         BNE   FLD1X               NO
         LA    R15,1(,R15)         YES, POINT PAST IT
         S     R1,CFW1             DECREMENT LENGTH CODE
         BNM   FLD1LP              KEEP SKIPPING LEADING BLANKS
         SR    R15,R15             ONLY BLANKS SO NO COMMAND
FLD1X    ST    R15,CMDPTR          SAVE FOR LATER
         ST    R1,CMDLEN           SAVE LENGTH CODE FOR LATER
         BR    R5                  RETURN
FLD2     S     R1,CFW3             GET LENGTH CODE OF DATA
         BMR   R5                  NO DATA PRESENT
         LA    R15,3(,R15)         POINT TO SCROLL AMOUNT
         C     R1,CFW1             IS IT 2 BYTES?
         BNE   FLD2A               NO, BRANCH
         CLC   0(2,R15),COMBLNKS   BLANK?
         BER   R5                  YES, IGNORE
         CLI   0(R15),C' '         LEADING BLANK
         BNE   FLD2B               NO, BRANCH
         MVC   0(1,R15),1(R15)     YES, PROMOTE NON-BLANK
         B     FLD2C               GO ADJUST LENGTH
FLD2B    CLI   1(R15),C' '         TRAILING BLANK?
         BNE   FLD2A               NO, BRANCH
FLD2C    BCTR  R1,0                YES, REDUCE LENGTH BY 1
FLD2A    TR    0(2,R15),KAPS       UPPER CASE THE INPUT
         CLI   0(R15),C'C'         CURSOR SPECIFIED?
         BNE   FLD2H               NO, TEST FOR HALF
         OI    STATUS4,$4CSR       YES, ACTIVATE CURSOR SCROLLING
         LH    R0,PAGESIZE         GET NUMBER OF DETAIL LINES ON PAGE
         B     FLD2CHG             UPDATE SCROLL STATUS
FLD2H    CLI   0(R15),C'H'         HALF SPECIFIED?
         BNE   FLD2P               NO, TEST FOR PAGE
         NI    STATUS4,255-$4PAGE  YES, ENSURE NOT FULL PAGE SCROLLING
         OI    STATUS4,$4HALF      ACTIVATE HALF PAGE SCROLLING
         LH    R0,PAGESIZE         GET NUMBER OF DETAIL LINES ON PAGE
         SRL   R0,1                HALVE IT
         B     FLD2CHG             UPDATE SCROLL STATUS
FLD2P    CLI   0(R15),C'P'         PAGE SPECIFIED?
         BNE   FLD2N               NO, INSIST UPON NUMERIC
         NI    STATUS4,255-$4HALF  YES, ENSURE NOT HALF PAGE SCROLLING
         OI    STATUS4,$4PAGE      ACTIVATE FULL PAGE SCROLLING
         LH    R0,PAGESIZE         GET NUMBER OF DETAIL LINES ON PAGE
         B     FLD2CHG             UPDATE SCROLL STATUS
FLD2N    EX    R1,TRTNUM           IS DATA NUMERIC?
         BZ    FLD2NUM             YES, IT ALL IS
         SR    R1,R15              GET COUNT OF INITIAL NUMERICS
         BNPR  R5                  FIELD DID NOT START WITH A NUMERIC
         BCTR  R1,0                CONVERT TO LENGTH CODE FOR EXECUTE
FLD2NUM  EX    R1,FLD2PACK         YES, PACK IT
         CVB   R0,DOUBLE           CONVERT TO BINARY
         LTR   R0,R0               IS IT ZERO?
         BZR   R5                  YES, IGNORE
*        CH    R0,PAGESIZE         IS IT GREATER THAN SCREEN SIZE?
*        BHR   R5                  YES, IGNORE
         NI    STATUS4,255-$4CSR   ENSURE NOT PAGE-TYPE SCROLLING
FLD2CHG  ST    R0,SCROLL           SAVE NEW DEFAULT SCROLL AMOUNT
         OI    STATUS,STPROF       PROFILE REWRITE NOW REQUIRED
         TM    STATUS11,$11FS2     IS REVIEW2 THE CALLER?
         BNOR  R5                  NO, CALLER USES REVHEAD
         OI    STATUS4,$4REFR      YES, NEED SCROLL AMOUNT REFRESHED
         BR    R5
TRTNUM   TRT   0(0,R15),TABNUMER   <<< EXECUTED >>>
FLD2PACK PACK  DOUBLE(8),0(0,R15)  <<< EXECUTED >>>
FLDHMV   OC    DOUBLE(0),0(R15)    <<< EXECUTED >>>
FLDM     S     R1,CFW3             GET LENGTH CODE OF DATA
         BMR   R5                  NO DATA PRESENT
         LA    R15,3(,R15)         POINT TO MEMBER NAME
FLDMBL   MVC   DOUBLE(8),COMBLNKS
         EX    R1,FLDHMV           MOVE AND UPPER-CASE
         CLC   DOUBLE(8),COMBLNKS  ALL BLANKS?
         BER   R5                  YES, BRANCH
         LA    R15,1(,R15)         NEXT CHARACTER
         S     R1,CFW1             ANY CHARACTERS?
         BMR   R5                  NO, BRANCH
         CLI   DOUBLE,C' '         BLANK FIRST CHARACTER?
         BE    FLDMBL              YES, BRANCH
         MVC   BLDLNAME,DOUBLE     NEW COMMAND NAME
         OI    STATUS6,HELNEWM+HELPARS     NEW MEMBER NAME
         BR    R5                  RETURN
FLDS     S     R1,CFW2             GET LENGTH OF DATA
         BNPR  R5                  NO DATA PRESENT
         LA    R15,3(,R15)         POINT TO SUBCOMMAND
FLDSBL   MVC   DOUBLE(8),COMBLNKS
         BCTR  R1,0                DECREMENT FOR LENGTH CODE
         EX    R1,FLDHMV           MOVE AND UPPER-CASE
         CLC   DOUBLE(8),COMBLNKS  ALL BLANKS?
         BER   R5                  YES, BRANCH
         LA    R15,1(,R15)         NEXT CHARACTER
         CLI   DOUBLE,C' '         BLANK FIRST CHARACTER?
         BE    FLDSBL              YES, BRANCH
         MVC   $SUBCOM,DOUBLE      NEW SUBCOMMAND NAME
         OI    STATUS6,HELNEWS+HELPARS     NEW SUBCOMMAND
         LTR   R1,R1               SINGLE CHARACTER SUBCOMMAND?
         BZ    FLDSLN              YES, RETURN
         LA    R15,$SUBCOM(R1)     POINT TO LAST TYPED-IN CHARACTER
FLDSLL   CLI   0(R15),C' '         TRAILING BLANK?
         BNE   FLDSLN              NO, NOW HAVE SUBCOMMAND LENGTH
         BCTR  R15,0               YES, BACK UP ONE BYTE
         BCT   R1,FLDSLL
FLDSLN   STH   R1,$SUBLEN          NEW SUBCOMMAND LENGTH CODE
         BR    R5                  RETURN
         SPACE
************************************************************
*                                                          *
*         PROCESS TYPED TEXT PART OF COMMAND               *
*                                                          *
************************************************************
         SPACE
CMDNULL  SR    R14,R14
         ST    R14,CMDPTR
         BCTR  R14,0
         ST    R14,CMDLEN
PARSED   L     R15,CMDPTR          POINT TO COMMAND IF ANY
         L     R14,CMDLEN          GET LENGTH CODE
CMDLOAD  MVI   CMDAREA,C' '
         MVC   CMDAREA+1(L'CMDAREA-1),CMDAREA
         TM    STATUS13,$13TSO     IS THE CALLER REVTSO?
         BNO   CMDCHECK            NO
         MVC   MYDSCB,MYDSCB-1     YES, BLANK EXTENDED AREA
CMDCHECK LTR   R15,R15             ANY COMMAND?
         BZ    RECALCHK            NO, GO CHECK FOR RECALLED TEXT
         EX    R14,CMDMOVE
         LA    R0,60
CMDJUST  CLI   CMDAREA,C' '        IS COMMAND LEFT JUSTIFIED?
         BNE   CMDJUSTX            YES, BRANCH
         MVC   CMDAREA(62),CMDAREA+1    SHIFT IT LEFT
         MVI   CMDAREA+62,C' '     APPEND BLANK
         BCTR  R14,0               REDUCE LENGTH
         ST    R14,CMDLEN          SAVE UPDATED LENGTH CODE
         BCT   R0,CMDJUST          REPEAT
         CLI   CMDAREA,C' '        ANYTHING TYPED IN?
         BNE   CMDJUSTX            YES, PROCESS IT
RECALCHK CLC   RECALPTR,RECALUSE   NO, WAS A COMMAND RECALLED?
         BE    RECALNOP            NO, NO ACTION
         L     R15,RECALPTR        YES
         L     R15,0(,R15)         POINT TO ELEMENT THAT WAS RECALLED
         LH    R14,8(,R15)         GET TEXT LENGTH CODE
         LA    R15,10(,R15)        POINT TO TEXT
         EX    R14,CMDMOVE         USE UNCHANGED RECALLED TEXT
         ST    R14,CMDLEN          SAVE UPDATED LENGTH CODE
         CLI   REPLY,ENTERAID      ENTER?
         BNE   RECALNOP            NO, MIGHT BE RECALL PFK
CMDJUSTX DS    0H
         LA    R1,CMDAREA          POINT TO COMMAND JUST ENTERED    ABL
         L     R15,RECALUSE        POINT TO CURRENT ELEMENT
         CH    R14,8(,R15)         IS THIS COMMAND LENGTH IDENTICAL?
         BNE   RECALADD            NO, ADD ANOTHER RECALL STACK ENTRY
         EX    R14,RECALTST        YES, IS THIS COMMAND IDENTICAL?
         BE    RECALNOP            YES, SKIP ENTRY DUPLICATION
RECALADD CLI   CMDAREA,X'1C'       DUP CHARACTER?
         BE    RECALNOP            YES, DON'T REMEMBER IT
         CLI   CMDAREA,C'='        INTER-OPTION JUMP?
         BE    RECALNOP            YES, DON'T REMEMBER IT
*        CLC   CMDAREA(8),=CL8'RECALL' RECALL CMD?  (MIGHT BE OPERAND)
*        BE    RECALNOP            YES, DON'T REMEMBER IT    (OF PFK)
         CLI   REPLY,ENTERAID      ENTER?
         BE    RECALNOK            YES, SHORT LENGTHS ACCEPTABLE
         C     R14,CFW4            PFK DATA AT LEAST 5 CHARS LONG?
         BL    RECALNOP            NO, DON'T REMEMBER SUCH SHORT STUFF
RECALNOK LA    R0,RECALDLN-1       GET MAXIMUM RECALL DATA LENGTH CODE
         L     R15,0(,R15)         POINT TO NEXT ONE TO USE
         XC    10(RECALDLN,R15),10(R15)  SIMPLIFY DEBUGGING
         CR    R14,R0              IS COMMAND TOO LONG?
         BNH   RECALDEX            NO, BUFFER CAN HOLD ALL OF IT
         LR    R14,R0              YES, MUST HAVE HIT CLEAR FIRST
RECALDEX EX    R14,RECALOAD        LOAD COMMAND STACK ENTRY
         STH   R14,8(,R15)         SAVE LENGTH CODE
         ST    R15,RECALUSE        NEW CURRENT ELEMENT
         L     R14,CMDLEN          RESTORE ACTUAL LENGTH CODE
RECALNOP DS    0H
         CLI   REPLY,ENTERAID      ENTER?
         BE    NOTPFK              YES
         SPACE
************************************************************
*                                                          *
*         INTERPRET PROGRAM FUNCTION KEY                   *
*                                                          *
************************************************************
         SPACE
PFKPROC  LA    R1,PFKTAB           POINT TO THE PFK TABLE
PFKSRCH  CLI   0(R1),0             END OF PFK TABLE?
         BE    PFKBAD              YES, NOT IN TABLE
         CLC   0(1,R1),REPLY       DOES PFK CODE MATCH?
         BE    PFKMOVE             YES, BRANCH
         LA    R1,PFKTABL(,R1)     NO, POINT TO NEXT ENTRY IN TABLE
         B     PFKSRCH             KEEP SEARCHING THE TABLE
PFKBAD   L     R1,SCREENBF         POINT TO THE PRIMARY BUFFER
         MVI   1(R1),C'-'          CLEAR RESIDUAL TEXT
         TM    STATUS11,$11EDT+$11OUT CALLED BY REVEDIT OR REVOUTPT?
         BZ    *+8                 NO
         MVI   1(R1),C' '          CLEAR RESIDUAL TEXT
         MVC   2(48,R1),1(R1)
         L     R15,COMMSGAD        POINT TO MESSAGE ROUTINE
         USING REVMSGS,R15
         MVC   1(MSG21L,R1),MSG21+2 LOAD ERROR MESSAGE TEXT
         DROP  R15                 REVMSGS
         UNPK  22(3,R1),REPLY(2)
         TR    22(2,R1),COMHEX-240 SHOW THE UNRECOGNISED AID
         MVI   24(R1),C' '
         L     R1,SHADOWBF         POINT TO THE SHADOW BUFFER
         MVI   1(R1),X'07'         RESET RESIDUAL ATTRIBUTES
         MVC   2(48,R1),1(R1)
         MVI   1(R1),X'22'         RED REVERSE VIDEO FOR ERROR MESSAGE
         MVC   2(22,R1),1(R1)
         OI    STATUS7,$7BELL      REQUEST AUDIBLE ALARM
         B     @MSGDONE
PFKMOVE  CLI   1(R1),C' '          IS PFK DEFINITION EMPTY?
         BE    NOTPFK              YES, BRANCH
         MVC   CMDAREA+PFKTABL(63),CMDAREA
         MVC   CMDAREA(PFKTABL-1),1(R1)  MOVE IN THE TEXT           ABL
         LA    R14,PFKTABL(,R14)   COMMAND LENGTH JUST GOT LONGER
         ST    R14,CMDLEN          SAVE UPDATED LENGTH CODE
         SPACE
**********************************************************************
*                                                          *         *
*         PERFORM UPPERCASING                              *  GP@P6  *
*                                                          *  10/87  *
**********************************************************************
         SPACE
NOTPFK   XC    OPDL(OPDLL),OPDL    ZERO THE OPDL
         TM    CMDAREA,X'FF'-C' '  ANY COMMAND REQUESTED AT ALL?
         BNZ   CMDSCAN             YES, GO SCAN AND PARSE
         LH    R1,DISPLNCT
         LTR   R1,R1               PART-WAY THROUGH MODAL DISPLAY?
         BNZ   PFKRESUM            YES, GO RESUME IT
         STC   R1,DISPTYPE         NO, CLEAR MODAL DISPLAY TYPE
         ICM   R1,3,CSRLOCN        GET CURSOR LOCATION
         BZ    @COMEXIT            NOT AUTO SELECTION SO RETURN
         A     R1,SCREENBF         POINT TO BYTE UNDER CURSOR
         BCTR  R1,0                POINT TO PRECEDING BYTE
         CLC   0(3,R1),AUTODOT1    AUTO SELECTION AT DOT?
         BL    @COMEXIT            NO, SO RETURN TO CALLER
         CLC   0(3,R1),AUTODOT2    AUTO SELECTION AT DOT?
         BH    @COMEXIT            NO, SO RETURN TO CALLER
         MVI   1(R1),C'S'          YES, SUPPLY DEFAULT SELECTION CODE
         TM    STATUS15,$15COPY    COPY MEMBER SELECTION LIST?
         BNO   @COMEXIT            NO, RETURN TO CALLER
         MVI   1(R1),C'B'          YES, BETTER MAKE IT BROWSE INSTEAD
         B     @COMEXIT            RETURN TO CALLER
PFKRESUM SR    R15,R15             CLEAR FOR INSERT
         ICM   R15,1,DISPTYPE      GET DISPLAY TYPE INDEX
         BZ    @COMEXIT            JUST IN CASE
         BCTR  R15,0               MAKE RELATIVE TO ZERO
         SLA   R15,2               MULTIPLY BY FOUR
         L     R15,MODALTBL(R15)   GET DISPLAY ROUTINE ADDRESS
         BR    R15                 RESUME IT
RECALTST CLC   10(0,R15),0(R1)     <<< EXECUTED >>>
RECALOAD MVC   10(0,R15),0(R1)     <<< EXECUTED >>>
CMDMOVE  MVC   CMDAREA(0),0(R15)   <<< EXECUTED >>>
CMDLJUST MVC   CMDAREA(0),CMDAREA+1 << EXECUTED >>>
         SPACE
************************************************************
*                                                          *
*         PARSE THE COMMAND AND OPERANDS (HANDLE RECALL)   *
*                                                          *
************************************************************
         SPACE
CMDSCAN  LA    R15,CMDAREA         POINT TO START OF COMMAND TEXT
         L     R5,CMDLEN           LENGTH CODE OF STATEMENT
         SR    R1,R1               ENSURE NON-ADDRESS BITS ARE ZERO
         LA    R6,OPDL             POINT TO OPERAND DESCRIPTOR LIST
         LA    R0,OPDLL/8-1        NUMBER OF ENTRIES IN O.D.L.
*                                  MINUS 1 (LAST ODE WILL REMAIN ZERO)
PARLOOP  LA    R14,TABNONBL        SET POINTER TO TRANSLATE TABLE
         EX    R5,PARSETRT         FIND A NONBLANK
         BZ    PARDONE             BRANCH IF ALL BLANKS
         LR    R14,R1              GET ADDRESS OF STRING
         SR    R14,R15             GET LENGTH OF PRECEDING BLANKS
         SR    R5,R14              GET LENGTH OF REMAINING TEXT
         LR    R15,R1              GET ADDRESS OF NONBLANK
         BZ    PARLAST             SEARCH FOR ONE NON-BLANK
         LA    R14,OPD0            POINT TO FIRST DESCRIPTOR
         CR    R6,R14              PARSING COMMAND NAME?
         BE    PARCMD              YES, QUOTING STUFF DOES NOT APPLY
         L     R14,0(,R14)         POINT TO THE COMMAND
         CLC   =C'MEM',0(R14)      POSSIBLE MEMBER NAME MASK?
         BE    PARQTCHK            YES, ALLOW QUOTED OPERAND
         CLC   =C'PAT',0(R14)      POSSIBLE MEMBER NAME MASK?
         BE    PARQTCHK            YES, ALLOW QUOTED OPERAND
         TM    STATUS11,$11FS2+$11EDT
         BZ    PARCMD              QUOTING ONLY APPLIES FOR FILE DATA
PARQTCHK MVC   DOUBLE(2),0(R15)    COPY FIRST TWO BYTES OF OPERAND
         OI    DOUBLE+1,X'02'      CONVERT POSSIBLE X'7D' TO X'7F'
         CLI   DOUBLE+1,C'"'       POSSIBLE STRING FOLLOWING TYPE?
         BNE   PAROPER             NO, GO TEST FOR UNTYPED STRING
         OI    DOUBLE,C' '         FOLD POSSIBLE LETTER TO UPPER CASE
         CLI   DOUBLE,C'C'         CHARACTER STRING?
         BE    PARSTROP            YES
         CLI   DOUBLE,C'P'         PICTURE STRING?
         BE    PARSTROP            YES
         CLI   DOUBLE,C'T'         TEXT STRING?
         BE    PARSTROP            YES
         CLI   DOUBLE,C'X'         HEXADECIMAL STRING?
         BNE   PAROPER             NO, GO TEST FOR UNTYPED STRING
PARSTROP MVC   7(1,R6),DOUBLE      REMEMBER STRING TYPE
         OI    0(R15),C' '         FOR BAD OPERAND CURSOR PLACEMENT
         LA    R15,1(,R15)         POINT TO QUOTE AFTER TYPE
         BCTR  R5,0                DECREMENT REMAINING LENGTH CODE
PAROPER  LA    R14,TABQUOTE        SET POINTER TO TRANSLATE TABLE
         CLI   0(R15),QUOTE        DOES OPERAND BEGIN WITH A QUOTE?
         BE    PARQUOTE            YES, BRANCH
         LA    R14,TABDBLQO        SET POINTER TO TRANSLATE TABLE
         CLI   0(R15),C'"'         DOES OPERAND BEGIN WITH QUOTES?
         BE    PARQUOTE            YES, BRANCH
PARCMD   LA    R14,TABBLANK        SET POINTER TO TRANSLATE TABLE
         EX    R5,PARSETRT         FIND A BLANK
         BZ    PARLAST             BRANCH IF NOT FOUND
         LR    R14,R1              GET ADDRESS OF BLANK
         SR    R14,R15             GET LENGTH OF FIELD
         OI    6(R6),PRESENT       OPERAND PRESENT
         ST    R15,0(,R6)          ADDRESS OF OPERAND
         STH   R14,4(,R6)          LENGTH OF OPERAND
         SR    R5,R14              GET LENGTH CODE OF REMAINING TEXT
         BZ    PARDONE             BRANCH IF ONE TRAILING BLANK
         LR    R15,R1              POINT TO BLANK
PARNEXT  LA    R6,8(,R6)           POINT TO NEXT O.D.E.
         BCT   R0,PARLOOP          GO PROCESS NEXT OPERAND
         B     PARDONE             MAX OPERANDS PROCESSED
PARSETRT TRT   0(0,R15),0(R14)     <<< EXECUTED >>>
PARQUOTE LA    R15,1(,R15)         POINT PAST QUOTE
         BCTR  R5,0                REDUCE LENGTH CODE BY 1
         LTR   R5,R5               TEST RESULT
         BM    PARDONE             IGNORE QUOTE IN LAST COLUMN
         EX    R5,PARSETRT         FIND THE NEXT QUOTE
         BZ    PARMISSQ            NOT FOUND, USE ALL REMAINING TEXT
         LR    R14,R1              GET ADDRESS OF QUOTE
         SR    R14,R15             GET LENGTH OF FIELD
         OI    6(R6),PRESENT+QUOTED OPERAND PRESENT AND IN QUOTES
         ST    R15,0(,R6)          ADDRESS OF OPERAND
         STH   R14,4(,R6)          LENGTH OF OPERAND
         SR    R5,R14              GET LENGTH CODE OF REMAINING TEXT
         BZ    PARLASTQ            BRANCH IF QUOTE WAS FINAL CHAR
         LA    R15,1(,R1)          POINT TO CHAR AFTER ENDING QUOTE
         BCTR  R5,0                REDUCE LENGTH CODE BY 1
         CLI   7(R6),0             LEADING STRING TYPE?
         BNE   PARNEXT             YES, SET UP FOR NEXT OPERAND
         MVC   7(1,R6),0(R15)      NO, COPY CHARACTER AFTER QUOTE
         OI    7(R6),C' '          FOLD POSSIBLE LETTER TO UPPER CASE
         CLI   7(R6),C'C'          CHARACTER STRING?
         BE    PARTYPE             YES
         CLI   7(R6),C'P'          PICTURE STRING?
         BE    PARTYPE             YES
         CLI   7(R6),C'T'          TEXT STRING?
         BE    PARTYPE             YES
         CLI   7(R6),C'X'          HEXADECIMAL STRING?
         BE    PARTYPE             YES
         MVI   7(R6),C'T'          NO, UNTYPED STRING IS TEXT
         B     PARTYPED            BUT NO ACTUAL 'T' TO SKIP
PARTYPE  LA    R15,1(,R1)          POINT TO CHAR AFTER TRAILING TYPE
         BCTR  R5,0                REDUCE LENGTH CODE BY 1
PARTYPED LTR   R5,R5               CHECK WHAT'S LEFT
         BNM   PARNEXT             MORE TO PARSE
         B     PARDONE             NO MORE TO PARSE
PARLASTQ CLI   7(R6),C' '          STRING TYPE SET?
         BH    PARDONE             YES
         MVI   7(R6),C'T'          NO, UNTYPED STRING IS TEXT
         B     PARDONE
PARMISSQ OI    6(R6),QUOTED        OPERAND IN QUOTES
         CLI   7(R6),C' '          STRING TYPE SET?
         BH    PARLAST             YES
         MVI   7(R6),C'T'          NO, UNTYPED STRING IS TEXT
PARLAST  LA    R14,1(,R5)          GET LENGTH
         OI    6(R6),PRESENT       OPERAND PRESENT
         ST    R15,0(,R6)          ADDRESS OF OPERAND
         STH   R14,4(,R6)          LENGTH OF OPERAND
PARDONE  DS    0H                  DO COMMON O.D.L. POST-PROCESSING
         L     R15,OPD0            POINT TO SUBCOMMAND NAME
         LH    R14,OPD0+4          GET SUBCOMMAND NAME LENGTH
         CLI   0(R15),C'/'         POSSIBLE UNIX PATH NAME?
         BE    ODEDONE             YES, LEAVE CASE AS IS
         CLI   0(R15),C'~'         POSSIBLE UNIX PATH NAME?
         BE    ODEDONE             YES, LEAVE CASE AS IS
         EX    R14,ODEUPPER        ENSURE SUBCOMMAND NAME IN UPPER CASE
         CLC   0(2,R15),@TS        TSO OR TSS COMMAND?
         BE    ODEDONE             YES, DO NOT FIDDLE WITH CASE
         LA    R0,OPDLL/8-1        NUMBER OF ENTRIES IN O.D.L.
*                                  MINUS 1 (LAST ODE WILL REMAIN ZERO)
         LA    R6,OPDL             POINT TO OPERAND DESCRIPTOR LIST
ODELOOP  TM    6(R6),PRESENT       OPERAND PRESENT?
         BNO   ODEDONE             NO, END OF OPERANDS
         L     R15,0(,R6)          POINT TO OPERAND
         LH    R14,4(,R6)          GET OPERAND LENGTH
         BCTR  R14,0               DECREMENT FOR EXECUTE
         LTR   R14,R14             IS OPERAND A NULL STRING?
         BM    ODENEXT             YES, NOT NUMERIC AND NO LOWER CASE
         TM    6(R6),QUOTED        QUOTED OPERAND?
         BO    ODENTNUM            YES, NOT NUMERIC
         EX    R14,TRTNUM          NUMERIC OPERAND?
         BNZ   ODENTNUM            NO, NOT NUMERIC
         OI    6(R6),NUMERIC       YES, OPERAND IS A DECIMAL NUMBER
         B     ODENEXT             ODE COMMON POST-PROCESSING COMPLETE
ODEUPPER TR    0(0,R15),KAPS       <<< EXECUTED >>>
ODENTNUM CLI   7(R6),C'C'          CHARACTER STRING?
         BE    ODENEXT             YES, LEAVE CASE AS IS
         TM    STATUS10,$10CAP     CAPS ON?
         BO    ODECAPIT            YES, TRY FOR UPPER CASE
*                IS CALLER REVIEW2 OR REVEDIT OR REVOUTPT OR REVLEVL?
         TM    STATUS11,$11FS2+$11EDT+$11OUT+$11LV
         BZ    ODENEXT             NO, DO NOT MAKE UPPER CASE
         CLI   7(R6),C'T'          TEXT STRING?
         BNE   ODECAPIT            NO, UPPER CASE HEX, MASK OR KEYWORD
         LA    R0,OPD1             POINT TO FIRST OPD
         CR    R0,R6               IS THIS THE FIRST OPERAND?
         BNE   ODENEXT             NO, LEAVE REPLACEMENT STRING AS IS
ODECAPIT EX    R14,ODEUPPER        UPPER CASE ALL OTHER TYPES
ODENEXT  LA    R6,8(,R6)           POINT TO NEXT O.D.E.
         BCT   R0,ODELOOP          GO PROCESS NEXT OPERAND
ODEDONE  DS    0H                  ODL COMMON POST-PROCESSING COMPLETE
         L     R1,OPD0             POINT TO COMMAND
         LH    R0,OPD0+4           GET ITS LENGTH
         C     R0,CFW1             SINGLE CHARACTER COMMAND?
         BNH   ODEREADY            YES, LEAVE IT AS IT IS
         CLI   0(R1),X'50'         COMMAND HAS LEADING AMPERSAND?
         BNE   ODEREADY            NO
         LA    R1,1(,R1)           YES, POINT PAST IT
         BCTR  R0,0                DECREMENT LENGTH
         ST    R1,OPD0             SAVE NEW ADDRESS
         STH   R0,OPD0+4           SAVE NEW LENGTH
         OI    STATUS14,$14RCL     REQUEST AUTOMATIC RECALL
ODEREADY L     R15,=A(PFKSET)
         CLC   0(3,R1),CPFK        HANDLE SET-PFK REQUEST
         BER   R15
         XC    DISPLNCT,DISPLNCT   CLEAR ANY PENDING MODAL DISPLAY
         LA    R15,RECALL
         CLI   0(R1),X'1C'         HANDLE DUP CHARACTER
         BER   R15
         CLC   0(8,R1),=CL8'RECALL' HANDLE RECALL CORRECTLY
         BER   R15
         LA    R15,COMCMDTB        POINT TO BEFORE SUBCOMMAND TABLE
         LH    R5,OPD0+4           GET SUBCOMMAND LENGTH CODE PLUS 1
         LA    R0,7
         CLR   R5,R0               LARGER THAN MAXIMUM?
         BNH   COMCMDLP            NO
         LR    R5,R0               YES, REDUCE TO MAXIMUM
COMCMDLP LA    R15,COMCMDL(,R15)   POINT TO NEXT SUBCOMMAND
         EX    R5,COMTEST          IS IT THIS SUBCOMMAND?
         BL    @COMEXIT            NO, IT'S NOT IN THE (SORTED) TABLE
         BH    COMCMDLP            NO, NOT FOUND (YET)
         L     R15,8(,R15)         YES, POINT TO ROUTINE
         TM    STATUS13,$13TSO     IS REVTSO THE CALLER?
         BNOR  R15                 NO, GO PERFORM SUBCOMMAND
         OI    STATUS4,$4REFR      YES, DO NOT RETAIN COMMAND TEXT
         BR    R15                 GO PERFORM SUBCOMMAND
COMTEST  CLC   0(0,R1),0(R15)      <<< EXECUTED >>>
         SPACE
@BADOPER MVI   MSG,34              INVALID OPERAND
         B     @PICCHEK
@ERRMISS MVI   MSG,35              MISSING OPERAND
         B     @PICCHEK
@ERRMANY MVI   MSG,51              TOO MANY OPERANDS
@PICCHEK TM    STATUS13,$13TSO     UNDER REVTSO CONTROL?
         BO    @TSOCOMX            YES
         TM    PICFLAGS,PICPUT     PICTURE ON DISPLAY?
         BNO   @MSGCOMM            NO
         OI    STATUS10,$102LN     YES, DO NOT SHOW FILE BYTES
         B     @MSGCOMM
@TSOCOMX OI    STATUS4,$4REFR      DO NOT RETAIN COMMAND TEXT
*        B     @COMEXIT
         SPACE
         SPACE
************************************************************
*                                                          *
*         RETURN TO CALLER                                 *
*                                                          *
************************************************************
         SPACE
@COMEXIT NI    STATUS4,255-$4CMD   RESET COMMAND-ONLY FLAG
         NI    STATUS10,255-$10CDL RESET CONTROL DISPLAY LOCK FLAG
         NI    MODE,255-MD_RECRS   RESET RECURSIVE SESSION FLAG
         NI    STATUS17,255-$17NWT RESET NOWAIT REQUEST FLAG
         L     R3,RECURS@          POINT TO THE RECURSION VECTOR
         CLI   RCRSL+16+3(R3),1    IS THIS THE ONLY SESSION ACTIVE?
         BNH   *+8                 YES, FLAG IS NOW CORRECT
         OI    MODE,MD_RECRS       NO, SET RECURSIVE SESSION FLAG
         ST    R9,RCRSL(,R3)       SET POINTER TO CURRENT @DATA
         L     R13,4(,R13)         POINT TO CALLER'S SAVE AREA
         OI    11(R13),X'01'       INVALIDATE FORWARD POINTER
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 EXIT
         SPACE
         SPACE
************************************************************
*                                                          *
*         SUBROUTINE TO CONVERT DATA TO HEX                *
*                                                          *
************************************************************
         SPACE
HEXCOM   MVC   1(1,R15),0(R1)      MOVE BYTE
         UNPK  0(3,R15),1(2,R15)   UNPACK
         TR    0(2,R15),COMHEX-240
         LA    R15,2(,R15)         INCREMENT OUTPUT PTR
         LA    R1,1(,R1)           INCREMENT INPUT PTR
         BCT   R0,HEXCOM           DECREMENT LENGTH, THEN LOOP
         MVI   0(R15),C' '         BLANK THE TRAILING BYTE
         BR    R14                 RETURN TO CALLER
         TITLE '  R E V C O M M   -   S T A T I C   A R E A  '
COMED3   DC    XL4'40202120'
COMED5   DC    XL6'402020202120',CL6'K FREE'
SFCODES  DC    X'40C860E8F0F8'
AUTODOT1 DC    AL1(FLDINHI),C'.',AL1(FLDOUTLO)
AUTODOT2 DC    AL1(FLDINHI),C'.',AL1(FLDOUTHI)
SCREEN1  DCS   AL1(ESC,WRT,WCCSTND),SBA,(1,1)
SCREEN1L EQU   *-SCREEN1
PUTCSRHM DCS   SBA,(2,15),IC
HELHOME  DCS   (2,17)
*        DCS   (1,17)              12-BIT ADDRESS FOR HEL MEMBER
MEMLOCN  DC    H'16'               14-BIT ADDRESS FOR HEL MEMBER
*        DCS   (1,40)              12-BIT ADDRESS FOR HEL SUBCOMMAND
SUBLOCN  DC    H'39'               14-BIT ADDRESS FOR HEL SUBCOMMAND
CFW1     DC    F'1'
CFW2     DC    F'2'
CFW3     DC    F'3'
CFW4     DC    F'4'
CHW32    DC    H'32'
CHW64    DC    H'64'
MODEL2SZ DC    F'24',F'80'         PRIMARY SCREEN SIZE TO USE
PFKDEFAD DC    A(PFKDEF)
COMMSGAD DC    A(REVMSGS)
COMDDLOC DC    A(REVDDLOC)
@CDRPL   DC    A(OPCNTL)
         DC    A(OPDSPLY)
         DC    A(OPRFRSH+HIGH_BIT)
@CDLPL   DC    A(OPCNTL)
         DC    A(OPDSPLY)
         DC    A(OPLOCK+HIGH_BIT)
TABLHILT DC    X'00F1F2F4'         NORMAL, BLINK, REVERSE, UNDERSCORE
TPUTNE   TPUT  0,0,NOEDIT,MF=L
TPUTNEL  EQU   *-TPUTNE
         DC    0F'0'
COMHEX   DC    C'0123456789ABCDEF' HEXADECIMAL DIGIT TRANSLATE TABLE
         DC    C'GHIJKLMNOPQRSTUV' ENOUGH FOR RCRSLIM UP TO 31
         DC    C'WXYZ'             ENOUGH FOR RCRSLIM UP TO 35
COMBLNKS DC    CL8'        '
COMBUF   DC    CL8'REVBUF  '
OPCNTL   DC    CL8'CONTROL '
OPDSPLY  DC    CL8'DISPLAY '
OPRFRSH  DC    CL8'REFRESH '
OPLOCK   DC    CL8'LOCK    '
REVPNL   DC    CL8'REVPANEL'
REVPNL2  DC    CL8'REVPANL2'
REVPNL6  DC    CL8'REVPANL6'
OPVREPL  DC    CL8'VREPLACE'
ZCMDNAME DC    CL8'ZCMD    '
OPVPUT   DC    CL8'VPUT    '
ZKLUSENM DC    CL8'ZKLUSE  '
ALARMYES DC    CL8'YES     '
OPVCOPY  DC    CL8'VCOPY   '
VCOPYLST DC    CL32'(ZCMD  ZVERB  ZSCROLLA  ZPFKEY) '
FINDSBA  DC    17X'00',X'11',238X'00'
TABNUMER DC    240X'FF',10X'00',6X'FF'
KAPS     DC    AL1(X'40')          00 BECOMES 40
         DC    128AL1(*-KAPS)      01-80
         DC    9AL1(*-KAPS+X'40')  81-89 BECOME C1-C9
         DC    7AL1(*-KAPS)        8A-90
         DC    9AL1(*-KAPS+X'40')  91-99 BECOME D1-D9
         DC    8AL1(*-KAPS)        9A-A1
         DC    8AL1(*-KAPS+X'40')  A2-A9 BECOME E2-E9
         DC    86AL1(*-KAPS)       AA-FF
TABBLANK DC    64X'00'
         DC    X'40'               BLANK
         DC    42X'00'
         DC    X'00'               COMMA
         DC    148X'00'
TABNONBL DC    64X'FF'
         DC    X'00'               BLANK
         DC    42X'FF'
         DC    X'FF'               COMMA
         DC    148X'FF'
TABQUOTE DC    125X'00',X'7D',130X'00'
TABDBLQO DC    127X'00',X'7F',128X'00'
         LTORG
CPFK     DC    C'PFK'
         DC    0F'0'
         SPACE
         SPACE
**********************************************************************
*                                                          *         *
*         ENCODE SCREEN LOCATION TO 3270 BUFFER ADDRESS    *  GP@FT  *
*                                                          *  01/93  *
**********************************************************************
         SPACE
*              INPUT - R1 = RELATIVE BYTE LOCATION
*             OUTPUT - R1 = TWO-BYTE DATA STREAM ADDRESS (LOW HALFWORD)
         SPACE
         DROP  R11,R10             REVCOMM
         USING CALCPOSI,R15
CALCPOSI DS    0H
         CLM   R1,X'3',MAX12BIT    LOCATION GREATER THAN 4K (12 BITS)?
         BHR   R14                 YES, NO CONVERSION TO BE DONE
         STC   R1,DOUBLE+1         NO, DO ORIGINAL 3270 ADDRESSING
         NI    DOUBLE+1,X'3F'      GET LOW-ORDER SIX-BIT NUMBER
         SRL   R1,6
         STC   R1,DOUBLE           GET HIGH-ORDER SIX-BIT NUMBER
         TR    DOUBLE(2),TABLE     CONVERT TO 3270 DATA STREAM CHARS
         ICM   R1,3,DOUBLE         SAVE IN BOTTOM TWO BYTES OF REGISTER
         BR    R14                 RETURN TO CALLER
         DROP  R15                 CALCPOSI
         SPACE
MAX12BIT DC    H'4095'             MAXIMUM 12-BIT ADDRESSING LOCATION
TABLE    DC    X'40C1C2C3C4C5C6C7C8C94A4B4C4D4E4F'
         DC    X'50D1D2D3D4D5D6D7D8D95A5B5C5D5E5F'
         DC    X'6061E2E3E4E5E6E7E8E96A6B6C6D6E6F'
         DC    X'F0F1F2F3F4F5F6F7F8F97A7B7C7D7E7F'
         SPACE
         DC    0F'0'
         AIF   (&ENV390).US5
         USING REVCOMM,R11,R10
         AGO   .US6
.US5     ANOP
         USING (REVCOMM,RECALL),R11,R10
.US6     ANOP
         SPACE
         SPACE
************************************************************
*                                                          *
*         COMMON SUBCOMMAND LOOK-UP TABLE                  *
*                                                          *
************************************************************
         SPACE
MODALTBL DC    A(SHOWPFKS)         1 - PROGRAM FUNCTION KEY DISPLAY
         DC    A(SWAPLIST)         2 - ACTIVE REVIEW SESSION LIST
         DC    A(SHOWCDES)         3 - JOB PACK AREA CDE CHAIN
         DC    A(SHOWTCBS)         4 - TASK CONTROL BLOCK CHAIN
         SPACE
*     SUBCOMMAND TABLE ENTRIES MUST BE SORTED INTO COLLATING SEQUENCE.
*     8-BYTE SUBCOMMAND NAMES WILL NOT BE CHECKED FOR A TRAILING BLANK.
         SPACE
         DC    0F'0'
COMCMDTB EQU   *   SUB-CMD     ROUTINE    (HIGH_BIT FORCES AMODE=31)
         DC    CL8' COMCMDS',A(0)
         DC    CL8'?       ',A(QUESTION)
         DC    CL8'CDE     ',A(SHOWCDES)
         DC    CL8'DEBUG   ',A(DEBUG)
         DC    CL8'FSH     ',A(HELP)
         DC    CL8'FSHELP  ',A(HELP)   &HEL2 (REMEMBER COLLATING ORDER)
         DC    CL8'HEL     ',A(HELP)    &HEL (REMEMBER COLLATING ORDER)
         DC    CL8'HELP    ',A(HELP)
         DC    CL8'JPA     ',A(SHOWCDES)
         DC    CL8'KEYS    ',A(SHOWPFKS)
         DC    CL8'RB      ',A(SHOWTCBS)
         DC    CL8'RECALL  ',A(RECALL)
         DC    CL8'RETRIEVE',A(RECALL)
         DC    CL8'SCRNAME ',A(SCRNAME)
         DC    CL8'SM      ',A(SMMODE)
         DC    CL8'SNAP    ',A(SNAP)
         DC    CL8'SPLIT   ',A(SPLIT)
         DC    CL8'START   ',A(SPLIT)
         DC    CL8'SWAP    ',A(SWAP+HIGH_BIT)
         DC    CL8'TASK    ',A(SHOWTCBS)
         DC    CL8'TCB     ',A(SHOWTCBS)
@TS      DC    CL8'TSO     ',A(TSO+HIGH_BIT)
         DC    CL8'TSS     ',A(TSS+HIGH_BIT)
         DC    F'-1'                         END OF SUBCOMMAND TABLE
COMCMDL  EQU   12                            SUBCOMMAND ENTRY LENGTH
         SPACE
         TITLE '  R E V C O M M   -   C O M M O N   C O M M A N D S '
**********************************************************************
*                                                          *         *
*         RECALL - RECALL PREVIOUSLY ENTERED COMMANDS      *  GP@P6  *
*                                                          *  10/87  *
**********************************************************************
         SPACE
         USING RECALL,R5
RECALL   LR    R5,R15              LOCAL BASE REGISTER
         TM    STATUS9,$9ISPF      ISPF MANAGING COMMAND RETRIEVAL?
         BO    RECALL0             YES, CANNOT RECALL FROM REVIEW STACK
         L     R1,RECALPTR         GET RECALL STACK ELEMENT
RECALLNT TM    8(R1),X'80'         NEGATIVE LENGTH CODE?
         BZ    RECALLNN            NO, NON-NEGATIVE
         L     R1,4(,R1)           YES, LOAD BACKWARD POINTER
         B     RECALLNT            PERFORM NEGATIVE TEST AGAIN
RECALLNN L     R8,SCREENBF         POINT TO TEXT SCREEN BUFFER
         A     R8,SCRNCOLS         POINT TO SECOND SCREEN LINE
         TM    STATUS11,$11FS2     IS REVIEW2 THE CALLER?
         BNO   RECALLNH            NO, NOT HELP LAYOUT
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BNO   RECALLNH            NO, NOT HELP LAYOUT
         LA    R8,SCRINPTL(,R8)    POINT TO INPUT AREA
         B     RECALL##
RECALLNH LA    R8,HEADCMDL(,R8)    POINT TO INPUT AREA
         TM    STATUS13,$13TSO     RUNNING UNDER REVTSO?
         BNO   RECALL##            NO, PROCEED
         L     R8,SCRNCOLS         YES, GET SCREEN WIDTH
         AR    R8,R8               DOUBLE IT
         A     R8,SCRNCOLS         TRIPLE IT
         A     R8,SCREENBF         POINT TO FOURTH SCREEN LINE
         CLI   4(R8),C'>'          PROMPT ON DISPLAY?
         BNE   @COMEXIT            NO, JUST EXIT FOR REFRESH
         LA    R8,6(,R8)           YES, POINT TO INPUT AREA
         XC    0(234,R8),0(R8)     NULL OUT RESIDUAL COMMAND TEXT
         NI    STATUS4,255-$4REFR  DO NOT CLEAR RECALLED COMMAND
RECALL## LH    R14,8(,R1)          GET LENGTH CODE
         ST    R8,REVPOS           SAVE RECALL TARGET ADDRESS
***      LTR   R14,R14             ONE BLANK AT END OF STACK?
***      BZ    RECALLIC            YES, GO SET CURSOR POSITION
         CLI   10(R1),C' '         ONE BLANK AT END OF STACK?
         BNH   RECALLIC            YES, GO SET CURSOR POSITION
         LA    R0,1(,R14)          GET THE RECALL TEXT BYTE COUNT
         LA    R15,10(,R1)         POINT TO THE TEXT TO RECALL
RECALL8L CLI   0(R8),FLDOUTHI      REACHED END OF INPUT FIELD?
         BE    RECALLIC            YES, THAT'S ALL SHE WROTE
         MVC   0(1,R8),0(R15)      RECALL ONE TEXT BYTE
         LA    R8,1(,R8)           ADVANCE RECALL TARGET
         LA    R15,1(,R15)         ADVANCE RECALL SOURCE
         BCT   R0,RECALL8L         LOOP BACK TO RECALL ANOTHER OCTET
RECALLIC L     R14,REVPOS          POINT TO START OF RECALLED TEXT
         SR    R8,R14              GET THE RECALLED TEXT LENGTH
         LA    R8,1(,R8)           CONVERT OFFSET TO POSITION
         ST    R8,REVPOS           SET CURSOR POSITION AFTER TEXT
         MVC   RECALPTR,4(R1)      UPDATE NEXT-TO-BE-RECALLED POINTER
         OI    STATUS10,$102LN     NO NEED TO REWRITE WHOLE SCREEN
         TM    STATUS13,$13TSO     RUNNING UNDER REVTSO?
         BNO   @RECALL             NO, DISPLAY RECALLED TEXT
         NI    STATUS10,255-$102LN YES, NEED MORE THAN TWO LINES
         AR    R14,R8              POINT TO WHERE CURSOR SHOULD GO
         L     R0,SCRNCOLS         GET SCREEN WIDTH
         AR    R0,R0               DOUBLE IT
         S     R14,SCREENBF        GET SCREEN POSITION
         SR    R14,R0              GET DYNAMIC AREA POSITION
         ST    R14,REVPOS          SET CURSOR POSITION AFTER TEXT
         MVC   REVCSR,COMBUF       SET CURSOR AREA
         B     @RECALL             DISPLAY RECALLED TEXT
RECALL0  MVI   MSG,26              USE "RETRIEVE" FOR COMMAND RECALL
         B     @PICCHEK
         DROP  R5                  RECALL
         SPACE
         SPACE
**********************************************************************
*                                                          *         *
*         SET NEW LOGICAL SCREEN NAME                      *  R42.3  *
*                                                          * MAR2009 *
**********************************************************************
         SPACE
         USING SCRNAME,R12
SCRNAME  LR    R12,R15             SET LOCAL BASE
         TM    OPD2+6,PRESENT      TOO MANY OPERANDS?
         BO    @ERRMANY            YES
         TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BZ    @ERRMISS            NO, TOO FEW OPERANDS
         TM    OPD1+6,QUOTED+NUMERIC
         BNZ   @BADOPER            NUMBER OR STRING IS INVALID
         CLI   OPD1+4,0            LENGTH < 256?
         BNE   @BADOPER            NO, HOW WAS THAT DONE?
         CLI   OPD1+5,8            OPERAND TOO LONG?
         BH    @BADOPER            YES
         L     R1,RECURS#          GET CURRENT SESSION NUMBER
         BCTR  R1,0                MAKE RELATIVE TO ZERO
         LA    R15,RCRSIZE         GET ELEMENT SIZE
         MR    R0,R15              GET ELEMENT OFFSET IN VECTOR
         AL    R1,RECURS@          POINT TO VECTOR ELEMENT
         L     R14,OPD1            GET ADDRESS OF DATA
         MVC   8(8,R1),0(R14)      SET NEW SCREEN NAME
         B     @PICCHEK
         DROP  R12                 SCRNAME
         SPACE
         SPACE
**********************************************************************
*                                                          *         *
*         CONTROL SESSION MANAGER MODE                     *  R50.1  *
*                                                          * AUG2021 *
**********************************************************************
         SPACE
         USING SMMODE,R12
SMMODE   LR    R12,R15             SET LOCAL BASE
         TM    OPD2+6,PRESENT      TOO MANY OPERANDS?
         BO    @ERRMANY            YES
         TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BZ    SMTOGGLE            NO, TOO FEW OPERANDS
         TM    OPD1+6,QUOTED+NUMERIC
         BNZ   @BADOPER            NUMBER OR STRING IS INVALID
         CLI   OPD1+4,0            LENGTH < 256?
         BNE   @BADOPER            NO, HOW WAS THAT DONE?
         L     R14,OPD1            POINT TO THE OPERAND
         CLI   OPD1+5,3            MIGHT IT BE 'OFF'
         BE    SMOFF               YES
         CLI   OPD1+5,2            MIGHT IT BE 'ON'
         BNE   @BADOPER            NO, INVALID
         CLC   =C'ON',0(R14)       IS IT 'ON'?
         BNE   @BADOPER            NO, INVALID
SMISON   MVI   MSG,143             SETTING NOW ON
         STTMPMD OFF               TURN ON SESSION MANAGER
         OI    STATUS7,$7SM        UPDATE FLAG
         OI    STATUS,STPROF       PROFILE REWRITE NOW REQUIRED
         B     @PICCHEK            SM SETTING NOW CHANGED
SMTOGGLE TM    STATUS7,$7SM        IS THE SETTING ON?
         BO    SMISOFF             YES, TURN IT OFF
         B     SMISON              NO, TURN IT ON
SMOFF    CLC   =C'OFF',0(R14)      IS IT 'OFF'?
         BNE   @BADOPER            NO, INVALID
SMISOFF  MVI   MSG,144             SETTING NOW OFF
         STTMPMD ON                TURN OFF SESSION MANAGER
         NI    STATUS7,255-$7SM    UPDATE FLAG
         OI    STATUS,STPROF       PROFILE REWRITE NOW REQUIRED
         B     @PICCHEK            SM SETTING NOW CHANGED
         DROP  R12                 SMMODE
         SPACE
         SPACE
************************************************************
*                                                          *
*         SNAP                                             *
*                                                          *
************************************************************
         SPACE
         USING SNAP,R5
SNAP     LR    R5,R15              LOCAL BASE REGISTER
         LA    R1,SNAPD+DCBDDNAM-IHADCB
         L     R15,COMDDLOC
         BASR  R14,R15             FIND SNAP DD TIOT ENTRY
         LTR   R15,R15             IS IT ALLOCATED?
         BZ    @COMEXIT            NO, NOT IN TIOT SO PASS TO CALLER
         LA    R7,SNAPR
         LA    R0,@DATA
         ST    R0,0(,R7)
         A     R0,=A($DATAL)
         BCTR  R0,0
         ST    R0,4(,R7)
         L     R0,CHKPTTOP         (COULD USE "ANSWER" HERE TO INCLUDE
         ST    R0,8(,R7)                  THE HOLDING AREA IN THE SNAP)
         LA    R0,32
         A     R0,CHKPTBOT
         C     R0,ENDPTR
         BNH   *+8
         L     R0,ENDPTR
         BCTR  R0,0
         ST    R0,12(,R7)
         OI    12(R7),X'80'
         MVC   SNAPDW(SNAPDL),SNAPD
         LA    R6,SNAPDW
         MVI   OPEND,X'80'
         OPEN  ((R6),OUTPUT),MF=(E,OPEND)
         TM    48(R6),X'10'
         BNO   @PICCHEK
         MVC   SNAPLW(SNAPLL),SNAPL
         L     R2,PSATOLD
         SNAP  DCB=(R6),TCB=(R2),ID=7,SDATA=(CB,Q,TRT),PDATA=(ALL),    +
               MF=(E,SNAPLW)
*        SNAP  DCB=(R6),ID=7,PDATA=(REGS),LIST=(R7),MF=(E,SNAPLW)
         MVI   CLOSED,X'80'
         CLOSE ((R6)),MF=(E,CLOSED)
         B     @PICCHEK
         DROP  R5                  SNAP
         SPACE
SNAPL    SNAP  DCB=0,ID=7,PDATA=(REGS),LIST=0,MF=L
SNAPLL   EQU   *-SNAPL
*SNAPD   DCB   DDNAME=SNAPOUT,MACRF=(W),DSORG=PS,
*              RECFM=VBA,LRECL=125,BLKSIZE=882
SNAPD    DC    0F'0',20X'00',A(1),X'00004000',A(1,1),X'54',AL3(0)
         DC    CL8'SNAPOUT',X'02000020',A(1,1),AL2(0,882)
         DC    A(0,1,1,1),AL2(0,125),A(1)
SNAPDL   EQU   *-SNAPD
         SPACE
         DC    0D'0'
         LTORG
         DC    0H'0'
         SPACE
         SPACE
**********************************************************************
*                                                          *         *
*         SWAP - SWITCH REVIEW SESSION NESTING ORDER       *  GP@HC  *
*                                                          * OCT2001 *
**********************************************************************
         SPACE
         USING SWAP,R12
SWAP     LR    R12,R15             SET LOCAL BASE
         TM    OPD2+6,PRESENT      TOO MANY OPERANDS?
         BO    @ERRMANY            YES
         TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BZ    SWAPCHEK            NO, SWAP WITH SECOND-MOST-RECENT
         TM    OPD1+6,QUOTED       IS OPERAND QUOTED?
         BO    @BADOPER            YES, INVALID
         LH    R1,OPD1+4           GET LENGTH
         LTR   R1,R1               IS IT NULL STRING?
         BNP   @BADOPER            YES, ERROR
         L     R14,OPD1            GET ADDRESS OF DATA
         TM    OPD1+6,NUMERIC      IS OPERAND NUMERIC?
         BNO   SWAPALFA            NO, CHECK FOR SWAP LIST REQUEST
         BCTR  R1,0
         EX    R1,SWPNMPAK
         CVB   R0,DOUBLE
SWAPNMBR LTR   R0,R0               NON-ZERO VALUE?
         BNP   @PICCHEK            NO, SWAP 0 IS A NO-OP, BUT ACCEPTED
         C     R0,RECURS#          ALREADY ON CORRECT SCREEN?
         BE    @PICCHEK            YES, THAT WAS EASY
         CH    R0,SWPLIM           LARGER THAN MAXIMUM?
         BH    SWAPERR             YES, ID NOT ACTIVE
SWAPJUMP L     R1,RECURS#          GET CURRENT SESSION NUMBER
         BCTR  R1,0                MAKE RELATIVE TO ZERO
         MH    R1,SWPSIZ           GET ELEMENT OFFSET IN VECTOR
         AL    R1,RECURS@          POINT TO VECTOR ELEMENT
         MVC   2(2,R1),DYN_CSR     SAVE CURRENT CURSOR LOCATION
         ICM   R2,3,CSRLOCN        SHOULD THE CURSOR GO HOME?
         BNZ   *+8                 NO
         STH   R2,2(,R1)           YES
         LA    R5,TSO              SET BASE FOR RETURN
*
*  WHEN INVOKED, REVIEW CREATES THE @DATA AREA WHICH STARTS WITH THE
*  FIRST REGISTER SAVE AREA OF THE REVIEW INSTANCE.  GPR9 POINTS TO
*  THIS AREA THROUGHOUT THE EXECUTION OF REVIEW AND ITS SUBROUTINES,
*  SO THE GPR9 VALUE FROM ANY REVIEW REGISTER SAVE AREA CAN BE USED
*  TO ASCERTAIN A REVIEW INSTANCE'S FIRST SAVE AREA, AND VIA ITS
*  BACKWARD POINTER, THE LATEST SAVE AREA OF THAT REVIEW'S CALLER.
*
*  SWAPPING TO ANOTHER REVIEW LOGICAL SESSION INVOLVES SWITCHING THE
*  POSITIONS OF THE SAVE AREAS IN THE SAVE AREA CHAIN BETWEEN THE
*  OLD CURRENT AND THE NEW CURRENT SESSIONS, AS WELL AS UPDATING THE
*  ADDRESSES IN GPR9 (@DATA) AND GPR13 (CURRENT REGISTER SAVE AREA).
*  BECAUSE REVIEW IS REENTRANT, THERE IS ONLY ONE COPY OF REVIEW IN
*  STORAGE, AND SO THE BASE REGISTERS ARE CORRECT FOR ALL PARALLEL
*  SESSIONS IN THE RB CHAIN OF THE CURRENT TASK.
*
         STM   R14,R12,12(R13)     SAVE CURRENT REGISTERS LOCALLY
         LR    R1,R13      R1 ==>  CURRENT LATEST SAVE AREA
         LR    R2,R9       R2 ==>  CURRENT FIRST SAVE AREA      (@DATA)
         L     R4,PSATOLD          POINT TO CURRENT TCB
         L     R4,TCBFSA-TCB(,R4)  POINT TO FIRST SAVE AREA
SWAPLOOP EQU   *
*        L     R1,4(,R2)   R1 ==>  CALLER'S LATEST SAVE AREA
         L     R1,SAVPREV-SAVER(,R2)
         CLR   R1,R4               BACK TO FIRST SAVE AREA?
         BE    SWAPERR             YES, SESSION NOT EXTANT
*        L     R2,56(,R1)  R2 ==>  CALLER'S FIRST SAVE AREA     (@DATA)
         L     R2,SAVGRS9-SAVER(,R1)
         TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BZ    SWAPTHIS            NO, SWAP WITH SECOND-MOST-RECENT
         C     R0,RECURS#-@DATA(,R2)
         BNE   SWAPLOOP
SWAPTHIS EQU   *
         SR    R4,R4               CLEAR FOR A FLAG
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    SWAPTHAT            YES, DEFINITELY NOT SHOWING PICTURES
         TM    PICFLAGS,PICOK+PICNAT
         BNO   SWAPTHAT            NO NEED TO CLEAR PICTURE
         BCTR  R4,0                SHOULD CLEAR GRAPHICS PLANES
SWAPTHAT EQU   *
*        L     R6,4(,R2)   R6 ==>  NEW-CURRENT'S CALLER'S SAVE AREA
         L     R6,SAVPREV-SAVER(,R2)
*        C     R9,8(,R1)           SWAPPING TWO LATEST SESSIONS?
         C     R9,SAVNEXT-SAVER(,R1)
         BE    SWAP1               YES, CANNOT SWAP BACK POINTER LINKS
*  NEW-CURRENT AND CURRENT-CURRENT SWAP SAVE AREA BACK TWO-WAY LINKS
         XC    SAVPREV-SAVER(4,R2),SAVPREV-SAVER(R9)
         XC    SAVPREV-SAVER(4,R9),SAVPREV-SAVER(R2)
         XC    SAVPREV-SAVER(4,R2),SAVPREV-SAVER(R9)
         L     R14,SAVPREV-SAVER(,R9)
         ST    R9,SAVNEXT-SAVER(,R14)
         L     R14,SAVPREV-SAVER(,R2)
         ST    R2,SAVNEXT-SAVER(,R14)
*  CURRENT GETS NEW-CURRENT'S SAVE AREA FORWARD TWO-WAY LINK
         MVC   SAVNEXT-SAVER(4,R13),SAVNEXT-SAVER(R1)
         L     R14,SAVNEXT-SAVER(,R13)
         ST    R13,SAVPREV-SAVER(,R14)
         B     SWAPALL             GO UPDATE RECURSION STATUS
*  NEW CALLS CURRENT - DO NOT WANT OLD-CURRENT CALLS OLD-CURRENT
*                                  CALLER'S CALLER CALLS CURRENT NOW
SWAP1    ST    R6,SAVPREV-SAVER(,R9)
         ST    R9,SAVNEXT-SAVER(,R6)
*                                  CURRENT CALLS CALLER NOW
         ST    R13,SAVPREV-SAVER(,R2)
         ST    R2,SAVNEXT-SAVER(,R13)
*  SET THE RETURN ADDRESS FOR SESSION NOW CALLED BY OLD-CURRENT
SWAPALL  MVC   SAVGRS14-SAVER(4,R13),SAVGRS14-SAVER(R1)
         MVC   RECALPTR-@DATA(8,R2),RECALPTR
         TM    STATUS,STPROF       WAS THE PROFILE CHANGED?
         BZ    SWAPNOW             NO, DON'T TRANSMIT UPDATES
*                                  YES, TURN ON PROFILE-CHANGED FLAG.
         OI    STATUS-@DATA(R2),STPROF
*                                  COPY DATA COLOURS
         MVC   FMTCOLOR-@DATA(3,R2),FMTCOLOR
*                                  COPY DISPLAY TRANSLATE TABLE
         MVC   PERIODS-@DATA(256,R2),PERIODS
*                                  COPY SCROLL AMOUNT
         MVC   SCROLL-@DATA(L'SCROLL,R2),SCROLL
         NI    STATUS4,$4CSR
         NI    STATUS4-@DATA(R2),255-$4CSR
         OC    STATUS4-@DATA(1,R2),STATUS4
*                                  COPY PFK VALUES
         LA    R14,PFKTAB
         LA    R6,PFKTAB-@DATA(,R2)
         LA    R15,24*64
         LR    R7,R15
         MVCL  R6,R14              COPY LATEST IN-CORE PFK TABLE
SWAPNOW  DS    0H
         LR    R13,R1              SAVE AREA: MAKE NEW-CURRENT CURRENT
         LR    R5,R9               COPY OLD-CURRENT'S @DATA ADDRESS
         NI    STATUS4,255-$4ATTN  CLEAR ATTENTION FLAG
         LR    R9,R2               @DATA: MAKE NEW-CURRENT CURRENT
         L     R0,REVIOWK@-@DATA(,R5)   GET OLD-CURRENT STACK STATUS
         CL    R0,REVIOWK@         NEED TO UPDATE NEW-CURRENT STATUS?
         BNH   *+8                 NO
         ST    R0,REVIOWK@         YES, DO IT
         LTR   R4,R4               NEED TO CLEAR REDISUAL PICTURE?
         BNM   *+8                 NO
         OI    STATUS7,$7RESHO     YES, MAKE IT SO
         NI    STATUS4,255-$4ATTN  CLEAR ATTENTION FLAG
         L     R14,RECURS@         POINT TO GLOBAL AREA
         ST    R9,RCRSL+4(,R14)    SET STAX OWNER
         XC    ATTNLST(ATTNLEN),ATTNLST     ZERO ATTN LIST
         L     R4,ATTNADDR         GET ATTENTION EXIT ADDRESS
         STAX  (R4),REPLACE=YES,USADDR=(R14),MF=(E,ATTNLST)
         CLC   GOTTERM(4),GOTTERM-@DATA(R5)
         BNE   SCRNCHK             SCREEN SIZE CHANGED WHILE "AWAY"
         LA    R4,DYNDCBW          UPDATE DCB POINTER
         LA    R14,@MSGCOMM        GET RETURN ADDRESS
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    SWPNOPIC            YES, DEFINITELY NOT SHOWING PICTURES
         TM    PICFLAGS,PICOK      SHOWING A PICTURE?
         BNO   SWPNOPIC            NO
         NI    PICFLAGS,255-PICOK-PICPUT
         OI    STATUS4,$4REFR      WHOLE SCREEN NEEDS TO BE REPAINTED
SWPNOPIC TM    STATUS4,$4REFR      OLD 'SWAP LIST' OR WHATEVER, MAYBE?
         BNO   SWAPCSRX            NO, PROBABLY ACTUAL FILE DATA
         XC    OPDL(OPDLL),OPDL    YES, ZERO THE OPDL
         MVI   CMDAREA,C' '        NO COMMAND INPUT FOR CALLER
         MVC   CMDAREA+1(L'CMDAREA-1),CMDAREA
         B     @COMEXIT            RETURN TO CALLER FOR PICTURE, OR
*                                  TO OVERWRITE OLD STATUS DISPLAY
SWAPCSRX L     R1,RECURS#          GET CURRENT SESSION NUMBER
         BCTR  R1,0                MAKE RELATIVE TO ZERO
         MH    R1,SWPSIZ           GET ELEMENT OFFSET IN VECTOR
         SR    R2,R2               PREPARE FOR INSERT
         AL    R1,RECURS@          POINT TO VECTOR ELEMENT
         ICM   R2,3,2(R1)          CURSOR POSITION TO BE RESTORED?
         BZR   R14                 NO, GOOD TO BE HOME
         STCM  R2,12,2(R1)         YES
         ST    R2,REVPOS           SET THE POSITION
         MVC   REVCSR,COMBUF       SET THE AREA
         BR    R14                 NOW SHOW OTHER FILE'S DATA
         SPACE
SWAPERR  MVI   MSG,28              SPECIFED SESSION ID IS NOT ACTIVE
         B     @PICCHEK
         SPACE
SWPNMPAK PACK  DOUBLE(8),0(0,R14)  <<< EXECUTED >>>
         SPACE
SWAPNEXT L     R2,RECURS#          GET CURRENT SESSION NUMBER
         LR    R1,R2               COPY IT
         MH    R1,SWPSIZ           GET INDEX FOR NEXT ELEMENT
         AL    R1,RECURS@          POINT TO NEXT ELEMENT
SWPNLOOP LA    R2,1(,R2)           GET NEXT ELEMENT'S NUMBER
         CH    R2,SWPLIM           BEYOND LIMIT?
         BH    SWPNMISS            YES, NEED TO RESTART SCAN
         CLI   1(R1),0             IS THIS ELEMENT IN USE?
         LA    R1,RCRSIZE(,R1)     POINT TO NEXT ELEMEMT BUT KEEP CC
         BE    SWPNLOOP            NO, CONTINUE FORWARD SCAN
         LR    R0,R2               YES, GET SESSION NUMBER
         B     SWAPNMBR            GO SWAP TO IT
SWPNMISS SR    R2,R2               RESTART FORWARD VECTOR SCAN
         L     R1,RECURS@          POINT TO FIRST VECTOR ELEMENT
         B     SWPNLOOP
         SPACE
SWAPPREV L     R0,RECURS#          GET CURRENT SESSION NUMBER
SWPPREDO LR    R1,R0               COPY IT
         BCTR  R1,0                MAKE RELATIVE TO ZERO
         MH    R1,SWPSIZ           GET INDEX FOR CURRENT ELEMENT
         AL    R1,RECURS@          POINT TO CURRENT ELEMENT
         B     SWPPBACK            GO BACK UP ONE ELEMENT
SWPPLOOP CLI   1(R1),0             IS THIS ELEMENT IN USE?
         BNE   SWAPNMBR            YES, GO SWAP TO IT
SWPPBACK SH    R1,SWPSIZ           NO, POINT TO PREVIOUS ELEMENT
         BCT   R0,SWPPLOOP         CONTINUE BACKWARD VECTOR SCAN
         LA    R0,RCRSLIM          GET MAXIMUM SESSION NUMBER
         L     R1,RECURS@          POINT TO FIRST VECTOR ELEMENT
         LA    R1,RCRSL-RCRSIZE(,R1) AND TO LAST VECTOR ELEMENT
         B     SWPPLOOP
         SPACE
SWAPSRCH L     R1,RECURS@          POINT TO FIRST VECTOR ELEMENT
         LA    R0,RCRSLIM          GET MAXIMUM SESSION NUMBER
SWPSLOOP CLC   8(8,R1),0(R14)      FOUND THE NAMED ELEMENT?
         BE    SWAPNAME            YES
         LA    R1,RCRSIZE(,R1)     NO, POINT TO NEXT ELEMENT
         BCT   R0,SWPSLOOP         GO CHECK NEXT ELEMENT
         B     @BADOPER            END OF VECTOR SO ERROR
SWAPNAME LH    R0,0(,R1)           GET FOUND SESSION NUMBER
         B     SWAPNMBR            GO SWAP TO IT
         SPACE
SWAPCHEK TM    MODE,MD_RECRS       RECURSIVE 'REVIEW' SESSION?
         BO    SWAPJUMP            YES, SWAP WITH SECOND-MOST-RECENT
         B     @PICCHEK            NO, SWAP IS A NO-OP, BUT ACCEPTED
         SPACE
SWAPALFA CH    R1,SWPHW8           IS LENGTH MORE THAN 8?
         BH    @BADOPER            YES, ERROR
         TR    0(8,R14),KAPS       UPPER CASE THE OPERAND
         CH    R1,SWPHW4           IS LENGTH 4?
         BNE   SWAPSRCH            NO, LOOK FOR NAMED SESSION
         CLC   SWPNXT,0(R14)       SWAP NEXT?
         BE    SWAPNEXT            YES
         CLC   SWPPRV,0(R14)       SWAP PREV?
         BE    SWAPPREV            YES
         CLC   SWPLST,0(R14)       SWAP LIST?
         BNE   SWAPSRCH            NO, LOOK FOR NAMED SESSION
         LA    R15,SWAPLIST        YES
         DROP  R12                 SWAP
         SPACE
         SPACE
**********************************************************************
*                                                          *         *
*         FORMAT AND DISPLAY REVIEW SESSION LIST           *  GP@HC  *
*                                                          * OCT2001 *
**********************************************************************
         SPACE
         USING SWAPLIST,R12
SWAPLIST LR    R12,R15             PROCESS "SWAP LIST" REQUEST
         CLI   DISPTYPE,2          MAYBE ANOTHER DISPLAY IN PROGRESS?
         BE    *+10                NO  (LIMIT OF 16 WILL ALWAYS FIT)
         XC    DISPLNCT,DISPLNCT   YES, RESET SHOWN LINE COUNT
         MVI   DISPTYPE,2          SET CURRENT DISPLAY TYPE
         OI    STATUS4,$4REFR      TELL CALLER TO REPAINT WHOLE SCREEN
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    *+8                 YES, DEFINITELY NOT SHOWING PICTURES
         NI    PICFLAGS,255-PICOK  NO, REDRAW OF ANY PICTURE REQUIRED
         L     R6,SCREENBF         POINT TO TEXT SCREEN BUFFER
         L     R2,SCRNCOLS         GET SCREEN WIDTH
         LA    R1,0(R2,R6)         POINT PAST FIRST LINE
         TM    STATUS13,$13TSO     REVTSO ACTIVE?
         BO    SWAPLTSO            YES
         TM    STATUS11,$11EDT     REVEDIT ACTIVE?
         BNO   SWAPLTOP            NO, LEAVE TOP LINE ALONE
         LA    R0,20               YES
         SR    R1,R0
         MVI   0(R1),C' '          REMOVE COLUMNS INDICATION FOR VISTA
         MVC   1(19,R1),0(R1)
         B     SWAPLTOP
SWAPLTSO MVI   1(R1),C' '          BLANK SECOND LINE
         MVC   2(78,R1),1(R1)
SWAPLTOP AR    R2,R2               DOUBLE SCREEN WIDTH
         L     R1,SCREENSZ         GET SCREEN CAPACITY
         AR    R6,R2               POINT TO THIRD SCREEN LINE
         SR    R1,R2               GET SIZE AFTER THIS POINT
         LA    R15,C' '
         SLL   R15,24              SET PAD AND ZERO SOURCE LENGTH
         LR    R0,R6               SET TARGET ADDRESS
         MVCL  R0,R14              BLANK OUT REVBUF
         LR    R0,R6               POINT TO BLANKED TEXT AREA
         A     R0,SCREENSZ         POINT TO ITS SHADOW
         LA    R15,X'06'           INTERNAL CODE FOR YELLOW
         SLL   R15,24              SET PAD AND ZERO SOURCE LENGTH
         L     R1,SCRNCOLS         TARGET LENGTH IS SCREEN WIDTH
         MVCL  R0,R14              SET THIRD LINE TO YELLOW
         LA    R15,X'36'           INTERNAL CODE FOR YELLOW USCORE
         SLL   R15,24              SET PAD AND ZERO SOURCE LENGTH
         L     R1,SCRNCOLS         TARGET LENGTH IS SCREEN WIDTH
         MVCL  R0,R14              SET FOURTH LINE TO YELLOW USCORE
         LA    R15,X'05'           INTERNAL CODE FOR TURQUOISE
         SLL   R15,24              SET PAD AND ZERO SOURCE LENGTH
         L     R1,SCREENSZ         GET SCREEN CAPACITY
         SR    R1,R2
         SR    R1,R2               GET SIZE OF REST OF SHADOW
         MVCL  R0,R14              SET REST OF SHADOW TO TURQUOISE
         A     R6,SCRNCOLS         POINT TO FOURTH SCREEN LINE
         MVC   0(50,R6),SWPLSTHD   SUPPLY HEADING
         A     R6,SCRNCOLS         POINT TO FIFTH SCREEN LINE
         LR    R14,R9              POINT TO CURRENT WORK AREA   (@DATA)
         LR    R1,R6               REMEMBER THE FIRST LIST LINE ADDRESS
         MVI   MSG,156             ACTIVE LOGICAL SCREEN SESSION LIST
         LA    R0,RCRSLIM          GET RECURSION VECTOR ELEMENT COUNT
         SR    R2,R2               RESET GENERATED LINE COUNT
         L     R1,RECURS@          POINT TO RECURSION VECTOR
SWPLSTLP LH    R8,0(,R1)           GET SESSION NUMBER
         LTR   R8,R8               OCCUPIED SLOT?
         BZ    SWPLSTNX            NO
         LA    R2,1(,R2)           YES, INCREMENT LINE NUMBER
         CH    R2,DISPLNCT         DISPLAYING THIS LINE NOW?
         BNH   SWPLSTNX            NO
         STH   R2,DISPLNCT         YES
         CVD   R8,DOUBLE
         MVC   2(4,R6),COMED3
         ED    2(4,R6),DOUBLE+6
         MVC   8(8,R6),8(R1)
         L     R14,4(,R1)          POINT TO SESSION'S @DATA
         MVC   18(8,R6),$DDNAME-@DATA(R14)
         MVC   28(6,R6),$VOLSER-@DATA(R14)
         MVC   36(44,R6),$DSNAME+2-@DATA(R14)
         CLI   $MEMBER-@DATA(R14),C' '
         BE    SWPNOMEM
         LH    R8,$DSNAME-@DATA(,R14)
         LA    R8,36(R8,R6)
         MVI   0(R8),C'('
         MVC   1(8,R8),$MEMBER-@DATA(R14)
SWPMEMLP CLI   8(R8),C' '          TRAILING BLANK?
         BNE   SWPMEMOK            NO
         BCTR  R8,0
         B     SWPMEMLP
SWPMEMOK MVI   9(R8),C')'
SWPNOMEM TR    0(80,R6),PERIODS
         CR    R9,R14              IS THIS THE CURRENT SESSION?
         BNE   SWPLSTAR            NO, NO ARROW
         MVC   0(4,R6),SWPARROW    INDICATE CURRENT SESSION WITH ARROW
SWPLSTAR A     R6,SCRNCOLS         POINT TO NEXT LINE
         C     R6,SHADOWBF         IS THE SCREEN NOW FULL?
         BNL   @MSGCOMM            YES, GO SHOW IT
SWPLSTNX LA    R1,RCRSIZE(,R1)     POINT TO NEXT VECTOR ELEMENT
         BCT   R0,SWPLSTLP         PROCESS NEXT SESSION ENTRY
         STH   R0,DISPLNCT         SESSION LIST NOW COMPLETE
         B     @MSGCOMM            GO SHOW THE LIST
         SPACE
         DROP  R12                 SWAP
         SPACE
SWPHW4   DC    H'4'
SWPHW8   DC    H'8'
SWPLIM   DC    Y(RCRSLIM)
SWPSIZ   DC    Y(RCRSIZE)
SWPNXT   DC    C'NEXT'
SWPPRV   DC    C'PREV'
SWPLST   DC    C'LIST'
SWPARROW DC    C'===>'
SWPLSTHD DC    CL50'SESSION/NAME       DDNAME   VOLUME  DATA SET NAME '
         SPACE
         SPACE
**********************************************************************
*                                                          *         *
*         SPLIT                                            *  R43.0  *
*                                                          * MAR2010 *
**********************************************************************
         SPACE
         USING SPLIT,R15
SPLIT    LA    R5,TSO              POINT TO MAIN SUBROUTINE
         L     R1,OPD0             POINT TO 'SPLIT' OR 'START'
         MVC   0(5,R1),COMBLNKS    BLANK IT
         MVC   BLDLNAME,TSORFENM   SUPPLY PROGRAM NAME TO INVOKE
         MVC   CMDTSOEX+4(8),TSORFENM
         LA    R0,12
         STH   R0,CMDTSOEX         SET COMMAND BUFFER LENGTH
         LA    R0,8
         STH   R0,CMDTSOEX+2       SET PARSED LENGTH
         LA    R14,CMDTSOEX        POINT TO COMMAND BUFFER
         ST    R14,REVCBUF         SAVE ITS ADDRESS
         L     R6,REVECT           ECT ADDRESS
         USING ECT,R6
         MVC   PCMD,ECTPCMD        SAVE CURRENT COMMAND NAME
         MVC   ECTPCMD,BLDLNAME    COMMAND NAME IS CHANGED
         MVC   ECTSCMD,COMBLNKS    NO SECONDARY COMMAND NAME
         OI    ECTSWS,ECTNOPD      NO OPERANDS
         TM    OPD1+6,PRESENT      REALLY NO OPERANDS?
         BNO   TSOJPAX             YES, ALL READY TO GO
         NI    ECTSWS,255-ECTNOPD  NO, THERE IS AN OPERAND
         DROP  R6                  ECT
         L     R1,OPD1             POINT TO THE OPERAND
         LR    R0,R1               POINT TO THE OPERAND
         AH    R0,OPD1+4           POINT PAST THE OPERAND
         TM    OPD1+6,QUOTED       QUOTED OPERAND?
         BNO   *+8                 NO, GOOD
         BCTR  R1,0                YES, BETTER DO IT PROPERLY I SUPPOSE
         BCTR  R14,0               THOUGH ITS AN INVALID RFE OPTION
         SR    R0,R14              GET TOTAL COMMAND BUFFER LENGTH
         STH   R0,CMDTSOEX         SAVE IT IN BUFFER HEADER
         LA    R14,CMDTSOEX+4      POINT TO COMMAND BUFFER TEXT START
         SR    R1,R14              GET PARSED BYTE COUNT
         STH   R1,CMDTSOEX+2       SAVE IT IN BUFFER HEADER
         B     TSOJPAX             ALL READY TO GO
         DROP  R15                 SPLIT
         SPACE
         SPACE
**********************************************************************
*                                                          *         *
*         TSS                                              *  GP@HC  *
*                                                          * JAN2002 *
**********************************************************************
         SPACE
         USING TSS,R5
TSS      LR    R5,R15              LOCAL BASE REGISTER
         LA    R15,TSO             POINT TO MAIN SUBROUTINE
         TM    STATUS9,$9ISPF      IS ISPF MANAGING TSO COMMANDS?
         BNOR  R15                 NO, PROCEED
         MVI   MSG,27              USE "TSO" FOR COMMANDS UNDER ISPF
         B     @MSGCOMM
         DROP  R5                  TSS
         SPACE
         SPACE
**********************************************************************
*                                                          *         *
*         TSO                                              *   ABL   *
*                                                          *         *
**********************************************************************
         SPACE
         USING TSO,R5
TSO      LR    R5,R15              LOCAL BASE REGISTER
         TM    STATUS17,$17NWT     ANY TGET NOWAIT I/O OF LATE?
         BNO   TSOSYNCD            NO, NO NEED TO SYNCHRONIZE
         LA    R1,ERASECMD         POINT TO ERASE/WRITE COMMAND
         LA    R0,L'ERASECMD       LOAD DATA STREAM LENGTH
         ICM   R1,8,=X'03'         TPUT FLAGS (FULLSCREEN)
         TPUT  (1),(0),R           RESET CHARACTER ATTRIBUTES
         TCLEARQ OUTPUT
         TCLEARQ INPUT
TSOSYNCD ICM   R0,15,REVIOWK@      ALREADY CREATED A NEW STACK?
         BNZ   TSOSTKOK            YES, NO NEED TO DO IT AGAIN
         OI    REVIOWK@+3,X'01'    NO, FLAG ALREADY DONE THIS CHECK
         L     R1,REVECT           POINT TO ENVIRONMENT CONTROL TABLE
         USING ECT,R1
         L     R15,ECTIOWA         POINT TO I/O WORK AREA
         L     R14,0(,R15)         POINT TO THE TOP STACK ELEMENT
         ICM   R14,7,1(R14)        IS IT A TERMINAL ELEMENT?
         BZ    TSOSTKOK            YES, NO NEED FOR A NEW I/O WORK AREA
         ST    R15,REVIOWK@        NO, SAVE THE I/O WORK AREA ADDRESS
         ST    R0,ECTIOWA          ZERO THE I/O WORK AREA POINTER
         DROP  R1                  ECT
         XC    MYSTPB(STPBL),MYSTPB     CLEAR THE STPB
         STACK TERM=*,PARM=MYSTPB,MF=(E,MYIOPL)
TSOSTKOK L     R1,PSATOLD          CURRENT TCB
         L     R1,TCBRBP-TCB(,R1)  CURRENT RB
         USING RBBASIC,R1
         ICM   R1,7,RBCDE1         CURRENT CDE
         DROP  R1                  RBBASIC
         USING CDENTRY,R1
         SR    R0,R0
         ST    R0,MSG              CLEAR PENDING MESSAGE STATUS
         TM    CDATTR,CDMIN        INVOKED VIA ALIAS SUCH AS 'REV'?
         BZ    *+8                 NO
         L     R0,CDXLMJP          YES, POINT TO MAJOR CDE
         STM   R0,R1,DOUBLE        SAVE CDE ADDRESS(ES)
         DROP  R1                  CDENTRY
TSORETRY LA    R1,CMDAREA          START OF TSO PARAMETERS
         LA    R0,L'CMDAREA        LENGTH OF PARSE STRING
         STH   R0,0(,R1)           SAVE FOR PARSE
         TM    OPD1+6,PRESENT      ANY OPERANDS?
         BZ    @ERRMISS            NO, MISSING OPERAND
         TM    OPD1+6,QUOTED       QUOTED?
         BO    @BADOPER            YES, INVALID
         L     R14,OPD1            START OF PARAMETER
         LH    R15,OPD1+4          LENGTH OF PARAMETER
         LTR   R15,R15             IS IT NULL STRING?
         BNP   @BADOPER            YES, ERROR
         MVI   OPEND,0             CLEAR A FLAG
         CLI   OPD1+5,1            SINGLE CHARACTER?
         BE    NOTIMPLC            YES, NOT IMPLIED CLIST
         CLI   0(R14),C'%'         IMPLICIT EXEC?
         BNE   NOTIMPLC            NO
         LA    R14,1(,R14)         YES, POINT PASSED IT
         BCTR  R15,0               DISCOUNT IT FROM LENGTH
         MVI   OPEND,1             FLAG IMPLICATION
NOTIMPLC CH    R15,=H'8'           IS LENGTH MORE THAN 8?
         BH    @BADOPER            YES, ERROR
         BCTR  R15,0               MACHINE LENGTH
         EX    R15,UPOPRND         FORCE COMMAND NAME TO UPPER CASE
         MVC   BLDLNAME,COMBLNKS
         EX    R15,MVOPRND         MOVE IN THE COMMAND NAME
         CLI   OPEND,1             IMPLICIT EXEC?
         BE    NOEFTSR             YES, SKIP RECURSION CHECKS
         ICM   R15,15,DOUBLE       POINT TO MAJOR CDE IF ALIAS USED
         BZ    REALREV1            CURRENT INVOCATION NOT VIA ALIAS
         USING CDENTRY,R15
         CLC   CDNAME,BLDLNAME     WILL IT BE A RECURSIVE 'REVIEW'?
         BE    NOEFTSR             YES, DON'T MAKE NEW SUBTASK
REALREV1 L     R15,DOUBLE+4        POINT TO THE CURRENT CDE
         CLC   CDNAME,BLDLNAME     WILL BE RECURSIVE 'REVIEW' OR 'REV'?
         BE    NOEFTSR             YES, DON'T MAKE NEW SUBTASK
         DROP  R15                 CDENTRY
         CLC   =C'PDS',BLDLNAME    PDS OR PDS/E REQUEST?
         BE    NOEFTSR             YES, DON'T MAKE NEW SUBTASK
         TM    STATUS2,$2TSR       TSO SERVICE ROUTINE AVAILABLE?
         BZ    NOEFTSR             NO
         LA    R1,CMDTSOEX         YES, MAKE THE BUFFER START EARLIER
         LA    R0,L'CMDAREA+8      NEW LENGTH OF PARSE STRING
         STH   R0,0(,R1)           SAVE FOR PARSE
         MVC   4(8,R1),=C'TSOEXEC '     OVERWRITE TSO WITH TSOEXEC
         LA    R15,OPD1            MAKE COMMAND NAME OPERAND OF TSOEXEC
         TM    OSBITS,X'13'        MVS?
         BO    CBUFHDR             YES
         MVI   6(R1),C'S'          NO, CHANGE TO TSSEXEC FOR MSP
         B     CBUFHDR             CONSTRUCT COMMAND BUFFER HEADER
UPOPRND  TR    0(0,R14),KAPS       <<< EXECUTED >>>
MVOPRND  MVC   BLDLNAME(0),0(R14)  <<< EXECUTED >>>
NOEFTSR  LA    R15,OPD2            START OF SECOND ODL
CBUFHDR  L     R6,REVECT           ECT ADDRESS
         USING ECT,R6
         MVC   PCMD,ECTPCMD        SAVE CURRENT COMMAND NAME
         MVC   ECTPCMD,BLDLNAME    COMMAND NAME IS CHANGED
         MVC   ECTSCMD,COMBLNKS    NO SECONDARY COMMAND NAME
         L     R14,0(,R15)         START OF SECOND PARAMETER
         LA    R14,0(,R14)         DROP TOP BYTE
         SR    R14,R1              OFFSET TO SECOND PARAMETER
         S     R14,CFW4            LESS TEXT LENGTH FIELDS
         NI    ECTSWS,255-ECTNOPD  ASSUME OPERANDS
         TM    6(R15),PRESENT      ANY OPERANDS?
         BO    TSOOPSW             YES, BRANCH
         LH    R14,0(,R1)          NO, GET COMMAND BUFFER LENGTH
         S     R14,CFW4            GET PARSED TEXT LENGTH
         OI    ECTSWS,ECTNOPD      NO OPERANDS
         DROP  R6                  ECT
         SPACE
TSOOPSW  TM    6(R15),QUOTED       QUOTED?
         BNO   *+6                 NO, BRANCH
         BCTR  R14,0               YES, POINT TO FIRST '
         STH   R14,2(,R1)          OFFSET TO OPERANDS
         ST    R1,REVCBUF          START OF COMMAND TEXT
         CLI   OPEND,1             IMPLICIT EXEC?
         BE    TSOATACH            YES, SKIP CHECKS AND SEARCHES
         ICM   R15,15,DOUBLE       POINT TO MAJOR CDE IF ALIAS USED
         BZ    REALREV2            CURRENT INVOCATION NOT VIA ALIAS
         CLC   8(8,R15),BLDLNAME   WILL IT BE A RECURSIVE 'REVIEW'?
         BE    TSOREV              YES, ISPF EDIT SHOULD STILL WORK
REALREV2 L     R15,DOUBLE+4        POINT TO THE CURRENT CDE
         CLC   8(8,R15),BLDLNAME   WILL BE RECURSIVE 'REVIEW' OR 'REV'?
         BE    TSOREV              YES, ISPF EDIT SHOULD STILL WORK
         SPACE
**********************************************************************
*                                                          *         *
*         SEARCH LPAQ FOR PRE-LOADED LINK LIST MODULE      *  GP@P6  *
*                                                          *  08/86  *
**********************************************************************
         SPACE
         L     R1,CVTPTR(,0)         POINT TO THE CVT
         USING CVT,R1
         LA    R15,CVTQLPAQ          POINT TO CDE CHAIN ORIGIN
         AIF   (NOT &ENV390).DLPAOK
         CLI   CVTDCB,X'9B'          MVS/ESA OR LATER?
         BNE   TSOLPAQ               NO
         TM    CVTOSLV2,X'80'        CVTDYLPA - DYNAMIC LPA SUPPORTED?
         BNO   TSOLPAQ               NO, DYNAMIC LPA NOT PRESENT
         L     R15,CVTECVT           YES, POINT TO THE ECVT
         USING ECVT,R15
         LA    R15,ECVTDLPF          POINT TO CDE CHAIN ORIGIN
         DROP  R15                   ECVT
.DLPAOK  ANOP
         DROP  R1                    CVT
         USING CDENTRY,R15
TSOLPAQ  ICM   R15,15,CDCHAIN        LAST CDE ON CHAIN?
         BZ    TSOPLPA               YES, TRY PLPA
         CLC   BLDLNAME,CDNAME       FOUND THE COMMAND?
         BE    TSOJPA                YES, CALL IT FROM MLPA/FLPA
         B     TSOLPAQ               NO, TRY NEXT ONE
         DROP  R15                   CDENTRY
         SPACE
**********************************************************************
*                                                          *         *
*         CALL IEAVVMSR TO SEARCH PLPA DIRECTORY           *  GP@P6  *
*                                                          *  08/86  *
**********************************************************************
         SPACE
*               REGS 0 AND 1 - CONTAIN NAME
*               REG 3        - CVT
*               REGS 7 8 9   - WORK REGS
*               REG 14       - RETURN - BAD RETURN 4(14)
*               REG 15       - ENTRY POINT
*               REG 0        - POINTS TO LPDE AFTER GOOD RETURN
         SPACE
TSOPLPA  LM    R0,R1,BLDLNAME
         STM   R14,R12,12(R13)
         L     R3,CVTPTR(,0)               POINT TO THE CVT
         L     R15,CVTLPDSR-CVT(,R3)       GET ROUTINE ENTRY POINT
         BASR  R14,R15                     CALL IEAVVMSR
         B     TSOPLPAX                    FOUND IN PLPA
         B     TSOTIME                     NOT IN PLPA, DO BLDL
TSOPLPAX LM    R14,R12,12(R13)
TSOJPA   TM    STATUS2,$2TSR       TSO SERVICE ROUTINE AVAILABLE?
         BZ    TSOREV              NO
         CLC   =C'PDS',BLDLNAME    PDS OR PDS/E OR PDSTOOLS REQUEST?
         BE    TSOREV              YES, DON'T MAKE NEW SUBTASK
TSOEXCIT MVC   BLDLNAME,=C'TSOEXEC '
         TM    OSBITS,X'13'        MVS?
         BO    TSOREV              YES
         MVI   BLDLNAME+2,C'S'     NO, USE TSSEXEC UNDER MSP
TSOREV   TM    MODE,MD_FS          IN FULL SCREEN MODE?
         BNO   TSOJPAX             NO, PROMPTING CAN PROCEED
         TM    STATUS11,$11ST      GATHERING STATUS INFORMATION?
         BO    TSOJPAX             YES, SKIP TERMINAL CONTROL
         CLC   CMDAREA+4(4),TSORFENM
         BE    TSOJPAX             STAY IN FULL SCREEN MODE FOR 'RFE'
         STLINENO LINE=1,MODE=OFF  YES, TURN OFF FULLSCREEN
         NI    MODE,255-MD_FS      FULL SCREEN MODE NOW OFF
TSOJPAX  LA    R1,REVCBUF          POINT TO CPPL
         LINK  EPLOC=BLDLNAME,     USE TASK/STEPLIB OR J/LPA           +
               ERRET=TSOERRET,     HANDLE LINK FAILURE                 +
               SF=(E,LINKAREA)
TSOPSWX  EQU   *                   PSW ADDRESS UNTIL LINKED PGM EXITS
         L     R1,RECURS@          POINT TO GLOBAL AREA
         ST    R9,RCRSL(,R1)       SET POINTER TO CURRENT @DATA
         LA    R0,4095
         NR    R15,R0              CLEAR UNWANTED BITS
         ST    R15,READR           SAVE THE RETURN CODE
         B     TSOLNKED            TSO PROCESSED WITHOUT A BLDL
TSOERRET LA    R0,4095
         NR    R1,R0               CLEAR UNWANTED BITS
         SLL   R1,12               PROMOTE SYSTEM ABEND CODE
         ST    R1,READR            SAVE THE ABEND CODE
         B     TSOLNKED            CHECK RETURN STATUS
TSOTIME  LM    R14,R12,12(R13)
         CLC   BLDLNAME,=C'TIME    '       TIME REQUEST?
         BNE   TSOBLDL                     NO, SEARCH LINK LIST
         MVC   BLDLNAME,=C'IKJEFT25'       YES, USE IKJEFT25
         B     TSOJPAX                     USE THE ONE IN JOB PACK AREA
*                                  WITHOUT TSOEXEC MAKING A NEW SUBTASK
TSOBLDL  MVI   OPEND,1             PREPARE FOR CLIST
         XC    BLDLUSER(62),BLDLUSER
         BLDL  0,BLDL              SEARCH FOR PROGRAM
         LTR   R15,R15             SUCCESSFUL BLDL?
         BNZ   TSOATACH            NO, ATTEMPT TO EXECUTE CLIST
         MVI   OPEND,0             YES, COMMAND IS NOT A CLIST
         TM    BLDLINDC,X'80'      IS REQUESTED COMMAND AN ALIAS?
         BZ    TSOBLDLX            NO
         ICM   R15,15,DOUBLE       POINT TO MAJOR CDE IF UNDER ALIAS
         BZ    REALREV3            CURRENT INVOCATION NOT VIA ALIAS
         CLC   8(8,R15),BLDL+42    WILL IT BE A RECURSIVE 'REVIEW'?
         BE    TSOREDO             YES, SUPPRESS TSOEXEC
REALREV3 L     R15,DOUBLE+4        POINT TO THE CURRENT CDE
         CLC   8(8,R15),BLDL+42    RECURSIVE 'REVIEW' OR 'REV'?
         BNE   TSOBLDLX            NO, TSOEXEC IS ALLOWED
TSOREDO  MVC   CALLPARM(8),BLDLNAME YES, SAVE THIS ALIAS NAME
         LA    R1,CALLPARM-8       POINT TO PHONY "CDE"
         ST    R1,DOUBLE           SAVE ITS ADDRESS
         L     R1,REVECT
         MVC   ECTPCMD-ECT(8,R1),PCMD  RESTORE COMMAND NAME
         B     TSORETRY            REDO THE WHOLE MESS
         SPACE
TSOBLDLX CLC   =C'PDS',BLDLNAME    PDS OR PDS/E OR PDSTOOLS REQUEST?
         BE    TSOREV              YES, DON'T MAKE NEW SUBTASK
         CLC   =C'STAR',BLDLNAME   STARTOOL REQUEST?
         BE    TSOREV              YES, DON'T MAKE NEW SUBTASK
         CLC   BLDLNAME,=C'ISPEXEC '
         BE    TSOJPAX             NOR FOR ISPF DIALOG INTERACTION
         TM    STATUS2,$2TSR       TSO SERVICE ROUTINE AVAILABLE?
         BO    TSOEXCIT            YES, USE IT
         CLC   TSOTSTNM,BLDLNAME   ATTACHING TSO TEST?
         BE    TSONSCMD            YES, NOT A SUPPORTED COMMAND
         SPACE
         AIF   (&ENV390).XMAGIC1   SKIP MVS 3.8 PRE-TSO/E LOGIC
         TM    BLDLUSER+18,X'08'   APF DATA PRESENT?
         BNO   APFRESET            NO, APF AUTHORIZATION NOT NEEDED
         LA    R1,BLDLUSER+21      POINT PAST BASIC SECTION
         TM    BLDLINDC,X'80'      IS THE MEMBER AN ALIAS?
         BZ    APFALSOK            NO
         LA    R1,11(,R1)          YES, POINT PAST ALIAS SECTION
APFALSOK TM    BLDLUSER+18,X'10'   SSI DATA PRESENT?
         BZ    APFSSIOK            NO
         LA    R1,1(,R1)           YES
         SRL   R1,1                PROCESS SSI SECTION ALIGNMENT
         SLL   R1,1                POINT TO SSI SECTION
         LA    R1,4(,R1)           POINT PAST SSI SECTION
APFSSIOK CLI   0(R1),1             AUTHORIZATION CODE ONE BYTE LONG?
         BNE   APFRESET            NO, APF AUTHORIZATION NOT NEEDED
         CLI   1(R1),1             DOES AC=1?
         BNE   APFRESET            NO, APF AUTHORIZATION NOT NEEDED
         TM    STATUS2,$2AUTH      ALREADY APF AUTHORIZED BY TSO?
         BO    NOMAGIC1            YES, DON'T NEED ANYTHING HERE
         TM    STATUS13,$13NSPR    ALLOWED TO USE "MAGIC" SVC?
         BO    NOMAGIC1            NO, DEFINITELY NOT
$MAGIC   EQU   244                 "MAGIC" SVC NUMBER FOR MVS 3.8 TK3
         L     R1,PSATOLD          POINT TO THE CURRENT TCB
         L     R1,TCBJSCB-TCB(,R1) POINT TO THE JSCB
         USING IEZJSCB,R1
         L     R1,JSCBPSCB         DO NOT TRUST REVPSCB FOR THIS
         DROP  R1                  IEZJSCB
         USING PSCB,R1
         TM    PSCBATR1,PSCBCTRL+PSCBACCT+PSCBJCL
         BNO   NOMAGIC1            DO NOT HAVE OPER+ACCT+JCL
         DROP  R1                  PSCB
         LA    R0,$MAGIC
         CVD   R0,DOUBLE
         UNPK  12(8,R13),DOUBLE
         MVC   12(3,R13),=C'IGC'
         LM    R0,R1,12(R13)       GET MAGIC SVC NAME
         STM   R14,R12,12(R13)     SAVE REGISTERS
         L     R3,CVTPTR(,0)       POINT TO THE CVT
         L     R15,CVTLPDSR-CVT(,R3)
         BASR  R14,R15             CALL IEAVVMSR
         B     DOMAGIC1            FOUND IN PLPA
         LM    R14,R12,12(R13)     NOT IN PLPA
         B     NOMAGIC1            PROBABLY NOT A TUR(N)KEY MVS 3.8J
APFRESET TM    STATUS2,$2AUTH      RUNNING APF AUTHORIZED ?
         BNO   NOMAGIC1            NO, NO NEED/ABILITY TO RESET IT
         OI    OPEND,4             YES, FLAG USING SYNCH
         MODESET MF=(E,TSOSUPER)   BECOME PRIVILEGED
         L     R7,PSATOLD          POINT TO THE CURRENT TCB
         USING TCB,R7
         ICM   R7,7,TCBJSTCA       POINT TO THE JOB STEP TCB
         ICM   R7,7,TCBJSCBB       POINT TO THE JSCB
         DROP  R7                  TCB
         USING IEZJSCB,R7
         NI    JSCBOPTS,255-JSCBAUTH     RESET APF AUTHORIZATION
         LA    R15,TSOATACH        POINT TO PROOBLEM STATE ROUTINE
         XC    MSG,MSG             CLEAR SYNCH PARAMETER LIST
         SYNCH (15),RESTORE=YES,MF=(E,MSG)
         OI    JSCBOPTS,JSCBAUTH   RESTORE APF AUTHORIZATION
         MODESET MF=(E,TSOPLEBY)   BECOME UNPRIVILEGED
         B     APFALLOK            PROCESS COMMAND RESULTS
         DROP  R7                  IEZJSCB
TSOSUPER MODESET MODE=SUP,KEY=ZERO,MF=L
TSOPLEBY MODESET MODE=PROB,KEY=NZERO,MF=L
DOMAGIC1 LM    R14,R12,12(R13)     RESTORE REGISTERS
         LA    R1,1
         SR    R0,R0
         SVC   $MAGIC              BECOME APF AUTHORIZED
         MVI   OPEND,2             FLAG DYNAMICALLY DONE HERE
         L     R1,PSATOLD          POINT TO THE CURRENT TCB
         L     R1,TCBJSCB-TCB(,R1) POINT TO THE JSCB
         USING IEZJSCB,R1
         TM    JSCBOPTS,JSCBAUTH   APF AUTHORIZED NOW?
         BO    NOMAGIC1            YES, PROCEED
         MVI   OPEND,0             NO, CLEAR "DID MAGIC" FLAG
         OI    STATUS13,$13NSPR    REMEMBER TO NOT TRY IT AGAIN
         DROP  R1                  IEZJSCB
NOMAGIC1 EQU   *
.XMAGIC1 ANOP
         SPACE
TSOATACH TM    MODE,MD_FS          IN FULL SCREEN MODE?
         BNO   TSOFSOFF            NO
         TM    STATUS11,$11ST      GATHERING STATUS INFORMATION?
         BO    TSOFSOFF            YES, SKIP TERMINAL CONTROL
         STLINENO LINE=1,MODE=OFF  TURN OFF FULLSCREEN
         NI    MODE,255-MD_FS      FULL SCREEN MODE NOW OFF
TSOFSOFF DS    0H
         AIF   (&ENV390).TSOATN1   TSOEXEC MAKES STAX SUPERFLUOUS
         LA    R7,TSOATTN          GET ATTENTION EXIT ADDRESS
         STAX  (R7),REPLACE=NO,USADDR=(R9),MF=(E,ATTNLST)
.TSOATN1 ANOP
         LA    R1,REVCBUF          PASS CPPL AS PROGRAM PARAMETER
         XC    MSG(64),MSG         CLEAR ATTACH PARAMETER LIST AREA
         SR    R0,R0
         ST    R0,READR            CLEAR ECB
         XC    ATTNLST(ATTNLEN),ATTNLST  ZERO ATTN LIST
         CLI   OPEND,1             IMPLICIT EXEC?
         BE    TSOCLIST            YES
         LA    R7,BLDLNAME         START OF BLDL INFORMATION
         AIF   (&ENV390).STAI1     NO STAI FOR TSO/E
         ATTACH DE=(R7),           USE TASK/STEPLIB OR LINK LIST       +
               ECB=READR,          WAIT TILL SUBTASK COMPLETES         +
               SZERO=NO,           DO NOT SHARE SUBPOOL ZERO           +
               SHSPV=78,           SHARE TSO SUBPOOL SEVENTY-EIGHT     +
               ESTAI=TSOESTAI,     SET SUBTASK ABEND RECOVERY ROUTINE  +
               SF=(E,MSG)
         AGO   .STAI2              SKIP MVS 3.8 PRE-TSO/E LOGIC
.STAI1   ANOP                      USE A STAI FOR TSO
         ATTACH DE=(R7),           USE TASK/STEPLIB OR LINK LIST       +
               ECB=READR,          WAIT TILL SUBTASK COMPLETES         +
               SZERO=NO,           DO NOT SHARE SUBPOOL ZERO           +
               SHSPV=78,           SHARE TSO SUBPOOL SEVENTY-EIGHT     +
               SF=(E,MSG)
.STAI2   ANOP
         B     TSOATCHD            SUBTASK NOW ATTACHED
TSOCLIST LA    R0,CMDAREA          POINT TO COMMAND BUFFER
         ST    R0,REVCBUF          SET ITS ADDRESS (REMOVE TSOEXEC)
         LA    R0,L'CMDAREA        GET ITS LENGTH
         STH   R0,CMDAREA          SET ITS LENGTH
         STCM  R0,12,CMDAREA+2     ZERO OFFSET FOR IMPLICIT EXEC
         L     R7,REVECT           POINT TO ENVIRONMENT CONTROL TABLE
         USING ECT,R7
         MVC   ECTPCMD,TSOEXNM     TELL TSO COMMAND, NOT SUBCOMMAND
         DROP  R7                  ECT
         MVC   BLDLNAME,TSOEXNM    SET COMMAND NAME FOR RESULT MESSAGE
         AIF   (&ENV390).STAI3     NO STAI FOR TSO/E
         ATTACH EPLOC=BLDLNAME,    USE EXEC COMMAND PROCESSOR          +
               ECB=READR,          WAIT TILL SUBTASK COMPLETES         +
               SZERO=NO,           DO NOT SHARE SUBPOOL ZERO           +
               SHSPV=78,           SHARE TSO SUBPOOL SEVENTY-EIGHT     +
               ESTAI=TSOESTAI,     SET SUBTASK ABEND RECOVERY ROUTINE  +
               SF=(E,MSG)
         AGO   .STAI4              SKIP MVS 3.8 PRE-TSO/E LOGIC
.STAI3   ANOP                      USE A STAI FOR TSO
         ATTACH EPLOC=BLDLNAME,    USE EXEC COMMAND PROCESSOR          +
               ECB=READR,          WAIT TILL SUBTASK COMPLETES         +
               SZERO=NO,           DO NOT SHARE SUBPOOL ZERO           +
               SHSPV=78,           SHARE TSO SUBPOOL SEVENTY-EIGHT     +
               SF=(E,MSG)
.STAI4   ANOP
TSOATCHD ST    R1,DOWNR            SAVE TCB ADDRESS
         WAIT  ECB=READR
         MVI   READR,0             RESET FLAG BYTE OF ECB
         ICM   R1,15,DOWNR         ANY TCB ADDRESS?
         BZ    TSODTCHD            NO, DETACH ALREADY DONE
         CLI   TCBCMP-TCB(R1),0    DID IT ABEND?
         BO    TSODTACH            YES, DO NOT EDIT COMPLETION CODE
         LA    R0,4095             NO
         N     R0,READR            CLEAR SYSTEM ABEND CODE BITS
         ST    R0,READR            SAVE EDITED COMPLETION CODE
TSODTACH DETACH DOWNR              DETACH COMMAND TCB
TSODTCHD XC    MSG(4),MSG          CLEAR MESSAGE STATUS
         AIF   (&ENV390).XMAGIC2   SKIP MVS 3.8 PRE-TSO/E LOGIC
         STAX  ,                   CLEAR TSOATTN FROM STAX STACK
         SPACE
         TM    OPEND,4             WAS APF AUTHORIZATION SUSPENDED?
         BNO   APFALLOK            NO
         SR    R15,R15             YES, ZERO COMPLETION CODE
         SVC   3                   TERMINATE SYNCH ROUTINE
APFALLOK DS    0H
         SPACE
         CLI   OPEND,2             APF DYNAMICALLY ENABLED HERE?
         BNE   TSOLNKED            NO
         SR    R1,R1
         SR    R0,R0
         SVC   $MAGIC              BECOME UNAUTHORIZED
.XMAGIC2 ANOP
         SPACE
TSOLNKED DS    0H                  COMMAND HAS BEEN EXECUTED
         AIF   (NOT &MVS).TSODONE
         L     R1,REVECT           POINT TO ENVIRONMENT CONTROL TABLE
         USING ECT,R1
         MVC   ECTPCMD,PCMD        RESTORE COMMAND NAME
         ICM   R15,15,ECTIOWA      POINT TO I/O WORK AREA
         BZ    TSODONE             SKIP THIS BIT IF NO I/O WORK AREA
         CLC   0(4,R15),4(R15)     FIRST AND LAST ELEMENTS THE SAME?
         BE    TSODONE             YES, ONLY TERMINAL ELEMENT PRESENT
         ICM   R0,15,READR         NO, GET COMMAND COMPLETION CODE
         BZ    TSOGETLN            IT WAS ZERO
         ST    R0,ECTRCDF          ZERO ECTRCDF AND SET ECTRTCD
         SRA   R0,12               SYSTEM ABEND CODE?
         BZ    TSOGETLN            NO
         OI    ECTRCDF,X'80'       YES, SET ABEND FLAG
         XC    MYSTPB(STPBL),MYSTPB     CLEAR THE STPB
         STACK DELETE=ALL,PARM=MYSTPB,MF=(E,MYIOPL)
         DROP  R1                  ECT
TSOGETLN XC    MYGTPB(12),MYGTPB   RESET PARAMETER BLOCK
         OI    MYGTPB+2,X'80'      SET THE COMPULSORY BIT
         XASAM24
         L     R15,CVTPTR(,0)      ISSUE GETLINE
         L     R15,CVTGETL-CVT(,R15)
         GETLINE PARM=MYGTPB,TERMGET=(,NOWAIT),ENTRY=(15),MF=(E,MYIOPL)
         XASAM31
         LA    R0,4                (RC=12 MEANS TERMINAL HAD NO INPUT)
         CLR   R15,R0              GETLINE PERFORMED?
         BH    TSODONE             NO, HOPE FOR RC=16 FOR END OF STACK
         USING GTPB,MYGTPB
         L     R14,GTPBIBUF        POINT TO INPUT BUFFER
         LH    R15,0(,R14)         GET THE BUFFER LENGTH
         AR    R14,R0              POINT PAST HEADER
         SR    R15,R0              GET LENGTH OF TEXT IN BUFFER
         MVC   CMDAREA(4),@TS      SET 'TSO '
         LA    R0,CMDAREA+4        POINT TO TARGET
         LA    R1,L'CMDAREA-4      GET TARGET LENGTH
         ICM   R15,8,COMBLNKS      SET BLANK AS PAD
         MVCL  R0,R14              LOAD IN-STORAGE BUFFER TEXT
         L     R1,GTPBIBUF         POINT TO INPUT BUFFER
         LH    R0,0(,R1)           GET THE BUFFER LENGTH
         FREEMAIN RU,LV=(0),A=(1),SP=1     FREE INPUT BUFFER
         LA    R0,L'CMDAREA-1      GET THE COMMAND STRING LENGTH CODE
         LR    R1,R0
         LA    R1,CMDAREA(R1)      POINT TO LAST BYTE
TSOTRLLP CLI   0(R1),C' '          TRAILING BLANK?
         BNE   TSOCMDLN            NO
         BCTR  R1,0                YES, BACK UP ONE
         BCT   R0,TSOTRLLP
TSOCMDLN ST    R0,CMDLEN           SET THE COMMAND TEXT LENGTH CODE
         SPACE
**********************************************************************
*                                                          *         *
*         EXTRACT INTERNAL SUBCOMMAND                      *  R46.7  *
*                                                          * SEP2016 *
**********************************************************************
         SPACE
         CLC   =C'REVCMD ',CMDAREA+4
         BNE   TSOMESAG            NOT AM INTERNAL SUBCOMMAND
         MVC   CMDAREA(L'CMDAREA-11),CMDAREA+11
         MVI   CMDAREA+L'CMDAREA-11,C' '
         MVC   CMDAREA+L'CMDAREA-10(10),CMDAREA+L'CMDAREA-11
         LA    R1,11
         SR    R0,R1               GET THE REDUCED COMMAND LENGTH
         ST    R0,CMDLEN           SAVE IT
         TM    MODE,MD_FS          IN FULL SCREEN MODE?
         BO    NOTPFK              YES, GO PROCESS SUBCOMMAND
         STFSMODE ON               NO, TURN ON FULLSCREEN
         OI    MODE,MD_FS          SET FLAG ACCORDINGLY
         OI    STATUS7,$7RESHO     TELL REVCOMM TO RESTORE SCREEN SIZE
         OI    STATUS10,$10CDR     TELL ISPF TO RESEND WHOLE SCREEN
         OI    STATUS4,$4REFR      TELL CALLER TO PAINT WHOLE SCREEN
         B     NOTPFK              GO PROCESS SUBCOMMAND
         SPACE
**********************************************************************
*                                                          *         *
*         PERFORM TSO COMMAND OUTPUT CAPTURE               *  R43.0  *
*                                                          * NOV2009 *
**********************************************************************
         SPACE
TSOMESAG TM    STATUS4,$4CMD       POSSIBLE COMMAND RESULT CAPTURE?
         BNO   TSOSTCHK            NO
         CLC   =C'REVMSG ',CMDAREA+4
         BNE   TSOCATCH            NOT A MESSAGE CAPTURE COMMAND
         L     R1,CMDLEN           GET COMMAND LENGTH CODE
         LA    R0,11-1
         SR    R1,R0               GET OUTPUT TEXT LENGTH
         BNP   TSOLNKED            DISCARD ZERO LENGTH DATA
         LA    R0,L'MSG-2          GET MAXIMUM LENGTH
         CR    R1,R0               MESSAGE TOO LONG?
         BNH   TSOMSGLN            NO
         LR    R1,R0               YES, REDUCE LENGTH TO MAXIMUM
TSOMSGLN STH   R1,MSG              SET MESSAGE LENGTH
         LA    R0,MSG+2            POINT TO TARGET
         LA    R14,CMDAREA+11      POINT TO SOURCE
         LR    R15,R1              COPY SOURCE LENGTH
         MVCL  R0,R14              LOAD MESSAGE TEXT
         B     TSOLNKED            RECORD PROCESSED
         SPACE
**********************************************************************
*                                                          *         *
*         PERFORM TSO COMMAND OUTPUT CAPTURE               *  R43.0  *
*                                                          * NOV2009 *
**********************************************************************
         SPACE
TSOCATCH CLC   =C'REVCATCH',CMDAREA+4
         BNE   TSOSTCHK            NOT A OUTPUT CAPTURE COMMAND
         ICM   R0,15,DIVORG        IS "DIV" ALREADY SETUP?
         BP    TSODIVOK            YES
         LA    R0,16               LIMIT CACHE TO 16KB
         SLL   R0,10               MULTIPLY BY 1024 TO GET REQUEST SIZE
         ST    R0,DIVSZREQ         SAVE IT
         SR    R0,R0               GET "DIV" ENTRY CODE (GETMAIN)
         ST    R0,TTR              CLEAR LOCATION DATA
         ST    R0,$UCBAD           PREVENT DIV TRIMMING
         ST    R0,COUNT            RESET FOR FIRST RECORD
         ST    R0,KOUNTHI          RESET FOR FIRST RECORD
         ST    R0,KOUNT            RESET FOR FIRST RECORD
         MVI   TSTRECFM,0          PACK THE DATA IN DIV
         L     R15,=A(REVDIV)      LOAD "DIV" ENTRY POINT
         BASR  R14,R15             CALL IT
         LA    R0,120
         ST    R0,RECSIZE          SET MAXIMUM RECORD LENGTH
         LTR   R15,R15             SUCCESS?
         BZ    TSODIVOK            YES, SO ENOUGH STORAGE
         MVI   MSG,123             REQUEST ABORTED - STORAGE FULL
TSODIVOK L     R1,CMDLEN           GET COMMAND LENGTH CODE
         LA    R0,13-1
         SR    R1,R0               GET OUTPUT TEXT LENGTH
         BNP   TSOLNKED            DISCARD ZERO LENGTH DATA
         TM    STATUS8,DIVFULL     STORING ALL THE DATA SO FAR?
         BO    TSOLNKED            NO, JUST KEEP FLUSHING THE DATA
         MVC   TTR,COUNT           LOAD RECORD NUMBER FOR DIAGNOSIS
         LA    R2,CMDAREA+13       POINT TO OUTPUT TEXT
         LA    R0,4                GET ENTRY CODE (RECORD STORE)
         L     R15,=A(REVDIV)      LOAD REVDIV ENTRY POINT
         BASR  R14,R15             CALL IT
         TM    STATUS8,DIVFULL     COULD THIS RECORD BE STORED?
         BO    TSODIVFL            NO, FIRST RECORD THAT COULDN'T BE
         AL    R1,KOUNT            YES
         ST    R1,KOUNT            ACCUMULATE TOTAL BYTE COUNT
         BC    12,TSOKOUNT         NO CARRY
         LA    R0,1
         AL    R0,KOUNTHI
         ST    R0,KOUNTHI
TSOKOUNT LA    R0,1
         A     R0,COUNT            INCREMENT RECORD COUNT
         ST    R0,COUNT
         B     TSOLNKED            RECORD PROCESSED
TSODIVFL L     R1,COUNT
         BCTR  R1,0                GET LAST RECORD INDEX STORED OKAY
         ST    R1,COUNT            ASSUME AT LEAST ONE RECORD STORED
         ICM   R2,15,DIVCPADR      POINT TO LAST RECORD STORED
         BNP   TSOLNKED            GIVE UP IF DIFFERENT STORE METHOD
         LA    R0,7
         A     R0,0(,R2)
         SRL   R0,3
         SLL   R0,3
         LA    R1,16               GET LENGTH OF SNIP MESSAGE
         CR    R1,R0               TOO LARGE TO BE SURE?
         BNH   *+8                 NO
         LA    R1,8                YES, REDUCE LENGTH
         L     R0,KOUNT            GET PREVIOUS DATA BYTE COUNT
         S     R0,0(,R2)           DISCOUNT LAST SAVED RECORD
         AR    R0,R1               COUNT THE SNIP MESSAGE
         ST    R0,KOUNT            SAVE UPDATED BYTE COUNT
         LA    R2,=CL16'-8<---SNIPPED---'
         LA    R0,4                GET ENTRY CODE (RECORD STORE)
         L     R15,=A(REVDIV)      LOAD REVDIV ENTRY POINT
         BASR  R14,R15             CALL IT
         LA    R0,1
         A     R0,COUNT            INCREMENT RECORD COUNT
         ST    R0,COUNT
         B     TSOLNKED            DATA TRUNCATION NOTIFICATION ADDED
         SPACE
**********************************************************************
*                                                          *         *
*         PERFORM TSO STATUS OUTPUT CAPTURE                *  R40.0  *
*                                                          * MAR2006 *
**********************************************************************
         SPACE
TSOSTCHK TM    STATUS11,$11ST+$11OUT GATHERING JOB STATUS INFORMATION?
         BNO   NOTPFK              NO, GO PROCESS INPUT FROM THE STACK
         CLC   =C'REVOUTST',CMDAREA+4
         BNE   NOTPFK              GO PROCESS INPUT FROM THE STACK
         LA    R7,1(,R1)           POINT PAST MESSAGE TEXT
         LA    R4,CMDAREA+12       POINT TO MESSAGE TEXT
TSOSTLP1 CLI   0(R4),C' '          LEADING BLANK?
         BNE   TSOSTTXT            NO
         LA    R4,1(,R4)           YES, POINT TO NEXT BYTE
         CR    R4,R7               PAST END OF TEXT?
         BL    TSOSTLP1            NO
         B     TSOLNKED            YES, DISCARD MESSAGE
TSOSTTXT CLC   =C'IKJ',0(R4)       TEXT STARTS WITH MESSAGE IDENTIFIER?
         BNE   TSOSTMSG            NO, ACTUAL TEXT
         LA    R4,9(,R4)           YES, POINT PAST IT
         B     TSOSTLP1            GO FIND NEXT WORD
TSOSTMSG SR    R7,R4               GET TEXT LENGTH
         LA    R6,OUTMSG-OUTELEM+7(,R7)
         SRL   R6,3
         SLL   R6,3                GET MESSAGE STORAGE AREA SIZE
         MVI   GETMNTRC,73         TRACK GETMAIN IN CASE OF FAILURE
         GETSTOR RU,LV=(R6),LOC=(31,64)
         USING OUTELEM,R1
         XC    OUTELEM(OUTFIXL),OUTELEM
         ST    R6,OUTSIZE          SET STORAGE SIZE
         STH   R7,OUTMSGL          SET MESSAGE SIZE
         BCTR  R7,0
         EX    R7,TSOMSGMV         SET MESSAGE TEXT
         L     R6,@OUTLAST         POINT TO LAST MESSAGE SO FAR
         ST    R6,OUTPREV          NEW LAST BACK TO OLD LAST
         ST    R1,0(,R6)           OLD LAST FORWARD TO NEW LAST
         ST    R1,@OUTLAST         UPDATE LAST ADDRESS
         LA    R0,1
         A     R0,@OUTNMBR         INCREMENT CHAIN ELEMENT COUNT
         ST    R0,@OUTNMBR
         ST    R0,OUTSEQ#          SET ELEMENT SEQUENCE NUMBER
         B     TSOLNKED
TSOMSGMV MVC   OUTMSG(0),0(R4)     <<< EXECUTED >>>
         DROP  R1                  OUTELEM
.TSODONE ANOP
TSODONE  TM    MODE,MD_FS          IN FULL SCREEN MODE?
         BO    TSOFSON             YES
         STFSMODE ON               NO, TURN ON FULLSCREEN
         OI    MODE,MD_FS          SET FLAG ACCORDINGLY
         OI    STATUS7,$7RESHO     TELL REVCOMM TO RESTORE SCREEN SIZE
         OI    STATUS10,$10CDR     TELL ISPF TO RESEND WHOLE SCREEN
         TM    STATUS7,$7SM        LEAVING SESSION MANAGER ACTIVE?
         BO    TSOFSON             YES
         STTMPMD ON                NO, TURN IT OFF
TSOFSON  ICM   R1,3,MSG            MESSAGE FROM BEYOND THE GRAVE?
         BNZ   TSOEXIT             YES, DO NOT REPORT RETURN CODE
         ICM   R1,15,READR         LOAD COMPLETION CODE
         BZ    TSOEXIT             NO MESSAGE FOR ZERO RETURN CODE
         CVD   R1,DOUBLE           PREPARE TO SHOW RETURN CODE
         SRA   R1,12               WAS IT AN ABEND?
         BNZ   TSOABEND            YES
         OI    DOUBLE+7,X'0F'      NO, SHOW RETURN CODE
         MVC   MSG(MSGTSO1L),MSGTSO1
         UNPK  MSG+14(4),DOUBLE
         LH    R0,MSG              GET CURRENT MESSAGE LENGTH
TSORCLP  CLI   MSG+14,C'0'         LEADING ZERO?
         BNE   TSOMSG              NO
         MVC   MSG+14(4),MSG+15    YES, SUPPRESS IT
         BCTR  R0,0                DECREMENT LENGTH
         STH   R0,MSG              SAVE IT
         B     TSORCLP             CONTINUE LEADING ZERO SCAN
TSOABEND OI    READR+2,X'0F'       SHOW SYSTEM ABEND CODE
         MVC   MSG(MSGTSO2L),MSGTSO2
         UNPK  MSG+20(3),READR+1(2)
         TR    MSG+20(3),COMHEX-240
TSOMSG   OI    STATUS7,$7BELL      SOUND BELL FOR ERROR MESSAGE
         MVC   MSG+2(8),BLDLNAME   SHOW ISSUED TSO COMMAND NAME
         LA    R15,MSG+9           POINT TO LAST CHARACTER OF NAME
         LH    R0,MSG              GET MESSAGE LENGTH
TSOMSGLP CLI   0(R15),C' '         TRAILING BLANK IN NAME?
         BNE   TSOMSGOK            NO
         MVC   0(13,R15),1(R15)    YES, SHIFT UP MESSAGE
         BCTR  R15,0               POINT TO PREVIOUS CHARACTER
         BCT   R0,TSOMSGLP         CONTINUE CHECK
TSOMSGOK STH   R0,MSG              UPDATE MESSAGE LENGTH
TSOEXIT  MVI   READR,X'80'         RESET UTILITY PROGRAM INDICATOR
         L     R14,RECURS@         POINT TO GLOBAL AREA
         XC    ATTNLST(ATTNLEN),ATTNLST  ZERO ATTN LIST
         L     R6,ATTNADDR         GET ATTENTION EXIT ADDRESS
         ICM   R0,15,RCRSL+4(R14)  IS A STAX ACTIVE?
         ST    R9,RCRSL+4(,R14)    SET STAX OWNER
         BNZ   TSOREPLA            YES, REPLACE IT TO BE SURE
         STAX  (R6),REPLACE=NO,USADDR=(R14),MF=(E,ATTNLST)
         B     TSOSTAXD
TSOREPLA STAX  (R6),REPLACE=YES,USADDR=(R14),MF=(E,ATTNLST)
TSOSTAXD NI    STATUS4,255-$4ATTN  CLEAR ATTENTION FLAG
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    TSONOPIC            YES, DEFINITELY NOT SHOWING PICTURES
         TM    PICFLAGS,PICOK      SHOWING A PICTURE?
         BNO   TSONOPIC            NO
         NI    PICFLAGS,255-PICOK-PICPUT
         OI    STATUS4,$4REFR      WHOLE SCREEN NEEDS TO BE REPAINTED
TSOREFR  XC    OPDL(OPDLL),OPDL    ZERO THE OPDL
         MVI   CMDAREA,C' '        NO COMMAND INPUT FOR CALLER
         MVC   CMDAREA+1(L'CMDAREA-1),CMDAREA
         B     @COMEXIT            RETURN TO CALLER FOR PICTURE
TSONOPIC TM    STATUS4,$4CMD       JUST HERE TO PROCESS A COMMAND?
         BO    @COMEXIT            YES, SO RETURN TO CALLER
         TM    STATUS4,$4REFR      OLD 'SWAP LIST' OR WHATEVER, MAYBE?
         BO    TSOREFR             YES, SCREEN NEEDS TO BE REPAINTED
         B     @MSGCOMM            RESHOW SCREEN PERHAPS WITH MESSAGE
         SPACE
TSONSCMD MVI   MSG,176             COMMAND NOT SUPPORTED
         B     TSOEXIT
         SPACE
*TSOMEM  MVI   MSG,39              COMMAND NOT FOUND
*        L     R1,REVECT
*        MVC   ECTPCMD-ECT(8,R1),PCMD  RESTORE COMMAND NAME
*        B     TSOEXIT
         DROP  R5                  TSO
         AIF   (&ENV390).STAI5     NO ADDITIONAL PROTECTION FOR TSO/E
         DROP  R11,R10             REVCOMM
         SPACE
**********************************************************************
*                                                          *         *
*         ATTENTION EXIT                                   *  R49.6  *
*                                                          * MAY2020 *
**********************************************************************
         SPACE
         USING TSOATTN,R15         ESTABLISH ADDRESSABILITY
TSOATTN  STM   R14,R12,12(R13)     SAVE REGISTERS
         L     R9,8(,R1)           POINT TO LOCAL @DATA
         SR    R3,R3               GET ZERO
         L     R7,PSATOLD          POINT TO THE CURRENT TCB
         USING TCB,R7
         ICM   R2,15,TCBLTC        ANY SUBTASKS PRESENT?
         BZ    TSOATTNX            NO, NOTHING TO DO
         DROP  R7                  TCB
         CL    R2,DOWNR            YES, IS IT THE TSO COMMAND TASK?
         BNE   TSOATTNX            NO, NOTHING TO DO
         ST    R3,DOWNR            YES, FLAG DETACH TAKEN CARE OF
         ST    R2,@DATA            SAVE SUBTASK TCB ADDRESS
         DETACH @DATA              DETACH THE TSO COMMAND TASK
         ST    R3,@DATA            CLEAR TCB ADDRESS
TSOATTNX LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 RETURN
         DROP  R15                 TSOATTN
         DROP  R9                  @DATA
         SPACE
**********************************************************************
*                                                          *         *
*         TSO COMMAND ATTACH ESTAI ROUTINE                 *  R49.6  *
*                                                          * MAY2020 *
**********************************************************************
         SPACE
         USING SDWA,R1
         USING TSOESTAI,R15
TSOESTAI MVC   SDWAMODN,TSOEMODN   SET ABEND MODULE NAME
         MVC   SDWACSCT,TSOECSCT   SET ABEND CSECT NAME
         MVC   SDWAREXN,TSOEREXN   SET ABEND RECOVERY ROUTINE NAME
         CH    R0,=H'12'           ANY SDWA PROVIDED?
         BNE   TSONOT12            YES, GOOD
         LA    R1,TSOMSG12         POINT TO MESSAGE
         LA    R0,TSOMLN12         GET ITS LENGTH
         TPUT  (1),(0),R           SHOW A MESSAGE
         SLR   R15,R15             CONTINUE WITH ABEND (PERCOLATE)
         BR    R14                 EXIT FROM EXIT
         DROP  R1,R15              SDWA, TSOESTAI
         SPACE
         USING SDWA,R3
         USING TSOESTAI,R4
TSONOT12 STM   R14,R12,12(R13)     SAVE REGISTERS
         LR    R3,R1               POINT TO SDWA
         LR    R4,R15              COPY BASE
         LA    R6,TSOABLN1         POINT TO LINE LABELS
         MVI   SDWAVRA+20,C' '     PREPARE FOR MISSING FIELDS
         MVC   SDWAVRA+21(35),SDWAVRA+20
         L     R15,PSATOLD         POINT TO THE CURRENT TCB
         L     R15,TCBTIO-TCB(R15) POINT TO THE TIOT
         MVC   SDWAVRA+21(8),0(R15) SHOW JOB NAME
         CLI   SDWANAME,0          PROGRAM DETAILS PRESENT?
         BE    TSOLN1OK            NO
         MVC   SDWAVRA+30(8),SDWANAME
         UNPK  SDWAVRA+39(9),SDWAEPA(5)
         TR    SDWAVRA+39(8),TSOHEX-C'0'
         MVI   SDWAVRA+47,C' '
TSOLN1OK UNPK  SDWAVRA+48(9),SDWAABCC(5)
         TR    SDWAVRA+48(8),TSOHEX-C'0'
         BAL   R14,TSOLBLLN        SHOW THE 1ST LINE
         LA    R7,SDWAEC1          POINT TO ERROR PSW
         BAL   R14,TSOHEXLN        SHOW THE 2ND LINE
         L     R15,SDWANXT1        GET ADDRESS FROM ERROR PSW
         SLL   R15,1
         SRL   R15,1               ENSURE CLEAN ADDRESS
         L     R8,PSATOLD          POINT TO CURRENT TCB
         L     R8,TCBJSTCB-TCB(,R8) THEN TO JOB STEP TCB
         LA    R8,TCBJPQ-TCB(,R8)  POINT TO JPA CHAIN ORIGIN
         USING CDENTRY,R8
TSOCDELP ICM   R8,7,CDCHAIN+1      POINT TO NEXT CDE ON CHAIN
         BZ    TSONOADR            END OF JPQ CHAIN REACHED
         TM    CDATTR,CDMIN        MINOR CDE?
         BO    TSOCDELP            YES
         L     R9,CDXLMJP          POINT TO EXTENT LIST
         USING XTLST,R9
         L     R10,XTLMSBAD-1      GET EXTENT START
         SR    R11,R11             CLEAR FOR INSERT
         CLR   R15,R10             ADDRESS BELOW THIS MODULE?
         BL    TSOCDELP            YES
         ICM   R11,7,XTLMSBLN      GET MODULE SIZE
         ALR   R11,R10             POINT PAST MODULE
         CLR   R15,R11             ADDRESS ABOVE THIS MODULE?
         BNL   TSOCDELP            YES
         LA    R0,6
         SLR   R15,R0              BACK UP 6 BYTES
         CLR   R15,R10             BACKED UP BEFORE MODULE START?
         BNL   *+6                 NO
         LR    R15,R10             YES, USE MODULE START INSTEAD
         ST    R15,SDWAVRA+80      COPY THE ADDRESS
         MVC   SDWAVRA+84(12),0(R15)    AND 12 BYTES OF DATA THERE
         DROP  R8,R9               CDENTRY, XTLST
         LA    R7,SDWAVRA+80       POINT TO THESE 16 BYTES
         BAL   R14,TSOHEXLN        SHOW IT IN HEX
         B     *+8                 DO NOT SKIP A LABEL
TSONOADR LA    R6,16(,R6)          GO PAST UNUSED LABEL
         LA    R7,SDWAGRSV         SHOW TO ERROR GPR VALUES
         BAL   R14,TSOHEXLN
         BAL   R14,TSOHEXLN
         BAL   R14,TSOHEXLN
         BAL   R14,TSOHEXLN
         XC    SDWAVRA,SDWAVRA     CLEAR THE VRA
         LR    R1,R3               RESTORE SDWA POINTER
         TM    SDWAERRD,SDWACLUP   RETRY POSSIBLE?
         BO    TSOPERCO            NO, CANNOT RETRY
         SPACE
         SR    R8,R8               CLEAR FOR INSERT
         ICM   R8,7,SDWACMPC       GET COMPLETION CODE
         ST    R8,SDWASR01         PASS IT IN GPR1 TO RETRY ROUTINE
         LA    R4,TSORECOV         POINT TO RETRY ROUTINE
         SETRP REGS=(14,12),       RESTORE SAVED REGISTERS             +
               DUMP=YES,           TAKE DUMP IF DUMP DD ALLOCATED      +
               RC=4,               RETRY                               +
               RETADDR=(R4),       SPECIFY THE RETRY ADDRESS           +
               RETREGS=YES,        LOAD RETRY REGISTERS FROM SDWA      +
               FRESDWA=YES         FREE THE SDWA
         SPACE
TSOPERCO SETRP REGS=(14,12),RC=0   PERCOLATE
         SPACE
**********************************************************************
*                                                          *         *
*         DISPLAY SUMMARY DUMP LINE USING WTP              *  R49.6  *
*                                                          * MAY2020 *
**********************************************************************
         SPACE
*    ON INPUT: R6 -> 16-BYTE LABEL
*              R7 -> 16-BYTE DATA AREA TO SHOW IN 4 WORDS OF HEX
*             R14 -> RETURN POINT
TSOHEXLN UNPK  SDWAVRA+21(9),00(5,R7)
         UNPK  SDWAVRA+30(9),04(5,R7)
         UNPK  SDWAVRA+39(9),08(5,R7)
         UNPK  SDWAVRA+48(9),12(5,R7)
         TR    SDWAVRA+21(35),TSOHEX-C'0'
TSOLBLLN MVC   SDWAVRA+4(16),0(R6) LOAD THE LABEL FOR THE LINE
         MVI   SDWAVRA+20,C' '     INSERT NECESSARY BLANKS
         MVI   SDWAVRA+29,C' '
         MVI   SDWAVRA+38,C' '
         MVI   SDWAVRA+47,C' '
         MVC   SDWAVRA(4),TSO35PRE LOAD WTO "PREFIX" AND "SUFFIX"
         MVC   SDWAVRA+56(4),TSO35SUF
         WTO   MF=(E,SDWAVRA)      ISSUE WRITE-TO-PROGRAMMER
         LA    R6,16(,R6)          POINT TO THE NEXT LABEL
         LA    R7,16(,R7)          POINT TO THE DATA QUADWORD
         BR    R14                 RETURN TO CALLER
         DROP  R3,R4               SDWA, TSOESTAI
         SPACE
**********************************************************************
*                                                          *         *
*         RECOVERY ROUTINE - TAKE THE 'AB' OUT OF 'ABEND'  *  R49.6  *
*                                                          * MAY2020 *
**********************************************************************
         SPACE
TSORECOV LR    R15,R1              SET COMPLETION CODE
         SVC   3                   TERMINATE THIS SUBTASK NORMALLY
         SPACE
TSOABLN1 DC    CL16'JOB.PGM.EPA.CMP.'
TSOABLN2 DC    CL16'PSW.ILC.INT.TEA.'
TSOABLN3 DC    CL16'ADR.DATA-AT-ADR.'
TSOGRLN1 DC    CL16'R0..R1..R2..R3..'
TSOGRLN2 DC    CL16'R4..R5..R6..R7..'
TSOGRLN3 DC    CL16'R8..R9..R10.R11.'
TSOGRLN4 DC    CL16'R12.R13.R14.R15.'
TSOMSG12 EQU   *                   START OF ENTRY CODE 12 MESSAGE
TSOEMODN DC    CL8'REVIEW'         MODULE NAME
TSOECSCT DC    CL8'REVCOMM'        CSECT NAME
TSOEREXN DC    CL8'TSOESTAI'       RECOVERY ROUTINE NAME
         DC    C' ENTRY CODE 12'
TSOMLN12 EQU   *-TSOMSG12          LENGTH OF ENTRY CODE 12 MESSAGE
TSO35PRE DC    Y(56),X'8000'       OFFSET TO DESC CODES, MCS FLAGS
*                                  52 BYTES OF TEXT GOES HERE
TSO35SUF DC    X'0000',X'0020'     DESCRIPTOR CODES, ROUTCDE=11
TSOHEX   DC    C'0123456789ABCDEF' HEXADECIMAL DIGIT TRANSLATE TABLE
         SPACE
         USING REVCOMM,R11,R10
         USING @DATA,R9
.STAI5   ANOP
         SPACE
************************************************************
*                                                          *
*         TSO PROCESSING STATIC STORAGE                    *
*                                                          *
************************************************************
         SPACE
TSOEXNM  DC    CL8'EXEC'
TSOTSTNM DC    CL8'TEST'
TSORFENM DC    CL8'RFE'
MSGTSO1  MESG  '*TSOCMD* RC=0000'
MSGTSO2  MESG  '*TSOCMD* ABENDED SXXX'
         SPACE
         DC    0D'0'
         LTORG
         DC    0H'0'
         SPACE
         SPACE
**********************************************************************
*                                                          *         *
*         HELP                                             *   ABL   *
*                                                          *         *
**********************************************************************
         SPACE
         USING HELP,R5
HELP     DS    0H
         LR    R5,R15              SET LOCAL BASE
         LA    R15,OPD1            FIRST PARAMETER
         LA    R1,CMDAREA          START OF HELP PARAMETERS
         LA    R0,63               LENGTH OF PARSE STRING
         SLL   R0,16               SHIFT AS REQUIRED
         STCM  R0,15,0(R1)         SAVE FOR PARSE
         TM    6(R15),QUOTED       QUOTED?
         BO    @BADOPER            YES, INVALID
         L     R14,0(,R15)         START OF PARAMETER
         LH    R15,4(,R15)         LENGTH OF PARAMETER
         L     R6,REVECT           ECT ADDRESS
         OI    ECTSWS-ECT(R6),ECTNOPD      ASSUME NO OPERAND
         MVC   ECTPCMD-ECT(8,R6),COMPON    SET APPROPRIATE COMMAND NAME
         MVC   ECTSCMD-ECT(8,R6),HELPWORD  SUBCOMMAND IS HELP
         LTR   R15,R15                     NULL STRING?
         BZ    HELP040                     YES, BRANCH
         CH    R15,HHW8                    IS LENGTH MORE THAN 8?
         BH    @BADOPER                    YES, ERROR
         BCTR  R15,0                       MACHINE LENGTH
         MVC   BLDLNAME,COMBLNKS
         EX    R15,MVOPRNDH        COMMAND NAME
         LA    R15,OPD1            START OF FIRST ODL
         L     R14,0(,R15)         START OF FIRST PARAMETER
         LA    R14,0(,R14)         DROP TOP BYTE
         SR    R14,R1              OFFSET TO SECOND PARAMETER
         SH    R14,HHW4            LESS TEXT LENGTH FIELDS
         NI    ECTSWS-ECT(R6),X'FF'-ECTNOPD ASSUME OPERANDS
         TM    6(R15),PRESENT      ANY OPERANDS?
         BO    HELP030             YES, BRANCH
         LA    R14,63              NO, USE DEFAULT
         OI    ECTSWS-ECT(R6),ECTNOPD      ASSUME NO OPERAND
         SPACE
HELP030  STH   R14,2(,R1)                  OFFSET TO OPERANDS
HELP040  ST    R1,REVCBUF                  START OF COMMAND TEXT
         LA    R1,REVCBUF          CPPL START
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BZ    *+10                NO, MUST BE AS REVIEW
         MVC   ECTPCMD-ECT(8,R6),HELID YES, COMMAND NAME IS CHANGED
         LA    R14,HELEP           POINT TO THE HELP COMMAND NAME
         TM    STATUS6,HELALT      HAVE TO USE ALTERNATE NAME?
         BZ    *+8                 NO
         LA    R14,HELEP2          YES, POINT TO IT
         LINK  EPLOC=(R14),SF=(E,LINKAREA)
HELPSWX  EQU   *                   PSW ADDRESS UNTIL LINKED PGM EXITS
         L     R1,RECURS@          POINT TO GLOBAL AREA
         ST    R9,RCRSL(,R1)       SET POINTER TO CURRENT @DATA
         OI    STATUS4,$4REFR      TELL CALLER TO REPAINT WHOLE SCREEN
         OI    STATUS10,$10CDR     TELL ISPF TO RESEND WHOLE SCREEN
         L     R1,PSATOLD          CURRENT TCB
         L     R14,TCBRBP-TCB(,R1) CURRENT RB
         USING RBBASIC,R14
         ICM   R1,7,RBCDE1         CURRENT CDE
         USING CDENTRY,R1
         MVC   ECTPCMD-ECT(8,R6),CDNAME    RESTORE COMMAND NAME
         DROP  R1,R14              CDENTRY, RBBASIC
         XC    OPDL(OPDLL),OPDL    ZERO THE OPDL
         MVI   CMDAREA,C' '        NO COMMAND INPUT FOR CALLER
         MVC   CMDAREA+1(L'CMDAREA-1),CMDAREA
         B     @COMEXIT            RETURN TO CALLER
MVOPRNDH MVC   BLDLNAME(0),0(R14)  <<< EXECUTED >>>
         SPACE
HHW4     DC    H'4'
HHW8     DC    H'8'
HELPWORD DC    CL8'HELP    '
HELEP    DC    CL8'&HEL    '       FULLSCREEN HELP ENTRY POINT NAME
HELEP2   DC    CL8'&HEL2   '       FULLSCREEN HELP ENTRY POINT NAME
HELID    DC    CL8'HLHL    '       PHONY NAME FOR HELP OF HEL
         SPACE
         SPACE
************************************************************
*                                                          *
*         PFK SET                                          *
*                                                          *
************************************************************
         SPACE
         USING PFKSET,R5
PFKSET   LR    R5,R15              LOCAL BASE REGISTER
         TM    STATUS9,$9ISPF      ISPF MANAGING PF KEY USAGE?
         BO    PFKSETN             YES, CANNOT UPDATE PFK VALUE
         LA    R15,3(,R1)          POINT TO NN AFTER PFK
         TRT   0(1,R15),TABNUMER   PFKN
         BNZ   PFKSET9             ERROR, N NOT NUMERIC
         PACK  DOUBLE,0(1,R15)
         CLI   1(R15),C' '         SINGLE DIGIT
         BE    PFKSET1             YES, BRANCH
         TRT   1(1,R15),TABNUMER
         BNZ   PFKSET9             SECOND DIGIT NOT NUMERIC
         CLI   2(R15),C' '
         BNE   PFKSET9             MORE THAN 2 DIGITS
         PACK  DOUBLE,0(2,R15)
PFKSET1  CVB   R1,DOUBLE           GET VALUE OF N OR NN
         LTR   R1,R1
         BZ    PFKSET0             ZERO SO SET DEFAULTS
         LA    R0,24
         CR    R1,R0
         BH    PFKSET9             ERROR, GREATER THAN 24
         OI    STATUS,STPROF       PROFILE REWRITE NOW REQUIRED
         LA    R0,PFKTABL          LENGTH OF EACH PFK ENTRY
         MR    R0,R0               COMPUTE OFFSET INTO TABLE
         LA    R15,PROFDATA(R1)    POINT TO TABLE ENTRY
         LA    R1,OPD1             GET FIRST OPERAND ENTRY
         TM    6(R1),PRESENT       ARE THERE ANY OPERANDS?
         BZ    PFKSETF             NO, BLANK IT
         CLI   5(R1),0             IS IT NULL LENGTH?
         BE    PFKSETF             YES, BLANK IT
         L     R1,0(,R1)           POINT TO OPERAND
         CLC   0(3,R1),CPFK        IS OPERAND ANOTHER PFK COMMAND?
         BE    PFKSET9             YES, ERROR
         LA    R0,CMDAREA+62       POINT TO END OF COMMAND AREA
         SR    R0,R1               GET LENGTH CODE OF COMMAND
         BM    PFKSET9
         LR    R14,R0
         MVI   1(R15),C' '
         MVC   2(PFKTABL-2,R15),1(R15)
         EX    R14,PFKLOAD         MOVE COMMAND INTO PFK TABLE
PFKSETX  MVI   MSG,40              PFKNN HAS BEEN RESET
         L     R15,COMMSGAD        POINT TO MESSAGE ROUTINE
         BASR  R14,R15             FETCH MESSAGE TEXT
         OI    DOUBLE+7,X'0F'
         UNPK  MSG+5(2),DOUBLE+6(2)
         B     PFKSETXX
PFKSETF  MVI   1(R15),C' '
         MVC   2(PFKTABL-2,R15),1(R15)
         B     PFKSETX
PFKSET9  MVI   MSG,41              INVALID PFK COMMAND
         B     PFKSETXX
PFKSETN  MVI   MSG,25              USE "KEYS" UNDER ISPF
         B     @MSGCOMM
PFKLOAD  MVC   1(0,R15),0(R1)      <<< EXECUTED >>>
         SPACE
PFKSET0  LA    R1,OPD1             GET FIRST OPERAND ENTRY
         TM    6(R1),PRESENT       ARE THERE ANY OPERANDS?
         BO    @BADOPER            YES, ABORT TO AVOID DISAPPOINTMENT
         OI    STATUS,STPROF       NO, PROFILE REWRITE NOW REQUIRED
         L     R1,PFKDEFAD         POINT TO PFK DEFAULTS
         LA    R15,PFKTAB
         LA    R0,24               LOAD NUMBER OF PF KEYS
PFKINIT2 MVI   0(R15),C' '
         MVC   1(PFKTABL-1,R15),0(R15) PAD WITH BLANKS
         MVC   0(PFKDEFL,R15),0(R1) INSERT DEFAULT
         LA    R1,PFKDEFL(,R1)     POINT TO NEXT DEFAULT
         LA    R15,PFKTABL(,R15)   POINT TO NEXT PFK ENTRY
         BCT   R0,PFKINIT2         DO NEXT PFK IF ANY
         MVI   MSG,43              DEFAULT PFK VALUES SET
PFKSETXX ICM   R0,3,DISPLNCT       IN MODAL DISPLAY?
         BZ    @PICCHEK            NO
         CLI   DISPTYPE,1          IS IT 'KEYS'?
         BNE   @PICCHEK            NO
         MVI   DISPLNCT+1,0        YES, REDISPLAY FROM THE START
         LA    R15,SHOWPFKS        SHOW UPDATED PFK VALUES
         BR    R15
         DROP  R5                  PFKSET
         SPACE
         SPACE
**********************************************************************
*                                                          *         *
*         SHOW CURRENT PFK VALUES                          *  GP@HC  *
*                                                          * JAN2002 *
**********************************************************************
         SPACE
         USING QUESTION,R15
QUESTION TM    STATUS9,$9ISPF      IS ISPF HANDLING TERMINAL I/O?
         BNO   LISTPFKS            NO, SHOW CURRENT PFK VALUES
         MVI   MSG,52              YES, INDICATE THIS
         B     @MSGCOMM
LISTPFKS LA    R15,SHOWPFKS
         DROP  R15                 QUESTION
         SPACE
**********************************************************************
*                                                          *         *
*         FORMAT AND DISPLAY PROGRAM FUNCTION KEY VALUES   *  GP@P6  *
*                                                          *  10/87  *
**********************************************************************
         SPACE
         USING SHOWPFKS,R12
SHOWPFKS LR    R12,R15             SET LOCAL BASE
         CLI   DISPTYPE,1          MAYBE ANOTHER DISPLAY IN PROGRESS?
         BE    *+10                NO
         XC    DISPLNCT,DISPLNCT   YES, RESET SHOWN LINE COUNT
         MVI   DISPTYPE,1          SET CURRENT DISPLAY TYPE
         OI    STATUS4,$4REFR      TELL CALLER TO REPAINT WHOLE SCREEN
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    *+8                 YES, DEFINITELY NOT SHOWING PICTURES
         NI    PICFLAGS,255-PICOK  NO, REDRAW OF ANY PICTURE REQUIRED
         L     R6,SCREENBF         POINT TO TEXT SCREEN BUFFER
         CLI   DISPLNCT+1,0        PFK VALUES ON SHOW?
         BE    SHOPFVAL            NO, JUST SHOW THE CURRENT VALUES
         LA    R1,7
         M     R0,SCRNCOLS
         LA    R1,0(R1,R6)         POINT TO 8TH SCREEN LINE
         LA    R7,PFKTAB           POINT TO PFK TABLE
         LA    R14,8(,R1)          POINT TO FIRST-PFK-ON-SHOW INDICATOR
         CLI   8(R1),C'1'          CURRENT SCREEN SHOWS FROM PFK 13?
         BNE   UPDPFKLP            NO, SO IT STARTS FROM PFK 1
         LA    R7,PFKTABL*12(,R7)  YES, ADJUST TABLE ENTRY POINTER
UPDPFKLP CLI   11(R1),FLDINHI      INPUT FIELD START AS EXPECTED?
         BNE   PFKPGCHK            NO, REACHED END OF PFK VALUE DISPLAY
         CLI   75(R1),FLDOUTLO     INPUT FIELD END AS EXPECTED?
         BNE   PFKPGCHK            NO, REACHED END OF PFK VALUE DISPLAY
         CLI   12(R1),C' '         LEADING BLANK?
         BNE   CHKPFVAL            NO
         CLC   12(62,R1),13(R1)    YES, BUT IS THE WHOLE ENTRY BLANK?
         BE    CHKPFVAL            YES
SHUFLPFK MVC   12(62,R1),13(R1)    SHIFT VALUE LEFT
         MVI   12+62(R1),C' '      APPEND TRAILING BLANK
         CLI   12(R1),C' '         LEADING BLANK?
         BE    SHUFLPFK            YES, KEEP SHUFFLING
CHKPFVAL CLC   1(PFKTABL-1,R7),12(R1)   WAS THIS PFK UPDATED?
         BE    NXTPFVAL                 NO, PROCEED TO CHECK NEXT PFK
         MVC   1(PFKTABL-1,R7),12(R1)   YES, SO UPDATE ACTIVE PFK VALUE
         MVI   MSG,224             PFK VALUE(S) UPDATED
         OI    STATUS,STPROF       PROFILE REWRITE NOW REQUIRED
NXTPFVAL A     R1,SCRNCOLS         POINT TO THE NEXT SCREEN LINE
         LA    R7,PFKTABL(,R7)     POINT TO NEXT PFK TABLE ENTRY
         B     UPDPFKLP            GO PROCESS NEXT PFK VALUE
PFKPGCHK CLI   MSG,224             WAS ANY PFK VALUE UPDATED?
         BE    PFRESHOW            YES, STAY ON THIS PAGE
         CLI   DISPLNCT+1,12       HALF WAY THROUGH DISPLAY?
         BE    SHOPFVAL            YES, GO SHOW SECOND HALF
         MVI   DISPLNCT+1,0        NO, DISPLAY COMPLETE SO FLAG IT
         B     @COMEXIT            RETURN TO CALLING COMPONENT
PFRESHOW MVI   DISPLNCT+1,0        SHOW PFK VALUE DISPLAY FROM PFK 1
         CLI   0(R14),C'1'         UPDATE IN PFK 13-24 RANGE?
         BNE   SHOPFVAL            NO
         MVI   DISPLNCT+1,12       YES, RESHOW SECOND HALF FROM PFK 13
SHOPFVAL L     R2,SCRNCOLS         GET SCREEN WIDTH
         LA    R1,0(R2,R6)         POINT PAST FIRST LINE
         TM    STATUS13,$13TSO     REVTSO ACTIVE?
         BO    SHOPFTSO            YES
         TM    STATUS11,$11EDT     REVEDIT ACTIVE?
         BNO   SHOPFTOP            NO, LEAVE TOP LINE ALONE
         LA    R0,20               YES
         SR    R1,R0
         MVI   0(R1),C' '          REMOVE COLUMNS INDICATION FOR VISTA
         MVC   1(19,R1),0(R1)
         B     SHOPFTOP            NO, LEAVE TOP LINE ALONE
SHOPFTSO MVI   1(R1),C' '          BLANK SECOND LINE
         MVC   2(78,R1),1(R1)
SHOPFTOP AR    R2,R2               DOUBLE SCREEN WIDTH
         L     R1,SCREENSZ         GET SCREEN CAPACITY
         AR    R6,R2               POINT TO THIRD SCREEN LINE
         SR    R1,R2               GET SIZE AFTER THIS POINT
         LA    R15,C' '
         SLL   R15,24              SET PAD AND ZERO SOURCE LENGTH
         LR    R0,R6               SET TARGET ADDRESS
         MVCL  R0,R14              BLANK OUT REVBUF
         AR    R0,R2               SKIP TWO SHADOW LINES
         L     R1,SCREENSZ         GET SCREEN CAPACITY
         SR    R1,R2               GET SIZE LESS TWO LINES
         LA    R15,X'01'           INTERNAL CODE FOR BLUE
         SLL   R15,24              SET PAD AND ZERO SOURCE LENGTH
         MVCL  R0,R14              SET REVSHDW TO BLUE
         A     R6,SCRNCOLS         POINT TO FOURTH SCREEN LINE
         ICM   R1,15,FMTAREA       IS THERE A FORMAT DYNAMIC AREA?
         BZ    DSPFMTOK            NO
         USING @FMTAREA,R1
         LA    R0,FMTFELS          YES, POINT TO ELEMENT HOLD AREA
         C     R0,FMTFELAD         ANY ELEMENTS LOADED?
         BNL   DSPFMTOK            NO
         MVC   0(21,R6),PFFMTMSG   YES
         MVC   22(8,R6),FMTNAME    SHOW FORMAT NAME
         DROP  R1                  @FMTAREA
DSPFMTOK MVC   69(11,R6),PFKRELNO  SHOW 'REVIEW' RELEASE NUMBER
         A     R6,SCRNCOLS         POINT TO NEXT (FIFTH) SCREEN LINE
         LR    R5,R6               COPY LINE POINTER
         A     R5,SCREENSZ         POINT TO SHADOW BUFFER LINE
         LA    R8,12               PREPARE TO SHOW 12 PFKS
         CLI   SCRNLNES+3,32       AT LEAST 32 SCREEN LINES?
         BL    *+8                 NO
         LA    R8,24               YES, SHOW 24 PFKS
         LA    R1,4(,R8)           GET NUMBER OF SCREEN LINES TO USE
         M     R0,SCRNCOLS         GET BYTE COUNT FOR THIS MANY LINES
         LR    R0,R5               POINT TO LINES' SHADOW
         LA    R15,X'07'           GET WHITE CODE FOR THE BORDER
         SLL   R15,24              PROMOTE IT TO PAD AND ZERO LENGTH
         MVCL  R0,R14              SET THE COLOUR OF THESE LINES
*   TOP BORDER
         MVI   5(R6),C'_'          MAKE TOP BORDER FROM UNDERLINES
         MVC   6(70,R6),5(R6)
         TM    STATUS5,$5EDS+$5GE  GE ALLOWED AND SUPPORTED?
         BNO   PFTBDONE            NO, NO EXCUSE TO SHOW SOME SNAZZIES
         MVI   4(R6),X'C5'         TOP LEFT CORNER
         MVI   5(R6),X'A2'         HORIZONTAL LINE
         MVC   6(70,R6),5(R6)      PROPAGATE HORIZONTAL LINE
         MVI   10(R6),X'D7'        TOP "T"
         MVI   76(R6),X'D5'        TOP RIGHT CORNER
         MVI   4(R5),X'47'         WHITE WITH GRAPHIC ESCAPE
         MVC   5(72,R5),4(R5)      SAME FOR WHOLE TOP BORDER
PFTBDONE A     R6,SCRNCOLS         POINT TO NEXT PRIMARY BUFFER LINE
         A     R5,SCRNCOLS         POINT TO NEXT SHADOW BUFFER LINE
*   COLUMN HEADINGS
         MVI   4(R6),C'|'          LEFT BORDER
         MVC   6(3,R6),CPFK        HEADING TEXT
         MVI   10(R6),C'|'         COLUMN BORDER
         MVC   27(34,R6),PFKCOLHD  HEADING TEXT
         MVI   76(R6),C'|'         RIGHT BORDER
         MVI   5(R5),X'01'         SET BLUE COLUMN HEADING COLOUR
         MVC   6(70,R5),5(R5)      PROPOGATE ALONG LINE
         MVI   10(R5),X'07'        RESTORE WHITE COLUMN BORDER COLOUR
         TM    STATUS5,$5EDS+$5GE  GE ALLOWED AND SUPPORTED?
         BNO   PFHDDONE            NO, CANNOT DISPLAY APL CHARACTERS
         MVI   4(R6),X'85'         VERTICAL LINE FOR LEFT BORDER
         MVI   4(R5),X'47'         WHITE WITH GRAPHIC ESCAPE
         MVI   10(R6),X'85'        VERTICAL LINE FOR COLUMN BORDER
         MVI   10(R5),X'47'        WHITE WITH GRAPHIC ESCAPE
         MVI   76(R6),X'85'        VERTICAL LINE FOR RIGHT BORDER
         MVI   76(R5),X'47'        WHITE WITH GRAPHIC ESCAPE
PFHDDONE A     R6,SCRNCOLS         POINT TO NEXT PRIMARY BUFFER LINE
         A     R5,SCRNCOLS         POINT TO NEXT SHADOW BUFFER LINE
*   ROW BORDER UNDER COLUMN HEADINGS
         MVI   5(R6),C'_'          MAKE TOP BORDER FROM UNDERLINES
         MVC   6(70,R6),5(R6)
         MVI   4(R6),C'|'          LEFT BORDER
         MVI   10(R6),C'|'         COLUMN BORDER
         MVI   76(R6),C'|'         RIGHT BORDER
         TM    STATUS5,$5EDS+$5GE  GE ALLOWED AND SUPPORTED?
         BNO   PFRBDONE            NO, CANNOT DISPLAY APL CHARACTERS
         MVI   5(R6),X'A2'         HORIZONTAL LINE
         MVC   6(70,R6),5(R6)      PROPAGATE HORIZONTAL LINE
         MVI   4(R6),X'C6'         LEFT "T"
         MVI   10(R6),X'D3'        "CROSS"
         MVI   76(R6),X'D6'        RIGHT "T"
         MVI   4(R5),X'47'         WHITE WITH GRAPHIC ESCAPE
         MVC   5(72,R5),4(R5)      SAME FOR WHOLE ROW BORDER
PFRBDONE A     R6,SCRNCOLS         POINT TO NEXT PRIMARY BUFFER LINE
         A     R5,SCRNCOLS         POINT TO NEXT SHADOW BUFFER LINE
*   SHOW EACH PFK WITH ITS VALUE
         SR    R1,R1               START WITH PFK 1
         CLI   DISPLNCT+1,12       IN THE MIDDLE OF IT?
         BNE   *+8                 NO, START FROM THE START
         LA    R1,12               YES, RESUME FROM PFK 13
         LR    R7,R1               COPY PF KEYS ALREADY DONE
         SLL   R7,6                ASSUME PFKTABL IS 64
         LA    R7,PFKTAB(R7)       POINT TO PFK TABLE ENTRY TO SHOW
PFK#LOOP MVI   4(R6),C'|'          LEFT BORDER
         MVC   5(3,R6),CPFK        HEADING TEXT
         LA    R1,1(,R1)           INCREMENT PFK NUMBER
         CVD   R1,DOUBLE
         OI    DOUBLE+7,15
         UNPK  8(2,R6),DOUBLE+6(2) SHOW PFK NUMBER
         MVI   10(R6),C'|'         COLUMN BORDER
         MVI   11(R6),FLDINHI      START OF INPUT FIELD
         MVC   12(63,R6),1(R7)     LOAD PFK VALUE
         MVI   75(R6),FLDOUTLO     END OF INPUT FIELD
         MVI   76(R6),C'|'         RIGHT BORDER
         MVI   5(R5),X'01'         SHOW PFK IN BLUE
         MVC   6(4,R5),5(R5)
         MVI   11(R5),X'35'        UNDERSCORE TURQUOISE FOR INPUT FIELD
         MVC   12(63,R5),11(R5)
         TM    STATUS5,$5EDS+$5GE  GE ALLOWED AND SUPPORTED?
         BNO   PFK#DONE            NO, CANNOT DISPLAY APL CHARACTERS
         MVI   4(R6),X'85'         VERTICAL LINE FOR LEFT BORDER
         MVI   4(R5),X'47'         WHITE WITH GRAPHIC ESCAPE
         MVI   10(R6),X'85'        VERTICAL LINE FOR COLUMN BORDER
         MVI   10(R5),X'47'        WHITE WITH GRAPHIC ESCAPE
         MVI   76(R6),X'85'        VERTICAL LINE FOR RIGHT BORDER
         MVI   76(R5),X'47'        WHITE WITH GRAPHIC ESCAPE
PFK#DONE LA    R7,PFKTABL(,R7)     POINT TO NEXT PFK TABLE ENTRY
         A     R6,SCRNCOLS         POINT TO NEXT PRIMARY BUFFER LINE
         A     R5,SCRNCOLS         POINT TO NEXT SHADOW BUFFER LINE
         BCT   R8,PFK#LOOP         SHOW NEXT PFK
*   BOTTOM BORDER
         MVI   5(R6),C'_'          MAKE BOTTOM BORDER FROM UNDERLINES
         MVC   6(70,R6),5(R6)
         MVI   4(R6),C'|'          LEFT BORDER
         MVI   10(R6),C'|'         COLUMN BORDER
         MVI   76(R6),C'|'         RIGHT BORDER
         TM    STATUS5,$5EDS+$5GE  GE ALLOWED AND SUPPORTED?
         BNO   PFBBDONE            NO, CANNOT DISPLAY APL CHARACTERS
         MVI   4(R6),X'C4'         BOTTOM LEFT CORNER
         MVI   5(R6),X'A2'         HORIZONTAL LINE
         MVC   6(70,R6),5(R6)      PROPAGATE HORIZONTAL LINE
         MVI   10(R6),X'C7'        BOTTOM "T"
         MVI   76(R6),X'D4'        BOTTOM RIGHT CORNER
         MVI   4(R5),X'47'         WHITE WITH GRAPHIC ESCAPE
         MVC   5(72,R5),4(R5)      SAME FOR WHOLE BOTTOM BORDER
*   TIDY UP AND EXIT
PFBBDONE STH   R1,DISPLNCT         REMEMBER LAST PFK SHOWN
         A     R6,SCRNCOLS
         A     R6,SCRNCOLS
         C     R6,SHADOWBF         BEYOND END OF SCREEN?
         BNL   @MSGCOMM            YES, RAN OUT OF DISPLAY LINES
         MVC   24(32,R6),PFKDFMSG  LET USER KNOW ABOUT 'PFK0' COMMAND
         B     @MSGCOMM            GO DISPLAY PFK VALUES
         DROP  R12                 SHOWPFKS
         SPACE
         DC    0D'0'
         LTORG
PFFMTMSG DC    CL21'LOADED FORMAT NAME IS'
PFKRELNO DC    CL11'(R&REL.)'      REVIEW RELEASE NUMBER
PFKCOLHD DC    CL34'CURRENT VALUE - OVERTYPE TO CHANGE'
PFKDFMSG DC    CL32'USE ''PFK0'' TO SET DEFAULT VALUES'
         DC    0H'0'
         SPACE
         SPACE
**********************************************************************
*                                                          *         *
*         FORMAT AND DISPLAY CONTENTS DIRECTORY ELEMENTS   *  R41.7  *
*                                                          * APR2008 *
**********************************************************************
         SPACE
         USING SHOWCDES,R12
SHOWCDES LR    R12,R15             SET LOCAL BASE
         CLI   DISPTYPE,3          MAYBE ANOTHER DISPLAY IN PROGRESS?
         BE    *+10                NO
         XC    DISPLNCT,DISPLNCT   YES, RESET SHOWN LINE COUNT
         MVI   DISPTYPE,3          SET CURRENT DISPLAY TYPE
         OI    STATUS4,$4REFR      TELL CALLER TO REPAINT WHOLE SCREEN
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    *+8                 YES, DEFINITELY NOT SHOWING PICTURES
         NI    PICFLAGS,255-PICOK  NO, REDRAW OF ANY PICTURE REQUIRED
         L     R6,SCREENBF         POINT TO TEXT SCREEN BUFFER
         L     R2,SCRNCOLS         GET SCREEN WIDTH
         LA    R1,0(R2,R6)         POINT PAST FIRST LINE
         TM    STATUS13,$13TSO     REVTSO ACTIVE?
         BO    SHOCDTSO            YES
         TM    STATUS11,$11EDT     REVEDIT ACTIVE?
         BNO   SHOCDTOP            NO, LEAVE TOP LINE ALONE
         LA    R0,20               YES
         SR    R1,R0
         MVI   0(R1),C' '          REMOVE COLUMNS INDICATION FOR VISTA
         MVC   1(19,R1),0(R1)
         B     SHOCDTOP
SHOCDTSO MVI   1(R1),C' '          BLANK SECOND LINE
         MVC   2(78,R1),1(R1)
SHOCDTOP AR    R2,R2               GET DOUBLE SCREEN WIDTH
         L     R1,SCREENSZ         GET SCREEN CAPACITY
         AR    R6,R2               POINT TO THIRD SCREEN LINE
         SR    R1,R2               GET SIZE AFTER THIS POINT
         LA    R15,C' '
         SLL   R15,24              SET PAD AND ZERO SOURCE LENGTH
         LR    R0,R6               SET TARGET ADDRESS
         MVCL  R0,R14              BLANK OUT REVBUF
         AR    R0,R2               SKIP TWO SHADOW LINES
         L     R1,SCRNCOLS         GET SCREEN WIDTH
         LA    R15,X'36'           CODE FOR UNDERSCORE YELLOW
         SLL   R15,24              SET PAD AND ZERO SOURCE LENGTH
         MVCL  R0,R14              SET THIRD LINE TO YELLOW
         L     R1,SCREENSZ         GET SCREEN CAPACITY
         SR    R1,R2               GET SIZE LESS TWO LINES
         S     R1,SCRNCOLS         GET SIZE LESS THREE LINES
         LA    R15,X'04'           INTERNAL CODE FOR GREEN
         SLL   R15,24              SET PAD AND ZERO SOURCE LENGTH
         MVCL  R0,R14              SET REVSHDW TO GREEN
         SPACE
         MVI   MSG,157             JPA CONTENTS DIRECTORY ELEMENTS
         MVC   0(80,R6),JPACOLS    LABEL COLUMNS
         SR    R2,R2               RESET LINE COUNTER
         AIF   (NOT &ENVZV2).JPACSV0
         CLI   SCRNCOLS+3,115      USING A WIDE SCREEN?
         BL    JPADONHD            NO
         L     R15,CVTPTR(,0)      POINT TO THE CVT
         USING CVT,R15
         CLI   CVTDCB,X'9B'        MVS/ESA OR LATER?
         BNE   JPADONHD            NO, SO CANNOT BE Z/OS
         TM    CVTOSLV6,X'10'      CVTH77B0 - Z/OS 2.3 OR LATER?
         BNO   JPADONHD            NO, THIS IS BEFORE HBB77B0
         DROP  R15                 CVT
         MVC   80(28,R6),JPACOLS2  LABEL ADDITIONAL COLUMNS
JPADONHD DC    0H
.JPACSV0 ANOP
         A     R6,SCRNCOLS         POINT TO FOURTH LINE
         L     R3,PSATOLD          POINT TO THE CURRENT TCB
         USING TCB,R3
         L     R3,TCBJSTCB         POINT TO THE JOB STEP TCB
         ICM   R3,7,TCBJPQ+1       POINT TO THE LAST CDE
         BZ    JPADONE             NO PROGRAMS IN JOB PACK AREA
         DROP  R3                  TCB
         L     R14,SHADOWBF        POINT TO THE SHADOW BUFFER
         ST    R14,SBASAVE         SAVE SCREEN DATA LIMIT ADDRESS
         ICM   R0,15,REVLVL        ISPF VISIBLE LINE COUNT KNOWN?
         BZ    JPALOOP             NO, MAKE NO ADJUSTMENT
         PACK  DOUBLE,REVLVL       YES, CONVERT ISPF CHARACTER ITEM
         CVB   R15,DOUBLE          GET CURRENT LAST VISIBLE LINE NUMBER
         LA    R15,2(,R15)         GET VISIBLE SCREEN LINE COUNT
         C     R15,CFW4            ANYTHING WORTHWHILE?
         BNH   JPALOOP             NO, USE ACTUAL SCREEN SIZE
         C     R15,SCRNLNES        ANYTHING TOO EXTRAVAGANT?
         BH    JPALOOP             YES, USE ACTUAL SCREEN SIZE
         M     R14,SCRNCOLS        GET VISIBLE SCREEN SIZE
         A     R15,SCREENBF        POINT PAST END OF VISIBLE TEXT AREA
         ST    R15,SBASAVE         SAVE SCREEN DATA LIMIT ADDRESS
         SPACE
         USING CDENTRY,R3
         USING JPALINE,R6
JPALOOP  CH    R2,DISPLNCT         UP TO NEW DATA YET?
         BL    JPANEXT             NO, SKIP THIS LINE
         ST    R3,DOUBLE           STORE CDE ADDRESS
         UNPK  JPACDE@(7),DOUBLE+1(4)
         TR    JPACDE@,COMHEX-240
         MVI   JPACDE@+6,C' '
         UNPK  JPARBP(9),CDRRBP(5)
         TR    JPARBP,COMHEX-240
         MVI   JPARBP+8,C' '
         LA    R1,JPARBP
         LA    R14,7
JPA0LP1  CLI   0(R1),C'0'          LEADING ZERO?
         BNE   JPA0OK1             NO
         MVI   0(R1),C' '          YES, SUPPRESS IT
         LA    R1,1(,R1)           POINT TO NEXT DIGIT
         BCT   R14,JPA0LP1
JPA0OK1  MVC   JPANAME,CDNAME
         A     R6,SCREENSZ         POINT TO THE SHADOW
         MVI   JPANAME,X'02'       SHOW THE NAME IN RED
         MVC   JPANAME+1(7),JPANAME
         S     R6,SCREENSZ         BACK TO THE PRIMARY BUFFER
         UNPK  JPAEPA(9),CDENTPT(5)
         TR    JPAEPA,COMHEX-240
         MVI   JPAEPA+8,C' '
         CLC   JPAEPA(2),JPADBL0   TWO LEADING ZEROS?
         BNE   JPAEPAOK            NO
         MVC   JPAEPA(2),JPADBLSP  YES, SUPPRESS THEM
JPAEPAOK L     R5,CDXLMJP          POINT TO EXTENT LIST OR MAJOR CDE
         TM    CDATTR,CDMIN        MINOR CDE?
         BO    JPAMINOR            YES
         MVC   DOUBLE,8(R5)        COPY EXTENT SIZE AND ADDRESS
         NI    DOUBLE,X'7F'        RESET LAST EXTENT FLAG
         UNPK  JPAXTNT(9),DOUBLE+4(5)
         UNPK  JPASIZE(9),DOUBLE(5)
         TR    JPAXTNT(17),COMHEX-240
         MVI   JPAXTNT+8,C' '
         MVI   JPASIZE+8,C' '
         LA    R1,JPAXTNT
         LA    R14,7
JPA0LP2  CLI   0(R1),C'0'          LEADING ZERO?
         BNE   JPA0OK2             NO
         MVI   0(R1),C' '          YES, SUPPRESS IT
         LA    R1,1(,R1)           POINT TO NEXT DIGIT
         BCT   R14,JPA0LP2
JPA0OK2  LA    R1,JPASIZE
         LA    R14,7
JPA0LP3  CLI   0(R1),C'0'          LEADING ZERO?
         BNE   JPA0OK3             NO
         MVI   0(R1),C' '          YES, SUPPRESS IT
         LA    R1,1(,R1)           POINT TO NEXT DIGIT
         BCT   R14,JPA0LP2
JPA0OK3  B     JPAMINOK
         DROP  R3                  CDENTRY
         USING CDENTRY,R5
JPAMINOR MVC   JPAXTNT,JPAALIAS
         MVC   JPASIZE,CDNAME
         A     R6,SCREENSZ         POINT TO THE SHADOW
         MVI   JPAXTNT,X'01'       SHOW REAL NAME IN BLUE
         MVC   JPAXTNT+1(16),JPAXTNT
         S     R6,SCREENSZ         BACK TO THE PRIMARY BUFFER
         DROP  R5                  CDENTRY
         USING CDENTRY,R3
JPAMINOK ICM   R14,3,CDUSE
         CVD   R14,DOUBLE
         MVC   JPAUSE,COMED5
         ED    JPAUSE,DOUBLE+5
         UNPK  JPAATB(3),CDATTRB(2)
         TR    JPAATB,COMHEX-240
         MVI   JPAATB+2,C' '
         SR    R14,R14
         IC    R14,CDATTRB+1       LOAD CDSP (SUBPOOL)
         CVD   R14,DOUBLE
         MVC   JPASP,COMED3
         ED    JPASP,DOUBLE+6
         MVC   DOUBLE(4),CDATTR    COPY LAST FOUR BYTES OF CDE
         UNPK  JPAAT(3),DOUBLE(2)
         UNPK  JPAA2(3),DOUBLE+1(2)
         UNPK  JPAA3(3),DOUBLE+2(2)
         UNPK  JPAA4(3),DOUBLE+3(2)
         TR    JPAAT(11),COMHEX-240
         MVI   JPAAT+2,C' '
         MVI   JPAA2+2,C' '
         MVI   JPAA3+2,C' '
         MVI   JPAA4+2,C' '
         AIF   (NOT &ENVZV2).JPACSV1
         CLI   SCRNCOLS+3,115      USING A WIDE SCREEN?
         BL    JPANEXTL            NO
         L     R15,CVTPTR(,0)      POINT TO THE CVT
         USING CVT,R15
         CLI   CVTDCB,X'9B'        MVS/ESA OR LATER?
         BNE   JPANEXTL            NO, SO CANNOT BE Z/OS
         TM    CVTOSLV6,X'10'      CVTH77B0 - Z/OS 2.3 OR LATER?
         BNO   JPANEXTL            NO, THIS IS BEFORE HBB77B0
         DROP  R15                 CVT
         TM    CDATTRB,CDCDEX      DOES CDE EXTENSION EXIST?
         BNO   JPANEXTL            NO
         L     R15,CDENTRY+44      YES, POINT TO CDX
         TM    CDATTR3,CDPATHN     UNIX PROGRAM?
         BNO   JPANTUNX            NO
         ICM   R14,15,12(R15)      POINT TO PATH NAME AREA
         BZ    JPANEXTL            NO NAME AREA PRESENT
         LH    R15,12(,R14)        GET PATH NAME LENGTH
         LA    R14,14(,R14)        POINT TO ACTUAL PATH NAME
         L     R1,SCRNCOLS         GET SCREEN WIDTH
         AHI   R1,-80              GET TARGET AREA SIZE
         LA    R0,80(,R6)          POINT TO TARGET
         OILH  R15,X'4000'         SET PAD TO BLANK
         MVCL  R0,R14              SHOW PATH NAME
         B     JPANEXTL            THIS LINE NOW COMPLETE
JPANTUNX L     R1,32(,R15)         GET PROVIDER NUMBER
         LA    R1,0(,R1)           ENSURE NOT NEGATIVE
         SLA   R1,2                MULTIPLY BY 4 FOR LITERAL INDEX
         CHI   R1,L'JPAPROVS       MORE THAN IS KNOWN HERE?
         BL    JPA_PROV            NO, PROCEED
         SR    R1,R1               YES, ZERO THE INDEX
JPA_PROV LA    R1,JPAPROVS(R1)
         MVC   80(4,R6),0(R1)      SHOW PROVIDER NAME
         ICM   R1,15,56(R15)       POINT TO UCB
         BZ    JPANEXTL            HANDLE ZERO POINTER
         MVC   DOUBLE,56(R15)      SAVE UCB ADDRESS AND CCHH
         CLI   2(R1),X'FF'         REALLY A UCB?
         BNE   JPANEXTL            NO
         CLI   18(R1),X'20'        REALLY A DASD UCB?
         BNE   JPANEXTL            NO
         TM    3(R1),X'80'         ONLINE?
         BNO   JPANEXTL            NO
         MVC   86(6,R6),28(R1)     SHOW VOLUME LABEL
         LLC   R14,43(,R15)        GET RELATIVE CONCATENATION NUMBER
         MVC   SBASAVE+4(8),44(R15) COPY THE DDNAME
         TM    36(R15),X'80'       PROGRAM FROM A PDSE?
         BNO   JPACHKDD            NO, IT'S FROM A PDS
         L     R15,48(,R15)        YES, POINT TO THE FMD
         MVC   SBASAVE+4(8),44(R15) COPY THE DDNAME
JPACHKDD CLC   JPALNKLS,SBASAVE+4  IS PROGRAM FROM THE LINKLIST?
         BNE   JPANOTLL            NO
JPA_ISLL L     R1,PSAAOLD          POINT TO THE ASCB
         L     R1,ASCBASSB-ASCB(,R1) AND TO THE ASSB
         L     R1,ASSBDLCB-ASSB(,R1) AND TO THE DLCB
         L     R1,16(,R1)            AND TO THE LLT
         C     R14,4(,R1)          CONCATENATION WITHIN RANGE?
         BNL   JPANEXTL            NO
         MHI   R14,45              YES
         LA    R14,8(R14,R1)       POINT TO THE DATA SET NAME
         MVC   94(44,R6),1(R14)    SHOW IT
         B     JPANEXTL            THIS LINE NOW COMPLETE
JPANOTLL CLC   80(4,R6),JPAPROVS+12  IS THE PROVIDER LLA?
         BE    JPANOTDD            YES, THERE IS NO DDNAME
         LR    R0,R14              SAVE THE CONCATENATION NUMBER
         LA    R1,SBASAVE+4        POINT TO DDNAME
         L     R15,COMDDLOC
         BASR  R14,R15             LOCATE THE TIOT ENTRY
         LTR   R15,R15             WAS IT FOUND?
         BNZ   JPAWASDD            YES
JPANOTDD STM   R14,R12,12(R13)     NO, SAVE REGISTERS
         L     R1,PSAAOLD          POINT TO THE ASCB
         L     R1,ASCBASSB-ASCB(,R1) AND TO THE ASSB
         L     R1,ASSBDLCB-ASSB(,R1) AND TO THE DLCB
         L     R1,DLCBDCB@-DLCB(,R1) AND TO THE LINKLIST DCB
         L     R1,DCBDEBAD-IHADCB(,R1) & TO THE LINKLIST DEB
         NILH  R1,X'00FF'          CLEAR THE FLAG BYTE
         USING DEBBASIC,R1
         LLC   R2,DEBAMLNG         GET DATA SET CONCATENATION COUNT
         LLC   R3,DEBNMEXT         GET DASD EXTENT COUNT
         SLA   R3,4                GET DASD SECTION SIZE
         LA    R4,DEBBASND(R3)     POINT TO BPAM SECTION
         SR    R14,R14             RESET CONCATENATION COUNT
         SR    R15,R15             GET FIRST DATA SET DEBDASD INDEX
         AHI   R2,1                ALSO COUNT FIRST DATA SET
         L     R8,DOUBLE           POINT TO UCB FROM CDX
         B     DEB@1ST             ENTER EXTENT SEARCH LOOP
DEB@LOOP LLC   R15,0(,R4)          GET CONCATENATION FIRST EXTENT
         SLA   R15,4               MULTIPLY BY DEBDASDE-DEBDASD
         LA    R4,1(,R4)           ADJUST FOR NEXT DATA SET
         AHI   R14,1               INCREMENT CONCATENATION COUNTER
DEB@1ST  LA    R5,DEBBASND(R15)    POINT TO DATA SET'S FIRST EXTENT
         USING DEBDASD,R5
         L     R7,DEBUCBAD         GET UCB ADDRESS
         TM    DEBFLGS2,DEB31UCB   31-BIT UCB ADDRESS?
         BO    DEB@UCB@            YES
         NILH  R7,X'00FF'          NO, CLEAR HIGH BYTE
DEB@UCB@ CLC   28(6,R7),28(R8)     IS THIS THE SAME UCB?
         BNE   DEB@NEXT            NO, THIS ONE IS A MISMATCH
         CLC   DOUBLE+4(4),DEBSTRCC   DOES CCHH ALSO MATCH?
         BNE   DEB@NEXT            NO
         DROP  R5                  DEBDASD
         LM    R15,R12,16(R13)     RESTORE REGISTERS
         B     JPA_ISLL            IT IS FROM THE LINKLIST AFTER ALL
DEB@NEXT BCT   R2,DEB@LOOP         GO CHECK NEXT DATA SET
         DROP  R1                  DEBBASIC
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         B     JPANEXTL            THIS LINE NOW COMPLETE
JPAWASDD LTR   R0,R0               NEED TO GO FURTHER?
         BZ    JPAGOTDD            NO
         SR    R1,R1               YES
JPADDLP  IC    R1,0(,R15)          GET THE LENGTH OF THIS TIOT ENTRY
         BZ    JPANEXTL            END OF TIOT REACHED
         ALR   R15,R1              POINT TO NEXT TIOT ENTRY
         BCT   R0,JPADDLP
JPAGOTDD CLI   0(R15),0            END OF TIOT?
         BZ    JPANEXTL            YES, WHAT A FIZZER
         L     R1,SCREENWK
         AHI   R1,1024
         NILL  R1,X'FFF0'          POINT TO WORK AREA
         LA    R14,16(,R1)
         ST    R14,64(,R1)
         USING ZB505,R14
         XC    SWAEPAX,SWAEPAX
         MVC   SWVA,12(R15)        LOAD TIOEJFCB
         DROP  R14                 ZB505
         SWAREQ FCODE=RL,EPA=64(R1),UNAUTH=YES,MF=(E,(1))
         LTR   R15,R15             WAS IT FOUND?
         BNZ   JPANEXTL            NO
         L     R1,16(,R1)          POINT TO JFCB
         MVC   94(44,R6),0(R1)     SHOW DATA SET NAME
.JPACSV1 ANOP
JPANEXTL A     R6,SCRNCOLS         POINT TO NEXT DISPLAY LINE
JPANEXT  LA    R2,1(,R2)           INCREMENT LINE COUNTER
         C     R6,SBASAVE          FILLED UP SCREEN?
         BNL   JPADONE             YES, BETTER STOP
         ICM   R3,15,CDCHAIN       POINT TO NEXT CDE
         BNZ   JPALOOP             GO SHOW IT
         SR    R2,R2               FLAG END OF DISPLAY REACHED
         DROP  R3                  CDENTRY
         SPACE
JPADONE  STH   R2,DISPLNCT         SAVE DISPLAY STATUS
         LA    R1,9                GET LEGEND LINE COUNT
         MH    R1,SCRNCOLS+2       GET THE SIZE OF THESE LINES
         L     R6,SBASAVE          POINT PAST SCREEN'S TEXT
         SR    R6,R1               POINT TO START OF THESE LINES
         CLI   JPANAME,C' '        ARE THESE LAST LINES UNUSED?
         BNE   @MSGCOMM            NO, NO ROOM FOR LEGEND
         DROP  R6                  JPALINE
         SPACE
         L     R0,SCREENSZ
         AR    R0,R6               POINT TO SHADOW OF LEGEND LINES
         LR    R14,R0              COPY THIS ADDRESS
         LA    R15,X'01'           SHOW LEGEND IN BLUE
         SLL   R15,24              PROMOTE PAD AND ZERO SOURCE LENGTH
         MVCL  R0,R14              MAKE NINE LAST LINES BLUE
         MVI   20(R14),X'31'       UNDERSCORE LEGEND HEADING
         MVC   21(39,R14),20(R14)
         LA    R0,9                GET NUMBER OF LINES TO LOAD
         LA    R1,JPABITS          POINT TO LEGEND TEXT
JPALEGLP MVC   20(40,R6),0(R1)     LOAD A LINE
         A     R6,SCRNCOLS         POINT TO THE NEXT SCREEN LINE
         LA    R1,40(,R1)          POINT TO THE NEXT TEXT LINE
         BCT   R0,JPALEGLP
         B     @MSGCOMM            DISPLAY COMPLETE
         SPACE
         DROP  R12                 SHOWCDES
         SPACE
         AIF   (NOT &ENVZV2).JPACSV2
JPALNKLS DC    CL8'-LNKLST-'
JPAPROVS DC    C'UNK LPA PGMFLLAFAOSLJPA RTLS'
         LTORG
.JPACSV2 ANOP
JPACOLS  DC    CL80'   CDE@      RBP --NAME-- AMODE/EP   EXTENT     SIZ+
               E   USE ATB SP AT A2 A3 A4   '
JPADBLSP EQU   *-2,2
         AIF   (NOT &ENVZV2).JPACSV3
JPACOLS2 DC    CL28'PROV  VOLUME  DATA SET NAME '
.JPACSV3 ANOP
JPAALIAS DC    CL8'ALIAS OF'
JPADBL0  DC    CL2'00'
         SPACE
JPABITS  DC    CL40'BIT  CDATTRB  CDATTR   CDATTR2  CDATTR3 '
         DC    CL40' 8.  CDEOM    CDNIP    CDSPZ    CDPATHN '
         DC    CL40' 4.  CDIDENTY CDNIC    CDREL    CDPML   '
         DC    CL40' 2.  CDRACDTY CDREN    CDXLE    CDESPLIT'
         DC    CL40' 1.  CDCDEX   CDSER    CDRLC    CDSYSHLB'
         DC    CL40' .8  CDELPDE  CDNFN    CDEANYM  CDELPOK '
         DC    CL40' .4  CDGLOBAL CDMIN    CDOLY    CDEDYLPA'
         DC    CL40' .2  CDCONTMN CDJPA    CDSYSLIB CDEPROTP'
         DC    CL40' .1  CDRACF   CDNLR    CDAUTH           '
         SPACE
         SPACE
**********************************************************************
*                                                          *         *
*         FORMAT AND DISPLAY TASK CONTROL BLOCKS           *  R42.1  *
*                                                          * DEC2008 *
**********************************************************************
         SPACE
         USING SHOWTCBS,R12
SHOWTCBS LR    R12,R15             SET LOCAL BASE
         CLI   DISPTYPE,4          MAYBE ANOTHER DISPLAY IN PROGRESS?
         BE    *+10                NO
         XC    DISPLNCT,DISPLNCT   YES, RESET SHOWN LINE COUNT
         MVI   DISPTYPE,4          SET CURRENT DISPLAY TYPE
         OI    STATUS4,$4REFR      TELL CALLER TO REPAINT WHOLE SCREEN
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    *+8                 YES, DEFINITELY NOT SHOWING PICTURES
         NI    PICFLAGS,255-PICOK  NO, REDRAW OF ANY PICTURE REQUIRED
         L     R14,SHADOWBF        POINT TO THE SHADOW BUFFER
         ICM   R0,15,REVLVL        ISPF VISIBLE LINE COUNT KNOWN?
         BZ    SHOTCBOT            NO, MAKE NO ADJUSTMENT
         PACK  DOUBLE,REVLVL       YES, CONVERT ISPF CHARACTER ITEM
         CVB   R15,DOUBLE          GET CURRENT LAST VISIBLE LINE NUMBER
         LA    R15,2(,R15)         GET VISIBLE SCREEN LINE COUNT
         C     R15,CFW4            ANYTHING WORTHWHILE?
         BNH   SHOTCBOT            NO, USE ACTUAL SCREEN SIZE
         C     R15,SCRNLNES        ANYTHING TOO EXTRAVAGANT?
         BH    SHOTCBOT            YES, USE ACTUAL SCREEN SIZE
         M     R14,SCRNCOLS        GET VISIBLE SCREEN SIZE
         L     R14,SCREENBF        POINT TO VISIBLE TEXT BUFFER
         ALR   R14,R15             POINT PAST END OF VISIBLE TEXT AREA
SHOTCBOT ST    R14,SBASAVE         SAVE SCREEN DATA LIMIT ADDRESS
         L     R6,SCREENBF         POINT TO TEXT SCREEN BUFFER
         L     R2,SCRNCOLS         GET SCREEN WIDTH
         LA    R1,0(R2,R6)         POINT PAST FIRST LINE
         TM    STATUS13,$13TSO     REVTSO ACTIVE?
         BO    SHOTCTSO            YES
         TM    STATUS11,$11EDT     REVEDIT ACTIVE?
         BNO   SHOTCTOP            NO, LEAVE TOP LINE ALONE
         LA    R0,20               YES
         SR    R1,R0
         MVI   0(R1),C' '          REMOVE COLUMNS INDICATION FOR VISTA
         MVC   1(19,R1),0(R1)
         B     SHOTCTOP
SHOTCTSO MVI   1(R1),C' '          BLANK SECOND LINE
         MVC   2(78,R1),1(R1)
SHOTCTOP AR    R2,R2               DOUBLE SCREEN WIDTH
         L     R1,SCREENSZ         GET SCREEN CAPACITY
         AR    R6,R2               POINT TO THIRD SCREEN LINE
         SR    R1,R2               GET SIZE AFTER THIS POINT
         LA    R15,C' '
         SLL   R15,24              SET PAD AND ZERO SOURCE LENGTH
         LR    R0,R6               SET TARGET ADDRESS
         MVCL  R0,R14              BLANK OUT REVBUF
         AR    R0,R2               SKIP TWO SHADOW LINES
         ICM   R1,3,DISPLNCT       STARTING FROM START?
         BNZ   TASKRES1            NO, IT IS A RESTART
         L     R1,SCRNCOLS         GET SCREEN WIDTH
         LA    R15,X'06'           INTERNAL CODE FOR YELLOW
         SLL   R15,24              SET PAD AND ZERO SOURCE LENGTH
         MVCL  R0,R14              COLOUR THIRD LINE YELLOW
         L     R1,SCRNCOLS         GET SCREEN WIDTH
         LA    R15,X'35'           INTERNAL CODE FOR UNDERSCORE TURQ
         SLL   R15,24              SET PAD AND ZERO SOURCE LENGTH
         MVCL  R0,R14              UNDERSCORE FOURTH LINE
         AR    R2,R2
TASKRES1 L     R1,SCREENSZ         GET SCREEN CAPACITY
         SR    R1,R2               GET SIZE LESS FOUR LINES
         LA    R15,X'05'           INTERNAL CODE FOR TURQUOISE
         SLL   R15,24              SET PAD AND ZERO SOURCE LENGTH
         MVCL  R0,R14              SET REVSHDW TO TURQUOISE
         SPACE
         MVI   MSG,158             TASK AND REQUEST BLOCK STRUCTURE
         LA    R2,2                COUNT TWO HEADING LINES
         CLM   R2,12,DISPLNCT      STARTING FROM START?
         BNE   TASKRES2            NO, IT IS A RESTART
         MVC   0(JOBLINEL,R6),JOBHDRLN
         A     R6,SCRNCOLS         POINT TO THE FOURTH SCREEN LINE
         USING JOBLINE,R6
         L     R3,PSATOLD          POINT TO THE CURRENT TCB
         USING TCB,R3
         L     R1,TCBTIO           POINT TO THE TIOT
         MVC   JOBNAME,0(R1)
         MVC   STEPNAME,8(R1)
         MVC   PROCSTEP,16(R1)
         ICM   R1,7,TCBJSCBB       POINT TO THE JSCB
         USING IEZJSCB,R1
         L     R1,JSCBSSIB         POINT TO THE SSIB
         DROP  R1                  IEZJSCB
         USING SSIB,R1
         MVC   JOBIDENT,SSIBJBID   COPY THE JOB IDENTIFIER
         DROP  R1                  SSIB
         ICM   R3,15,TCBTCT        POINT TO THE TCT
         BZ    SMFTCTOK            SKIP IF NO SMF IN ADDRESS SPACE
         DROP  R3                  TCB
         USING SMFTCT,R3
         L     R0,TCTLOUT          SHOW TPUT COUNT
         LA    R15,JOBTPUTS
         BAS   R14,TCBSHOW5
         L     R0,TCTLIN           SHOW TGET COUNT
         LA    R15,JOBTGETS
         BAS   R14,TCBSHOW5
         DROP  R3                  SMFTCT
SMFTCTOK L     R3,PSAAOLD          POINT TO THE ASCB
         USING ASCB,R3
         UNPK  JOBASID(5),ASCBASID(3)
         TR    JOBASID,COMHEX-240  SHOW ASID IN HEXADECIMAL
         MVI   JOBASID+4,C' '
         LM    R0,R1,ASCBEJST      GET ADDRESS SPACE TCB TIME
         LA    R15,JOBTCB          POINT TO DISPLAY AREA
         BAS   R14,CPUTIMEX        FORMAT THE CPU TIME
         LM    R0,R1,ASCBSRBT      GET ADDRESS SPACE SRB TIME
         LA    R15,JOBSRB          POINT TO DISPLAY AREA
         BAS   R14,CPUTIMEX        FORMAT THE CPU TIME
         DROP  R6                  JOBLINE
         A     R6,SCRNCOLS         POINT TO THE FIFTH SCREEN LINE
TASKRES2 EQU   *
         SPACE
         AIF   (&ENV390).REGNSYS
         L     R15,CVTPTR(,0)      POINT TO THE CVT
         USING CVT,R15
         CLI   CVTDCB,X'13'        MVS/370?
         BNE   REGNDONE            NO
         DROP  R15                 CVT
.REGNSYS ANOP
         LA    R2,4                COUNT TWO MORE HEADING LINES
         CH    R2,DISPLNCT         UP TO NEW DATA YET?
         BL    REGNDONE            NO, SKIP DATA GENERATION
         LR    R0,R6               POINT TO THE LINE
         S     R0,SCRNCOLS         POINT TO THE PREVIOUS LINE
         A     R0,SCREENSZ         POINT TO ITS SHADOW
         L     R1,SCRNCOLS         GET THE LINE SIZE
         LA    R15,X'05'           INTERNAL CODE FOR TURQUOISE
         SLL   R15,24              SET PAD AND ZERO SOURCE LENGTH
         MVCL  R0,R14              REMOVE THE UNDERSCORE FROM 4TH LINE
         L     R1,SCRNCOLS         GET THE LINE SIZE
         LA    R15,X'06'           INTERNAL CODE FOR YELLOW
         SLL   R15,24              SET PAD AND ZERO SOURCE LENGTH
         MVCL  R0,R14              COLOUR FIFTH LINE YELLOW
         L     R1,SCRNCOLS         GET SCREEN WIDTH
         LA    R15,X'35'           INTERNAL CODE FOR UNDERSCORE TURQ
         SLL   R15,24              SET PAD AND ZERO SOURCE LENGTH
         MVCL  R0,R14              UNDERSCORE SIXTH LINE
         MVC   0(80,R6),JOBHDRL2   LOAD HEADING LINE TEXT
         A     R6,SCRNCOLS         POINT TO NEXT LINE
         USING JOBLINE2,R6
         MVC   TCBLIMIT,=C'NO LIMIT'
         AIF   (&ENV390).TOFF390
         TM    ASCBFLG1,ASCBTOFF   EXEMPT FROM TIMING CHECKS?
         AGO   .TOFFOK
.TOFF390 ANOP
         TM    ASCBRCTF,ASCBTOFF   EXEMPT FROM TIMING CHECKS?
.TOFFOK  ANOP
         BO    TCBLIMOK            YES, NO TCB TIME LIMIT
         L     R1,ASCBJSTL         LOAD TASK CPU TIME LIMIT
         MVC   TCBLIMIT,=C'**NONE**'
         S     R1,ASCBEJST         SUBTRACT USED TCB TIME
         BNP   TCBLIMOK            BRANCH IF NO TIME LEFT
         MVC   TCBLIMIT,TCBLIMIT-1 BLANK OUT DISPLAY AREA
         LA    R15,TCBLIMIT-2      POINT TO DISPLAY AREA
         SLR   R0,R0               CLEAR FOR SHIFT
         SLDL  R0,20               CONVERT TO MICROSECONDS
         BAS   R14,CPUTIMEM        CONVERT TO HH:MM:SS
         MVC   TCBLIMIT+8(3),TCBLIMIT+12   CLEAR CENTISECONDS
         AIF   (&ENV390).REGN390
TCBLIMOK L     R1,ASCBOUCB         POINT TO THE OUCB
         USING OUCB,R1
         SLR   R0,R0               GET SMF EXCP COUNT
         ICM   R0,3,ASCBIOSM
         A     R0,OUCBIOSM         ADD ACCUMULATED EXCP COUNT
         CVD   R0,DOUBLE
         MVI   #EXCP+1,X'20'       LOAD EDIT MASK
         MVC   #EXCP+2(10),#EXCP+1
         ED    #EXCP,DOUBLE+2      SHOW ADDRESS SPACE EXCP COUNT
         DROP  R1                  OUCB
         SLR   R0,R0
         ICM   R0,3,ASCBFMCT       GET ALLOCATED PAGE FRAME COUNT
         LA    R15,#FRAMES         POINT TO DISPLAY AREA
         BAS   R14,TCBSHOW5        SHOW FRAMES OCCUPIED
         SLA   R0,12               CONVERT FRAME COUNT TO BYTES
         LA    R15,REALMEM         POINT TO DISPLAY AREA
         BAS   R14,TCBSHOK5        SHOW REAL STORAGE KILOBYTES
         SLR   R0,R0
         SLR   R1,R1
         ICM   R0,3,ASCBVSC        GET VIO SLOT COUNT
         ICM   R1,3,ASCBNVSC       GET NON-VIO SLOT COUNT
         AR    R0,R1               TOTAL THEM
         CVD   R0,DOUBLE
         MVC   #SLOTS,=X'4020202020202120'
         ED    #SLOTS,DOUBLE+4
         SLA   R0,2                CONVERT SLOT COUNT TO KILOBYTES
         CVD   R0,DOUBLE
         MVC   AUXMEM,=X'4020202020202120'
         ED    AUXMEM,DOUBLE+4
         MVI   AUXMEMK,C'K'
         L     R4,ASCBLDA          POINT TO THE LDA
         USING LDA,R4
         L     R0,VVREGSZ          GET SPECIFIED REGION SIZE
         LA    R15,RGNREQ          POINT TO DISPLAY AREA
         BAS   R14,TCBSHOK5        SHOW REQUESTED REGION SIZE
         L     R0,CURRGNTP         GET CURRENT TOP OF REGION
         L     R4,ASDPQE           POINT TO THE ADDRESS SPACE PQE
         DROP  R4                  LDA
         USING PQESECT,R4
         L     R1,PQESIZE          GET ADDRESS SPACE REGION SIZE
         L     R4,PQEREGN          GET START OF REGION ADDRESS
         DROP  R4                  PQESECT
         SR    R0,R4               GET THE CURRENT REGION USAGE
         AR    R1,R4               POINT PAST LSQA
         LA    R15,RGNNOW          POINT TO DISPLAY AREA
         BAS   R14,TCBSHOK5        SHOW CURRENT REGION SIZE
         L     R4,PSATOLD          POINT TO THE TCB
         L     R4,TCBTCT-TCB(,R4)  POINT TO THE TCT
         LTR   R4,R4               SMF ACTIVE?
         BZ    REGNOKAY            APPARENTLY NOT - UNUSUAL FOR TSO
         USING SMFTCT,R4
         L     R4,TCTCRTBL         POINT TO THE "CORE" TABLE
         DROP  R4                  SMFTCT
         USING TCTCORE,R4
         L     R0,TCTLWM           GET USER REGION HIGH WATER MARK
         S     R0,TCTRBA           SUBTRACT REGION BOTTOM ADDRESS
         LA    R15,RGNHWM          POINT TO DISPLAY AREA
         BAS   R14,TCBSHOK5        SHOW LARGEST USED REGION SIZE
         LR    R0,R1               POINT PAST LSQA
         S     R0,TCTHWM           GET MAXIMUM HIGH PRIVATE AREA USED
         LA    R15,SYSHWM          POINT TO DISPLAY AREA
         BAS   R14,TCBSHOK5        SHOW LARGEST USED "LSQA" SIZE
         DROP  R4                  TCTCORE
         AGO   .REGNOK
.REGN390 ANOP
TCBLIMOK L     R1,ASCBIOSC         GET ADDRESS SPACE I/O SERVICE COUNT
         CVD   R0,DOUBLE
         MVI   #EXCP+1,X'20'       LOAD EDIT MASK
         MVC   #EXCP+2(10),#EXCP+1
         ED    #EXCP,DOUBLE+2      SHOW ADDRESS SPACE EXCP COUNT
         L     R4,ASCBLDA          POINT TO THE LDA
         USING LDA,R4
*        ---   ---
         L     R0,LDAREGRQ         GET SPECIFIED REGION SIZE
         LA    R15,RGNREQ          POINT TO DISPLAY AREA
         BAS   R14,TCBSHOK7        SHOW REQUESTED REGION SIZE
         MVC   RGNREQ(9),RGNREQ+1  CRIB A COLUMN
*        ---   ---
         L     R0,LDALOAL          GET CURRENT USER REGION USAGE
         LA    R15,RGNNOW          POINT TO DISPLAY AREA
         BAS   R14,TCBSHOK5        SHOW CURRENT REGION SIZE
*        ---   ---
         L     R0,LDAELOAL         GET CURRENT EXT USER REGION USAGE
         LA    R15,RGNENOW         POINT TO DISPLAY AREA
         BAS   R14,TCBSHOK7        SHOW CURRENT REGION SIZE
*        ---   ---
         DROP  R4                  LDA
         L     R4,PSATOLD          POINT TO THE TCB
         L     R4,TCBTCT-TCB(,R4)  POINT TO THE TCT
         LTR   R4,R4               SMF ACTIVE?
         BZ    REGNOKAY            APPARENTLY NOT - UNUSUAL FOR TSO
         USING SMFTCT,R4
         L     R4,TCTCRTBL         POINT TO THE "CORE" TABLE
         DROP  R4                  SMFTCT
         USING TCTCORE,R4
*        ---   ---
         L     R0,TCTLWM           GET USER REGION HIGH WATER MARK
         LA    R15,RGNHWM          POINT TO DISPLAY AREA
         BAS   R14,TCBSHOK5        SHOW LARGEST USED REGION SIZE
*        ---   ---
         L     R0,TCTHWM           GET MAXIMUM HIGH PRIVATE AREA USED
         LA    R15,RGNSYS          POINT TO DISPLAY AREA
         BAS   R14,TCBSHOK5        SHOW LARGEST USED "LSQA" SIZE
*        ---   ---
         L     R0,TCTELWM          GET USER REGION HIGH WATER MARK
         LA    R15,RGNEHWM         POINT TO DISPLAY AREA
         BAS   R14,TCBSHOK7        SHOW LARGEST USED REGION SIZE
*        ---   ---
         L     R0,TCTEHWM          GET MAXIMUM HIGH PRIVATE AREA USED
         LA    R15,RGNESYS         POINT TO DISPLAY AREA
         BAS   R14,TCBSHOK7        SHOW LARGEST USED "ELSQA" SIZE
*        ---   ---
         DROP  R4                  TCTCORE
.REGNOK  ANOP
         DROP  R6                  JOBLINE2
REGNOKAY A     R6,SCRNCOLS         POINT TO NEXT LINE
         SPACE
REGNDONE L     R1,PSATOLD          POINT TO THE CURRENT TCB
         USING TCB,R1
         ICM   R1,7,TCBJSCBB       POINT TO THE JSCB
         DROP  R1                  TCB
         USING IEZJSCB,R1
         TM    JSCSCTP+2,X'01'     ACTUAL SCT ADDRESS?
         BNZ   PARMDONE            NO, SVA TOKEN OF SCT
         ICM   R1,7,JSCSCTP        POINT TO THE SCT
         BZ    PARMDONE            LEAVE IF NO SCT
         DROP  R1                  IEZJSCB
         USING SCT,R1
         LH    R15,SCTSEXEC        GET PROGRAM PARAMETER LENGTH
         LTR   R15,R15             ANY PARAMETER?
         BNP   PARMDONE            NO, SO NO NEED TO SHOW IT
         LA    R2,1(,R2)           COUNT PROGRAM PARAMETER LINE
         CH    R2,DISPLNCT         UP TO NEW DATA YET?
         BL    PARMDONE            NO, SKIP DATA GENERATION
         C     R15,SCRNCOLS        WAY TOO LONG?
         BNH   *+8                 NO
         L     R15,SCRNCOLS        YES, PARE IT BACK A BIT
         TM    SCTXBTTR+2,X'01'    ACTUAL SCTX ADDRESS?
         BNZ   PARMDONE            NO, SVA TOKEN OF SCTX
         L     R14,SCTXBTTR        YES, SEE MACRO IEFSCTX IN Z/OS
         SRL   R14,8               POINT TO THE SCTX
         DROP  R1                  SCT
         LA    R14,16+4(,R14)      POINT TO THE PROGRAM PARAMETER
         MVC   1(6,R6),=C'PARM=''' DISPLAY IT
         LA    R0,7(,R6)
         LR    R1,R15
         MVCL  R0,R14              COPY PROGRAM PARAMETER
         LR    R1,R0
         MVI   0(R1),QUOTE
         LR    R0,R6               POINT TO THE LINE
         A     R0,SCREENSZ         POINT TO ITS SHADOW
         L     R1,SCRNCOLS         GET SCREEN WIDTH
         LA    R15,X'34'           INTERNAL CODE FOR UNDERSCORE GREEN
         SLL   R15,24              SET PAD AND ZERO SOURCE LENGTH
         MVCL  R0,R14              UNDERSCORE EIGHTH LINE
         A     R6,SCRNCOLS         POINT TO NEXT LINE
         SPACE
PARMDONE L     R3,PSAAOLD          POINT TO THE ASCB
         L     R3,ASCBASXB         POINT TO THE ASXB
         DROP  R3                  ASCB
         USING ASXB,R3
         L     R3,ASXBFTCB         POINT TO THE REGION CONTROL TASK
         DROP  R3                  ASXB
         SPACE
         USING TCB,R3
TASKLOOP CH    R2,DISPLNCT         UP TO NEW DATA YET?
         BL    TASKDONE            NO, SKIP THIS LINE
         C     R6,SBASAVE          FILLED UP SCREEN?
         BNL   SHOWNRBS            YES, BETTER STOP
         L     R1,SCRNCOLS         GET SCREEN WIDTH
         LR    R0,R6               POINT TO THE NEW LINE
         A     R0,SCREENSZ         POINT TO THE NEW LINE'S SHADOW
         LA    R15,X'07'           INTERNAL CODE FOR WHITE
         SLL   R15,24              SET PAD AND ZERO SOURCE LENGTH
         MVCL  R0,R14              COLOUR THIS LINE WHITE
         USING TASKLINE,R6
         C     R3,TCBJSTCB         IS THIS A JOB STEP TCB?
         BNE   NOTJSTCB            NO
         MVC   JSLBL,=C'JS'        YES
NOTJSTCB MVC   TCBLBL,=C'TCB'
         ST    R3,DOUBLE
         UNPK  TASKADDR(7),DOUBLE+1(4)
         TR    TASKADDR,COMHEX-240
         MVI   TASKADDR+6,C' '     SHOW TCB ADDRESS
         MVC   CMPLBL,=C'CMP'
         UNPK  TASKCOMP(9),TCBCMP(5)
         TR    TASKCOMP,COMHEX-240
         MVI   TASKCOMP+8,C' '     SHOW TCB COMPLETION CODE
         SLR   R5,R5               CLEAR FOR SHIFT
         IC    R5,TCBPKF           GET STORAGE PROTECTION KEY
         SRL   R5,4                SHIFT KEY INTO LOW-ORDER NYBBLE
         MVC   KEYLBL,=C'KEY'
         STC   R5,TCBKEY
         TR    TCBKEY,COMHEX
         MVC   PRTYLBL,=C'PRTY'
         UNPK  TASKPRTY(5),TCBLMP(3)
         TR    TASKPRTY,COMHEX-240 SHOW TCBLMP AND TCBDSP
         MVI   TASKPRTY+4,C' '     SHOW LIMIT & CURRENT PRIORITIES
         ICM   R1,12,TCBFLGS4      IS THIS TASK DISPATCHABLE?
         BZ    DPRTYOK             YES
         LA    R0,16               GET NUMBER OF BITS TO TEST
         LA    R15,NDSPFLGS        POINT OT BIT LABEL ARRAY
NDSPLOOP LTR   R1,R1               IS THIS BIT ON?
         BM    SHOWNDSP            YES, SHOW THE BIT LABEL
         SLL   R1,1                NO, PROMOTE NEXT BIT
         LA    R15,5(,R15)         POINT TO NEXT BIT'S LABEL
         BCT   R0,NDSPLOOP         INFINITE LOOP IMPOSSIBLE, BUT...
SHOWNDSP MVC   TASKSTAT,0(R15)     SHOW NON-DISPATCHABILITY REASON
DPRTYOK  MVC   OTCLBL,=C'OTC'
         UNPK  OTCADDR(7),TCBOTC+1(4)
         TR    OTCADDR,COMHEX-240
         MVI   OTCADDR+6,C' '      SHOW ORIGINATING TCB'S ADDRESS
         AIF   (NOT &ENV390).TTIMEDN
         TM    OSBITS,X'93'        MVS/ESA OR LATER?
         BNO   TTIMEDON            NO
         LM    R0,R1,TCBTTIME      GET TASK CPU TIME
         LA    R15,TASKCPU         POINT TO DISPLAY AREA
         BAS   R14,CPUTIMEX        FORMAT THE CPU TIME
TTIMEDON EQU   *
.TTIMEDN ANOP
         TM    TCBFLGS7,TCBSVCS    SVC SCREENING FOR THIS TASK?
         BNO   *+8                 NO
         MVI   TASKSVCS,C'$'       YES
         ICM   R0,7,TCBTRNB        ANY TESTRAN CORE CONTROL TABLE?
         BZ    *+8                 NO
         MVI   TASKTEST,C'T'       YES
         TM    TCBABF,TCBTCP       TEST ACTIVE?
         BZ    *+8                 NO
         MVI   TASKTACT,C'@'       YES
         TM    TCBXSCT1,TCBACTIV   TASK CURRENTLY BEING DISPATCHED?
         BZ    TASKCPOK            NO
         MVC   TASKSTAT(3),=C'CP-' YES
         MVC   DOUBLE(1),TCBCCPVI+1
         NI    DOUBLE,255-X'40'    RESET LOGICAL CP NUMBER FLAG
         UNPK  TASKSTAT+3(3),DOUBLE(2)
         TR    TASKSTAT+3(2),COMHEX-240
         MVI   TASKSTAT+5,C' '     SHOW CPU ID RUNNING TASK
TASKCPOK EQU   *
         ICM   R4,15,TCBJLB        ANY TASKLIB DCB?
         BZ    TSKLBSET            NO
         USING IHADCB,R4
         LH    R1,DCBTIOT          GET TIOT ENTRY OFFSET
         DROP  R4                  IHADCB
         A     R1,TCBTIO           POINT TO THE TIOT ENTRY
         CLI   SCRNCOLS+3,100      WIDE SCREEN?
         BL    TSKJLB80            NO, USE FIRST 80 COLUMNS ONLY
         MVC   83(7,R6),=C'TASKLIB'
         LA    R4,91(,R6)          POINT TO DDNAME LOAD TARGET
         B     TSKJLBLD            GO SHOW THE DDNAME
TSKJLB80 MVC   68(3,R6),=C'JLB'    SUPPLY LABEL
         LA    R4,72(,R6)          POINT TO DDNAME LOAD TARGET
TSKJLBLD MVC   0(8,R4),4(R1)       SHOW THE DDNAME
         TR    0(8,R4),PERIODS     HANDLE UNPRINTABLE CHARACTERS
TSKLBSET A     R6,SCRNCOLS         POINT TO THE NEXT SCREEN LINE
         DROP  R6                  TASKLINE
TASKDONE LA    R2,1(,R2)           INCREMENT LINE COUNTER
         SPACE
         USING RBDTLS,R6
REQBLIST L     R4,TCBRBP           POINT TO TOP REQUEST BLOCK
         USING RBSECT,R4
REQBLOOP CH    R2,DISPLNCT         UP TO NEW DATA YET?
         BL    REQBNEXT            NO, SKIP THIS LINE
         C     R6,SBASAVE          FILLED UP SCREEN?
         BNL   SHOWNRBS            YES, BETTER STOP
         ST    R4,DOUBLE
         UNPK  RBADDR(7),DOUBLE+1(4)
         TR    RBADDR,COMHEX-240
*        MVI   RBADDR+6,C' '       SHOW RB ADDRESS
         MVC   RBLBL+1(3),=C'PRB'
         TM    XSTAB1,RBFTP        PROGRAM REQUEST BLOCK?
         BZ    GETRBCDE            YES
         MVC   RBLBL(2),=C'TI'
         TM    XSTAB1,RBFTTIRB     TIRB?
         BO    GETRBCDE            YES
         MVC   RBLBL(2),=C'SV'
         TM    XSTAB1,RBFTSVRB     SUPERVISOR REQUEST BLOCK?
         BO    GETRBCDE            YES
         MVI   RBLBL+1,C'I'
         TM    XSTAB1,RBFTSIRB     SIRB?
         BO    SHOWRBEP            YES
         MVI   RBLBL,C' '
         TM    XSTAB1,RBFTSIRB     INTERRUPT REQUEST BLOCK?
         BO    SHOWRBEP            YES
         MVI   RBLBL+1,C' '        WHO KNOWS WHAT IT IS?  NOT ME...
         MVC   RBMODULE,=C'**UNKN**'
         B     MODULEOK
SHOWRBEP IC    R0,RBMODULE+8       SAVE DATA
         UNPK  RBMODULE(9),RBEP(5) SHOW ASYNCHRONOUS ROUTINE'S E.P.
         TR    RBMODULE,COMHEX-240
         STC   R0,RBMODULE+8       RESTORE OVERLAID BYTE
         CLI   RBEP,0              AMODE=31?
         BNE   MODULEOK            YES, NON-ZERO SO DON'T OVERWRITE
         MVC   RBMODULE(2),=C'EP'
         B     MODULEOK
GETRBCDE SLR   R14,R14
         ICM   R14,7,RBCDE1        IS CDE/LPDE ENTRY POINTER ZERO?
         BNZ   GETPGMNM            NO, GET ACTIVE MODULE NAME
         MVC   RBMODULE(5),=C'IGC00'
         SLR   R15,R15
         ICM   R15,7,RBLINKB       POINT TO PREVIOUS RB
         BCTR  R15,0               SUBTRACT ONE
         BCTR  R15,0               SUBTRACT ANOTHER ONE
         LH    R1,0(,R15)          GET INTERRUPT CODE (SVC NUMBER)
         CLI   1(R15),109          SVC 109?
         BNE   JSVCNMBR            NO
         L     R1,RBGRS15          GET TYPE-3/4 ESR ENTRY CODE
         CVD   R1,DOUBLE
         MVI   RBMODULE+2,C'X'     CORRECT MODULE PREFIX
         OI    DOUBLE+7,X'0F'      ENSURE NUMERIC DIGITS
         B     JESRNMBR
JSVCNMBR CVD   R1,DOUBLE
JESRNMBR UNPK  RBMODULE+5(3),DOUBLE+6(2)
         TM    XSTAB1,RBTRSVRB     IS A TYPE 2 NUCLEUS SVC ACTIVE?
         BO    MODULEOK            NO, TYPE 3 OR 1ST MODULE OF TYPE 4
         MVC   RBMODULE+3(3),RBMODULE+5
         OI    RBMODULE+5,X'F0'    YES.
         MVI   RBMODULE+6,C' '
         MVI   RBMODULE+7,C' '
         B     MODULEOK
         USING CDENTRY,R14
GETPGMNM MVC   RBMODULE,CDNAME     SHOW PRB PROGRAM NAME
         DROP  R14                 CDENTRY
MODULEOK TR    RBMODULE,PERIODS    HANDLE UNPRINTABLE PROGRAM NAME
         MVC   RBPSWLBL,=C'PSW'
         UNPK  RBPSW1(9),RBOPSW(5)
         UNPK  RBPSW2(9),RBOPSW+4(5)
         TR    RBPSW1(17),COMHEX-240
         MVI   RBPSW1+8,C' '       SHOW RBOPSW
         MVI   RBPSW2+8,C' '
         SLR   R0,R0
         IC    R0,RBWCF            GET REQUEST BLOCK WAIT COUNT
         CVD   R0,DOUBLE
         MVC   RBWTLBL,=C'WAIT'
         MVC   RBWAITCT,COMED3
         ED    RBWAITCT,DOUBLE+6
         LR    R15,R4              POINT TO RBBASIC
         LA    R0,4
         SR    R15,R0
         MVC   RBILCLBL,=C'ILC'
         MVC   RBILC,1(R15)        SHOW ILC
         TR    RBILC,COMHEX
         MVC   RBINTLBL,=C'INTC'
         UNPK  RBINTC(5),2(3,R15)  SHOW INTERRUPT CODE
         TR    RBINTC,COMHEX-240
         MVI   RBINTC+4,C' '
         AL    R6,SCREENSZ         POINT TO SHADOW LINE
         MVI   RBLBL,X'06'         LABELS IN YELLOW
         MVC   RBLBL+1(3),RBLBL
         MVC   RBPSWLBL,RBLBL
         MVC   RBWTLBL,RBLBL
         MVC   RBILCLBL,RBLBL
         MVC   RBINTLBL,RBLBL
         SL    R6,SCREENSZ         POINT TO PRIMARY LINE
         A     R6,SCRNCOLS         POINT TO THE NEXT SCREEN LINE
         DROP  R6                  RBDTLS
REQBNEXT LA    R2,1(,R2)           INCREMENT LINE COUNTER
         TM    XSTAB2,RBTCBNXT     END OF RB CHAIN FOR THIS TASK?
         BO    LOADLIST            YES
         ICM   R4,7,RBLINKB        NO, POINT TO NEXT LOWER RB
         B     REQBLOOP            GO PROCESS IT
         DROP  R4                  RBSECT
         SPACE
LOADLIST ICM   R4,15,TCBLLS        ANY LLE CHAIN?
         BZ    DEBCHAIN            NO
         USING LLE,R4
LLELOOP1 CH    R2,DISPLNCT         UP TO NEW DATA YET?
         BL    LLESKIP1            NO, SKIP LINE SETUP
         C     R6,SBASAVE          FILLED UP SCREEN?
         BNL   SHOWNRBS            YES, BETTER STOP
         LR    R0,R6               POINT TO THE LINE
         A     R0,SCREENSZ         POINT TO ITS SHADOW
         L     R1,SCRNCOLS         GET THE LINE SIZE
         LA    R15,X'01'           INTERNAL CODE FOR BLUE
         SLL   R15,24              SET PAD AND ZERO SOURCE LENGTH
         MVCL  R0,R14              COLOUR THIS LINE BLUE
         LA    R15,7(,R6)          POINT TO FIRST DISPLAY SLOT
         A     R6,SCRNCOLS         POINT TO THE NEXT SCREEN LINE
LLESKIP1 L     R1,SCRNCOLS         GET SCREEN WIDTH
         LA    R0,7
         SR    R1,R0               GET DISPLAY COLUMN COUNT
         SR    R0,R0               CLEAR FOR DIVIDE
         D     R0,=F'9'            GET MODULE NAMES PER LINE
LLELOOP2 CH    R2,DISPLNCT         UP TO NEW DATA YET?
         BL    LLESKIP2            NO, SKIP LINE LOAD
         L     R14,LLECDPT         POINT TO THE CDE
         USING CDENTRY,R14
         MVC   0(8,R15),CDNAME     SHOW THE PROGRAM NAME
         TR    0(8,R15),PERIODS    HANDLE UNPRINTABLE PROGRAM NAME
         DROP  R14                 CDENTRY
         LA    R15,9(,R15)         POINT TO NEXT DISPLAY SLOT
LLESKIP2 ICM   R4,15,LLECHN        POINT TO NEXT LLE
         BZ    LLELNDON            END OF LLES REACHED
         BCT   R1,LLELOOP2
LLELNDON LA    R2,1(,R2)           INCREMENT LINE COUNTER
         LTR   R4,R4               REACHED END OF LLE CHAIN?
         BNZ   LLELOOP1            NO, MAKE ANOTHER DISPLAY LINE
         DROP  R4                  LLE
         SPACE
DEBCHAIN ICM   R4,15,TCBDEB        ANY DEB CHAIN?
         BZ    TASKNEXT            NO
         USING DEBBASIC,R4
DEBCHNLP CH    R2,DISPLNCT         UP TO NEW DATA YET?
         BL    DEBLNDON            NO, SKIP LINE SETUP
         C     R6,SBASAVE          FILLED UP SCREEN?
         BNL   SHOWNRBS            YES, BETTER STOP
         USING OPNDDTLS,R6
         LR    R0,R6               POINT TO THE LINE
         A     R0,SCREENSZ         POINT TO ITS SHADOW
         L     R1,SCRNCOLS         GET THE LINE SIZE
         LA    R15,X'02'           INTERNAL CODE FOR RED
         SLL   R15,24              SET PAD AND ZERO SOURCE LENGTH
         MVCL  R0,R14              COLOUR THIS LINE GREEN
         IC    R1,DEBOPATB         GET ACCESS FLAGS
         LA    R0,DEBACCS          GET RELEVANT BIT MASK
         NR    R1,R0               DISCARD OTHER BITS
         SLL   R1,1                DOUBLE FOR INDEX
         LA    R1,OPENMODE(R1)     POINT TO MODE LABEL
         MVC   OPN4,0(R1)          SHOW OPEN MODE
         TM    DEBFLGS1,DEBEOFDF   HAS EOV DETECTED EOF?
         BNO   *+10                NO
         MVC   OPNFLG,=C'EOF'      YES
         TM    DEBFLGS1,DEBAPFIN   LIBRARY DEEMED APF AUTHORIZED?
         BNO   *+10                NO
         MVC   OPNFLG,=C'APF'      YES
         MVC   OPNBBL,=C'DCB'      SUPPLY LABEL FOR DEBDCBB
         UNPK  OPNBBA(7),DEBDCBB(4)
         TR    OPNBBA(6),COMHEX-240
         MVI   OPNBBA+6,C' '       SHOW DCB OR ACB ADDRESS
         SR    R5,R5
         ICM   R5,7,DEBDCBB        POINT TO THE RELATED DCB/ACB
         USING IHADCB,R5
         TM    DCBDSRG2,DCBACBM    GENUINE DATA CONTROL BLOCK?
         BO    GOTANACB            NO, IT SEEMS TO BE AN ACB
         LH    R1,DCBTIOT          GET TIOT ENTRY OFFSET
         L     R14,PSATOLD
         A     R1,TCBTIO-TCB(,R14) POINT TO THE TIOT ENTRY
         MVC   OPNDD,4(R1)         SHOW THE DDNAME
         TR    OPNDD,PERIODS       HANDLE UNPRINTABLES
         SR    R1,R1
         IC    R1,DCBRECFM
         SRL   R1,6
         IC    R1,OPNRECFM(R1)     GET RECORD FORMAT LABEL
         STC   R1,OPNRFM           SHOW IT
         LA    R1,=C'TBSAM'        POINT TO RECFM BIT LABELS
         LA    R15,OPNRFM+1        POINT TO DISPLAY AREA
         LA    R0,5                GET RECFM BIT COUNT
         ICM   R14,8,DCBRECFM      INSERT DCBRECFM
         SLL   R14,2               DISCARD PROCESSED BITS
OPNRFMLP LTR   R14,R14             IS BIT ON?
         BNM   OPNRFMNX            NO
         MVC   0(1,R15),0(R1)      YES, SHOW IT
         LA    R15,1(,R15)         INCREMENT OUTPUT POINTER
OPNRFMNX LA    R1,1(,R1)           INCREMENT LABEL POINTER
         SLL   R14,1               PROMOTE NEXT BIT
         BCT   R0,OPNRFMLP
         TM    DCBDSRG1,DCBDSGU    UNMOVEABLE?
         BZ    CANMOVIT            NO
         MVI   OPNORGU,C'U'        YES
CANMOVIT ICM   R1,4,DCBDSRG1       GET FIRST DSORG BYTE
         ST    R1,HOLDR            SAVE IT FOR LATER
         SLL   R1,7                SHIFT DSORG BITS TO TOP BYTE
         ICM   R1,4,DCBDSRG2       GET SECOND DSORG BYTE
         LA    R15,OPNRGTYP        POINT TO LABELS
         LA    R0,13               GET THE NUMBER OF BITS TO TEST
ORGTYPLP SLL   R1,1                PUT BIT TO TEST IN SIGN
         LTR   R1,R1               IS THE BIT ON?
         BM    GOTDSORG            YES
         LA    R15,2(,R15)         POINT TO NEXT LABEL
         BCT   R0,ORGTYPLP         CONTINUE SCANNING BITS
GOTDSORG MVC   OPNORG,0(R15)       SHOW DCBDSORG
         MVC   OPNLSTOP,=C'EXCP'   PREPARE FOR EXCP FILE
         TM    DCBMACF1,DCBMRECP   IS IT AN EXCP FILE?
         BO    OPNLNDON            YES, LINE NOW DONE
         SR    R0,R0
         SR    R1,R1
         IC    R0,DCBNCP           SHOW DCBNCP
         TM    DCBOFLG,DCBOFLWR
         BZ    IOWASRD             LAST I/O WAS A READ OR POINT
         LA    R1,4                LAST I/O WAS A WRITE
IOWASRD  TM    DCBMACF1,DCBMRGET
         BO    QUEUEDIO            MACRF=G
         TM    DCBMACF2,DCBMRPUT
         BZ    BASICIO             NOT MACRF=P
QUEUEDIO LA    R1,8(,R1)
         IC    R0,DCBBUFNO         SHOW DCBBUFNO
BASICIO  LA    R1,RDWRTIND(R1)
         MVC   OPNLSTOP,0(R1)      SHOW LAST I/O OPERATION TYPE
         CVD   R0,DOUBLE
         MVC   OPNBUF,COMED3
         ED    OPNBUF,DOUBLE+6
         ICM   R0,3,DCBBLKSI       SHOW DCBBLKSI
         LA    R15,OPNBLK
         BAS   R14,TCBSHOW5
         ICM   R0,3,DCBLRECL       SHOW DCBLRECL
         LA    R15,OPNLRL
         MVI   OPNLRL+5,C'X'       PREPARE FOR LRECL=X
         BM    *+8
         BAS   R14,TCBSHOW5
         B     OPNLNDON            DCB FORMATTING COMPLETE
         DROP  R5                  IHADCB
         USING IFGACB,R5
GOTANACB MVI   OPNBBL,C'A'         CHANGE DCB ADDRESS LABEL TO 'ACB'
         LH    R1,ACBTIOT          GET TIOT ENTRY OFFSET
         A     R1,TCBTIO           POINT TO THE TIOT ENTRY
         MVC   OPNDD,4(R1)         SHOW THE DDNAME
         MVC   OPNORG,OPNVS        INDICATE VSAM
         CLI   ACBID,ACBIDVAL      REALLY AN ACB?
         BNE   OPNLNDON            NO
         CLI   ACBAMETH,ACBVSAM    IS IT VSAM?
         BE    *+8                 YES
         MVI   OPNORG,C'S'         NO, INDICATE SUBSYSTEM
         SR    R0,R0
         IC    R0,ACBSTRNO         SHOW ACBSTRNO
         CVD   R0,DOUBLE
         MVC   OPNBUF,COMED3
         ED    OPNBUF,DOUBLE+6
         ICM   R0,3,ACBBLKSZ       SHOW ACBBLKSZ
         LA    R15,OPNBLK
         BAS   R14,TCBSHOW5
         ICM   R0,3,ACBLRECL       SHOW ACBLRECL
         LA    R15,OPNLRL
         BAS   R14,TCBSHOW5
         DROP  R5                  IFGACB
OPNLNDON A     R6,SCRNCOLS         POINT TO THE NEXT SCREEN LINE
         DROP  R6                  OPNDDTLS
DEBLNDON LA    R2,1(,R2)           INCREMENT LINE COUNTER
         LR    R15,R4              POINT TO DEBBASIC
         S     R15,CFW3            POINT TO DEBAMTYP
         SR    R5,R5               CLEAR FOR INSERT
         TM    HOLDR+1,DS1DSGPO    POTENTIAL PDS CONCATENATION?
         BNO   *+8                 NO
         IC    R5,DEBAMLNG         YES, GET CONCATENATION COUNT
         LA    R5,1(,R5)           COUNT FIRST DATA SET
         LA    R1,8
         LNR   R1,R1
         AR    R1,R4               POINT TO DEBXTNP
         L     R1,0(,R1)           POINT TO DEBXTN
         USING DEBXTN,R1
         L     R14,DEBXDSAB        POINT TO DSAB
         DROP  R1                  DEBXTN
         USING DSAB,R14
         LA    R0,DSABFCHN-DSAB    GET OLD FORWARD POINTER OFFSET
         AIF   (NOT &ENV390).SPECDSA
         L     R1,CVTPTR(,0)       POINT TO THE CVT
         USING CVT,R1
         CLI   CVTDCB,X'9B'        MVS/ESA OR LATER?
         BNE   SPECDSAB            NO, HAVE THE DSAB SPEC
         TM    CVTOSLV3,X'10'      CVTH7705 - Z/OS 1.2 OR LATER?
         BNO   SPECDSAB            NO, HAVE THE DSAB SPEC
         LA    R0,DSABFCHA-DSAB    GET NEW FORWARD POINTER OFFSET
         DROP  R1                  CVT
.SPECDSA ANOP
SPECDSAB ST    R0,SBASAVE+12       SAVE DSAB CHAINING OFFSET
LOOPDSAB CH    R2,DISPLNCT         UP TO NEW DATA YET?
         BL    NEXTDSAB            NO, SKIP LINE SETUP
         C     R6,SBASAVE          FILLED UP SCREEN?
         BNL   SHOWNRBS            YES, BETTER STOP
         LR    R0,R6               POINT TO THE LINE
         A     R0,SCREENSZ         POINT TO ITS SHADOW
         L     R1,SCRNCOLS         GET THE LINE SIZE
         LA    R15,X'04'           INTERNAL CODE FOR GREEN
         SLL   R15,24              SET PAD AND ZERO SOURCE LENGTH
         MVCL  R0,R14              COLOUR THIS LINE GREEN
         L     R1,DSABSIOT         POINT TO SIOT
         USING INDMSIOT,R1
         L     R1,SJFCBPTR         POINT TO JFCB
         DROP  R1                  INDMSIOT
         MVC   13(44,R6),0(R1)     COPY DATA SET NAME
         MVC   58(8,R6),44(R1)     COPY MEMBER NAME
         MVC   67(6,R6),118(R1)    COPY 1ST VOLUME SERIAL
         MVC   74(6,R6),124(R1)    COPY 2ND VOLUME SERIAL
         TR    0(80,R6),PERIODS    ENSURE NO UNPRINTABLES
         CLI   SCRNCOLS+3,101      WIDE-ISH SCREEN?
         BL    DONEVOLS            NO
         MVC   81(6,R6),130(R1)    COPY 3RD VOLUME SERIAL
         MVC   88(6,R6),136(R1)    COPY 4TH VOLUME SERIAL
         MVC   95(6,R6),142(R1)    COPY 5TH VOLUME SERIAL
         TR    80(21,R6),PERIODS   ENSURE NO UNPRINTABLES
DONEVOLS A     R6,SCRNCOLS         POINT TO THE NEXT SCREEN LINE
NEXTDSAB LA    R2,1(,R2)           INCREMENT LINE COUNTER
         AL    R14,SBASAVE+12      POINT TO DSAB FORWARD POINTER
         ICM   R14,15,0(R14)       POINT TO NEXT DSAB
         BZ    *+8                 END OF DSAB CHAIN REACHED
         BCT   R5,LOOPDSAB         REPORT CONCATENATED DATA SETS
         DROP  R14                 DSAB
         ICM   R4,7,DEBDEBB        REACHED END OF DEB CHAIN?
         BNZ   DEBCHNLP            NO, MAKE ANOTHER DISPLAY LINE
         DROP  R4                  DEBBASIC
         SPACE
TASKNEXT ICM   R3,15,TCBTCB        POINT TO NEXT TCB
         BNZ   TASKLOOP            GO SHOW IT
         SR    R2,R2               FLAG END OF DISPLAY REACHED
         DROP  R3                  TCB
         SPACE
SHOWNRBS STH   R2,DISPLNCT         SAVE DISPLAY STATUS
         B     @MSGCOMM            DISPLAY COMPLETE
         SPACE
*
*         DISPLAY BYTES AS 5-DIGIT KB
*
*         R0 HAS VALUE TO DISPLAY
*         R14 HAS RETURN ADDRESS
*         R15 POINTS TO DISPLAY AREA
*
TCBSHOK5 MVI   6(R15),C'K'
         SRL   R0,10
TCBSHOW5 CVD   R0,DOUBLE
         MVC   0(6,R15),COMED5
         ED    0(6,R15),DOUBLE+5
         BR    R14
         AIF   (NOT &ENV390).SHOW7OK
         SPACE
*
*         DISPLAY BYTES AS 7-DIGIT KB
*
*         R0 HAS VALUE TO DISPLAY
*         R14 HAS RETURN ADDRESS
*         R15 POINTS TO DISPLAY AREA
*
TCBSHOK7 MVI   8(R15),C'K'
         SRL   R0,10
TCBSHOW7 CVD   R0,DOUBLE
         MVC   0(8,R15),COMED7
         ED    0(8,R15),DOUBLE+4
         BR    R14
.SHOW7OK ANOP
         SPACE
*
*         SHOW STCK-FORMAT TIME VALUE AS HHH:MM:SS.TH
*
*         R0 AND R1 HAVE VALUE TO DISPLAY
*         R14 HAS RETURN ADDRESS
*         R15 POINTS TO DISPLAY AREA
*
CPUTIMEX SRDL  R0,12               CONVERT INTO MICROSECONDS
CPUTIMEM CL    R0,GRANDHRS         TOO BIG TO HANDLE?
         BL    GETHOURS            NO
         MVI   2(R15),C'*'         YES, INDICATE OVERFLOW
         MVC   3(7,R15),2(R15)
         BR    R14                 RETURN
GETHOURS D     R0,GRANDTEN         CONVERT INTO CENTISECONDS
         SR    R0,R0               CLEAR FOR DIVIDE
         D     R0,GRAND360
         LTR   R1,R1               ANY HOURS?
         BZ    GETMINS             NO, DETERMINE MINUTES
         CVD   R1,DOUBLE           GET HOURS
         MVC   0(4,R15),COMED3     SUPPLY HOURS EDIT MASK AND COLONS
         ED    0(4,R15),DOUBLE+6
         MVI   4(R15),C':'         SEPARATE HOURS AND MINUTES
GETMINS  LR    R1,R0               GET REMAINDER
         SR    R0,R0               CLEAR FOR DIVIDE
         D     R0,GRANDSIX
         LTR   R1,R1               NON-ZERO MINUTES?
         BNZ   GOTMINS             YES
         CLI   4(R15),C':'         ANY HOURS OR MINUTES?
         BNE   GETSECS             NO, SKIP MINUTES
GOTMINS  CVD   R1,DOUBLE           GET MINUTES
         OI    DOUBLE+7,X'0F'
         UNPK  5(2,R15),DOUBLE+6(2)
         MVI   7(R15),C':'
         CLC   4(2,R15),LEADZERO   LEADING ZERO?
         BNE   GETSECS             NO
         MVI   5(R15),C' '         YES, SUPPRESS IT
GETSECS  CVD   R0,DOUBLE           GET SECONDS
         OI    DOUBLE+7,X'0F'
         UNPK  9(4,R15),DOUBLE+5(3)
         MVC   8(2,R15),9(R15)     MOVE WHOLE SECONDS LEFT 1 BYTE
         MVI   10(R15),C'.'        INSERT DECIMAL POINT
         CLC   7(2,R15),LEADZERO   LEADING ZERO?
         BNER  R14                 NO, RETURN
         MVI   8(R15),C' '         YES, SUPPRESS IT
         BR    R14                 RETURN
         SPACE
         DROP  R12                 SHOWTCBS
         SPACE
GRAND360 DC    F'360000'
GRANDTEN DC    F'10000'
GRANDSIX DC    F'6000'
COMED7   DC    XL8'4020202020202120'
GRANDHRS DC    FL8'3600000000000'
OPNRECFM DC    CL5'*VFU'           LABEL FIRST 2 BITS OF DCBDSORG
OPENMODE DC    CL32'INBK2?IOUD5?OXOI8?9?A?B?C?D?EXOT'
RDWRTIND DC    CL16'READWRT GET PUT '
OPNRGTYP DC    CL28'ISPSDACX****POGSTXTQ**VSTR**'
OPNVS    EQU   *-6,2
NDSPFLGS DC    C'NDUMPSER  RQENAHNDSPUXNDVRBWF MPCNDONDSP'  TCBFLGS4
         DC    C'ENDEDABWF PAGE ANDSPSYS  STP  FCD1 PNDSP'  TCBFLGS5
*  SHOW 'ENDED' RATHER THAN 'FC' FOR TCBFC TO MAKE THE REASON OBVIOUS.
*  'FC' MAY HAVE MEANT 'FUNCTION COMPLETE' (?)
         SPACE
LEADZERO DC    C' 0'
JOBHDRLN DC    CL1' '
         DC    CL8'JOBNAME'
         DC    CL8'STEPNAME'
         DC    CL1' '
         DC    CL8'PROCSTEP'
         DC    CL1' '
         DC    CL8'JOBIDENT'
         DC    CL1' '
         DC    CL4'ASID'
         DC    CL13' TCB-CPU-TIME'
         DC    CL13' SRB-CPU-TIME'
         DC    CL6' TPUTS'
         DC    CL6' TGETS'
JOBLINEL EQU   *-JOBHDRLN
         SPACE
         AIF   (&ENV390).JHDL2Z
JOBHDRL2 DC    CL80' REGION IN-USE MAXUSE MAXSYS  EXCP-COUNT TCB-LEFT I+
               NCORE-FRAMES AUXILIARY-SLOTS '
         AGO   .JHDL2OK
.JHDL2Z  ANOP
JOBHDRL2 DC    CL80' REGION  IN-USE MAXUSE MAXSYS E-IN-USE E-MAXUSE E-M+
               AXSYS  EXCP-COUNT  TCB-LEFT  '
.JHDL2OK ANOP
         SPACE
         SPACE
************************************************************
*                                                          *
*         FORMAT AND DISPLAY DEBUG DETAILS                 *
*                                                          *
************************************************************
         SPACE
         USING DEBUG,R8
DEBUG    LR    R8,R15              SET LOCAL BASE
         OI    STATUS4,$4REFR      TELL CALLER TO REPAINT WHOLE SCREEN
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    *+8                 YES, DEFINITELY NOT SHOWING PICTURES
         NI    PICFLAGS,255-PICOK  NO, REDRAW OF ANY PICTURE REQUIRED
         L     R6,SCREENBF         POINT TO TEXT SCREEN BUFFER
         L     R2,SCRNCOLS         GET SCREEN WIDTH
         LA    R1,0(R2,R6)         POINT PAST FIRST LINE
         TM    STATUS13,$13TSO     REVTSO ACTIVE?
         BO    DEBUGTSO            YES
         TM    STATUS11,$11EDT     REVEDIT ACTIVE?
         BNO   DEBUGTOP            NO, LEAVE TOP LINE ALONE
         LA    R0,20               YES
         SR    R1,R0
         MVI   0(R1),C' '          REMOVE COLUMNS INDICATION FOR VISTA
         MVC   1(19,R1),0(R1)
         B     DEBUGTOP
DEBUGTSO MVI   1(R1),C' '          BLANK SECOND LINE
         MVC   2(78,R1),1(R1)
DEBUGTOP AR    R2,R2               DOUBLE SCREEN WIDTH
         L     R1,SCREENSZ         GET SCREEN CAPACITY
         AR    R6,R2               POINT TO THIRD SCREEN LINE
         SR    R1,R2               GET SIZE AFTER THIS POINT
         LA    R15,C' '
         SLL   R15,24              SET PAD AND ZERO SOURCE LENGTH
         LR    R0,R6               SET TARGET ADDRESS
         MVCL  R0,R14              BLANK OUT REVBUF
         AR    R0,R2               SKIP TWO SHADOW LINES
         L     R1,SCREENSZ         GET SCREEN CAPACITY
         SR    R1,R2               GET SIZE LESS TWO LINES
         LA    R15,X'05'           INTERNAL CODE FOR TURQUOISE
         SLL   R15,24              SET PAD AND ZERO SOURCE LENGTH
         MVCL  R0,R14              SET REVSHDW TO TURQUOISE
         SPACE
*  EDIT RECORD COUNT                                      ADDED MAR2004
         TM    STATUS11,$11EDT     REVEDIT ACTIVE?
         BNO   DBGEDOK             NO
         L     R1,4(,R13)          YES, POINT TO REVEDIT'S SAVE AREA
         USING @EDDATA,R1
         L     R0,RECLINES
         CVD   R0,DOUBLE
         MVC   10(10,R6),=X'40202020202020202120'
         ED    10(10,R6),DOUBLE+3
         MVC   21(10,R6),=CL10'EDIT LINES'
         L     R0,REDLINES
         CVD   R0,DOUBLE
         MVC   40(10,R6),=X'40202020202020202120'
         ED    40(10,R6),DOUBLE+3
         MVC   51(12,R6),=CL12'RECORDS READ'
         DROP  R1                  @EDDATA
DBGEDOK  AR    R6,R2               POINT TO FIFTH SCREEN LINE
         SPACE
*  MODE SWITCHES AND GRAPHICS DETAILS                     ADDED JUL2013
         A     R6,SCRNCOLS         LEAVE A BLANK LINE
         MVC   0(14,R6),=CL14'MODE  GRAPHICS'
         MVC   67(13,R6),=CL13'GETMAIN-TRACE'
         A     R6,SCREENSZ         POINT TO HEADING SHADOW
         MVI   0(R6),X'07'         SHOW IT IN WHITE
         MVC   1(79,R6),0(R6)
         S     R6,SCREENSZ         POINT BACK TO TEXT BUFFER
         A     R6,SCRNCOLS         POINT TO NEXT LINE
         SR    R0,R0
         IC    R0,GETMNTRC
         CVD   R0,DOUBLE
         MVC   61(10,R6),=X'40202020202020202120'
         ED    61(10,R6),DOUBLE+3
         LA    R0,GETMNTRC
         ST    R0,DOUBLE
         UNPK  72(9,R6),DOUBLE(5)
         TR    72(8,R6),COMHEX-240
         MVI   80(R6),C' '
         UNPK  1(3,R6),MODE(2)
         TR    1(2,R6),COMHEX-240
         MVI   3(R6),C' '
         LA    R1,6(,R6)           POINT TO DISPLAY AREA
         UNPK  0(3,R1),PICFLAGS(2) UNPACK FLAG BYTE
         TR    0(2,R1),COMHEX-240  MAKE DISPLAYABLE HEX
         MVI   2(R1),C' '
         LA    R15,GRAFDTLS        POINT TO DATA
         LA    R0,12               GET BYTE COUNT
DEBUGGLP LA    R1,3(,R1)           ADJUST DISPLAY POINTER
         UNPK  0(3,R1),0(2,R15)    UNPACK FLAG BYTE
         TR    0(2,R1),COMHEX-240  MAKE DISPLAYABLE HEX
         MVI   2(R1),C' '
         LA    R15,1(,R15)         POINT TO NEXT DATA BYTE
         BCT   R0,DEBUGGLP
         A     R6,SCRNCOLS         POINT TO NEXT LINE
         A     R6,SCRNCOLS         LEAVE A BLANK LINE
*  STATUS FLAGS                                           ADDED JAN2001
         MVC   0(12,R6),=CL12'STATUS FLAGS'
         A     R6,SCREENSZ         POINT TO HEADING SHADOW
         MVI   0(R6),X'07'         SHOW IT IN WHITE
         MVC   1(79,R6),0(R6)
         S     R6,SCREENSZ         POINT BACK TO TEXT BUFFER
         A     R6,SCRNCOLS         POINT TO NEXT LINE
         LA    R3,COMHEX           POINT TO NUMBERS
         LR    R1,R6               POINT TO DISPLAY LINE
         LA    R15,STATUS          SHOW STATUS FLAGS
         BAS   R14,DEBUGFLG
         LA    R15,STATUS2
         BAS   R14,DEBUGFLG
         LA    R15,STATUS3
         BAS   R14,DEBUGFLG
         LA    R15,STATUS4
         BAS   R14,DEBUGFLG
         LA    R15,STATUS5
         BAS   R14,DEBUGFLG
         LA    R15,STATUS6
         BAS   R14,DEBUGFLG
         LA    R15,STATUS7
         BAS   R14,DEBUGFLG
         LA    R15,STATUS8
         BAS   R14,DEBUGFLG
         LA    R15,STATUS9
         BAS   R14,DEBUGFLG
         LA    R15,STATUS10
         BAS   R14,DEBUGFLG
         LA    R15,STATUS11
         BAS   R14,DEBUGFLG
         LA    R15,STATUS12
         BAS   R14,DEBUGFLG
         LA    R15,STATUS13
         BAS   R14,DEBUGFLG
         LA    R15,STATUS14
         BAS   R14,DEBUGFLG
         LA    R15,STATUS15
         BAS   R14,DEBUGFLG
         LA    R15,STATUS16
         BAS   R14,DEBUGFLG
         LA    R15,STATUS17
         BAS   R14,DEBUGFLG
         A     R6,SCRNCOLS         POINT TO NEXT LINE
         A     R6,SCRNCOLS         POINT TO NEXT LINE
         SPACE
*  FULLWORD VALUES
         A     R6,SCRNCOLS         LEAVE A BLANK LINE
         MVC   0(L'DBUGFWHD,R6),DBUGFWHD
         A     R6,SCREENSZ         POINT TO HEADING SHADOW
         MVI   0(R6),X'07'         SHOW IT IN WHITE
         MVC   1(L'DBUGFWHD-1,R6),0(R6)
         S     R6,SCREENSZ         POINT BACK TO TEXT BUFFER
         A     R6,SCRNCOLS         POINT TO NEXT LINE
         LA    R1,TGETREG2         POINT TO R15, R0, R1
         LA    R0,4                FIRST 4 BYTES (R15)
         LA    R15,0(,R6)
         BAS   R14,HEXCOM
         LA    R15,1(,R15)
         LA    R0,4                SECOND 4 BYTES (R0)
         BAS   R14,HEXCOM
         LA    R15,1(,R15)
         LA    R0,4                THIRD 4 BYTES (R1)
         BAS   R14,HEXCOM
         LA    R15,1(,R15)
         USING SAVER,R13
         L     R5,SAVPREV          POINT TO CALLER'S SAVE AREA
         DROP  R13                 SAVER
         USING SAVER,R5
         LA    R1,SAVGRS9
         LA    R0,4                @DATA ADDRESS (R9)
         BAS   R14,HEXCOM
         LA    R15,1(,R15)
         ST    R13,DOUBLE
         LA    R1,DOUBLE
         LA    R0,4                SAVE AREA ADDRESS (R13)
         BAS   R14,HEXCOM
         LA    R15,1(,R15)
         LA    R1,SAVGRS4
         LA    R0,4                DCB/ACB ADDRESS (R4)
         BAS   R14,HEXCOM
         LA    R15,1(,R15)
         LA    R1,SCREENBF
         LA    R0,4                PRIMARY SCREEN BUFFER ADDRESS
         BAS   R14,HEXCOM
         LA    R15,1(,R15)
         LA    R1,SCREENSZ
         LA    R0,4                PRIMARY SCREEN BUFFER SIZE
         BAS   R14,HEXCOM
         A     R6,SCRNCOLS         POINT TO NEXT LINE
         DROP  R5                  SAVER
         SPACE
*  INPUT DATA CHARACTERS
         A     R6,SCRNCOLS         LEAVE A BLANK LINE
         MVC   0(10,R6),=CL10'INPUT DATA'
         A     R6,SCREENSZ         POINT TO HEADING SHADOW
         MVI   0(R6),X'07'         SHOW IT IN WHITE
         MVC   1(9,R6),0(R6)
         S     R6,SCREENSZ         POINT BACK TO TEXT BUFFER
         A     R6,SCRNCOLS         POINT TO NEXT LINE
         LA    R1,REPLY2-2560
         LA    R1,2560(,R1)        REPLY AREA
         ICM   R14,15,TGETREG2+8   REPLY LENGTH RETURNED BY TGET
         BZ    @MSGCOMM
         BCTR  R14,0
         EX    R14,DBUGDATA        MOVE IN THE CHARACTER VERSION
         TR    0(256,R6),PERIODS   TRANSLATE UNPRINTABLES
         A     R6,SCRNCOLS         POINT TO NEXT LINE
         SPACE
*  INPUT DATA IN HEXADECIMAL
         L     R0,TGETREG2+8       REPLY LENGTH RETURNED BY TGET
         CH    R0,=H'256'          BIGGER THAN ARBITRARY MAXIMUM?
         BNH   *+8                 NO
         LH    R0,=H'256'          YES, REDUCE TO ARBITRARY MAXIMUM
         LR    R15,R6
         BAS   R14,HEXCOM          CONVERT REPLY TO HEX
         CLI   0(R1),0             NEXT BYTE NULL?
         BE    @MSGCOMM            YES, DISPLAY NOW COMPLETE
         STM   R14,R12,12(R13)     NO, PROBABLY SBA, SO SAVE REGISTERS
         L     R1,SCREENSZ         GET SCREEN CAPACITY
         LR    R0,R15              POINT TO CURRENT SCREEN POSITION
         A     R0,SCREENSZ         POINT IT THAT POSITION'S SHADOW
         S     R15,SCREENBF        GET SCREEN AREA SIZE DONE
         SR    R1,R15              GET SCREEN AREA SIZE TO GO
         LA    R15,X'01'           INTERNAL CODE FOR BLUE
         SLL   R15,24              SET PAD AND ZERO SOURCE LENGTH
         MVCL  R0,R14              SET REST OF SCREEN TO BLUE
         LM    R14,R12,12(R13)     RESTORE REGISTERS
DEBUGXLP ICM   R0,3,0(R1)          NEXT TWO BYTES NULL?
         BZ    @MSGCOMM            YES, DISPLAY NOW COMPLETE
         LA    R0,1                NO, AN SBA ORDER MAY HAVE A NULL
         BAS   R14,HEXCOM          CONVERT A DISCARDED BYTE TO HEX
         B     DEBUGXLP            KEEP GOING UNTIL NULLS ARE REACHED
         SPACE
DBUGDATA MVC   0(0,R6),0(R1)       <<< EXECUTED >>>
         SPACE
*  R1->DISPLAY-AREA  R3->FLAG_NUMBER  R15->FLAG-BYTE  R14->RETURN-POINT
DEBUGFLG LA    R3,1(,R3)           POINT TO NEXT FLAG NUMBER
         UNPK  2(3,R1),0(2,R15)    UNPACK FLAG BYTE
         MVI   1(R1),C':'
         MVC   0(1,R1),0(R3)       SHOW FLAG NUMBER
         MVI   4(R1),C' '          CLEAN UP UNPACK
         TR    2(2,R1),COMHEX-240  MAKE DISPLAYABLE HEX
         LA    R1,5(,R1)           POINT PAST DISPLAY AREA
         BR    R14                 RETURN TO CALLER
         SPACE
         DROP  R8                  DEBUG
         SPACE
         DC    0D'0'
         LTORG
DBUGFWHD DC    C'RETCODE<-TGET-REGS->LENGTH WORKAREA SAVEAREA  DCB/ACB +
               SCRNBUFR SCRNSIZE'
         SPACE
         DROP  R11,R10             REVCOMM
         SPACE
         DC    0D'0'               END OF CSECT
         SPACE
JPALINE  DSECT
         DS    CL1
JPACDE@  DS    CL6
         DS    CL1
JPARBP   DS    CL8
         DS    CL1
JPANAME  DS    CL8
         DS    CL1
JPAEPA   DS    CL8
         DS    CL1
JPAXTNT  DS    CL8
         DS    CL1
JPASIZE  DS    CL8
JPAUSE   DS    CL6
         DS    CL1
JPAATB   DS    CL2
JPASP    DS    CL4
         DS    CL1
JPAAT    DS    CL2
         DS    CL1
JPAA2    DS    CL2
         DS    CL1
JPAA3    DS    CL2
         DS    CL1
JPAA4    DS    CL2
         SPACE
JOBLINE  DSECT
         DC    CL1' '
JOBNAME  DC    CL8'JOBNAME'
STEPNAME DC    CL8'STEPNAME'
         DC    CL1' '
PROCSTEP DC    CL8'PROCSTEP'
         DC    CL1' '
JOBIDENT DC    CL8'JOBIDENT'
         DC    CL1' '
JOBASID  DC    CL4'ASID'
JOBTCB   DC    CL13' TCB-CPU-TIME'
JOBSRB   DC    CL13' SRB-CPU-TIME'
JOBTPUTS DC    CL6' TPUTS'
JOBTGETS DC    CL6' TGETS'
         SPACE
         AIF   (&ENV390).JBL2390
JOBLINE2 DSECT
RGNREQ   DS    CL7
RGNNOW   DS    CL7
RGNHWM   DS    CL7
SYSHWM   DS    CL7
#EXCP    DS    CL12
         DS    CL1
TCBLIMIT DS    CL8
         DS    CL1
REALMEM  DS    CL7
#FRAMES  DS    CL6
AUXMEM   DS    CL8
AUXMEMK  EQU   *,1
#SLOTS   DS    CL8
         DS    CL1
         AGO   .JBLN2OK
.JBL2390 ANOP
JOBLINE2 DSECT
RGNREQ   DS    CL8
RGNNOW   DS    CL7
RGNHWM   DS    CL7
RGNSYS   DS    CL7
RGNENOW  DS    CL9
RGNEHWM  DS    CL9
RGNESYS  DS    CL9
#EXCP    DS    CL12
         DS    CL2
TCBLIMIT DS    CL8
         DS    CL2
.JBLN2OK ANOP
         SPACE
TASKLINE DSECT
TASKSVCS DS    CL1
TASKTEST DS    CL1
TASKTACT DS    CL1
JSLBL    DS    CL2
TCBLBL   DS    CL3
         DS    CL1
TASKADDR DS    CL6
         DS    CL2
CMPLBL   DS    CL3
         DS    CL1
TASKCOMP DS    CL8
         DS    CL2
KEYLBL   DS    CL3
         DS    CL1
TCBKEY   DS    CL1
         DS    CL2
PRTYLBL  DS    CL4
         DS    CL1
TASKPRTY DS    CL4
         DS    CL2
OTCLBL   DS    CL3
         DS    CL1
OTCADDR  DS    CL6
         DS    CL2
TASKSTAT DS    CL5
         DS    CL1
TASKCPU  DS    CL13
         SPACE
RBDTLS   DSECT
RBDTL    DS    CL5
RBLBL    DS    CL4
         DS    CL1
RBADDR   DS    CL6
         DS    CL2
RBPSWLBL DS    CL3
         DS    CL1
RBPSW1   DS    CL8
         DS    CL1
RBPSW2   DS    CL8
         DS    CL3
RBWTLBL  DS    CL4
RBWAITCT DS    CL4
         DS    CL3
RBILCLBL DS    CL3
         DS    CL1
RBILC    DS    CL1
         DS    CL2
RBINTLBL DS    CL4
         DS    CL1
RBINTC   DS    CL4
         DS    CL3
RBMODULE DS    CL8
         SPACE
OPNDDTLS DSECT
         DS    CL7
OPNDD    DS    CL8
         DS    CL2
OPN4     DS    CL2
         DS    CL1
OPNORG   DS    CL2
OPNORGU  DS    CL1
         DS    CL1
OPNLSTOP DS    CL4
         DS    CL1
OPNRFM   DS    CL4
OPNLRL   DS    CL6
OPNBLK   DS    CL6
OPNBUF   DS    CL4
         DS    CL1
OPNFLG   DS    CL3
         DS    CL2
OPNBBL   DS    CL3
         DS    CL1
OPNBBA   DS    CL6
         TITLE '  R E V O U T P T  '
**********************************************************************
*                                                          *         *
*         HELD OUTPUT DISPLAY HANDLER                      *  GP@P6  *
*                                                          * SEP2005 *
**********************************************************************
*                                                                    *
* REGISTERS ON ENTRY: R9 -> @DATA                                    *
*                     R13-> SAVE AREA                                *
*                     R14-> RETURN ADDRESS                           *
*                     R15-> REVOUTPT                                 *
*                                                                    *
* DURING PROCESSING:  R13-> @OUTDYN  (LOCAL GETMAINED AREA)          *
*                                                                    *
* RETURN CODES:       R15 = 0  PROCESSING COMPLETE                   *
*                                                                    *
**********************************************************************
         SPACE
REVOUTPT RSECT
REVOUTPT AMODE 31
REVOUTPT RMODE 24
         B     @OUT-*(,R15)
@OUTLBL  EQU   *+1,8
         DC    AL1(8),CL9'REVOUTPT'
@OUT     STM   R14,R12,12(R13)
         LR    R10,R15
         LA    R15,1
         LA    R11,4095(R15,R10)
         USING REVOUTPT,R10,R11
         LA    R0,$OUTDYNL         ACQUIRE DYNAMIC AREA
         GETMAIN RC,LV=(0),LOC=(24,64)
         LTR   R15,R15             SUCCESS?
         BZ    @OUTINIT            YES
         LA    R15,16              NO
         STH   R15,RC              SET RETURN CODE
         MVI   MSG,123             REQUEST ABORTED - STORAGE FULL
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         LH    R15,RC              SET RETURN CODE
         BR    R14                 RETURN TO CALLER
         USING DAPB08,MYDAPB
         USING DAPB18,MYDAPB
@OUTINIT LR    R14,R1              POINT TO IT
         LA    R15,$OUTDYNL        GET ITS SIZE
         SR    R3,R3               ZERO SOURCE LENGTH
         MVCL  R14,R2              CLEAR RESIDUAL DATA
         ST    R13,4(,R1)          CHAIN SAVE AREAS
         ST    R1,8(,R13)
         LR    R13,R1
         USING @OUTDYN,R13
         OI    STATUS11,$11OUT     FLAG REVOUTPT IN CONTROL
         L     R15,=A(REVNAME)
         BASR  R14,R15             ATTEMPT TO NAME THE SESSION
         MVI   DSNAIM+1,0          RESET DISPLAYED JOB ID
         XASAM24
         SPACE
RESTATUS MVC   OUTSVDSN(46),$DSNAME
         BAS   R4,FREEOUTM         FREE ALL MESSAGE ELEMENTS
         AIF   (&ENV390).HASP0
         PRINT NOGEN
         $JQE
         $QSE
         $SVT
         $SJB
         $LRC
         $TAB
         SPACE
*  MAKE  USING JCTDSECT,JCT  A VALID STATEMENT
JCT      EQU   1             JES2 USES 10 - BUT R10 IS IN USE HERE
         $JCT
         DROP  JCT           DROP UNNECESSARY USING
         $IOT
         PRINT GEN
*
*   IF ALREADY ACCESSING JES2 FILES THEN CONTINUE DOING SO
*
         TM    DCBOFLGS-IHADCB+CKPDCBW,DCBOFOPN
         BO    HASPCKIN            CKPT OPEN SO GO GET LATEST JQES
*
*   DETERMINE IF DIRECT I/O TO MVS 3.8 VANILLA JES2 FILES WILL BE USED
*
         L     R3,CVTPTR(,0)       POINT TO THE CVT
         USING CVT,R3
         CLI   CVTDCB,X'13'        MVS/370?
         BNE   HASP0               NO, USE FIB COMMANDS
         TM    CVTSMCA,X'80'       VSAM SMF DATA SETS?
         BO    HASP0               YES, NOT MVS 3.8 VANILLA
         L     R3,CVTJESCT         POINT TO THE JESCT
         DROP  R3                  CVT
         USING JESCT,R3
         L     R3,JESSSCT          POINT TO PRIMARY SSCT
         DROP  R3                  JESCT
         USING SSCT,R3
         CLI   SSCTSSID,SSCTJES2   JES2 PRIMARY SUBSYSTEM?
         BNE   HASP0               NO, USE FIB COMMANDS
*
*   ALLOCATE THE JES2 CHECKPOINT DATA SET
*
         L     R3,SSCTSSVT         POINT TO PRIMARY SSVT
         DROP  R3                  SSCT
         USING SSVT,R3
         MVC   CKPTVOL,$SVCHKPT    SAVE CHECKPOINT VOLUME SERIAL
         MVC   $VOLSER,$SVCHKPT    SAVE PRIMARY SPOOL VOLUME SERIAL
         MVC   CKPHAVT,$SVHAVT     SAVE HAVT ADDRESS
         DROP  R3                  SSVT
         MVI   $DSNAME+2,C' '
         MVC   $DSNAME+3(43),$DSNAME+2
         MVC   $DSNAME+2(13),=CL13'SYS1.HASPCKPT'
         LA    R0,13
         STH   R0,$DSNAME
         XC    MYDAPB,MYDAPB
         MVI   DA08CD+1,X'08'
         MVC   DA08UNIT,=CL8'SYSALLDA'
         MVC   DA08DDN,=CL8' '
         MVC   DA08SER,=CL8' '
         MVC   DA08SER(6),$VOLSER
         MVC   DA08MNM,=CL8' '
         MVC   DA08PSWD,=CL8' '
         MVI   DA08DSP1,DA08SHR
         MVI   DA08DPS2,DA08KEEP
         MVI   DA08DPS3,DA08KEP
         LA    R0,$DSNAME
         ST    R0,DA08PDSN
         XC    MYECB,MYECB
         LA    R1,MYDAPL
         L     R15,CVTPTR(,0)      CVT
         L     R15,CVTDAIR-CVT(,R15)
         BASR  R14,R15
         LTR   R15,R15
         BNZ   HASP0               DYNAMIC ALLOCATION FAILED
         MVC   $DDNAME,DA08DDN
*
*   VERIFY ACCESS TO THE JES2 CHECKPOINT DATA SET
*
         LA    R1,$DDNAME
         L     R15,=A(REVDDLOC)
         BASR  R14,R15             FIND SUBJECT FILE DD TIOT ENTRY
         ICM   R15,7,17(R15)       TIOEFSRT
         ST    R15,$UCBAD          SAVE IT FOR LATER
         L     R15,=A(REVDASD)     POINT TO DASD DATA SET INIT. ROUTINE
         BASR  R14,R15             CALL IT - ONLY R9 TO R13 PRESERVED
         XASAM24
         LTR   R15,R15             CHECK RESULT
         BNZ   HASPINAC            CANNOT PROCESS JES2 CHECKPOINT
*
*   OPEN JES2 CHECKPOINT DATA SET
*
         L     R1,=A(SEQDCB)       POINT TO DCB TEMPLATE
         MVC   CKPDCBW,0(R1)       INITIALIZE CHECKPOINT DCB
         LA    R0,HASPABND         GET DCB EXIT ADDRESS
         ST    R0,CKPEXLST         PLACE IT IN THE LIST
         MVI   CKPEXLST,X'91'      INDICATE DCB ABEND AND LAST EXIT
         LA    R4,CKPDCBW          POINT TO THE CHECKPOINT DCB
         USING IHADCB,R4
         MVC   DCBDDNAM,$DDNAME    SET DCB FILE NAME
         MVI   DCBRECFM,DCBRECU    SET DCB RECORD FORMAT
         L     R0,=F'4096'
         STH   R0,DCBBLKSI         SET DCB BLOCK SIZE
         LA    R0,HASPEOF
         STCM  R0,7,DCBEODA        SET DCB END-OF-FILE HANDLER
         LA    R0,HASPSYNA
         STCM  R0,7,DCBSYNA        SET DCB SYNCHRONOUS ERROR HANDLER
         LA    R0,CKPEXLST
         STCM  R0,7,DCBEXLSA       SET DCB EXIT LIST
         NI    OUTFLG3,255-O3IOER-O3ABND
         MVI   OPEND,X'80'
         OPEN  ((R4),INPUT),MF=(E,OPEND)
         TM    DCBOFLGS,DCBOFOPN   DCB OPENED?
         BNO   HASPINAC            NO
*
*   READ THE JES2 CHECKPOINT MASTER RECORD
*
         POINT (R4),=A(X'300')     POINT TO THE THIRD RECORD
         L     R2,SCREENWK         POINT TO TEMPORARY READ BUFFER
         NI    OUTFLG3,255-O3IOER-O3ABND
         READ  CKPDECBW,SF,(R4),(R2),'S',MF=E
         CHECK CKPDECBW            READ THE THIRD RECORD
         DROP  R4                  IHADCB
         TM    OUTFLG3,O3IOER+O3ABND
         BNZ   HASPSHUT            ABANDON HASP I/O IF TROUBLE
*
*   ACQUIRE STORAGE FOR MASTER RECORD AND JQE BLOCKS
*
         USING $SAVEBEG,R2
         LA    R0,1                COUNT THE MASTER RECORD
         AH    R0,$JOBRECN         ADD JQE BLOCK COUNT
         ST    R0,CKPRECCT         SAVE NUMBER OF BLOCKS TO READ
         SLL   R0,12               GET TOTAL READ BUFFER SIZE
         ST    R0,CKPJQESZ         SAVE IT
         GETMAIN RC,LV=(0),LOC=(24,64)
         LTR   R15,R15             GOT THE JQE BLOCK STORAGE?
         BNZ   HASPSHUT            NO
         ST    R1,CKPJQEAD         YES, SAVE THE STORAGE ADDRESS
         AL    R1,=F'4096'         POINT TO FIRST JQE BLOCK BUFFER
         ST    R1,CKPJQORG         SAVE JQE OFFSET BASE
*
*   DETERMINE THE OFFSET OF THE FIRST PDDB FROM THE START OF THE IOT
*
         LH    R5,$NUMTGV          GET TRACK GROUPS PER VOLUME
         LA    R5,7(R5)            ROUND UP TO MULTIPLE OF 8
         SRL   R5,3                DIVIDE BY 8
         SR    R0,R0               CLEAR FOR INSERT
         IC    R0,$NUMDA           GET MAXIMUM SPOOL VOLUME COUNT
         MR    R4,R0               GET LENGTH OF TRACK GROUP MAP
         LA    R5,IOTTGMAP-IOTSTART+TGMAP-TGMDSECT+3(,R5)
         SRL   R5,2
         SLL   R5,2                ROUND 1ST PDDB OFFSET UP TO FULLWORD
         ST    R5,CKPPDDB1         SAVE OFFSET TO FIRST PDDB IN IOT
*
*   ACQUIRE 3 SPOOL BUFFERS FOR JCT, IOT AND SPOOLED FILE CONTENTS
*
         LA    R4,CKPJCTSZ         POINT TO FIRST BUFFER DETAILS AREA
         LA    R5,3                GET BUFFER COUNT
HASPBFLP EQU   *                   SPOOL BUFFER LOOP
         LH    R0,$BUFSIZE         GET SPOOL BLOCK SIZE
         ST    R0,0(,R4)           SAVE STORAGE AREA SIZE
         GETMAIN RC,LV=(0),LOC=(24,64)
         LTR   R15,R15             GOT THE SPOOL READ BUFFER?
         BNZ   HASPSHUT            NO
         ST    R1,4(,R4)           YES, SAVE THE STORAGE ADDRESS
         LA    R4,8(,R4)           POINT TO NEXT AREA'S DETAILS AREA
         BCT   R5,HASPBFLP         GO ACQUIRE THE NEXT BUFFER
*
*   ACQUIRE A WRITE BUFFER FOR THE OUTPUT DATA SET
*
         LA    R0,6
         SLL   R0,10               DATA SET ALLOCATED WITH BLKSIZE=6144
         ST    R0,CKPOUTSZ         SAVE STORAGE AREA SIZE
         GETMAIN RC,LV=(0),LOC=(24,64)
         LTR   R15,R15             GOT THE WRITE BUFFER?
         BNZ   HASPSHUT            NO
         ST    R1,CKPOUTAD         YES, SAVE THE STORAGE ADDRESS
*
*   EXTRACT THE JES2 SYSTEM IDENTIFIERS
*
         LA    R14,CKPSYSID        POINT TO SYSID HOLD AREA
         LA    R5,$SAVEEND         POINT TO FIRST QSE
         USING QSEDSECT,R5
HASPQSLP MVC   0(4,R14),QSESID     COPY SYSTEM IDENTIFIER
         TM    QSEFLAGS,QSELAST    IS THIS THE LAST QSE?
         LA    R14,4(,R14)         POINT TO NEXT SYSTEM ID SLOT
         LA    R5,QSELEN(,R5)      POINT TO NEXT QSE
         BZ    HASPQSLP            NO, GO GET NEXT IDENTIFIER
         DROP  R5                  QSEDSECT
*
*   LOCATE THE SPOOL VOLUME ENTRIES WITHIN THE MASTER RECORD
*
         AH    R5,$JOBRECN         POINT PAST JQE I/O CONTROL BYTES
         AH    R5,$JOTRECN         POINT PAST JOE I/O CONTROL BYTES
*
*   ALLOCATE AND OPEN EACH SPOOL VOLUME
*
         MVC   CKPSPLV,$SPOOL      COPY PRIMARY SPOOL VOLUME SERIAL
         MVI   $DSNAME+2,C' '
         MVC   $DSNAME+3(43),$DSNAME+2
         MVC   $DSNAME+2(13),=CL13'SYS1.HASPACE'
         LA    R0,12
         STH   R0,$DSNAME
         SR    R3,R3
         ICM   R3,1,$NUMDA         GET MAXIMUM SPOOL VOLUME COUNT
         BZ    HASPSHUT            NEEDS TO BE NON-ZERO OR GIVE UP
         DROP  R2                  $SAVEBEG
         LA    R2,SPOOLORG         POINT TO SPOOL CHAIN ORIGIN
HASPSVLP EQU   *                   SPOOL VOLUME LOOP
         CLI   0(R5),0             IS THIS VOLUME ENTRY IN USE?
         BE    HASPVLNX            NO, GO LOOK AT NEXT ENTRY
         CLI   0(R5),X'0F'         SUPPORTED DEVICE TYPE?
         BH    HASPSHUT            NO, GO BACK TO USING FIB COMMANDS
         XC    MYDAPB,MYDAPB
         MVI   DA08CD+1,X'08'
         MVC   DA08UNIT,=CL8'SYSALLDA'
         MVC   DA08DDN,=CL8' '
         MVC   DA08SER,=CL8' '
         MVC   DA08SER(6),CKPSPLV
         MVC   DA08SER+5(1),1(R5)  SUPPLY SPOOL VOLUME SUFFIX
         MVC   DA08MNM,=CL8' '
         MVC   DA08PSWD,=CL8' '
         MVI   DA08DSP1,DA08SHR
         MVI   DA08DPS2,DA08KEEP
         MVI   DA08DPS3,DA08KEP
         LA    R0,$DSNAME
         ST    R0,DA08PDSN
         XC    MYECB,MYECB
         LA    R1,MYDAPL
         L     R15,CVTPTR(,0)      CVT
         L     R15,CVTDAIR-CVT(,R15)
         BASR  R14,R15             ALLOCATE THE SPOOL DATA SET
         LTR   R15,R15             SUCCESS?
         BNZ   HASPSHUT            NO
         LA    R0,$SPLVSZ          GET SPOOL CHAINED ELEMENT SIZE
         GETMAIN RC,LV=(0),LOC=(24,64)
         LTR   R15,R15             ACQUIRED STORAGE FOR THE ELEMENT?
         BNZ   HASPSHUT            NO, GO BACK TO USING FIB COMMANDS
         USING SPLVEL,R2
         ST    R1,SPLVNEXT         YES, SAVE ADDRESS (SPOOLORG FOR 1ST)
         LR    R2,R1               POINT TO THE NEW STORAGE
         XC    0($SPLVSZ,R2),0(R2) CLEAR IT
         SR    R1,R1
         IC    R1,0(,R5)           LOAD UCBTYP4 FOR THIS SPOOL VOLUME
         IC    R0,CKP_TPC(R1)      GET TRACKS PER CYLINDER
         STC   R0,SPLVTPC+1        SAVE IT
         MVC   SPLVDDN,DA08DDN     SAVE SPOOL DATA SET FILE NAME
         L     R1,=A(SEQDCB)       POINT TO DCB TEMPLATE
         MVC   SPLVDCB,0(R1)       INITIALIZE CHECKPOINT DCB
         USING IHADCB,SPLVDCB
         MVC   DCBDDNAM,DA08DDN    SET DCB FILE NAME
         MVI   DCBRECFM,DCBRECU    SET DCB RECORD FORMAT
         L     R0,CKPBFRSZ
         STH   R0,DCBBLKSI         SET DCB BLOCK SIZE
         LA    R0,HASPEOF
         STCM  R0,7,DCBEODA        SET DCB END-OF-FILE HANDLER
         LA    R0,HASPSYNA
         STCM  R0,7,DCBSYNA        SET DCB SYNCHRONOUS ERROR HANDLER
         LA    R0,CKPEXLST
         STCM  R0,7,DCBEXLSA       SET DCB EXIT LIST
         MVI   OPEND,X'80'
         OPEN  (SPLVDCB,INPUT),MF=(E,OPEND)
         TM    DCBOFLGS,DCBOFOPN   DCB OPENED?
         BNO   HASPSHUT            NO, BACK TO FIB COMMANDS
         LA    R0,1                YES
         A     R0,CKPSPL#          INCREMENT SPOOL VOLUME COUNT
         ST    R0,CKPSPL#          SAVE UPDATED COUNTER
         L     R1,DCBDEBAD         POINT TO THE DEB
         USING DEBBASIC,R1
         USING DEBDASD,DEBBASND    NOT ISAM SO DEBDASD FOLLOWS DEBBASIC
         SR    R14,R14
         SR    R15,R15
         ICM   R14,3,DEBSTRCC      GET EXTENT START CYLINDER
         ICM   R15,3,DEBSTRHH      GET EXTENT START HEAD
         MH    R14,SPLVTPC         GET TRACKS BEFORE START CYLINDER
         ALR   R14,R15             GET TRACKS ON VOLUME BEFORE
         STH   R14,SPLVTOF             SYS1.HASPACE AND SAVE IT
         DROP  R1                  DEBBASIC, DEBDASD
HASPVLNX EQU   *                   FINISHED PROCESSING VOLUME ENTRY
         LA    R5,6(,R5)           POINT TO THE NEXT VOLUME ENTRY
         BCT   R3,HASPSVLP         CHECK ALL &NUMDA VOLUME ENTRIES
         DROP  R2                  SPLVEL
         MVC   $DSNAME(46),OUTSVDSN   RESTORE REQUESTED JOB NAME PREFIX
*
*   GET CURRENT MASTER RECORD AND JQE DATA FROM THE CHECKPOINT
*
HASPCKIN XC    TOTRECCT,TOTRECCT   RESET TOTAL SPOOLED RECORD COUNT
         BAS   R14,HASPCKRD        READ MASTER AND JQE BLOCKS
*
*   SELECT JOBS WHICH MATCH THE SPECIFIED JOB NAME PREFIX
*
*         SIMILARITIES WITH FIB PROCESSING:
*         1. $DSNAME HOLDS THE SPECIFIED JOB NAME PREFIX.
*         2. WHEN NO JOB NAME PREFIX IS SPECIFIED THE TSO
*            USER'S IDENTIFIER IS USED AS THE PREFIX.
*
*         DIFFERENCES FROM FIB PROCESSING:
*         1. ANY PREFIX BEGINNING WITH AN ASTERISK IS
*            CONSIDERED TO REQUEST ALL JOBS.
*
*
*         THE ORDER OF THE QUEUE HEADS IN THE MASTER RECORD
*         IS ALTERED SO THAT THE SECOND JQE QUEUE - WHICH IS
*         THE PRINT/PUNCH QUEUE - IS LAST SO THAT THE JOB
*         ORDER IS A BETTER MATCH TO THE JOB ORDER PRESENTED
*         BY THE FIB METHOD.
*
         L     R2,CKPJQEAD         POINT TO MASTER (3RD CKPT) RECORD
         USING $SAVEBEG,R2
         LA    R4,$JQHEADS         POINT TO FIRST QUEUE HEAD
         LH    R3,2(,R4)           DEMOTE PRINT/PUNCH QUEUE TO LAST
         MVC   2(2*($JQTYPES-2),R4),4(R4)
         STH   R3,($JQTYPES-1)*2(,R4)
         LA    R3,$JQTYPES         GET NUMBER OF QUEUE HEADS
         DROP  R2                  $SAVEBEG
HASPQHLP EQU   *                   QUEUE HEAD LOOP
         SR    R5,R5               CLEAR FOR INSERT
         ICM   R5,3,0(R4)          GET INDEX FOR FIRST JQE ON CHAIN
         BZ    HASPQHNX            THIS QUEUE IS EMPTY
HASPJQLP EQU   *                   JQE LOOP
         SLL   R5,2                MULTIPLY INDEX BY 4 TO GET OFFSET
         AL    R5,CKPJQORG         POINT TO JQE
         USING JQEDSECT,R5
         LH    R14,$DSNAME         GET JOB NAME PREFIX LENGTH
         LA    R15,$DSNAME+2       POINT TO JOB NAME PREFIX
         LTR   R14,R14             ANY PREFIX SUPPLIED?
         BNZ   HASPJPOK            YES, PROCEED
         L     R15,REVPSCB         NO, USE USER ID
         IC    R14,PSCBUSRL-PSCB(,R15)
HASPJPOK BCTR  R14,0               DECREMENT FOR EXECUTE
         LTR   R14,R14             ANY PREFIX PRESENT?
         BM    HASPJQOK            NO
         CLI   0(R15),C'*'         ALL JOBS SELECTED?
         BE    HASPJQOK            YES, SKIP PREFIX FILTERING
         LA    R1,JQEJNAME         POINT TO JOB NAME
         EX    R14,OTCMDTST        LIST THIS JOB?
         BNE   HASPJQNX            NO
*
*   CREATE INTERNAL CHAINED ENTRY FOR EACH INCLUDED JOB
*
HASPJQOK LA    R6,OUTFIXL+56       GET MESSAGE STORAGE AREA SIZE
         GETSTOR RC,LV=(R6),LOC=(31,64)
         LTR   R15,R15             GOT STORAGE FOR ELEMENT?
         BZ    HASPGMOK            YES
         MVI   MSG,123             REQUEST ABORTED - STORAGE FULL
         B     SAMEOUT             QUIT JQE SCAN
         USING OUTELEM,R1
HASPGMOK XC    OUTELEM(OUTFIXL),OUTELEM
         MVI   OUTMSG,C' '         BLANK MESSAGE AREA
         MVC   OUTMSG+1(55),OUTMSG
         ST    R6,OUTSIZE          SET STORAGE SIZE
         MVI   OUTMSGL+1,56        SET MESSAGE SIZE
         L     R6,@OUTLAST         POINT TO LAST MESSAGE SO FAR
         ST    R6,OUTPREV          NEW LAST BACK TO OLD LAST
         ST    R1,0(,R6)           OLD LAST FORWARD TO NEW LAST
         ST    R1,@OUTLAST         UPDATE LAST ADDRESS
         LA    R0,1
         A     R0,@OUTNMBR         INCREMENT CHAIN ELEMENT COUNT
         ST    R0,@OUTNMBR
         ST    R0,OUTSEQ#          SET ELEMENT SEQUENCE NUMBER
         MVC   OUTMSG(4),=C'JOB '  INDICATE JOB STATUS MESSAGE
         MVC   OUTMSG+4(8),JQEJNAME
         LA    R6,OUTMSG+11        POINT TO LAST JOB NAME CHARACTER
HASPJNLP CLI   0(R6),C' '          TRAILING BLANK?
         BNE   *+8                 NO
         BCT   R6,HASPJNLP         YES, BACK UP ONE
         LH    R0,JQEJOBNO         GET JOB NUMBER
         CVD   R0,DOUBLE
         OI    DOUBLE+7,X'0F'      PREPARE FOR UNPACK
         UNPK  5(5,R6),DOUBLE      SHOW THE JOB NUMBER
         MVI   10(R6),C')'
         MVC   1(4,R6),=C'(JOB'    PREPARE FOR BATCH JOB
         CLI   5(R6),C'0'          REALLY A BATCH JOB?
         BE    HASPJ#OK            YES
         MVC   2(3,R6),=C'STC'     PREPARE FOR STARTED TASK
         CLI   5(R6),C'1'          REALLY A STARTED TASK?
         BE    HASPJ#OK            YES
         MVC   2(3,R6),=C'TSU'     MUST BE A TSO USER
HASPJ#OK MVI   5(R6),C'0'          FINALIZE JOB NUMBER FORMATTING
         MVC   DSNAIM+4(8),2(R6)   PRIME FOR JCT VERIFICATION CHECK
         ICM   R2,8,JQETYPE        LOAD QUEUE TYPE
         LA    R0,7                GET BIT FLAG COUNT
         LA    R15,=C'XEQ   INPUT XMIT  SETUP RECV  OUTPUTPRTPUNPURGE '
HASPQTLP EQU   *                   QUEUE TYPE LOOP
         SLL   R2,1                PROMOTE NEXT FLAG BIT
         LTR   R2,R2               FLAG SET?
         BM    HASPQTOK            YES
         LA    R15,6(,R15)         NO, POINT TO NEXT QUEUE NAME
         BCT   R0,HASPQTLP
HASPQTOK MVC   12(6,R6),0(R15)     INDICATE WHICH QUEUE JQE IS ON
         TM    JQETYPE,$XEQ        ON EXECUTION QUEUE?
         BNO   HASPQTDN            NO, QUEUE TYPE DONE
         MVC   16(1,R6),JQETYPE    YES, SHOW WHICH EXECUTION QUEUE
*  THE USE OF A TRANSLATE TABLE TO CONVERT JQETYPE TO THE
*  DISPLAYABLE JOB CLASS WOULD GENERATE FEWER INSTRUCTIONS,
*  AND WOULD ALSO BE MUCH MORE ELEGANT LOGIC, BUT WOULD
*  MAKE THE CSECT BIGGER THAN THE CODE WHICH FOLLOWS.
         OI    16(R6),X'80'        SHOW JOB CLASS
         CLI   16(R6),X'C0'
         BNE   *+8
         MVI   16(R6),C'*'         JCL CONVERSION
         CLI   16(R6),X'D0'
         BNE   *+8
         MVI   16(R6),C'$'         STARTED TASK
         CLI   16(R6),X'E0'
         BNE   *+8
         MVI   16(R6),C'@'         TSO USER
HASPQTDN EQU   *
         IC    R15,JQEFLAGS
         LA    R0,QUEBUSY
         NR    R15,R0              JOB BUSY?
         BZ    HASPIDOK            NO
         SLA   R15,2               YES
         L     R15,CKPSYSID-4(R15) GET THE SYSTEM IDENTIFIER
         STCM  R15,15,19(R6)       SHOW IT
HASPIDOK EQU   *
         TM    JQEFLAGS,QUEHOLD2
         BZ    HASPH2OK
         MVC   24(3,R6),=C'DUP'
HASPH2OK EQU   *
         TM    JQEFLAGS,QUEHOLDA
         BZ    HASPHAOK
         MVC   24(3,R6),=C'$HA'
HASPHAOK EQU   *
         TM    JQEFLAGS,QUEHOLD1
         BZ    HASPH1OK
         MVC   24(4,R6),=C'HOLD'
HASPH1OK EQU   *
         TM    JQEFLAGS,QUEOPCAN
         BZ    HASPOCOK
         MVC   29(3,R6),=C'CAN'
HASPOCOK EQU   *
         TM    JQEFLAGS,QUEPURGE
         BZ    HASPPGOK
         MVC   29(3,R6),=C'PRG'
HASPPGOK EQU   *
         XC    JOBRECCT,JOBRECCT   RESET COUNTER
         OI    OUTFLG3,O3LNCT      TIME TO GET SYSOUT RECORD COUNT
         STM   R3,R4,SBASAVE       SAVE A COUPLE OF REGISTERS
         B     OUTHAMIO            GO ADD UP THE DD RECORD COUNTS
*
*  EACH CHAINED IOT - TOGETHER WITH EACH OF ITS ATTENDANT PDDBS -
*  MUST BE FOUND IN ORDER TO RETRIEVE THE (SYSIN AND) SYSOUT RECORDS
*  WHEN THE JOB'S SPOOL FILES ARE TO BE BROWSED.  RATHER THAN DUPLICATE
*  THAT PDDB SEARCH LOGIC SO THAT THE RECORD COUNT FOR EACH FILE CAN BE
*  TOTALLED UP, THE EXISTING CODE USED BY THE BROWSE FILE WRITE-OUT
*  PHASE IS SIMPLY BRANCHED TO, AFTER SETTING THE 'O3LNCT' FLAG SO THAT
*  IT KNOWS TO SKIP THE I/O OF THE FILE CONTENTS.
*
OUTCTDON EQU   *                   RETURN POINT FROM PDDB CHAIN CHASE
         NI    OUTFLG3,255-O3LNCT  RESET PDDB DALLYANCE FLAG
         L     R1,@OUTLAST         RESTORE ELEMENT POINTER
         LM    R3,R4,SBASAVE       RESTORE A COUPLE OF REGISTERS
         L     R0,JOBRECCT         GET THE JOB'S RECORD COUNT
         CVD   R0,DOUBLE           GET THAT IN DECIMAL
         A     R0,TOTRECCT         TOTAL IT FOR ALL SELECTED JOBS
         ST    R0,TOTRECCT         SAVE UPDATED TOTAL
         MVC   32(8,R6),OUTED7
         ED    32(8,R6),DOUBLE+4   REPORT JOB'S SYSOUT LINE COUNT
         DROP  R1                  OUTELEM
HASPJQNX EQU   *                   FOLLOW CHAIN TO NEXT JQE
         TM    STATUS4,$4ATTN      ATTENTION INTERRUPT?
         BO    HASPATTN            YES, STOP COMPILING THE LIST
         SR    R0,R0               CLEAR FOR INSERT
         ICM   R0,3,JQECHAIN       GET INDEX FOR NEXT JQE ON CHAIN
         LTR   R5,R0               END OF CHAIN?
         BNZ   HASPJQLP            NO, GO PROCESS THIS JQE
         DROP  R5                  JQEDSECT
HASPQHNX EQU   *                   PROCESS NEXT QUEUE HEAD
         LA    R4,2(,R4)           POINT TO NEXT QUEUE HEAD
         BCT   R3,HASPQHLP         GO PROCESS IT
         B     SAMEOUT             JQE SCAN NOW COMPLETE
HASPATTN EQU   *                   SOMEONE GOT IMPATIENT WITH PDDB I/O
         MVI   MSG,122             PROCESSING INTERRUPTED
         B     SAMEOUT             JQE SCAN NOW COMPLETE
         SPACE
*  DASD DEVICE TYPES X'01' TO X'07' ARE ASSUMED TO BE EITHER TOO OLD
*  TO BE SUPPORTED BY MVS OR TOO SMALL TO BE USED AS SPOOL VOLUMES.
CKP_TPC  EQU   *-8
*              TRKS-PER-CYL        UNIT     TRK-LEN      UCBTYP
         DC    AL1(20)             2314       7403      30C02008
         DC    AL1(19)             3330      13165      30502009
         DC    AL1(12)             3340       8535      3040200A
         DC    AL1(30)             3350      19254      3050200B
         DC    AL1(12)             3375      36000      3010200C
         DC    AL1(19)             3330-1    13165      3050200D
         DC    AL1(15)             3380      47968      3010200E
         DC    AL1(15)             3390      58786      3010200F
*  (UCBRR - X'20' OF SECOND UCBTYP BYTE - IS ON FOR SHARED DASD.)
         SPACE
*
*   READ CURRENT MASTER RECORD AND JQE DATA FROM THE CHECKPOINT
*
HASPCKRD EQU   *                   READ MASTER AND JQE BLOCKS
         ST    R14,READR           SAVE RETURN ADDRESS
         NI    OUTFLG3,255-O3IOER-O3ABND
         POINT CKPDCBW,=A(X'300')  POINT TO THE THIRD ("MASTER") RECORD
         L     R2,CKPJQEAD         POINT TO FIRST READ BUFFER
         L     R3,CKPRECCT         GET NUMBER OF BLOCKS TO READ
HASPCKLP EQU   *                   JQE BLOCK READ LOOP
         READ  CKPDECBW,SF,CKPDCBW,(R2),'S',MF=E
         CHECK CKPDECBW
         TM    OUTFLG3,O3IOER+O3ABND
         BNZ   HASPSHUT            ABANDON HASP I/O IF TROUBLE
         AL    R2,=F'4096'         POINT TO NEXT BLOCK'S BUFFER
         BCT   R3,HASPCKLP         READ ALL OF THE JQE BLOCKS
         L     R14,READR           RESTORE RETURN ADDRESS
         BR    R14                 RETURN TO CALLER
         SPACE
*
*   READ A BLOCK FROM THE SPOOL SPACE
*
*         GPR1 = MTTR
*         GPR2 = READ BUFFER ADDRESS
*
HASPSPRD EQU   *                   READ MASTER AND JQE BLOCKS
         ST    R14,READR           SAVE RETURN ADDRESS
         NI    OUTFLG3,255-O3IOER-O3ABND
         SR    R0,R0               CLEAR FOR SHIFT
         SLDL  R0,8                SHIFT M TO R0 LEAVING TTRZ IN R1
         L     R3,SPOOLORG         POINT TO FIRST VOLUME ELEMENT
         USING SPLVEL,R3
         ST    R1,DOUBLE           SAVE VOLUME TTRZ
         LTR   R0,R0               FIRST SPOOL VOLUME?
         BZ    HASPSPXT            YES, HAVE THE RIGHT EXTENT
HASPSPML EQU   *                   SPOOL EXTENT LOOP
         ICM   R3,15,SPLVNEXT      POINT TO NEXT EXTENT
         BZ    HASPSHUT            M IS TOO LARGE
         BCT   R0,HASPSPML
HASPSPXT EQU   *                   HAVE THE CORRECT EXTENT
         SRL   R1,16               GET TT
         SH    R1,SPLVTOF          CONVERT VOLUME TT TO DATA SET TT
         STH   R1,DOUBLE           SAVE DATA SET TT TO GET TTRZ
         POINT SPLVDCB,DOUBLE      POINT TO REQUESTED BLOCK
         READ  SPLVDECB,SF,SPLVDCB,(R2),'S',MF=E
         CHECK SPLVDECB
         TM    OUTFLG3,O3IOER+O3ABND
         BNZ   HASPSHUT            ABANDON HASP I/O IF TROUBLE
         L     R14,READR           RESTORE RETURN ADDRESS
         BR    R14                 RETURN TO CALLER
         DROP  R3                  SPLVEL
         SPACE
*
*   I/O ERROR HANDLER FOR CHECKPOINT AND SPOOL
*
HASPSYNA EQU   *                   SYNAD EXIT
         SYNADAF ACSMETH=BSAM
         MVC   SYNADMSG,50(R1)     LEAVE A CLUE FOR DIAGNOSIS
         OI    OUTFLG3,O3IOER
         SYNADRLS
*        MVI   MSG,112             I/O ERROR
         BR    R14
         SPACE
*
*   END-OF-FILE HANDLER FOR CHECKPOINT AND SPOOL
*
HASPEOF  EQU   *                   SPOOL END-OF-FILE
         MVI   SYNADMSG,C' '
         MVC   SYNADMSG+1(L'SYNADMSG-1),SYNADMSG
         MVC   SYNADMSG(5),=C'*EOF*'
         OI    OUTFLG3,O3IOER
*        MVI   MSG,112             I/O ERROR
         BR    R14
         SPACE
*
*   DCB ABEND EXIT FOR CHECKPOINT, SPOOL AND STAGED SYSOUT
*
HASPABND EQU   *                   SPOOL END-OF-FILE
         OI    OUTFLG3,O3ABND      INDICATE I/O ABEND
         MVC   MSG+2(7),=C'ABEND S'
         UNPK  MSG+2+8(7),0(4,R1)
         TR    MSG+2+8(6),OUTHEX-240
         MVI   MSG+2+14,C' '
         MVC   MSG+2+7(3),MSG+2+8
         MVC   MSG+2+10,C'-'
         MVI   MSG,0
         MVI   MSG+1,14            SET MESSAGE LENGTH
         OI    STATUS7,$7BELL      SOUND BELL FOR ERROR MESSAGE
         TM    3(R1),B'00000100'   ALLOWED TO IGNORE THE ABEND?
         BZR   R14                 NO
         MVI   3(R1),4             YES, IGNORE THE ABEND
         BR    R14
         SPACE
*
*   CLOSE JES2 CHECKPOINT
*
HASPSHUT EQU   *                   SHOULD NEVER GET END-OF-FILE
         MVI   CLOSED,X'80'
         CLOSE (CKPDCBW),MF=(E,CLOSED)
         MVC   $DDNAME,CKPDCBW+DCBDDNAM-IHADCB
         MVI   SYNADSW,X'00'       CLEAR I/O ERROR STATUS
*
*   FREE CHECKPOINT AND SPOOL READ BUFFERS
*
         LA    R2,CKPJQESZ         POINT TO FIRST STORAGE AREA DETAILS
         LA    R3,$CKPSTG#         GET STORAGE AREA COUNT
HASPFMLP EQU   *                   STORAGE FREEMAIN LOOP
         LM    R0,R1,0(R2)         GET STORAGE SIZE AND ADDRESS
         LTR   R1,R1               WAS THIS AREA ACQUIRED?
         BZ    HASPFMNX            NO, GO LOOK AT THE NEXT AREA
         FREEMAIN RU,LV=(0),A=(1)  YES, FREE IT
         ST    R15,4(,R2)          CLEAR THE ADDRESS
HASPFMNX EQU   *
         LA    R2,8(,R2)           POINT TO NEXT AREA'S DETAILS
         BCT   R3,HASPFMLP         GO FREE THE NEXT AREA
         ST    R3,#JQE             RESET CURRENT JQE POINTER
         TM    OUTFLG3,O3IOER      ANY I/O ERROR MESSAGE AVAILABLE?
         BNO   HASPVFLP            NO
         LA    R1,SYNADMSG         YES, POINT TO IT
         LA    R0,L'SYNADMSG       GET ITS LENGTH
         TPUT  (1),(0),R           DISPLAY IT FOR DIAGNOSIS
*
*   CLOSE, DEALLOCATE AND FREE JES2 SPOOL SPACE DATA SET RESOURCES
*
HASPVFLP EQU   *                   SPOOL VOLUME FREE LOOP
         ICM   R2,15,SPOOLORG      POINT TO FIRST VOLUME ELEMENT
         BZ    HASPINAC            NO ELEMENTS REMAIN
         USING SPLVEL,R2
         USING IHADCB,SPLVDCB
         TM    DCBOFLGS,DCBOFOPN   DCB OPENED?
         BNO   HASPVFRE            NO, DO NOT HAVE TO CLOSE IT
         MVI   CLOSED,X'80'
         CLOSE (SPLVDCB),MF=(E,CLOSED)
HASPVFRE EQU   *                   DEALLOCATE SPOOL VOLUME
         XC    MYDAPB,MYDAPB
         MVI   DA18CD+1,X'18'
         MVC   DA18DDN,DCBDDNAM    LOAD DDNAME TO DEALLOCATE
         MVC   DA18MNM,=CL8' '
         MVC   DA18SCLS,=CL8' '    (2-BYTE FIELD)
         XC    MYECB,MYECB
         LA    R1,MYDAPL
         L     R15,CVTPTR(,0)      CVT
         L     R15,CVTDAIR-CVT(,R15)
         BASR  R14,R15             CALL IKJDAIR
         MVC   SPOOLORG,SPLVNEXT   SAVE POINT TO NEXT ELEMENT
         DROP  R2                  SPLVEL, IHADCB
         LR    R1,R2               POINT TO ELEMENT TO FREE
         LA    R0,$SPLVSZ          GET ITS SIZE
         FREEMAIN RU,LV=(0),A=(1)  FREE SPOOL VOLUME ELEMENT
         B     HASPVFLP            GO FREE NEXT VOLUME
*
*   DEALLOCATE THE JES2 CHECKPOINT
*
HASPINAC EQU   *                   CANNOT READ THE JES2 CHECKPOINT
         XC    MYDAPB,MYDAPB
         MVI   DA18CD+1,X'18'
         MVC   DA18DDN,$DDNAME     LOAD DDNAME TO DEALLOCATE
         MVC   DA18MNM,=CL8' '
         MVC   DA18SCLS,=CL8' '    (2-BYTE FIELD)
         XC    MYECB,MYECB
         LA    R1,MYDAPL
         L     R15,CVTPTR(,0)      CVT
         L     R15,CVTDAIR-CVT(,R15)
         BASR  R14,R15             CALL IKJDAIR
         MVC   $DSNAME(46),OUTSVDSN
         TM    STATUS11,$11OUT     REVOUTPT TO CONTINUE?
         BNO   OUTEXIT             NO
*
*   EMPLOY TSO FIB COMMANDS
*
HASP0    EQU   *
.HASP0   ANOP
         MVI   CMDAREA,C' '        INITIALIZE COMMAND BUFFER
         MVC   CMDAREA+1(L'CMDAREA-1),CMDAREA
         MVC   CMDAREA(13),=CL13'TSO %REVOUTJB'
         LA    R14,CMDAREA+13      POINT PAST COMMAND
         LH    R1,$DSNAME          GET JOB NAME SPEC LENGTH
         LTR   R1,R1               ANY JOB NAME SPEC?
         BNP   OUTJOBOK            NO, SKIP OPERAND
         MVC   CMDAREA+14(4),=CL4'JOB('
         LA    R0,$DSNAME+2        POINT TO JOB NAME SPEC
         LA    R14,CMDAREA+18      POINT TO TARGET
         LR    R15,R1              SET TARGET LENGTH
         MVCL  R14,R0              LOAD JOB NAME SPEC
         MVI   0(R14),C')'         TIDY UP COMMAND STRING
         LA    R14,1(,R14)         POINT PAST COMMAND
OUTJOBOK LA    R1,CMDAREA
         SR    R14,R1              GET COMMAND STRING LENGTH CODE
         ST    R14,CMDLEN          SAVE COMMAND STRING LENGTH CODE
         MVC   COMPON,@REVOUT      FLAG COMPONENT FOR HELP
         MVC   $DDNAME,#REVOUT     LOAD SOMETHING FOR SWAP LIST
         OI    STATUS10,$10CAP     SET CAPS ON
         OI    STATUS4,$4CMD       TELL REVCOMM TO SKIP TERMINAL I/O
         XASAM31
         L     R15,=A(REVCOMM)     NO PARAMETER LIST PASSED
         OI    STATUS11,$11ST      FLAG GATHERING JOB STATUS DATA
         BASR  R14,R15             PROCESS COMMAND STRING
         NI    STATUS11,255-$11ST  NO LONGER GETTING JOB STATUS DATA
         SPACE
SAMEOUT  CLC   TOPOUT,@OUTNMBR     CAN THE LINE BE SHOWN?
         BL    THISOUT             YES
         ICM   R2,15,ISPFPAGE      NO, GET VISIBLE LINE COUNT
         BP    *+8                 NON-ZERO IS GOOD
         LA    R2,1                SHOW LAST LINE IF ZERO
         LNR   R2,R2               MAKE NEGATIVE
         A     R2,@OUTNMBR         GET TOP LINE NUMBER
         BNM   *+6                 SHOW A SCREENFUL OF ELEMENTS
         SR    R2,R2               START FROM TOP IF FEWER
         ST    R2,TOPOUT           SAVE THE NEW TOP LINE NUMBER
THISOUT  NI    STATUS4,255-$4REFR  RESET REFRESH FLAG
         OI    STATUS10,$10CAP     SET CAPS ON
         MVI   HDCOLOR,X'05'       CLEAR SCREEN TO TURQUOISE BLANKS
         L     R15,=A(REVHEAD)     POINT TO HEADING ROUTINE
         BASR  R14,R15             INITIALISE FIRST TWO SCREEN LINES
         L     R2,SCREENBF         POINT TO THE PRIMARY BUFFER
         A     R2,SCRNCOLS         POINT TO THE SECOND PRIMARY LINE
         LR    R14,R2
         LA    R0,12
         SLR   R14,R0              BACK UP TWELVE BYTES
         L     R1,@OUTNMBR         GET ELEMENT COUNT IN BINARY
         CVD   R1,DOUBLE           GET ELEMENT COUNT IN DECIMAL
         LA    R1,11(,R14)         POINT TO LAST DIGIT
         MVC   4(8,R14),OUTED7     LOAD EDIT MASK
         EDMK  4(8,R14),DOUBLE+4   SHOW UP TO 9999999 ENTRIES CORRECTLY
         LR    R14,R1
         SLR   R14,R0              BACK UP TWELVE BYTES BEFORE NUMBER
         LA    R1,1
         A     R1,TOPOUT           GET TOP ELEMENT NUMBER IN BINARY
         CVD   R1,DOUBLE           GET TOP ELEMENT NUMBER IN DECIMAL
         LA    R1,7(,R14)          POINT TO LAST DIGIT
         MVC   8(4,R14),=C' OF '
         MVC   0(8,R14),OUTED7     LOAD EDIT MASK
         EDMK  0(8,R14),DOUBLE+4   SHOW UP TO ROW 9999999 CORRECTLY
         SLR   R1,R0               BACK UP TWELVE BYTES BEFORE NUMBER
         MVC   6(6,R1),=C' LINE '
         A     R2,SCRNCOLS         POINT TO THE THIRD PRIMARY LINE
         LR    R1,R2               POINT TO THE THIRD PRIMARY LINE
         A     R1,SCREENSZ         POINT TO THE THIRD SHADOW LINE
         MVI   0(R2),FLDOUTHI      COLUMN HEADINGS IN HIGH INTENSITY
         MVI   1(R1),X'06'         COLUMN HEADINGS IN YELLOW
         MVC   2(78,R1),1(R1)
         MVC   1(L'OUTSUBHD,R2),OUTSUBHD
         AIF   (&ENV390).HASPHD
         TM    DCBOFLGS-IHADCB+CKPDCBW,DCBOFOPN
         BNO   HASPHDOK            NOT READING CHECKPOINT DATA SET
         MVC   1+L'OUTSUBHD-6(28,R2),=C'QUEUE  EXEC STATUS   RECORDS'
         ICM   R0,15,TOTRECCT      GET TOTAL SYSOUT RECORD COUNT
         BZ    HASPHDOK            SKIP REPORT IF ZERO
         L     R1,SCREENBF         POINT TO PRIMARY SCREEN BUFFER
         CVD   R0,DOUBLE
         MVC   30(13,R1),=C'SYSOUT TOTAL:'
         MVC   43(8,R1),OUTED7
         ED    43(8,R1),DOUBLE+4
HASPHDOK EQU   *
         XASAM24
.HASPHD  ANOP
         MVC   52(28,R2),OUTCOLHD
         SPACE
         L     R1,SCRNLNES         GET NUMBER OF LINES ON SCREEN
         LA    R0,3                GET USED SCREEN LINE COUNT
         SR    R1,R0               GET DETAIL DISPLAY LINE COUNT
         LA    R3,@OUTFRST         POINT TO FIRST ENTRY POINTER
         USING OUTELEM,R3
NEXTOUT  ICM   R3,15,OUTNEXT       POINT TO NEXT ELEMENT
         BZ    DSPLYOUT            SHOULD NOT HAPPEN
         CLC   OUTSEQ#,TOPOUT      REACHED TOP LINE YET?
         BNH   NEXTOUT             NO
         ST    R3,TOPOUTAD         YES, SAVE ADDRESS OF TOP ELEMENT
         B     OUTFIRST
         SPACE
*   AUTO-SELECTION ('S' GENERATED BY CURSOR POSITIONED OVER A DOT)
*   DID NOT OCCUR FOR REVOUT BECAUSE THE SCREEN DATA DID NOT MATCH
*   AUTODOT1 NOR AUTODOT2 BECAUSE COLUMN 3 IS NOT AN OUTPUT FIELD
*   ATTRIBUTE BYTE BUT RATHER ANOTHER INPUT FIELD ATTRIBUTE BYTE.
*
*   IT TURNS OUT THAT THIS IS GOOD BECAUSE (AND MAYBE THIS IS WHY
*   SDSF DOES NOT DO IT) NOW THE CURSOR WILL BE POSITIONED AT THE
*   JOB LAST VIEWED, AND HITTING <ENTER> SHOULD NOT SELECT THE SAME
*   JOB TO VIEW AGAIN BUT JUST UPDATE THE JOB STATUS LIST.
*
*   NOW THERE IS NO NEED TO HAVE AN AUTO-SELECTION DOT, BOTH INPUT
*   FIELDS WILL BE MARKED BY A SINGLE QUOTE.  NOTE THAT THE SECOND
*   INPUT FIELD COULD CAUSE AUTO-SELECTION (HAVE A NEWCLASS OF 'S'
*   SUPPLIED BY CURSOR POSITION) IF IT WERE PRIMED WITH A DOT.
*
OUTFRMAT ICM   R3,15,OUTNEXT       POINT TO THE MESSAGE ELEMENT
         BZ    DSPLYOUT            END OF CHAIN REACHED
OUTFIRST A     R2,SCRNCOLS         POINT TO THE NEXT DISPLAY LINE
         MVI   0(R2),FLDOUTLO      PREPARE FOR NON-STATUS MESSAGE
         LA    R6,5(,R2)           POINT TO LINE DISPLAY TEXT AREA
         CLC   OUTMSGL,=H'14'      POSSIBLE JOB STATUS MESSAGE?
         BL    OUTNOJOB            NO, TOO SHORT SO JUST COPY MESSAGE
         CLC   =C'JOB ',OUTMSG     JOB STATUS MESSAGE?
         BNE   OUTNOJOB            NO
         LA    R0,8                GET MAXIMUM JOB NAME LENGTH
         LA    R14,OUTMSG+4        POINT TO JOB NAME START
OUTJBNLP CLI   0(R14),C'('         START OF JOB ID?
         BE    OUTJBNOK            YES
         MVC   0(1,R6),0(R14)      NO
         LA    R6,1(,R6)           INCREMENT TARGET CURSOR
         LA    R14,1(,R14)         INCREMENT SOURCE CURSOR
         BCT   R0,OUTJBNLP
OUTJBNOK LA    R15,8
         SR    R15,R0              GET JOB NAME LENGTH
         STH   R15,OUTJOBL         SAVE IT
         LA    R6,3(,R2)           POINT TO LINE DISPLAY TEXT AREA
         LA    R0,11(,R14)         POINT PAST JOB ID
         LA    R15,OUTMSG          POINT TO MESSAGE
         SR    R0,R15              GET MESSAGE BYTES BEFORE STATUS
         LH    R15,OUTMSGL         GET MESSAGE TEXT LENGTH
         SR    R15,R0              GET STATUS TEXT LENGTH
         BNP   OUTNOJOB            MESSAGE TOO SHORT FOR FORMATTING
         CLI   0(R14),C'('         JOB ID START LOOKING GOOD?
         BNE   OUTNOJOB            NO
         CLI   9(R14),C')'         JOB ID END LOOKING GOOD?
         BNE   OUTNOJOB            NO
         MVI   0(R2),FLDINHI       HIGH INTENSITY FOR INPUT FIELD
         MVC   1(1,R2),OUTQCMD     COPY QUEUED SELECTION CODE
         CLI   1(R2),C' '          ANY DATA QUEUED?
         BH    *+8                 YES, DO NOT OVERWRITE
         MVI   1(R2),QUOTE         NO, MARK JOB SELECTION FIELD
         MVI   2(R2),FLDINHI       HIGH INTENSITY FOR INPUT FIELD
         MVC   3(1,R2),OUTQCMD+1   COPY QUEUED REQUEUE CLASS
         CLI   3(R2),C' '          ANY DATA QUEUED?
         BH    *+8                 YES, DO NOT OVERWRITE
         MVI   3(R2),QUOTE         NO, MARK NEW SYSOUT CLASS FIELD
         MVC   OUTQCMD,=CL8' '     CLEAR QUEUED PROCESS REQUEST
         A     R2,SCREENSZ         POINT TO SHADOW BUFFER LINE
         MVI   1(R2),X'01'         BLUE FOR INPUT FIELD MARKER
         MVI   3(R2),X'01'         BLUE FOR INPUT FIELD MARKER
         S     R2,SCREENSZ         POINT TO PRIMARY BUFFER LINE
         MVI   4(R2),FLDOUTLO      LOW INTENSITY FOR STATUS MESSAGE
         MVC   14(8,R2),1(R14)     COPY JOB ID
         LA    R6,23(,R2)          POINT TO STATUS DISPLAY AREA
         LA    R14,11(,R14)        POINT TO STATUS TEXT
         B     OUTJBMSG
OUTNOJOB LA    R14,OUTMSG          POINT TO MESSAGE TEXT
         LH    R15,OUTMSGL         GET MESSAGE LENGTH
OUTJBMSG L     R7,SHADOWBF         POINT PAST TARGET AREA END
         SR    R7,R6               GET DISPLAY AREA LENGTH
         ICM   R15,8,=CL8' '       SET PAD CHARACTER
         MVCL  R6,R14              LOAD DISPLAY LINE TEXT
         ICM   R0,3,OUTDARC        ANY DARC TO REPORT?
         BZ    OUTEXEC             NO
         MVC   60(5,R2),=C'DARC='  YES
         UNPK  65(5,R2),OUTDARC(3)
         TR    65(4,R2),OUTHEX-240
         MVI   69(R2),C' '
         A     R2,SCREENSZ         POINT TO SHADOW BUFFER
         MVI   60(R2),X'06'        SHOW DARC IN YELLOW
         MVC   61(8,R2),60(R2)
         S     R2,SCREENSZ         POINT BACK TO PRIMARY BUFFER
         B     OUTDARCX            DISPLAY OF ELEMENT COMPLETE
OUTEXEC  EQU   *                   PROCESS EXECUTING JOB
         AIF   (&ENV390).HASPXEQ
         TM    DCBOFLGS-IHADCB+CKPDCBW,DCBOFOPN
         BNO   OUTEXEC2            NOT READING CHECKPOINT DATA SET
         CLI   30(R2),C' '         IS THE JOB CURRENTLY EXECUTING?
         BNH   OUTDARCX            NO
         B     OUTACTV             YES, ACTIVE SYSTEM ID PRESENT
OUTEXEC2 EQU   *                   PROCESS EXECUTING JOB
.HASPXEQ ANOP
         LH    R0,OUTMSGL          LOAD MESSAGE LENGTH
         SH    R0,OUTJOBL          SUBTRACT JOB NAME LENGTH
         CH    R0,=H'24'           JOB (JOB01234) EXECUTING?
         BNE   OUTDARCX            NO
         CLI   24(R2),C'X'         EXECUTING?
         BNE   OUTDARCX            NO
OUTACTV  L     R7,CVTPTR(,0)       POINT TO THE CVT
         L     R7,CVTASVT-CVT(,R7) POINT TO THE ASVT
         USING ASVT,R7
         L     R0,ASVTMAXU         GET HIGHEST POSSIBLE ASID
         LA    R7,ASVTENTY         POINT TO FIRST ASID ENTRY
         DROP  R7                  ASVT
OUTASLP  ICM   R6,15,0(R7)         POINT TO ASID
         BM    OUTASNXT            ASID NOT ASSIGNED
         USING ASCB,R6
         AIF   (NOT &ENV390).SKPJSAB
         TM    OSBITS,X'9B'        ESA OR LATER?
         BNO   MTCHNAME            NO, CAN'T LOOK AT JSAB
         ICM   R5,15,ASCBASSB      POINT TO ASSB
         BZ    OUTASNXT            SHOULD NOT HAPPEN
         USING ASSB,R5
         ICM   R5,15,ASSBJSAB      POINT TO JSAB
         DROP  R5                  ASSB
         BZ    OUTASNXT            NO JES JOB ID FOR THIS ASID
         USING JSAB,R5
         XC    DOUBLE,DOUBLE       CLEAR RESIDUAL DATA
         TM    JSABFLG1,JSABNVAL   VALID JSAB?
         BO    *+10                NO, JOB PROBABLY FINISHED
         MVC   DOUBLE,JSABJBID     SAVE JOB IDENTIFIER FOR COMPARE
         CLC   DOUBLE,14(R2)       MATCHING JOB IDENTIFIER?
         BE    OUTEXJOB            YES
         B     OUTASNXT            NO, CHECK NEXT ADDRESS SPACE
MTCHNAME DS    0H                  NO JSAB SO CHECK ADDRESS SPACE NAME
.SKPJSAB ANOP
         L     R5,ASCBJBNI         POINT TO JOB NAME
         CLI   14(R2),C'J'         "JOB" JOB NUMBER?
         BE    MATCHJOB            YES
         LTR   R5,R5               INITIATED JOB ADDRESS SPACE?
         BNZ   OUTASNXT            YES, CAN'T BE A MATCH
         AIF   (&ENV390).SKIPSTC
         CLI   14(R2),C'S'         "STC" JOB NUMBER?
         BNE   SKIPSTC             NO
         ICM   R5,15,CKPHAVT       KNOWN HAVT ADDRESS?
         BZ    OUTDARCX            NO, CANNOT VERIFY JOB DETAILS
         LH    R14,ASCBASID        YES, GET THE ASID
         SLA   R14,2               MULTIPLY BY 4 FOR INDEX
         ALR   R5,R14              POINT TO SJB POINTER
         ICM   R5,15,0(R5)         POINT TO ASID'S JES2 SJB
         BZ    OUTASNXT            NOT A MATCH
         USING SJBDSECT,R5
         MVC   DOUBLE,SJBJOBID     COPY JOB IDENTIFIER
         DROP  R5                  SJBDSECT
         OC    DOUBLE+3(4),=C'0000'
         CLC   DOUBLE,14(R2)       MATCHING JOB IDENTIFIER?
         BE    OUTEXJOB            YES
         B     OUTASNXT            NO, CHECK NEXT ADDRESS SPACE
SKIPSTC  EQU   *
.SKIPSTC ANOP
         CLI   14(R2),C'T'         "TSU" JOB NUMBER?
         BNE   OUTDARCX            NO, SKIP THE WHOLE THING FOR "STC"
*         BECAUSE THERE COULD BE MULTIPLE ADDRESS SPACES WITH
*         THE SAME NAME AND THERE IS NO WAY (WITHOUT GOING THROUGH
*         JES CONTROL BLOCKS OR SCHEDULING SRBS TO LOOK AT THE JOB'S
*         SSIB) TO ASCERTAIN THE CORRECT ASID FOR THIS "STC" JOB ID.
*         OF COURSE, CODE COULD BE ADDED TO CHECK ALL ASIDS FOR THE
*         NAME AND IF IT IS UNIQUE A MATCH COULD THEN BE ASSUMED.
         ICM   R14,15,ASCBTSB      TSU ADDRESS SPACE?
         BZ    OUTASNXT            NO, CAN'T BE A MATCH
         L     R5,ASCBJBNS         POINT TO ADDRESS SPACE NAME
MATCHJOB LTR   R5,R5               GOT A NAME POINTER?
         BZ    OUTASNXT            NO, SO CANNOT TEST IT
         CLC   0(8,R5),5(R2)       MATCHING JOB NAME?
         BE    OUTEXJOB            YES
OUTASNXT LA    R7,4(,R7)           POINT TO NEXT ASVT ENTRY
         BCT   R0,OUTASLP          KEEP LOOKING FOR EXECUTING JOB
         B     OUTDARCX            COULD NOT FIND EXECUTING JOB
OUTEXJOB LM    R14,R15,ASCBEJST    GET TCB CPU TIME
         AL    R15,ASCBSRBT+4      ADD SRB CPU TIME
         BC    12,*+8              CHECK FOR OVERFLOW
         LA    R14,1(,R14)         ADD 1 FOR CARRY
         A     R14,ASCBSRBT        GET TOTAL CPU TIME
         SRDL  R14,12              CONVERT TO MICROSECONDS
         D     R14,=F'10000'       CONVERT TO CENTISECONDS
         CVD   R15,DOUBLE
         MVC   69(11,R2),=XL11'40202020202021204B2020'
         ED    69(11,R2),DOUBLE+3
         L     R14,ASCBJBNI        GET BATCH JOB NAME ADDRESS
         ICM   R6,15,ASCBCSCB      POINT TO CSCB
         BZ    OUTDARCX            THERE IS NONE - PROBABLY *MASTER*
         DROP  R6                  ASCB
         LTR   R14,R14             INITIATED JOB?
         BZ    HAVECSCB            NO
         LA    R6,8
         LNR   R6,R6
         AR    R6,R14
         TM    OSBITS,X'9B'        ESA OR LATER?
         BNO   HAVECSCB            NO, HAVE CSCB (WRONG ANSWER FOR SP3)
         L     R6,8(,R14)          GET CSCB ADDRESS FROM CSCX
HAVECSCB EQU   *
         USING CHAIN,R6
SHOWSTEP MVC   52(8,R2),CHCLS      MOVE IN STEP NAME
         MVC   61(8,R2),CHPROCSN   MOVE IN PROC STEP NAME
         CLI   14(R2),C'S'         "STC" JOB NUMBER?
         BNE   *+10                NO
         MVC   52(8,R2),CHKEY      MOVE IN STEP NAME FOR STARTED TASK
         CLI   14(R2),C'J'         "JOB" JOB NUMBER?
         BNE   *+10                NO
         MVC   52(8,R2),CHSTEP     MOVE IN STEP NAME FOR BATCH JOB
         DROP  R6                  CHAIN
OUTDARCX LH    R14,DSNAIM          GET DISPLAY DSNAME LENGTH
         SH    R14,=H'8'           GET OFFSET TO JOB ID
         BNP   OUTCSRX             DISPLAY JOB ID LEFT HAS BEEN CLEARED
         LA    R14,DSNAIM+2(R14)   POINT TO DISPLAY JOB ID
         CLC   14(8,R2),0(R14)     DOES THE JOB ID MATCH?
         BNE   OUTCSRX             NO
         L     R14,SCRNLNES        GET THE NUMBER OF SCREEN LINES
         SR    R14,R1              GET CURRENT RELATIVE LINE NUMBER
         BCTR  R14,0
         BCTR  R14,0               GET SAME BUT IN DYNAREA
         MH    R14,SCRNCOLS+2      GET BYTE COUNT OF LINES
         LA    R14,2(,R14)         WANT CURSOR IN COLUMN 2
         ST    R14,REVPOS          SPECIFY CURSOR POSITION
         MVC   REVCSR,OUTBUF       SPECIFY CURSOR FIELD
OUTCSRX  BCT   R1,OUTFRMAT         PROCESS NEXT ELEMENT
         SPACE
DSPLYOUT MVI   DSNAIM+1,0          CLEAR JUST DISPLAYED JOB ID
         L     R2,SCREENBF         POINT TO PRIMARY/TEXT SCREEN BUFFER
         IC    R0,OUTFLG2          GET QUEUED MESSAGE NUMBER
         MVI   OUTFLG2,0           RESET QUEUED MESSAGE
         CLI   MSG,0               MESSAGE ID ALREADY SET?
         BNE   *+8                 YES, DO NOT OVERLAY IT
         STC   R0,MSG              NO, SHOW QUEUED MESSAGE
         MVC   1(8,R2),@REVOUT     SHOW FACILITY NAME
         TM    STATUS13,$13RFE     RUNNING UNDER RFE MENU SYSTEM?
         BNO   *+10                NO
         MVC   2(2,R2),=C'FE'      YES, ADJUST FACILITY NAME
         MVC   10(16,R2),$DSNAME+2 SHOW JOB STATUS ARGUMENT
         TR    1(33,R2),PERIODS    HANDLE BAD CODE POINTS IN NAME
         MVC   MSGDSN,1(R2)        SAVE TEXT FOR REVCOMM
         MVC   COMPON,@REVOUT      FLAG COMPONENT FOR HELP
         MVC   REVHELP,REVHJ00     FLAG HELP PANEL TO ISPF
         AIF   (&ENV390).OUTRDY
         TM    DCBOFLGS-IHADCB+CKPDCBW,DCBOFOPN
         BNO   OUTREADY            NOT READING CHECKPOINT DATA SET
         L     R15,SHADOWBF        POINT TO SHADOW BUFFER
         LA    R0,40
         SLR   R15,R0
         CLC   2(38,R15),1(R15)    SCREEN ENDS WITH NUMEROUS BLANKS?
         BNE   OUTREADY            NOT READING CHECKPOINT DATA SET
         CLI   $DSNAME+2,C' '      CURRENTLY FILTERING JOBS?
         BNE   OUTREADY            YES, SO DON'T NEED THE HINT
         MVC   2(23,R15),=C'(USE ST * FOR ALL JOBS)'
         A     R15,SCREENSZ        POINT TO TEXT'S SHADOW
         MVI   2(R15),X'01'        SHOW THIS TEXT IN BLUE
         MVC   3(37,R15),2(R15)    MAKE BLUE TILL END OF SCREEN
         MVC   7(4,R15),=X'05050505'    SHOW KEY PART IN TURQUOISE
OUTREADY EQU   *
.OUTRDY  ANOP
         XASAM31
         L     R15,=A(REVCOMM)     NO PARAMETER LIST PASSED
         BASR  R14,R15             DISPLAY SCREEN AND RECEIVE INPUT
         XASAM24
         SPACE
*  THE 3270 DATA STREAM NO LONGER HAS TO BE INTERPRETED HERE BECAUSE
*  REVCOMM WILL SUPPLY AN 'S' SELECTION CODE IMPLIED BY THE CURSOR
*  LOCATION IF APPROPRIATE, AND WILL ALSO STRIP OFF ANY NON-PRIMARY
*  INPUT FIELDS.  FURTHER, PRIMARY INPUT HAS HAD ANY PFK COMMAND
*  PREFIXING AND COMMAND STRING PARSING PERFORMED BY REVCOMM.
*  IMPLICIT AND EXPLICIT SELECTION CODES ARE STORED DIRECTLY IN REVBUF.
         TM    STATUS4,$4REFR      SCREEN CONTENTS OVERWRITTEN?
         BO    OUTPRMRY            YES, NO SELECTION CODES
         L     R0,SCRNCOLS         GET SCREEN WIDTH
         LR    R7,R0               COPY IT
         AR    R7,R0               DOUBLE IT
         AR    R7,R0               TRIPLE IT
         A     R7,SCREENBF         POINT TO FIRST DISPLAYED ELEMENT
         ICM   R3,15,TOPOUTAD      POINT TO PRE-SCROLL TOP ENTRY
         BNZ   OTSAV1ST
         B     OUTPRMRY            HANDLE EMPTY ELEMENT CHAIN
OUTSAVLP A     R7,SCRNCOLS         POINT TO NEXT LINE
         C     R7,SHADOWBF         GONE PAST PRIMARY SCREEN BUFFER?
         BNL   OUTPRMRY            YES, PROCESS PRIMARY COMMAND
         C     R3,@OUTLAST         REACHED END OF DISPLAY LIST?
         BE    OUTPRMRY            YES, PROCESS PRIMARY COMMAND
         L     R3,OUTNEXT          NO, POINT TO NEXT INTERNAL ENTRY
OTSAV1ST MVC   OUTQCMD(1),1(R7)    SAVE SELECTION CODE FOR LATER
         MVC   OUTQCMD+1(1),3(R7)  SAVE REQUEUE CLASS IF PRESENT
         OC    OUTQCMD,=CL8' '     FOLD INPUT DATA TO UPPER CASE
         B     OUTSAVLP            SELECTION CODE NOW QUEUED
OUTPRMRY MVC   OUTFLG1,OPD0+6      SAVE PRIMARY COMMAND FLAG
         TM    OPD0+6,PRESENT      ANY SUBCOMMAND REQUESTED?
         BNO   OTSELCHK            NO, GO CHECK FOR SELECTION CODES
**                                 UPPERCASING PERFORMED BY REVCOMM
**       L     R1,=A(KAPS)         YES, POINT TO TRANSLATE TABLE
**       TR    CMDAREA,0(R1)       UPPER CASE ALL PRIMARY INPUT
         L     R1,OPD0             POINT TO SUBCOMMAND NAME
         TM    STATUS13,$13RFE     RUNNING UNDER RFE MENU SYSTEM?
         BNO   OUTRFEOK            NO
         CLI   0(R1),C'='          JUMPING TO OTHER MENU ITEM?
         BE    OUTEXIT             YES, GO DO THAT
OUTRFEOK LA    R15,OUTCMDTB        POINT TO SUBCOMMAND TABLE
         LH    R5,OPD0+4           GET SUBCOMMAND LENGTH CODE PLUS 1
         LA    R0,7
         CLR   R5,R0               LARGER THAN MAXIMUM?
         BNH   OUTCMDLP            NO
         LR    R5,R0               YES, REDUCE TO MAXIMUM
OUTCMDLP EX    R5,OTCMDTST         FOUND THE SUBCOMMAND?
         BL    OUTCMDBD            NO, INVALID SUBCOMMAND
         BE    8(,R15)             YES, PERFORM IT
         LA    R15,12(,R15)        NOT YET, POINT TO NEXT ENTRY
         B     OUTCMDLP            CONTINUE SUBCOMMAND TABLE SCAN
OTCMDTST CLC   0(0,R1),0(R15)      <<< EXECUTED >>>
OUTCMDBD MVI   MSG,20              INVALID COMMAND
         B     DSPLYOUT            GO SHOW THE MESSAGE
         SPACE
OUTSTAT  LH    R1,OPD1+4           GET OPERAND LENGTH
         TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BZ    OUTNEWST            NO
         TM    OPD1+6,QUOTED       IS OPERAND QUOTED?
         BO    OUTBADOP            YES, INVALID
         TM    OPD1+6,NUMERIC      IS IT NUMERIC?
         BO    OUTBADOP            YES, INVALID
         LTR   R1,R1               IS IT NULL STRING?
         BNP   OUTBADOP            YES, ERROR
         CH    R1,=H'8'            TOO LONG FOR JOB NAME?
         BH    OUTBADOP            YES, ERROR
OUTNEWST MVI   $DSNAME+2,C' '      BLANK THE JOB NAME AREA
         MVC   $DSNAME+3(43),$DSNAME+2
         XC    TOPOUT,TOPOUT       SHOW NEW QUERY FROM TOP
         L     R14,OPD1            POINT TO JOB NAME VALUE
         STH   R1,$DSNAME
         BCTR  R1,0                LENGTH MINUS 1 FOR EX
         LTR   R1,R1
         BM    RESTATUS            NO OPERAND
         EX    R1,OUTJOBMV         MOVE JOB NAME
         B     RESTATUS
OUTJOBMV MVC   $DSNAME+2(0),0(R14) <<< EXECUTED >>>
         SPACE
         AIF   (&ENV390).NOFIBCM
OUTINPUT MVI   DOUBLE,O3INPT       GET THE FLAG SETTING TO PROCESS
         B     OUTONOFF
OUTFIBCM MVI   DOUBLE,O3FIB        GET THE FLAG SETTING TO PROCESS
OUTONOFF TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BO    OUTFIBON            YES, CHECK IT OUT
         XC    OUTFLG3,DOUBLE      NO, FLIP-FLOP
OUTFIBQM NC    DOUBLE(1),OUTFLG3   IS IT NOW ON?
         BNZ   OUTFIBM1            YES
         B     OUTFIBM0            NO
OUTFIBON L     R15,=A(REVKYPRS)    YES, POINT TO KEYWORD PARSER
         SR    R1,R1               REQUEST DEFAULT TABLE
         BASR  R14,R15             LOOK FOR KEYWORDS
         CLI   OPD1+7,3            IS IT '?'?
         BE    OUTFIBQM            YES, GO SHOW THE SETTING
         CLI   OPD1+7,1            IS IT 'ON'?
         BNE   OUTFIBNO            NO, TRY OFF
         OC    OUTFLG3,DOUBLE      YES
OUTFIBM1 MVI   MSG,143             SETTING NOW ON
         B     OTSELCHK            CHECK FOR SELECTION CODES
OUTFIBNO CLI   OPD1+7,2            IS IT 'OFF'?
         BNE   OUTBADOP            NO, INVALID OPERAND
         XI    DOUBLE,X'FF'        CONVERT 'OR' MASK TO 'AND' MASK
         NC    OUTFLG3,DOUBLE      YES
OUTFIBM0 MVI   MSG,144             SETTING NOW OFF
         B     OTSELCHK            CHECK FOR SELECTION CODES
.NOFIBCM ANOP
         SPACE
OUTLOC   TM    OPD1+6,PRESENT      ARE THERE ANY OPERANDS?
         BZ    OUTMISOP            NO, MISSING OPERAND
         TM    OPD1+6,QUOTED       IS OPERAND QUOTED?
         BO    OUTBADOP            YES, INVALID
         LH    R1,OPD1+4           GET LENGTH
         LTR   R1,R1               IS IT NULL STRING?
         BZ    OUTBADOP            YES, ERROR
         CH    R1,=H'10'           IS LENGTH MORE THAN 9?
         BNL   OUTBADOP            YES, ERROR
         TM    OPD1+6,NUMERIC      IS IT NUMERIC?
         BNO   OUTBADOP            NO, ERROR
         L     R14,OPD1            GET ADDRESS OF DATA
         BCTR  R1,0
         EX    R1,OUTNUMPK
         CVB   R1,DOUBLE
         LTR   R1,R1
         BNP   OUTTOP
         BCTR  R1,0                CONVERT TO RELATIVE LINE NUMBER
         ST    R1,TOPOUT           SAVE NEW TOP ELEMENT NUMBER
         B     OTSELCHK            CHECK FOR SELECTION CODES
OUTNUMPK PACK  DOUBLE,0(0,R14)     <<< EXECUTED >>>
         SPACE
OUTTOP   XC    TOPOUT,TOPOUT       SHOW FROM FIRST ENTRY
         B     OTSELCHK            CHECK FOR SELECTION CODES
         SPACE
OUTBOTOM MVI   TOPOUT,X'7F'        SHOW LAST SCREENFUL
         B     OTSELCHK            CHECK FOR SELECTION CODES
         SPACE
OUTUPCMD L     R15,=A(DIRSCROL)    POINT TO ROUTINE ENTRY POINT
         BASR  R14,R15             DETERMINE SCROLL AMOUNT
         LTR   R15,R15             TEST RETURN CODE
         BM    OUTBADOP            INVALID OPERAND
         BP    OUTTOP              SCROLL AMOUNT IS MAXIMUM
         L     R2,TOPOUT           GET CURRENT RELATIVE LINE NUMBER
         SR    R2,R1               GET NEW RELATIVE TOP LINE NYMBER
         BM    OUTTOP
         ST    R2,TOPOUT           SAVE NEW TOP ELEMENT NUMBER
         B     OTSELCHK            CHECK FOR SELECTION CODES
         SPACE
OUTDNCMD L     R15,=A(DIRSCROL)    POINT TO ROUTINE ENTRY POINT
         BASR  R14,R15             DETERMINE SCROLL AMOUNT
         LTR   R15,R15             TEST RETURN CODE
         BM    OUTBADOP            INVALID OPERAND
         BP    OUTBOTOM            SCROLL AMOUNT IS MAXIMUM
         A     R1,TOPOUT           GET NEW RELATIVE TOP LINE NYMBER
         ST    R1,TOPOUT           SAVE NEW TOP ELEMENT NUMBER
         B     OTSELCHK            CHECK FOR SELECTION CODES
         SPACE
OUTCAN   NI    STATUS,255-STPROF   TURN OFF PROFILE REWRITE FLAG
OUTEXIT  BAS   R4,FREEOUTM         FREE ALL MESSAGE ELEMENTS
         NI    STATUS11,255-$11OUT REVOUTPT IS YIELDING CONTROL
         AIF   (&ENV390).HASPX
         TM    DCBOFLGS-IHADCB+CKPDCBW,DCBOFOPN
         BO    HASPSHUT            GO CLOSE AND FREE CHECKPOINT
.HASPX   ANOP
         LA    R0,$OUTDYNL         GET SIZE OF DYNAMIC AREA
         LR    R1,R13              GET ADDRESS OF DYNAMIC AREA
         L     R13,4(,R13)         POINT TO CALLER'S SAVE AREA
         OI    11(R13),X'01'       INVALIDATE FORWARD POINTER
         FREEMAIN R,LV=(0),A=(1)   FREE @OUTDYN
         NI    STATUS,255-STPODIR  RESET MEMBER LIST FLAG
         NI    STATUS12,255-$12ASM RESET ASSEMBLER LISTING FLAG
         XASAM31
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         SR    R15,R15
         STH   R15,RC              OVERWRITE PREVIOUS NON-ZERO RC
         BR    R14                 RETURN
         SPACE
OUTMISOP MVI   MSG,35              MISSING OPERAND
         B     DSPLYOUT            GO DISPLAY THIS MESSAGE
         SPACE
OTSELCHK TM    STATUS4,$4REFR      SCREEN CONTENTS OVERWRITTEN?
         BO    RESTATUS            YES, NO SELECTION CODES
         MVC   OUTSVDSN(46),$DSNAME
         L     R0,SCRNCOLS         GET SCREEN WIDTH
         LR    R1,R0               COPY IT
         AR    R1,R0               DOUBLE IT
         AR    R1,R0               TRIPLE IT
         A     R1,SCREENBF         POINT TO FIRST DISPLAYED MEMBER
         LA    R7,1(,R1)           POINT TO ACTUAL SELECTION CODE BYTE
         ICM   R3,15,TOPOUTAD      POINT TO PRE-SCROLL TOP ENTRY
         BNZ   OTSEL1ST
         B     OUTSELDN            HANDLE EMPTY ELEMENT CHAIN
OUTSELLP A     R7,SCRNCOLS         POINT TO NEXT LINE
         C     R7,SHADOWBF         GONE PAST PRIMARY SCREEN BUFFER?
         BNL   OUTSELDN            YES
         C     R3,@OUTLAST         REACHED END OF DISPLAY LIST?
         BE    OUTSELDN            YES
         L     R3,OUTNEXT          NO, POINT TO NEXT INTERNAL ENTRY
OTSEL1ST MVC   OUTSELCD(2),OUTQCMD COPY QUEUED SELECTION INPUT
         MVC   OUTQCMD,=CL8' '     CLEAR QUEUED SELECTION INPUT
         CLI   OUTSELCD,C' '       BLANK CODE?
         BE    OUTSELLP            YES
         CLI   OUTSELCD,QUOTE      NO-OP CODE?
         BE    OUTSELLP            YES
         CLI   OUTSELCD,C'C'       CANCEL SELECTION?
         BE    DOOUTCMD            YES, PROCEED
         CLI   OUTSELCD,C'O'       RELEASE SELECTION?
         BE    DOOUTCMD            YES, PROCEED
         CLI   OUTSELCD,C'P'       PURGE SELECTION?
         BE    DOOUTCMD            YES, PROCEED
         CLI   OUTSELCD,C'S'       EXPLICIT REVIEW SELECTION?
         BE    DOOUTSEL            YES, PROCEED
         CLI   OUTSELCD,C'/'       EXPLICIT REVIEW SELECTION?
         BE    DOOUTSEL            YES, PROCEED
         MVI   MSG,24              NO, INVALID SELECTION CODE
OUTBADCD S     R7,SCREENBF         GET OFFSET OF PROBLEM LINE
         LA    R7,1(,R7)           GET POSITION OF PROBLEM CODE
         S     R7,SCRNCOLS
         S     R7,SCRNCOLS
         ST    R7,REVPOS           SPECIFY CURSOR POSITION
         MVC   REVCSR,OUTBUF       SPECIFY CURSOR FIELD
         B     SAMEOUT             GO SHOW THE MESSAGE
         SPACE
OUTSELDN TM    OUTFLG1,PRESENT     ANY SUBCOMMAND REQUESTED?
         BO    SAMEOUT             YES, PRESUMABLY IT WAS DONE
         B     RESTATUS            NO, BETTER UPDATE JOB STATUS DATA
         SPACE
OUTBADOP MVI   MSG,34              INVALID OPERAND
         B     DSPLYOUT            GO DISPLAY THIS MESSAGE
         SPACE
DOOUTCMD MVI   CMDAREA,C' '        INITIALIZE COMMAND BUFFER
         MVC   CMDAREA+1(L'CMDAREA-1),CMDAREA
         LA    R15,CMDAREA+11      JOB NAME TARGET POSITION
         LA    R14,OUTMSG+4        JOB NAME SOURCE POSITION
         MVC   0(8,R15),0(R14)     LOAD JOB NAME
         AH    R15,OUTJOBL         JOB ID TARGET POSITION
         AH    R14,OUTJOBL         JOB ID SOURCE POSITION
         MVC   0(10,R15),0(R14)    LOAD JOB ID
         LA    R14,10(,R15)        POINT PAST COMMAND TEXT SO FAR
         MVC   CMDAREA(10),=C'TSO CANCEL'
         CLI   OUTSELCD,C'C'       CANCEL REQUEST?
         BE    DOOUTFIB            YES, BUT IT CAN ONLY WORK FOR BATCH
         CLI   OUTSELCD,C'O'       RELEASE REQUEST?
         BE    DOOUTREQ            YES
         CLI   1(R15),C'J'         BATCH JOB JOB NUMBER?
         BNE   DOOUTDEL            NO, CANCEL PURGE WILL NOT WORK
         MVC   1(5,R14),=C'PURGE'  YES
         LA    R14,6(,R14)         POINT PAST COMMAND TEXT
         B     DOOUTFIB            GO CANCEL PURGE
DOOUTDEL MVC   CMDAREA+4(6),=C'OUTPUT'
         MVC   1(6,R14),=C'DELETE' YES
         LA    R14,7(,R14)         POINT PAST COMMAND TEXT
         B     DOOUTFIB            GO ISSUE OUTPUT DELETE
DOOUTREQ MVC   CMDAREA+4(6),=C'OUTPUT'
         MVC   1(6,R14),=C'NOHOLD'
         LA    R14,7(,R14)         POINT PAST COMMAND TEXT SO FAR
         CLI   OUTNEWCL,QUOTE      NEWCLASS SPECIFIED?
         BE    DOOUTFIB            NO, GO ISSUE OUTPUT NOHOLD
         CLI   OUTNEWCL,C' '       NEWCLASS SPECIFIED?
         BNH   DOOUTFIB            NO, GO ISSUE OUTPUT NOHOLD
         CLI   OUTNEWCL,C'A'       VALID NEWCLASS?
         BL    NUCLSBAD            NO
         L     R1,=A(DSNCHARS)     POINT TO TRANSLATE TABLE
         TRT   OUTNEWCL,0(R1)      VALID NEWCLASS?
         BNZ   NUCLSBAD            NO
         MVC   1(11,R14),=C'NEWCLASS(?)'
         MVC   10(1,R14),OUTNEWCL  YES, COPY NEWCLASS
         LA    R14,12(,R14)        POINT PAST COMMAND TEXT
DOOUTFIB LA    R1,CMDAREA          ISSUE TSO FIB COMMAND
         SR    R14,R1              GET COMMAND STRING LENGTH CODE
         ST    R14,CMDLEN          SAVE COMMAND STRING LENGTH CODE
         XASAM31
         OI    STATUS4,$4CMD       TELL REVCOMM TO SKIP TERMINAL I/O
         L     R15,=A(REVCOMM)     NO PARAMETER LIST PASSED
         OI    STATUS11,$11ST      SUPPRESS TERMINAL CONTROL ACTIONS
         BASR  R14,R15             PROCESS COMMAND STRING
         NI    STATUS11,255-$11ST  RESET FLAG
         XASAM24
         B     OUTSELLP            CHECK FOR MORE SELECTIONS
         SPACE
NUCLSBAD MVI   MSG,135             INVALID SYSOUT CLASS
         LA    R7,2(,R7)           POINT TO Q COLUMN
         B     OUTBADCD            GO DISPLAY ERROR STATUS
         SPACE
DOOUTSEL XC    MYDAPB,MYDAPB       PROCESS JOB SELECTION
         MVI   DA08CD+1,X'08'
         MVC   DA08UNIT,=CL8' '    START OFF WITH UADS UNIT
         MVC   DA08DDN,=CL8' '
         MVC   DA08SER,=CL8' '
         MVC   DA08MNM,=CL8' '
         MVC   DA08PSWD,=CL8' '
         MVI   DA08DSP1,DA08NEW
         MVI   DA08DPS2,DA08DELE
         MVI   DA08DPS3,DA08DEL
         MVI   DA08BLK+2,6144/256  BLKSIZE=6144
         MVI   DA08CTL,DA08CYLS+DA08RLSE
         MVI   DA08PQTY+3,200      TOO BIG FOR PESKY 2314 VOLUMES
         MVI   DA08SQTY+3,20       SPACE=(CYL,(200,20),RLSE)
         LA    R0,DSNAIM
         ST    R0,DA08PDSN
         MVI   DSNAIM+2,C' '
         MVC   DSNAIM+3(43),DSNAIM+2
         MVC   DSNAIM+2(2),=C'&&&&'
         LH    R1,OUTJOBL
         LA    R1,OUTMSG+5(R1)     POINT TO JOB NUMBER
         MVC   DSNAIM+4(8),0(R1)   DSN=&&JOBNUMBR
         MVI   DSNAIM+1,10         SUPPLY SPECIFIED DSNAME LENGTH
         AIF   (&ENV390).OUTSEL
         ST    R3,#OUTELEM         SAVE CURRENT OUTELEM ADDRESS
         TM    DCBOFLGS-IHADCB+CKPDCBW,DCBOFOPN
         BNO   OUTREALC            NOT READING CHECKPOINT DATA SET
*
*   SEARCH FOR JQE OF SELECTED JOB
*
         DROP  R3                  OUTELEM
         CLI   DSNAIM+4,C'S'       STARTED TASK?
         BNE   *+8                 NO
         MVI   DSNAIM+7,C'1'       YES, ADJUST JOB NUMBER
         CLI   DSNAIM+4,C'T'       TIME SHARING USER?
         BNE   *+8                 NO
         MVI   DSNAIM+7,C'2'       YES, ADJUST JOB NUMBER
         PACK  DOUBLE,DSNAIM+7(5)  GET NUMBER IN PACKED DECIMAL
         MVI   DSNAIM+7,C'0'       RESTORE JOB NUMBER
         BAS   R14,HASPCKRD        REFRESH MASTER AND JQE BLOCKS
         CVB   R0,DOUBLE           GET JOB NUMBER IN BINARY
         L     R2,CKPJQEAD         POINT TO MASTER (3RD CKPT) RECORD
         USING $SAVEBEG,R2
         LA    R4,$JQHEADS         POINT TO FIRST QUEUE HEAD
         LA    R3,$JQTYPES         GET NUMBER OF QUEUE HEADS
         DROP  R2                  $SAVEBEG
         XC    #JQE,#JQE           CLEAR CURRENT JQE ADDRESS
QSCHQHLP EQU   *                   QUEUE HEAD LOOP
         SR    R5,R5               CLEAR FOR INSERT
         ICM   R5,3,0(R4)          GET INDEX FOR FIRST JQE ON CHAIN
         BZ    QSCHQHNX            THIS QUEUE IS EMPTY
QSCHJQLP EQU   *                   JQE LOOP
         SLL   R5,2                MULTIPLY INDEX BY 4 TO GET OFFSET
         AL    R5,CKPJQORG         POINT TO JQE
         USING JQEDSECT,R5
         CH    R0,JQEJOBNO         FOUND THE RIGHT JOB NUMBER?
         BE    QSCHMTCH            YES
         SR    R1,R1               CLEAR FOR INSERT
         ICM   R1,3,JQECHAIN       GET INDEX FOR NEXT JQE ON CHAIN
         LTR   R5,R1               END OF CHAIN?
         BNZ   QSCHJQLP            NO, GO PROCESS THIS JQE
QSCHQHNX EQU   *                   PROCESS NEXT QUEUE HEAD
         LA    R4,2(,R4)           POINT TO NEXT QUEUE HEAD
         BCT   R3,QSCHQHLP         GO PROCESS IT
QSCHLOST EQU   *                   JOB HAS BEEN PURGED
         TM    OUTFLG3,O3LNCT      JUST TRYING TO GET A RECORD COUNT?
         BO    OUTCTDON            YES
         MVC   MSG+2(8),DSNAIM+4   COPY JOB NUMBER
         MVC   MSG+10(10),=C' NOT FOUND'
         LA    R0,18
         STH   R0,MSG              SET MESSAGE LENGTH
         OI    STATUS7,$7BELL      REQUEST AUDIBLE ALARM
         L     R3,#OUTELEM         RESTORE CURRENT OUTELEM ADDRESS
         B     OUTSELLP            CHECK FOR MORE SELECTIONS
*
*   READ JCT OF SELECTED JOB
*
QSCHMTCH EQU   *                   FOUND THE SELECTED JQE
         TM    OUTFLG3,O3FIB       IS FIB COMMAND USE PREFERRED?
         BNO   OUTHAMIO            NO, ALWAYS USE HASP "ACCESS METHOD"
         ICM   R0,3,JQEHLDCT       ANY HELD SYSOUT?
         BNZ   OUTUSFIB            YES, USE TSO OUTPUT COMMAND
OUTHAMIO ST    R5,#JQE             SAVE THE JQE ADDRESS
         L     R1,JQETRAK          GET JCT MTTR
         L     R2,CKPJCTAD         POINT TO JCT BUFFER
         BAS   R14,HASPSPRD        READ THE JCT
         USING JCTSTART,R2
         XC    JCTPASS(16),JCTPASS CLEAR OLD AND NEW PASSWORDS
         CLC   =C'JCT ',JCTID      REALLY READ A JCT?
         BNE   QSCHLOST            NO
         CLC   JCTJNAME,JQEJNAME   MATCHING JOB NAME?
         BNE   QSCHLOST            NO
         OC    JCTJOBID+3(4),=C'0000'
         CLC   JCTJOBID,DSNAIM+4   MATCHING JOB NUMBER?
         BNE   QSCHLOST            NO
         MVC   #JOBKEY,JCTJBKEY    SAVE JOB KEY
         DROP  R5                  JQEDSECT
*
*   READ FIRST IOT OF SELECTED JOB
*
         L     R1,JCTIOT           GET JCT MTTR
         DROP  R2                  JCTSTART
         L     R2,CKPIOTAD         POINT TO IOT BUFFER
         BAS   R14,HASPSPRD        READ THE IOT
         USING IOTSTART,R2
         CLC   =C'IOT ',IOTID      REALLY READ AN IOT?
         BNE   QSCHLOST            NO
         CLC   IOTJBKEY,#JOBKEY    MATCHING JOB KEY?
         BNE   QSCHLOST            NO
         TM    OUTFLG3,O3LNCT      JUST TRYING TO GET A RECORD COUNT?
         BO    OUTIOTEP            YES, NO NEED TO CREATE A DATA SET
         DROP  R2                  IOTSTART
OUTUSFIB EQU   *
         L     R3,#OUTELEM         RESTORE CURRENT OUTELEM ADDRESS
         USING OUTELEM,R3
*
*   ALLOCATE DATA SET TO HOLD SYSOUT
*
.OUTSEL  ANOP
OUTREALC XC    MYECB,MYECB
         LA    R1,MYDAPL
         L     R15,CVTPTR(,0)      CVT
         L     R15,CVTDAIR-CVT(,R15)
         BASR  R14,R15
         LTR   R2,R15
         BZ    OUTALCOK            DYNAMIC ALLOCATION SUCCESSFUL
         CLI   DA08UNIT,C'S'       ALREADY TRIED UNIT=SYSALLDA?
         MVC   DA08UNIT,=CL8'SYSALLDA'
         BNE   OUTRETRY            NO, SO TRY IT NOW
         CLI   DA08PQTY+3,200      ALLOCATION FAILURE WITH 200 CYLS?
         BNE   OUTNOALC            NO, HAVE ALREADY RETRIED
         MVI   DA08PQTY+3,5        REDUCE PRIMARY SPACE AND
         MVI   DA08SQTY+3,3        REDUCE SECONDARY SPACE
OUTRETRY XC    DA08DARC(4),DA08DARC
         B     OUTREALC            RETRY WITH DIFFERENT SPACE VALUES
OUTNOALC MVC   OUTDARC,DA08DARC    COPY DARC SO IT CAN BE REPORTED
         B     SAMEOUT             GO SHOW DARC
OUTALCOK MVC   $DDNAME,DA08DDN     COPY GENERATED DD NAME
         SPACE
         MVC   OUTPDCB,OUTPDCBS    LOAD DCB TEMPLATE
         USING IHADCB,OUTPDCB
         AIF   (&ENV390).HASPLEN
         ICM   R0,15,#JQE          USING DIRECT SPOOL I/O?
         BZ    OUTRLNOK            NO, DO NOT CHANGE RECORD LENGTH
         LA    R0,4+1+254          YES, HANDLE LONGEST UNSPANNED TEXT
         STH   R0,DCBLRECL         UPDATE DCB ACCORDINGLY
OUTRLNOK EQU   *
.HASPLEN ANOP
         MVC   DCBDDNAM,$DDNAME    SET DD NAME IN DCB
         LA    R15,DYNEXLST
         STCM  R15,7,DCBEXLSA
         LA    R0,JFCB
         ST    R0,0(,R15)
         MVI   0(R15),128+X'07'    READ JFCB EXIT
         MVI   OPEND,X'80'
         RDJFCB OUTPDCB,MF=(E,OPEND)
         MVC   $DSNAME+2(44),JFCBDSNM
         LA    R0,44
         LA    R1,$DSNAME+45
ODSNLNLP CLI   0(R1),C' '          TRAILING BLANK IN DSNAME?
         BNE   ODSNLNOK            NO, HAVE LENGTH
         BCTR  R1,0                BACK UP A BYTE
         BCT   R0,ODSNLNLP
ODSNLNOK STH   R0,$DSNAME          SET DSNAME LENGTH
         MVC   $VOLSER,JFCBVOLS    COPY VOLUME SERIAL NUMBER
         SPACE
         AIF   (&ENV390).OUTXOK
         LA    R0,HASPSYNA
         STCM  R0,7,DCBSYNA        SET DCB SYNCHRONOUS ERROR HANDLER
         LA    R0,CKPEXLST
         STCM  R0,7,DCBEXLSA       SET DCB EXIT LIST
.OUTXOK  ANOP
         MVI   OPEND,X'80'
         OPEN  (OUTPDCB,OUTPUT),MF=(E,OPEND)
         SR    R0,R0
         ICM   R0,3,DCBTIOT        GET FILE TIOT OFFSET
         L     R4,PSATOLD          GET POINTER TO CURRENT TCB
         L     R4,TCBTIO-TCB(,R4)  POINT TO TIOT
         ALR   R4,R0               POINT TO TIOT ENTRY
         MVC   $UCBAD3,17(R4)      TIOEFSRT
         AIF   (&ENV390).OUTFIB
         ICM   R0,15,#JQE          USING DIRECT SPOOL I/O?
         BZ    OUTCLOSE            NO, GO USE TSO OUTPUT COMMAND
         DROP  R3                  OUTELEM
*
*   FORM A CHAIN DESCRIBING THE SYSOUT FILES OF THE SELECTED JOB
*
OUTIOTEP L     R2,CKPIOTAD         POINT TO THE IOT
OUTIOTLP EQU   *                   IOT LOOP
         USING IOTSTART,R2
         L     R0,IOTPDDBP         GET OFFSET BEYOND LAST PDDB
         ALR   R0,R2               CONVERT TO AN ADDRESS
         ST    R0,CKPPDDB9         SAVE IT
         DROP  R2                  IOTSTART
         AL    R2,CKPPDDB1         POINT TO THE FIRST PDDB
         B     OUTPDDB1            GO PROCESS FIRST PDDB
         USING PDBDSECT,R2
OUTPDBLP LA    R2,PDBLENG          GET THE LENGTH OF A PDDB
         AL    R2,#PDDB            POINT TO THE NEXT PDDB
OUTPDDB1 ST    R2,#PDDB            SAVE CURRENT PDDB ADDRESS
         CL    R2,CKPPDDB9         DONE LAST PDDB FOR THIS IOT?
         BNL   OUTNXIOT            YES, GO FIND NEXT IOT
         CLC   PDBDSKEY,=H'2'      JOB LOG DATA SET?
         BE    OUTJLGCK            YES, CHECK IT OUT
         TM    PDBFLAG1,PDB1NSOT   IS THIS PDDB FOR SYSOUT?
         BNO   OUTJLGOK            YES, LOAD IT FOR VIEWING
         TM    OUTFLG3,O3LNCT      JUST TRYING TO GET A RECORD COUNT?
         BO    OUTPDBLP            YES, DO NOT COUNT SYSIN RECORDS
         TM    OUTFLG3,O3INPT      IS INPUT SET ON?
         BO    OUTJLGOK            YES, LOAD THESE AS WELL
         B     OUTPDBLP            NO, DO NOT VIEW IT
OUTJLGCK TM    PDBFLAG1,PDB1NSOT   IS THIS PDDB FOR SYSOUT?
         BO    OUTPDBLP            NO, DO NOT VIEW IT
         L     R1,CKPJCTAD         YES, POINT TO THE JCT
         USING JCTSTART,R1
         ICM   R0,15,JCTODTON      STARTED ON OUTPUT PROCESSOR?
         BNZ   OUTJLGOK            YES, JOB LOG CAN BE VIEWED
         ICM   R0,15,JCTXDTON      STARTED EXECUTION?
         BZ    OUTPDBLP            NO, BLOCK CANCELLED MESSAGE VIEWING
         DROP  R1                  JCTSTART
OUTJLGOK EQU   *                   READ A SPOOLED DATA SET BLOCK
         ICM   R1,15,PDBMTTR       GET THE FIRST BLOCK'S MTTR
         BZ    OUTPDBLP            NO DATA YET
         TM    OUTFLG3,O3LNCT      JUST TRYING TO GET A RECORD COUNT?
         BNO   OUTPDBEL            NO, GO MAKE A PDDB CHAIN ELEMENT
         L     R0,PDBRECCT         YES, GET THE RECORD COUNT
         A     R0,JOBRECCT         ACCUMULATE IT
         ST    R0,JOBRECCT         SAVE THE UPDATED COUNT
         B     OUTPDBLP            PDDB PROCESSED
*
*   JOBS ON THE PRINT/PUNCH QUEUE WITH HELD SYSOUT HAVE THE USUAL
*   SYSTEM SPOOL FILE PDDBS MARKED AS "NOT SYSOUT" - DUPLICATE PDDBS
*   WHICH ARE "SYSOUT" CAN BE FOUND LATER ON IN REVERSE ORDER.
*   SIMILARLY, APPLICATION SYSOUT FILES ARE ALSO ENCOUNTERED IN
*   REVERSE ORDER.  SUCH JOBS ALSO HAVE HQT STRUCTURES TO HELP
*   ADMINISTER HELD SYSOUT FILES.  RATHER THAN WRITE THE DATA
*   FROM EACH SYSOUT DATA SET TO THE TEMPORARY DATA SET TO BE
*   BROWSED AT THIS STAGE, FIRST A CHAIN WILL BE CONSTRUCTED
*   WHICH HOLDS THE FIRST MTTR OF EACH SYSOUT DATA SET WITH THE
*   ELEMENTS CHAINED IN DATA SET KEY ORDER.  THEN THE CHAIN WILL
*   BE PROCESSED SUCH THAT THE ORDER OF THE SYSOUT WRITTEN TO THE
*   BROWSE FILE WILL BE "CORRECT".  WHILE THIS ADDS UNPRODUCTIVE
*   OVERHEAD WHEN PROCESSING JOBS WITH NO HELD SYSOUT, DOING THIS
*   FOR ALL JOBS SIMPLIFIES THE PROGRAM LOGIC.
*
OUTPDBEL LA    R0,#SPDSELL         GET ELEMENT LENGTH
         GETMAIN R,LV=(0)          GET ELEMENT STORAGE
         XC    0(#SPDSELL,R1),0(R1)    CLEAR IT
         USING #SPDSEL,R1
         MVC   #SPDSKEY,PDBDSKEY   COPY DATA SET KEY
         MVC   #SPDMTTR,PDBMTTR    COPY THE FIRST BLOCK'S MTTR
         DROP  R2                  PDBDSECT
         LA    R14,#SPDSORG        POINT TO CHAIN ORIGIN
OUTCHNLP LR    R2,R14              POINT TO THIS ELEMENT
         ICM   R14,15,0(R14)       POINT TO NEXT ELEMENT
         BZ    OUTENCHN            LAST ONE TO ADD NEW ELEMENT
         CLC   #SPDSKEY,#SPDSKEY-#SPDSEL(R14)  NEW KEY KEY LOWER?
         BNL   OUTCHNLP            NO
OUTENCHN MVC   #SPDSNXT,0(R2)      SAVE FORWARD POINTER
         ST    R1,0(,R2)           ADD NEW ELEMENT TO CHAIN
         B     OUTPDBLP
         DROP  R1                  #SPDSEL
OUTNXIOT EQU   *                   LOCATE NEXT IOT ON CHAIN
         L     R2,CKPIOTAD         POINT TO IOT BUFFER
         USING IOTSTART,R2
         ICM   R1,15,IOTIOTTR      GET MTTR OF NEXT IOT ON CHAIN
         BZ    OUTSPINQ            NONE, TRY SPIN IOT TRAIN
OUTRDIOT EQU   *
         BAS   R14,HASPSPRD        READ THE IOT
         CLC   =C'IOT ',IOTID      REALLY READ AN IOT?
         BNE   QSCHLOST            NO
         CLC   IOTJBKEY,#JOBKEY    MATCHING JOB KEY?
         BE    OUTIOTLP            YES, GO PROCESS IT
         DROP  R2                  IOTSTART
OUTSPINQ EQU   *                   LOOK AT SPIN IOT CHAIN
         L     R3,CKPJCTAD         POINT TO JCT
         USING JCTSTART,R3
         SR    R0,R0               GET ZERO
         ICM   R1,15,JCTSPIOT      GET FIRST SPIN IOT MTTR
         ST    R0,JCTSPIOT         ENSURE THIS ONLY WORKS ONCE
         BNZ   OUTRDIOT            SOMETHING THERE SO LOOK AT IT
         TM    OUTFLG3,O3LNCT      JUST TRYING TO GET A RECORD COUNT?
         BO    OUTCTDON            YES, OUR WORK HERE IS DONE
         DROP  R3                  JCTSTART
*
*   WRITE SPOOLED FILES FROM SELECTED JOB TO OUTPUT DATA SET
*
         L     R1,CKPOUTAD         YES, POINT TO WRITE BUFFER
         XC    0(8,R1),0(R1)       ZERO BDW AND FIRST RDW
         MVI   1(R1),4             INITIALIZE BLOCK LENGTH
         LA    R14,#SPDSORG        POINT TO CHAIN ORIGIN
         ST    R14,#SPDCRNT        SET UP TO PROCESS CHAIN
OUTSDSLP EQU   *
         L     R14,#SPDCRNT        POINT TO PROCESSED ELEMENT
         USING #SPDSEL,R14
         L     R14,#SPDSNXT        POINT TO PROCESSED ELEMENT
         ST    R14,#SPDCRNT        THIS ELEMENT IS NOW CURRENT
         LTR   R14,R14             PROCESSED LAST ELEMENT?
         BZ    OUT@LAST            YES, OUT AT LAST
         MVC   #DS#KEY,#SPDSKEY    COPY DATA SET KEY
         L     R1,#SPDMTTR         GET FIRST BLOCK'S MTTR
         DROP  R14                 #SPDSEL
         L     R2,CKPBFRAD         POINT TO SPOOL BUFFER
OUTRDBLK EQU   *                   READ A SPOOLED DATA SET BLOCK
         BAS   R14,HASPSPRD        READ THE BLOCK
         USING BUFSTART,R2
         CLC   HDBKEY,#JDSKEY      BLOCK PART OF CORRECT JOB AND FILE?
         BNE   OUTSDSLP            NO, THAT'S THE END OF THAT FILE
         LA    R2,HDBSTART         YES, POINT TO FIRST RECORD'S DATA
         DROP  R2                  BUFSTART
         USING LRCDSECT,R2
OUTRECLP EQU   *                   OUTPUT RECORD LOOP
         CLI   LRCTLENG,X'FF'      END OF BLOCK?
         BE    OUTNXBLK            YES
         CLC   =H'1',#DS#KEY       JOB STREAM IMAGE?
         BNE   OUTSTRM             NO
         CLI   LRCLRECL,80         ORIGINALLY 80-BYTE RECORD?
         BNE   OUTSDSLP            NO, MUST REALLY BE E-O-F
OUTSTRM  SR    R15,R15             CLEAR FOR INSERT
         SR    R1,R1               CLEAR FOR INSERT
         IC    R1,LRCTLENG         GET SOURCE LENGTH
         IC    R15,LRCLRECL        GET ORIGINAL RECORD LENGTH
         TM    LRCFLAG1,LRC1CCTL   CARRIAGE CONTROL BYTE PRESENT?
         BNO   OUTLENOK            NO
         LA    R1,1(,R1)           YES, COUNT IT IN THE SOURCE LENGTH
         LA    R15,1(,R15)         ALSO COUNT IT IN THE TARGET LENGTH
OUTLENOK L     R14,CKPOUTAD        POINT TO OUTPUT BUFFER
         AH    R14,0(,R14)         POINT PAST DATA SO FAR
         LA    R3,4(R15,R14)       POINT PAST POTENTIAL DATA
         TM    LRCFLAG1,LRC1CCTL   CARRIAGE CONTROL BYTE PRESENT?
         BO    *+8                 YES
         LA    R3,1(,R3)           NO, INSERT A BYTE IN COLUMN 1
         S     R3,CKPOUTAD         GET THE POTENTIAL BLOCK SIZE
         C     R3,CKPOUTSZ         WILL THE NEW RECORD FIT?
         BNH   OUTRECOK            YES
         L     R3,CKPOUTAD         NO, POINT TO THE BLOCK
         WRITE OUTPDECB,SF,OUTPDCB,(R3),'S',MF=E
         CHECK OUTPDECB            WRITE THE BLOCK
         TM    OUTFLG3,O3IOER+O3ABND
         BNZ   OUTCLOSE            LOOKS LIKE CANNOT WRITE ANY MORE
         XC    0(8,R3),0(R3)       ZERO BDW AND FIRST RDW
         MVI   1(R3),4             INITIALIZE BLOCK LENGTH
         B     OUTRECLP            REDRIVE THE RECORD OUTPUT
OUTRECOK EQU   *
         L     R5,CKPOUTAD         POINT TO THE OUTPUT BUFFER
         STH   R3,0(,R5)           UPDATE THE BDW LENGTH INDICATOR
         XC    0(4,R14),0(R14)     ZERO THE NEW RDW
         LA    R5,4(,R15)          GET THE LOGICAL RECORD LENGTH
         TM    LRCFLAG1,LRC1CCTL   CARRIAGE CONTROL BYTE PRESENT?
         BO    *+8                 YES
         LA    R5,1(,R5)           NO, ALSO COUNT THE INSERTED BYTE
         STCM  R5,3,0(R14)         SET IT INTO THE NEW RDW
         LA    R14,4(,R14)         POINT PAST THE NEW RDW
         TM    LRCFLAG1,LRC1CCTL   CARRIAGE CONTROL BYTE PRESENT?
         BO    OUTRECLD            YES
         MVI   0(R14),C' '         NO, INSERT A BLANK AHEAD OF TEXT
         LA    R14,1(,R14)         INCREMENT TARGET POINTER
OUTRECLD LA    R0,LRCTEXT          POINT TO THE SPOOL FILE TEXT
         LR    R5,R0               COPY THIS ADDRESS
         LA    R5,0(R1,R5)         POINT PAST IT
         S     R5,CKPBFRAD         GET NEW OFFSET INTO SPOOL BUFFER
         C     R5,CKPBFRSZ         COPYING MORE THAN BUFFER HOLDS?
         BNL   OUTNXBLK            YES, DISCARD THIS DATA
         ICM   R1,8,=CL8' '        NO, SET PAD CHARACTER TO BLANK
         MVCL  R14,R0              COPY IT TO THE OUTPUT BUFFER
         LR    R2,R0               POINT TO THE NEXT SPOOLED RECORD
         B     OUTRECLP
         DROP  R2                  LRCDSECT
OUTNXBLK EQU   *                   LOCATE NEXT SPOOL BLOCK ON CHAIN
         L     R2,CKPBFRAD         POINT TO SPOOL BUFFER
         USING BUFSTART,R2
         ICM   R1,15,HDBNXTRK      GET THE MTTR OF THE NEXT BLOCK
         BNZ   OUTRDBLK            GO READ IT
         B     OUTSDSLP            NO NEXT BLOCK
         DROP  R2                  BUFSTART
OUT@LAST EQU   *
         L     R3,CKPOUTAD         END OF DATA - POINT TO CURRENT BLOCK
         LA    R0,4                GET SIZE OF BDW
         CH    R0,0(,R3)           ANY DATA PENDING?
         BNL   OUTCLOSE            NO, GO CLOSE THE FILE
         WRITE OUTPDECB,SF,OUTPDCB,(R3),'S',MF=E
         CHECK OUTPDECB            YES, WRITE THE LAST BLOCK
**       TM    OUTFLG3,O3IOER+O3ABND
**       BNZ   OUTCLOSE            LOOKS LIKE CANNOT WRITE ANY MORE
OUTCLOSE EQU   *
         ICM   R1,15,#SPDSORG      POINT TO FIRST ELEMENT ON CHAIN
         BZ    OUTNOCHN            LEAVE LOOP IF NO CHAIN LEFT
         USING #SPDSEL,R1
         MVC   #SPDSORG,#SPDSNXT   DECHAIN FIRST ELEMENT
         LA    R0,#SPDSELL         GET ELEMENT LENGTH
         DROP  R1                  #SPDSEL
         FREEMAIN R,LV=(0),A=(1)   FREE THE ELEMENT
         B     OUTCLOSE            CONTINUE FREEING WHOLE CHAIN
OUTNOCHN EQU   *
         L     R3,#OUTELEM         RESTORE CURRENT OUTELEM ADDRESS
         USING OUTELEM,R3
         TM    OUTFLG3,O3IOER      ANY I/O ERROR MESSAGE AVAILABLE?
         BNO   OUTFIB              NO
         LA    R1,SYNADMSG         YES, POINT TO IT
         LA    R0,L'SYNADMSG       GET ITS LENGTH
         TPUT  (1),(0),R           DISPLAY IT FOR DIAGNOSIS
OUTFIB   EQU   *
.OUTFIB  ANOP
         MVI   CLOSED,X'80'
         CLOSE OUTPDCB,MF=(E,CLOSED)
         SPACE
*
*   USE TSO OUTPUT COMMAND TO RETRIEVE SYSOUT DATA SET CONTENTS
*
         MVI   DSNAIM+2,C' '
         MVC   DSNAIM+3(43),DSNAIM+2
         MVI   CMDAREA,C' '        INITIALIZE COMMAND BUFFER
         MVC   CMDAREA+1(L'CMDAREA-1),CMDAREA
         MVC   CMDAREA(10),=CL10'TSO OUTPUT'
         LA    R1,10
         AH    R1,OUTJOBL
         STH   R1,DSNAIM
         BCTR  R1,0                DECREMENT FOR EXECUTE
         LA    R15,DSNAIM+2
         EX    R1,OUTXMVC          SET TITLE FOR BROWSE
         AIF   (&ENV390).OUTFIB2
         ICM   R0,15,#JQE          USING DIRECT SPOOL I/O?
         BNZ   OUTBROWS            YES, DATA SET CONTAINS SYSOUT DATA
.OUTFIB2 ANOP
         LA    R15,CMDAREA+11
         EX    R1,OUTXMVC          SPECIFY JOB IN OUTPUT COMMAND
         LA    R15,2(R1,R15)       POINT TO NEXT OPERAND LOCATION
         MVC   0(7,R15),=CL7'PRINT('''
         MVC   7(44,R15),$DSNAME+2 SPECIFY OUTPUT DSNAME
         AH    R15,$DSNAME         ACCOUNT FOR DSNAME LENGTH
         MVC   7(12,R15),=CL12''') KEEP HOLD'
         LA    R15,7+12(,R15)      POINT PAST COMMAND TEXT
         LA    R0,CMDAREA          POINT TO COMMAND TEXT
         SR    R15,R0              GET COMMAND LENGTH
         ST    R15,CMDLEN          SET COMMAND LENGTH
         XASAM31
         OI    STATUS4,$4CMD       TELL REVCOMM TO SKIP TERMINAL I/O
         L     R15,=A(REVCOMM)     NO PARAMETER LIST PASSED
         OI    STATUS11,$11ST      FLAG COLLECTING JOB STATUS DATA
         BASR  R14,R15             PROCESS COMMAND STRING
         NI    STATUS11,255-$11ST  RESET FLAG
         XASAM24
OUTBROWS EQU   *                   BROWSE DATA SET HOLDING SYSOUT
         OI    STATUS,STPODIR      SET FLAG TO SUPPORT '=X' COMMAND
         SPACE
         XC    MYDSCB,MYDSCB       INVALIDATE VTOC ENTRY COPY
         LA    R4,$DSNAME+2        DSN FOR OBTAIN
         LA    R5,$VOLSER          VOLUME FOR OBTAIN
         LA    R6,MYDSCB           ANSWER AREA FOR OBTAIN
         STM   R4,R6,OBTAINW+4
         OBTAIN OBTAINW
         ICM   R0,7,DS1LSTAR       ANY DATA AVAILABLE?
         BNZ   OUTBRWS             YES
         MVI   OUTFLG2,134         NO DATA AVAILABLE
         B     OUTDEALC            CHECK FOR MORE SELECTIONS
         SPACE
*         EXPLOIT 'S' IS EVEN AND '/' IS ODD
OUTBRWS  MVC   DATAKV+1(1),OUTSELCD COPY SELECTION CHARACTER
         NI    DATAKV+1,1          SPECIFY 'DATA' OPERAND OR NOT
         NI    STATUS11,255-$11OUT REVOUTPT IS YIELDING CONTROL
         NI    STATUS12,255-$12ASM RESET ASSEMBLER LISTING FLAG
         MVI   DSORG,DS1DSGPS      USE BSAM, NOT BPAM
         XC    TTR,TTR             START FROM THE TOP
         XASAM31
         L     R15,=A(REVIEW2)     GET ADDRESS OF PHASE 2
         BASR  R14,R15             CALL REVIEW PHASE 2
         XASAM24
         SPACE
OUTDEALC XC    MYDAPB,MYDAPB
         MVI   DA18CD+1,X'18'
         MVC   DA18DDN,$DDNAME     LOAD DDNAME TO DEALLOCATE
         MVC   DA18MNM,=CL8' '
         MVC   DA18SCLS,=CL8' '    (2-BYTE FIELD)
         XC    MYECB,MYECB
         LA    R1,MYDAPL
         L     R15,CVTPTR(,0)      CVT
         L     R15,CVTDAIR-CVT(,R15)
         BASR  R14,R15             CALL IKJDAIR
         TM    STATUS,STPODIR      SESSION TERMINATION REQUESTED?
         BZ    OUTEXIT             YES, EXIT
         MVI   DATAKV+1,0          NO, CLEAR 'DATA' OPERAND
         OI    STATUS11,$11OUT     REVOUTPT IS BACK IN CONTROL
         OI    STATUS10,$10CAP     SET CAPS ON AGAIN
         MVC   $DSNAME(46),OUTSVDSN
         MVC   COMPON,@REVOUT      FLAG COMPONENT FOR HELP
         MVC   $DDNAME,#REVOUT     LOAD SOMETHING FOR SWAP LIST
         B     OUTSELLP            CHECK FOR MORE SELECTIONS
         SPACE
OUTXMVC  MVC   0(0,R15),OUTMSG+4   <<< EXECUTED >>>
         SPACE
         DROP  R3                  OUTELEM
         SPACE
         SPACE
FREEOUTM ICM   R1,15,@OUTFRST      GET NEXT ELEMENT TO FREE
         BZ    FREEOUTX            ALL ELEMENTS NOW FREED
         USING OUTELEM,R1
         MVC   @OUTFRST,OUTNEXT    NEXT BECOMES NEW FIRST
         L     R0,OUTSIZE          GET STORAGE SIZE OF THIS ONE
         DROP  R1                  OUTELEM
         FREEMAIN RU,LV=(0),A=(1)  FREE MESSAGE STORAGE AREA
         B     FREEOUTM
FREEOUTX ST    R1,@OUTNMBR         RESET CHAIN ELEMENT COUNT
         ST    R1,TOPOUTAD         RESET TOP ENTRY ADDRESS
         LA    R0,@OUTFRST         INITIALIZE EMPTY CHAIN
         ST    R0,@OUTLAST
         BR    R4                  RETURN TO CALLER
         SPACE
         SPACE
         DROP  R13                 @OUTDYN
         TITLE '  R E V O U T P T   -   S T A T I C   A R E A  '
OUTSUBHD DC    C'S Q JOBNAME  JOBIDENT STATUS'
OUTCOLHD DC    C'STEPNAME PROCSTEP   CPU-TIME'
         PRINT NOGEN
OUTPDCBS DCB   DSORG=PS,MACRF=W,RECFM=VB,LRECL=137
OUTPDCBL EQU   *-OUTPDCBS
         PRINT GEN
         DC    0D'0'
OUTHEX   DC    CL16'0123456789ABCDEF'
OUTBUF   DC    CL8'REVBUF  '
@REVOUT  DC    CL8'REVOUT  '
#REVOUT  DC    CL8'*REVOUT*'
REVHJ00  DC    CL8'REVHJ00 '       NAME OF FIRST REVOUT HELP PANEL
OUTED7   DC    XL8'4020202020202120'
         SPACE
         LTORG
         DC    0F'0'
         SPACE
         EJECT
************************************************************
*                                                          *
*         JOB STATUS DISPLAY SUBCOMMAND TABLE              *
*                                                          *
************************************************************
         SPACE
OUTCMDTB DC    0F'0'              ENTRIES MUST BE IN COLLATING SEQUENCE
         DC    CL8'+       '
         B     OUTDNCMD
         DC    CL8'-       '
         B     OUTUPCMD
         DC    CL8'=X      '
         B     OUTEXIT
         DC    CL8'BOT     '
         B     OUTBOTOM
         DC    CL8'BOTTOM  '
         B     OUTBOTOM
         DC    CL8'CAN     '
         B     OUTCAN
         DC    CL8'CANCEL  '
         B     OUTCAN
         DC    CL8'DOWN    '
         B     OUTDNCMD
         DC    CL8'END     '
         B     OUTEXIT
         DC    CL8'EXIT    '
         B     OUTEXIT
         AIF   (&ENV390).NOCMFIB
         DC    CL8'FIB     '
         B     OUTFIBCM
         DC    CL8'INPUT   '
         B     OUTINPUT
.NOCMFIB ANOP
         DC    CL8'L       '
         B     OUTLOC
         DC    CL8'LIST    '
         B     OUTLOC
         DC    CL8'LOC     '
         B     OUTLOC
         DC    CL8'LOCATE  '
         B     OUTLOC
         DC    CL8'RETURN  '
         B     OUTEXIT
         DC    CL8'ST      '
         B     OUTSTAT
         DC    CL8'STATUS  '
         B     OUTSTAT
         DC    CL8'TOP     '
         B     OUTTOP
         DC    CL8'UP      '
         B     OUTUPCMD
         DC    FL8'-1'             END OF TABLE
         SPACE
         DROP  R10,R11             REVOUTPT
         SPACE
         DC    0D'0'               END OF CSECT
         TITLE '  R E V O U T P T   -   D Y N A M I C   A R E A S  '
@OUTDYN  DSECT
         DS    18F                 WORKING SAVE AREA
TOPOUT   DS    F                   TOP-OF-SCREEN RELATIVE LINE NUMBER
TOPOUTAD DS    F                   TOP ENTRY ADDRESS SAVE AREA
OUTPDCB  DS    XL(OUTPDCBL)        PRIMING DCB AREA
OUTSVDSN DS    H,CL44              $DSNAME SAVE AREA
OUTFLG1  DS    X                   PRIMARY COMMAND FLAG BYTE
OUTFLG2  DS    X                   QUEUED MESSAGE HOLD AREA
         AIF   (&ENV390).HASPDX1
OUTPDECB DS    XL(DYNDECBL)        DECB AREA
CKPJQESZ DS    F      \___KEEP___/ JQE STORAGE SIZE
CKPJQEAD DS    A      / TOGETHER \ JQE STORAGE ADDRESS
CKPJCTSZ DS    F      \___KEEP___/ JCT BUFFER SIZE
CKPJCTAD DS    A      / TOGETHER \ JCT BUFFER ADDRESS
CKPIOTSZ DS    F      \___KEEP___/ IOT BUFFER SIZE
CKPIOTAD DS    A      / TOGETHER \ IOT BUFFER ADDRESS
CKPBFRSZ DS    F      \___KEEP___/ SPOOL BUFFER SIZE
CKPBFRAD DS    A      / TOGETHER \ SPOOL BUFFER ADDRESS
CKPOUTSZ DS    F      \___KEEP___/ OUTPUT BUFFER SIZE
CKPOUTAD DS    A      / TOGETHER \ OUTPUT BUFFER ADDRESS
$CKPSTG# EQU   (*-CKPJQESZ)/8      NUMBER OF AREAS TO FREEMAIN
         SPACE
CKPHAVT  DS    A                   HASP ASVT ADDRESS
CKPJQORG DS    A                   JQE OFFSET BASE
CKPPDDB1 DS    F                   OFFSET TO FIRST PDDB IN IOT
CKPPDDB9 DS    A                   ADDRESS BEYOND LAST PDDB IN IOT
CKPEXLST DS    F                   DCB EXIT LIST
CKPDCBW  DS    XL(SEQDCBL)
CKPDECBW DS    XL(DYNDECBL)
CKPRECCT DS    F                   BLOCKS TO READ = $JOBRECN PLUS 1
CKPSYSID DS    CL32                UP TO 8 SYSTEM IDENTIFIERS
CKPSPL#  DS    F                   NUMBER OF SPOOL VOLUMES IN USE
CKPTVOL  DS    CL6                 PRIMARY CHECKPOINT VOLUME
CKPSPLV  DS    CL6                 PRIMARY SPOOL VOLUME
SPOOLORG DS    A                   SPOOL VOLUME ELEMENT CHAIN ORIGIN
JOBRECCT DS    F                   JOB RECORD COUNT
TOTRECCT DS    F                   TOTAL RECORD COUNT
#OUTELEM DS    A                   CURRENT OUTELEM ADDRESS
#SPDSORG DS    A                   SYSOUT DATA SET CHAIN ORIGIN
#SPDCRNT DS    A                   SYSOUT DATA SET CURRENT ELEMENT
#JQE     DS    A                   CURRENT JQE ADDRESS
#PDDB    DS    A                   CURRENT PDDB ADDRESS
#JDSKEY  DS    0XL6                SPOOL DATA SET KEY
#JOBKEY  DS    F                   CURRENT JOB KEY
#DS#KEY  DS    H                   CURRENT DATA SET KEY
OUTFLG3  DS    X                   EXTRA FLAGS FOR HASP I/O
O3IOER   EQU   X'80'               SYNAD EXIT TAKEN
O3ABND   EQU   X'40'               ABEND EXIT TAKEN
O3FIB    EQU   X'20'               PREFER FIB COMMAND USE
O3INPT   EQU   X'10'               SHOW NON-SYSOUT AS WELL
O3LNCT   EQU   X'08'               REQUIRE PDDB RECORD COUNTS ONLY
.HASPDX1 ANOP
OUTSELCD DS    X      \___KEEP___/ JOB SELECTION CODE
OUTNEWCL DS    X      / TOGETHER \ NEW SYSOUT CLASS
         DS    0D
$OUTDYNL EQU   *-@OUTDYN
         AIF   (&ENV390).HASPDX2
         SPACE
**********************************************************************
*                                                          *         *
*         SPOOL BUFFER HEADER                              *  R45.4  *
*                                                          * JAN2015 *
**********************************************************************
*        COPY USEFUL PARTS FROM $BUFFER  - NEED TO MAKE
*        DS    (BUFSTART-BUFDSECT)X HAVE A ZERO LENGTH FOR JCT AND IOT
BUFDSECT DSECT
BUFSTART DS    0D                  START OF BUFFER WORK SPACE
HDBNXTRK DS    F                   HASP DATA BLOCK CHAIN TRACK
HDBKEY   DS    0CL6                JOB KEY - DATA SET KEY
HDBJBKEY DS    F                   JOB IDENTIFIER KEY
HDBPDDBK DS    H                   HASP DATA BLOCK DATA SET KEY
HDBSTART EQU   *                   HASP DATA BLOCK START
         SPACE
**********************************************************************
*                                                          *         *
*         SPOOL VOLUME ELEMENT                             *  R45.4  *
*                                                          * JAN2015 *
**********************************************************************
         SPACE
SPLVEL   DSECT
SPLVNEXT DS    A                   POINTER TO NEXT CHAINED ELEMENT
SPLVTPC  DS    H                   NUMBER OF TRACKS PER CYLINDER
SPLVTOF  DS    H                   RELATIVE TRACK OFFSET
SPLVDDN  DS    CL8                 DDNAME
SPLVDCB  DS    XL(SEQDCBL)         DCB AREA
SPLVDECB DS    XL(DYNDECBL)        DECB AREA
         DS    0D
$SPLVSZ  EQU   *-SPLVEL
         SPACE
         SPACE
$SAVEOUT DSECT
**********************************************************************
*                                                          *         *
*  THE DATA STRUCTURE OF THE THIRD RECORD OF THE JES2      *  R45.4  *
*  CHECKPOINT FILE WAS COPIED FROM SYS1.HASPSRC($HCT).     * DEC2014 *
*                                                          *         *
**********************************************************************
*********************************************************************** DT499000
*  ALL VARIABLES LOCATED IN THIS AREA WILL BE REGULARLY CHECKPOINTED  * DT500000
*  BY HASP AND WILL BE RESTORED ON ANY WARM START.....                * DT501000
*                                                                     * DT502000
*                                                                     * DT503000
*                                                                     * DT504000
$SAVEBEG DS    0F                  BEGINNING OF SAVE AREA             * DT505000
$MASTERL DC    A(*-*)              CHECKPOINT MASTER RCD LEN   @OZ27300 DT505100
$JOBRECN DC    Y(*-*)              NUMBER OF 4K JOB Q RECORDS  @OZ27300 DT505200
$JOTRECN DC    Y(*-*)              NUMBER OF 4K JOT   RECORDS  @OZ27300 DT505300
         DC    A(*-*)              RESERVED                    @OZ27300 DT505400
         DC    Y(*-*)              RESERVED                    @OZ27300 DT505500
$WCHECK  DC    AL1(*-*)            CKPT WRITE-CHECK-RCD VALUE  @OZ27300 DT505600
$CKPTFLG DC    BL1'00'             CHECKPOINT DISPOSITION      @OZ27300 DT505700
$CKPUSER DC    XL8'00'             CHECKPOINTED USER FIELD     @OZ27300 DT505800
$UNSPUNQ DC    XL4'0'              MTTR OF SPIN IOTS WAITING FOR JOT    DT506000
$NEWSIOT DC    XL4'0'              MTTR OF JES2-NEWS IOT, OR ZERO   R41 DT506100
$NEWSTTR DC    XL4'0'              MTTR OF JES2-NEWS DS, OR ZERO    R41 DT506200
$JQFREE  DC    Y(*-*)              OFFSET/4 OF FIRST FREE JQE        R4 DT507000
$JQHEADS DC    47AL2(*-*)          HEADS OF ACTIVE JOB QUEUE CHAINS     DT508000
$JQTYPES EQU   (*-$JQHEADS)/2      NUMBER OF JOB QUEUES                 DT509000
$DATAKEY DC    F'0'                MASTER PERIPHERAL DATA SET KEY     * DT510000
$JOBNO   DC    H'0'                HASP JOB NUMBER                    * DT511000
$STCNO   DC    H'10000'            STARTED TASK NUMBER                * DT512000
$TSUNO   DC    H'20000'            TIME-SHARING USER NUMBER           * DT513000
         DC    6H'0'               RESERVED                          R4 DT522000
$HASPID  DC    CL4'JES2'           CHECKPOINT RECORD IDENTIFICATION     DT524000
$CHKPT   DC    CL6' '              CHECKPOINT VOLUME SERIAL NUMBER   R4 DT525000
$CHKPT2  DC    CL6' '              SECONDARY CHECKPOINT VOLSER @OZ27300 DT525500
$SPOOL   DC    CL6'SPOOL1'         PRIMARY SPOOL VOLUME              R4 DT526000
$BUFSIZE DC    Y(1960)             HASP BUFFER SIZE                  R4 DT527000
$MAXJOBS DC    Y(100)              MAXIMUM NUMBER OF JOBS IN SYSTEM  R4 DT528000
$NUMJOES DC    Y(*-*)              NUMBER OF JOB OUTPUT ELEMENTS     R4 DT529000
$MINJOES DC    Y(*-*)              MINIMUM NUMBER OF FREE JOES       R4 DT530000
$NUMRJE  DC    Y(*-*)              NUMBER OF REMOTE TERMINALS        R4 DT531000
$NUMTGV  DC    Y(400)              NUMBER OF TRACK GROUPS PER VOLUME R4 DT532000
$QSENO   DC    Y(1)                NUMBER OF MEMBERS IN THIS NODE    R4 DT533000
$NUMDA   DC    AL1(2)              NUMBER OF DIRECT ACCESS MODULES   R4 DT534000
$SPOLMSG DC    AL1(255)            MSG SPOOL BUFFERS FOR EACH REMOTE R4 DT535000
         DC    AL1(*-*)            RESERVED                          R4 DT537000
         DC    AL1(*-*)            RESERVED                          R4 DT538000
$RECINCR DC    AL1(2)              RECORD ALTERNATION PARAMETER      R4 DT543000
$TCELSIZ DC    AL1(3)              NBR OF BUFFERS IN A TRAKCELL      R4 DT544000
         DC    Y(*-*)              RESERVED FOR FUTURE USE     @OZ20010 DT545000
         DC    Y(*-*)              RESERVED FOR FUTURE USE     @OZ20010 DT545100
         DC    Y(*-*)              RESERVED FOR FUTURE USE     @OZ20010 DT545200
$PARMVER EQU   $SPOOL,*-$SPOOL     CHECKPOINT VERIFICATION FIELDS    R4 DT546000
$SAVEEND EQU   *                   END OF SAVE AREA                  R4 DT547000
$SAVELEN EQU   $SAVEEND-$SAVEBEG   LENGTH OF SAVE AREA               R4 DT548000
*                                                                     * DT549000
*                                                                     * DT550000
*                                                                     * DT551000
*********************************************************************** DT552000
         SPACE
         SPACE
#SPDSEL  DSECT
#SPDSNXT DS    A                   FORWARD CHAIN POINTER
#SPDMTTR DS    F                   MTTR OF DATA SETS'S FIRST BLOCK
#SPDSKEY DS    H                   DATA SET KEY
         DS    0D                  END OF ELEMENT
#SPDSELL EQU   *-#SPDSEL           SIZE OF ELEMENT
.HASPDX2 ANOP
         SPACE
         SPACE
OUTELEM  DSECT
OUTNEXT  DS    A                   ADDRESS OF NEXT JOB STATUS ELEMENT
OUTPREV  DS    A                   ADDRESS OF PREVIOUS STATUS ELEMENT
OUTSIZE  DS    F                   STORAGE SIZE OF THIS ELEMENT
OUTSEQ#  DS    F                   ELEMENT SEQUENCE NUMBER
OUTJOBL  DS    H                   JOB NAME LENGTH
OUTDARC  DS    XL2                 DYNAMIC ALLOCATION RETURN CODE
OUTQCMD  DS    CL2                 QUEUED COMMAND
OUTMSGL  DS    H                   JOB STATUS MESSAGE TEXT LENGTH
OUTFIXL  EQU   *-OUTELEM           LENGTH OF FIXED PART OF ELEMENT
OUTMSG   DS    0C                  JOB STATUS MESSAGE TEXT
         DS    0D
         TITLE '  R E V D S C B  '
**********************************************************************
*                                                          *         *
*         DISPLAY DATA SET CATALOG/VTOC DETAILS            *  GP@P6  *
*                                                          * APR2008 *
**********************************************************************
         SPACE
**********************************************************************
*                                                                    *
*        THIS ROUTINE DISPLAYS DATA FROM THE VOLUME TABLE OF         *
*        CONTENTS (VTOC) FOR A SPECIFIC DATA SET.  INFORMATION       *
*        FROM BOTH THE FORMAT-1 AND FORMAT-3 (IF IT EXISTS)          *
*        DATA SET CONTROL BLOCK (DSCB) IS SHOWN.                     *
*                                                                    *
*        SCREEN LINES AFTER LINE 24 (IF THEY EXIST) ARE USED TO      *
*        SHOW A HEXADECIMAL DUMP OF THE DATA SET'S DSCB ENTRIES      *
*        UNTIL EITHER ALL ARE SHOWN OR THE END OF THE SCREEN IS      *
*        REACHED.                                                    *
*                                                                    *
*        FORMAT-8 DSCBS ARE TREATED PRETTY MUCH AS FORMAT-1 DSCBS.   *
*                                                                    *
*        FORMAT-9 ARE TOLERATED (AND DUMPED) BUT NO DATA IS          *
*        FORMALLY EXTRACTED FROM THEM.                               *
*                                                                    *
**********************************************************************
         SPACE
**********************************************************************
*                                                                    *
* REGISTERS ON ENTRY: R9 -> @DATA                                    *
*                     R13-> REGISTER SAVE AREA                       *
*                     R14-> RETURN POINT                             *
*                     R15-> REVDSCB                                  *
*                                                                    *
* DURING PROCESSING:  R13-> @DSCBWRK (LOCAL GETMAINED AREA)          *
*                                                                    *
* RETURN CODES:       R15 = RETURN CODE OF LOCATE OR OBTAIN          *
*                                                                    *
**********************************************************************
         EJECT
REVDSCB  RSECT
REVDSCB  AMODE 31
         B     @DSINFO-*(,R15)
         DC    AL1(7),CL7'REVDSCB'
@DSINFO  STM   R14,R12,12(R13)
         LR    R10,R15
         LA    R15,1
         LA    R11,4095(R15,R10)
         USING REVDSCB,R10,R11
         XASAM24
         LA    R0,$DSCBWKL
         MVI   GETMNTRC,75         TRACK GETMAIN IN CASE OF FAILURE
         GETMAIN R,LV=(0)          GET MAIN STORAGE
         LR    R14,R1              POINT TO NEW AREA
         LA    R15,$DSCBWKL        GET ITS LENGTH
         SR    R5,R5               CLEAR SOURCE LENGTH AND PAD
         MVCL  R14,R4              CLEAR RESIDUAL DATA
         ST    R1,8(,R13)          CHAIN SAVE AREAS
         ST    R13,4(,R1)
         LR    R13,R1              POINT TO GETMAINED AREA
         USING @DSCBWRK,R13
         SPACE
************************************************************
*                                                          *
*         INITIALIZE THE SCREEN BUFFER                     *
*                                                          *
************************************************************
         SPACE
         L     R1,SCRNCOLS         GET SCREEN WIDTH
         SH    R1,DSHW80           GET EXTRA WIDTH
         SRA   R1,1                HALVE IT
         ST    R1,DSOFFSET         SAVE DISPLAY OFFSET FOR CENTERING
         L     R6,SCREENBF         POINT TO THE PRIMARY BUFFER
         L     R7,SCREENSZ         GET THE SCREEN SIZE
         LA    R1,C' '             GET PAD CHARACTER
         SLL   R1,24               PROMOTE IT AND ZERO LENGTH
         MVCL  R6,R0               BLANK OUT THE SCREEN BUFFER
         L     R7,SCRNCOLS         GET THE WHITE LINE SIZE
         LR    R2,R7               COPY IT
         LA    R1,X'07'            GET PAD CHARACTER
         SLL   R1,24               PROMOTE IT
         MVCL  R6,R0               SET TOP LINE TO WHITE
         LA    R7,23
         MH    R7,SCRNCOLS+2       GET THE GREEN SCREEN AREA SIZE
         AR    R2,R7               ADD IT
         LA    R1,X'04'            GET PAD CHARACTER
         SLL   R1,24               PROMOTE IT
         MVCL  R6,R0               SET LINES 2 TO 24 TO GREEN
         L     R7,SCREENSZ         GET THE SCREEN SIZE
         SR    R7,R2               GET THE BLUE SCREEN AREA SIZE
         ST    R7,DSBLUESZ         SAVE IT
         BNP   DSSHDWOK            THERE IS NONE
         S     R6,SCREENSZ         POINT TO THE PRIMARY BLUE AREA
         MVI   0(R6),X'0C'         PROTECTED LOW INTENSITY
         A     R6,SCREENSZ         POINT TO THE BLUE AREA SHADOW
         LA    R1,X'01'            GET PAD CHARACTER
         SLL   R1,24               PROMOTE IT AND ZERO LENGTH
         MVCL  R6,R0               MAKE THE REST OF THE SCREEN BLUE
DSSHDWOK L     R6,SCREENBF         POINT TO THE SCREEN BUFFER
         MVI   0(R6),X'0D'         PROTECTED HIGH INTENSITY
         MVC   1(7,R6),DSINFO      LOAD SCREEN TITLE LINE
         A     R6,SCRNCOLS         POINT TO THE SECOND LINE
         LA    R0,5
         SR    R6,R0
         MVC   0(5,R6),DSIREL
         L     R6,SHADOWBF         POINT TO THE SHADOW BUFFER
         A     R6,SCRNCOLS         POINT TO THE SECOND LINE
         A     R6,DSOFFSET         ADJUST FOR DISPLAY CENTERING
         MVI   0(R6),X'06'
         MVC   1(79,R6),0(R6)      MAKE THE SECOND LINE YELLOW
         CLI   STATUS11,X'FF'      DELETE CONFIRMATION?
         BNE   DSLN2OK             NO
         MVI   0(R6),X'02'         YES
         MVC   1(79,R6),0(R6)      MAKE THE SECOND LINE RED
         MVI   28(R6),X'22'
         MVC   29(23,R6),28(R6)    REVERSE RED FOR TEXT
DSLN2OK  S     R6,SCREENSZ         POINT TO THE PRIMARY BUFFER
         MVC   30(20,R6),DSTITLE
         CLI   STATUS11,X'FF'      DELETE CONFIRMATION?
         BNE   DSTITLOK            NO
         MVC   30(8,R6),DSTITLE2   YES
         LA    R1,22
         M     R0,SCRNCOLS
         A     R1,SCREENBF
         A     R1,DSOFFSET         ADJUST FOR DISPLAY CENTERING
         MVI   1(R1),X'0D'         PROTECTED HIGH INTENSITY
         MVC   2(56,R1),DSDELMSG
         MVI   58(R1),X'0C'        PROTECTED LOW INTENSITY
         A     R1,SCREENSZ
         MVI   2(R1),X'06'         YELLOW
         MVC   3(55,R1),2(R1)
DSTITLOK L     R0,SCRNCOLS
         AR    R0,R0
         AR    R6,R0               POINT TO THE FOURTH LINE
         MVI   0(R6),X'0C'         PROTECTED LOW INTENSITY
         MVC   1(19,R6),DSLBL01
         MVI   20(R6),X'0D'        PROTECTED HIGH INTENSITY
         MVC   22(44,R6),$DSNAME+2 SHOW DATA SET NAME
         A     R6,SCREENSZ
         MVI   22(R6),X'07'        SHOW DATA SET NAME IN WHITE
         MVC   23(43,R6),22(R6)
         S     R6,SCREENSZ
         AR    R6,R0               POINT TO THE SIXTH LINE
         SPACE
************************************************************
*                                                          *
*         ASCERTAIN VOLUME SERIAL NUMBER OF DATA SET       *
*                                                          *
************************************************************
         SPACE
         MVC   DSF1KEY,$DSNAME+2   COPY SUPPLIED DATA SET NAME
         MVI   DSLOCBF+1,1         SET VOLUME DETAILS
         MVC   DSLOCBF+6(6),$VOLSER
         CLI   $DDNAME,C'¬'        UNCATALOGED VTOC ENTRY?
         BE    DSLOCOK             YES, PRETEND DATA CAME FROM LOCATE
         XC    DSLOCBF(12),DSLOCBF NO, CLEAR VOLUME DETAILS
         CLI   $DDNAME,C'*'        CATALOG ENTRY?
         BE    DSLOC$              YES, SKIP TIOT SEARCH
         LA    R1,$DDNAME          POINT TO SUBJECT DDNAME
         L     R15,=A(REVDDLOC)    POINT TO SUBROUTINE
         BASR  R14,R15             FIND SUBJECT DD TIOT ENTRY
         LTR   R15,R15             IS IT ALLOCATED?
         BZ    DSLOC$              NO, INFO ABOUT A CATALOGED DATA SET
         SR    R0,R0               CLEAR FOR INSERT
         IC    R0,0(,R15)          GET TIOT ENTRY SIZE
         LA    R1,16               GET DATA LENGTH BEFORE UCB POINTER
         SR    R0,R1               GET UCB POINTER AREA SIZE
         SRA   R0,2                GET NUMBER OF UCB POINTERS
         BZ    DSONSHOW            FINISH UP IF NONE
         LA    R1,20
         CR    R0,R1               MORE THAN TWENTY?
         BNH   *+8                 NO
         LA    R0,20               YES, REDUCE TO MAXIMUM THAT WILL FIT
         STH   R0,DSLOCBF          SAVE VOLUME COUNT
         SR    R3,R3               CLEAR FOR INSERT
         LA    R15,16(,R15)        POINT TO FIRST UCB POINTER WORD
         LA    R14,DSLOCBF+2       POINT TO FIRST VOLUME SLOT
DSUNITLP ICM   R3,7,1(R15)         POINT TO THE UCB
         MVC   0(4,R14),16(R3)     COPY DEVICE TYPE
         MVC   4(6,R14),28(R3)     COPY VOLUME SERIAL NUMBER
         LA    R14,12(,R14)        POINT TO NEXT VOLUME SLOT
         LA    R15,4(,R15)         POINT TO NEXT UCB POINTER
         BCT   R0,DSUNITLP         GO PROCESS NEXT UNIT
         B     DSVOLOK             END OF LIST
         SPACE
DSLOC$   XC    DSWK1,DSWK1         NO, CLEAR PARAMETER LIST
         MVI   DSWK1,X'44'         INDICATE A LOCATE
         LA    R0,DSF1KEY          GET DATA SET NAME ADDRESS
         SR    R1,R1
         LA    R2,DSLOCBF          GET LOCATE BUFFER ADDRESS
         STM   R0,R2,DSWK1+4       SET LOCATE PARAMETER LIST
         LOCATE DSWK1              FETCH CATALOG ENTRY
         LTR   R15,R15             SUCCESS?
         BNZ   DSLOCERR            NO, GO FINISH UP
DSLOCOK  MVC   DSVOL,DSLOCBF+6     COPY FIRST OR ONLY VOLUME SERIAL
         B     DSVOLOK
         SPACE
DSOBTCHK TM    DSDIRBLK,DS1IND80   GOT ALL THE VOLUMES WITH DATA?
         BO    DSEXTNTS            YES, ASSUME NEVER-USED VOLUME
DSOBTERR A     R6,SCRNCOLS         LEAVE ANOTHER BLANK LINE
         MVC   22(17,R6),=C'OBTAIN ERROR: RC='
         B     DSCAMERR
         SPACE
DSLOCERR MVC   22(17,R6),=C'LOCATE ERROR: RC='
DSCAMERR ST    R15,DSSAVERC        SAVE THE RETURN CODE
         UNPK  39(3,R6),DSSAVERC+3(2)
         TR    39(2,R6),DSHEX-240
         MVI   41(R6),C' '
         A     R6,SCREENSZ
         MVI   22(R6),X'22'        REVERSE VIDEO RED FOR BAD CATALOG
         MVC   23(18,R6),22(R6)
*        S     R6,SCREENSZ         NO NEED SINCE SCREEN FINISHED
         B     DSONSHOW            SHOW THE RESULT
         SPACE
************************************************************
*                                                          *
*         FORMAT VOLUME SERIAL NUMBER(S)                   *
*                                                          *
************************************************************
         SPACE
DSVOLTAP MVI   0(R6),X'0C'         PROTECTED LOW INTENSITY
         MVC   1(19,R6),DSLBL02
         MVC   30(6,R6),=C'(TAPE)' SHOW DEVICE CLASS
         A     R6,SCREENSZ         POINT TO DISPLAY LINE SHADOW
         MVI   29(R6),X'01'        SHOW DEVICE TYPE IN BLUE
         MVC   30(50,R6),29(R6)
         S     R6,SCREENSZ         POINT BACK TO PRIMARY BUFFER
         A     R6,SCRNCOLS         POINT TO NEXT (SEVENTH) LINE
         SR    R0,R0
         ICM   R0,3,DS1VOLSQ       ANY FILE SEQUENCE NUMBER SET?
         BZ    DSFSEQOK            NO
         MVI   0(R6),X'0C'         PROTECTED LOW INTENSITY
         MVC   1(19,R6),DSLBL17
         MVI   20(R6),X'0D'        PROTECTED HIGH INTENSITY
         A     R6,SCREENSZ
         MVI   22(R6),X'05'        DISPLAY VALUE IN TURQUOISE
         MVC   23(5,R6),22(R6)
         S     R6,SCREENSZ
         LA    R15,22(,R6)         POINT TO DISPLAY AREA
         BAS   R14,DSSHO#          FORMAT THE NUMBER
         A     R6,SCRNCOLS         POINT TO NEXT LINE
DSFSEQOK TM    DS1DSORG,DS1DSGPS   GOT SOME DCB ATTRIBUTES?
         BO    DSORGSHO            YES, GO SHOW THEM
         B     DSONSHOW            NO, TIME TO FINISH UP
         SPACE
************************************************************
*                                                          *
*         FORMAT VOLUME SERIAL NUMBER(S)                   *
*                                                          *
************************************************************
         SPACE
DSVOLOK  MVI   0(R6),X'0C'         PROTECTED LOW INTENSITY
         MVC   1(19,R6),DSLBL02
         MVI   20(R6),X'0D'        PROTECTED HIGH INTENSITY
         A     R6,SCREENSZ
         MVI   22(R6),X'05'        VOLUME SERIALS IN TURQUOISE
         MVC   23(57,R6),22(R6)
         S     R6,SCREENSZ
         MVC   DSTPC,=Y(15)        ASSUME 15 TRACKS PER CYLINDER
         LH    R0,DSLOCBF          GET VOLUME COUNT
         LTR   R0,R0               ANY DATA HERE?
         BNP   DSONSHOW            NO, BETTER FINISH UP
         LA    R1,20               GET MAXIMUM DSLOCBF CAPACITY
         CR    R0,R1               MORE VOLUMES THAN IN DSLOCBF?
         BNH   DSVOL#OK            NO, THATS FINE
         LR    R0,R1               YES, REDUCE TO MAXIMUM
         STH   R1,DSLOCBF          ALSO SAVE FOR LATER
DSVOL#OK LA    R7,22(,R6)          POINT TO WHERE FIRST VOLUME GOES
         LA    R5,DSLOCBF+2        POINT TO FIRST LOCATE ENTRY
DSVOLLP  MVC   0(6,R7),4(R5)       COPY VOLUME SERIAL
         LA    R7,7(,R7)           BUMP DISPLAY POINTER
         LA    R5,12(,R5)          BUMP LOCATE ENTRY POINTER
         BCT   R0,DSVOLLP
         CLI   DSLOCBF+1,1         ONLY ONE VOLUME?
         BNE   DSVOLTYP            NO, SKIP DEVICE TYPE
         CLI   DSLOCBF+4,X'80'     TAPE DEVICE CLASS?
         BE    DSVOLTAP            YES
         CLI   DSLOCBF+4,X'20'     DASD DEVICE CLASS?
         BNE   DSVOLTYP            NO, SKIP DEVICE TYPE
         CLI   DSLOCBF+2,X'30'     GENERIC DEVICE TYPE?
         BNE   DSVOLTYP            NO, ESOTERIC
         TM    DSLOCBF+5,X'F0'     KNOWN DASD DEVICE?
         BNZ   DSVOLTYP            NO, CANNOT DISPLAY IT
         SR    R1,R1               CLEAR FOR INSERT
         IC    R1,DSLOCBF+5        INSERT DASD DEVICE TYPE BYTE
         SLL   R1,4                MULTIPLY BY 16 FOR INDEX
         LA    R1,DSKTABLE(R1)     POINT TO DEVICE TYPE LABEL
         MVC   30(8,R6),8(R1)      SHOW DEVICE TYPE
         MVC   DSTPC,6(R1)         COPY TRACKS PER CYLINDER
         A     R6,SCREENSZ         POINT TO DISPLAY LINE SHADOW
         MVI   29(R6),X'01'        SHOW DEVICE TYPE IN BLUE
         MVC   30(50,R6),29(R6)
         S     R6,SCREENSZ         POINT BACK TO PRIMARY BUFFER
DSVOLTYP A     R6,SCRNCOLS         POINT TO NEXT (SEVENTH) LINE
         SPACE
************************************************************
*                                                          *
*         VOLUME LOOP CONTROL                              *
*                                                          *
************************************************************
         SPACE
         MVI   DSDIRBLK,0          CLEAR A FLAG BYTE
         XC    MYDSCB,MYDSCB       CLEAR RESIDUAL DSCB DATA
         LH    R0,DSLOCBF          GET VOLUME COUNT
         LA    R1,DSLOCBF+2        POINT TO FIRST 12-BYTE ENTRY
         CLI   DSF1KEY+15,C' '     OS CATALOG?
         BNE   DSVOLLP2            NO, DATA SET NAME IS TOO LONG
         CLC   =C'SYSCTLG.',DSF1KEY
         BNE   DSVOLLP2            NO, RIGHT NAME FOR OBTAIN
         MVC   DSF1KEY+7(8),DSF1KEY+15
DSVOLLP2 STM   R0,R1,DSVLPCTL      SAVE VOLUME LOOP CONTROL STATUS
         MVC   DSVOL,4(R1)         COPY CURRENT VOLUME SERIAL
         SPACE
************************************************************
*                                                          *
*         ASCERTAIN TRACKS PER CYLINDER                    *
*                                                          *
************************************************************
         SPACE
         CLI   OSBITS,X'9B'        MVS/ESA OR LATER?
         BE    DSGOTTPC            YES, 15 TRACKS PER CYLINDER
         CLI   DSVOL,C' '          BLANK VOLUME SERIAL?
         BE    DSGOTTPC            YES, NO VTOC FOR VIO
         MVI   DSF4KEY,X'04'       SET VTOC "DATA SET NAME"
         MVC   DSF4KEY+1(43),DSF4KEY
         XC    DSWK1,DSWK1         CLEAR PARAMETER LIST
         MVI   DSWK1,X'C1'         INDICATE AN OBTAIN
         MVI   DSWK1+2,8           EADSCB=OK AS FROM Z/OS 1.10
         LA    R0,DSF4KEY          GET DATA SET NAME ADDRESS
         LA    R1,DSVOL            GET VOLUME SERIAL ADDRESS
         LA    R2,MYDSCB           GET DSCB BUFFER ADDRESS
         ICM   R3,15,DS1SCALO      SAVE ALLOCATION DETAILS
         STM   R0,R2,DSWK1+4       SET OBTAIN PARAMETER LIST
         OBTAIN DSWK1              FETCH FORMAT-4 DSCB
         LTR   R15,R15             SUCCESS?
         BNZ   DSOBTERR            NO, GO FINISH UP
         MVC   DSTPC,DS4DEVSZ+2    YES, COPY TRACKS PER CYLINDER
         STCM  R3,15,DS1SCALO      RESTORE ALLOCATION DETAILS
         SPACE
************************************************************
*                                                          *
*         OBTAIN THE DATA SET VTOC ENTRY                   *
*                                                          *
************************************************************
         SPACE
DSGOTTPC XC    DSWK1,DSWK1         CLEAR PARAMETER LIST
         MVI   DSWK1,X'C1'         INDICATE AN OBTAIN SEARCH
         MVI   DSWK1+2,8           EADSCB=OK AS FROM Z/OS 1.10
         LA    R0,DSF1KEY          GET DATA SET NAME ADDRESS
         LA    R1,DSVOL            GET VOLUME SERIAL ADDRESS
         LA    R2,MYDSCB           GET DSCB BUFFER ADDRESS
         STM   R0,R2,DSWK1+4       SET LOCATE PARAMETER LIST
         OBTAIN DSWK1              FETCH FORMAT-1 DSCB
         LTR   R15,R15             SUCCESS?
         BNZ   DSOBTCHK            NO, GO FINISH UP
         MVC   DSNXTPTR,DS1PTRDS   SAVE POINTER TO NEXT DSCB
         LR    R1,R2               POINT TO THE DSCB TO FORMAT
         BAS   R14,DSHODSCB        FORMAT THE FORMAT-1 DSCB
         SPACE
         CLI   DS1FMTID,X'F8'      OBTAINED FORMAT-8 DSCB?
         BNE   DSFMT9OK            NO, A FORMAT-1 DSCB AS USUAL
         MVC   DSWK1,SEEKDSCB      YES, A FORMAT-9 SHOULD FOLLOW
         LA    R0,DSNXTPTR
         LA    R1,DSVOL
         LA    R2,DSDSCB
         STM   R0,R2,DSWK1+4
         OBTAIN DSWK1
         LTR   R15,R15             SUCCESS?
         BNZ   DSFMT9OK            NO, IGNORE FAILURE FOR NOW
         MVC   DSNXTPTR,DS3PTRDS   YES, COPY DS9PTRDS
         LR    R1,R2               POINT TO THE DSCB TO FORMAT
         BAS   R14,DSHODSCB        FORMAT THE FORMAT-3 DSCB
DSFMT9OK EQU   *
         SPACE
         CLC   DSLOCBF(2),DSVLPCTL+2
         BNE   DSALLVOL            SKIP FIRST-VOLUME-ONLY STUFF
         SPACE
************************************************************
*                                                          *
*         FORMAT DATA SET ORGANIZATION                     *
*                                                          *
************************************************************
         SPACE
DSORGSHO MVI   0(R6),C' '          CLEAR ANY VOLUME LIST OVERFLOW
         MVC   1(256,R6),0(R6)
         MVI   0(R6),X'0C'         PROTECTED LOW INTENSITY
         MVC   1(19,R6),DSLBL03
         MVI   20(R6),X'0D'        PROTECTED HIGH INTENSITY
         A     R6,SCREENSZ
         MVI   22(R6),X'05'        DISPLAY VALUE IN TURQUOISE
         MVC   23(19,R6),22(R6)
         S     R6,SCREENSZ
         ICM   R1,8,DS1DSORG       TEST UP TO 7 DSORG BITS
         LA    R0,7
         LA    R15,ORGTYPES
DSORGLP  LTR   R1,R1
         BM    DSGTORG
         SLL   R1,1
         LA    R15,2(,R15)
         BCT   R0,DSORGLP
DSGTORG  MVC   22(2,R6),0(R15)
         LA    R7,24(,R6)
         TM    DS1DSORG,DS1DSGU
         BNO   DSOMVOK
         MVI   0(R7),C'U'          UNMOVABLE DATA SET
         LA    R7,1(,R7)
DSOMVOK  TM    DS1DSORG+1,DS1ACBM  VSAM?
         BNO   DSOVSOK             NO
         MVC   22(2,R6),=C'VS'     YES
DSOVSOK  TM    DS1FLAG1,X'08'      LARGE DATA SET?
         BZ    DSOLRGOK            NO
         MVC   0(2,R7),=C'-L'      DENOTE LARGE SEQUENTIAL
DSOLRGOK TM    DS1SMSFG,X'0C'      PDSE OR STRIPED SEQUENTIAL?
         BZ    DSORGCPY            NO
         MVC   0(2,R7),=C'-E'      DENOTE PDSE OR EXTENDED FORMAT
         TM    DS1FLAG1,X'80'      COMPRESSIBLE DATA SET?
         BZ    DSOCMPOK            NO
         MVC   3(4,R7),=C'COMP'    YES
         LA    R7,5(,R7)
DSOCMPOK TM    DS1SMSFG,X'02'      HFS?
         BZ    DSORGCPY            NO
         MVC   22(5,R6),=CL5'HFS  '
DSORGCPY LA    R0,X'0000FF'
         CLM   R0,7,DS1LSTAR       OS CATALOG?
         BNE   DSOCATOK            NO
         MVC   22(4,R6),=CL4'CTLG'
DSOCATOK TM    DS1FLAG1,X'04'      ACCESS METHOD ENCRYPTED?
         BZ    DSOCRYOK            NO
         MVC   3(9,R7),=CL9'ENCRYPTED'
DSOCRYOK A     R6,SCRNCOLS         POINT TO NEXT LINE
         SPACE
************************************************************
*                                                          *
*         FORMAT RECORD FORMAT                             *
*                                                          *
************************************************************
         SPACE
         MVI   0(R6),X'0C'         PROTECTED LOW INTENSITY
         MVC   1(19,R6),DSLBL04
         MVI   20(R6),X'0D'        PROTECTED HIGH INTENSITY
         A     R6,SCREENSZ
         MVI   22(R6),X'05'        DISPLAY VALUE IN TURQUOISE
         MVC   23(5,R6),22(R6)
         S     R6,SCREENSZ
         MVC   22(2,R6),ORGTYPES+14    TWO ASTERISKS
         LA    R7,23(,R6)
         TM    DS1RECFM,X'C0'
         BNZ   DSRFM0
         TM    DS1RECFM,X'20'
         BZ    DSRFM1
         MVI   22(R6),C'D'
         B     DSRFM2
DSRFM0   MVI   22(R6),C'U'
         BO    DSRFM2
         MVI   22(R6),C'F'
         TM    DS1RECFM,X'80'
         BO    DSRFM2
         MVI   22(R6),C'V'
DSRFM2   MVI   0(R7),C' '
DSRFM1   TM    DS1RECFM,X'10'
         BNO   DSRFM3
         MVI   0(R7),C'B'
         LA    R7,1(,R7)
DSRFM3   TM    DS1RECFM,X'08'
         BNO   DSRFM4
         MVI   0(R7),C'S'
         LA    R7,1(,R7)
DSRFM4   TM    DS1RECFM,X'20'
         BNO   DSRFM5
         CLI   22(R6),C'D'
         BE    DSRFM5
         MVI   0(R7),C'T'
         LA    R7,1(,R7)
DSRFM5   TM    DS1RECFM,X'04'
         BNO   DSRFM6
         MVI   0(R7),C'A'
         LA    R7,1(,R7)
DSRFM6   TM    DS1RECFM,X'02'
         BNO   DSRFM7
         MVI   0(R7),C'M'
         LA    R7,1(,R7)
DSRFM7   MVC   CRERECFM,22(R6)     SAVE RECORD FORMAT
         MVC   CREVOL,DSVOL        SAVE VOLUME SERIAL
         MVC   CRETPC,DSTPC        SAVE TRACKS PER CYLINDER
         A     R6,SCRNCOLS         POINT TO NEXT LINE
         SPACE
************************************************************
*                                                          *
*         FORMAT LOGICAL RECORD LENGTH                     *
*                                                          *
************************************************************
         SPACE
         MVI   0(R6),X'0C'         PROTECTED LOW INTENSITY
         MVC   1(19,R6),DSLBL05
         MVI   20(R6),X'0D'        PROTECTED HIGH INTENSITY
         A     R6,SCREENSZ
         MVI   22(R6),X'05'        DISPLAY VALUE IN TURQUOISE
         MVC   23(5,R6),22(R6)
         S     R6,SCREENSZ
         LA    R0,32
         SLL   R0,10               GET 32768
         MVC   CRELRECL,DS1LRECL   SAVE RECORD LENGTH
         CLM   R0,3,DS1LRECL       LRECL=32768?
         BNE   DSNOTX              NO
         MVI   22(R6),C'X'         SAY LRECL=X
         TM    DS1RECFM,X'48'      RECFM=V(B)S?
         BO    DSRECLOK            YES
DSNOTX   ICM   R0,3,DS1LRECL
         LA    R15,22(,R6)         POINT TO DISPLAY AREA
         BAS   R14,DSSHO#          FORMAT THE NUMBER
DSRECLOK A     R6,SCRNCOLS         POINT TO NEXT LINE
         SPACE
************************************************************
*                                                          *
*         FORMAT PHYSICAL RECORD LENGTH                    *
*                                                          *
************************************************************
         SPACE
         MVI   0(R6),X'0C'         PROTECTED LOW INTENSITY
         MVC   1(19,R6),DSLBL06
         MVI   20(R6),X'0D'        PROTECTED HIGH INTENSITY
         A     R6,SCREENSZ
         MVI   22(R6),X'05'        DISPLAY VALUE IN TURQUOISE
         MVC   23(5,R6),22(R6)
         S     R6,SCREENSZ
         SR    R0,R0
         ICM   R0,3,DS1BLKL
         STH   R0,CREBLKSI         SAVE FOR CLONED CREATION
         LA    R15,22(,R6)         POINT TO DISPLAY AREA
         BAS   R14,DSSHO#          FORMAT THE NUMBER
         A     R6,SCRNCOLS         POINT TO NEXT LINE
         TM    STATUS2,$2TAPE      TAPE DATA SET?
         BO    DSONSHOW            YES, THAT'S ABOUT ALL TO SHOW
         SPACE
************************************************************
*                                                          *
*         FORMAT KEY LENGTH AND RKP IF NON-ZERO            *
*                                                          *
************************************************************
         SPACE
         CLI   DS1KEYL,0           KEYED FILE?
         BE    DSKEYSOK            NO, SKIP THIS ONE
         MVI   0(R6),X'0C'         PROTECTED LOW INTENSITY
         MVC   1(19,R6),DSLBL07
         MVI   20(R6),X'0D'        PROTECTED HIGH INTENSITY
         A     R6,SCREENSZ
         MVI   22(R6),X'05'        DISPLAY VALUE IN TURQUOISE
         MVC   23(5,R6),22(R6)
         S     R6,SCREENSZ
         SR    R0,R0
         IC    R0,DS1KEYL
         LA    R15,22(,R6)         POINT TO DISPLAY AREA
         BAS   R14,DSSHO#          FORMAT THE NUMBER
         ICM   R0,3,DS1RKP         IS RKP ZERO?
         BZ    DSRKPOK             YES
         MVI   28(R6),X'0C'        PROTECTED LOW INTENSITY
         MVC   29(4,R6),=C'RKP:'
         MVI   33(R6),X'0D'        PROTECTED HIGH INTENSITY
         LA    R15,34(,R6)         POINT TO DISPLAY AREA
         BAS   R14,DSSHO#          FORMAT THE NUMBER
         A     R6,SCREENSZ
         MVI   34(R6),X'05'        DISPLAY VALUE IN TURQUOISE
         MVC   35(5,R6),34(R6)
         S     R6,SCREENSZ
DSRKPOK  A     R6,SCRNCOLS         POINT TO NEXT LINE
DSKEYSOK EQU   *
         SPACE
************************************************************
*                                                          *
*         FORMAT DATA SET INDICATORS                       *
*                                                          *
************************************************************
         SPACE
         MVI   0(R6),X'0C'         PROTECTED LOW INTENSITY
         MVC   1(19,R6),DSLBL08
         MVI   20(R6),X'0D'        PROTECTED HIGH INTENSITY
         A     R6,SCREENSZ
         MVI   22(R6),X'05'        DISPLAY VALUE IN TURQUOISE
         MVC   23(27,R6),22(R6)
         S     R6,SCREENSZ
         LA    R15,22(,R6)         POINT TO VALUE AREA
         LR    R14,R15             POINT TO VALUE AREA
         CLI   DS1EXT1,X'40'       USER LABELS?
         BNE   DSUSEROK            NO
         MVC   0(9,R15),=C'LABEL=SUL'
         LA    R15,10(,R15)
DSUSEROK TM    DS1DSIND,DS1IND40   RACF?
         BNO   DSRACFOK            NO
         MVC   0(4,R15),=C'RACF'
         LA    R15,5(,R15)
DSRACFOK TM    DS1DSIND,DS1IND10   PASSWORD?
         BNO   DSPSWDOK            NO
         MVC   0(8,R15),=C'PASSWORD'
         TM    DS1DSIND,DS1IND04   NOPWREAD?
         BNO   DSPSWDDN            NO
         MVC   0(8,R15),=C'NOPWREAD'
DSPSWDDN LA    R15,9(,R15)
DSPSWDOK TM    DS1DSIND,DS1IND02   MODIFIED?
         BNO   DSMODIOK            NO
         MVC   0(8,R15),=C'MODIFIED'
         LA    R15,5(,R15)
DSMODIOK TM    DS1DSIND,DS1IND01   SECURE CHECKPOINT DATA SET?
         BNO   DSCKPTOK            NO
         MVC   0(5,R15),=C'CHKPT'
         LA    R15,6(,R15)
DSCKPTOK CR    R14,R15             ANY FLAGS SET?
         BNE   DSNONEOK            YES
         MVC   0(4,R15),=C'NONE'
DSNONEOK A     R6,SCRNCOLS         POINT TO NEXT LINE
         A     R6,SCRNCOLS         SKIP A LINE
         SPACE
************************************************************
*                                                          *
*         FORMAT CREATION, REFERENCE AND EXPIRY DATES      *
*                                                          *
************************************************************
         SPACE
         MVC   DSWK1+1(3),DS1CREDT COPY THE DATES
         MVC   DSWK1+5(3),DS1REFD
         MVC   DSWK1+9(3),DS1EXPDT
         LA    R2,DSWK1
         LA    R0,6
         MH    R0,SCRNCOLS+2
         L     R5,SCREENBF         POINT TO THE PRIMARY BUFFER
         A     R5,DSOFFSET         ADD OFFSET FOR CENTERING
         AR    R5,R0               POINT TO THE SEVENTH LINE
         LA    R14,DSLBLCD         POINT TO DATE LABELS
         LA    R0,3                GET NUMBER OF DATES
DSDTLP1  ICM   R15,7,1(R2)         IS THE DATE ZERO?
         BZ    DSDTNXT             YES, DO NOT EVEN MENTION IT
         L     R15,=A(IDRDATE)
         USING IDRDATE,R15
         LA    R15,MNTHTBL-4       ADJUST FOR FIRST INCREMENT
         DROP  R15                 IDRDATE
         LH    R4,2(,R2)           LOAD JULIAN DAY OF YEAR
         TM    1(R2),X'03'         LEAP YEAR?
         BZ    DSDTLP2             YES
         CH    R4,=H'60'           DDD AFTER 28TH FEBRUARY?
         BL    DSDTLP2             NO, LEAP YEAR IRRELEVANT
         LA    R4,1(,R4)           YES, FUDGE DDD ACCORDINGLY
DSDTLP2  LA    R15,4(,R15)         INCREMENT THRU MONTH TABLE
         SH    R4,0(,R15)          DECREASE NUMBER OF DAYS
         BP    DSDTLP2             GO DECREMENT ANOTHER MONTH
         AH    R4,0(,R15)          FOUND THE MONTH
         CVD   R4,DOUBLE           GET DAY OF MONTH
         OI    DOUBLE+7,X'0F'      MAKE UNPK RESULT PRINTABLE
         UNPK  75(3,R5),DOUBLE     FORMAT DAY OF MONTH
         MVI   75(R5),C'-'         INSERT THE DASH
         MVC   73(2,R5),2(R15)     MOVE IN MONTH NUMBER
         MVI   72(R5),C'-'         INSERT THE DASH
         IC    R4,1(,R2)           GET THE YEAR
         CH    R4,=H'60'           AFTER 1960?
         BH    *+8                 YES
         LA    R4,100(,R4)         NO, SO MAKE IT SO
         LA    R4,1900(,R4)        ADD BASE TO 370 ORIGIN
         CVD   R4,DOUBLE           GET YEAR IN DECIMAL
         OI    DOUBLE+7,X'0F'      MAKE UNPK RESULT PRINTABLE
         UNPK  68(4,R5),DOUBLE     FORMAT YEAR
         MVI   66(R5),X'0D'        PROTECTED HIGH INTENSITY
         MVC   55(11,R5),0(R14)    LOAD LABEL FOR DATE
         MVI   54(R5),X'0C'        PROTECTED LOW INTENSITY
         A     R5,SCREENSZ         POINT TO SEVENTH LINE SHADOW
         MVI   68(R5),X'05'        DISPLAY VALUE IN TURQUOISE
         MVC   69(9,R5),68(R5)
         S     R5,SCREENSZ         POINT BACK TO PRIMARY BUFFER
DSDTNXT  LA    R2,4(,R2)           POINT TO NEXT DATE TO FORMAT
         A     R5,SCRNCOLS
         A     R5,SCRNCOLS         GO DOWN TWO LINES
         LA    R14,11(,R14)        POINT TO THE NEXT LABEL
         BCT   R0,DSDTLP1          GO SHOW THE NEXT DATE
         SPACE
************************************************************
*                                                          *
*         COUNT THE NUMBER OF EXTENTS                      *
*                                                          *
************************************************************
         SPACE
DSALLVOL SR    R1,R1
         IC    R1,DS1NOEPV
         CLI   DS1EXT1,X'40'       USER LABEL EXTENT PRESENT?
         BNE   *+8                 NO
         LA    R1,1(,R1)           YES, COUNT IT
         STC   R1,MYDSCB+128       SAVE THE EXTENT COUNT SOMEWHERE
         A     R1,DSTOTEXT
         ST    R1,DSTOTEXT
         SPACE
************************************************************
*                                                          *
*         COUNT THE NUMBER OF USED TRACKS                  *
*                                                          *
************************************************************
         SPACE
         SR    R1,R1
         CLI   MYDSCB+128,0        ANY EXTENTS?
         BE    DSGOTUSD            NO, SHOW ZERO TRACKS FOR ANY DSORG
         LA    R0,X'0000FF'
         CLM   R0,7,DS1LSTAR       OS CATALOG?
         BE    DSGOTUSD            SEEMS LIKE IT
         ICM   R1,3,DS1LSTAR       GET LAST USED TRACK
         CLI   DS1LSTAR+2,0        IS R OF TTR ZERO?
         BE    *+8                 YES
         LA    R1,1(,R1)           NO, COUNT ANOTHER TRACK
         AIF   (NOT &ENVBIG).DSGTUSD
         TM    DS1FLAG1,DS1LARGE   DSNTYPE=LARGE?
         BNO   *+8                 NO, HAVE TRACKS USED ALREADY
.DSGTUSD ANOP
         ICM   R1,4,DS1TTTHI       YES, GET TRACKS USED HIGH-ORDER
         A     R1,DSTOTUSE         ACCUMULATE USED TRACK TOTAL
         ST    R1,DSTOTUSE
DSGOTUSD EQU   *
         SPACE
************************************************************
*                                                          *
*         COUNT THE NUMBER OF ALLOCATED TRACKS             *
*                                                          *
************************************************************
         SPACE
         SR    R4,R4               RESET TRACK COUNTER
         CLI   MYDSCB+128,0        ANY EXTENTS?
         BE    DSGOTALC            NO, SO NO TRACKS
         LA    R1,DS1EXT1          POINT TO FIRST EXTENT
         LA    R3,1                SET EXTENT NUMBER
         MVI   NEWDSCB#+1,4        EXTENT NUMBER FOR NEW FORMAT 3 DSCB
         MVI   JMPLBL3#+1,8        EXTENT NUMBER TO SKIP F3 ID
DSTRKLP  CLC   DSTPC,DSFW15+2      FIFTEEN TRACKS PER CYLINDER?
         BNE   DSTRKOLD            NO, ASSUME PRE-EAV WITH FORMAT-1
*
*  CATER FOR EXTENT DESCRIPTORS WHICH CAN DESCRIBE EAS ON EAV WHICH
*  CAN ONLY OCCUR ON Z/OS WHICH MEANS IT CAN ONLY OCCUR WHEN THERE
*  ARE 15 TRACKS PER CYLINDER BECAUSE THE ONLY DASD DEVICE TYPES
*  SUPPORTED BY Z/OS ARE 3380, 3390 AND 9345.  (THIS WAY THE EAV
*  ALGORITHM CAN BE TESTED ON SYSTEMS WITHOUT EAV.)
*
*  EXTENT START AND END TRACK ADDRESSES ARE GIVEN BY WXYZTUVH WHERE
*  H IS THE HEAD-WITHIN-CYLINDER AND HEXADECIMAL TUVWXYZ IS CYLINDER.
*  THIS BECOMES TUVW000H FOR NON-EAV WHICH OLDER SYSTEMS CAN SAFELY
*  TREAT AS PER TUVWHHHH
*
         ICM   R14,12,8(R1)        GET END TUVH....
         SRL   R14,4               GET END 0TUVH...
         ICM   R14,3,6(R1)         GET END 0TUVWXYZ
         IC    R15,9(,R1)          GET END ......VH
         N     R15,DSFW15          GET END 0000000H
         ICM   R0,12,4(R1)         GET START TUVH....
         SRL   R0,4                GET START 0TUVH...
         ICM   R0,3,2(R1)          GET START 0TUVWXYZ
         SR    R14,R0              GET NUMBER OF CYLS
         IC    R0,5(,R1)           GET START ......VH
         N     R0,DSFW15           GET START 0000000H
         B     DSTRKCMN            BRANCH TO COMMON CODE
DSTRKOLD SR    R14,R14
         ICM   R14,3,6(R1)         LOAD END CC
         SR    R15,R15
         ICM   R15,3,8(R1)         LOAD END HH
         SR    R0,R0
         ICM   R0,3,2(R1)          LOAD START CC
         SR    R14,R0              GET NO. OF CYLS
         ICM   R0,3,4(R1)          LOAD START HH
DSTRKCMN SR    R15,R0              GET DIFF. OF TRACKS
         MH    R14,DSTPC           CONVERT CYL TO TRK
         AR    R14,R15             GET TOTAL (LESS 1)
         LA    R4,1(R14,R4)        ACCUMULATE TOTAL
         CLM   R3,1,MYDSCB+128     LAST EXTENT?
         BNL   DSALCTRK            YES, FINISHED
         LA    R3,1(,R3)           INCREMENT EXTENT COUNTER
         CH    R3,NEWDSCB#         END OF EXTENTS FOR THIS DSCB?
         BE    DSTRKF3             YES, READ FORMAT-3
         CH    R3,JMPLBL3#         UP TO THE FORMAT-3 ID?
         BE    DSTRKE8             YES, POINT PAST IT
         LA    R1,10(,R1)          POINT TO NEXT EXTENT
         B     DSTRKLP             CONTINUE WITH NEXT EXTENT
         SPACE
DSTRKF3  LA    R1,13(,R3)          GET EXTENT NUMBER FOR NEXT F3 DSCB
         STH   R1,NEWDSCB#         SAVE IT FOR LATER
OBT3SEEK MVC   DSWK1,SEEKDSCB
         LA    R15,DSNXTPTR
         LA    R0,DSVOL
         LA    R1,DSDSCB
         STM   R15,R1,DSWK1+4
         OBTAIN DSWK1
         LTR   R15,R15
         BZ    DSOBT3OK
         MVC   22(17,R6),=C'OBTAIN ERROR: RC='
         STC   R15,DOUBLE
         UNPK  39(3,R6),DOUBLE(2)
         TR    39(2,R6),DSHEX-240
         MVI   41(R6),C' '
         A     R6,SCREENSZ
         MVI   22(R6),X'22'        REVERSE VIDEO RED FOR BAD VTOC
         MVC   23(18,R6),22(R6)
         S     R6,SCREENSZ
         B     DSALLOCD
         SPACE
DSOBT3OK MVC   DSNXTPTR,DS3PTRDS   DS2PTRDS OR DS3PTRDS
         LA    R1,DSDSCB           POINT TO THE DSCB TO FORMAT
         BAS   R14,DSHODSCB        FORMAT THE FORMAT-3 DSCB
         CLI   DS3FMTID,C'3'       IS IT A FORMAT-3 DSCB?
         BNE   OBT3SEEK            NO, IT IS A FORMAT-2
         LA    R1,DS3EXTNT         POINT TO FIRST EXTENT IN FORMAT-3
         B     DSTRKLP
         SPACE
DSTRKE8  LA    R1,13(,R3)          GET EXTENT NUMBER FOR NEXT F3 ID
         STH   R1,JMPLBL3#         SAVE IT FOR LATER
         LA    R1,DS3ADEXT         POINT TO NINE ADDITIONAL EXTENTS
         B     DSTRKLP
         SPACE
DSALCTRK A     R4,DSTOTALC         ACCUMULATE ALLOCATED TRACK TOTAL
         ST    R4,DSTOTALC
DSGOTALC EQU   *
         SPACE
************************************************************
*                                                          *
*         VOLUME LOOP CONTROL                              *
*                                                          *
************************************************************
         SPACE
         LM    R0,R1,DSVLPCTL      RESTORE VOLUME LOOP CONTROL STATUS
         LA    R1,12(,R1)          POINT TO NEXT ENTRY FROM LOCATE
         OC    4(6,R1),4(R1)       NULL VOLUME SERIAL NUMBER?
         BNZ   *+8                 NO, VOLUME IS ASSIGNED
         LA    R0,1                YES, UNASSIGNED VOLUME SLOT SO STOP
         BCT   R0,DSVOLLP2         GO PROCESS NEXT VOLUME
         SPACE
************************************************************
*                                                          *
*         FORMAT THE NUMBER OF EXTENTS                     *
*                                                          *
************************************************************
         SPACE
DSEXTNTS MVI   0(R6),X'0C'         PROTECTED LOW INTENSITY
         MVC   1(19,R6),DSLBL09
         MVI   20(R6),X'0D'        PROTECTED HIGH INTENSITY
         A     R6,SCREENSZ
         MVI   22(R6),X'05'        DISPLAY VALUE IN TURQUOISE
         MVC   23(5,R6),22(R6)
         S     R6,SCREENSZ
         L     R0,DSTOTEXT         GET TOTAL EXTENT COUNT
         LA    R15,22(,R6)         POINT TO DISPLAY AREA
         BAS   R14,DSSHO#          FORMAT THE NUMBER
         A     R6,SCRNCOLS         POINT TO NEXT LINE
         SPACE
************************************************************
*                                                          *
*         FORMAT THE NUMBER OF USED TRACKS                 *
*                                                          *
************************************************************
         SPACE
         MVI   0(R6),X'0C'         PROTECTED LOW INTENSITY
         MVC   1(19,R6),DSLBL10
         MVI   20(R6),X'0D'        PROTECTED HIGH INTENSITY
         A     R6,SCREENSZ
         MVI   22(R6),X'05'        DISPLAY VALUE IN TURQUOISE
         MVC   23(5,R6),22(R6)
         S     R6,SCREENSZ
         LA    R0,X'0000FF'
         CLM   R0,7,DS1LSTAR       OS CATALOG?
         BE    DSUSDUNK            SEEMS LIKE IT
         L     R0,DSTOTUSE         GET USED TRACK TOTAL
         LTR   R0,R0               ANY USED TRACKS?
         BNZ   DSUSDTRK            YES, SHOW THE NON-ZERO COUNT
         TM    DS1DSORG,DS1DSGPS   SEQUENTIAL?
         BO    DSUSDTRK            YES, ZERO USED TRACKS IS VALID
         CLI   MYDSCB+128,0        ZERO EXTENTS?
         BE    DSUSDTRK            SAFELY SAY ZERO TRACKS USED
DSUSDUNK MVC   22(4,R6),=C'UNKN'   NO, UNKNOWN USED TRACK COUNT
         B     DSUSEDOK
DSUSDTRK LA    R15,22(,R6)         POINT TO DISPLAY AREA
         BAS   R14,DSSHO#          FORMAT THE NUMBER
DSUSEDOK A     R6,SCRNCOLS         POINT TO NEXT LINE
         SPACE
************************************************************
*                                                          *
*         FORMAT THE NUMBER OF ALLOCATED TRACKS            *
*                                                          *
************************************************************
         SPACE
         MVI   0(R6),X'0C'         PROTECTED LOW INTENSITY
         MVC   1(19,R6),DSLBL11
         MVI   20(R6),X'0D'        PROTECTED HIGH INTENSITY
         A     R6,SCREENSZ
         MVI   22(R6),X'05'        DISPLAY VALUE IN TURQUOISE
         MVC   23(5,R6),22(R6)
         S     R6,SCREENSZ
         L     R0,DSTOTALC         GET ALLOCATED TRACK TOTAL
         ST    R0,CREALCSZ         SAVE FOR CLONED CREATION
         LA    R15,22(,R6)         POINT TO DISPLAY AREA
         BAS   R14,DSSHO#          FORMAT THE NUMBER
DSALLOCD A     R6,SCRNCOLS         POINT TO NEXT LINE
         SPACE
************************************************************
*                                                          *
*         FORMAT THE ALLOCATION TYPE                       *
*                                                          *
************************************************************
         SPACE
         MVI   0(R6),X'0C'         PROTECTED LOW INTENSITY
         MVC   1(19,R6),DSLBL12
         MVI   20(R6),X'0D'        PROTECTED HIGH INTENSITY
         A     R6,SCREENSZ
         MVI   22(R6),X'05'        DISPLAY VALUE IN TURQUOISE
         MVC   23(20,R6),22(R6)
         S     R6,SCREENSZ
         SR    R1,R1
         TM    DS1DSORG,DS1DSGPO   PARTITIONED ORGANIZATION?
         BO    *+8                 YES, RETAIN SAVED DIRECTORY SIZE
         ST    R1,CREDIR           NO, SAFE TO SAY NO PDS DIRECTORY
         IC    R1,DS1SCALO         GET ALLOCATION TYPE FLAGS
         SRL   R1,6                GET TWO HIGH ORDER BITS ONLY
         SLA   R1,3                GET INDEX
         LA    R1,DSALCTYP(R1)
         MVC   22(8,R6),0(R1)      SHOW MAIN ALLOCATION TYPE
         LA    R15,31(,R6)
         TM    DS1SCALO,X'01'      ROUNDED UP TO CYLINDER?
         BNO   DSALC1OK            NO
         MVC   0(5,R15),=C'ROUND'
         LA    R15,6(,R15)
DSALC1OK TM    DS1SCALO,X'02'      ALL EXTENTS?
         BNO   DSALC2OK            NO
         MVC   0(3,R15),=C'ALX'
         LA    R15,4(,R15)
DSALC2OK TM    DS1SCALO,X'04'      MAXIMUM SINGLE EXTENT?
         BNO   DSALC4OK            NO
         MVC   0(4,R15),=C'MXIG'
         LA    R15,5(,R15)
DSALC4OK TM    DS1SCALO,X'08'      CONTIGUOUS SPACE?
         BNO   DSALC8OK            NO
         MVC   0(6,R15),=C'CONTIG'
DSALC8OK A     R6,SCRNCOLS         POINT TO NEXT LINE
         SPACE
************************************************************
*                                                          *
*         FORMAT THE SECONDARY ALLOCATION QUANTITY         *
*                                                          *
************************************************************
         SPACE
         MVI   0(R6),X'0C'         PROTECTED LOW INTENSITY
         MVC   1(19,R6),DSLBL13
         MVI   20(R6),X'0D'        PROTECTED HIGH INTENSITY
         A     R6,SCREENSZ
         MVI   22(R6),X'05'        DISPLAY VALUE IN TURQUOISE
         MVC   23(20,R6),22(R6)
         S     R6,SCREENSZ
         SR    R0,R0
         ICM   R0,7,DS1SCALO+1     GET SECONDARY QUANTITY
         MVC   CRE2NDRY,DS1SCALO   SAVE FOR CLONED CREATION
         LA    R15,22(,R6)         POINT TO DISPLAY AREA
         BAS   R14,DSSHO#          FORMAT THE NUMBER
         A     R6,SCRNCOLS         POINT TO NEXT LINE
         AIF   (NOT &ENV390).SMSOK1
         SPACE
**********************************************************************
*                                                          *         *
*         FORMAT THE STORAGE MANAGEMENT CLASSES            *  R44.0  *
*                                                          * JUL2013 *
**********************************************************************
         SPACE
         TM    DS1SMSFG,DS1SMSDS   IS THE DATA SET SMS-MANAGED?
         BNO   DSSMSDON            NO
         MVI   DSSTGCLS,C' '       BLANK THE CLASS FIELDS
         MVC   DSSTGCLS+1(89),DSSTGCLS
         LH    R0,$DSNAME          GET THE DATA SET NAME LENGTH
         ST    R0,DSSMSDSL         PUT INTO PARAMETER
         LA    R2,DSSMSDON         POINT TO THE ERROR ROUTINE
         LINK  EPLOC==CL8'IGWASMS',PARAM=(DSSMSRET,DSSMSRSN,DSSMSDET,  +
               DSSMSDSL,$DSNAME+2,DSSTGCLS,DSSMSDST),VL=1,             +
               ERRET=(R2),MF=(E,DSSMSPRM),SF=(E,DSSMSLNK)
         LA    R1,12
         M     R0,SCRNCOLS
         A     R1,DSOFFSET         ADD OFFSET FOR CENTERING
         A     R1,SCREENBF         POINT TO PRIMARY LINE 14
         LTR   R15,R15             SUCCESS?
         BZ    DSGOTCLS            YES
         MVC   55(8,R1),=CL8'IGWASMS'
         MVC   63(4,R1),=CL4' RC='
         UNPK  67(3,R1),DSSMSRET+3(2)
         TR    67(2,R1),DSHEX-240
         MVC   70(5,R1),=CL5' RSN='
         UNPK  75(3,R1),DSSMSRSN+3(2)
         TR    75(2,R1),DSHEX-240
         MVI   77(R1),C' '
         A     R1,SCREENSZ         POINT TO THE SHADOW LINE
         MVI   54(R1),X'22'        DISPLAY ABEND IN REVERSE RED
         MVC   55(23,R1),54(R1)
         B     DSSMSDON
DSGOTCLS EQU   *
         CLI   DSSTGCLS,C' '       ANY STORAGE CLASS?
         BNH   DSSCDONE            NO
         MVC   68(12,R1),DSSTGCLS  YES, SHOW IT
         A     R1,SCREENSZ
         MVI   68(R1),X'05'        DISPLAY VALUE IN TURQUOISE
         MVC   69(11,R1),68(R1)
         S     R1,SCREENSZ
         MVI   66(R1),X'0D'        PROTECTED HIGH INTENSITY
         MVC   52(14,R1),=CL14'STORAGE CLASS:'
         MVI   51(R1),X'0C'        PROTECTED LOW INTENSITY
         A     R1,SCRNCOLS         POINT TO NEXT LINE
DSSCDONE EQU   *
         CLI   DSMANCLS,C' '       ANY MANAGEMENT CLASS?
         BNH   DSMCDONE            NO
         MVC   68(12,R1),DSMANCLS  YES, SHOW IT
         A     R1,SCREENSZ
         MVI   68(R1),X'05'        DISPLAY VALUE IN TURQUOISE
         MVC   69(11,R1),68(R1)
         S     R1,SCREENSZ
         MVI   66(R1),X'0D'        PROTECTED HIGH INTENSITY
         MVC   49(17,R1),=CL17'MANAGEMENT CLASS:'
         MVI   48(R1),X'0C'        PROTECTED LOW INTENSITY
         A     R1,SCRNCOLS         POINT TO NEXT LINE
DSMCDONE EQU   *
         CLI   DSDATCLS,C' '       ANY DATA CLASS?
         BNH   DSSMSDON            NO
         MVC   68(12,R1),DSDATCLS  YES, SHOW IT
         A     R1,SCREENSZ
         MVI   68(R1),X'05'        DISPLAY VALUE IN TURQUOISE
         MVC   69(11,R1),68(R1)
         S     R1,SCREENSZ
         MVI   66(R1),X'0D'        PROTECTED HIGH INTENSITY
         MVC   55(11,R1),=CL11'DATA CLASS:'
         MVI   54(R1),X'0C'        PROTECTED LOW INTENSITY
DSSMSDON EQU   *
.SMSOK1  ANOP
         SPACE
************************************************************
*                                                          *
*         OBTAIN PDS DIRECTORY STATISTICS                  *
*                                                          *
************************************************************
         SPACE
         CLI   $DDNAME,C'¬'        DDNAME PRESENT?
         BE    DSONSHOW            NO, THAT'S ALL TO SHOW
         CLI   $DDNAME,C'*'        DDNAME PRESENT?
         BE    DSONSHOW            NO, THAT'S ALL TO SHOW
         CLI   $DDNAME,C'$'        DDNAME PRESENT?
         BL    DSONSHOW            NO, THAT'S ALL TO SHOW
         TM    DS1DSORG,DS1DSGPO   PARTITIONED ORGANIZATION?
         BNO   DSONSHOW            NO, THAT'S ALL TO SHOW
         A     R6,SCRNCOLS         POINT TO NEXT LINE
         L     R1,=A(STDIRDCB)     POINT TO THE DCB TEMPLATE
         MVC   DSDIRDCB,0(R1)      LOAD IT
         USING IHADCB,DSDIRDCB
         MVC   DCBDDNAM,$DDNAME    SET FILE NAME INTO DCB
         LA    R0,DSEODIR          GET E-O-F ROUTINE ADDRESS
         STCM  R0,7,DCBEODA        SET INTO DCB
         MVI   SYNADSW,0           NOT NEEDED, BUT JUST TO BE SURE
         MVI   OPEND,X'80'         OPEN PDS DIRECTORY
         OPEN  (DSDIRDCB,INPUT),MF=(E,OPEND)
         TM    STATUS,STABEND      DID OPEN ABEND?
         BO    DSDIRBAD            YES, GO REPORT THIS
         SPACE
         AIF   (NOT &ENVZV2).ITISNT
         TM    DS1SMSFG,DS1PDSE    PDSE?
         BNO   DSTYPED             NO, SKIP PDSE DETAILS
         MVC   DSISITM,DSISITS     PRIME PARAMETER LIST
         USING ISM,DSISITM
         ISITMGD DCB=DSDIRDCB,DATATYPE=YES,MF=(E,DSISITM)
         LA    R2,6
         MH    R2,SCRNCOLS+2
         A     R2,SCREENBF         POINT TO SEVENTH SCREEN LINE
         A     R2,DSOFFSET         (DSORG LINE)
         CLI   ISMDSNVER,0         ANY VERSION NUMBER ASCERTAINED?
         BE    DSITISNT            NO
         MVI   28(R2),C'V'         INDICATE VERSION
         MVC   29(1,R2),ISMDSNVER
         NI    29(R2),X'0F'        ENSURE NUMBER IN EXPECTED RANGE
         TR    29(1,R2),DSHEX      MAKE VERSION MUMBER DISPLAYABLE
         TM    ISMOFLG2,ISMMGENS   GENERATIONS ENABLED?
         BZ    DSITISNT            NO
         MVC   32(8,R2),=CL8'MEM-GENS'
DSITISNT TM    ISMOFLG3,ISMDTREC+ISMDTPGM+ISMDTUNK
         BZ    DSTYPED             PDSE TYPE NOT FLAGGED
         A     R2,SCRNCOLS         NEXT (RECORD FORMAT) LINE
         MVC   30(5,R2),=C'(REC)'
         TM    ISMOFLG3,ISMDTREC
         BO    DSTYPED             GOOD GUESS
         MVC   31(3,R2),=C'PGM'
         TM    ISMOFLG3,ISMDTPGM
         BO    DSTYPED             GOT IT NOW
         MVC   33(3,R2),=C'UNK'
DSTYPED  EQU   *
.ITISNT  ANOP
         SPACE
         SR    R2,R2               ZERO COUNTER
DSGETBLK GET   DSDIRDCB,DSDIRBLK   READ A DIRECTORY BLOCK
         TM    STATUS,STABEND      DID GET ABEND?
         BO    DSEODIR             YES, GO CLOSE THE FILE
         CLI   SYNADSW,X'FF'       I/O ERROR?
         BE    DSEODIR             YES, GO CLOSE THE FILE
         LA    R2,1(,R2)
         ST    R2,DSDIRUSE         INCREMENT USED BLOCK COUNT
         LH    R14,DSDIRBLK        GET BLOCK USED-BYTE-COUNT
         CH    R14,=H'14'          USED BYTE COUNT LESS THAN MINIMUM?
         BL    DSGETBLK            YES, IGNORE BLOCK (BUG WITH PDSE)
         CH    R14,=H'256'         USED BYTE COUNT MORE THAN MAXIMUM?
         BH    DSGETBLK            YES, IGNORE BLOCK (BUG WITH PDSE)
         BCTR  R14,0
         BCTR  R14,0               SUBTRACT 2 FOR COUNTER HALFWORD
         LA    R4,DSDIRBLK+2       POINT TO FIRST MEMBER IN BLOCK
DSNXTMEM CLC   DSLASTNM(11),0(R4)  END OF THIS DIRECTORY?
         BE    DSREADLP            YES, NO MORE MEMBER
         LA    R0,1
         A     R0,DSDIRMEM         INCREMENT MEMBER COUNT
         ST    R0,DSDIRMEM
         IC    R5,11(,R4)          GET USER DATA HALFWORD COUNT
         SLL   R5,27               SHIFT OUT NON-COUNT BITS
         SRL   R5,26               CONVERT TO NUMBER OF USER BYTES
         LA    R5,12(,R5)          GET TOTAL BYTES USED BY ENTRY
         SR    R14,R5              UPDATE BYTES-TO-DO-IN-THIS-BLOCK
         BNP   DSGETBLK            IF ZERO GET ANOTHER BLOCK
         LA    R4,0(R5,R4)         POINT TO NEXT MEMBER NAME
         B     DSNXTMEM
DSREADLP GET   DSDIRDCB,DSDIRBLK   READ A DIRECTORY BLOCK
         TM    STATUS,STABEND      DID GET ABEND?
         BO    DSEODIR             YES, GO CLOSE THE FILE
         CLI   SYNADSW,X'FF'       I/O ERROR?
         BE    DSEODIR             YES, GO CLOSE THE FILE
         LA    R2,1(,R2)
         B     DSREADLP            DROP THROUGH FREE DIRECTORY BLOCKS
DSEODIR  ST    R2,DSDIRALC         SAVE THE TOTAL DIREXTORY BLOCK COUNT
         MVI   CLOSED,X'80'        OPEN PDS DIRECTORY
         CLOSE DSDIRDCB,MF=(E,CLOSED)
         FREEPOOL DSDIRDCB         FREE BUFFERS
         TM    STATUS,STABEND      DID GET (OR CLOSE) ABEND?
         BO    DSDIRBAD            YES, GO REPORT THIS
         CLI   SYNADSW,0           ANY DIRECTORY I/O ERROR?
         BE    DSSHODIR            NO, GO SHOW THE RESULTS
         TR    SYNADSW,PERIODS     SHOULD NOT BE NEEDED
         MVI   0(R6),X'0D'         PROTECTED HIGH INTENSITY
         MVC   1(78,R6),SYNADMSG   DISPLAY I/O ERROR DETAILS
         MVI   79(R6),X'0C'        PROTECTED LOW INTENSITY
         A     R6,SCREENSZ
         MVI   0(R6),X'07'         DISPLAY DETAILS IN WHITE
         MVC   1(79,R6),0(R6)
         B     DSONSHOW            THAT'S ALL TO SHOW
         SPACE
************************************************************
*                                                          *
*         FORMAT THE NUMBER OF MEMBERS                     *
*                                                          *
************************************************************
         SPACE
DSSHODIR MVI   0(R6),X'0C'         PROTECTED LOW INTENSITY
         MVC   1(19,R6),DSLBL14
         MVI   20(R6),X'0D'        PROTECTED HIGH INTENSITY
         A     R6,SCREENSZ
         MVI   22(R6),X'05'        DISPLAY VALUE IN TURQUOISE
         MVC   23(20,R6),22(R6)
         S     R6,SCREENSZ
         L     R0,DSDIRMEM         GET MEMBER COUNT
         LA    R15,22(,R6)         POINT TO DISPLAY AREA
         BAS   R14,DSSHO#          FORMAT THE NUMBER
         A     R6,SCRNCOLS         POINT TO NEXT LINE
         SPACE
************************************************************
*                                                          *
*         FORMAT THE NUMBER OF USED DIRECTORY BLOCKS       *
*                                                          *
************************************************************
         SPACE
         MVI   0(R6),X'0C'         PROTECTED LOW INTENSITY
         MVC   1(19,R6),DSLBL15
         MVI   20(R6),X'0D'        PROTECTED HIGH INTENSITY
         A     R6,SCREENSZ
         MVI   22(R6),X'05'        DISPLAY VALUE IN TURQUOISE
         MVC   23(20,R6),22(R6)
         S     R6,SCREENSZ
         L     R0,DSDIRUSE         GET USED DIRECTORY BLOCK COUNT
         LA    R15,22(,R6)         POINT TO DISPLAY AREA
         BAS   R14,DSSHO#          FORMAT THE NUMBER
         A     R6,SCRNCOLS         POINT TO NEXT LINE
         SPACE
************************************************************
*                                                          *
*         FORMAT THE TOTAL NUMBER OF DIRECTORY BLOCKS      *
*                                                          *
************************************************************
         SPACE
         MVI   0(R6),X'0C'         PROTECTED LOW INTENSITY
         MVC   1(19,R6),DSLBL16
         MVI   20(R6),X'0D'        PROTECTED HIGH INTENSITY
         A     R6,SCREENSZ
         MVI   22(R6),X'05'        DISPLAY VALUE IN TURQUOISE
         MVC   23(20,R6),22(R6)
         S     R6,SCREENSZ
         L     R0,DSDIRALC         GET NUMBER OF DIRECTORY BLOCKS
         ST    R0,CREDIR           SAVE FOR CLONED CREATION
         LA    R15,22(,R6)         POINT TO DISPLAY AREA
         BAS   R14,DSSHO#          FORMAT THE NUMBER
         TM    DS1SMSFG,DS1PDSE    IS MEMBER LIST FOR A PDSE?
         BZ    DSONSHOW            NO, THAT'S ALL TO SHOW
         MVC   22(9,R6),=CL9'UNLIMITED'
         B     DSONSHOW            THAT'S ALL TO SHOW
         SPACE
************************************************************
*                                                          *
*         DISPLAY DCB ABEND DETAILS                        *
*                                                          *
************************************************************
         SPACE
DSDIRBAD MVI   20(R6),X'0D'        PROTECTED HIGH INTENSITY
         A     R6,SCREENSZ
         MVI   22(R6),X'22'        DISPLAY ABEND IN REVERSE RED
         MVC   23(35,R6),22(R6)
         S     R6,SCREENSZ
         MVC   23(7,R6),=CL7'ABEND S'
         UNPK  30(7,R6),KOUNT
         TR    30(6,R6),DSHEX-240
         MVI   33(R6),C'-'         SHOW SXXX-XXX
         MVC   36(21,R6),=CL21' PROCESSING DIRECTORY'
         NI    STATUS,255-STABEND  RESET DCB ABEND FLAG
         SPACE
************************************************************
*                                                          *
*         DISPLAY THE RESULTS                              *
*                                                          *
************************************************************
         SPACE
DSONSHOW OI    STATUS10,$10ASP     ALTERNATE SCREEN SIZE PROMPT PANEL
         MVC   REVPOS,DSHOME       LOAD INSERT CURSOR DATA STREAM
         XASAM31
         L     R15,=A(REVCOMM)     NO PARAMETER LIST PASSED
         BASR  R14,R15             DISPLAY SCREEN AND RECEIVE INPUT
         XASAM24
         TM    STATUS6,HELSW       INVOKED AS FULLSCREEN HELP?
         BO    *+8                 YES, NOT SHOWING A PICTURE
         NI    PICFLAGS,255-PICOK  REDRAW OF ANY PICTURE REQUIRED
         NI    STATUS10,255-$10ASP ALTERNATE SIZED PROMPT COMPLETE
         OI    STATUS7,$7RESHO     TELL REVCOMM TO RESTORE SCREEN SIZE
         OI    STATUS10,$10CDR     TELL ISPF TO RESEND WHOLE SCREEN
         OI    STATUS4,$4REFR      TELL CALLER TO PAINT WHOLE SCREEN
         SPACE
************************************************************
*                                                          *
*         TERMINATE AND EXIT                               *
*                                                          *
************************************************************
         SPACE
         LA    R0,$DSCBWKL         GET DYNAMIC STORAGE SIZE
         LR    R1,R13              POINT TO DYNAMIC AREA TO BE FREED
         L     R2,DSSAVERC         LOAD RETURN CODE TO BE USED
         L     R13,4(,R13)         POINT TO PREVIOUS SAVE AREA
         OI    11(R13),X'01'       INVALIDATE FORWARD POINTER
         FREEMAIN R,LV=(0),A=(1)   FREE @DSCBWRK
         XASAM31
         LR    R15,R2              SET RETURN CODE
         L     R14,12(,R13)        RESTORE RETURN ADDRESS
         LM    R0,R12,20(R13)      RESTORE OTHER REGISTERS
         BR    R14                 RETURN TO CALLER
         SPACE
         SPACE
************************************************************
*                                                          *
*         FORMAT A NUMBER                                  *
*                                                          *
************************************************************
         SPACE
DSSHO#   CVD   R0,DOUBLE           GET THE NUMBER IN PACKED DECIMAL
         MVC   0(10,R15),DSED9     LOAD EDIT MASK
         ED    0(10,R15),DOUBLE+3  LOAD NUMBER INTO DISPLAY AREA
DSSHO#LP CLI   0(R15),C' '         LEADING BLANK?
         BNER  R14                 NO, FORMAT COMPLETE
         MVC   0(10,R15),1(R15)    YES, SHUFFLE UP A BYTE
         B     DSSHO#LP
         SPACE
         SPACE
************************************************************
*                                                          *
*         DISPLAY THE DATA SET VTOC ENTRY IN HEX           *
*                                                          *
************************************************************
         SPACE
DSHODSCB STM   R14,R12,12(R13)     SAVE REGISTERS
         OC    DSDIRBLK(1),DS1DSIND ACCUMULATE FLAGS
         L     R2,DSBLUESZ         GET SIZE OF BLUE AREA REMAINING
         L     R6,SHADOWBF         POINT PAST PRIMARY BUFFER
         SR    R6,R2               POINT TO NEXT AVAILABLE BLUE LINE
         A     R6,DSOFFSET         ADD OFFSET FOR CENTERING
         SR    R0,R0               CLEAR FOR INSERT
         LA    R3,DSF1TAB          POINT TO FORMAT TABLE
         TM    0(R1),X'F0'         FORMAT-1 OR FORMAT-8 DSCB?
         BO    DSLINELP            YES
         LA    R3,DSF9TAB
         CLI   0(R1),X'09'         FORMAT-9 DSCB?
         BE    DSLINELP            YES
         LA    R3,DSF3TAB          NO, MUST BE FORMAT-3 DSCB
DSLINELP S     R2,SCRNCOLS         ROOM FOR A LINE?
         BM    DSHOEXIT            NO, SKIP IT
         ST    R2,DSBLUESZ         YES, UPDATE SIZE LEFT
         LA    R4,2(,R6)           POINT TO LINE DATA START
DSFLDLP  IC    R0,0(,R3)           LOAD FIELD LENGTH
         CLI   0(R3),X'FE'         END-OF-LINE FLAG?
         LA    R3,1(,R3)           POINT TO NEXT ITEM
         BE    DSNEXTLN            YES, LINE COMPLETE
DSBYTELP UNPK  0(3,R4),0(2,R1)     UNPACK A BYTE
         LA    R1,1(,R1)           POINT TO NEXT DSCB DATA BYTE
         TR    0(2,R4),DSHEX-240   SHOW TWO HEX DIGITS FOR BYTE'S DATA
         MVI   2(R4),C' '          ERASE GARBAGE
         LA    R4,2(,R4)           POINT PAST DIGITS JUST FORMATTED
         BCT   R0,DSBYTELP         GO PROCESS NEXT BYTE OF THIS FIELD
         LA    R4,1(,R4)           LEAVE A BLANK BETWEEN FIELDS
         B     DSFLDLP             GO PROCESS NEXT FIELD
DSNEXTLN A     R6,SCRNCOLS         POINT TO NEXT SCREEN LINE
         CLI   0(R3),X'FF'         FINAL FINISH?
         BNE   DSLINELP            NO, GO FORMAT ANOTHER LINE
         S     R2,SCRNCOLS         LEAVE A BLANK LINE BETWEEN DSCBS
         ST    R2,DSBLUESZ         UPDATE SIZE LEFT
DSHOEXIT LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER
         SPACE
         DROP  R13                 @DSCBWRK
         DROP  R10,R11             REVDSCB
         SPACE
         TITLE '  R E V D S C B   -   S T A T I C   A R E A  '
DSHW80   DC    H'80'
DSHOME   DC    AL1(SBA,C' ',C' ',IC)
DSHEX    DC    C'0123456789ABCDEF' HEXADECIMAL DIGIT TRANSLATE TABLE
         SPACE
         AIF   (NOT &ENVZV2).ITISNTS
DSISITS  ISITMGD DCB=0,DATATYPE=YES,MF=L
DSISLEN  EQU   *-DSISITS
.ITISNTS ANOP
         SPACE
DSLBL01  DC    CL19'     DATA SET NAME:'
DSLBL02  DC    CL19'     VOLUME SERIAL:'
DSLBL03  DC    CL19'      ORGANIZATION:'
DSLBL04  DC    CL19'     RECORD FORMAT:'
DSLBL05  DC    CL19'     RECORD LENGTH:'
DSLBL06  DC    CL19'      BLOCK LENGTH:'
DSLBL07  DC    CL19'        KEY LENGTH:'
DSLBL08  DC    CL19'        INDICATORS:'
DSLBL09  DC    CL19' NUMBER OF EXTENTS:'
DSLBL10  DC    CL19'       USED TRACKS:'
DSLBL11  DC    CL19'  ALLOCATED TRACKS:'
DSLBL12  DC    CL19'   ALLOCATION TYPE:'
DSLBL13  DC    CL19'SECONDARY QUANTITY:'
DSLBL14  DC    CL19' NUMBER OF MEMBERS:'
DSLBL15  DC    CL19'   USED DIR BLOCKS:'
DSLBL16  DC    CL19'  TOTAL DIR BLOCKS:'
DSLBL17  DC    CL19'   FILE SEQ NUMBER:'
DSLBLCD  DC    CL11'   CREATED:'
DSLBLRD  DC    CL11'REFERENCED:'
DSLBLXD  DC    CL11'EXPIRATION:'
DSTITLE  DC    CL20'DATA SET INFORMATION'
DSTITLE2 DC    CL8'DELETION'
DSINFO   DC    CL7'REVINFO'
DSIREL   DC    CL5'R&REL'
ORGTYPES DC    CL16'ISPSDACX****PO**'
DSED9    DC    XL10'40202020202020202120'
DSALCTYP DC    CL(4*8)'ABSTR   BLOCK   TRACK   CYLINDER'
DSDELMSG DC    CL32'PRESS <ENTER> TO DELETE DATA SET'
         DC    CL24' OR ANY PF KEY TO CANCEL'
         SPACE
DSF1TAB  EQU   *                   FORMAT-1 DSCB FIELD LENGTHS TABLE
         DC    AL1(1,6,2,3,3,1,1,1,13,X'FE')
         DC    AL1(3,1,3,2,1,1,2,2,1,2,1,4,3,2,2,X'FE')
         DC    AL1(10,10,10,5,X'FE')
         DC    AL1(5,X'FE',X'FF')
         SPACE
DSF3TAB  EQU   *                   FORMAT-3 DSCB FIELD LENGTHS TABLE
         DC    AL1(4,10,10,10,X'FE')
         DC    AL1(10,1,10,10,X'FE')
         DC    AL1(10,10,10,X'FE')
         DC    AL1(10,10,10,X'FE')
         DC    AL1(10,5,X'FE',X'FF')
         SPACE
DSF9TAB  EQU   *                   FORMAT-9 DSCB FIELD LENGTHS TABLE
         DC    AL1(1,1,1,1,8,8,6,X'FE')
         DC    AL1(18,1,1,5,5,5,X'FE')
         DC    AL1(5,5,5,5,5,5,5,X'FE')
         DC    AL1(20,X'FE')
         DC    AL1(19,5,X'FE',X'FF')
         SPACE
DSFW15   DC    F'15'
         SPACE
SEEKDSCB CAMLST SEEK,2,3,4
         ORG   SEEKDSCB+2
         DC    AL1(8)              EADSCB=OK AS FROM Z/OS 1.10
         ORG
DSLASTNM DC    FL8'-1',AL4(0)
         SPACE
         DC    0D'0'
         LTORG
         SPACE
         DC    0D'0'
*   DSCBS PER TRACK, TRACKS PER CYLINDER, NAME
DSKTABLE DC    F'52,020',CL8'(F6421) ' 30502085  (FUJITSU DASD)
         DC    F'16,010',CL8'(2311)  '     2001
         DC    F'63,200',CL8'(2301)  '     2002  DRUM
         DC    F'17,010',CL8'(2303)  '     2003  DRUM
*        DC    F'22,046',CL8'(2302)  '     2004
         DC    F'45,015',CL8'(9345)  ' 30102004
         DC    F'08,010',CL8'(2321)  '     2005  DATA CELL
         DC    F'18,008',CL8'(2305-1)'     2006
         DC    F'34,008',CL8'(2305-2)' 30502007
         DC    F'25,020',CL8'(2314)  ' 30E02008
         DC    F'39,019',CL8'(3330)  ' 30502009
         DC    F'22,012',CL8'(3340)  ' 3040200A
         DC    F'47,030',CL8'(3350)  ' 3050200B
         DC    F'51,012',CL8'(3375)  ' 3010200C
         DC    F'39,019',CL8'(3330-1)' 3050200D
         DC    F'53,015',CL8'(3380)  ' 3010200E
         DC    F'50,015',CL8'(3390)  ' 3010200F
         SPACE
         DC    0D'0'               END OF CSECT
         TITLE '  R E V D S C B   -   D Y N A M I C   A R E A  '
@DSCBWRK DSECT
         DS    18F                 REGISTER SAVE AREA
DSVLPCTL DS    2F                  VOLUME LOOP CONTROL STATUS
DSWK1    DS    XL16                FOUR WORDS FOR PLIST
DSOFFSET DS    F                   LEFT EDGE DISPLAY OFFSET
DSTOTEXT DS    F                   EXTENT COUNT ACCUMULATOR
DSTOTUSE DS    F                   USED TRACK COUNT ACCUMULATOR
DSTOTALC DS    F                   ALLOCATED TRACK COUNT ACCUMULATOR
DSDIRMEM DS    F                   PDS MEMBER COUNT
DSDIRUSE DS    F                   PDS DIRECTORY BLOCKS USED
DSDIRALC DS    F                   PDS DIRECTORY BLOCKS ALLOCATED
DSF1KEY  DS    XL44                AREA FOR DSCB KEY
DSF4KEY  DS    XL44                AREA FOR DSCB KEY
DSVOL    DS    XL6                 AREA FOR VOLUME SERIAL
DSTPC    DS    H                   TRACKS PER CYLINDER
DSLOCBF  DS    0D,XL265            LOCATE RETURN AREA
DSDSCB   DS    0D,XL140            OBTAIN RETURN AREA
         ORG   DSDSCB
         IECSDSL1 (3)
         ORG
         AIF   (NOT &ENVZV2).ITISNTL
         DS    0F
DSISITM  DS    XL(DSISLEN)         ISITMGD PARAMETER LIST
.ITISNTL ANOP
DSBLUESZ DS    F                   SIZE OF SCREEN AFTER LINE 24
DSSAVERC DS    F                   RETURN CODE SAVE AREA
NEWDSCB# DS    H
JMPLBL3# DS    H
DSNXTPTR DS    XL5                 POINT TO NEXT DSCB TO OBTAIN
         DS    0F
DSDIRDCB DS    XL(DIRDCBL)         PDS DIRECTORY DCB
         DS    0D
DSDIRBLK DS    XL256               DIRECTORY BLOCK BUFFER
         AIF   (NOT &ENV390).SMSOK2
         ORG   DSDIRBLK
DSSMSLNK LINK  ERRET=1,SF=L        LINK PARAMETER LIST
DSSMSPRM DS    7A                  CALL PARAMETER LIST
DSSMSRET DS    F                   RETURN CODE
DSSMSRSN DS    F                   REASON CODE
DSSMSDET DS    2F                  PROBLEM DETERMINATION DATA
DSSMSDSL DS    F                   DATA SET NAME LENGTH
DSSMSDST DS    F                   DATA SET TYPE LENGTH
DSSTGCLS DS    CL30                SMS STORAGE CLASS
DSMANCLS DS    CL30                SMS MANAGEMENT CLASS
DSDATCLS DS    CL30                SMS DATA CLASS
         ORG
.SMSOK2  ANOP
         DS    0D                  END OF DSECT
$DSCBWKL EQU   *-@DSCBWRK
         SPACE
         TITLE '  R E V T S O  '
**********************************************************************
*                                                          *         *
*         REVIEW TSO COMMAND SHELL                         *  R43.0  *
*                                                          * FEB2010 *
**********************************************************************
         SPACE
**********************************************************************
*                                                                    *
*        ADMINISTER SAVED TSO COMMANDS AND PASS SELECTED             *
*        TSO COMMAND TO REVCOMM FOR PROCESSING.                      *
*                                                                    *
**********************************************************************
         SPACE
**********************************************************************
*                                                                    *
* REGISTERS ON ENTRY: R9 -> @DATA                                    *
*                     R13-> SAVE AREA                                *
*                     R14-> RETURN ADDRESS                           *
*                     R15-> REVTSO                                   *
*                                                                    *
* DURING PROCESSING:  R11-> REVTSO   (LOCAL BASE)                    *
*                     R13-> @TSOWK   (LOCAL GETMAINED AREA)          *
*                                                                    *
* RETURN CODES:       R15 = 0  PROCESSING COMPLETE                   *
*                     R15 = 16 INSUFFICIENT STORAGE AVAILABLE        *
*                                                                    *
**********************************************************************
         EJECT
REVTSO   RSECT
REVTSO   AMODE 31
         B     @TSO-*(,R15)
         DC    AL1(7),CL7'REVTSO'
@TSO     STM   R14,R12,12(R13)
         LR    R11,R15             SET BASE
         LR    R2,R1               COPY SAVED COMMANDS POINTER
         USING REVTSO,R11
         LA    R0,$TSOWKL
         MVI   GETMNTRC,76         TRACK GETMAIN IN CASE OF FAILURE
         GETMAIN RC,LV=(0),LOC=(31,64)
         LTR   R15,R15             LOCAL WORKING STORAGE ACQUIRED?
         BZ    @TSOINIT            YES
         MVI   MSG,123             REQUEST ABORTED - STORAGE FULL
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         LA    R15,16              INDICATE BAD RESULT
         BR    R14                 RETURN TO CALLER
         SPACE
@TSOINIT LA    R15,$TSOWKL
         LR    R14,R1
         SR    R3,R3
         MVCL  R14,R2              CLEAR WORKING STORAGE
         ST    R1,8(,R13)          CHAIN SAVE AREAS
         ST    R13,4(,R1)
         LR    R13,R1              POINT TO GETMAINED AREA
         USING @TSOWK,R13
         OI    STATUS13,$13TSO     FLAG ACTIVE COMPONENT
         MVC   COMPON,@REVTSO      FLAG COMPONENT FOR HELP
         MVC   $DDNAME,#REVTSO     LOAD SOMETHING FOR SWAP LIST
         ST    R2,TS0PROF@         SAVE INPUT PROFILE DATA ADDRESS
         LA    R3,240*10           LOAD INPUT PROFILE DATA LENGTH
         LA    R0,TS0CMDS          POINT TO LOCAL AREA
         LR    R1,R3               GET ITS LENGTH
         MVCL  R0,R2               INITIALIZE SAVED COMMANDS ARRAY
         L     R15,=A(REVNAME)     NO
         BASR  R14,R15             ATTEMPT TO NAME THE SESSION
         SPACE
************************************************************
*                                                          *
*         CONSTRUCT AND DISPLAY PANEL                      *
*                                                          *
************************************************************
         SPACE
TS0RESHO NI    STATUS4,255-$4REFR  RESET REPAINT FLAG
         L     R15,SCRNCOLS        GET GET SCREEN WIDTH
         LR    R0,R15              COPY IT
         AR    R15,R15             DOUBLE IT
         AR    R15,R15             QUADRUPLE IT
         L     R14,SHADOWBF        POINT TO THE SHADOW BUFFER
         LA    R1,X'07'            INTERNAL CODE FOR WHITE
         SLL   R1,24               SET PAD AND ZERO SOURCE LENGTH
         MVCL  R14,R0              MAKE FIRST FOUR LINES WHITE
         L     R15,SCREENWK        POINT PAST SHADOW BUFFER
         SR    R15,R14             GET LENGTH OF REST OF SCREEN
         LA    R1,X'01'            INTERNAL CODE FOR BLUE
         SLL   R1,24               SET PAD AND ZERO SOURCE LENGTH
         MVCL  R14,R0              MAKE REST OF SCREEN BLUE
         SPACE
         L     R14,SCREENBF        POINT TO PRIMARY SCREEN BUFFER
         MVI   0(R14),C'-'         FILL TOP LINE WITH DASHES
         MVC   1(256,R14),0(R14)
         MVI   0(R14),FLDOUTHI     HIGH INTENSITY FOR HEADING
         LR    R15,R0              GET THE SCREEN WIDTH
         SRA   R15,1               HALVE IT
         LA    R15,L'RFETSO/2(,R15)
         AR    R14,R0              POINT TO THE SECOND LINE
         LR    R1,R14              POINT TO THE SECOND LINE
         LR    R3,R14              POINT TO THE SECOND LINE
         SR    R1,R15              LOCATE AND LOAD HEADING
         MVC   0(L'RFETSO,R1),RFETSO
         L     R15,SCREENSZ        GET SIZE OF SCREEN
         SR    R15,R0              GET SIZE TO END OF SCREEN
         LA    R1,C' '
         SLL   R1,24               SET PAD AND ZERO SOURCE LENGTH
         MVCL  R14,R0              BLANK THE REST OF THE SCREEN
         MVC   1(33,R3),=CL33'ENTER TSO COMMAND OR CLIST BELOW:'
         AR    R3,R0               POINT TO THE THIRD LINE
         AR    R3,R0               POINT TO THE FOURTH LINE
         MVC   1(4,R3),TS0ARROW    SUPPLY ARROW
         MVI   5(R3),FLDINLO       LOW INTENSITY FOR INPUT
         MVI   6(R3),0             NULLS FOR INPUT FIELD
         MVC   7(233,R3),6(R3)
         MVI   240(R3),FLDOUTLO    TERMINATE INPUT FIELD
         LA    R14,6(,R3)          POINT TO INPUT FIELD
         ST    R14,TS0ECHO@        SAVE ITS ADDRESS
         A     R3,SCREENSZ         POINT TO ITS SHADOW
         MVI   6(R3),X'34'         GREEN UNDERSCORE FOR INPUT FIELD
         MVC   7(233,R3),6(R3)
         SPACE
         LA    R3,12
         MR    R2,R0
         A     R3,SCREENBF         POINT TO LINE 13
         LR    R2,R3               POINT TO LINE 13
         A     R2,SCREENSZ         POINT TO LINE 13 SHADOW
         LA    R1,10               GET SAVED COMMAND COUNT
         LA    R5,TS0CMDS          POINT TO THE SAVED COMMANDS
TS0LOOP1 MVI   0(R3),FLDINLO       MAKE COMMANDS TAB-SELECTABLE
         MVI   2(R3),FLDOUTLO
         MVC   3(2,R3),TS0ARROW+2  SUPPLY COMMAND POINTER
         MVI   3(R2),X'05'         COLOUR IT TURQUOISE
         MVI   4(R2),X'05'
         MVC   6(234,R3),0(R5)     COPY THE SAVED COMMAND
         AR    R3,R0               POINT TO THE NEXT LINE
         AR    R2,R0               POINT TO ITS SHADOW
         LA    R5,240(,R5)         POINT TO NEXT SAVED COMMAND
         MVI   0(R3),C' '          CLEAR OVERFLOW FROM LINE BEFORE
         MVC   1(159,R3),0(R3)
         BCT   R1,TS0LOOP1
         SPACE
TS0PRMPT L     R1,TS0ECHO@         POINT TO COMMAND INPUT AREA
         ICM   R2,15,TS0RCAL@      ANY COMMAND RECALLED?
         BZ    TS0SHOW             NO
         MVC   0(234,R1),0(R2)     YES, PRIME THE COMMAND AREA
TS0SHOW  L     R2,SCREENBF         POINT TO THE SCREEN BUFFER
         MVC   MSGDSN,1(R2)        SAVE TEXT FOR REVCOMM
         SR    R1,R2               GET ITS SCREEN OFFSET
         LA    R1,1(,R1)           CONVERT OFFSET TO POSITION
         S     R1,SCRNCOLS
         S     R1,SCRNCOLS         GET DYNAMIC AREA POSITION
         ST    R1,REVPOS           SPECIFY CURSOR POSITION
         MVC   REVCSR,TS0BUF       SPECIFY CURSOR FIELD
         L     R15,=A(REVCOMM)     POINT TO TERMINAL I/O ROUTINE
         BASR  R14,R15             DISPLAY TSO COMMAND PANEL
         TM    STATUS4,$4ATTN+$4REFR    NEED TO REPAINT SCREEN?
         BNZ   TS0RESHO            YES, GO DO IT
         SPACE
*   NOTE THAT THE '$4REFR' FLAG WILL BE ON WHENEVER A TSO COMMAND
*   OR OTHER GLOBAL COMMAND WAS EXECUTED BY REVCOMM.  IT IS BY
*   THIS MECHANISM THAT THE LOCAL RESHOW LOGIC IS TRIGGERED WHICH
*   IS HOW COMMANDS ECHOED IN THE MAIN INPUT AREA ARE CLEARED.
         SPACE
************************************************************
*                                                          *
*         VALIDATE, RECORD AND EXECUTE COMMAND INPUT       *
*                                                          *
************************************************************
         SPACE
*         FIND FIRST INPUT CHARACTER OF SIGNIFICANCE
         SPACE
         L     R3,TS0ECHO@         POINT TO INPUT AREA
         LA    R4,233(,R3)         POINT TO LAST INPUT AREA BYTE
         LR    R1,R3               POINT TO INPUT AREA
         L     R14,=A(TABNONBL)    POINT TO TRANSLATE TABLE
TS0NBCHK LR    R15,R4              POINT TO LAST INPUT AREA BYTE
         SR    R15,R1              GET LENGTH CODE OF SIZE TO SCAN
         BM    TS0LFTOK            NO TEXT FOUND
         EX    R15,TS0TRT          LOOK FOR A NON-BLANK
         BZ    TS0LFTOK            AREA IS ALL BLANKS
         CLI   0(R1),NULL          FOUND A NULL?
         BE    TS0LFTOK            YES, NO INPUT TEXT
         CLI   0(R1),C','          LEADING COMMA?
         BNE   TS0LFTIT            NO
         MVI   0(R1),C' '          YES, CHANGE IT TO A BLANK
         B     TS0NBCHK            LOOK FOR NEXT NON-BLANK
         SPACE
TS0TRT   TRT   0(0,R1),0(R14)      <<< EXECUTED >>>
         SPACE
TS0BDCMD MVI   MSG,20              INVALID COMMAND
         B     TS0PRMPT            GO REPROMPT
         SPACE
TS0NSCMD MVI   MSG,176             COMMAND NOT SUPPORTED
         B     TS0PRMPT            GO REPROMPT
         SPACE
*         LEFT JUSTIFY THE INPUT
         SPACE
TS0LFTIT CR    R1,R3               ALREADY LEFT JUSTIFIED?
         BE    TS0LFTOK            YES, SKIP THE MOVE LEFT
         LA    R15,1(,R4)          NO, POINT PAST INPUT AREA
         SR    R15,R1              GET DATA LENGTH TO MOVE LEFT
         LR    R14,R1              POINT TO DATA TO MOVE LEFT
         LR    R0,R3               POINT TO INPUT AREA START
         LA    R1,234              GET INPUT AREA SIZE
         MVCL  R0,R14              LEFT JUSTIFY THE INPUT
TS0LFTOK EQU   *
*   AT THIS POINT THE OPERAND DESCRIPTOR LIST HAS CORRECT DATA
*   PERTAINING TO THE COPY OF THE INPUT STILL IN 'CMDAREA'.
*   IT IS THE COPY OF THE INPUT IN THE PRIMARY SCREEN BUFFER
*   THAT HAS BEEN LEFT-JUSTIFIED.
         SPACE
*         CONVERT TRAILING BLANKS TO NULLS
         SPACE
TS0LOOP2 TM    0(R4),255-C' '      FOUND LAST NON-BLANK?
         BNZ   TS0ENDOK            YES
         MVI   0(R4),NULL          NULLIFY TRAILING BLANKS
         BCT   R4,TS0LOOP2
TS0ENDOK EQU   *
         SPACE
*   AT THIS POINT R3 AND R4 POINT TO THE FIRST AND LAST BYTES OF
*   THE INPUT COMMAND STRING RESPECTIVELY.  IF NO NON-BLANK TEXT
*   IS PRESENT THEN THE R4 CONTENTS PLUS 1 EQUALS THE R3 CONTENTS.
         SPACE
*         DETECT AND PROCESS INTER-OPTION JUMP
         SPACE
         TM    OPD0+6,PRESENT      ANY INPUT ENTERED, EVEN BY PFK?
         BNO   TS0RECAL            NO, CHECK FOR CURSOR RECALL
         SR    R0,R0               YES, TEXT FROM TYPING OR PFK PRESENT
         ST    R0,TS0RCAL@         RESET COMMAND RECALL STATUS
         L     R1,OPD0             POINT TO UPPER-CASED COMMAND NAME
         CLI   0(R1),C'='          INTER-OPTION JUMP?
         BE    TS0EXIT             YES, EXIT FROM THIS OPTION
         SPACE
*         DETECT AND PROCESS THE LOCAL COMMAND 'EXIT'
         SPACE
         CLI   OPD0+5,4            4-BYTE COMMAND?
         BNE   TS0CHK3             NO
         CLC   0(4,R1),=C'EXIT'    EXIT?
         BE    TS0EXIT             YES, LEAVE
         B     TS0ISTSO            NO, TREAT AS TSO COMMAND
         SPACE
*         DETECT AND PROCESS THE LOCAL COMMAND 'END'
         SPACE
TS0CHK3  CLI   OPD0+5,3            3-BYTE COMMAND?
         BNE   TS0CHK6             NO
         CLC   0(3,R1),=C'END'     END?
         BE    TS0EXIT             YES, LEAVE
         SPACE
*         DETECT AND PROCESS THE LOCAL COMMAND 'CAN' OR 'CANCEL'
         SPACE
         CLC   0(3,R1),=C'CANCEL'  CAN?
         BE    TS0CNCL             YES, LEAVE
         B     TS0ISTSO            NO, TREAT AS TSO COMMAND
TS0CHK6  CLI   OPD0+5,6            6-BYTE COMMAND?
         BNE   TS0ISTSO            NO, TREAT AS TSO COMMAND
         CLC   0(6,R1),=C'CANCEL'  CANCEL?
         BNE   TS0ISTSO            NO, TREAT AS TSO COMMAND
         TM    OPD1+6,PRESENT      ANY OPERANDS PRESENT?
         BNO   TS0CNCL             NO, ASSUME LOCAL SUBCOMMAND
TS0ISTSO EQU   *                   YES, TREAT AS TSO COMMAND
         SPACE
*         ENSURE THE NUMBER OF SINGLE QUOTES IS NOT ODD
         SPACE
         MVI   DOUBLE+4,0          CLEAR A BYTE
         L     R14,=A(TABQUOTE)    POINT TO TRANSLATE TABLE
         LR    R1,R3               POINT TO INPUT AREA
TS0QTSCN LR    R15,R4              POINT TO LAST INPUT TEXT BYTE
         SR    R15,R1              GET LENGTH CODE OF SCAN SIZE
         BM    TS0QTCHK            INPUT AREA NOW SCANNED
         EX    R15,TS0TRT          ANY FURTHER QUOTES?
         BZ    TS0QTCHK            NO
         XI    DOUBLE+4,1          YES, FLIP A BIT
         LR    R2,R1               SAVE MOST RECENT QUOTE ADDRESS
         LA    R1,1(,R1)           POINT PAST THE QUOTE
         B     TS0QTSCN            KEEP SCANNING
TS0QTCHK CLI   DOUBLE+4,0          ALL QUOTES PAIRED?
         BE    TS0QTNOD            YES
         MVI   MSG,175             INVALID - UNPAIRED QUOTES
         LR    R1,R2               POINT TO LAST QUOTE
         B     TS0SHOW             GO REPROMPT
TS0QTNOD EQU   *                   QUOTE COUNT NOT ODD
         SPACE
*         VALIDATE THE TSO COMMAND NAME
         SPACE
         LA    R0,8                GET MAXIMUM TSO COMMAND LENGTH
         L     R1,OPD0             POINT TO UPPER-CASED COMMAND NAME
         LH    R15,OPD0+4          GET THE COMMAND LENGTH
         CLI   0(R1),C'%'          LEADING PERCENT SIGN?
         BNE   TS0CHKL2            NO
         BCTR  R15,0               YES, DO NOT COUNT IT
         LA    R1,1(,R1)           POINT PAST THE PERCENT SIGN
TS0CHKL2 CR    R15,R0              IS THE COMMAND TOO LONG?
         BH    TS0BDCMD            YES, DO NOT SAVE IT, REPORT IT
         BCTR  R15,0               GET COMMAND NAME LENGTH CODE
         LTR   R15,R15             STILL VALID LENGTH?
         BM    TS0BDCMD            NO, COMMAND WAS JUST A PERCENT SIGN
         CLI   0(R1),C'Z'          COMMAND NAME STARTS WITH DIGIT?
         BH    TS0BDCMD            YES, DO NOT SAVE IT, REPORT IT
         L     R14,=A(DSNCHARS)    POINT TO TRANSLATE TABLE
         EX    R15,TS0TRT          VALID COMMAND NAME?
         BNZ   TS0BDCMD            NO, DO NOT SAVE IT, REPORT IT
         CLI   OPD0+5,4            COMMAND NAME LENGTH IS 4?
         BNE   TS0SVCMD            NO, PROCEED
         CLC   =C'TEST',0(R1)      IS THE COMMAND 'TEST'?
         BE    TS0NSCMD            YES, THAT IS NOT SUPPORTED
         SPACE
*         RECORD THE COMMAND IN THE COMMAND HISTORY DISPLAY LIST
         SPACE
TS0SVCMD LA    R1,TS0CMDS          POINT TO RECORDED COMMANDS
         LA    R0,9                LOAD THE NUMBER TO CHECK
TS0LOOP3 CLC   0(234,R3),0(R1)     DOES NEW INPUT EQUAL SAVED INPUT?
         BE    TS0DEMOT            YES, FOUND THE ONE TO DISCARD
         LA    R1,240(,R1)         NO, POINT TO THE NEXT ONE
         BCT   R0,TS0LOOP3         KEEP LOOKING
TS0DEMOT LA    R14,9               NOW START THE RECORDING PROCESS
         SR    R14,R0              GET NUMBER TO BE DEMOTED
         BZ    TS0SAVED            NEWEST COMMAND MATCHES TOP ENTRY
         LA    R0,240              GET ARRAY ENTRY SIZE
         LR    R2,R1               POINT TO ENTRY TO OVERLAY
TS0LOOP4 SR    R2,R0               POINT TO ENTRY TO DEMOTE
         MVC   0(234,R1),0(R2)     DEMOTE THE COMMAND
         XC    234(6,R1),234(R1)   CLEAR ANY OTHER RESIDUAL DATA
         LR    R1,R2               POINT TO VACATED ENTRY
         BCT   R14,TS0LOOP4        KEEP SHUFFLING THE COMMANDS DOWN
         MVC   0(234,R1),0(R3)     RECORD THE NEWEST COMMAND INPUT
         XC    234(6,R1),234(R1)   CLEAR ANY OTHER RESIDUAL DATA
TS0SAVED EQU   *
         SPACE
*         PREPARE THE SCREEN FOR TSO COMMAND TERMINAL I/O
         SPACE
         LA    R1,7
         M     R0,SCRNCOLS
         BCTR  R1,0
         A     R1,SCREENBF         POINT TO LAST COLUMN OF LINE 7
         MVI   0(R1),FLDINLO       SUPPLY INPUT ATTRIBUTE BYTE
         LA    R0,1(,R1)           POINT TO FIRST COLUMN OF LINE 8
         L     R1,SHADOWBF
         SR    R1,R0               GET LENGTH TO END OF SCREEN
         STM   R0,R1,DOUBLE        SAVE FOR LATER
         SR    R15,R15             ZERO PAD AND SOURCE LENGTH
         MVCL  R0,R14              NULL OUT REST OF SCREEN
         LM    R0,R1,DOUBLE
         A     R0,SCREENSZ         POINT TO SHADOW
         MVCL  R0,R14              NULL OUT ITS SHADOW AS WELL
         LA    R1,5
         M     R0,SCRNCOLS
         LA    R1,1(,R1)           CONVERT OFFSET TO POSITION
         ST    R1,REVPOS           SPECIFY CURSOR POSITION
         MVC   REVCSR,TS0BUF       SPECIFY CURSOR FIELD
         OI    STATUS10,$10CDL     SUPPRESS NORMAL INPUT
         L     R15,=A(REVCOMM)     POINT TO TERMINAL I/O ROUTINE
         BASR  R14,R15             MOVE THE CURSOR FOR LINE MODE INPUT
         STIMER WAIT,BINTVL==F'10' LET TPUT FINISH BEFORE STLINENO
         SPACE
*         PROCESS THE REQUESTED TSO COMMAND
         SPACE
         MVC   CMDAREA(4),TS0TSO   SUPPLY TSO GLOBAL COMMAND NAME
         LA    R1,1(,R4)           POINT PAST LAST NON-BLANK
         SR    R1,R3               GET COMMAND TEXT LENGTH
         LA    R0,3(,R1)           COUNT GLOBAL COMMAND PREFIX
         ST    R0,CMDLEN           SAVE LENGTH CODE FOR PARSING
         LA    R15,C' '            GET PAD CHARACTER
         SLL   R15,24              PROMOTE TO PAD BYTE
         OR    R1,R15              GATE INTO SOURCE LENGTH REGISTER
         LR    R0,R3               POINT TO SOURCE
         LA    R14,CMDAREA+4       POINT TO TARGET
         LA    R15,256-4           GET TARGET LENGTH
         MVCL  R14,R0              LOAD CONSTRUCTED COMMAND TEXT
         ST    R15,TS0RCAL@        RESET COMMAND RECALL STATUS
         OI    STATUS4,$4CMD       TELL REVCOMM TO SKIP TERMINAL I/O
         STLINENO LINE=8,MODE=OFF  TURN OFF FULLSCREEN
         NI    MODE,255-MD_FS      FULL SCREEN MODE NOW OFF
         L     R15,=A(REVCOMM)     POINT TO TERMINAL I/O ROUTINE
         BASR  R14,R15             PROCESS TSO COMMAND
         B     TS0RESHO            GO REPAINT SCREEN
         SPACE
*         DETECT AND PROCESS CURSOR-SELECTED COMMAND RECALL
         SPACE
*   THE TWO SITUATIONS WHICH GET TO HERE ARE:
*   (1) THERE IS NO TEXT INPUT IN WHICH CASE A SAVED COMMAND MAY
*       BE CURSOR-SELECTED FOR RECALL.
*   (2) A SAVED COMMAND WAS RECALLED BY CURSOR SELECTION, AND IS
*       NOW DUE FOR EXECUTION WITHOUT CHANGE FROM ITS SAVED FORM.
*
*   CASE (2) MUST BE CHECKED FOR BEFORE PROCESSING RECALL-BY-CURSOR.
*
*   FOR CASE (2) 'TS0RCAL@' WILL CONTAIN THE SOURCE ADDRESS OF THE
*   SAVED COMMAND WHICH SHOULD NOW BE RE-EXECUTED, AND R3 AND R4
*   POINT TO THE FIRST AND LAST BYTES RESPECTIVELY OF THE MAIN
*   PANEL INPUT AREA COPY OF THE RECALLED COMMAND TEXT.
*
*   ONLY COMMANDS WHICH ARE NOT LOCALLY RECOGNIZED AS GLOBAL OR
*   INVALID COMMANDS CAN BE SAVED (AND THEREFORE RECALLED) SO
*   THOSE VALIDATION CHECKS CAN BE SKIPPED FOR RECALLED COMMANDS.
*
*   SO, THE ONLY WORK TO BE DONE FOR CASE (2) IS TO FORM THE TSO
*   COMMAND STRING AND PASS IT TO REVCOMM FOR PROCESSING, AFTER
*   PROMOTING IT TO THE TOP OF THE SAVED COMMANDS ARRAY.
         SPACE
TS0RECAL ICM   R1,15,TS0RCAL@      ANY COMMAND PRE-PRIMED?
         BZ    TS0CSRCK            NO, GO CHECK FOR RECALL-BY-CURSOR
**       CLC   0(234,R1),0(R3)     RECALLED COMMAND STILL PRESENT?
**       BE    TS0SVCMD            YES, RECALLED COMMAND UNCHANGED
**  OR, MORE EFFICIENTLY...
         CLI   0(R3),NULL          RECALLED COMMAND STILL PRESENT?
         BNE   TS0SVCMD            YES, RECALLED COMMAND UNCHANGED
         SR    R0,R0               NO, RECALLED COMMAND WAS CLEARED
         ST    R0,TS0RCAL@         RESET COMMAND RECALL STATUS
         B     TS0RESHO            JUST RESHOW THE PANEL
         SPACE
*   NOW DEAL WITH CASE (1) DESCRIBED ABOVE.
         SPACE
TS0CSRCK ICM   R1,3,DYN_CSR        CURSOR IN DYNAMIC AREA?
         BZ    TS0RESHO            NO, JUST RESHOW THE PANEL
         BCTR  R1,0                YES, CONVERT IT TO AN OFFSET
         SR    R0,R0               CLEAR FOR DIVIDE
         D     R0,SCRNCOLS         CONVERT TO RELATIVE LINE NUMBER
         SH    R1,=H'10'           MAKE RELATIVE TO FIRST SAVE LINE
         BM    TS0RESHO            CURSOR BEFORE SAVE LINES
         CH    R1,=H'10'           CURSOR ON A SAVE LINE?
         BNL   TS0RESHO            NO, CURSOR AFTER SAVE LINES
         LA    R0,240              YES, GET ARRAY ENTRY SIZE
         MR    R0,R0               GET SELECTED COMMAND OFFSET
         LA    R1,TS0CMDS(R1)      POINT TO SELECTED COMMAND
         CLI   0(R1),NULL          ANY COMMAND SAVED THERE?
         BE    TS0PRMPT            NO, NO RECALL TO PERFORM
         ST    R1,TS0RCAL@         YES, SAVE RECALLED COMMAND ADDRESS
         B     TS0PRMPT            GO PROMPT WITH COMMAND PRIMED
         SPACE
************************************************************
*                                                          *
*         TERMINATE                                        *
*                                                          *
************************************************************
         SPACE
TS0EXIT  L     R2,TS0PROF@         LOAD INPUT PROFILE DATA ADDRESS
         LA    R3,240*10           LOAD INPUT PROFILE DATA LENGTH
         LA    R0,TS0CMDS          POINT TO LOCAL AREA
         LR    R1,R3               GET ITS LENGTH
         MVCL  R2,R0               UPDATE INPUT COMMANDS ARRAY
         SPACE
TS0CNCL  XC    RC,RC               ZERO RETURN CODE TO EXTERNALIZE
         MVI   MYDSCB,0            INVALIDATE DSCB STRUCTURE
         NI    STATUS13,255-$13TSO RELINQUISHING CONTROL
         LR    R1,R13              POINT TO LOCAL WORKING STORAGE
         L     R13,4(,R13)         POINT TO CALLER'S SAVE AREA
         OI    11(R13),X'01'       INVALIDATE FORWARD POINTER
         LA    R0,$TSOWKL          GET LOCAL WORKING STORAGE LENGTH
         FREEMAIN RU,LV=(0),A=(1)  FREE LOCAL WORKING STORAGE
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         SR    R15,R15             ZERO LOCAL RETURN CODE
         BR    R14                 RETURN TO CALLER
         SPACE
         DROP  R11                 REVTSO
         TITLE '  R E V T S O   -   S T A T I C   A R E A  '
TS0ARROW DC    CL4'===>'
         DC    0D'0'
@REVTSO  DC    CL8'REVTSO'
#REVTSO  DC    CL8'*RFETSO*'
TS0HEX   DC    CL16'0123456789ABCDEF'
TS0BUF   DC    CL8'REVBUF  '
TS0BLNK  DC    CL8' '
         LTORG
RFETSO   DC    CL11'  RFE TSO  '
TS0TSO   EQU   *-5,4               C'TSO '
         SPACE
         SPACE
         DC    0D'0'               END OF CSECT
         TITLE '  R E V T S O   -   D Y N A M I C   A R E A  '
@TSOWK   DSECT
         DS    18F
TS0ECHO@ DS    A                   SCREEN INPUT AREA ADDRESS
TS0PROF@ DS    A                   PASSED SAVED COMMANDS ADDRESS
TS0RCAL@ DS    A                   ADDRESS OF RECALLED COMMAND
         DS    0D
TS0CMDS  DS    10CL240
         DS    0D                  END OF DSECT
$TSOWKL  EQU   *-@TSOWK
         SPACE
